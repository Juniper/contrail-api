
<!--
      Copyright (c) 2017 Juniper Networks, Inc. All rights reserved.
 -->
<xsd:schema
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:smi="urn:ietf:params:xml:ns:opsawg:smi:base:1.0">

<xsd:complexType name="PlaybookInfoType">
    <xsd:all>
        <xsd:element name="playbook-uri" type="xsd:string" required="true"
                     description="uri to the playbook location on the file server"/>
        <xsd:element name="vendor" type="xsd:string" required="optional"
                     description="Vendor name"/>
        <xsd:element name="device-family" type="xsd:string" required="optional"
                     description="Device family name"/>
    </xsd:all>
</xsd:complexType>

<xsd:complexType name="PlaybookInfoListType">
    <xsd:all>
        <xsd:element name="playbook-info" type="PlaybookInfoType" maxOccurs="unbounded"/>
    </xsd:all>
</xsd:complexType>

<xsd:complexType name="DeviceCredential">
    <xsd:all>
        <xsd:element name="credential" type="UserCredentials" required="true"/>
        <xsd:element name="vendor" type="xsd:string" required="optional"/>
        <xsd:element name="device-family" type="xsd:string" required="optional"/>
    </xsd:all>
</xsd:complexType>

<xsd:complexType name="DeviceCredentialList">
    <xsd:all>
        <xsd:element name="device-credential" type="DeviceCredential" maxOccurs="unbounded"/>
    </xsd:all>
</xsd:complexType>

<xsd:simpleType name="NamespaceType">
     <xsd:restriction base="xsd:string">
         <xsd:enumeration value="IPV4-CIDR"/>
         <xsd:enumeration value="ASN"/>
         <xsd:enumeration value="MAC_ADDR"/>
         <xsd:enumeration value="SERIAL_NUM"/>
     </xsd:restriction>
</xsd:simpleType>

<xsd:complexType name="NamespaceValue">
    <xsd:choice>
        <xsd:element name="ipv4-cidr" type="SubnetListType" required="optional"
             description="Namespace as IPV4 CIDR addresses"/>
        <xsd:element name="asn" type="AutonomousSystemsType" required="optional"
             description="Namespace as Autonomous System Numbers"/>
        <xsd:element name="mac-addr" type="MacAddressesType" required="optional"
             description="Namespace as MAC addresses"/>
        <xsd:element name="serial-num" type="xsd:string" required="optional" maxOccurs="unbounded"
             description="Namespace as MAC addresses"/>
    </xsd:choice>
</xsd:complexType>

<xsd:complexType name="CardType">
    <xsd:all>
        <xsd:element name="name" type="xsd:string" required="true"/>
    </xsd:all>
</xsd:complexType>

<xsd:complexType name="HardwareType">
    <xsd:all>
        <xsd:element name="platform" type="xsd:string" required="true"/>
        <xsd:element name="cards" type="CardsType" required="optional" maxOccurs="unbounded"/>
    </xsd:all>
</xsd:complexType>

<xsd:complexType name="HardwareListType">
    <xsd:element name="hardware" type="HardwareType" maxOccurs="unbounded"/>
</xsd:complexType>

<xsd:element name="job-template" type="ifmap:IdentityType"/>

<xsd:element name="global-system-config-job-template"/>
<!--#IFMAP-SEMANTICS-IDL
          Link('global-system-config-job-template',
             'global-system-config', 'job-template', ['has'], 'optional', 'CRUD',
             'List of job templates supported by the system.') -->

<xsd:element name="job-template-multi-device-job" type="xsd:boolean"/>
<!--#IFMAP-SEMANTICS-IDL
          Property('job-template-multi-device-job', 'job-template', 'required', 'CRUD',
              'if set to true, the "/execute-job" action url allows device list as additional parameter to run the job template on multiple device in one job') -->
<xsd:element name="job-template-playbooks" type="PlaybookInfoListType"/>
<!--#IFMAP-SEMANTICS-IDL
          ListProperty('job-template-playbooks', 'job-template', 'required', 'CRUD',
              'List of vendor specific playbooks that achieve the same functionality on each vendor device. All the vendor specific playbooks listed here share the same input/output schema defined in the job template') -->
<xsd:element name="job-template-input-schema" type="xsd:string"/>
<!--#IFMAP-SEMANTICS-IDL
          Property('job-template-input-schema', 'job-template', 'optional', 'CRUD',
              'JSON schema of the job input parameters which will be used to validate the job input json or generate UI form for user to enter the job parameters. This property stores the JSON schema content as string. Here is an example fo the image upgrade job template input schema:
{
    "$schema": "http://json-schema.org/draft-06/schema#",
    "title": "Image upgrade input",
    "type": "object",
    "properties": {
        "image_uuid": {
            "type": "string"
        }
    },
    "required": ["image_uuid"]
}') -->
<xsd:element name="job-template-output-schema" type="xsd:string"/>
<!--#IFMAP-SEMANTICS-IDL
          Property('job-template-output-schema', 'job-template', 'optional', 'CRUD',
              'JSON schema of the job output that describes the output from the job and could be used by UI to render the output automatically. This property stores the JSON schema content as string.') -->

<xsd:element name="fabric" type="ifmap:IdentityType"/>

<xsd:element name="fabric-virtual-network"/>
<!--#IFMAP-SEMANTICS-IDL
          Link('fabric-virtual-network',
             'fabric', 'virtual-network', ['ref'], 'optional', 'CRUD',
             'Similar to using virtual-machine to model the bare metal server, we are using virtual-network to model various underlay networks such as the management network and IP fabric network. This would allow us the re-use the same IPAM data model and code base to manage the IP auto-assignments for the underlay physical networks.') -->

<xsd:element name="global-system-config-fabric"/>
<!--#IFMAP-SEMANTICS-IDL
          Link('global-system-config-fabric',
             'global-system-config', 'fabric', ['has'], 'optional', 'CRUD',
             'List of fabrics in the system. Each fabric is an administrative domain for all the network devices in one or multiple CLOS.') -->

<xsd:element name="supported-fabric-annotations" type="KeyValuePairs"/>
<!--#IFMAP-SEMANTICS-IDL
          Property('supported-fabric-annotations', 'global-system-config', 'optional', 'CRUD',
              'List of supported annotations that can be used to annotate a Contrail Fabric. These annoations are used as directives, or hints to assign resources defined in namespaces to the network devices. For example, `igp-protocol: ospf` attribute could be used by the underlay provisioning playbook to choose which IGP protocol to use for the IP fabric.') -->

<xsd:element name="fabric-physical-router"/>
<!--#IFMAP-SEMANTICS-IDL
          Link('fabric-physical-router',
             'fabric', 'physical-router', ['ref'], 'optional', 'CRUD',
             'List of physical-routers that belongs to a fabric.') -->

<xsd:element name="fabric-credentials" type="DeviceCredentialList"/>
<!--#IFMAP-SEMANTICS-IDL
          ListProperty('fabric-credentials', 'fabric', 'optional', 'CRUD',
              'List of device credentials to manage the network devices in the fabric.') -->

<xsd:element name="fabric-namespace" type="ifmap:IdentityType"/>

<xsd:element name="fabric-fabric-namespace"/>
<!--#IFMAP-SEMANTICS-IDL
          Link('fabric-fabric-namespace', 'fabric', 'fabric-namespace', ['has'], 'optional', 'CRUD',
             'list of fabric namespaces that define a set of resources that can be used to configure the network devices in the fabric.') -->

<xsd:element name="fabric-namespace-type" type="NamespaceType"/>
<!--#IFMAP-SEMANTICS-IDL
          Property('fabric-namespace-type', 'fabric-namespace', 'optional', 'CRUD',
              'Supported namespace types') -->
<xsd:element name="fabric-namespace-value" type="NamespaceValue"/>
<!--#IFMAP-SEMANTICS-IDL
          Property('fabric-namespace-value', 'fabric-namespace', 'optional', 'CRUD',
              'namespace value of type defined by the namespace-type.') -->

<xsd:element name="node-profile" type="ifmap:IdentityType"
    description="Node profile contains the meta-data to profile/categorize the devices so that a list of supported capabilities/roles by the device are known to the system. For example, we can define a node profile to specify list of capabilities/roles supported by a set of QFX10K devices with certain hardware/software installed. It also contains the default config parameter values for each supported roles/capability. These are the config parameters that are not modeled in the VNC data model. They could be vendor specific config parameters that we allow user to tweak via API or some kind of auto generated UI from job template input schema. The UML diagram for node-profile can be found at https://github.com/jnpr-tjiang/cfm-data-model/blob/master/5.0.1-data-model/images/node_profile.png"/>

<xsd:element name="node-profile-vendor" type="xsd:string"/>
<!--#IFMAP-SEMANTICS-IDL
          Property('node-profile-vendor', 'node-profile', 'required', 'CRUD',
              'Vendor name (e.g. Juniper) that this node profile can be used for.') -->
<xsd:element name="node-profile-device-family" type="xsd:string"/>
<!--#IFMAP-SEMANTICS-IDL
          Property('node-profile-device-family', 'node-profile', 'required', 'CRUD',
              'Device family name that this node profile can be used to match.') -->
<xsd:element name="node-profile-hardware-list" type="HardwareListType"/>
<!--#IFMAP-SEMANTICS-IDL
          Property('node-profile-hardware-list', 'node-profile', 'required', 'CRUD',
              'List of device hardware info that node profile can be used to match.') -->
<xsd:element name="node-profile-physical-roles" type="PhysicalRolesType"/>
<!--#IFMAP-SEMANTICS-IDL
          Property('node-profile-physical-roles', 'node-profile', 'required', 'CRUD',
              'List of capable physical roles supported by the devices that matches one of the hardware list defined in this node profile.') -->
<xsd:element name="node-profile-routing-bridging-roles" type="RoutingBridgingRolesType"/>
<!--#IFMAP-SEMANTICS-IDL
          Property('node-profile-routing-bridging-roles', 'node-profile', 'required', 'CRUD',
              'List of capable routing/bridging roles supported by the devices that matches one of the hardware list defined in this node profile.') -->
<xsd:element name="global-system-config-node-profile"/>
<!--#IFMAP-SEMANTICS-IDL
          Link('global-system-config-node-profile', 'global-system-config', 'node-profile', ['has'], 'optional', 'CRUD',
             'list of node profiles supported by the system.') -->
<xsd:element name="fabric-node-profile"/>
<!--#IFMAP-SEMANTICS-IDL
               Link('fabric-node-profile', 'fabric', 'node-profile', ['ref'], 'optional', 'CRUD',
             'node profiles assignd to the fabric.') -->
<xsd:element name="physical-router-node-profile"/>
<!--#IFMAP-SEMANTICS-IDL
               Link('physical-router-node-profile', 'physical-router', 'node-profile', ['ref'], 'optional', 'CRUD',
             'Node profile assigned to the physical router during device discovery/onboarding.') -->

<xsd:element name="role-config" type="ifmap:IdentityType"
    description="This resource exposes to users additional parameters to configure a specify physical or routing/switching roles. These are the config parameters that are mot modeled in VNC data model and we don't want to hard code in the fabric ansible playbooks. These could be vendor specific parameters or could be extended by the field or customer who might want to tweak the playbooks. The schema for the role config are defined in the job-template.input_schema. This schema could be used by the UI to generically render the form for user to edit the config."/>

<xsd:element name="node-profile-role-config"/>
<!--#IFMAP-SEMANTICS-IDL
               Link('node-profile-role-config', 'node-profile', 'role-config', ['has'], 'optional', 'CRUD',
             'list of role configs for those physical or routing/bridging roles defined in the node-profile.') -->
<xsd:element name="role-config-job-template"/>
<!--#IFMAP-SEMANTICS-IDL
               Link('role-config-job-template', 'role-config', 'job-template', ['ref'], 'optional', 'CRUD',
             'This reference associates the role config to a job-template that contains a playbook that generates device
              specific role config and deploys it to the device. The role-config.config attribtue value must be in JSON
              format and conform to the input_schema defined in the job-template.') -->
<xsd:element name="role-config-config" type="xsd:string"/>
<!--#IFMAP-SEMANTICS-IDL
          Property('role-config-config', 'role-config', 'required', 'CRUD',
              'role config in JSON format. This JSON config must conform to the input-schema of the job template for the role provisioning.') -->

</xsd:schema>
