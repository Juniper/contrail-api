// Code generated by contrailschema tool from template /home/ijohnson/gocode/pkg/mod/github.com/!juniper/asf@v0.0.0-20200409074924-f1fbe5303e00/pkg/services/service_interface.go.tmpl; DO NOT EDIT.

package services

import (
	"context"

	"github.com/Juniper/asf/pkg/services/baseservices"
	"github.com/gogo/protobuf/types"
	"github.com/pkg/errors"

	models "github.com/Juniper/contrail-api-client/api-lib/pkg/models"
)

// TODO(dfurman): move non-template code out of template
// TODO(dfurman): write tests

// Service is a generic service that can be placed in chain.
type Service interface {
	Next() Service
	SetNext(Service)

	ReadWriteService
}

// BaseService is a service that is a link in service chain and has implemented
// all Service methods as noops. Can be embedded in struct to create new service.
type BaseService struct {
	next Service
}

// Next gets next service to call in service chain.
func (service *BaseService) Next() Service {
	return service.next
}

// SetNext sets next service in service chain.
func (service *BaseService) SetNext(next Service) {
	service.next = next
}

// ReadWriteService is an object that has both read and write service methods.
type ReadWriteService interface {
	WriteService
	ReadService
}

type WriteService interface {
	CreateAccessControlList(context.Context, *CreateAccessControlListRequest) (*CreateAccessControlListResponse, error)
	UpdateAccessControlList(context.Context, *UpdateAccessControlListRequest) (*UpdateAccessControlListResponse, error)
	DeleteAccessControlList(context.Context, *DeleteAccessControlListRequest) (*DeleteAccessControlListResponse, error)

	CreateAccessControlListTagRef(context.Context, *CreateAccessControlListTagRefRequest) (*CreateAccessControlListTagRefResponse, error)
	DeleteAccessControlListTagRef(context.Context, *DeleteAccessControlListTagRefRequest) (*DeleteAccessControlListTagRefResponse, error)

	CreateAddressGroup(context.Context, *CreateAddressGroupRequest) (*CreateAddressGroupResponse, error)
	UpdateAddressGroup(context.Context, *UpdateAddressGroupRequest) (*UpdateAddressGroupResponse, error)
	DeleteAddressGroup(context.Context, *DeleteAddressGroupRequest) (*DeleteAddressGroupResponse, error)

	CreateAddressGroupTagRef(context.Context, *CreateAddressGroupTagRefRequest) (*CreateAddressGroupTagRefResponse, error)
	DeleteAddressGroupTagRef(context.Context, *DeleteAddressGroupTagRefRequest) (*DeleteAddressGroupTagRefResponse, error)

	CreateAlarm(context.Context, *CreateAlarmRequest) (*CreateAlarmResponse, error)
	UpdateAlarm(context.Context, *UpdateAlarmRequest) (*UpdateAlarmResponse, error)
	DeleteAlarm(context.Context, *DeleteAlarmRequest) (*DeleteAlarmResponse, error)

	CreateAlarmTagRef(context.Context, *CreateAlarmTagRefRequest) (*CreateAlarmTagRefResponse, error)
	DeleteAlarmTagRef(context.Context, *DeleteAlarmTagRefRequest) (*DeleteAlarmTagRefResponse, error)

	CreateAliasIPPool(context.Context, *CreateAliasIPPoolRequest) (*CreateAliasIPPoolResponse, error)
	UpdateAliasIPPool(context.Context, *UpdateAliasIPPoolRequest) (*UpdateAliasIPPoolResponse, error)
	DeleteAliasIPPool(context.Context, *DeleteAliasIPPoolRequest) (*DeleteAliasIPPoolResponse, error)

	CreateAliasIPPoolTagRef(context.Context, *CreateAliasIPPoolTagRefRequest) (*CreateAliasIPPoolTagRefResponse, error)
	DeleteAliasIPPoolTagRef(context.Context, *DeleteAliasIPPoolTagRefRequest) (*DeleteAliasIPPoolTagRefResponse, error)

	CreateAliasIP(context.Context, *CreateAliasIPRequest) (*CreateAliasIPResponse, error)
	UpdateAliasIP(context.Context, *UpdateAliasIPRequest) (*UpdateAliasIPResponse, error)
	DeleteAliasIP(context.Context, *DeleteAliasIPRequest) (*DeleteAliasIPResponse, error)

	CreateAliasIPProjectRef(context.Context, *CreateAliasIPProjectRefRequest) (*CreateAliasIPProjectRefResponse, error)
	DeleteAliasIPProjectRef(context.Context, *DeleteAliasIPProjectRefRequest) (*DeleteAliasIPProjectRefResponse, error)

	CreateAliasIPVirtualMachineInterfaceRef(context.Context, *CreateAliasIPVirtualMachineInterfaceRefRequest) (*CreateAliasIPVirtualMachineInterfaceRefResponse, error)
	DeleteAliasIPVirtualMachineInterfaceRef(context.Context, *DeleteAliasIPVirtualMachineInterfaceRefRequest) (*DeleteAliasIPVirtualMachineInterfaceRefResponse, error)

	CreateAliasIPTagRef(context.Context, *CreateAliasIPTagRefRequest) (*CreateAliasIPTagRefResponse, error)
	DeleteAliasIPTagRef(context.Context, *DeleteAliasIPTagRefRequest) (*DeleteAliasIPTagRefResponse, error)

	CreateAnalyticsAlarmNode(context.Context, *CreateAnalyticsAlarmNodeRequest) (*CreateAnalyticsAlarmNodeResponse, error)
	UpdateAnalyticsAlarmNode(context.Context, *UpdateAnalyticsAlarmNodeRequest) (*UpdateAnalyticsAlarmNodeResponse, error)
	DeleteAnalyticsAlarmNode(context.Context, *DeleteAnalyticsAlarmNodeRequest) (*DeleteAnalyticsAlarmNodeResponse, error)

	CreateAnalyticsAlarmNodeTagRef(context.Context, *CreateAnalyticsAlarmNodeTagRefRequest) (*CreateAnalyticsAlarmNodeTagRefResponse, error)
	DeleteAnalyticsAlarmNodeTagRef(context.Context, *DeleteAnalyticsAlarmNodeTagRefRequest) (*DeleteAnalyticsAlarmNodeTagRefResponse, error)

	CreateAnalyticsNode(context.Context, *CreateAnalyticsNodeRequest) (*CreateAnalyticsNodeResponse, error)
	UpdateAnalyticsNode(context.Context, *UpdateAnalyticsNodeRequest) (*UpdateAnalyticsNodeResponse, error)
	DeleteAnalyticsNode(context.Context, *DeleteAnalyticsNodeRequest) (*DeleteAnalyticsNodeResponse, error)

	CreateAnalyticsNodeTagRef(context.Context, *CreateAnalyticsNodeTagRefRequest) (*CreateAnalyticsNodeTagRefResponse, error)
	DeleteAnalyticsNodeTagRef(context.Context, *DeleteAnalyticsNodeTagRefRequest) (*DeleteAnalyticsNodeTagRefResponse, error)

	CreateAnalyticsSNMPNode(context.Context, *CreateAnalyticsSNMPNodeRequest) (*CreateAnalyticsSNMPNodeResponse, error)
	UpdateAnalyticsSNMPNode(context.Context, *UpdateAnalyticsSNMPNodeRequest) (*UpdateAnalyticsSNMPNodeResponse, error)
	DeleteAnalyticsSNMPNode(context.Context, *DeleteAnalyticsSNMPNodeRequest) (*DeleteAnalyticsSNMPNodeResponse, error)

	CreateAnalyticsSNMPNodeTagRef(context.Context, *CreateAnalyticsSNMPNodeTagRefRequest) (*CreateAnalyticsSNMPNodeTagRefResponse, error)
	DeleteAnalyticsSNMPNodeTagRef(context.Context, *DeleteAnalyticsSNMPNodeTagRefRequest) (*DeleteAnalyticsSNMPNodeTagRefResponse, error)

	CreateAPIAccessList(context.Context, *CreateAPIAccessListRequest) (*CreateAPIAccessListResponse, error)
	UpdateAPIAccessList(context.Context, *UpdateAPIAccessListRequest) (*UpdateAPIAccessListResponse, error)
	DeleteAPIAccessList(context.Context, *DeleteAPIAccessListRequest) (*DeleteAPIAccessListResponse, error)

	CreateAPIAccessListTagRef(context.Context, *CreateAPIAccessListTagRefRequest) (*CreateAPIAccessListTagRefResponse, error)
	DeleteAPIAccessListTagRef(context.Context, *DeleteAPIAccessListTagRefRequest) (*DeleteAPIAccessListTagRefResponse, error)

	CreateApplicationPolicySet(context.Context, *CreateApplicationPolicySetRequest) (*CreateApplicationPolicySetResponse, error)
	UpdateApplicationPolicySet(context.Context, *UpdateApplicationPolicySetRequest) (*UpdateApplicationPolicySetResponse, error)
	DeleteApplicationPolicySet(context.Context, *DeleteApplicationPolicySetRequest) (*DeleteApplicationPolicySetResponse, error)

	CreateApplicationPolicySetGlobalVrouterConfigRef(context.Context, *CreateApplicationPolicySetGlobalVrouterConfigRefRequest) (*CreateApplicationPolicySetGlobalVrouterConfigRefResponse, error)
	DeleteApplicationPolicySetGlobalVrouterConfigRef(context.Context, *DeleteApplicationPolicySetGlobalVrouterConfigRefRequest) (*DeleteApplicationPolicySetGlobalVrouterConfigRefResponse, error)

	CreateApplicationPolicySetTagRef(context.Context, *CreateApplicationPolicySetTagRefRequest) (*CreateApplicationPolicySetTagRefResponse, error)
	DeleteApplicationPolicySetTagRef(context.Context, *DeleteApplicationPolicySetTagRefRequest) (*DeleteApplicationPolicySetTagRefResponse, error)

	CreateApplicationPolicySetFirewallPolicyRef(context.Context, *CreateApplicationPolicySetFirewallPolicyRefRequest) (*CreateApplicationPolicySetFirewallPolicyRefResponse, error)
	DeleteApplicationPolicySetFirewallPolicyRef(context.Context, *DeleteApplicationPolicySetFirewallPolicyRefRequest) (*DeleteApplicationPolicySetFirewallPolicyRefResponse, error)

	CreateBGPAsAService(context.Context, *CreateBGPAsAServiceRequest) (*CreateBGPAsAServiceResponse, error)
	UpdateBGPAsAService(context.Context, *UpdateBGPAsAServiceRequest) (*UpdateBGPAsAServiceResponse, error)
	DeleteBGPAsAService(context.Context, *DeleteBGPAsAServiceRequest) (*DeleteBGPAsAServiceResponse, error)

	CreateBGPAsAServiceControlNodeZoneRef(context.Context, *CreateBGPAsAServiceControlNodeZoneRefRequest) (*CreateBGPAsAServiceControlNodeZoneRefResponse, error)
	DeleteBGPAsAServiceControlNodeZoneRef(context.Context, *DeleteBGPAsAServiceControlNodeZoneRefRequest) (*DeleteBGPAsAServiceControlNodeZoneRefResponse, error)

	CreateBGPAsAServiceServiceHealthCheckRef(context.Context, *CreateBGPAsAServiceServiceHealthCheckRefRequest) (*CreateBGPAsAServiceServiceHealthCheckRefResponse, error)
	DeleteBGPAsAServiceServiceHealthCheckRef(context.Context, *DeleteBGPAsAServiceServiceHealthCheckRefRequest) (*DeleteBGPAsAServiceServiceHealthCheckRefResponse, error)

	CreateBGPAsAServiceVirtualMachineInterfaceRef(context.Context, *CreateBGPAsAServiceVirtualMachineInterfaceRefRequest) (*CreateBGPAsAServiceVirtualMachineInterfaceRefResponse, error)
	DeleteBGPAsAServiceVirtualMachineInterfaceRef(context.Context, *DeleteBGPAsAServiceVirtualMachineInterfaceRefRequest) (*DeleteBGPAsAServiceVirtualMachineInterfaceRefResponse, error)

	CreateBGPAsAServiceTagRef(context.Context, *CreateBGPAsAServiceTagRefRequest) (*CreateBGPAsAServiceTagRefResponse, error)
	DeleteBGPAsAServiceTagRef(context.Context, *DeleteBGPAsAServiceTagRefRequest) (*DeleteBGPAsAServiceTagRefResponse, error)

	CreateBGPAsAServiceBGPRouterRef(context.Context, *CreateBGPAsAServiceBGPRouterRefRequest) (*CreateBGPAsAServiceBGPRouterRefResponse, error)
	DeleteBGPAsAServiceBGPRouterRef(context.Context, *DeleteBGPAsAServiceBGPRouterRefRequest) (*DeleteBGPAsAServiceBGPRouterRefResponse, error)

	CreateBGPRouter(context.Context, *CreateBGPRouterRequest) (*CreateBGPRouterResponse, error)
	UpdateBGPRouter(context.Context, *UpdateBGPRouterRequest) (*UpdateBGPRouterResponse, error)
	DeleteBGPRouter(context.Context, *DeleteBGPRouterRequest) (*DeleteBGPRouterResponse, error)

	CreateBGPRouterBGPRouterRef(context.Context, *CreateBGPRouterBGPRouterRefRequest) (*CreateBGPRouterBGPRouterRefResponse, error)
	DeleteBGPRouterBGPRouterRef(context.Context, *DeleteBGPRouterBGPRouterRefRequest) (*DeleteBGPRouterBGPRouterRefResponse, error)

	CreateBGPRouterControlNodeZoneRef(context.Context, *CreateBGPRouterControlNodeZoneRefRequest) (*CreateBGPRouterControlNodeZoneRefResponse, error)
	DeleteBGPRouterControlNodeZoneRef(context.Context, *DeleteBGPRouterControlNodeZoneRefRequest) (*DeleteBGPRouterControlNodeZoneRefResponse, error)

	CreateBGPRouterSubClusterRef(context.Context, *CreateBGPRouterSubClusterRefRequest) (*CreateBGPRouterSubClusterRefResponse, error)
	DeleteBGPRouterSubClusterRef(context.Context, *DeleteBGPRouterSubClusterRefRequest) (*DeleteBGPRouterSubClusterRefResponse, error)

	CreateBGPRouterTagRef(context.Context, *CreateBGPRouterTagRefRequest) (*CreateBGPRouterTagRefResponse, error)
	DeleteBGPRouterTagRef(context.Context, *DeleteBGPRouterTagRefRequest) (*DeleteBGPRouterTagRefResponse, error)

	CreateBGPVPN(context.Context, *CreateBGPVPNRequest) (*CreateBGPVPNResponse, error)
	UpdateBGPVPN(context.Context, *UpdateBGPVPNRequest) (*UpdateBGPVPNResponse, error)
	DeleteBGPVPN(context.Context, *DeleteBGPVPNRequest) (*DeleteBGPVPNResponse, error)

	CreateBGPVPNTagRef(context.Context, *CreateBGPVPNTagRefRequest) (*CreateBGPVPNTagRefResponse, error)
	DeleteBGPVPNTagRef(context.Context, *DeleteBGPVPNTagRefRequest) (*DeleteBGPVPNTagRefResponse, error)

	CreateBridgeDomain(context.Context, *CreateBridgeDomainRequest) (*CreateBridgeDomainResponse, error)
	UpdateBridgeDomain(context.Context, *UpdateBridgeDomainRequest) (*UpdateBridgeDomainResponse, error)
	DeleteBridgeDomain(context.Context, *DeleteBridgeDomainRequest) (*DeleteBridgeDomainResponse, error)

	CreateBridgeDomainTagRef(context.Context, *CreateBridgeDomainTagRefRequest) (*CreateBridgeDomainTagRefResponse, error)
	DeleteBridgeDomainTagRef(context.Context, *DeleteBridgeDomainTagRefRequest) (*DeleteBridgeDomainTagRefResponse, error)

	CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error)
	UpdateCard(context.Context, *UpdateCardRequest) (*UpdateCardResponse, error)
	DeleteCard(context.Context, *DeleteCardRequest) (*DeleteCardResponse, error)

	CreateCardTagRef(context.Context, *CreateCardTagRefRequest) (*CreateCardTagRefResponse, error)
	DeleteCardTagRef(context.Context, *DeleteCardTagRefRequest) (*DeleteCardTagRefResponse, error)

	CreateCliConfig(context.Context, *CreateCliConfigRequest) (*CreateCliConfigResponse, error)
	UpdateCliConfig(context.Context, *UpdateCliConfigRequest) (*UpdateCliConfigResponse, error)
	DeleteCliConfig(context.Context, *DeleteCliConfigRequest) (*DeleteCliConfigResponse, error)

	CreateCliConfigTagRef(context.Context, *CreateCliConfigTagRefRequest) (*CreateCliConfigTagRefResponse, error)
	DeleteCliConfigTagRef(context.Context, *DeleteCliConfigTagRefRequest) (*DeleteCliConfigTagRefResponse, error)

	CreateConfigDatabaseNode(context.Context, *CreateConfigDatabaseNodeRequest) (*CreateConfigDatabaseNodeResponse, error)
	UpdateConfigDatabaseNode(context.Context, *UpdateConfigDatabaseNodeRequest) (*UpdateConfigDatabaseNodeResponse, error)
	DeleteConfigDatabaseNode(context.Context, *DeleteConfigDatabaseNodeRequest) (*DeleteConfigDatabaseNodeResponse, error)

	CreateConfigDatabaseNodeTagRef(context.Context, *CreateConfigDatabaseNodeTagRefRequest) (*CreateConfigDatabaseNodeTagRefResponse, error)
	DeleteConfigDatabaseNodeTagRef(context.Context, *DeleteConfigDatabaseNodeTagRefRequest) (*DeleteConfigDatabaseNodeTagRefResponse, error)

	CreateConfigNode(context.Context, *CreateConfigNodeRequest) (*CreateConfigNodeResponse, error)
	UpdateConfigNode(context.Context, *UpdateConfigNodeRequest) (*UpdateConfigNodeResponse, error)
	DeleteConfigNode(context.Context, *DeleteConfigNodeRequest) (*DeleteConfigNodeResponse, error)

	CreateConfigNodeTagRef(context.Context, *CreateConfigNodeTagRefRequest) (*CreateConfigNodeTagRefResponse, error)
	DeleteConfigNodeTagRef(context.Context, *DeleteConfigNodeTagRefRequest) (*DeleteConfigNodeTagRefResponse, error)

	CreateConfigRoot(context.Context, *CreateConfigRootRequest) (*CreateConfigRootResponse, error)
	UpdateConfigRoot(context.Context, *UpdateConfigRootRequest) (*UpdateConfigRootResponse, error)
	DeleteConfigRoot(context.Context, *DeleteConfigRootRequest) (*DeleteConfigRootResponse, error)

	CreateConfigRootTagRef(context.Context, *CreateConfigRootTagRefRequest) (*CreateConfigRootTagRefResponse, error)
	DeleteConfigRootTagRef(context.Context, *DeleteConfigRootTagRefRequest) (*DeleteConfigRootTagRefResponse, error)

	CreateControlNodeZone(context.Context, *CreateControlNodeZoneRequest) (*CreateControlNodeZoneResponse, error)
	UpdateControlNodeZone(context.Context, *UpdateControlNodeZoneRequest) (*UpdateControlNodeZoneResponse, error)
	DeleteControlNodeZone(context.Context, *DeleteControlNodeZoneRequest) (*DeleteControlNodeZoneResponse, error)

	CreateControlNodeZoneTagRef(context.Context, *CreateControlNodeZoneTagRefRequest) (*CreateControlNodeZoneTagRefResponse, error)
	DeleteControlNodeZoneTagRef(context.Context, *DeleteControlNodeZoneTagRefRequest) (*DeleteControlNodeZoneTagRefResponse, error)

	CreateCustomerAttachment(context.Context, *CreateCustomerAttachmentRequest) (*CreateCustomerAttachmentResponse, error)
	UpdateCustomerAttachment(context.Context, *UpdateCustomerAttachmentRequest) (*UpdateCustomerAttachmentResponse, error)
	DeleteCustomerAttachment(context.Context, *DeleteCustomerAttachmentRequest) (*DeleteCustomerAttachmentResponse, error)

	CreateCustomerAttachmentFloatingIPRef(context.Context, *CreateCustomerAttachmentFloatingIPRefRequest) (*CreateCustomerAttachmentFloatingIPRefResponse, error)
	DeleteCustomerAttachmentFloatingIPRef(context.Context, *DeleteCustomerAttachmentFloatingIPRefRequest) (*DeleteCustomerAttachmentFloatingIPRefResponse, error)

	CreateCustomerAttachmentVirtualMachineInterfaceRef(context.Context, *CreateCustomerAttachmentVirtualMachineInterfaceRefRequest) (*CreateCustomerAttachmentVirtualMachineInterfaceRefResponse, error)
	DeleteCustomerAttachmentVirtualMachineInterfaceRef(context.Context, *DeleteCustomerAttachmentVirtualMachineInterfaceRefRequest) (*DeleteCustomerAttachmentVirtualMachineInterfaceRefResponse, error)

	CreateCustomerAttachmentTagRef(context.Context, *CreateCustomerAttachmentTagRefRequest) (*CreateCustomerAttachmentTagRefResponse, error)
	DeleteCustomerAttachmentTagRef(context.Context, *DeleteCustomerAttachmentTagRefRequest) (*DeleteCustomerAttachmentTagRefResponse, error)

	CreateDataCenterInterconnect(context.Context, *CreateDataCenterInterconnectRequest) (*CreateDataCenterInterconnectResponse, error)
	UpdateDataCenterInterconnect(context.Context, *UpdateDataCenterInterconnectRequest) (*UpdateDataCenterInterconnectResponse, error)
	DeleteDataCenterInterconnect(context.Context, *DeleteDataCenterInterconnectRequest) (*DeleteDataCenterInterconnectResponse, error)

	CreateDataCenterInterconnectLogicalRouterRef(context.Context, *CreateDataCenterInterconnectLogicalRouterRefRequest) (*CreateDataCenterInterconnectLogicalRouterRefResponse, error)
	DeleteDataCenterInterconnectLogicalRouterRef(context.Context, *DeleteDataCenterInterconnectLogicalRouterRefRequest) (*DeleteDataCenterInterconnectLogicalRouterRefResponse, error)

	CreateDataCenterInterconnectVirtualNetworkRef(context.Context, *CreateDataCenterInterconnectVirtualNetworkRefRequest) (*CreateDataCenterInterconnectVirtualNetworkRefResponse, error)
	DeleteDataCenterInterconnectVirtualNetworkRef(context.Context, *DeleteDataCenterInterconnectVirtualNetworkRefRequest) (*DeleteDataCenterInterconnectVirtualNetworkRefResponse, error)

	CreateDataCenterInterconnectTagRef(context.Context, *CreateDataCenterInterconnectTagRefRequest) (*CreateDataCenterInterconnectTagRefResponse, error)
	DeleteDataCenterInterconnectTagRef(context.Context, *DeleteDataCenterInterconnectTagRefRequest) (*DeleteDataCenterInterconnectTagRefResponse, error)

	CreateDatabaseNode(context.Context, *CreateDatabaseNodeRequest) (*CreateDatabaseNodeResponse, error)
	UpdateDatabaseNode(context.Context, *UpdateDatabaseNodeRequest) (*UpdateDatabaseNodeResponse, error)
	DeleteDatabaseNode(context.Context, *DeleteDatabaseNodeRequest) (*DeleteDatabaseNodeResponse, error)

	CreateDatabaseNodeTagRef(context.Context, *CreateDatabaseNodeTagRefRequest) (*CreateDatabaseNodeTagRefResponse, error)
	DeleteDatabaseNodeTagRef(context.Context, *DeleteDatabaseNodeTagRefRequest) (*DeleteDatabaseNodeTagRefResponse, error)

	CreateDeviceChassis(context.Context, *CreateDeviceChassisRequest) (*CreateDeviceChassisResponse, error)
	UpdateDeviceChassis(context.Context, *UpdateDeviceChassisRequest) (*UpdateDeviceChassisResponse, error)
	DeleteDeviceChassis(context.Context, *DeleteDeviceChassisRequest) (*DeleteDeviceChassisResponse, error)

	CreateDeviceChassisTagRef(context.Context, *CreateDeviceChassisTagRefRequest) (*CreateDeviceChassisTagRefResponse, error)
	DeleteDeviceChassisTagRef(context.Context, *DeleteDeviceChassisTagRefRequest) (*DeleteDeviceChassisTagRefResponse, error)

	CreateDeviceFunctionalGroup(context.Context, *CreateDeviceFunctionalGroupRequest) (*CreateDeviceFunctionalGroupResponse, error)
	UpdateDeviceFunctionalGroup(context.Context, *UpdateDeviceFunctionalGroupRequest) (*UpdateDeviceFunctionalGroupResponse, error)
	DeleteDeviceFunctionalGroup(context.Context, *DeleteDeviceFunctionalGroupRequest) (*DeleteDeviceFunctionalGroupResponse, error)

	CreateDeviceFunctionalGroupPhysicalRoleRef(context.Context, *CreateDeviceFunctionalGroupPhysicalRoleRefRequest) (*CreateDeviceFunctionalGroupPhysicalRoleRefResponse, error)
	DeleteDeviceFunctionalGroupPhysicalRoleRef(context.Context, *DeleteDeviceFunctionalGroupPhysicalRoleRefRequest) (*DeleteDeviceFunctionalGroupPhysicalRoleRefResponse, error)

	CreateDeviceFunctionalGroupTagRef(context.Context, *CreateDeviceFunctionalGroupTagRefRequest) (*CreateDeviceFunctionalGroupTagRefResponse, error)
	DeleteDeviceFunctionalGroupTagRef(context.Context, *DeleteDeviceFunctionalGroupTagRefRequest) (*DeleteDeviceFunctionalGroupTagRefResponse, error)

	CreateDeviceImage(context.Context, *CreateDeviceImageRequest) (*CreateDeviceImageResponse, error)
	UpdateDeviceImage(context.Context, *UpdateDeviceImageRequest) (*UpdateDeviceImageResponse, error)
	DeleteDeviceImage(context.Context, *DeleteDeviceImageRequest) (*DeleteDeviceImageResponse, error)

	CreateDeviceImageHardwareRef(context.Context, *CreateDeviceImageHardwareRefRequest) (*CreateDeviceImageHardwareRefResponse, error)
	DeleteDeviceImageHardwareRef(context.Context, *DeleteDeviceImageHardwareRefRequest) (*DeleteDeviceImageHardwareRefResponse, error)

	CreateDeviceImageTagRef(context.Context, *CreateDeviceImageTagRefRequest) (*CreateDeviceImageTagRefResponse, error)
	DeleteDeviceImageTagRef(context.Context, *DeleteDeviceImageTagRefRequest) (*DeleteDeviceImageTagRefResponse, error)

	CreateDevicemgrNode(context.Context, *CreateDevicemgrNodeRequest) (*CreateDevicemgrNodeResponse, error)
	UpdateDevicemgrNode(context.Context, *UpdateDevicemgrNodeRequest) (*UpdateDevicemgrNodeResponse, error)
	DeleteDevicemgrNode(context.Context, *DeleteDevicemgrNodeRequest) (*DeleteDevicemgrNodeResponse, error)

	CreateDevicemgrNodeTagRef(context.Context, *CreateDevicemgrNodeTagRefRequest) (*CreateDevicemgrNodeTagRefResponse, error)
	DeleteDevicemgrNodeTagRef(context.Context, *DeleteDevicemgrNodeTagRefRequest) (*DeleteDevicemgrNodeTagRefResponse, error)

	CreateDiscoveryServiceAssignment(context.Context, *CreateDiscoveryServiceAssignmentRequest) (*CreateDiscoveryServiceAssignmentResponse, error)
	UpdateDiscoveryServiceAssignment(context.Context, *UpdateDiscoveryServiceAssignmentRequest) (*UpdateDiscoveryServiceAssignmentResponse, error)
	DeleteDiscoveryServiceAssignment(context.Context, *DeleteDiscoveryServiceAssignmentRequest) (*DeleteDiscoveryServiceAssignmentResponse, error)

	CreateDiscoveryServiceAssignmentTagRef(context.Context, *CreateDiscoveryServiceAssignmentTagRefRequest) (*CreateDiscoveryServiceAssignmentTagRefResponse, error)
	DeleteDiscoveryServiceAssignmentTagRef(context.Context, *DeleteDiscoveryServiceAssignmentTagRefRequest) (*DeleteDiscoveryServiceAssignmentTagRefResponse, error)

	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	UpdateDomain(context.Context, *UpdateDomainRequest) (*UpdateDomainResponse, error)
	DeleteDomain(context.Context, *DeleteDomainRequest) (*DeleteDomainResponse, error)

	CreateDomainTagRef(context.Context, *CreateDomainTagRefRequest) (*CreateDomainTagRefResponse, error)
	DeleteDomainTagRef(context.Context, *DeleteDomainTagRefRequest) (*DeleteDomainTagRefResponse, error)

	CreateDsaRule(context.Context, *CreateDsaRuleRequest) (*CreateDsaRuleResponse, error)
	UpdateDsaRule(context.Context, *UpdateDsaRuleRequest) (*UpdateDsaRuleResponse, error)
	DeleteDsaRule(context.Context, *DeleteDsaRuleRequest) (*DeleteDsaRuleResponse, error)

	CreateDsaRuleTagRef(context.Context, *CreateDsaRuleTagRefRequest) (*CreateDsaRuleTagRefResponse, error)
	DeleteDsaRuleTagRef(context.Context, *DeleteDsaRuleTagRefRequest) (*DeleteDsaRuleTagRefResponse, error)

	CreateE2ServiceProvider(context.Context, *CreateE2ServiceProviderRequest) (*CreateE2ServiceProviderResponse, error)
	UpdateE2ServiceProvider(context.Context, *UpdateE2ServiceProviderRequest) (*UpdateE2ServiceProviderResponse, error)
	DeleteE2ServiceProvider(context.Context, *DeleteE2ServiceProviderRequest) (*DeleteE2ServiceProviderResponse, error)

	CreateE2ServiceProviderPeeringPolicyRef(context.Context, *CreateE2ServiceProviderPeeringPolicyRefRequest) (*CreateE2ServiceProviderPeeringPolicyRefResponse, error)
	DeleteE2ServiceProviderPeeringPolicyRef(context.Context, *DeleteE2ServiceProviderPeeringPolicyRefRequest) (*DeleteE2ServiceProviderPeeringPolicyRefResponse, error)

	CreateE2ServiceProviderPhysicalRouterRef(context.Context, *CreateE2ServiceProviderPhysicalRouterRefRequest) (*CreateE2ServiceProviderPhysicalRouterRefResponse, error)
	DeleteE2ServiceProviderPhysicalRouterRef(context.Context, *DeleteE2ServiceProviderPhysicalRouterRefRequest) (*DeleteE2ServiceProviderPhysicalRouterRefResponse, error)

	CreateE2ServiceProviderTagRef(context.Context, *CreateE2ServiceProviderTagRefRequest) (*CreateE2ServiceProviderTagRefResponse, error)
	DeleteE2ServiceProviderTagRef(context.Context, *DeleteE2ServiceProviderTagRefRequest) (*DeleteE2ServiceProviderTagRefResponse, error)

	CreateFabricNamespace(context.Context, *CreateFabricNamespaceRequest) (*CreateFabricNamespaceResponse, error)
	UpdateFabricNamespace(context.Context, *UpdateFabricNamespaceRequest) (*UpdateFabricNamespaceResponse, error)
	DeleteFabricNamespace(context.Context, *DeleteFabricNamespaceRequest) (*DeleteFabricNamespaceResponse, error)

	CreateFabricNamespaceTagRef(context.Context, *CreateFabricNamespaceTagRefRequest) (*CreateFabricNamespaceTagRefResponse, error)
	DeleteFabricNamespaceTagRef(context.Context, *DeleteFabricNamespaceTagRefRequest) (*DeleteFabricNamespaceTagRefResponse, error)

	CreateFabric(context.Context, *CreateFabricRequest) (*CreateFabricResponse, error)
	UpdateFabric(context.Context, *UpdateFabricRequest) (*UpdateFabricResponse, error)
	DeleteFabric(context.Context, *DeleteFabricRequest) (*DeleteFabricResponse, error)

	CreateFabricVirtualNetworkRef(context.Context, *CreateFabricVirtualNetworkRefRequest) (*CreateFabricVirtualNetworkRefResponse, error)
	DeleteFabricVirtualNetworkRef(context.Context, *DeleteFabricVirtualNetworkRefRequest) (*DeleteFabricVirtualNetworkRefResponse, error)

	CreateFabricTagRef(context.Context, *CreateFabricTagRefRequest) (*CreateFabricTagRefResponse, error)
	DeleteFabricTagRef(context.Context, *DeleteFabricTagRefRequest) (*DeleteFabricTagRefResponse, error)

	CreateFabricIntentMapRef(context.Context, *CreateFabricIntentMapRefRequest) (*CreateFabricIntentMapRefResponse, error)
	DeleteFabricIntentMapRef(context.Context, *DeleteFabricIntentMapRefRequest) (*DeleteFabricIntentMapRefResponse, error)

	CreateFabricNodeProfileRef(context.Context, *CreateFabricNodeProfileRefRequest) (*CreateFabricNodeProfileRefResponse, error)
	DeleteFabricNodeProfileRef(context.Context, *DeleteFabricNodeProfileRefRequest) (*DeleteFabricNodeProfileRefResponse, error)

	CreateFeatureConfig(context.Context, *CreateFeatureConfigRequest) (*CreateFeatureConfigResponse, error)
	UpdateFeatureConfig(context.Context, *UpdateFeatureConfigRequest) (*UpdateFeatureConfigResponse, error)
	DeleteFeatureConfig(context.Context, *DeleteFeatureConfigRequest) (*DeleteFeatureConfigResponse, error)

	CreateFeatureConfigTagRef(context.Context, *CreateFeatureConfigTagRefRequest) (*CreateFeatureConfigTagRefResponse, error)
	DeleteFeatureConfigTagRef(context.Context, *DeleteFeatureConfigTagRefRequest) (*DeleteFeatureConfigTagRefResponse, error)

	CreateFeatureFlag(context.Context, *CreateFeatureFlagRequest) (*CreateFeatureFlagResponse, error)
	UpdateFeatureFlag(context.Context, *UpdateFeatureFlagRequest) (*UpdateFeatureFlagResponse, error)
	DeleteFeatureFlag(context.Context, *DeleteFeatureFlagRequest) (*DeleteFeatureFlagResponse, error)

	CreateFeatureFlagTagRef(context.Context, *CreateFeatureFlagTagRefRequest) (*CreateFeatureFlagTagRefResponse, error)
	DeleteFeatureFlagTagRef(context.Context, *DeleteFeatureFlagTagRefRequest) (*DeleteFeatureFlagTagRefResponse, error)

	CreateFeature(context.Context, *CreateFeatureRequest) (*CreateFeatureResponse, error)
	UpdateFeature(context.Context, *UpdateFeatureRequest) (*UpdateFeatureResponse, error)
	DeleteFeature(context.Context, *DeleteFeatureRequest) (*DeleteFeatureResponse, error)

	CreateFeatureFeatureRef(context.Context, *CreateFeatureFeatureRefRequest) (*CreateFeatureFeatureRefResponse, error)
	DeleteFeatureFeatureRef(context.Context, *DeleteFeatureFeatureRefRequest) (*DeleteFeatureFeatureRefResponse, error)

	CreateFeatureTagRef(context.Context, *CreateFeatureTagRefRequest) (*CreateFeatureTagRefResponse, error)
	DeleteFeatureTagRef(context.Context, *DeleteFeatureTagRefRequest) (*DeleteFeatureTagRefResponse, error)

	CreateFirewallPolicy(context.Context, *CreateFirewallPolicyRequest) (*CreateFirewallPolicyResponse, error)
	UpdateFirewallPolicy(context.Context, *UpdateFirewallPolicyRequest) (*UpdateFirewallPolicyResponse, error)
	DeleteFirewallPolicy(context.Context, *DeleteFirewallPolicyRequest) (*DeleteFirewallPolicyResponse, error)

	CreateFirewallPolicyFirewallRuleRef(context.Context, *CreateFirewallPolicyFirewallRuleRefRequest) (*CreateFirewallPolicyFirewallRuleRefResponse, error)
	DeleteFirewallPolicyFirewallRuleRef(context.Context, *DeleteFirewallPolicyFirewallRuleRefRequest) (*DeleteFirewallPolicyFirewallRuleRefResponse, error)

	CreateFirewallPolicySecurityLoggingObjectRef(context.Context, *CreateFirewallPolicySecurityLoggingObjectRefRequest) (*CreateFirewallPolicySecurityLoggingObjectRefResponse, error)
	DeleteFirewallPolicySecurityLoggingObjectRef(context.Context, *DeleteFirewallPolicySecurityLoggingObjectRefRequest) (*DeleteFirewallPolicySecurityLoggingObjectRefResponse, error)

	CreateFirewallPolicyTagRef(context.Context, *CreateFirewallPolicyTagRefRequest) (*CreateFirewallPolicyTagRefResponse, error)
	DeleteFirewallPolicyTagRef(context.Context, *DeleteFirewallPolicyTagRefRequest) (*DeleteFirewallPolicyTagRefResponse, error)

	CreateFirewallRule(context.Context, *CreateFirewallRuleRequest) (*CreateFirewallRuleResponse, error)
	UpdateFirewallRule(context.Context, *UpdateFirewallRuleRequest) (*UpdateFirewallRuleResponse, error)
	DeleteFirewallRule(context.Context, *DeleteFirewallRuleRequest) (*DeleteFirewallRuleResponse, error)

	CreateFirewallRuleVirtualNetworkRef(context.Context, *CreateFirewallRuleVirtualNetworkRefRequest) (*CreateFirewallRuleVirtualNetworkRefResponse, error)
	DeleteFirewallRuleVirtualNetworkRef(context.Context, *DeleteFirewallRuleVirtualNetworkRefRequest) (*DeleteFirewallRuleVirtualNetworkRefResponse, error)

	CreateFirewallRuleTagRef(context.Context, *CreateFirewallRuleTagRefRequest) (*CreateFirewallRuleTagRefResponse, error)
	DeleteFirewallRuleTagRef(context.Context, *DeleteFirewallRuleTagRefRequest) (*DeleteFirewallRuleTagRefResponse, error)

	CreateFirewallRuleAddressGroupRef(context.Context, *CreateFirewallRuleAddressGroupRefRequest) (*CreateFirewallRuleAddressGroupRefResponse, error)
	DeleteFirewallRuleAddressGroupRef(context.Context, *DeleteFirewallRuleAddressGroupRefRequest) (*DeleteFirewallRuleAddressGroupRefResponse, error)

	CreateFirewallRuleSecurityLoggingObjectRef(context.Context, *CreateFirewallRuleSecurityLoggingObjectRefRequest) (*CreateFirewallRuleSecurityLoggingObjectRefResponse, error)
	DeleteFirewallRuleSecurityLoggingObjectRef(context.Context, *DeleteFirewallRuleSecurityLoggingObjectRefRequest) (*DeleteFirewallRuleSecurityLoggingObjectRefResponse, error)

	CreateFirewallRuleServiceGroupRef(context.Context, *CreateFirewallRuleServiceGroupRefRequest) (*CreateFirewallRuleServiceGroupRefResponse, error)
	DeleteFirewallRuleServiceGroupRef(context.Context, *DeleteFirewallRuleServiceGroupRefRequest) (*DeleteFirewallRuleServiceGroupRefResponse, error)

	CreateFloatingIPPool(context.Context, *CreateFloatingIPPoolRequest) (*CreateFloatingIPPoolResponse, error)
	UpdateFloatingIPPool(context.Context, *UpdateFloatingIPPoolRequest) (*UpdateFloatingIPPoolResponse, error)
	DeleteFloatingIPPool(context.Context, *DeleteFloatingIPPoolRequest) (*DeleteFloatingIPPoolResponse, error)

	CreateFloatingIPPoolTagRef(context.Context, *CreateFloatingIPPoolTagRefRequest) (*CreateFloatingIPPoolTagRefResponse, error)
	DeleteFloatingIPPoolTagRef(context.Context, *DeleteFloatingIPPoolTagRefRequest) (*DeleteFloatingIPPoolTagRefResponse, error)

	CreateFloatingIP(context.Context, *CreateFloatingIPRequest) (*CreateFloatingIPResponse, error)
	UpdateFloatingIP(context.Context, *UpdateFloatingIPRequest) (*UpdateFloatingIPResponse, error)
	DeleteFloatingIP(context.Context, *DeleteFloatingIPRequest) (*DeleteFloatingIPResponse, error)

	CreateFloatingIPProjectRef(context.Context, *CreateFloatingIPProjectRefRequest) (*CreateFloatingIPProjectRefResponse, error)
	DeleteFloatingIPProjectRef(context.Context, *DeleteFloatingIPProjectRefRequest) (*DeleteFloatingIPProjectRefResponse, error)

	CreateFloatingIPVirtualMachineInterfaceRef(context.Context, *CreateFloatingIPVirtualMachineInterfaceRefRequest) (*CreateFloatingIPVirtualMachineInterfaceRefResponse, error)
	DeleteFloatingIPVirtualMachineInterfaceRef(context.Context, *DeleteFloatingIPVirtualMachineInterfaceRefRequest) (*DeleteFloatingIPVirtualMachineInterfaceRefResponse, error)

	CreateFloatingIPTagRef(context.Context, *CreateFloatingIPTagRefRequest) (*CreateFloatingIPTagRefResponse, error)
	DeleteFloatingIPTagRef(context.Context, *DeleteFloatingIPTagRefRequest) (*DeleteFloatingIPTagRefResponse, error)

	CreateFlowNode(context.Context, *CreateFlowNodeRequest) (*CreateFlowNodeResponse, error)
	UpdateFlowNode(context.Context, *UpdateFlowNodeRequest) (*UpdateFlowNodeResponse, error)
	DeleteFlowNode(context.Context, *DeleteFlowNodeRequest) (*DeleteFlowNodeResponse, error)

	CreateFlowNodeTagRef(context.Context, *CreateFlowNodeTagRefRequest) (*CreateFlowNodeTagRefResponse, error)
	DeleteFlowNodeTagRef(context.Context, *DeleteFlowNodeTagRefRequest) (*DeleteFlowNodeTagRefResponse, error)

	CreateFlowNodeVirtualNetworkRef(context.Context, *CreateFlowNodeVirtualNetworkRefRequest) (*CreateFlowNodeVirtualNetworkRefResponse, error)
	DeleteFlowNodeVirtualNetworkRef(context.Context, *DeleteFlowNodeVirtualNetworkRefRequest) (*DeleteFlowNodeVirtualNetworkRefResponse, error)

	CreateForwardingClass(context.Context, *CreateForwardingClassRequest) (*CreateForwardingClassResponse, error)
	UpdateForwardingClass(context.Context, *UpdateForwardingClassRequest) (*UpdateForwardingClassResponse, error)
	DeleteForwardingClass(context.Context, *DeleteForwardingClassRequest) (*DeleteForwardingClassResponse, error)

	CreateForwardingClassTagRef(context.Context, *CreateForwardingClassTagRefRequest) (*CreateForwardingClassTagRefResponse, error)
	DeleteForwardingClassTagRef(context.Context, *DeleteForwardingClassTagRefRequest) (*DeleteForwardingClassTagRefResponse, error)

	CreateForwardingClassQosQueueRef(context.Context, *CreateForwardingClassQosQueueRefRequest) (*CreateForwardingClassQosQueueRefResponse, error)
	DeleteForwardingClassQosQueueRef(context.Context, *DeleteForwardingClassQosQueueRefRequest) (*DeleteForwardingClassQosQueueRefResponse, error)

	CreateGlobalAnalyticsConfig(context.Context, *CreateGlobalAnalyticsConfigRequest) (*CreateGlobalAnalyticsConfigResponse, error)
	UpdateGlobalAnalyticsConfig(context.Context, *UpdateGlobalAnalyticsConfigRequest) (*UpdateGlobalAnalyticsConfigResponse, error)
	DeleteGlobalAnalyticsConfig(context.Context, *DeleteGlobalAnalyticsConfigRequest) (*DeleteGlobalAnalyticsConfigResponse, error)

	CreateGlobalAnalyticsConfigTagRef(context.Context, *CreateGlobalAnalyticsConfigTagRefRequest) (*CreateGlobalAnalyticsConfigTagRefResponse, error)
	DeleteGlobalAnalyticsConfigTagRef(context.Context, *DeleteGlobalAnalyticsConfigTagRefRequest) (*DeleteGlobalAnalyticsConfigTagRefResponse, error)

	CreateGlobalQosConfig(context.Context, *CreateGlobalQosConfigRequest) (*CreateGlobalQosConfigResponse, error)
	UpdateGlobalQosConfig(context.Context, *UpdateGlobalQosConfigRequest) (*UpdateGlobalQosConfigResponse, error)
	DeleteGlobalQosConfig(context.Context, *DeleteGlobalQosConfigRequest) (*DeleteGlobalQosConfigResponse, error)

	CreateGlobalQosConfigTagRef(context.Context, *CreateGlobalQosConfigTagRefRequest) (*CreateGlobalQosConfigTagRefResponse, error)
	DeleteGlobalQosConfigTagRef(context.Context, *DeleteGlobalQosConfigTagRefRequest) (*DeleteGlobalQosConfigTagRefResponse, error)

	CreateGlobalSystemConfig(context.Context, *CreateGlobalSystemConfigRequest) (*CreateGlobalSystemConfigResponse, error)
	UpdateGlobalSystemConfig(context.Context, *UpdateGlobalSystemConfigRequest) (*UpdateGlobalSystemConfigResponse, error)
	DeleteGlobalSystemConfig(context.Context, *DeleteGlobalSystemConfigRequest) (*DeleteGlobalSystemConfigResponse, error)

	CreateGlobalSystemConfigBGPRouterRef(context.Context, *CreateGlobalSystemConfigBGPRouterRefRequest) (*CreateGlobalSystemConfigBGPRouterRefResponse, error)
	DeleteGlobalSystemConfigBGPRouterRef(context.Context, *DeleteGlobalSystemConfigBGPRouterRefRequest) (*DeleteGlobalSystemConfigBGPRouterRefResponse, error)

	CreateGlobalSystemConfigTagRef(context.Context, *CreateGlobalSystemConfigTagRefRequest) (*CreateGlobalSystemConfigTagRefResponse, error)
	DeleteGlobalSystemConfigTagRef(context.Context, *DeleteGlobalSystemConfigTagRefRequest) (*DeleteGlobalSystemConfigTagRefResponse, error)

	CreateGlobalVrouterConfig(context.Context, *CreateGlobalVrouterConfigRequest) (*CreateGlobalVrouterConfigResponse, error)
	UpdateGlobalVrouterConfig(context.Context, *UpdateGlobalVrouterConfigRequest) (*UpdateGlobalVrouterConfigResponse, error)
	DeleteGlobalVrouterConfig(context.Context, *DeleteGlobalVrouterConfigRequest) (*DeleteGlobalVrouterConfigResponse, error)

	CreateGlobalVrouterConfigTagRef(context.Context, *CreateGlobalVrouterConfigTagRefRequest) (*CreateGlobalVrouterConfigTagRefResponse, error)
	DeleteGlobalVrouterConfigTagRef(context.Context, *DeleteGlobalVrouterConfigTagRefRequest) (*DeleteGlobalVrouterConfigTagRefResponse, error)

	CreateHardwareInventory(context.Context, *CreateHardwareInventoryRequest) (*CreateHardwareInventoryResponse, error)
	UpdateHardwareInventory(context.Context, *UpdateHardwareInventoryRequest) (*UpdateHardwareInventoryResponse, error)
	DeleteHardwareInventory(context.Context, *DeleteHardwareInventoryRequest) (*DeleteHardwareInventoryResponse, error)

	CreateHardwareInventoryTagRef(context.Context, *CreateHardwareInventoryTagRefRequest) (*CreateHardwareInventoryTagRefResponse, error)
	DeleteHardwareInventoryTagRef(context.Context, *DeleteHardwareInventoryTagRefRequest) (*DeleteHardwareInventoryTagRefResponse, error)

	CreateHardware(context.Context, *CreateHardwareRequest) (*CreateHardwareResponse, error)
	UpdateHardware(context.Context, *UpdateHardwareRequest) (*UpdateHardwareResponse, error)
	DeleteHardware(context.Context, *DeleteHardwareRequest) (*DeleteHardwareResponse, error)

	CreateHardwareCardRef(context.Context, *CreateHardwareCardRefRequest) (*CreateHardwareCardRefResponse, error)
	DeleteHardwareCardRef(context.Context, *DeleteHardwareCardRefRequest) (*DeleteHardwareCardRefResponse, error)

	CreateHardwareTagRef(context.Context, *CreateHardwareTagRefRequest) (*CreateHardwareTagRefResponse, error)
	DeleteHardwareTagRef(context.Context, *DeleteHardwareTagRefRequest) (*DeleteHardwareTagRefResponse, error)

	CreateHostBasedService(context.Context, *CreateHostBasedServiceRequest) (*CreateHostBasedServiceResponse, error)
	UpdateHostBasedService(context.Context, *UpdateHostBasedServiceRequest) (*UpdateHostBasedServiceResponse, error)
	DeleteHostBasedService(context.Context, *DeleteHostBasedServiceRequest) (*DeleteHostBasedServiceResponse, error)

	CreateHostBasedServiceVirtualNetworkRef(context.Context, *CreateHostBasedServiceVirtualNetworkRefRequest) (*CreateHostBasedServiceVirtualNetworkRefResponse, error)
	DeleteHostBasedServiceVirtualNetworkRef(context.Context, *DeleteHostBasedServiceVirtualNetworkRefRequest) (*DeleteHostBasedServiceVirtualNetworkRefResponse, error)

	CreateHostBasedServiceTagRef(context.Context, *CreateHostBasedServiceTagRefRequest) (*CreateHostBasedServiceTagRefResponse, error)
	DeleteHostBasedServiceTagRef(context.Context, *DeleteHostBasedServiceTagRefRequest) (*DeleteHostBasedServiceTagRefResponse, error)

	CreateInstanceIP(context.Context, *CreateInstanceIPRequest) (*CreateInstanceIPResponse, error)
	UpdateInstanceIP(context.Context, *UpdateInstanceIPRequest) (*UpdateInstanceIPResponse, error)
	DeleteInstanceIP(context.Context, *DeleteInstanceIPRequest) (*DeleteInstanceIPResponse, error)

	CreateInstanceIPVirtualNetworkRef(context.Context, *CreateInstanceIPVirtualNetworkRefRequest) (*CreateInstanceIPVirtualNetworkRefResponse, error)
	DeleteInstanceIPVirtualNetworkRef(context.Context, *DeleteInstanceIPVirtualNetworkRefRequest) (*DeleteInstanceIPVirtualNetworkRefResponse, error)

	CreateInstanceIPVirtualRouterRef(context.Context, *CreateInstanceIPVirtualRouterRefRequest) (*CreateInstanceIPVirtualRouterRefResponse, error)
	DeleteInstanceIPVirtualRouterRef(context.Context, *DeleteInstanceIPVirtualRouterRefRequest) (*DeleteInstanceIPVirtualRouterRefResponse, error)

	CreateInstanceIPTagRef(context.Context, *CreateInstanceIPTagRefRequest) (*CreateInstanceIPTagRefResponse, error)
	DeleteInstanceIPTagRef(context.Context, *DeleteInstanceIPTagRefRequest) (*DeleteInstanceIPTagRefResponse, error)

	CreateInstanceIPFlowNodeRef(context.Context, *CreateInstanceIPFlowNodeRefRequest) (*CreateInstanceIPFlowNodeRefResponse, error)
	DeleteInstanceIPFlowNodeRef(context.Context, *DeleteInstanceIPFlowNodeRefRequest) (*DeleteInstanceIPFlowNodeRefResponse, error)

	CreateInstanceIPLogicalInterfaceRef(context.Context, *CreateInstanceIPLogicalInterfaceRefRequest) (*CreateInstanceIPLogicalInterfaceRefResponse, error)
	DeleteInstanceIPLogicalInterfaceRef(context.Context, *DeleteInstanceIPLogicalInterfaceRefRequest) (*DeleteInstanceIPLogicalInterfaceRefResponse, error)

	CreateInstanceIPNetworkIpamRef(context.Context, *CreateInstanceIPNetworkIpamRefRequest) (*CreateInstanceIPNetworkIpamRefResponse, error)
	DeleteInstanceIPNetworkIpamRef(context.Context, *DeleteInstanceIPNetworkIpamRefRequest) (*DeleteInstanceIPNetworkIpamRefResponse, error)

	CreateInstanceIPPhysicalRouterRef(context.Context, *CreateInstanceIPPhysicalRouterRefRequest) (*CreateInstanceIPPhysicalRouterRefResponse, error)
	DeleteInstanceIPPhysicalRouterRef(context.Context, *DeleteInstanceIPPhysicalRouterRefRequest) (*DeleteInstanceIPPhysicalRouterRefResponse, error)

	CreateInstanceIPVirtualMachineInterfaceRef(context.Context, *CreateInstanceIPVirtualMachineInterfaceRefRequest) (*CreateInstanceIPVirtualMachineInterfaceRefResponse, error)
	DeleteInstanceIPVirtualMachineInterfaceRef(context.Context, *DeleteInstanceIPVirtualMachineInterfaceRefRequest) (*DeleteInstanceIPVirtualMachineInterfaceRefResponse, error)

	CreateIntentMap(context.Context, *CreateIntentMapRequest) (*CreateIntentMapResponse, error)
	UpdateIntentMap(context.Context, *UpdateIntentMapRequest) (*UpdateIntentMapResponse, error)
	DeleteIntentMap(context.Context, *DeleteIntentMapRequest) (*DeleteIntentMapResponse, error)

	CreateIntentMapTagRef(context.Context, *CreateIntentMapTagRefRequest) (*CreateIntentMapTagRefResponse, error)
	DeleteIntentMapTagRef(context.Context, *DeleteIntentMapTagRefRequest) (*DeleteIntentMapTagRefResponse, error)

	CreateInterfaceRouteTable(context.Context, *CreateInterfaceRouteTableRequest) (*CreateInterfaceRouteTableResponse, error)
	UpdateInterfaceRouteTable(context.Context, *UpdateInterfaceRouteTableRequest) (*UpdateInterfaceRouteTableResponse, error)
	DeleteInterfaceRouteTable(context.Context, *DeleteInterfaceRouteTableRequest) (*DeleteInterfaceRouteTableResponse, error)

	CreateInterfaceRouteTableServiceInstanceRef(context.Context, *CreateInterfaceRouteTableServiceInstanceRefRequest) (*CreateInterfaceRouteTableServiceInstanceRefResponse, error)
	DeleteInterfaceRouteTableServiceInstanceRef(context.Context, *DeleteInterfaceRouteTableServiceInstanceRefRequest) (*DeleteInterfaceRouteTableServiceInstanceRefResponse, error)

	CreateInterfaceRouteTableTagRef(context.Context, *CreateInterfaceRouteTableTagRefRequest) (*CreateInterfaceRouteTableTagRefResponse, error)
	DeleteInterfaceRouteTableTagRef(context.Context, *DeleteInterfaceRouteTableTagRefRequest) (*DeleteInterfaceRouteTableTagRefResponse, error)

	CreateJobTemplate(context.Context, *CreateJobTemplateRequest) (*CreateJobTemplateResponse, error)
	UpdateJobTemplate(context.Context, *UpdateJobTemplateRequest) (*UpdateJobTemplateResponse, error)
	DeleteJobTemplate(context.Context, *DeleteJobTemplateRequest) (*DeleteJobTemplateResponse, error)

	CreateJobTemplateTagRef(context.Context, *CreateJobTemplateTagRefRequest) (*CreateJobTemplateTagRefResponse, error)
	DeleteJobTemplateTagRef(context.Context, *DeleteJobTemplateTagRefRequest) (*DeleteJobTemplateTagRefResponse, error)

	CreateLinkAggregationGroup(context.Context, *CreateLinkAggregationGroupRequest) (*CreateLinkAggregationGroupResponse, error)
	UpdateLinkAggregationGroup(context.Context, *UpdateLinkAggregationGroupRequest) (*UpdateLinkAggregationGroupResponse, error)
	DeleteLinkAggregationGroup(context.Context, *DeleteLinkAggregationGroupRequest) (*DeleteLinkAggregationGroupResponse, error)

	CreateLinkAggregationGroupPhysicalInterfaceRef(context.Context, *CreateLinkAggregationGroupPhysicalInterfaceRefRequest) (*CreateLinkAggregationGroupPhysicalInterfaceRefResponse, error)
	DeleteLinkAggregationGroupPhysicalInterfaceRef(context.Context, *DeleteLinkAggregationGroupPhysicalInterfaceRefRequest) (*DeleteLinkAggregationGroupPhysicalInterfaceRefResponse, error)

	CreateLinkAggregationGroupVirtualMachineInterfaceRef(context.Context, *CreateLinkAggregationGroupVirtualMachineInterfaceRefRequest) (*CreateLinkAggregationGroupVirtualMachineInterfaceRefResponse, error)
	DeleteLinkAggregationGroupVirtualMachineInterfaceRef(context.Context, *DeleteLinkAggregationGroupVirtualMachineInterfaceRefRequest) (*DeleteLinkAggregationGroupVirtualMachineInterfaceRefResponse, error)

	CreateLinkAggregationGroupTagRef(context.Context, *CreateLinkAggregationGroupTagRefRequest) (*CreateLinkAggregationGroupTagRefResponse, error)
	DeleteLinkAggregationGroupTagRef(context.Context, *DeleteLinkAggregationGroupTagRefRequest) (*DeleteLinkAggregationGroupTagRefResponse, error)

	CreateLoadbalancerHealthmonitor(context.Context, *CreateLoadbalancerHealthmonitorRequest) (*CreateLoadbalancerHealthmonitorResponse, error)
	UpdateLoadbalancerHealthmonitor(context.Context, *UpdateLoadbalancerHealthmonitorRequest) (*UpdateLoadbalancerHealthmonitorResponse, error)
	DeleteLoadbalancerHealthmonitor(context.Context, *DeleteLoadbalancerHealthmonitorRequest) (*DeleteLoadbalancerHealthmonitorResponse, error)

	CreateLoadbalancerHealthmonitorTagRef(context.Context, *CreateLoadbalancerHealthmonitorTagRefRequest) (*CreateLoadbalancerHealthmonitorTagRefResponse, error)
	DeleteLoadbalancerHealthmonitorTagRef(context.Context, *DeleteLoadbalancerHealthmonitorTagRefRequest) (*DeleteLoadbalancerHealthmonitorTagRefResponse, error)

	CreateLoadbalancerListener(context.Context, *CreateLoadbalancerListenerRequest) (*CreateLoadbalancerListenerResponse, error)
	UpdateLoadbalancerListener(context.Context, *UpdateLoadbalancerListenerRequest) (*UpdateLoadbalancerListenerResponse, error)
	DeleteLoadbalancerListener(context.Context, *DeleteLoadbalancerListenerRequest) (*DeleteLoadbalancerListenerResponse, error)

	CreateLoadbalancerListenerLoadbalancerRef(context.Context, *CreateLoadbalancerListenerLoadbalancerRefRequest) (*CreateLoadbalancerListenerLoadbalancerRefResponse, error)
	DeleteLoadbalancerListenerLoadbalancerRef(context.Context, *DeleteLoadbalancerListenerLoadbalancerRefRequest) (*DeleteLoadbalancerListenerLoadbalancerRefResponse, error)

	CreateLoadbalancerListenerTagRef(context.Context, *CreateLoadbalancerListenerTagRefRequest) (*CreateLoadbalancerListenerTagRefResponse, error)
	DeleteLoadbalancerListenerTagRef(context.Context, *DeleteLoadbalancerListenerTagRefRequest) (*DeleteLoadbalancerListenerTagRefResponse, error)

	CreateLoadbalancerMember(context.Context, *CreateLoadbalancerMemberRequest) (*CreateLoadbalancerMemberResponse, error)
	UpdateLoadbalancerMember(context.Context, *UpdateLoadbalancerMemberRequest) (*UpdateLoadbalancerMemberResponse, error)
	DeleteLoadbalancerMember(context.Context, *DeleteLoadbalancerMemberRequest) (*DeleteLoadbalancerMemberResponse, error)

	CreateLoadbalancerMemberTagRef(context.Context, *CreateLoadbalancerMemberTagRefRequest) (*CreateLoadbalancerMemberTagRefResponse, error)
	DeleteLoadbalancerMemberTagRef(context.Context, *DeleteLoadbalancerMemberTagRefRequest) (*DeleteLoadbalancerMemberTagRefResponse, error)

	CreateLoadbalancerPool(context.Context, *CreateLoadbalancerPoolRequest) (*CreateLoadbalancerPoolResponse, error)
	UpdateLoadbalancerPool(context.Context, *UpdateLoadbalancerPoolRequest) (*UpdateLoadbalancerPoolResponse, error)
	DeleteLoadbalancerPool(context.Context, *DeleteLoadbalancerPoolRequest) (*DeleteLoadbalancerPoolResponse, error)

	CreateLoadbalancerPoolVirtualMachineInterfaceRef(context.Context, *CreateLoadbalancerPoolVirtualMachineInterfaceRefRequest) (*CreateLoadbalancerPoolVirtualMachineInterfaceRefResponse, error)
	DeleteLoadbalancerPoolVirtualMachineInterfaceRef(context.Context, *DeleteLoadbalancerPoolVirtualMachineInterfaceRefRequest) (*DeleteLoadbalancerPoolVirtualMachineInterfaceRefResponse, error)

	CreateLoadbalancerPoolTagRef(context.Context, *CreateLoadbalancerPoolTagRefRequest) (*CreateLoadbalancerPoolTagRefResponse, error)
	DeleteLoadbalancerPoolTagRef(context.Context, *DeleteLoadbalancerPoolTagRefRequest) (*DeleteLoadbalancerPoolTagRefResponse, error)

	CreateLoadbalancerPoolLoadbalancerHealthmonitorRef(context.Context, *CreateLoadbalancerPoolLoadbalancerHealthmonitorRefRequest) (*CreateLoadbalancerPoolLoadbalancerHealthmonitorRefResponse, error)
	DeleteLoadbalancerPoolLoadbalancerHealthmonitorRef(context.Context, *DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefRequest) (*DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefResponse, error)

	CreateLoadbalancerPoolLoadbalancerListenerRef(context.Context, *CreateLoadbalancerPoolLoadbalancerListenerRefRequest) (*CreateLoadbalancerPoolLoadbalancerListenerRefResponse, error)
	DeleteLoadbalancerPoolLoadbalancerListenerRef(context.Context, *DeleteLoadbalancerPoolLoadbalancerListenerRefRequest) (*DeleteLoadbalancerPoolLoadbalancerListenerRefResponse, error)

	CreateLoadbalancerPoolServiceApplianceSetRef(context.Context, *CreateLoadbalancerPoolServiceApplianceSetRefRequest) (*CreateLoadbalancerPoolServiceApplianceSetRefResponse, error)
	DeleteLoadbalancerPoolServiceApplianceSetRef(context.Context, *DeleteLoadbalancerPoolServiceApplianceSetRefRequest) (*DeleteLoadbalancerPoolServiceApplianceSetRefResponse, error)

	CreateLoadbalancerPoolServiceInstanceRef(context.Context, *CreateLoadbalancerPoolServiceInstanceRefRequest) (*CreateLoadbalancerPoolServiceInstanceRefResponse, error)
	DeleteLoadbalancerPoolServiceInstanceRef(context.Context, *DeleteLoadbalancerPoolServiceInstanceRefRequest) (*DeleteLoadbalancerPoolServiceInstanceRefResponse, error)

	CreateLoadbalancer(context.Context, *CreateLoadbalancerRequest) (*CreateLoadbalancerResponse, error)
	UpdateLoadbalancer(context.Context, *UpdateLoadbalancerRequest) (*UpdateLoadbalancerResponse, error)
	DeleteLoadbalancer(context.Context, *DeleteLoadbalancerRequest) (*DeleteLoadbalancerResponse, error)

	CreateLoadbalancerServiceApplianceSetRef(context.Context, *CreateLoadbalancerServiceApplianceSetRefRequest) (*CreateLoadbalancerServiceApplianceSetRefResponse, error)
	DeleteLoadbalancerServiceApplianceSetRef(context.Context, *DeleteLoadbalancerServiceApplianceSetRefRequest) (*DeleteLoadbalancerServiceApplianceSetRefResponse, error)

	CreateLoadbalancerServiceInstanceRef(context.Context, *CreateLoadbalancerServiceInstanceRefRequest) (*CreateLoadbalancerServiceInstanceRefResponse, error)
	DeleteLoadbalancerServiceInstanceRef(context.Context, *DeleteLoadbalancerServiceInstanceRefRequest) (*DeleteLoadbalancerServiceInstanceRefResponse, error)

	CreateLoadbalancerVirtualMachineInterfaceRef(context.Context, *CreateLoadbalancerVirtualMachineInterfaceRefRequest) (*CreateLoadbalancerVirtualMachineInterfaceRefResponse, error)
	DeleteLoadbalancerVirtualMachineInterfaceRef(context.Context, *DeleteLoadbalancerVirtualMachineInterfaceRefRequest) (*DeleteLoadbalancerVirtualMachineInterfaceRefResponse, error)

	CreateLoadbalancerTagRef(context.Context, *CreateLoadbalancerTagRefRequest) (*CreateLoadbalancerTagRefResponse, error)
	DeleteLoadbalancerTagRef(context.Context, *DeleteLoadbalancerTagRefRequest) (*DeleteLoadbalancerTagRefResponse, error)

	CreateLogicalInterface(context.Context, *CreateLogicalInterfaceRequest) (*CreateLogicalInterfaceResponse, error)
	UpdateLogicalInterface(context.Context, *UpdateLogicalInterfaceRequest) (*UpdateLogicalInterfaceResponse, error)
	DeleteLogicalInterface(context.Context, *DeleteLogicalInterfaceRequest) (*DeleteLogicalInterfaceResponse, error)

	CreateLogicalInterfaceTagRef(context.Context, *CreateLogicalInterfaceTagRefRequest) (*CreateLogicalInterfaceTagRefResponse, error)
	DeleteLogicalInterfaceTagRef(context.Context, *DeleteLogicalInterfaceTagRefRequest) (*DeleteLogicalInterfaceTagRefResponse, error)

	CreateLogicalInterfaceVirtualMachineInterfaceRef(context.Context, *CreateLogicalInterfaceVirtualMachineInterfaceRefRequest) (*CreateLogicalInterfaceVirtualMachineInterfaceRefResponse, error)
	DeleteLogicalInterfaceVirtualMachineInterfaceRef(context.Context, *DeleteLogicalInterfaceVirtualMachineInterfaceRefRequest) (*DeleteLogicalInterfaceVirtualMachineInterfaceRefResponse, error)

	CreateLogicalRouter(context.Context, *CreateLogicalRouterRequest) (*CreateLogicalRouterResponse, error)
	UpdateLogicalRouter(context.Context, *UpdateLogicalRouterRequest) (*UpdateLogicalRouterResponse, error)
	DeleteLogicalRouter(context.Context, *DeleteLogicalRouterRequest) (*DeleteLogicalRouterResponse, error)

	CreateLogicalRouterVirtualMachineInterfaceRef(context.Context, *CreateLogicalRouterVirtualMachineInterfaceRefRequest) (*CreateLogicalRouterVirtualMachineInterfaceRefResponse, error)
	DeleteLogicalRouterVirtualMachineInterfaceRef(context.Context, *DeleteLogicalRouterVirtualMachineInterfaceRefRequest) (*DeleteLogicalRouterVirtualMachineInterfaceRefResponse, error)

	CreateLogicalRouterVirtualNetworkRef(context.Context, *CreateLogicalRouterVirtualNetworkRefRequest) (*CreateLogicalRouterVirtualNetworkRefResponse, error)
	DeleteLogicalRouterVirtualNetworkRef(context.Context, *DeleteLogicalRouterVirtualNetworkRefRequest) (*DeleteLogicalRouterVirtualNetworkRefResponse, error)

	CreateLogicalRouterTagRef(context.Context, *CreateLogicalRouterTagRefRequest) (*CreateLogicalRouterTagRefResponse, error)
	DeleteLogicalRouterTagRef(context.Context, *DeleteLogicalRouterTagRefRequest) (*DeleteLogicalRouterTagRefResponse, error)

	CreateLogicalRouterBGPVPNRef(context.Context, *CreateLogicalRouterBGPVPNRefRequest) (*CreateLogicalRouterBGPVPNRefResponse, error)
	DeleteLogicalRouterBGPVPNRef(context.Context, *DeleteLogicalRouterBGPVPNRefRequest) (*DeleteLogicalRouterBGPVPNRefResponse, error)

	CreateLogicalRouterPhysicalRouterRef(context.Context, *CreateLogicalRouterPhysicalRouterRefRequest) (*CreateLogicalRouterPhysicalRouterRefResponse, error)
	DeleteLogicalRouterPhysicalRouterRef(context.Context, *DeleteLogicalRouterPhysicalRouterRefRequest) (*DeleteLogicalRouterPhysicalRouterRefResponse, error)

	CreateLogicalRouterRouteTableRef(context.Context, *CreateLogicalRouterRouteTableRefRequest) (*CreateLogicalRouterRouteTableRefResponse, error)
	DeleteLogicalRouterRouteTableRef(context.Context, *DeleteLogicalRouterRouteTableRefRequest) (*DeleteLogicalRouterRouteTableRefResponse, error)

	CreateLogicalRouterRouteTargetRef(context.Context, *CreateLogicalRouterRouteTargetRefRequest) (*CreateLogicalRouterRouteTargetRefResponse, error)
	DeleteLogicalRouterRouteTargetRef(context.Context, *DeleteLogicalRouterRouteTargetRefRequest) (*DeleteLogicalRouterRouteTargetRefResponse, error)

	CreateLogicalRouterServiceInstanceRef(context.Context, *CreateLogicalRouterServiceInstanceRefRequest) (*CreateLogicalRouterServiceInstanceRefResponse, error)
	DeleteLogicalRouterServiceInstanceRef(context.Context, *DeleteLogicalRouterServiceInstanceRefRequest) (*DeleteLogicalRouterServiceInstanceRefResponse, error)

	CreateMulticastPolicy(context.Context, *CreateMulticastPolicyRequest) (*CreateMulticastPolicyResponse, error)
	UpdateMulticastPolicy(context.Context, *UpdateMulticastPolicyRequest) (*UpdateMulticastPolicyResponse, error)
	DeleteMulticastPolicy(context.Context, *DeleteMulticastPolicyRequest) (*DeleteMulticastPolicyResponse, error)

	CreateMulticastPolicyTagRef(context.Context, *CreateMulticastPolicyTagRefRequest) (*CreateMulticastPolicyTagRefResponse, error)
	DeleteMulticastPolicyTagRef(context.Context, *DeleteMulticastPolicyTagRefRequest) (*DeleteMulticastPolicyTagRefResponse, error)

	CreateNamespace(context.Context, *CreateNamespaceRequest) (*CreateNamespaceResponse, error)
	UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error)
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)

	CreateNamespaceTagRef(context.Context, *CreateNamespaceTagRefRequest) (*CreateNamespaceTagRefResponse, error)
	DeleteNamespaceTagRef(context.Context, *DeleteNamespaceTagRefRequest) (*DeleteNamespaceTagRefResponse, error)

	CreateNetworkDeviceConfig(context.Context, *CreateNetworkDeviceConfigRequest) (*CreateNetworkDeviceConfigResponse, error)
	UpdateNetworkDeviceConfig(context.Context, *UpdateNetworkDeviceConfigRequest) (*UpdateNetworkDeviceConfigResponse, error)
	DeleteNetworkDeviceConfig(context.Context, *DeleteNetworkDeviceConfigRequest) (*DeleteNetworkDeviceConfigResponse, error)

	CreateNetworkDeviceConfigPhysicalRouterRef(context.Context, *CreateNetworkDeviceConfigPhysicalRouterRefRequest) (*CreateNetworkDeviceConfigPhysicalRouterRefResponse, error)
	DeleteNetworkDeviceConfigPhysicalRouterRef(context.Context, *DeleteNetworkDeviceConfigPhysicalRouterRefRequest) (*DeleteNetworkDeviceConfigPhysicalRouterRefResponse, error)

	CreateNetworkDeviceConfigTagRef(context.Context, *CreateNetworkDeviceConfigTagRefRequest) (*CreateNetworkDeviceConfigTagRefResponse, error)
	DeleteNetworkDeviceConfigTagRef(context.Context, *DeleteNetworkDeviceConfigTagRefRequest) (*DeleteNetworkDeviceConfigTagRefResponse, error)

	CreateNetworkIpam(context.Context, *CreateNetworkIpamRequest) (*CreateNetworkIpamResponse, error)
	UpdateNetworkIpam(context.Context, *UpdateNetworkIpamRequest) (*UpdateNetworkIpamResponse, error)
	DeleteNetworkIpam(context.Context, *DeleteNetworkIpamRequest) (*DeleteNetworkIpamResponse, error)

	CreateNetworkIpamVirtualDNSRef(context.Context, *CreateNetworkIpamVirtualDNSRefRequest) (*CreateNetworkIpamVirtualDNSRefResponse, error)
	DeleteNetworkIpamVirtualDNSRef(context.Context, *DeleteNetworkIpamVirtualDNSRefRequest) (*DeleteNetworkIpamVirtualDNSRefResponse, error)

	CreateNetworkIpamTagRef(context.Context, *CreateNetworkIpamTagRefRequest) (*CreateNetworkIpamTagRefResponse, error)
	DeleteNetworkIpamTagRef(context.Context, *DeleteNetworkIpamTagRefRequest) (*DeleteNetworkIpamTagRefResponse, error)

	CreateNetworkPolicy(context.Context, *CreateNetworkPolicyRequest) (*CreateNetworkPolicyResponse, error)
	UpdateNetworkPolicy(context.Context, *UpdateNetworkPolicyRequest) (*UpdateNetworkPolicyResponse, error)
	DeleteNetworkPolicy(context.Context, *DeleteNetworkPolicyRequest) (*DeleteNetworkPolicyResponse, error)

	CreateNetworkPolicyTagRef(context.Context, *CreateNetworkPolicyTagRefRequest) (*CreateNetworkPolicyTagRefResponse, error)
	DeleteNetworkPolicyTagRef(context.Context, *DeleteNetworkPolicyTagRefRequest) (*DeleteNetworkPolicyTagRefResponse, error)

	CreateNodeProfile(context.Context, *CreateNodeProfileRequest) (*CreateNodeProfileResponse, error)
	UpdateNodeProfile(context.Context, *UpdateNodeProfileRequest) (*UpdateNodeProfileResponse, error)
	DeleteNodeProfile(context.Context, *DeleteNodeProfileRequest) (*DeleteNodeProfileResponse, error)

	CreateNodeProfileRoleDefinitionRef(context.Context, *CreateNodeProfileRoleDefinitionRefRequest) (*CreateNodeProfileRoleDefinitionRefResponse, error)
	DeleteNodeProfileRoleDefinitionRef(context.Context, *DeleteNodeProfileRoleDefinitionRefRequest) (*DeleteNodeProfileRoleDefinitionRefResponse, error)

	CreateNodeProfileTagRef(context.Context, *CreateNodeProfileTagRefRequest) (*CreateNodeProfileTagRefResponse, error)
	DeleteNodeProfileTagRef(context.Context, *DeleteNodeProfileTagRefRequest) (*DeleteNodeProfileTagRefResponse, error)

	CreateNodeProfileHardwareRef(context.Context, *CreateNodeProfileHardwareRefRequest) (*CreateNodeProfileHardwareRefResponse, error)
	DeleteNodeProfileHardwareRef(context.Context, *DeleteNodeProfileHardwareRefRequest) (*DeleteNodeProfileHardwareRefResponse, error)

	CreateNodeProfileJobTemplateRef(context.Context, *CreateNodeProfileJobTemplateRefRequest) (*CreateNodeProfileJobTemplateRefResponse, error)
	DeleteNodeProfileJobTemplateRef(context.Context, *DeleteNodeProfileJobTemplateRefRequest) (*DeleteNodeProfileJobTemplateRefResponse, error)

	CreateNode(context.Context, *CreateNodeRequest) (*CreateNodeResponse, error)
	UpdateNode(context.Context, *UpdateNodeRequest) (*UpdateNodeResponse, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error)

	CreateNodeNodeProfileRef(context.Context, *CreateNodeNodeProfileRefRequest) (*CreateNodeNodeProfileRefResponse, error)
	DeleteNodeNodeProfileRef(context.Context, *DeleteNodeNodeProfileRefRequest) (*DeleteNodeNodeProfileRefResponse, error)

	CreateNodeTagRef(context.Context, *CreateNodeTagRefRequest) (*CreateNodeTagRefResponse, error)
	DeleteNodeTagRef(context.Context, *DeleteNodeTagRefRequest) (*DeleteNodeTagRefResponse, error)

	CreateOverlayRole(context.Context, *CreateOverlayRoleRequest) (*CreateOverlayRoleResponse, error)
	UpdateOverlayRole(context.Context, *UpdateOverlayRoleRequest) (*UpdateOverlayRoleResponse, error)
	DeleteOverlayRole(context.Context, *DeleteOverlayRoleRequest) (*DeleteOverlayRoleResponse, error)

	CreateOverlayRoleTagRef(context.Context, *CreateOverlayRoleTagRefRequest) (*CreateOverlayRoleTagRefResponse, error)
	DeleteOverlayRoleTagRef(context.Context, *DeleteOverlayRoleTagRefRequest) (*DeleteOverlayRoleTagRefResponse, error)

	CreatePeeringPolicy(context.Context, *CreatePeeringPolicyRequest) (*CreatePeeringPolicyResponse, error)
	UpdatePeeringPolicy(context.Context, *UpdatePeeringPolicyRequest) (*UpdatePeeringPolicyResponse, error)
	DeletePeeringPolicy(context.Context, *DeletePeeringPolicyRequest) (*DeletePeeringPolicyResponse, error)

	CreatePeeringPolicyTagRef(context.Context, *CreatePeeringPolicyTagRefRequest) (*CreatePeeringPolicyTagRefResponse, error)
	DeletePeeringPolicyTagRef(context.Context, *DeletePeeringPolicyTagRefRequest) (*DeletePeeringPolicyTagRefResponse, error)

	CreatePhysicalInterface(context.Context, *CreatePhysicalInterfaceRequest) (*CreatePhysicalInterfaceResponse, error)
	UpdatePhysicalInterface(context.Context, *UpdatePhysicalInterfaceRequest) (*UpdatePhysicalInterfaceResponse, error)
	DeletePhysicalInterface(context.Context, *DeletePhysicalInterfaceRequest) (*DeletePhysicalInterfaceResponse, error)

	CreatePhysicalInterfacePhysicalInterfaceRef(context.Context, *CreatePhysicalInterfacePhysicalInterfaceRefRequest) (*CreatePhysicalInterfacePhysicalInterfaceRefResponse, error)
	DeletePhysicalInterfacePhysicalInterfaceRef(context.Context, *DeletePhysicalInterfacePhysicalInterfaceRefRequest) (*DeletePhysicalInterfacePhysicalInterfaceRefResponse, error)

	CreatePhysicalInterfacePortRef(context.Context, *CreatePhysicalInterfacePortRefRequest) (*CreatePhysicalInterfacePortRefResponse, error)
	DeletePhysicalInterfacePortRef(context.Context, *DeletePhysicalInterfacePortRefRequest) (*DeletePhysicalInterfacePortRefResponse, error)

	CreatePhysicalInterfaceTagRef(context.Context, *CreatePhysicalInterfaceTagRefRequest) (*CreatePhysicalInterfaceTagRefResponse, error)
	DeletePhysicalInterfaceTagRef(context.Context, *DeletePhysicalInterfaceTagRefRequest) (*DeletePhysicalInterfaceTagRefResponse, error)

	CreatePhysicalRole(context.Context, *CreatePhysicalRoleRequest) (*CreatePhysicalRoleResponse, error)
	UpdatePhysicalRole(context.Context, *UpdatePhysicalRoleRequest) (*UpdatePhysicalRoleResponse, error)
	DeletePhysicalRole(context.Context, *DeletePhysicalRoleRequest) (*DeletePhysicalRoleResponse, error)

	CreatePhysicalRoleTagRef(context.Context, *CreatePhysicalRoleTagRefRequest) (*CreatePhysicalRoleTagRefResponse, error)
	DeletePhysicalRoleTagRef(context.Context, *DeletePhysicalRoleTagRefRequest) (*DeletePhysicalRoleTagRefResponse, error)

	CreatePhysicalRouter(context.Context, *CreatePhysicalRouterRequest) (*CreatePhysicalRouterResponse, error)
	UpdatePhysicalRouter(context.Context, *UpdatePhysicalRouterRequest) (*UpdatePhysicalRouterResponse, error)
	DeletePhysicalRouter(context.Context, *DeletePhysicalRouterRequest) (*DeletePhysicalRouterResponse, error)

	CreatePhysicalRouterNodeProfileRef(context.Context, *CreatePhysicalRouterNodeProfileRefRequest) (*CreatePhysicalRouterNodeProfileRefResponse, error)
	DeletePhysicalRouterNodeProfileRef(context.Context, *DeletePhysicalRouterNodeProfileRefRequest) (*DeletePhysicalRouterNodeProfileRefResponse, error)

	CreatePhysicalRouterTelemetryProfileRef(context.Context, *CreatePhysicalRouterTelemetryProfileRefRequest) (*CreatePhysicalRouterTelemetryProfileRefResponse, error)
	DeletePhysicalRouterTelemetryProfileRef(context.Context, *DeletePhysicalRouterTelemetryProfileRefRequest) (*DeletePhysicalRouterTelemetryProfileRefResponse, error)

	CreatePhysicalRouterVirtualNetworkRef(context.Context, *CreatePhysicalRouterVirtualNetworkRefRequest) (*CreatePhysicalRouterVirtualNetworkRefResponse, error)
	DeletePhysicalRouterVirtualNetworkRef(context.Context, *DeletePhysicalRouterVirtualNetworkRefRequest) (*DeletePhysicalRouterVirtualNetworkRefResponse, error)

	CreatePhysicalRouterVirtualRouterRef(context.Context, *CreatePhysicalRouterVirtualRouterRefRequest) (*CreatePhysicalRouterVirtualRouterRefResponse, error)
	DeletePhysicalRouterVirtualRouterRef(context.Context, *DeletePhysicalRouterVirtualRouterRefRequest) (*DeletePhysicalRouterVirtualRouterRefResponse, error)

	CreatePhysicalRouterBGPRouterRef(context.Context, *CreatePhysicalRouterBGPRouterRefRequest) (*CreatePhysicalRouterBGPRouterRefResponse, error)
	DeletePhysicalRouterBGPRouterRef(context.Context, *DeletePhysicalRouterBGPRouterRefRequest) (*DeletePhysicalRouterBGPRouterRefResponse, error)

	CreatePhysicalRouterDeviceChassisRef(context.Context, *CreatePhysicalRouterDeviceChassisRefRequest) (*CreatePhysicalRouterDeviceChassisRefResponse, error)
	DeletePhysicalRouterDeviceChassisRef(context.Context, *DeletePhysicalRouterDeviceChassisRefRequest) (*DeletePhysicalRouterDeviceChassisRefResponse, error)

	CreatePhysicalRouterDeviceImageRef(context.Context, *CreatePhysicalRouterDeviceImageRefRequest) (*CreatePhysicalRouterDeviceImageRefResponse, error)
	DeletePhysicalRouterDeviceImageRef(context.Context, *DeletePhysicalRouterDeviceImageRefRequest) (*DeletePhysicalRouterDeviceImageRefResponse, error)

	CreatePhysicalRouterIntentMapRef(context.Context, *CreatePhysicalRouterIntentMapRefRequest) (*CreatePhysicalRouterIntentMapRefResponse, error)
	DeletePhysicalRouterIntentMapRef(context.Context, *DeletePhysicalRouterIntentMapRefRequest) (*DeletePhysicalRouterIntentMapRefResponse, error)

	CreatePhysicalRouterOverlayRoleRef(context.Context, *CreatePhysicalRouterOverlayRoleRefRequest) (*CreatePhysicalRouterOverlayRoleRefResponse, error)
	DeletePhysicalRouterOverlayRoleRef(context.Context, *DeletePhysicalRouterOverlayRoleRefRequest) (*DeletePhysicalRouterOverlayRoleRefResponse, error)

	CreatePhysicalRouterPhysicalRoleRef(context.Context, *CreatePhysicalRouterPhysicalRoleRefRequest) (*CreatePhysicalRouterPhysicalRoleRefResponse, error)
	DeletePhysicalRouterPhysicalRoleRef(context.Context, *DeletePhysicalRouterPhysicalRoleRefRequest) (*DeletePhysicalRouterPhysicalRoleRefResponse, error)

	CreatePhysicalRouterFabricRef(context.Context, *CreatePhysicalRouterFabricRefRequest) (*CreatePhysicalRouterFabricRefResponse, error)
	DeletePhysicalRouterFabricRef(context.Context, *DeletePhysicalRouterFabricRefRequest) (*DeletePhysicalRouterFabricRefResponse, error)

	CreatePhysicalRouterDeviceFunctionalGroupRef(context.Context, *CreatePhysicalRouterDeviceFunctionalGroupRefRequest) (*CreatePhysicalRouterDeviceFunctionalGroupRefResponse, error)
	DeletePhysicalRouterDeviceFunctionalGroupRef(context.Context, *DeletePhysicalRouterDeviceFunctionalGroupRefRequest) (*DeletePhysicalRouterDeviceFunctionalGroupRefResponse, error)

	CreatePhysicalRouterTagRef(context.Context, *CreatePhysicalRouterTagRefRequest) (*CreatePhysicalRouterTagRefResponse, error)
	DeletePhysicalRouterTagRef(context.Context, *DeletePhysicalRouterTagRefRequest) (*DeletePhysicalRouterTagRefResponse, error)

	CreatePolicyManagement(context.Context, *CreatePolicyManagementRequest) (*CreatePolicyManagementResponse, error)
	UpdatePolicyManagement(context.Context, *UpdatePolicyManagementRequest) (*UpdatePolicyManagementResponse, error)
	DeletePolicyManagement(context.Context, *DeletePolicyManagementRequest) (*DeletePolicyManagementResponse, error)

	CreatePolicyManagementTagRef(context.Context, *CreatePolicyManagementTagRefRequest) (*CreatePolicyManagementTagRefResponse, error)
	DeletePolicyManagementTagRef(context.Context, *DeletePolicyManagementTagRefRequest) (*DeletePolicyManagementTagRefResponse, error)

	CreatePortGroup(context.Context, *CreatePortGroupRequest) (*CreatePortGroupResponse, error)
	UpdatePortGroup(context.Context, *UpdatePortGroupRequest) (*UpdatePortGroupResponse, error)
	DeletePortGroup(context.Context, *DeletePortGroupRequest) (*DeletePortGroupResponse, error)

	CreatePortGroupPortRef(context.Context, *CreatePortGroupPortRefRequest) (*CreatePortGroupPortRefResponse, error)
	DeletePortGroupPortRef(context.Context, *DeletePortGroupPortRefRequest) (*DeletePortGroupPortRefResponse, error)

	CreatePortGroupTagRef(context.Context, *CreatePortGroupTagRefRequest) (*CreatePortGroupTagRefResponse, error)
	DeletePortGroupTagRef(context.Context, *DeletePortGroupTagRefRequest) (*DeletePortGroupTagRefResponse, error)

	CreatePortProfile(context.Context, *CreatePortProfileRequest) (*CreatePortProfileResponse, error)
	UpdatePortProfile(context.Context, *UpdatePortProfileRequest) (*UpdatePortProfileResponse, error)
	DeletePortProfile(context.Context, *DeletePortProfileRequest) (*DeletePortProfileResponse, error)

	CreatePortProfileTagRef(context.Context, *CreatePortProfileTagRefRequest) (*CreatePortProfileTagRefResponse, error)
	DeletePortProfileTagRef(context.Context, *DeletePortProfileTagRefRequest) (*DeletePortProfileTagRefResponse, error)

	CreatePortProfileStormControlProfileRef(context.Context, *CreatePortProfileStormControlProfileRefRequest) (*CreatePortProfileStormControlProfileRefResponse, error)
	DeletePortProfileStormControlProfileRef(context.Context, *DeletePortProfileStormControlProfileRefRequest) (*DeletePortProfileStormControlProfileRefResponse, error)

	CreatePort(context.Context, *CreatePortRequest) (*CreatePortResponse, error)
	UpdatePort(context.Context, *UpdatePortRequest) (*UpdatePortResponse, error)
	DeletePort(context.Context, *DeletePortRequest) (*DeletePortResponse, error)

	CreatePortTagRef(context.Context, *CreatePortTagRefRequest) (*CreatePortTagRefResponse, error)
	DeletePortTagRef(context.Context, *DeletePortTagRefRequest) (*DeletePortTagRefResponse, error)

	CreatePortTuple(context.Context, *CreatePortTupleRequest) (*CreatePortTupleResponse, error)
	UpdatePortTuple(context.Context, *UpdatePortTupleRequest) (*UpdatePortTupleResponse, error)
	DeletePortTuple(context.Context, *DeletePortTupleRequest) (*DeletePortTupleResponse, error)

	CreatePortTupleLogicalRouterRef(context.Context, *CreatePortTupleLogicalRouterRefRequest) (*CreatePortTupleLogicalRouterRefResponse, error)
	DeletePortTupleLogicalRouterRef(context.Context, *DeletePortTupleLogicalRouterRefRequest) (*DeletePortTupleLogicalRouterRefResponse, error)

	CreatePortTupleVirtualNetworkRef(context.Context, *CreatePortTupleVirtualNetworkRefRequest) (*CreatePortTupleVirtualNetworkRefResponse, error)
	DeletePortTupleVirtualNetworkRef(context.Context, *DeletePortTupleVirtualNetworkRefRequest) (*DeletePortTupleVirtualNetworkRefResponse, error)

	CreatePortTupleTagRef(context.Context, *CreatePortTupleTagRefRequest) (*CreatePortTupleTagRefResponse, error)
	DeletePortTupleTagRef(context.Context, *DeletePortTupleTagRefRequest) (*DeletePortTupleTagRefResponse, error)

	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)

	CreateProjectFloatingIPPoolRef(context.Context, *CreateProjectFloatingIPPoolRefRequest) (*CreateProjectFloatingIPPoolRefResponse, error)
	DeleteProjectFloatingIPPoolRef(context.Context, *DeleteProjectFloatingIPPoolRefRequest) (*DeleteProjectFloatingIPPoolRefResponse, error)

	CreateProjectNamespaceRef(context.Context, *CreateProjectNamespaceRefRequest) (*CreateProjectNamespaceRefResponse, error)
	DeleteProjectNamespaceRef(context.Context, *DeleteProjectNamespaceRefRequest) (*DeleteProjectNamespaceRefResponse, error)

	CreateProjectTagRef(context.Context, *CreateProjectTagRefRequest) (*CreateProjectTagRefResponse, error)
	DeleteProjectTagRef(context.Context, *DeleteProjectTagRefRequest) (*DeleteProjectTagRefResponse, error)

	CreateProjectAliasIPPoolRef(context.Context, *CreateProjectAliasIPPoolRefRequest) (*CreateProjectAliasIPPoolRefResponse, error)
	DeleteProjectAliasIPPoolRef(context.Context, *DeleteProjectAliasIPPoolRefRequest) (*DeleteProjectAliasIPPoolRefResponse, error)

	CreateProjectApplicationPolicySetRef(context.Context, *CreateProjectApplicationPolicySetRefRequest) (*CreateProjectApplicationPolicySetRefResponse, error)
	DeleteProjectApplicationPolicySetRef(context.Context, *DeleteProjectApplicationPolicySetRefRequest) (*DeleteProjectApplicationPolicySetRefResponse, error)

	CreateProviderAttachment(context.Context, *CreateProviderAttachmentRequest) (*CreateProviderAttachmentResponse, error)
	UpdateProviderAttachment(context.Context, *UpdateProviderAttachmentRequest) (*UpdateProviderAttachmentResponse, error)
	DeleteProviderAttachment(context.Context, *DeleteProviderAttachmentRequest) (*DeleteProviderAttachmentResponse, error)

	CreateProviderAttachmentVirtualRouterRef(context.Context, *CreateProviderAttachmentVirtualRouterRefRequest) (*CreateProviderAttachmentVirtualRouterRefResponse, error)
	DeleteProviderAttachmentVirtualRouterRef(context.Context, *DeleteProviderAttachmentVirtualRouterRefRequest) (*DeleteProviderAttachmentVirtualRouterRefResponse, error)

	CreateProviderAttachmentTagRef(context.Context, *CreateProviderAttachmentTagRefRequest) (*CreateProviderAttachmentTagRefResponse, error)
	DeleteProviderAttachmentTagRef(context.Context, *DeleteProviderAttachmentTagRefRequest) (*DeleteProviderAttachmentTagRefResponse, error)

	CreateQosConfig(context.Context, *CreateQosConfigRequest) (*CreateQosConfigResponse, error)
	UpdateQosConfig(context.Context, *UpdateQosConfigRequest) (*UpdateQosConfigResponse, error)
	DeleteQosConfig(context.Context, *DeleteQosConfigRequest) (*DeleteQosConfigResponse, error)

	CreateQosConfigTagRef(context.Context, *CreateQosConfigTagRefRequest) (*CreateQosConfigTagRefResponse, error)
	DeleteQosConfigTagRef(context.Context, *DeleteQosConfigTagRefRequest) (*DeleteQosConfigTagRefResponse, error)

	CreateQosConfigGlobalSystemConfigRef(context.Context, *CreateQosConfigGlobalSystemConfigRefRequest) (*CreateQosConfigGlobalSystemConfigRefResponse, error)
	DeleteQosConfigGlobalSystemConfigRef(context.Context, *DeleteQosConfigGlobalSystemConfigRefRequest) (*DeleteQosConfigGlobalSystemConfigRefResponse, error)

	CreateQosQueue(context.Context, *CreateQosQueueRequest) (*CreateQosQueueResponse, error)
	UpdateQosQueue(context.Context, *UpdateQosQueueRequest) (*UpdateQosQueueResponse, error)
	DeleteQosQueue(context.Context, *DeleteQosQueueRequest) (*DeleteQosQueueResponse, error)

	CreateQosQueueTagRef(context.Context, *CreateQosQueueTagRefRequest) (*CreateQosQueueTagRefResponse, error)
	DeleteQosQueueTagRef(context.Context, *DeleteQosQueueTagRefRequest) (*DeleteQosQueueTagRefResponse, error)

	CreateRoleConfig(context.Context, *CreateRoleConfigRequest) (*CreateRoleConfigResponse, error)
	UpdateRoleConfig(context.Context, *UpdateRoleConfigRequest) (*UpdateRoleConfigResponse, error)
	DeleteRoleConfig(context.Context, *DeleteRoleConfigRequest) (*DeleteRoleConfigResponse, error)

	CreateRoleConfigTagRef(context.Context, *CreateRoleConfigTagRefRequest) (*CreateRoleConfigTagRefResponse, error)
	DeleteRoleConfigTagRef(context.Context, *DeleteRoleConfigTagRefRequest) (*DeleteRoleConfigTagRefResponse, error)

	CreateRoleDefinition(context.Context, *CreateRoleDefinitionRequest) (*CreateRoleDefinitionResponse, error)
	UpdateRoleDefinition(context.Context, *UpdateRoleDefinitionRequest) (*UpdateRoleDefinitionResponse, error)
	DeleteRoleDefinition(context.Context, *DeleteRoleDefinitionRequest) (*DeleteRoleDefinitionResponse, error)

	CreateRoleDefinitionFeatureRef(context.Context, *CreateRoleDefinitionFeatureRefRequest) (*CreateRoleDefinitionFeatureRefResponse, error)
	DeleteRoleDefinitionFeatureRef(context.Context, *DeleteRoleDefinitionFeatureRefRequest) (*DeleteRoleDefinitionFeatureRefResponse, error)

	CreateRoleDefinitionOverlayRoleRef(context.Context, *CreateRoleDefinitionOverlayRoleRefRequest) (*CreateRoleDefinitionOverlayRoleRefResponse, error)
	DeleteRoleDefinitionOverlayRoleRef(context.Context, *DeleteRoleDefinitionOverlayRoleRefRequest) (*DeleteRoleDefinitionOverlayRoleRefResponse, error)

	CreateRoleDefinitionPhysicalRoleRef(context.Context, *CreateRoleDefinitionPhysicalRoleRefRequest) (*CreateRoleDefinitionPhysicalRoleRefResponse, error)
	DeleteRoleDefinitionPhysicalRoleRef(context.Context, *DeleteRoleDefinitionPhysicalRoleRefRequest) (*DeleteRoleDefinitionPhysicalRoleRefResponse, error)

	CreateRoleDefinitionTagRef(context.Context, *CreateRoleDefinitionTagRefRequest) (*CreateRoleDefinitionTagRefResponse, error)
	DeleteRoleDefinitionTagRef(context.Context, *DeleteRoleDefinitionTagRefRequest) (*DeleteRoleDefinitionTagRefResponse, error)

	CreateRouteAggregate(context.Context, *CreateRouteAggregateRequest) (*CreateRouteAggregateResponse, error)
	UpdateRouteAggregate(context.Context, *UpdateRouteAggregateRequest) (*UpdateRouteAggregateResponse, error)
	DeleteRouteAggregate(context.Context, *DeleteRouteAggregateRequest) (*DeleteRouteAggregateResponse, error)

	CreateRouteAggregateRoutingInstanceRef(context.Context, *CreateRouteAggregateRoutingInstanceRefRequest) (*CreateRouteAggregateRoutingInstanceRefResponse, error)
	DeleteRouteAggregateRoutingInstanceRef(context.Context, *DeleteRouteAggregateRoutingInstanceRefRequest) (*DeleteRouteAggregateRoutingInstanceRefResponse, error)

	CreateRouteAggregateServiceInstanceRef(context.Context, *CreateRouteAggregateServiceInstanceRefRequest) (*CreateRouteAggregateServiceInstanceRefResponse, error)
	DeleteRouteAggregateServiceInstanceRef(context.Context, *DeleteRouteAggregateServiceInstanceRefRequest) (*DeleteRouteAggregateServiceInstanceRefResponse, error)

	CreateRouteAggregateTagRef(context.Context, *CreateRouteAggregateTagRefRequest) (*CreateRouteAggregateTagRefResponse, error)
	DeleteRouteAggregateTagRef(context.Context, *DeleteRouteAggregateTagRefRequest) (*DeleteRouteAggregateTagRefResponse, error)

	CreateRouteTable(context.Context, *CreateRouteTableRequest) (*CreateRouteTableResponse, error)
	UpdateRouteTable(context.Context, *UpdateRouteTableRequest) (*UpdateRouteTableResponse, error)
	DeleteRouteTable(context.Context, *DeleteRouteTableRequest) (*DeleteRouteTableResponse, error)

	CreateRouteTableTagRef(context.Context, *CreateRouteTableTagRefRequest) (*CreateRouteTableTagRefResponse, error)
	DeleteRouteTableTagRef(context.Context, *DeleteRouteTableTagRefRequest) (*DeleteRouteTableTagRefResponse, error)

	CreateRouteTarget(context.Context, *CreateRouteTargetRequest) (*CreateRouteTargetResponse, error)
	UpdateRouteTarget(context.Context, *UpdateRouteTargetRequest) (*UpdateRouteTargetResponse, error)
	DeleteRouteTarget(context.Context, *DeleteRouteTargetRequest) (*DeleteRouteTargetResponse, error)

	CreateRouteTargetTagRef(context.Context, *CreateRouteTargetTagRefRequest) (*CreateRouteTargetTagRefResponse, error)
	DeleteRouteTargetTagRef(context.Context, *DeleteRouteTargetTagRefRequest) (*DeleteRouteTargetTagRefResponse, error)

	CreateRoutingInstance(context.Context, *CreateRoutingInstanceRequest) (*CreateRoutingInstanceResponse, error)
	UpdateRoutingInstance(context.Context, *UpdateRoutingInstanceRequest) (*UpdateRoutingInstanceResponse, error)
	DeleteRoutingInstance(context.Context, *DeleteRoutingInstanceRequest) (*DeleteRoutingInstanceResponse, error)

	CreateRoutingInstanceRouteTargetRef(context.Context, *CreateRoutingInstanceRouteTargetRefRequest) (*CreateRoutingInstanceRouteTargetRefResponse, error)
	DeleteRoutingInstanceRouteTargetRef(context.Context, *DeleteRoutingInstanceRouteTargetRefRequest) (*DeleteRoutingInstanceRouteTargetRefResponse, error)

	CreateRoutingInstanceRoutingInstanceRef(context.Context, *CreateRoutingInstanceRoutingInstanceRefRequest) (*CreateRoutingInstanceRoutingInstanceRefResponse, error)
	DeleteRoutingInstanceRoutingInstanceRef(context.Context, *DeleteRoutingInstanceRoutingInstanceRefRequest) (*DeleteRoutingInstanceRoutingInstanceRefResponse, error)

	CreateRoutingInstanceTagRef(context.Context, *CreateRoutingInstanceTagRefRequest) (*CreateRoutingInstanceTagRefResponse, error)
	DeleteRoutingInstanceTagRef(context.Context, *DeleteRoutingInstanceTagRefRequest) (*DeleteRoutingInstanceTagRefResponse, error)

	CreateRoutingPolicy(context.Context, *CreateRoutingPolicyRequest) (*CreateRoutingPolicyResponse, error)
	UpdateRoutingPolicy(context.Context, *UpdateRoutingPolicyRequest) (*UpdateRoutingPolicyResponse, error)
	DeleteRoutingPolicy(context.Context, *DeleteRoutingPolicyRequest) (*DeleteRoutingPolicyResponse, error)

	CreateRoutingPolicyTagRef(context.Context, *CreateRoutingPolicyTagRefRequest) (*CreateRoutingPolicyTagRefResponse, error)
	DeleteRoutingPolicyTagRef(context.Context, *DeleteRoutingPolicyTagRefRequest) (*DeleteRoutingPolicyTagRefResponse, error)

	CreateRoutingPolicyRoutingInstanceRef(context.Context, *CreateRoutingPolicyRoutingInstanceRefRequest) (*CreateRoutingPolicyRoutingInstanceRefResponse, error)
	DeleteRoutingPolicyRoutingInstanceRef(context.Context, *DeleteRoutingPolicyRoutingInstanceRefRequest) (*DeleteRoutingPolicyRoutingInstanceRefResponse, error)

	CreateRoutingPolicyServiceInstanceRef(context.Context, *CreateRoutingPolicyServiceInstanceRefRequest) (*CreateRoutingPolicyServiceInstanceRefResponse, error)
	DeleteRoutingPolicyServiceInstanceRef(context.Context, *DeleteRoutingPolicyServiceInstanceRefRequest) (*DeleteRoutingPolicyServiceInstanceRefResponse, error)

	CreateSecurityGroup(context.Context, *CreateSecurityGroupRequest) (*CreateSecurityGroupResponse, error)
	UpdateSecurityGroup(context.Context, *UpdateSecurityGroupRequest) (*UpdateSecurityGroupResponse, error)
	DeleteSecurityGroup(context.Context, *DeleteSecurityGroupRequest) (*DeleteSecurityGroupResponse, error)

	CreateSecurityGroupTagRef(context.Context, *CreateSecurityGroupTagRefRequest) (*CreateSecurityGroupTagRefResponse, error)
	DeleteSecurityGroupTagRef(context.Context, *DeleteSecurityGroupTagRefRequest) (*DeleteSecurityGroupTagRefResponse, error)

	CreateSecurityLoggingObject(context.Context, *CreateSecurityLoggingObjectRequest) (*CreateSecurityLoggingObjectResponse, error)
	UpdateSecurityLoggingObject(context.Context, *UpdateSecurityLoggingObjectRequest) (*UpdateSecurityLoggingObjectResponse, error)
	DeleteSecurityLoggingObject(context.Context, *DeleteSecurityLoggingObjectRequest) (*DeleteSecurityLoggingObjectResponse, error)

	CreateSecurityLoggingObjectNetworkPolicyRef(context.Context, *CreateSecurityLoggingObjectNetworkPolicyRefRequest) (*CreateSecurityLoggingObjectNetworkPolicyRefResponse, error)
	DeleteSecurityLoggingObjectNetworkPolicyRef(context.Context, *DeleteSecurityLoggingObjectNetworkPolicyRefRequest) (*DeleteSecurityLoggingObjectNetworkPolicyRefResponse, error)

	CreateSecurityLoggingObjectSecurityGroupRef(context.Context, *CreateSecurityLoggingObjectSecurityGroupRefRequest) (*CreateSecurityLoggingObjectSecurityGroupRefResponse, error)
	DeleteSecurityLoggingObjectSecurityGroupRef(context.Context, *DeleteSecurityLoggingObjectSecurityGroupRefRequest) (*DeleteSecurityLoggingObjectSecurityGroupRefResponse, error)

	CreateSecurityLoggingObjectTagRef(context.Context, *CreateSecurityLoggingObjectTagRefRequest) (*CreateSecurityLoggingObjectTagRefResponse, error)
	DeleteSecurityLoggingObjectTagRef(context.Context, *DeleteSecurityLoggingObjectTagRefRequest) (*DeleteSecurityLoggingObjectTagRefResponse, error)

	CreateServiceAppliance(context.Context, *CreateServiceApplianceRequest) (*CreateServiceApplianceResponse, error)
	UpdateServiceAppliance(context.Context, *UpdateServiceApplianceRequest) (*UpdateServiceApplianceResponse, error)
	DeleteServiceAppliance(context.Context, *DeleteServiceApplianceRequest) (*DeleteServiceApplianceResponse, error)

	CreateServiceAppliancePhysicalInterfaceRef(context.Context, *CreateServiceAppliancePhysicalInterfaceRefRequest) (*CreateServiceAppliancePhysicalInterfaceRefResponse, error)
	DeleteServiceAppliancePhysicalInterfaceRef(context.Context, *DeleteServiceAppliancePhysicalInterfaceRefRequest) (*DeleteServiceAppliancePhysicalInterfaceRefResponse, error)

	CreateServiceApplianceTagRef(context.Context, *CreateServiceApplianceTagRefRequest) (*CreateServiceApplianceTagRefResponse, error)
	DeleteServiceApplianceTagRef(context.Context, *DeleteServiceApplianceTagRefRequest) (*DeleteServiceApplianceTagRefResponse, error)

	CreateServiceApplianceSet(context.Context, *CreateServiceApplianceSetRequest) (*CreateServiceApplianceSetResponse, error)
	UpdateServiceApplianceSet(context.Context, *UpdateServiceApplianceSetRequest) (*UpdateServiceApplianceSetResponse, error)
	DeleteServiceApplianceSet(context.Context, *DeleteServiceApplianceSetRequest) (*DeleteServiceApplianceSetResponse, error)

	CreateServiceApplianceSetTagRef(context.Context, *CreateServiceApplianceSetTagRefRequest) (*CreateServiceApplianceSetTagRefResponse, error)
	DeleteServiceApplianceSetTagRef(context.Context, *DeleteServiceApplianceSetTagRefRequest) (*DeleteServiceApplianceSetTagRefResponse, error)

	CreateServiceConnectionModule(context.Context, *CreateServiceConnectionModuleRequest) (*CreateServiceConnectionModuleResponse, error)
	UpdateServiceConnectionModule(context.Context, *UpdateServiceConnectionModuleRequest) (*UpdateServiceConnectionModuleResponse, error)
	DeleteServiceConnectionModule(context.Context, *DeleteServiceConnectionModuleRequest) (*DeleteServiceConnectionModuleResponse, error)

	CreateServiceConnectionModuleServiceObjectRef(context.Context, *CreateServiceConnectionModuleServiceObjectRefRequest) (*CreateServiceConnectionModuleServiceObjectRefResponse, error)
	DeleteServiceConnectionModuleServiceObjectRef(context.Context, *DeleteServiceConnectionModuleServiceObjectRefRequest) (*DeleteServiceConnectionModuleServiceObjectRefResponse, error)

	CreateServiceConnectionModuleTagRef(context.Context, *CreateServiceConnectionModuleTagRefRequest) (*CreateServiceConnectionModuleTagRefResponse, error)
	DeleteServiceConnectionModuleTagRef(context.Context, *DeleteServiceConnectionModuleTagRefRequest) (*DeleteServiceConnectionModuleTagRefResponse, error)

	CreateServiceEndpoint(context.Context, *CreateServiceEndpointRequest) (*CreateServiceEndpointResponse, error)
	UpdateServiceEndpoint(context.Context, *UpdateServiceEndpointRequest) (*UpdateServiceEndpointResponse, error)
	DeleteServiceEndpoint(context.Context, *DeleteServiceEndpointRequest) (*DeleteServiceEndpointResponse, error)

	CreateServiceEndpointServiceConnectionModuleRef(context.Context, *CreateServiceEndpointServiceConnectionModuleRefRequest) (*CreateServiceEndpointServiceConnectionModuleRefResponse, error)
	DeleteServiceEndpointServiceConnectionModuleRef(context.Context, *DeleteServiceEndpointServiceConnectionModuleRefRequest) (*DeleteServiceEndpointServiceConnectionModuleRefResponse, error)

	CreateServiceEndpointServiceObjectRef(context.Context, *CreateServiceEndpointServiceObjectRefRequest) (*CreateServiceEndpointServiceObjectRefResponse, error)
	DeleteServiceEndpointServiceObjectRef(context.Context, *DeleteServiceEndpointServiceObjectRefRequest) (*DeleteServiceEndpointServiceObjectRefResponse, error)

	CreateServiceEndpointTagRef(context.Context, *CreateServiceEndpointTagRefRequest) (*CreateServiceEndpointTagRefResponse, error)
	DeleteServiceEndpointTagRef(context.Context, *DeleteServiceEndpointTagRefRequest) (*DeleteServiceEndpointTagRefResponse, error)

	CreateServiceEndpointPhysicalRouterRef(context.Context, *CreateServiceEndpointPhysicalRouterRefRequest) (*CreateServiceEndpointPhysicalRouterRefResponse, error)
	DeleteServiceEndpointPhysicalRouterRef(context.Context, *DeleteServiceEndpointPhysicalRouterRefRequest) (*DeleteServiceEndpointPhysicalRouterRefResponse, error)

	CreateServiceGroup(context.Context, *CreateServiceGroupRequest) (*CreateServiceGroupResponse, error)
	UpdateServiceGroup(context.Context, *UpdateServiceGroupRequest) (*UpdateServiceGroupResponse, error)
	DeleteServiceGroup(context.Context, *DeleteServiceGroupRequest) (*DeleteServiceGroupResponse, error)

	CreateServiceGroupTagRef(context.Context, *CreateServiceGroupTagRefRequest) (*CreateServiceGroupTagRefResponse, error)
	DeleteServiceGroupTagRef(context.Context, *DeleteServiceGroupTagRefRequest) (*DeleteServiceGroupTagRefResponse, error)

	CreateServiceHealthCheck(context.Context, *CreateServiceHealthCheckRequest) (*CreateServiceHealthCheckResponse, error)
	UpdateServiceHealthCheck(context.Context, *UpdateServiceHealthCheckRequest) (*UpdateServiceHealthCheckResponse, error)
	DeleteServiceHealthCheck(context.Context, *DeleteServiceHealthCheckRequest) (*DeleteServiceHealthCheckResponse, error)

	CreateServiceHealthCheckServiceInstanceRef(context.Context, *CreateServiceHealthCheckServiceInstanceRefRequest) (*CreateServiceHealthCheckServiceInstanceRefResponse, error)
	DeleteServiceHealthCheckServiceInstanceRef(context.Context, *DeleteServiceHealthCheckServiceInstanceRefRequest) (*DeleteServiceHealthCheckServiceInstanceRefResponse, error)

	CreateServiceHealthCheckTagRef(context.Context, *CreateServiceHealthCheckTagRefRequest) (*CreateServiceHealthCheckTagRefResponse, error)
	DeleteServiceHealthCheckTagRef(context.Context, *DeleteServiceHealthCheckTagRefRequest) (*DeleteServiceHealthCheckTagRefResponse, error)

	CreateServiceInstance(context.Context, *CreateServiceInstanceRequest) (*CreateServiceInstanceResponse, error)
	UpdateServiceInstance(context.Context, *UpdateServiceInstanceRequest) (*UpdateServiceInstanceResponse, error)
	DeleteServiceInstance(context.Context, *DeleteServiceInstanceRequest) (*DeleteServiceInstanceResponse, error)

	CreateServiceInstanceInstanceIPRef(context.Context, *CreateServiceInstanceInstanceIPRefRequest) (*CreateServiceInstanceInstanceIPRefResponse, error)
	DeleteServiceInstanceInstanceIPRef(context.Context, *DeleteServiceInstanceInstanceIPRefRequest) (*DeleteServiceInstanceInstanceIPRefResponse, error)

	CreateServiceInstanceServiceTemplateRef(context.Context, *CreateServiceInstanceServiceTemplateRefRequest) (*CreateServiceInstanceServiceTemplateRefResponse, error)
	DeleteServiceInstanceServiceTemplateRef(context.Context, *DeleteServiceInstanceServiceTemplateRefRequest) (*DeleteServiceInstanceServiceTemplateRefResponse, error)

	CreateServiceInstanceTagRef(context.Context, *CreateServiceInstanceTagRefRequest) (*CreateServiceInstanceTagRefResponse, error)
	DeleteServiceInstanceTagRef(context.Context, *DeleteServiceInstanceTagRefRequest) (*DeleteServiceInstanceTagRefResponse, error)

	CreateServiceObject(context.Context, *CreateServiceObjectRequest) (*CreateServiceObjectResponse, error)
	UpdateServiceObject(context.Context, *UpdateServiceObjectRequest) (*UpdateServiceObjectResponse, error)
	DeleteServiceObject(context.Context, *DeleteServiceObjectRequest) (*DeleteServiceObjectResponse, error)

	CreateServiceObjectTagRef(context.Context, *CreateServiceObjectTagRefRequest) (*CreateServiceObjectTagRefResponse, error)
	DeleteServiceObjectTagRef(context.Context, *DeleteServiceObjectTagRefRequest) (*DeleteServiceObjectTagRefResponse, error)

	CreateServiceTemplate(context.Context, *CreateServiceTemplateRequest) (*CreateServiceTemplateResponse, error)
	UpdateServiceTemplate(context.Context, *UpdateServiceTemplateRequest) (*UpdateServiceTemplateResponse, error)
	DeleteServiceTemplate(context.Context, *DeleteServiceTemplateRequest) (*DeleteServiceTemplateResponse, error)

	CreateServiceTemplateServiceApplianceSetRef(context.Context, *CreateServiceTemplateServiceApplianceSetRefRequest) (*CreateServiceTemplateServiceApplianceSetRefResponse, error)
	DeleteServiceTemplateServiceApplianceSetRef(context.Context, *DeleteServiceTemplateServiceApplianceSetRefRequest) (*DeleteServiceTemplateServiceApplianceSetRefResponse, error)

	CreateServiceTemplateTagRef(context.Context, *CreateServiceTemplateTagRefRequest) (*CreateServiceTemplateTagRefResponse, error)
	DeleteServiceTemplateTagRef(context.Context, *DeleteServiceTemplateTagRefRequest) (*DeleteServiceTemplateTagRefResponse, error)

	CreateSflowProfile(context.Context, *CreateSflowProfileRequest) (*CreateSflowProfileResponse, error)
	UpdateSflowProfile(context.Context, *UpdateSflowProfileRequest) (*UpdateSflowProfileResponse, error)
	DeleteSflowProfile(context.Context, *DeleteSflowProfileRequest) (*DeleteSflowProfileResponse, error)

	CreateSflowProfileTagRef(context.Context, *CreateSflowProfileTagRefRequest) (*CreateSflowProfileTagRefResponse, error)
	DeleteSflowProfileTagRef(context.Context, *DeleteSflowProfileTagRefRequest) (*DeleteSflowProfileTagRefResponse, error)

	CreateStormControlProfile(context.Context, *CreateStormControlProfileRequest) (*CreateStormControlProfileResponse, error)
	UpdateStormControlProfile(context.Context, *UpdateStormControlProfileRequest) (*UpdateStormControlProfileResponse, error)
	DeleteStormControlProfile(context.Context, *DeleteStormControlProfileRequest) (*DeleteStormControlProfileResponse, error)

	CreateStormControlProfileTagRef(context.Context, *CreateStormControlProfileTagRefRequest) (*CreateStormControlProfileTagRefResponse, error)
	DeleteStormControlProfileTagRef(context.Context, *DeleteStormControlProfileTagRefRequest) (*DeleteStormControlProfileTagRefResponse, error)

	CreateStructuredSyslogApplicationRecord(context.Context, *CreateStructuredSyslogApplicationRecordRequest) (*CreateStructuredSyslogApplicationRecordResponse, error)
	UpdateStructuredSyslogApplicationRecord(context.Context, *UpdateStructuredSyslogApplicationRecordRequest) (*UpdateStructuredSyslogApplicationRecordResponse, error)
	DeleteStructuredSyslogApplicationRecord(context.Context, *DeleteStructuredSyslogApplicationRecordRequest) (*DeleteStructuredSyslogApplicationRecordResponse, error)

	CreateStructuredSyslogApplicationRecordTagRef(context.Context, *CreateStructuredSyslogApplicationRecordTagRefRequest) (*CreateStructuredSyslogApplicationRecordTagRefResponse, error)
	DeleteStructuredSyslogApplicationRecordTagRef(context.Context, *DeleteStructuredSyslogApplicationRecordTagRefRequest) (*DeleteStructuredSyslogApplicationRecordTagRefResponse, error)

	CreateStructuredSyslogConfig(context.Context, *CreateStructuredSyslogConfigRequest) (*CreateStructuredSyslogConfigResponse, error)
	UpdateStructuredSyslogConfig(context.Context, *UpdateStructuredSyslogConfigRequest) (*UpdateStructuredSyslogConfigResponse, error)
	DeleteStructuredSyslogConfig(context.Context, *DeleteStructuredSyslogConfigRequest) (*DeleteStructuredSyslogConfigResponse, error)

	CreateStructuredSyslogConfigTagRef(context.Context, *CreateStructuredSyslogConfigTagRefRequest) (*CreateStructuredSyslogConfigTagRefResponse, error)
	DeleteStructuredSyslogConfigTagRef(context.Context, *DeleteStructuredSyslogConfigTagRefRequest) (*DeleteStructuredSyslogConfigTagRefResponse, error)

	CreateStructuredSyslogHostnameRecord(context.Context, *CreateStructuredSyslogHostnameRecordRequest) (*CreateStructuredSyslogHostnameRecordResponse, error)
	UpdateStructuredSyslogHostnameRecord(context.Context, *UpdateStructuredSyslogHostnameRecordRequest) (*UpdateStructuredSyslogHostnameRecordResponse, error)
	DeleteStructuredSyslogHostnameRecord(context.Context, *DeleteStructuredSyslogHostnameRecordRequest) (*DeleteStructuredSyslogHostnameRecordResponse, error)

	CreateStructuredSyslogHostnameRecordTagRef(context.Context, *CreateStructuredSyslogHostnameRecordTagRefRequest) (*CreateStructuredSyslogHostnameRecordTagRefResponse, error)
	DeleteStructuredSyslogHostnameRecordTagRef(context.Context, *DeleteStructuredSyslogHostnameRecordTagRefRequest) (*DeleteStructuredSyslogHostnameRecordTagRefResponse, error)

	CreateStructuredSyslogMessage(context.Context, *CreateStructuredSyslogMessageRequest) (*CreateStructuredSyslogMessageResponse, error)
	UpdateStructuredSyslogMessage(context.Context, *UpdateStructuredSyslogMessageRequest) (*UpdateStructuredSyslogMessageResponse, error)
	DeleteStructuredSyslogMessage(context.Context, *DeleteStructuredSyslogMessageRequest) (*DeleteStructuredSyslogMessageResponse, error)

	CreateStructuredSyslogMessageTagRef(context.Context, *CreateStructuredSyslogMessageTagRefRequest) (*CreateStructuredSyslogMessageTagRefResponse, error)
	DeleteStructuredSyslogMessageTagRef(context.Context, *DeleteStructuredSyslogMessageTagRefRequest) (*DeleteStructuredSyslogMessageTagRefResponse, error)

	CreateStructuredSyslogSLAProfile(context.Context, *CreateStructuredSyslogSLAProfileRequest) (*CreateStructuredSyslogSLAProfileResponse, error)
	UpdateStructuredSyslogSLAProfile(context.Context, *UpdateStructuredSyslogSLAProfileRequest) (*UpdateStructuredSyslogSLAProfileResponse, error)
	DeleteStructuredSyslogSLAProfile(context.Context, *DeleteStructuredSyslogSLAProfileRequest) (*DeleteStructuredSyslogSLAProfileResponse, error)

	CreateStructuredSyslogSLAProfileTagRef(context.Context, *CreateStructuredSyslogSLAProfileTagRefRequest) (*CreateStructuredSyslogSLAProfileTagRefResponse, error)
	DeleteStructuredSyslogSLAProfileTagRef(context.Context, *DeleteStructuredSyslogSLAProfileTagRefRequest) (*DeleteStructuredSyslogSLAProfileTagRefResponse, error)

	CreateSubCluster(context.Context, *CreateSubClusterRequest) (*CreateSubClusterResponse, error)
	UpdateSubCluster(context.Context, *UpdateSubClusterRequest) (*UpdateSubClusterResponse, error)
	DeleteSubCluster(context.Context, *DeleteSubClusterRequest) (*DeleteSubClusterResponse, error)

	CreateSubClusterTagRef(context.Context, *CreateSubClusterTagRefRequest) (*CreateSubClusterTagRefResponse, error)
	DeleteSubClusterTagRef(context.Context, *DeleteSubClusterTagRefRequest) (*DeleteSubClusterTagRefResponse, error)

	CreateSubnet(context.Context, *CreateSubnetRequest) (*CreateSubnetResponse, error)
	UpdateSubnet(context.Context, *UpdateSubnetRequest) (*UpdateSubnetResponse, error)
	DeleteSubnet(context.Context, *DeleteSubnetRequest) (*DeleteSubnetResponse, error)

	CreateSubnetVirtualMachineInterfaceRef(context.Context, *CreateSubnetVirtualMachineInterfaceRefRequest) (*CreateSubnetVirtualMachineInterfaceRefResponse, error)
	DeleteSubnetVirtualMachineInterfaceRef(context.Context, *DeleteSubnetVirtualMachineInterfaceRefRequest) (*DeleteSubnetVirtualMachineInterfaceRefResponse, error)

	CreateSubnetTagRef(context.Context, *CreateSubnetTagRefRequest) (*CreateSubnetTagRefResponse, error)
	DeleteSubnetTagRef(context.Context, *DeleteSubnetTagRefRequest) (*DeleteSubnetTagRefResponse, error)

	CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error)
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error)

	CreateTagTagRef(context.Context, *CreateTagTagRefRequest) (*CreateTagTagRefResponse, error)
	DeleteTagTagRef(context.Context, *DeleteTagTagRefRequest) (*DeleteTagTagRefResponse, error)

	CreateTagTagTypeRef(context.Context, *CreateTagTagTypeRefRequest) (*CreateTagTagTypeRefResponse, error)
	DeleteTagTagTypeRef(context.Context, *DeleteTagTagTypeRefRequest) (*DeleteTagTagTypeRefResponse, error)

	CreateTagType(context.Context, *CreateTagTypeRequest) (*CreateTagTypeResponse, error)
	UpdateTagType(context.Context, *UpdateTagTypeRequest) (*UpdateTagTypeResponse, error)
	DeleteTagType(context.Context, *DeleteTagTypeRequest) (*DeleteTagTypeResponse, error)

	CreateTagTypeTagRef(context.Context, *CreateTagTypeTagRefRequest) (*CreateTagTypeTagRefResponse, error)
	DeleteTagTypeTagRef(context.Context, *DeleteTagTypeTagRefRequest) (*DeleteTagTypeTagRefResponse, error)

	CreateTelemetryProfile(context.Context, *CreateTelemetryProfileRequest) (*CreateTelemetryProfileResponse, error)
	UpdateTelemetryProfile(context.Context, *UpdateTelemetryProfileRequest) (*UpdateTelemetryProfileResponse, error)
	DeleteTelemetryProfile(context.Context, *DeleteTelemetryProfileRequest) (*DeleteTelemetryProfileResponse, error)

	CreateTelemetryProfileSflowProfileRef(context.Context, *CreateTelemetryProfileSflowProfileRefRequest) (*CreateTelemetryProfileSflowProfileRefResponse, error)
	DeleteTelemetryProfileSflowProfileRef(context.Context, *DeleteTelemetryProfileSflowProfileRefRequest) (*DeleteTelemetryProfileSflowProfileRefResponse, error)

	CreateTelemetryProfileTagRef(context.Context, *CreateTelemetryProfileTagRefRequest) (*CreateTelemetryProfileTagRefResponse, error)
	DeleteTelemetryProfileTagRef(context.Context, *DeleteTelemetryProfileTagRefRequest) (*DeleteTelemetryProfileTagRefResponse, error)

	CreateVirtualDNSRecord(context.Context, *CreateVirtualDNSRecordRequest) (*CreateVirtualDNSRecordResponse, error)
	UpdateVirtualDNSRecord(context.Context, *UpdateVirtualDNSRecordRequest) (*UpdateVirtualDNSRecordResponse, error)
	DeleteVirtualDNSRecord(context.Context, *DeleteVirtualDNSRecordRequest) (*DeleteVirtualDNSRecordResponse, error)

	CreateVirtualDNSRecordTagRef(context.Context, *CreateVirtualDNSRecordTagRefRequest) (*CreateVirtualDNSRecordTagRefResponse, error)
	DeleteVirtualDNSRecordTagRef(context.Context, *DeleteVirtualDNSRecordTagRefRequest) (*DeleteVirtualDNSRecordTagRefResponse, error)

	CreateVirtualDNS(context.Context, *CreateVirtualDNSRequest) (*CreateVirtualDNSResponse, error)
	UpdateVirtualDNS(context.Context, *UpdateVirtualDNSRequest) (*UpdateVirtualDNSResponse, error)
	DeleteVirtualDNS(context.Context, *DeleteVirtualDNSRequest) (*DeleteVirtualDNSResponse, error)

	CreateVirtualDNSTagRef(context.Context, *CreateVirtualDNSTagRefRequest) (*CreateVirtualDNSTagRefResponse, error)
	DeleteVirtualDNSTagRef(context.Context, *DeleteVirtualDNSTagRefRequest) (*DeleteVirtualDNSTagRefResponse, error)

	CreateVirtualIP(context.Context, *CreateVirtualIPRequest) (*CreateVirtualIPResponse, error)
	UpdateVirtualIP(context.Context, *UpdateVirtualIPRequest) (*UpdateVirtualIPResponse, error)
	DeleteVirtualIP(context.Context, *DeleteVirtualIPRequest) (*DeleteVirtualIPResponse, error)

	CreateVirtualIPVirtualMachineInterfaceRef(context.Context, *CreateVirtualIPVirtualMachineInterfaceRefRequest) (*CreateVirtualIPVirtualMachineInterfaceRefResponse, error)
	DeleteVirtualIPVirtualMachineInterfaceRef(context.Context, *DeleteVirtualIPVirtualMachineInterfaceRefRequest) (*DeleteVirtualIPVirtualMachineInterfaceRefResponse, error)

	CreateVirtualIPTagRef(context.Context, *CreateVirtualIPTagRefRequest) (*CreateVirtualIPTagRefResponse, error)
	DeleteVirtualIPTagRef(context.Context, *DeleteVirtualIPTagRefRequest) (*DeleteVirtualIPTagRefResponse, error)

	CreateVirtualIPLoadbalancerPoolRef(context.Context, *CreateVirtualIPLoadbalancerPoolRefRequest) (*CreateVirtualIPLoadbalancerPoolRefResponse, error)
	DeleteVirtualIPLoadbalancerPoolRef(context.Context, *DeleteVirtualIPLoadbalancerPoolRefRequest) (*DeleteVirtualIPLoadbalancerPoolRefResponse, error)

	CreateVirtualMachineInterface(context.Context, *CreateVirtualMachineInterfaceRequest) (*CreateVirtualMachineInterfaceResponse, error)
	UpdateVirtualMachineInterface(context.Context, *UpdateVirtualMachineInterfaceRequest) (*UpdateVirtualMachineInterfaceResponse, error)
	DeleteVirtualMachineInterface(context.Context, *DeleteVirtualMachineInterfaceRequest) (*DeleteVirtualMachineInterfaceResponse, error)

	CreateVirtualMachineInterfaceBGPRouterRef(context.Context, *CreateVirtualMachineInterfaceBGPRouterRefRequest) (*CreateVirtualMachineInterfaceBGPRouterRefResponse, error)
	DeleteVirtualMachineInterfaceBGPRouterRef(context.Context, *DeleteVirtualMachineInterfaceBGPRouterRefRequest) (*DeleteVirtualMachineInterfaceBGPRouterRefResponse, error)

	CreateVirtualMachineInterfaceRoutingInstanceRef(context.Context, *CreateVirtualMachineInterfaceRoutingInstanceRefRequest) (*CreateVirtualMachineInterfaceRoutingInstanceRefResponse, error)
	DeleteVirtualMachineInterfaceRoutingInstanceRef(context.Context, *DeleteVirtualMachineInterfaceRoutingInstanceRefRequest) (*DeleteVirtualMachineInterfaceRoutingInstanceRefResponse, error)

	CreateVirtualMachineInterfaceBridgeDomainRef(context.Context, *CreateVirtualMachineInterfaceBridgeDomainRefRequest) (*CreateVirtualMachineInterfaceBridgeDomainRefResponse, error)
	DeleteVirtualMachineInterfaceBridgeDomainRef(context.Context, *DeleteVirtualMachineInterfaceBridgeDomainRefRequest) (*DeleteVirtualMachineInterfaceBridgeDomainRefResponse, error)

	CreateVirtualMachineInterfaceSecurityGroupRef(context.Context, *CreateVirtualMachineInterfaceSecurityGroupRefRequest) (*CreateVirtualMachineInterfaceSecurityGroupRefResponse, error)
	DeleteVirtualMachineInterfaceSecurityGroupRef(context.Context, *DeleteVirtualMachineInterfaceSecurityGroupRefRequest) (*DeleteVirtualMachineInterfaceSecurityGroupRefResponse, error)

	CreateVirtualMachineInterfaceSecurityLoggingObjectRef(context.Context, *CreateVirtualMachineInterfaceSecurityLoggingObjectRefRequest) (*CreateVirtualMachineInterfaceSecurityLoggingObjectRefResponse, error)
	DeleteVirtualMachineInterfaceSecurityLoggingObjectRef(context.Context, *DeleteVirtualMachineInterfaceSecurityLoggingObjectRefRequest) (*DeleteVirtualMachineInterfaceSecurityLoggingObjectRefResponse, error)

	CreateVirtualMachineInterfacePortTupleRef(context.Context, *CreateVirtualMachineInterfacePortTupleRefRequest) (*CreateVirtualMachineInterfacePortTupleRefResponse, error)
	DeleteVirtualMachineInterfacePortTupleRef(context.Context, *DeleteVirtualMachineInterfacePortTupleRefRequest) (*DeleteVirtualMachineInterfacePortTupleRefResponse, error)

	CreateVirtualMachineInterfaceServiceEndpointRef(context.Context, *CreateVirtualMachineInterfaceServiceEndpointRefRequest) (*CreateVirtualMachineInterfaceServiceEndpointRefResponse, error)
	DeleteVirtualMachineInterfaceServiceEndpointRef(context.Context, *DeleteVirtualMachineInterfaceServiceEndpointRefRequest) (*DeleteVirtualMachineInterfaceServiceEndpointRefResponse, error)

	CreateVirtualMachineInterfaceInterfaceRouteTableRef(context.Context, *CreateVirtualMachineInterfaceInterfaceRouteTableRefRequest) (*CreateVirtualMachineInterfaceInterfaceRouteTableRefResponse, error)
	DeleteVirtualMachineInterfaceInterfaceRouteTableRef(context.Context, *DeleteVirtualMachineInterfaceInterfaceRouteTableRefRequest) (*DeleteVirtualMachineInterfaceInterfaceRouteTableRefResponse, error)

	CreateVirtualMachineInterfaceVirtualMachineRef(context.Context, *CreateVirtualMachineInterfaceVirtualMachineRefRequest) (*CreateVirtualMachineInterfaceVirtualMachineRefResponse, error)
	DeleteVirtualMachineInterfaceVirtualMachineRef(context.Context, *DeleteVirtualMachineInterfaceVirtualMachineRefRequest) (*DeleteVirtualMachineInterfaceVirtualMachineRefResponse, error)

	CreateVirtualMachineInterfaceVirtualMachineInterfaceRef(context.Context, *CreateVirtualMachineInterfaceVirtualMachineInterfaceRefRequest) (*CreateVirtualMachineInterfaceVirtualMachineInterfaceRefResponse, error)
	DeleteVirtualMachineInterfaceVirtualMachineInterfaceRef(context.Context, *DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefRequest) (*DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefResponse, error)

	CreateVirtualMachineInterfacePortProfileRef(context.Context, *CreateVirtualMachineInterfacePortProfileRefRequest) (*CreateVirtualMachineInterfacePortProfileRefResponse, error)
	DeleteVirtualMachineInterfacePortProfileRef(context.Context, *DeleteVirtualMachineInterfacePortProfileRefRequest) (*DeleteVirtualMachineInterfacePortProfileRefResponse, error)

	CreateVirtualMachineInterfaceVirtualNetworkRef(context.Context, *CreateVirtualMachineInterfaceVirtualNetworkRefRequest) (*CreateVirtualMachineInterfaceVirtualNetworkRefResponse, error)
	DeleteVirtualMachineInterfaceVirtualNetworkRef(context.Context, *DeleteVirtualMachineInterfaceVirtualNetworkRefRequest) (*DeleteVirtualMachineInterfaceVirtualNetworkRefResponse, error)

	CreateVirtualMachineInterfacePhysicalInterfaceRef(context.Context, *CreateVirtualMachineInterfacePhysicalInterfaceRefRequest) (*CreateVirtualMachineInterfacePhysicalInterfaceRefResponse, error)
	DeleteVirtualMachineInterfacePhysicalInterfaceRef(context.Context, *DeleteVirtualMachineInterfacePhysicalInterfaceRefRequest) (*DeleteVirtualMachineInterfacePhysicalInterfaceRefResponse, error)

	CreateVirtualMachineInterfaceServiceHealthCheckRef(context.Context, *CreateVirtualMachineInterfaceServiceHealthCheckRefRequest) (*CreateVirtualMachineInterfaceServiceHealthCheckRefResponse, error)
	DeleteVirtualMachineInterfaceServiceHealthCheckRef(context.Context, *DeleteVirtualMachineInterfaceServiceHealthCheckRefRequest) (*DeleteVirtualMachineInterfaceServiceHealthCheckRefResponse, error)

	CreateVirtualMachineInterfaceQosConfigRef(context.Context, *CreateVirtualMachineInterfaceQosConfigRefRequest) (*CreateVirtualMachineInterfaceQosConfigRefResponse, error)
	DeleteVirtualMachineInterfaceQosConfigRef(context.Context, *DeleteVirtualMachineInterfaceQosConfigRefRequest) (*DeleteVirtualMachineInterfaceQosConfigRefResponse, error)

	CreateVirtualMachineInterfaceTagRef(context.Context, *CreateVirtualMachineInterfaceTagRefRequest) (*CreateVirtualMachineInterfaceTagRefResponse, error)
	DeleteVirtualMachineInterfaceTagRef(context.Context, *DeleteVirtualMachineInterfaceTagRefRequest) (*DeleteVirtualMachineInterfaceTagRefResponse, error)

	CreateVirtualMachine(context.Context, *CreateVirtualMachineRequest) (*CreateVirtualMachineResponse, error)
	UpdateVirtualMachine(context.Context, *UpdateVirtualMachineRequest) (*UpdateVirtualMachineResponse, error)
	DeleteVirtualMachine(context.Context, *DeleteVirtualMachineRequest) (*DeleteVirtualMachineResponse, error)

	CreateVirtualMachineServiceInstanceRef(context.Context, *CreateVirtualMachineServiceInstanceRefRequest) (*CreateVirtualMachineServiceInstanceRefResponse, error)
	DeleteVirtualMachineServiceInstanceRef(context.Context, *DeleteVirtualMachineServiceInstanceRefRequest) (*DeleteVirtualMachineServiceInstanceRefResponse, error)

	CreateVirtualMachineTagRef(context.Context, *CreateVirtualMachineTagRefRequest) (*CreateVirtualMachineTagRefResponse, error)
	DeleteVirtualMachineTagRef(context.Context, *DeleteVirtualMachineTagRefRequest) (*DeleteVirtualMachineTagRefResponse, error)

	CreateVirtualNetwork(context.Context, *CreateVirtualNetworkRequest) (*CreateVirtualNetworkResponse, error)
	UpdateVirtualNetwork(context.Context, *UpdateVirtualNetworkRequest) (*UpdateVirtualNetworkResponse, error)
	DeleteVirtualNetwork(context.Context, *DeleteVirtualNetworkRequest) (*DeleteVirtualNetworkResponse, error)

	CreateVirtualNetworkMulticastPolicyRef(context.Context, *CreateVirtualNetworkMulticastPolicyRefRequest) (*CreateVirtualNetworkMulticastPolicyRefResponse, error)
	DeleteVirtualNetworkMulticastPolicyRef(context.Context, *DeleteVirtualNetworkMulticastPolicyRefRequest) (*DeleteVirtualNetworkMulticastPolicyRefResponse, error)

	CreateVirtualNetworkNetworkIpamRef(context.Context, *CreateVirtualNetworkNetworkIpamRefRequest) (*CreateVirtualNetworkNetworkIpamRefResponse, error)
	DeleteVirtualNetworkNetworkIpamRef(context.Context, *DeleteVirtualNetworkNetworkIpamRefRequest) (*DeleteVirtualNetworkNetworkIpamRefResponse, error)

	CreateVirtualNetworkRouteTableRef(context.Context, *CreateVirtualNetworkRouteTableRefRequest) (*CreateVirtualNetworkRouteTableRefResponse, error)
	DeleteVirtualNetworkRouteTableRef(context.Context, *DeleteVirtualNetworkRouteTableRefRequest) (*DeleteVirtualNetworkRouteTableRefResponse, error)

	CreateVirtualNetworkQosConfigRef(context.Context, *CreateVirtualNetworkQosConfigRefRequest) (*CreateVirtualNetworkQosConfigRefResponse, error)
	DeleteVirtualNetworkQosConfigRef(context.Context, *DeleteVirtualNetworkQosConfigRefRequest) (*DeleteVirtualNetworkQosConfigRefResponse, error)

	CreateVirtualNetworkSecurityLoggingObjectRef(context.Context, *CreateVirtualNetworkSecurityLoggingObjectRefRequest) (*CreateVirtualNetworkSecurityLoggingObjectRefResponse, error)
	DeleteVirtualNetworkSecurityLoggingObjectRef(context.Context, *DeleteVirtualNetworkSecurityLoggingObjectRefRequest) (*DeleteVirtualNetworkSecurityLoggingObjectRefResponse, error)

	CreateVirtualNetworkTagRef(context.Context, *CreateVirtualNetworkTagRefRequest) (*CreateVirtualNetworkTagRefResponse, error)
	DeleteVirtualNetworkTagRef(context.Context, *DeleteVirtualNetworkTagRefRequest) (*DeleteVirtualNetworkTagRefResponse, error)

	CreateVirtualNetworkIntentMapRef(context.Context, *CreateVirtualNetworkIntentMapRefRequest) (*CreateVirtualNetworkIntentMapRefResponse, error)
	DeleteVirtualNetworkIntentMapRef(context.Context, *DeleteVirtualNetworkIntentMapRefRequest) (*DeleteVirtualNetworkIntentMapRefResponse, error)

	CreateVirtualNetworkBGPVPNRef(context.Context, *CreateVirtualNetworkBGPVPNRefRequest) (*CreateVirtualNetworkBGPVPNRefResponse, error)
	DeleteVirtualNetworkBGPVPNRef(context.Context, *DeleteVirtualNetworkBGPVPNRefRequest) (*DeleteVirtualNetworkBGPVPNRefResponse, error)

	CreateVirtualNetworkRoutingPolicyRef(context.Context, *CreateVirtualNetworkRoutingPolicyRefRequest) (*CreateVirtualNetworkRoutingPolicyRefResponse, error)
	DeleteVirtualNetworkRoutingPolicyRef(context.Context, *DeleteVirtualNetworkRoutingPolicyRefRequest) (*DeleteVirtualNetworkRoutingPolicyRefResponse, error)

	CreateVirtualNetworkNetworkPolicyRef(context.Context, *CreateVirtualNetworkNetworkPolicyRefRequest) (*CreateVirtualNetworkNetworkPolicyRefResponse, error)
	DeleteVirtualNetworkNetworkPolicyRef(context.Context, *DeleteVirtualNetworkNetworkPolicyRefRequest) (*DeleteVirtualNetworkNetworkPolicyRefResponse, error)

	CreateVirtualNetworkVirtualNetworkRef(context.Context, *CreateVirtualNetworkVirtualNetworkRefRequest) (*CreateVirtualNetworkVirtualNetworkRefResponse, error)
	DeleteVirtualNetworkVirtualNetworkRef(context.Context, *DeleteVirtualNetworkVirtualNetworkRefRequest) (*DeleteVirtualNetworkVirtualNetworkRefResponse, error)

	CreateVirtualPortGroup(context.Context, *CreateVirtualPortGroupRequest) (*CreateVirtualPortGroupResponse, error)
	UpdateVirtualPortGroup(context.Context, *UpdateVirtualPortGroupRequest) (*UpdateVirtualPortGroupResponse, error)
	DeleteVirtualPortGroup(context.Context, *DeleteVirtualPortGroupRequest) (*DeleteVirtualPortGroupResponse, error)

	CreateVirtualPortGroupPhysicalInterfaceRef(context.Context, *CreateVirtualPortGroupPhysicalInterfaceRefRequest) (*CreateVirtualPortGroupPhysicalInterfaceRefResponse, error)
	DeleteVirtualPortGroupPhysicalInterfaceRef(context.Context, *DeleteVirtualPortGroupPhysicalInterfaceRefRequest) (*DeleteVirtualPortGroupPhysicalInterfaceRefResponse, error)

	CreateVirtualPortGroupPortProfileRef(context.Context, *CreateVirtualPortGroupPortProfileRefRequest) (*CreateVirtualPortGroupPortProfileRefResponse, error)
	DeleteVirtualPortGroupPortProfileRef(context.Context, *DeleteVirtualPortGroupPortProfileRefRequest) (*DeleteVirtualPortGroupPortProfileRefResponse, error)

	CreateVirtualPortGroupSecurityGroupRef(context.Context, *CreateVirtualPortGroupSecurityGroupRefRequest) (*CreateVirtualPortGroupSecurityGroupRefResponse, error)
	DeleteVirtualPortGroupSecurityGroupRef(context.Context, *DeleteVirtualPortGroupSecurityGroupRefRequest) (*DeleteVirtualPortGroupSecurityGroupRefResponse, error)

	CreateVirtualPortGroupVirtualMachineInterfaceRef(context.Context, *CreateVirtualPortGroupVirtualMachineInterfaceRefRequest) (*CreateVirtualPortGroupVirtualMachineInterfaceRefResponse, error)
	DeleteVirtualPortGroupVirtualMachineInterfaceRef(context.Context, *DeleteVirtualPortGroupVirtualMachineInterfaceRefRequest) (*DeleteVirtualPortGroupVirtualMachineInterfaceRefResponse, error)

	CreateVirtualPortGroupTagRef(context.Context, *CreateVirtualPortGroupTagRefRequest) (*CreateVirtualPortGroupTagRefResponse, error)
	DeleteVirtualPortGroupTagRef(context.Context, *DeleteVirtualPortGroupTagRefRequest) (*DeleteVirtualPortGroupTagRefResponse, error)

	CreateVirtualRouter(context.Context, *CreateVirtualRouterRequest) (*CreateVirtualRouterResponse, error)
	UpdateVirtualRouter(context.Context, *UpdateVirtualRouterRequest) (*UpdateVirtualRouterResponse, error)
	DeleteVirtualRouter(context.Context, *DeleteVirtualRouterRequest) (*DeleteVirtualRouterResponse, error)

	CreateVirtualRouterSubClusterRef(context.Context, *CreateVirtualRouterSubClusterRefRequest) (*CreateVirtualRouterSubClusterRefResponse, error)
	DeleteVirtualRouterSubClusterRef(context.Context, *DeleteVirtualRouterSubClusterRefRequest) (*DeleteVirtualRouterSubClusterRefResponse, error)

	CreateVirtualRouterVirtualMachineRef(context.Context, *CreateVirtualRouterVirtualMachineRefRequest) (*CreateVirtualRouterVirtualMachineRefResponse, error)
	DeleteVirtualRouterVirtualMachineRef(context.Context, *DeleteVirtualRouterVirtualMachineRefRequest) (*DeleteVirtualRouterVirtualMachineRefResponse, error)

	CreateVirtualRouterTagRef(context.Context, *CreateVirtualRouterTagRefRequest) (*CreateVirtualRouterTagRefResponse, error)
	DeleteVirtualRouterTagRef(context.Context, *DeleteVirtualRouterTagRefRequest) (*DeleteVirtualRouterTagRefResponse, error)

	CreateVirtualRouterNetworkIpamRef(context.Context, *CreateVirtualRouterNetworkIpamRefRequest) (*CreateVirtualRouterNetworkIpamRefResponse, error)
	DeleteVirtualRouterNetworkIpamRef(context.Context, *DeleteVirtualRouterNetworkIpamRefRequest) (*DeleteVirtualRouterNetworkIpamRefResponse, error)

	CreateWebuiNode(context.Context, *CreateWebuiNodeRequest) (*CreateWebuiNodeResponse, error)
	UpdateWebuiNode(context.Context, *UpdateWebuiNodeRequest) (*UpdateWebuiNodeResponse, error)
	DeleteWebuiNode(context.Context, *DeleteWebuiNodeRequest) (*DeleteWebuiNodeResponse, error)

	CreateWebuiNodeTagRef(context.Context, *CreateWebuiNodeTagRefRequest) (*CreateWebuiNodeTagRefResponse, error)
	DeleteWebuiNodeTagRef(context.Context, *DeleteWebuiNodeTagRefRequest) (*DeleteWebuiNodeTagRefResponse, error)
}

type ReadService interface {
	GetAccessControlList(context.Context, *GetAccessControlListRequest) (*GetAccessControlListResponse, error)
	ListAccessControlList(context.Context, *ListAccessControlListRequest) (*ListAccessControlListResponse, error)

	GetAddressGroup(context.Context, *GetAddressGroupRequest) (*GetAddressGroupResponse, error)
	ListAddressGroup(context.Context, *ListAddressGroupRequest) (*ListAddressGroupResponse, error)

	GetAlarm(context.Context, *GetAlarmRequest) (*GetAlarmResponse, error)
	ListAlarm(context.Context, *ListAlarmRequest) (*ListAlarmResponse, error)

	GetAliasIPPool(context.Context, *GetAliasIPPoolRequest) (*GetAliasIPPoolResponse, error)
	ListAliasIPPool(context.Context, *ListAliasIPPoolRequest) (*ListAliasIPPoolResponse, error)

	GetAliasIP(context.Context, *GetAliasIPRequest) (*GetAliasIPResponse, error)
	ListAliasIP(context.Context, *ListAliasIPRequest) (*ListAliasIPResponse, error)

	GetAnalyticsAlarmNode(context.Context, *GetAnalyticsAlarmNodeRequest) (*GetAnalyticsAlarmNodeResponse, error)
	ListAnalyticsAlarmNode(context.Context, *ListAnalyticsAlarmNodeRequest) (*ListAnalyticsAlarmNodeResponse, error)

	GetAnalyticsNode(context.Context, *GetAnalyticsNodeRequest) (*GetAnalyticsNodeResponse, error)
	ListAnalyticsNode(context.Context, *ListAnalyticsNodeRequest) (*ListAnalyticsNodeResponse, error)

	GetAnalyticsSNMPNode(context.Context, *GetAnalyticsSNMPNodeRequest) (*GetAnalyticsSNMPNodeResponse, error)
	ListAnalyticsSNMPNode(context.Context, *ListAnalyticsSNMPNodeRequest) (*ListAnalyticsSNMPNodeResponse, error)

	GetAPIAccessList(context.Context, *GetAPIAccessListRequest) (*GetAPIAccessListResponse, error)
	ListAPIAccessList(context.Context, *ListAPIAccessListRequest) (*ListAPIAccessListResponse, error)

	GetApplicationPolicySet(context.Context, *GetApplicationPolicySetRequest) (*GetApplicationPolicySetResponse, error)
	ListApplicationPolicySet(context.Context, *ListApplicationPolicySetRequest) (*ListApplicationPolicySetResponse, error)

	GetBGPAsAService(context.Context, *GetBGPAsAServiceRequest) (*GetBGPAsAServiceResponse, error)
	ListBGPAsAService(context.Context, *ListBGPAsAServiceRequest) (*ListBGPAsAServiceResponse, error)

	GetBGPRouter(context.Context, *GetBGPRouterRequest) (*GetBGPRouterResponse, error)
	ListBGPRouter(context.Context, *ListBGPRouterRequest) (*ListBGPRouterResponse, error)

	GetBGPVPN(context.Context, *GetBGPVPNRequest) (*GetBGPVPNResponse, error)
	ListBGPVPN(context.Context, *ListBGPVPNRequest) (*ListBGPVPNResponse, error)

	GetBridgeDomain(context.Context, *GetBridgeDomainRequest) (*GetBridgeDomainResponse, error)
	ListBridgeDomain(context.Context, *ListBridgeDomainRequest) (*ListBridgeDomainResponse, error)

	GetCard(context.Context, *GetCardRequest) (*GetCardResponse, error)
	ListCard(context.Context, *ListCardRequest) (*ListCardResponse, error)

	GetCliConfig(context.Context, *GetCliConfigRequest) (*GetCliConfigResponse, error)
	ListCliConfig(context.Context, *ListCliConfigRequest) (*ListCliConfigResponse, error)

	GetConfigDatabaseNode(context.Context, *GetConfigDatabaseNodeRequest) (*GetConfigDatabaseNodeResponse, error)
	ListConfigDatabaseNode(context.Context, *ListConfigDatabaseNodeRequest) (*ListConfigDatabaseNodeResponse, error)

	GetConfigNode(context.Context, *GetConfigNodeRequest) (*GetConfigNodeResponse, error)
	ListConfigNode(context.Context, *ListConfigNodeRequest) (*ListConfigNodeResponse, error)

	GetConfigRoot(context.Context, *GetConfigRootRequest) (*GetConfigRootResponse, error)
	ListConfigRoot(context.Context, *ListConfigRootRequest) (*ListConfigRootResponse, error)

	GetControlNodeZone(context.Context, *GetControlNodeZoneRequest) (*GetControlNodeZoneResponse, error)
	ListControlNodeZone(context.Context, *ListControlNodeZoneRequest) (*ListControlNodeZoneResponse, error)

	GetCustomerAttachment(context.Context, *GetCustomerAttachmentRequest) (*GetCustomerAttachmentResponse, error)
	ListCustomerAttachment(context.Context, *ListCustomerAttachmentRequest) (*ListCustomerAttachmentResponse, error)

	GetDataCenterInterconnect(context.Context, *GetDataCenterInterconnectRequest) (*GetDataCenterInterconnectResponse, error)
	ListDataCenterInterconnect(context.Context, *ListDataCenterInterconnectRequest) (*ListDataCenterInterconnectResponse, error)

	GetDatabaseNode(context.Context, *GetDatabaseNodeRequest) (*GetDatabaseNodeResponse, error)
	ListDatabaseNode(context.Context, *ListDatabaseNodeRequest) (*ListDatabaseNodeResponse, error)

	GetDeviceChassis(context.Context, *GetDeviceChassisRequest) (*GetDeviceChassisResponse, error)
	ListDeviceChassis(context.Context, *ListDeviceChassisRequest) (*ListDeviceChassisResponse, error)

	GetDeviceFunctionalGroup(context.Context, *GetDeviceFunctionalGroupRequest) (*GetDeviceFunctionalGroupResponse, error)
	ListDeviceFunctionalGroup(context.Context, *ListDeviceFunctionalGroupRequest) (*ListDeviceFunctionalGroupResponse, error)

	GetDeviceImage(context.Context, *GetDeviceImageRequest) (*GetDeviceImageResponse, error)
	ListDeviceImage(context.Context, *ListDeviceImageRequest) (*ListDeviceImageResponse, error)

	GetDevicemgrNode(context.Context, *GetDevicemgrNodeRequest) (*GetDevicemgrNodeResponse, error)
	ListDevicemgrNode(context.Context, *ListDevicemgrNodeRequest) (*ListDevicemgrNodeResponse, error)

	GetDiscoveryServiceAssignment(context.Context, *GetDiscoveryServiceAssignmentRequest) (*GetDiscoveryServiceAssignmentResponse, error)
	ListDiscoveryServiceAssignment(context.Context, *ListDiscoveryServiceAssignmentRequest) (*ListDiscoveryServiceAssignmentResponse, error)

	GetDomain(context.Context, *GetDomainRequest) (*GetDomainResponse, error)
	ListDomain(context.Context, *ListDomainRequest) (*ListDomainResponse, error)

	GetDsaRule(context.Context, *GetDsaRuleRequest) (*GetDsaRuleResponse, error)
	ListDsaRule(context.Context, *ListDsaRuleRequest) (*ListDsaRuleResponse, error)

	GetE2ServiceProvider(context.Context, *GetE2ServiceProviderRequest) (*GetE2ServiceProviderResponse, error)
	ListE2ServiceProvider(context.Context, *ListE2ServiceProviderRequest) (*ListE2ServiceProviderResponse, error)

	GetFabricNamespace(context.Context, *GetFabricNamespaceRequest) (*GetFabricNamespaceResponse, error)
	ListFabricNamespace(context.Context, *ListFabricNamespaceRequest) (*ListFabricNamespaceResponse, error)

	GetFabric(context.Context, *GetFabricRequest) (*GetFabricResponse, error)
	ListFabric(context.Context, *ListFabricRequest) (*ListFabricResponse, error)

	GetFeatureConfig(context.Context, *GetFeatureConfigRequest) (*GetFeatureConfigResponse, error)
	ListFeatureConfig(context.Context, *ListFeatureConfigRequest) (*ListFeatureConfigResponse, error)

	GetFeatureFlag(context.Context, *GetFeatureFlagRequest) (*GetFeatureFlagResponse, error)
	ListFeatureFlag(context.Context, *ListFeatureFlagRequest) (*ListFeatureFlagResponse, error)

	GetFeature(context.Context, *GetFeatureRequest) (*GetFeatureResponse, error)
	ListFeature(context.Context, *ListFeatureRequest) (*ListFeatureResponse, error)

	GetFirewallPolicy(context.Context, *GetFirewallPolicyRequest) (*GetFirewallPolicyResponse, error)
	ListFirewallPolicy(context.Context, *ListFirewallPolicyRequest) (*ListFirewallPolicyResponse, error)

	GetFirewallRule(context.Context, *GetFirewallRuleRequest) (*GetFirewallRuleResponse, error)
	ListFirewallRule(context.Context, *ListFirewallRuleRequest) (*ListFirewallRuleResponse, error)

	GetFloatingIPPool(context.Context, *GetFloatingIPPoolRequest) (*GetFloatingIPPoolResponse, error)
	ListFloatingIPPool(context.Context, *ListFloatingIPPoolRequest) (*ListFloatingIPPoolResponse, error)

	GetFloatingIP(context.Context, *GetFloatingIPRequest) (*GetFloatingIPResponse, error)
	ListFloatingIP(context.Context, *ListFloatingIPRequest) (*ListFloatingIPResponse, error)

	GetFlowNode(context.Context, *GetFlowNodeRequest) (*GetFlowNodeResponse, error)
	ListFlowNode(context.Context, *ListFlowNodeRequest) (*ListFlowNodeResponse, error)

	GetForwardingClass(context.Context, *GetForwardingClassRequest) (*GetForwardingClassResponse, error)
	ListForwardingClass(context.Context, *ListForwardingClassRequest) (*ListForwardingClassResponse, error)

	GetGlobalAnalyticsConfig(context.Context, *GetGlobalAnalyticsConfigRequest) (*GetGlobalAnalyticsConfigResponse, error)
	ListGlobalAnalyticsConfig(context.Context, *ListGlobalAnalyticsConfigRequest) (*ListGlobalAnalyticsConfigResponse, error)

	GetGlobalQosConfig(context.Context, *GetGlobalQosConfigRequest) (*GetGlobalQosConfigResponse, error)
	ListGlobalQosConfig(context.Context, *ListGlobalQosConfigRequest) (*ListGlobalQosConfigResponse, error)

	GetGlobalSystemConfig(context.Context, *GetGlobalSystemConfigRequest) (*GetGlobalSystemConfigResponse, error)
	ListGlobalSystemConfig(context.Context, *ListGlobalSystemConfigRequest) (*ListGlobalSystemConfigResponse, error)

	GetGlobalVrouterConfig(context.Context, *GetGlobalVrouterConfigRequest) (*GetGlobalVrouterConfigResponse, error)
	ListGlobalVrouterConfig(context.Context, *ListGlobalVrouterConfigRequest) (*ListGlobalVrouterConfigResponse, error)

	GetHardwareInventory(context.Context, *GetHardwareInventoryRequest) (*GetHardwareInventoryResponse, error)
	ListHardwareInventory(context.Context, *ListHardwareInventoryRequest) (*ListHardwareInventoryResponse, error)

	GetHardware(context.Context, *GetHardwareRequest) (*GetHardwareResponse, error)
	ListHardware(context.Context, *ListHardwareRequest) (*ListHardwareResponse, error)

	GetHostBasedService(context.Context, *GetHostBasedServiceRequest) (*GetHostBasedServiceResponse, error)
	ListHostBasedService(context.Context, *ListHostBasedServiceRequest) (*ListHostBasedServiceResponse, error)

	GetInstanceIP(context.Context, *GetInstanceIPRequest) (*GetInstanceIPResponse, error)
	ListInstanceIP(context.Context, *ListInstanceIPRequest) (*ListInstanceIPResponse, error)

	GetIntentMap(context.Context, *GetIntentMapRequest) (*GetIntentMapResponse, error)
	ListIntentMap(context.Context, *ListIntentMapRequest) (*ListIntentMapResponse, error)

	GetInterfaceRouteTable(context.Context, *GetInterfaceRouteTableRequest) (*GetInterfaceRouteTableResponse, error)
	ListInterfaceRouteTable(context.Context, *ListInterfaceRouteTableRequest) (*ListInterfaceRouteTableResponse, error)

	GetJobTemplate(context.Context, *GetJobTemplateRequest) (*GetJobTemplateResponse, error)
	ListJobTemplate(context.Context, *ListJobTemplateRequest) (*ListJobTemplateResponse, error)

	GetLinkAggregationGroup(context.Context, *GetLinkAggregationGroupRequest) (*GetLinkAggregationGroupResponse, error)
	ListLinkAggregationGroup(context.Context, *ListLinkAggregationGroupRequest) (*ListLinkAggregationGroupResponse, error)

	GetLoadbalancerHealthmonitor(context.Context, *GetLoadbalancerHealthmonitorRequest) (*GetLoadbalancerHealthmonitorResponse, error)
	ListLoadbalancerHealthmonitor(context.Context, *ListLoadbalancerHealthmonitorRequest) (*ListLoadbalancerHealthmonitorResponse, error)

	GetLoadbalancerListener(context.Context, *GetLoadbalancerListenerRequest) (*GetLoadbalancerListenerResponse, error)
	ListLoadbalancerListener(context.Context, *ListLoadbalancerListenerRequest) (*ListLoadbalancerListenerResponse, error)

	GetLoadbalancerMember(context.Context, *GetLoadbalancerMemberRequest) (*GetLoadbalancerMemberResponse, error)
	ListLoadbalancerMember(context.Context, *ListLoadbalancerMemberRequest) (*ListLoadbalancerMemberResponse, error)

	GetLoadbalancerPool(context.Context, *GetLoadbalancerPoolRequest) (*GetLoadbalancerPoolResponse, error)
	ListLoadbalancerPool(context.Context, *ListLoadbalancerPoolRequest) (*ListLoadbalancerPoolResponse, error)

	GetLoadbalancer(context.Context, *GetLoadbalancerRequest) (*GetLoadbalancerResponse, error)
	ListLoadbalancer(context.Context, *ListLoadbalancerRequest) (*ListLoadbalancerResponse, error)

	GetLogicalInterface(context.Context, *GetLogicalInterfaceRequest) (*GetLogicalInterfaceResponse, error)
	ListLogicalInterface(context.Context, *ListLogicalInterfaceRequest) (*ListLogicalInterfaceResponse, error)

	GetLogicalRouter(context.Context, *GetLogicalRouterRequest) (*GetLogicalRouterResponse, error)
	ListLogicalRouter(context.Context, *ListLogicalRouterRequest) (*ListLogicalRouterResponse, error)

	GetMulticastPolicy(context.Context, *GetMulticastPolicyRequest) (*GetMulticastPolicyResponse, error)
	ListMulticastPolicy(context.Context, *ListMulticastPolicyRequest) (*ListMulticastPolicyResponse, error)

	GetNamespace(context.Context, *GetNamespaceRequest) (*GetNamespaceResponse, error)
	ListNamespace(context.Context, *ListNamespaceRequest) (*ListNamespaceResponse, error)

	GetNetworkDeviceConfig(context.Context, *GetNetworkDeviceConfigRequest) (*GetNetworkDeviceConfigResponse, error)
	ListNetworkDeviceConfig(context.Context, *ListNetworkDeviceConfigRequest) (*ListNetworkDeviceConfigResponse, error)

	GetNetworkIpam(context.Context, *GetNetworkIpamRequest) (*GetNetworkIpamResponse, error)
	ListNetworkIpam(context.Context, *ListNetworkIpamRequest) (*ListNetworkIpamResponse, error)

	GetNetworkPolicy(context.Context, *GetNetworkPolicyRequest) (*GetNetworkPolicyResponse, error)
	ListNetworkPolicy(context.Context, *ListNetworkPolicyRequest) (*ListNetworkPolicyResponse, error)

	GetNodeProfile(context.Context, *GetNodeProfileRequest) (*GetNodeProfileResponse, error)
	ListNodeProfile(context.Context, *ListNodeProfileRequest) (*ListNodeProfileResponse, error)

	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	ListNode(context.Context, *ListNodeRequest) (*ListNodeResponse, error)

	GetOverlayRole(context.Context, *GetOverlayRoleRequest) (*GetOverlayRoleResponse, error)
	ListOverlayRole(context.Context, *ListOverlayRoleRequest) (*ListOverlayRoleResponse, error)

	GetPeeringPolicy(context.Context, *GetPeeringPolicyRequest) (*GetPeeringPolicyResponse, error)
	ListPeeringPolicy(context.Context, *ListPeeringPolicyRequest) (*ListPeeringPolicyResponse, error)

	GetPhysicalInterface(context.Context, *GetPhysicalInterfaceRequest) (*GetPhysicalInterfaceResponse, error)
	ListPhysicalInterface(context.Context, *ListPhysicalInterfaceRequest) (*ListPhysicalInterfaceResponse, error)

	GetPhysicalRole(context.Context, *GetPhysicalRoleRequest) (*GetPhysicalRoleResponse, error)
	ListPhysicalRole(context.Context, *ListPhysicalRoleRequest) (*ListPhysicalRoleResponse, error)

	GetPhysicalRouter(context.Context, *GetPhysicalRouterRequest) (*GetPhysicalRouterResponse, error)
	ListPhysicalRouter(context.Context, *ListPhysicalRouterRequest) (*ListPhysicalRouterResponse, error)

	GetPolicyManagement(context.Context, *GetPolicyManagementRequest) (*GetPolicyManagementResponse, error)
	ListPolicyManagement(context.Context, *ListPolicyManagementRequest) (*ListPolicyManagementResponse, error)

	GetPortGroup(context.Context, *GetPortGroupRequest) (*GetPortGroupResponse, error)
	ListPortGroup(context.Context, *ListPortGroupRequest) (*ListPortGroupResponse, error)

	GetPortProfile(context.Context, *GetPortProfileRequest) (*GetPortProfileResponse, error)
	ListPortProfile(context.Context, *ListPortProfileRequest) (*ListPortProfileResponse, error)

	GetPort(context.Context, *GetPortRequest) (*GetPortResponse, error)
	ListPort(context.Context, *ListPortRequest) (*ListPortResponse, error)

	GetPortTuple(context.Context, *GetPortTupleRequest) (*GetPortTupleResponse, error)
	ListPortTuple(context.Context, *ListPortTupleRequest) (*ListPortTupleResponse, error)

	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	ListProject(context.Context, *ListProjectRequest) (*ListProjectResponse, error)

	GetProviderAttachment(context.Context, *GetProviderAttachmentRequest) (*GetProviderAttachmentResponse, error)
	ListProviderAttachment(context.Context, *ListProviderAttachmentRequest) (*ListProviderAttachmentResponse, error)

	GetQosConfig(context.Context, *GetQosConfigRequest) (*GetQosConfigResponse, error)
	ListQosConfig(context.Context, *ListQosConfigRequest) (*ListQosConfigResponse, error)

	GetQosQueue(context.Context, *GetQosQueueRequest) (*GetQosQueueResponse, error)
	ListQosQueue(context.Context, *ListQosQueueRequest) (*ListQosQueueResponse, error)

	GetRoleConfig(context.Context, *GetRoleConfigRequest) (*GetRoleConfigResponse, error)
	ListRoleConfig(context.Context, *ListRoleConfigRequest) (*ListRoleConfigResponse, error)

	GetRoleDefinition(context.Context, *GetRoleDefinitionRequest) (*GetRoleDefinitionResponse, error)
	ListRoleDefinition(context.Context, *ListRoleDefinitionRequest) (*ListRoleDefinitionResponse, error)

	GetRouteAggregate(context.Context, *GetRouteAggregateRequest) (*GetRouteAggregateResponse, error)
	ListRouteAggregate(context.Context, *ListRouteAggregateRequest) (*ListRouteAggregateResponse, error)

	GetRouteTable(context.Context, *GetRouteTableRequest) (*GetRouteTableResponse, error)
	ListRouteTable(context.Context, *ListRouteTableRequest) (*ListRouteTableResponse, error)

	GetRouteTarget(context.Context, *GetRouteTargetRequest) (*GetRouteTargetResponse, error)
	ListRouteTarget(context.Context, *ListRouteTargetRequest) (*ListRouteTargetResponse, error)

	GetRoutingInstance(context.Context, *GetRoutingInstanceRequest) (*GetRoutingInstanceResponse, error)
	ListRoutingInstance(context.Context, *ListRoutingInstanceRequest) (*ListRoutingInstanceResponse, error)

	GetRoutingPolicy(context.Context, *GetRoutingPolicyRequest) (*GetRoutingPolicyResponse, error)
	ListRoutingPolicy(context.Context, *ListRoutingPolicyRequest) (*ListRoutingPolicyResponse, error)

	GetSecurityGroup(context.Context, *GetSecurityGroupRequest) (*GetSecurityGroupResponse, error)
	ListSecurityGroup(context.Context, *ListSecurityGroupRequest) (*ListSecurityGroupResponse, error)

	GetSecurityLoggingObject(context.Context, *GetSecurityLoggingObjectRequest) (*GetSecurityLoggingObjectResponse, error)
	ListSecurityLoggingObject(context.Context, *ListSecurityLoggingObjectRequest) (*ListSecurityLoggingObjectResponse, error)

	GetServiceAppliance(context.Context, *GetServiceApplianceRequest) (*GetServiceApplianceResponse, error)
	ListServiceAppliance(context.Context, *ListServiceApplianceRequest) (*ListServiceApplianceResponse, error)

	GetServiceApplianceSet(context.Context, *GetServiceApplianceSetRequest) (*GetServiceApplianceSetResponse, error)
	ListServiceApplianceSet(context.Context, *ListServiceApplianceSetRequest) (*ListServiceApplianceSetResponse, error)

	GetServiceConnectionModule(context.Context, *GetServiceConnectionModuleRequest) (*GetServiceConnectionModuleResponse, error)
	ListServiceConnectionModule(context.Context, *ListServiceConnectionModuleRequest) (*ListServiceConnectionModuleResponse, error)

	GetServiceEndpoint(context.Context, *GetServiceEndpointRequest) (*GetServiceEndpointResponse, error)
	ListServiceEndpoint(context.Context, *ListServiceEndpointRequest) (*ListServiceEndpointResponse, error)

	GetServiceGroup(context.Context, *GetServiceGroupRequest) (*GetServiceGroupResponse, error)
	ListServiceGroup(context.Context, *ListServiceGroupRequest) (*ListServiceGroupResponse, error)

	GetServiceHealthCheck(context.Context, *GetServiceHealthCheckRequest) (*GetServiceHealthCheckResponse, error)
	ListServiceHealthCheck(context.Context, *ListServiceHealthCheckRequest) (*ListServiceHealthCheckResponse, error)

	GetServiceInstance(context.Context, *GetServiceInstanceRequest) (*GetServiceInstanceResponse, error)
	ListServiceInstance(context.Context, *ListServiceInstanceRequest) (*ListServiceInstanceResponse, error)

	GetServiceObject(context.Context, *GetServiceObjectRequest) (*GetServiceObjectResponse, error)
	ListServiceObject(context.Context, *ListServiceObjectRequest) (*ListServiceObjectResponse, error)

	GetServiceTemplate(context.Context, *GetServiceTemplateRequest) (*GetServiceTemplateResponse, error)
	ListServiceTemplate(context.Context, *ListServiceTemplateRequest) (*ListServiceTemplateResponse, error)

	GetSflowProfile(context.Context, *GetSflowProfileRequest) (*GetSflowProfileResponse, error)
	ListSflowProfile(context.Context, *ListSflowProfileRequest) (*ListSflowProfileResponse, error)

	GetStormControlProfile(context.Context, *GetStormControlProfileRequest) (*GetStormControlProfileResponse, error)
	ListStormControlProfile(context.Context, *ListStormControlProfileRequest) (*ListStormControlProfileResponse, error)

	GetStructuredSyslogApplicationRecord(context.Context, *GetStructuredSyslogApplicationRecordRequest) (*GetStructuredSyslogApplicationRecordResponse, error)
	ListStructuredSyslogApplicationRecord(context.Context, *ListStructuredSyslogApplicationRecordRequest) (*ListStructuredSyslogApplicationRecordResponse, error)

	GetStructuredSyslogConfig(context.Context, *GetStructuredSyslogConfigRequest) (*GetStructuredSyslogConfigResponse, error)
	ListStructuredSyslogConfig(context.Context, *ListStructuredSyslogConfigRequest) (*ListStructuredSyslogConfigResponse, error)

	GetStructuredSyslogHostnameRecord(context.Context, *GetStructuredSyslogHostnameRecordRequest) (*GetStructuredSyslogHostnameRecordResponse, error)
	ListStructuredSyslogHostnameRecord(context.Context, *ListStructuredSyslogHostnameRecordRequest) (*ListStructuredSyslogHostnameRecordResponse, error)

	GetStructuredSyslogMessage(context.Context, *GetStructuredSyslogMessageRequest) (*GetStructuredSyslogMessageResponse, error)
	ListStructuredSyslogMessage(context.Context, *ListStructuredSyslogMessageRequest) (*ListStructuredSyslogMessageResponse, error)

	GetStructuredSyslogSLAProfile(context.Context, *GetStructuredSyslogSLAProfileRequest) (*GetStructuredSyslogSLAProfileResponse, error)
	ListStructuredSyslogSLAProfile(context.Context, *ListStructuredSyslogSLAProfileRequest) (*ListStructuredSyslogSLAProfileResponse, error)

	GetSubCluster(context.Context, *GetSubClusterRequest) (*GetSubClusterResponse, error)
	ListSubCluster(context.Context, *ListSubClusterRequest) (*ListSubClusterResponse, error)

	GetSubnet(context.Context, *GetSubnetRequest) (*GetSubnetResponse, error)
	ListSubnet(context.Context, *ListSubnetRequest) (*ListSubnetResponse, error)

	GetTag(context.Context, *GetTagRequest) (*GetTagResponse, error)
	ListTag(context.Context, *ListTagRequest) (*ListTagResponse, error)

	GetTagType(context.Context, *GetTagTypeRequest) (*GetTagTypeResponse, error)
	ListTagType(context.Context, *ListTagTypeRequest) (*ListTagTypeResponse, error)

	GetTelemetryProfile(context.Context, *GetTelemetryProfileRequest) (*GetTelemetryProfileResponse, error)
	ListTelemetryProfile(context.Context, *ListTelemetryProfileRequest) (*ListTelemetryProfileResponse, error)

	GetVirtualDNSRecord(context.Context, *GetVirtualDNSRecordRequest) (*GetVirtualDNSRecordResponse, error)
	ListVirtualDNSRecord(context.Context, *ListVirtualDNSRecordRequest) (*ListVirtualDNSRecordResponse, error)

	GetVirtualDNS(context.Context, *GetVirtualDNSRequest) (*GetVirtualDNSResponse, error)
	ListVirtualDNS(context.Context, *ListVirtualDNSRequest) (*ListVirtualDNSResponse, error)

	GetVirtualIP(context.Context, *GetVirtualIPRequest) (*GetVirtualIPResponse, error)
	ListVirtualIP(context.Context, *ListVirtualIPRequest) (*ListVirtualIPResponse, error)

	GetVirtualMachineInterface(context.Context, *GetVirtualMachineInterfaceRequest) (*GetVirtualMachineInterfaceResponse, error)
	ListVirtualMachineInterface(context.Context, *ListVirtualMachineInterfaceRequest) (*ListVirtualMachineInterfaceResponse, error)

	GetVirtualMachine(context.Context, *GetVirtualMachineRequest) (*GetVirtualMachineResponse, error)
	ListVirtualMachine(context.Context, *ListVirtualMachineRequest) (*ListVirtualMachineResponse, error)

	GetVirtualNetwork(context.Context, *GetVirtualNetworkRequest) (*GetVirtualNetworkResponse, error)
	ListVirtualNetwork(context.Context, *ListVirtualNetworkRequest) (*ListVirtualNetworkResponse, error)

	GetVirtualPortGroup(context.Context, *GetVirtualPortGroupRequest) (*GetVirtualPortGroupResponse, error)
	ListVirtualPortGroup(context.Context, *ListVirtualPortGroupRequest) (*ListVirtualPortGroupResponse, error)

	GetVirtualRouter(context.Context, *GetVirtualRouterRequest) (*GetVirtualRouterResponse, error)
	ListVirtualRouter(context.Context, *ListVirtualRouterRequest) (*ListVirtualRouterResponse, error)

	GetWebuiNode(context.Context, *GetWebuiNodeRequest) (*GetWebuiNodeResponse, error)
	ListWebuiNode(context.Context, *ListWebuiNodeRequest) (*ListWebuiNodeResponse, error)
}

func (w *InternalContextWriteServiceWrapper) CreateAccessControlList(ctx context.Context, request *CreateAccessControlListRequest) (*CreateAccessControlListResponse, error) {
	return w.WriteService.CreateAccessControlList(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateAccessControlList(ctx context.Context, request *UpdateAccessControlListRequest) (*UpdateAccessControlListResponse, error) {
	return w.WriteService.UpdateAccessControlList(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAccessControlList(ctx context.Context, request *DeleteAccessControlListRequest) (*DeleteAccessControlListResponse, error) {
	return w.WriteService.DeleteAccessControlList(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAccessControlListTagRef(ctx context.Context, request *CreateAccessControlListTagRefRequest) (*CreateAccessControlListTagRefResponse, error) {
	return w.WriteService.CreateAccessControlListTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAccessControlListTagRef(ctx context.Context, request *DeleteAccessControlListTagRefRequest) (*DeleteAccessControlListTagRefResponse, error) {
	return w.WriteService.DeleteAccessControlListTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAddressGroup(ctx context.Context, request *CreateAddressGroupRequest) (*CreateAddressGroupResponse, error) {
	return w.WriteService.CreateAddressGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateAddressGroup(ctx context.Context, request *UpdateAddressGroupRequest) (*UpdateAddressGroupResponse, error) {
	return w.WriteService.UpdateAddressGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAddressGroup(ctx context.Context, request *DeleteAddressGroupRequest) (*DeleteAddressGroupResponse, error) {
	return w.WriteService.DeleteAddressGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAddressGroupTagRef(ctx context.Context, request *CreateAddressGroupTagRefRequest) (*CreateAddressGroupTagRefResponse, error) {
	return w.WriteService.CreateAddressGroupTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAddressGroupTagRef(ctx context.Context, request *DeleteAddressGroupTagRefRequest) (*DeleteAddressGroupTagRefResponse, error) {
	return w.WriteService.DeleteAddressGroupTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAlarm(ctx context.Context, request *CreateAlarmRequest) (*CreateAlarmResponse, error) {
	return w.WriteService.CreateAlarm(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateAlarm(ctx context.Context, request *UpdateAlarmRequest) (*UpdateAlarmResponse, error) {
	return w.WriteService.UpdateAlarm(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAlarm(ctx context.Context, request *DeleteAlarmRequest) (*DeleteAlarmResponse, error) {
	return w.WriteService.DeleteAlarm(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAlarmTagRef(ctx context.Context, request *CreateAlarmTagRefRequest) (*CreateAlarmTagRefResponse, error) {
	return w.WriteService.CreateAlarmTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAlarmTagRef(ctx context.Context, request *DeleteAlarmTagRefRequest) (*DeleteAlarmTagRefResponse, error) {
	return w.WriteService.DeleteAlarmTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAliasIPPool(ctx context.Context, request *CreateAliasIPPoolRequest) (*CreateAliasIPPoolResponse, error) {
	return w.WriteService.CreateAliasIPPool(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateAliasIPPool(ctx context.Context, request *UpdateAliasIPPoolRequest) (*UpdateAliasIPPoolResponse, error) {
	return w.WriteService.UpdateAliasIPPool(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAliasIPPool(ctx context.Context, request *DeleteAliasIPPoolRequest) (*DeleteAliasIPPoolResponse, error) {
	return w.WriteService.DeleteAliasIPPool(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAliasIPPoolTagRef(ctx context.Context, request *CreateAliasIPPoolTagRefRequest) (*CreateAliasIPPoolTagRefResponse, error) {
	return w.WriteService.CreateAliasIPPoolTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAliasIPPoolTagRef(ctx context.Context, request *DeleteAliasIPPoolTagRefRequest) (*DeleteAliasIPPoolTagRefResponse, error) {
	return w.WriteService.DeleteAliasIPPoolTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAliasIP(ctx context.Context, request *CreateAliasIPRequest) (*CreateAliasIPResponse, error) {
	return w.WriteService.CreateAliasIP(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateAliasIP(ctx context.Context, request *UpdateAliasIPRequest) (*UpdateAliasIPResponse, error) {
	return w.WriteService.UpdateAliasIP(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAliasIP(ctx context.Context, request *DeleteAliasIPRequest) (*DeleteAliasIPResponse, error) {
	return w.WriteService.DeleteAliasIP(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAliasIPProjectRef(ctx context.Context, request *CreateAliasIPProjectRefRequest) (*CreateAliasIPProjectRefResponse, error) {
	return w.WriteService.CreateAliasIPProjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAliasIPProjectRef(ctx context.Context, request *DeleteAliasIPProjectRefRequest) (*DeleteAliasIPProjectRefResponse, error) {
	return w.WriteService.DeleteAliasIPProjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAliasIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateAliasIPVirtualMachineInterfaceRefRequest) (*CreateAliasIPVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.CreateAliasIPVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAliasIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteAliasIPVirtualMachineInterfaceRefRequest) (*DeleteAliasIPVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.DeleteAliasIPVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAliasIPTagRef(ctx context.Context, request *CreateAliasIPTagRefRequest) (*CreateAliasIPTagRefResponse, error) {
	return w.WriteService.CreateAliasIPTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAliasIPTagRef(ctx context.Context, request *DeleteAliasIPTagRefRequest) (*DeleteAliasIPTagRefResponse, error) {
	return w.WriteService.DeleteAliasIPTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAnalyticsAlarmNode(ctx context.Context, request *CreateAnalyticsAlarmNodeRequest) (*CreateAnalyticsAlarmNodeResponse, error) {
	return w.WriteService.CreateAnalyticsAlarmNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateAnalyticsAlarmNode(ctx context.Context, request *UpdateAnalyticsAlarmNodeRequest) (*UpdateAnalyticsAlarmNodeResponse, error) {
	return w.WriteService.UpdateAnalyticsAlarmNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAnalyticsAlarmNode(ctx context.Context, request *DeleteAnalyticsAlarmNodeRequest) (*DeleteAnalyticsAlarmNodeResponse, error) {
	return w.WriteService.DeleteAnalyticsAlarmNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAnalyticsAlarmNodeTagRef(ctx context.Context, request *CreateAnalyticsAlarmNodeTagRefRequest) (*CreateAnalyticsAlarmNodeTagRefResponse, error) {
	return w.WriteService.CreateAnalyticsAlarmNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAnalyticsAlarmNodeTagRef(ctx context.Context, request *DeleteAnalyticsAlarmNodeTagRefRequest) (*DeleteAnalyticsAlarmNodeTagRefResponse, error) {
	return w.WriteService.DeleteAnalyticsAlarmNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAnalyticsNode(ctx context.Context, request *CreateAnalyticsNodeRequest) (*CreateAnalyticsNodeResponse, error) {
	return w.WriteService.CreateAnalyticsNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateAnalyticsNode(ctx context.Context, request *UpdateAnalyticsNodeRequest) (*UpdateAnalyticsNodeResponse, error) {
	return w.WriteService.UpdateAnalyticsNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAnalyticsNode(ctx context.Context, request *DeleteAnalyticsNodeRequest) (*DeleteAnalyticsNodeResponse, error) {
	return w.WriteService.DeleteAnalyticsNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAnalyticsNodeTagRef(ctx context.Context, request *CreateAnalyticsNodeTagRefRequest) (*CreateAnalyticsNodeTagRefResponse, error) {
	return w.WriteService.CreateAnalyticsNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAnalyticsNodeTagRef(ctx context.Context, request *DeleteAnalyticsNodeTagRefRequest) (*DeleteAnalyticsNodeTagRefResponse, error) {
	return w.WriteService.DeleteAnalyticsNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAnalyticsSNMPNode(ctx context.Context, request *CreateAnalyticsSNMPNodeRequest) (*CreateAnalyticsSNMPNodeResponse, error) {
	return w.WriteService.CreateAnalyticsSNMPNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateAnalyticsSNMPNode(ctx context.Context, request *UpdateAnalyticsSNMPNodeRequest) (*UpdateAnalyticsSNMPNodeResponse, error) {
	return w.WriteService.UpdateAnalyticsSNMPNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAnalyticsSNMPNode(ctx context.Context, request *DeleteAnalyticsSNMPNodeRequest) (*DeleteAnalyticsSNMPNodeResponse, error) {
	return w.WriteService.DeleteAnalyticsSNMPNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAnalyticsSNMPNodeTagRef(ctx context.Context, request *CreateAnalyticsSNMPNodeTagRefRequest) (*CreateAnalyticsSNMPNodeTagRefResponse, error) {
	return w.WriteService.CreateAnalyticsSNMPNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAnalyticsSNMPNodeTagRef(ctx context.Context, request *DeleteAnalyticsSNMPNodeTagRefRequest) (*DeleteAnalyticsSNMPNodeTagRefResponse, error) {
	return w.WriteService.DeleteAnalyticsSNMPNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAPIAccessList(ctx context.Context, request *CreateAPIAccessListRequest) (*CreateAPIAccessListResponse, error) {
	return w.WriteService.CreateAPIAccessList(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateAPIAccessList(ctx context.Context, request *UpdateAPIAccessListRequest) (*UpdateAPIAccessListResponse, error) {
	return w.WriteService.UpdateAPIAccessList(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAPIAccessList(ctx context.Context, request *DeleteAPIAccessListRequest) (*DeleteAPIAccessListResponse, error) {
	return w.WriteService.DeleteAPIAccessList(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateAPIAccessListTagRef(ctx context.Context, request *CreateAPIAccessListTagRefRequest) (*CreateAPIAccessListTagRefResponse, error) {
	return w.WriteService.CreateAPIAccessListTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteAPIAccessListTagRef(ctx context.Context, request *DeleteAPIAccessListTagRefRequest) (*DeleteAPIAccessListTagRefResponse, error) {
	return w.WriteService.DeleteAPIAccessListTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateApplicationPolicySet(ctx context.Context, request *CreateApplicationPolicySetRequest) (*CreateApplicationPolicySetResponse, error) {
	return w.WriteService.CreateApplicationPolicySet(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateApplicationPolicySet(ctx context.Context, request *UpdateApplicationPolicySetRequest) (*UpdateApplicationPolicySetResponse, error) {
	return w.WriteService.UpdateApplicationPolicySet(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteApplicationPolicySet(ctx context.Context, request *DeleteApplicationPolicySetRequest) (*DeleteApplicationPolicySetResponse, error) {
	return w.WriteService.DeleteApplicationPolicySet(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateApplicationPolicySetGlobalVrouterConfigRef(ctx context.Context, request *CreateApplicationPolicySetGlobalVrouterConfigRefRequest) (*CreateApplicationPolicySetGlobalVrouterConfigRefResponse, error) {
	return w.WriteService.CreateApplicationPolicySetGlobalVrouterConfigRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteApplicationPolicySetGlobalVrouterConfigRef(ctx context.Context, request *DeleteApplicationPolicySetGlobalVrouterConfigRefRequest) (*DeleteApplicationPolicySetGlobalVrouterConfigRefResponse, error) {
	return w.WriteService.DeleteApplicationPolicySetGlobalVrouterConfigRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateApplicationPolicySetTagRef(ctx context.Context, request *CreateApplicationPolicySetTagRefRequest) (*CreateApplicationPolicySetTagRefResponse, error) {
	return w.WriteService.CreateApplicationPolicySetTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteApplicationPolicySetTagRef(ctx context.Context, request *DeleteApplicationPolicySetTagRefRequest) (*DeleteApplicationPolicySetTagRefResponse, error) {
	return w.WriteService.DeleteApplicationPolicySetTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateApplicationPolicySetFirewallPolicyRef(ctx context.Context, request *CreateApplicationPolicySetFirewallPolicyRefRequest) (*CreateApplicationPolicySetFirewallPolicyRefResponse, error) {
	return w.WriteService.CreateApplicationPolicySetFirewallPolicyRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteApplicationPolicySetFirewallPolicyRef(ctx context.Context, request *DeleteApplicationPolicySetFirewallPolicyRefRequest) (*DeleteApplicationPolicySetFirewallPolicyRefResponse, error) {
	return w.WriteService.DeleteApplicationPolicySetFirewallPolicyRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBGPAsAService(ctx context.Context, request *CreateBGPAsAServiceRequest) (*CreateBGPAsAServiceResponse, error) {
	return w.WriteService.CreateBGPAsAService(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateBGPAsAService(ctx context.Context, request *UpdateBGPAsAServiceRequest) (*UpdateBGPAsAServiceResponse, error) {
	return w.WriteService.UpdateBGPAsAService(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBGPAsAService(ctx context.Context, request *DeleteBGPAsAServiceRequest) (*DeleteBGPAsAServiceResponse, error) {
	return w.WriteService.DeleteBGPAsAService(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBGPAsAServiceBGPRouterRef(ctx context.Context, request *CreateBGPAsAServiceBGPRouterRefRequest) (*CreateBGPAsAServiceBGPRouterRefResponse, error) {
	return w.WriteService.CreateBGPAsAServiceBGPRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBGPAsAServiceBGPRouterRef(ctx context.Context, request *DeleteBGPAsAServiceBGPRouterRefRequest) (*DeleteBGPAsAServiceBGPRouterRefResponse, error) {
	return w.WriteService.DeleteBGPAsAServiceBGPRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBGPAsAServiceControlNodeZoneRef(ctx context.Context, request *CreateBGPAsAServiceControlNodeZoneRefRequest) (*CreateBGPAsAServiceControlNodeZoneRefResponse, error) {
	return w.WriteService.CreateBGPAsAServiceControlNodeZoneRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBGPAsAServiceControlNodeZoneRef(ctx context.Context, request *DeleteBGPAsAServiceControlNodeZoneRefRequest) (*DeleteBGPAsAServiceControlNodeZoneRefResponse, error) {
	return w.WriteService.DeleteBGPAsAServiceControlNodeZoneRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBGPAsAServiceServiceHealthCheckRef(ctx context.Context, request *CreateBGPAsAServiceServiceHealthCheckRefRequest) (*CreateBGPAsAServiceServiceHealthCheckRefResponse, error) {
	return w.WriteService.CreateBGPAsAServiceServiceHealthCheckRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBGPAsAServiceServiceHealthCheckRef(ctx context.Context, request *DeleteBGPAsAServiceServiceHealthCheckRefRequest) (*DeleteBGPAsAServiceServiceHealthCheckRefResponse, error) {
	return w.WriteService.DeleteBGPAsAServiceServiceHealthCheckRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBGPAsAServiceVirtualMachineInterfaceRef(ctx context.Context, request *CreateBGPAsAServiceVirtualMachineInterfaceRefRequest) (*CreateBGPAsAServiceVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.CreateBGPAsAServiceVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBGPAsAServiceVirtualMachineInterfaceRef(ctx context.Context, request *DeleteBGPAsAServiceVirtualMachineInterfaceRefRequest) (*DeleteBGPAsAServiceVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.DeleteBGPAsAServiceVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBGPAsAServiceTagRef(ctx context.Context, request *CreateBGPAsAServiceTagRefRequest) (*CreateBGPAsAServiceTagRefResponse, error) {
	return w.WriteService.CreateBGPAsAServiceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBGPAsAServiceTagRef(ctx context.Context, request *DeleteBGPAsAServiceTagRefRequest) (*DeleteBGPAsAServiceTagRefResponse, error) {
	return w.WriteService.DeleteBGPAsAServiceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBGPRouter(ctx context.Context, request *CreateBGPRouterRequest) (*CreateBGPRouterResponse, error) {
	return w.WriteService.CreateBGPRouter(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateBGPRouter(ctx context.Context, request *UpdateBGPRouterRequest) (*UpdateBGPRouterResponse, error) {
	return w.WriteService.UpdateBGPRouter(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBGPRouter(ctx context.Context, request *DeleteBGPRouterRequest) (*DeleteBGPRouterResponse, error) {
	return w.WriteService.DeleteBGPRouter(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBGPRouterTagRef(ctx context.Context, request *CreateBGPRouterTagRefRequest) (*CreateBGPRouterTagRefResponse, error) {
	return w.WriteService.CreateBGPRouterTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBGPRouterTagRef(ctx context.Context, request *DeleteBGPRouterTagRefRequest) (*DeleteBGPRouterTagRefResponse, error) {
	return w.WriteService.DeleteBGPRouterTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBGPRouterBGPRouterRef(ctx context.Context, request *CreateBGPRouterBGPRouterRefRequest) (*CreateBGPRouterBGPRouterRefResponse, error) {
	return w.WriteService.CreateBGPRouterBGPRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBGPRouterBGPRouterRef(ctx context.Context, request *DeleteBGPRouterBGPRouterRefRequest) (*DeleteBGPRouterBGPRouterRefResponse, error) {
	return w.WriteService.DeleteBGPRouterBGPRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBGPRouterControlNodeZoneRef(ctx context.Context, request *CreateBGPRouterControlNodeZoneRefRequest) (*CreateBGPRouterControlNodeZoneRefResponse, error) {
	return w.WriteService.CreateBGPRouterControlNodeZoneRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBGPRouterControlNodeZoneRef(ctx context.Context, request *DeleteBGPRouterControlNodeZoneRefRequest) (*DeleteBGPRouterControlNodeZoneRefResponse, error) {
	return w.WriteService.DeleteBGPRouterControlNodeZoneRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBGPRouterSubClusterRef(ctx context.Context, request *CreateBGPRouterSubClusterRefRequest) (*CreateBGPRouterSubClusterRefResponse, error) {
	return w.WriteService.CreateBGPRouterSubClusterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBGPRouterSubClusterRef(ctx context.Context, request *DeleteBGPRouterSubClusterRefRequest) (*DeleteBGPRouterSubClusterRefResponse, error) {
	return w.WriteService.DeleteBGPRouterSubClusterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBGPVPN(ctx context.Context, request *CreateBGPVPNRequest) (*CreateBGPVPNResponse, error) {
	return w.WriteService.CreateBGPVPN(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateBGPVPN(ctx context.Context, request *UpdateBGPVPNRequest) (*UpdateBGPVPNResponse, error) {
	return w.WriteService.UpdateBGPVPN(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBGPVPN(ctx context.Context, request *DeleteBGPVPNRequest) (*DeleteBGPVPNResponse, error) {
	return w.WriteService.DeleteBGPVPN(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBGPVPNTagRef(ctx context.Context, request *CreateBGPVPNTagRefRequest) (*CreateBGPVPNTagRefResponse, error) {
	return w.WriteService.CreateBGPVPNTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBGPVPNTagRef(ctx context.Context, request *DeleteBGPVPNTagRefRequest) (*DeleteBGPVPNTagRefResponse, error) {
	return w.WriteService.DeleteBGPVPNTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBridgeDomain(ctx context.Context, request *CreateBridgeDomainRequest) (*CreateBridgeDomainResponse, error) {
	return w.WriteService.CreateBridgeDomain(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateBridgeDomain(ctx context.Context, request *UpdateBridgeDomainRequest) (*UpdateBridgeDomainResponse, error) {
	return w.WriteService.UpdateBridgeDomain(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBridgeDomain(ctx context.Context, request *DeleteBridgeDomainRequest) (*DeleteBridgeDomainResponse, error) {
	return w.WriteService.DeleteBridgeDomain(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateBridgeDomainTagRef(ctx context.Context, request *CreateBridgeDomainTagRefRequest) (*CreateBridgeDomainTagRefResponse, error) {
	return w.WriteService.CreateBridgeDomainTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteBridgeDomainTagRef(ctx context.Context, request *DeleteBridgeDomainTagRefRequest) (*DeleteBridgeDomainTagRefResponse, error) {
	return w.WriteService.DeleteBridgeDomainTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateCard(ctx context.Context, request *CreateCardRequest) (*CreateCardResponse, error) {
	return w.WriteService.CreateCard(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateCard(ctx context.Context, request *UpdateCardRequest) (*UpdateCardResponse, error) {
	return w.WriteService.UpdateCard(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteCard(ctx context.Context, request *DeleteCardRequest) (*DeleteCardResponse, error) {
	return w.WriteService.DeleteCard(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateCardTagRef(ctx context.Context, request *CreateCardTagRefRequest) (*CreateCardTagRefResponse, error) {
	return w.WriteService.CreateCardTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteCardTagRef(ctx context.Context, request *DeleteCardTagRefRequest) (*DeleteCardTagRefResponse, error) {
	return w.WriteService.DeleteCardTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateCliConfig(ctx context.Context, request *CreateCliConfigRequest) (*CreateCliConfigResponse, error) {
	return w.WriteService.CreateCliConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateCliConfig(ctx context.Context, request *UpdateCliConfigRequest) (*UpdateCliConfigResponse, error) {
	return w.WriteService.UpdateCliConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteCliConfig(ctx context.Context, request *DeleteCliConfigRequest) (*DeleteCliConfigResponse, error) {
	return w.WriteService.DeleteCliConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateCliConfigTagRef(ctx context.Context, request *CreateCliConfigTagRefRequest) (*CreateCliConfigTagRefResponse, error) {
	return w.WriteService.CreateCliConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteCliConfigTagRef(ctx context.Context, request *DeleteCliConfigTagRefRequest) (*DeleteCliConfigTagRefResponse, error) {
	return w.WriteService.DeleteCliConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateConfigDatabaseNode(ctx context.Context, request *CreateConfigDatabaseNodeRequest) (*CreateConfigDatabaseNodeResponse, error) {
	return w.WriteService.CreateConfigDatabaseNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateConfigDatabaseNode(ctx context.Context, request *UpdateConfigDatabaseNodeRequest) (*UpdateConfigDatabaseNodeResponse, error) {
	return w.WriteService.UpdateConfigDatabaseNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteConfigDatabaseNode(ctx context.Context, request *DeleteConfigDatabaseNodeRequest) (*DeleteConfigDatabaseNodeResponse, error) {
	return w.WriteService.DeleteConfigDatabaseNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateConfigDatabaseNodeTagRef(ctx context.Context, request *CreateConfigDatabaseNodeTagRefRequest) (*CreateConfigDatabaseNodeTagRefResponse, error) {
	return w.WriteService.CreateConfigDatabaseNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteConfigDatabaseNodeTagRef(ctx context.Context, request *DeleteConfigDatabaseNodeTagRefRequest) (*DeleteConfigDatabaseNodeTagRefResponse, error) {
	return w.WriteService.DeleteConfigDatabaseNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateConfigNode(ctx context.Context, request *CreateConfigNodeRequest) (*CreateConfigNodeResponse, error) {
	return w.WriteService.CreateConfigNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateConfigNode(ctx context.Context, request *UpdateConfigNodeRequest) (*UpdateConfigNodeResponse, error) {
	return w.WriteService.UpdateConfigNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteConfigNode(ctx context.Context, request *DeleteConfigNodeRequest) (*DeleteConfigNodeResponse, error) {
	return w.WriteService.DeleteConfigNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateConfigNodeTagRef(ctx context.Context, request *CreateConfigNodeTagRefRequest) (*CreateConfigNodeTagRefResponse, error) {
	return w.WriteService.CreateConfigNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteConfigNodeTagRef(ctx context.Context, request *DeleteConfigNodeTagRefRequest) (*DeleteConfigNodeTagRefResponse, error) {
	return w.WriteService.DeleteConfigNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateConfigRoot(ctx context.Context, request *CreateConfigRootRequest) (*CreateConfigRootResponse, error) {
	return w.WriteService.CreateConfigRoot(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateConfigRoot(ctx context.Context, request *UpdateConfigRootRequest) (*UpdateConfigRootResponse, error) {
	return w.WriteService.UpdateConfigRoot(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteConfigRoot(ctx context.Context, request *DeleteConfigRootRequest) (*DeleteConfigRootResponse, error) {
	return w.WriteService.DeleteConfigRoot(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateConfigRootTagRef(ctx context.Context, request *CreateConfigRootTagRefRequest) (*CreateConfigRootTagRefResponse, error) {
	return w.WriteService.CreateConfigRootTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteConfigRootTagRef(ctx context.Context, request *DeleteConfigRootTagRefRequest) (*DeleteConfigRootTagRefResponse, error) {
	return w.WriteService.DeleteConfigRootTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateControlNodeZone(ctx context.Context, request *CreateControlNodeZoneRequest) (*CreateControlNodeZoneResponse, error) {
	return w.WriteService.CreateControlNodeZone(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateControlNodeZone(ctx context.Context, request *UpdateControlNodeZoneRequest) (*UpdateControlNodeZoneResponse, error) {
	return w.WriteService.UpdateControlNodeZone(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteControlNodeZone(ctx context.Context, request *DeleteControlNodeZoneRequest) (*DeleteControlNodeZoneResponse, error) {
	return w.WriteService.DeleteControlNodeZone(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateControlNodeZoneTagRef(ctx context.Context, request *CreateControlNodeZoneTagRefRequest) (*CreateControlNodeZoneTagRefResponse, error) {
	return w.WriteService.CreateControlNodeZoneTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteControlNodeZoneTagRef(ctx context.Context, request *DeleteControlNodeZoneTagRefRequest) (*DeleteControlNodeZoneTagRefResponse, error) {
	return w.WriteService.DeleteControlNodeZoneTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateCustomerAttachment(ctx context.Context, request *CreateCustomerAttachmentRequest) (*CreateCustomerAttachmentResponse, error) {
	return w.WriteService.CreateCustomerAttachment(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateCustomerAttachment(ctx context.Context, request *UpdateCustomerAttachmentRequest) (*UpdateCustomerAttachmentResponse, error) {
	return w.WriteService.UpdateCustomerAttachment(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteCustomerAttachment(ctx context.Context, request *DeleteCustomerAttachmentRequest) (*DeleteCustomerAttachmentResponse, error) {
	return w.WriteService.DeleteCustomerAttachment(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateCustomerAttachmentVirtualMachineInterfaceRef(ctx context.Context, request *CreateCustomerAttachmentVirtualMachineInterfaceRefRequest) (*CreateCustomerAttachmentVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.CreateCustomerAttachmentVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteCustomerAttachmentVirtualMachineInterfaceRef(ctx context.Context, request *DeleteCustomerAttachmentVirtualMachineInterfaceRefRequest) (*DeleteCustomerAttachmentVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.DeleteCustomerAttachmentVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateCustomerAttachmentTagRef(ctx context.Context, request *CreateCustomerAttachmentTagRefRequest) (*CreateCustomerAttachmentTagRefResponse, error) {
	return w.WriteService.CreateCustomerAttachmentTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteCustomerAttachmentTagRef(ctx context.Context, request *DeleteCustomerAttachmentTagRefRequest) (*DeleteCustomerAttachmentTagRefResponse, error) {
	return w.WriteService.DeleteCustomerAttachmentTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateCustomerAttachmentFloatingIPRef(ctx context.Context, request *CreateCustomerAttachmentFloatingIPRefRequest) (*CreateCustomerAttachmentFloatingIPRefResponse, error) {
	return w.WriteService.CreateCustomerAttachmentFloatingIPRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteCustomerAttachmentFloatingIPRef(ctx context.Context, request *DeleteCustomerAttachmentFloatingIPRefRequest) (*DeleteCustomerAttachmentFloatingIPRefResponse, error) {
	return w.WriteService.DeleteCustomerAttachmentFloatingIPRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDataCenterInterconnect(ctx context.Context, request *CreateDataCenterInterconnectRequest) (*CreateDataCenterInterconnectResponse, error) {
	return w.WriteService.CreateDataCenterInterconnect(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateDataCenterInterconnect(ctx context.Context, request *UpdateDataCenterInterconnectRequest) (*UpdateDataCenterInterconnectResponse, error) {
	return w.WriteService.UpdateDataCenterInterconnect(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDataCenterInterconnect(ctx context.Context, request *DeleteDataCenterInterconnectRequest) (*DeleteDataCenterInterconnectResponse, error) {
	return w.WriteService.DeleteDataCenterInterconnect(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDataCenterInterconnectLogicalRouterRef(ctx context.Context, request *CreateDataCenterInterconnectLogicalRouterRefRequest) (*CreateDataCenterInterconnectLogicalRouterRefResponse, error) {
	return w.WriteService.CreateDataCenterInterconnectLogicalRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDataCenterInterconnectLogicalRouterRef(ctx context.Context, request *DeleteDataCenterInterconnectLogicalRouterRefRequest) (*DeleteDataCenterInterconnectLogicalRouterRefResponse, error) {
	return w.WriteService.DeleteDataCenterInterconnectLogicalRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDataCenterInterconnectVirtualNetworkRef(ctx context.Context, request *CreateDataCenterInterconnectVirtualNetworkRefRequest) (*CreateDataCenterInterconnectVirtualNetworkRefResponse, error) {
	return w.WriteService.CreateDataCenterInterconnectVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDataCenterInterconnectVirtualNetworkRef(ctx context.Context, request *DeleteDataCenterInterconnectVirtualNetworkRefRequest) (*DeleteDataCenterInterconnectVirtualNetworkRefResponse, error) {
	return w.WriteService.DeleteDataCenterInterconnectVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDataCenterInterconnectTagRef(ctx context.Context, request *CreateDataCenterInterconnectTagRefRequest) (*CreateDataCenterInterconnectTagRefResponse, error) {
	return w.WriteService.CreateDataCenterInterconnectTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDataCenterInterconnectTagRef(ctx context.Context, request *DeleteDataCenterInterconnectTagRefRequest) (*DeleteDataCenterInterconnectTagRefResponse, error) {
	return w.WriteService.DeleteDataCenterInterconnectTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDatabaseNode(ctx context.Context, request *CreateDatabaseNodeRequest) (*CreateDatabaseNodeResponse, error) {
	return w.WriteService.CreateDatabaseNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateDatabaseNode(ctx context.Context, request *UpdateDatabaseNodeRequest) (*UpdateDatabaseNodeResponse, error) {
	return w.WriteService.UpdateDatabaseNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDatabaseNode(ctx context.Context, request *DeleteDatabaseNodeRequest) (*DeleteDatabaseNodeResponse, error) {
	return w.WriteService.DeleteDatabaseNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDatabaseNodeTagRef(ctx context.Context, request *CreateDatabaseNodeTagRefRequest) (*CreateDatabaseNodeTagRefResponse, error) {
	return w.WriteService.CreateDatabaseNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDatabaseNodeTagRef(ctx context.Context, request *DeleteDatabaseNodeTagRefRequest) (*DeleteDatabaseNodeTagRefResponse, error) {
	return w.WriteService.DeleteDatabaseNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDeviceChassis(ctx context.Context, request *CreateDeviceChassisRequest) (*CreateDeviceChassisResponse, error) {
	return w.WriteService.CreateDeviceChassis(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateDeviceChassis(ctx context.Context, request *UpdateDeviceChassisRequest) (*UpdateDeviceChassisResponse, error) {
	return w.WriteService.UpdateDeviceChassis(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDeviceChassis(ctx context.Context, request *DeleteDeviceChassisRequest) (*DeleteDeviceChassisResponse, error) {
	return w.WriteService.DeleteDeviceChassis(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDeviceChassisTagRef(ctx context.Context, request *CreateDeviceChassisTagRefRequest) (*CreateDeviceChassisTagRefResponse, error) {
	return w.WriteService.CreateDeviceChassisTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDeviceChassisTagRef(ctx context.Context, request *DeleteDeviceChassisTagRefRequest) (*DeleteDeviceChassisTagRefResponse, error) {
	return w.WriteService.DeleteDeviceChassisTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDeviceFunctionalGroup(ctx context.Context, request *CreateDeviceFunctionalGroupRequest) (*CreateDeviceFunctionalGroupResponse, error) {
	return w.WriteService.CreateDeviceFunctionalGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateDeviceFunctionalGroup(ctx context.Context, request *UpdateDeviceFunctionalGroupRequest) (*UpdateDeviceFunctionalGroupResponse, error) {
	return w.WriteService.UpdateDeviceFunctionalGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDeviceFunctionalGroup(ctx context.Context, request *DeleteDeviceFunctionalGroupRequest) (*DeleteDeviceFunctionalGroupResponse, error) {
	return w.WriteService.DeleteDeviceFunctionalGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDeviceFunctionalGroupPhysicalRoleRef(ctx context.Context, request *CreateDeviceFunctionalGroupPhysicalRoleRefRequest) (*CreateDeviceFunctionalGroupPhysicalRoleRefResponse, error) {
	return w.WriteService.CreateDeviceFunctionalGroupPhysicalRoleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDeviceFunctionalGroupPhysicalRoleRef(ctx context.Context, request *DeleteDeviceFunctionalGroupPhysicalRoleRefRequest) (*DeleteDeviceFunctionalGroupPhysicalRoleRefResponse, error) {
	return w.WriteService.DeleteDeviceFunctionalGroupPhysicalRoleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDeviceFunctionalGroupTagRef(ctx context.Context, request *CreateDeviceFunctionalGroupTagRefRequest) (*CreateDeviceFunctionalGroupTagRefResponse, error) {
	return w.WriteService.CreateDeviceFunctionalGroupTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDeviceFunctionalGroupTagRef(ctx context.Context, request *DeleteDeviceFunctionalGroupTagRefRequest) (*DeleteDeviceFunctionalGroupTagRefResponse, error) {
	return w.WriteService.DeleteDeviceFunctionalGroupTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDeviceImage(ctx context.Context, request *CreateDeviceImageRequest) (*CreateDeviceImageResponse, error) {
	return w.WriteService.CreateDeviceImage(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateDeviceImage(ctx context.Context, request *UpdateDeviceImageRequest) (*UpdateDeviceImageResponse, error) {
	return w.WriteService.UpdateDeviceImage(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDeviceImage(ctx context.Context, request *DeleteDeviceImageRequest) (*DeleteDeviceImageResponse, error) {
	return w.WriteService.DeleteDeviceImage(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDeviceImageTagRef(ctx context.Context, request *CreateDeviceImageTagRefRequest) (*CreateDeviceImageTagRefResponse, error) {
	return w.WriteService.CreateDeviceImageTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDeviceImageTagRef(ctx context.Context, request *DeleteDeviceImageTagRefRequest) (*DeleteDeviceImageTagRefResponse, error) {
	return w.WriteService.DeleteDeviceImageTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDeviceImageHardwareRef(ctx context.Context, request *CreateDeviceImageHardwareRefRequest) (*CreateDeviceImageHardwareRefResponse, error) {
	return w.WriteService.CreateDeviceImageHardwareRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDeviceImageHardwareRef(ctx context.Context, request *DeleteDeviceImageHardwareRefRequest) (*DeleteDeviceImageHardwareRefResponse, error) {
	return w.WriteService.DeleteDeviceImageHardwareRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDevicemgrNode(ctx context.Context, request *CreateDevicemgrNodeRequest) (*CreateDevicemgrNodeResponse, error) {
	return w.WriteService.CreateDevicemgrNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateDevicemgrNode(ctx context.Context, request *UpdateDevicemgrNodeRequest) (*UpdateDevicemgrNodeResponse, error) {
	return w.WriteService.UpdateDevicemgrNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDevicemgrNode(ctx context.Context, request *DeleteDevicemgrNodeRequest) (*DeleteDevicemgrNodeResponse, error) {
	return w.WriteService.DeleteDevicemgrNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDevicemgrNodeTagRef(ctx context.Context, request *CreateDevicemgrNodeTagRefRequest) (*CreateDevicemgrNodeTagRefResponse, error) {
	return w.WriteService.CreateDevicemgrNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDevicemgrNodeTagRef(ctx context.Context, request *DeleteDevicemgrNodeTagRefRequest) (*DeleteDevicemgrNodeTagRefResponse, error) {
	return w.WriteService.DeleteDevicemgrNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDiscoveryServiceAssignment(ctx context.Context, request *CreateDiscoveryServiceAssignmentRequest) (*CreateDiscoveryServiceAssignmentResponse, error) {
	return w.WriteService.CreateDiscoveryServiceAssignment(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateDiscoveryServiceAssignment(ctx context.Context, request *UpdateDiscoveryServiceAssignmentRequest) (*UpdateDiscoveryServiceAssignmentResponse, error) {
	return w.WriteService.UpdateDiscoveryServiceAssignment(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDiscoveryServiceAssignment(ctx context.Context, request *DeleteDiscoveryServiceAssignmentRequest) (*DeleteDiscoveryServiceAssignmentResponse, error) {
	return w.WriteService.DeleteDiscoveryServiceAssignment(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDiscoveryServiceAssignmentTagRef(ctx context.Context, request *CreateDiscoveryServiceAssignmentTagRefRequest) (*CreateDiscoveryServiceAssignmentTagRefResponse, error) {
	return w.WriteService.CreateDiscoveryServiceAssignmentTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDiscoveryServiceAssignmentTagRef(ctx context.Context, request *DeleteDiscoveryServiceAssignmentTagRefRequest) (*DeleteDiscoveryServiceAssignmentTagRefResponse, error) {
	return w.WriteService.DeleteDiscoveryServiceAssignmentTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDomain(ctx context.Context, request *CreateDomainRequest) (*CreateDomainResponse, error) {
	return w.WriteService.CreateDomain(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateDomain(ctx context.Context, request *UpdateDomainRequest) (*UpdateDomainResponse, error) {
	return w.WriteService.UpdateDomain(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDomain(ctx context.Context, request *DeleteDomainRequest) (*DeleteDomainResponse, error) {
	return w.WriteService.DeleteDomain(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDomainTagRef(ctx context.Context, request *CreateDomainTagRefRequest) (*CreateDomainTagRefResponse, error) {
	return w.WriteService.CreateDomainTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDomainTagRef(ctx context.Context, request *DeleteDomainTagRefRequest) (*DeleteDomainTagRefResponse, error) {
	return w.WriteService.DeleteDomainTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDsaRule(ctx context.Context, request *CreateDsaRuleRequest) (*CreateDsaRuleResponse, error) {
	return w.WriteService.CreateDsaRule(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateDsaRule(ctx context.Context, request *UpdateDsaRuleRequest) (*UpdateDsaRuleResponse, error) {
	return w.WriteService.UpdateDsaRule(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDsaRule(ctx context.Context, request *DeleteDsaRuleRequest) (*DeleteDsaRuleResponse, error) {
	return w.WriteService.DeleteDsaRule(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateDsaRuleTagRef(ctx context.Context, request *CreateDsaRuleTagRefRequest) (*CreateDsaRuleTagRefResponse, error) {
	return w.WriteService.CreateDsaRuleTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteDsaRuleTagRef(ctx context.Context, request *DeleteDsaRuleTagRefRequest) (*DeleteDsaRuleTagRefResponse, error) {
	return w.WriteService.DeleteDsaRuleTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateE2ServiceProvider(ctx context.Context, request *CreateE2ServiceProviderRequest) (*CreateE2ServiceProviderResponse, error) {
	return w.WriteService.CreateE2ServiceProvider(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateE2ServiceProvider(ctx context.Context, request *UpdateE2ServiceProviderRequest) (*UpdateE2ServiceProviderResponse, error) {
	return w.WriteService.UpdateE2ServiceProvider(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteE2ServiceProvider(ctx context.Context, request *DeleteE2ServiceProviderRequest) (*DeleteE2ServiceProviderResponse, error) {
	return w.WriteService.DeleteE2ServiceProvider(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateE2ServiceProviderPeeringPolicyRef(ctx context.Context, request *CreateE2ServiceProviderPeeringPolicyRefRequest) (*CreateE2ServiceProviderPeeringPolicyRefResponse, error) {
	return w.WriteService.CreateE2ServiceProviderPeeringPolicyRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteE2ServiceProviderPeeringPolicyRef(ctx context.Context, request *DeleteE2ServiceProviderPeeringPolicyRefRequest) (*DeleteE2ServiceProviderPeeringPolicyRefResponse, error) {
	return w.WriteService.DeleteE2ServiceProviderPeeringPolicyRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateE2ServiceProviderPhysicalRouterRef(ctx context.Context, request *CreateE2ServiceProviderPhysicalRouterRefRequest) (*CreateE2ServiceProviderPhysicalRouterRefResponse, error) {
	return w.WriteService.CreateE2ServiceProviderPhysicalRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteE2ServiceProviderPhysicalRouterRef(ctx context.Context, request *DeleteE2ServiceProviderPhysicalRouterRefRequest) (*DeleteE2ServiceProviderPhysicalRouterRefResponse, error) {
	return w.WriteService.DeleteE2ServiceProviderPhysicalRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateE2ServiceProviderTagRef(ctx context.Context, request *CreateE2ServiceProviderTagRefRequest) (*CreateE2ServiceProviderTagRefResponse, error) {
	return w.WriteService.CreateE2ServiceProviderTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteE2ServiceProviderTagRef(ctx context.Context, request *DeleteE2ServiceProviderTagRefRequest) (*DeleteE2ServiceProviderTagRefResponse, error) {
	return w.WriteService.DeleteE2ServiceProviderTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFabricNamespace(ctx context.Context, request *CreateFabricNamespaceRequest) (*CreateFabricNamespaceResponse, error) {
	return w.WriteService.CreateFabricNamespace(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateFabricNamespace(ctx context.Context, request *UpdateFabricNamespaceRequest) (*UpdateFabricNamespaceResponse, error) {
	return w.WriteService.UpdateFabricNamespace(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFabricNamespace(ctx context.Context, request *DeleteFabricNamespaceRequest) (*DeleteFabricNamespaceResponse, error) {
	return w.WriteService.DeleteFabricNamespace(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFabricNamespaceTagRef(ctx context.Context, request *CreateFabricNamespaceTagRefRequest) (*CreateFabricNamespaceTagRefResponse, error) {
	return w.WriteService.CreateFabricNamespaceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFabricNamespaceTagRef(ctx context.Context, request *DeleteFabricNamespaceTagRefRequest) (*DeleteFabricNamespaceTagRefResponse, error) {
	return w.WriteService.DeleteFabricNamespaceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFabric(ctx context.Context, request *CreateFabricRequest) (*CreateFabricResponse, error) {
	return w.WriteService.CreateFabric(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateFabric(ctx context.Context, request *UpdateFabricRequest) (*UpdateFabricResponse, error) {
	return w.WriteService.UpdateFabric(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFabric(ctx context.Context, request *DeleteFabricRequest) (*DeleteFabricResponse, error) {
	return w.WriteService.DeleteFabric(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFabricVirtualNetworkRef(ctx context.Context, request *CreateFabricVirtualNetworkRefRequest) (*CreateFabricVirtualNetworkRefResponse, error) {
	return w.WriteService.CreateFabricVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFabricVirtualNetworkRef(ctx context.Context, request *DeleteFabricVirtualNetworkRefRequest) (*DeleteFabricVirtualNetworkRefResponse, error) {
	return w.WriteService.DeleteFabricVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFabricTagRef(ctx context.Context, request *CreateFabricTagRefRequest) (*CreateFabricTagRefResponse, error) {
	return w.WriteService.CreateFabricTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFabricTagRef(ctx context.Context, request *DeleteFabricTagRefRequest) (*DeleteFabricTagRefResponse, error) {
	return w.WriteService.DeleteFabricTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFabricIntentMapRef(ctx context.Context, request *CreateFabricIntentMapRefRequest) (*CreateFabricIntentMapRefResponse, error) {
	return w.WriteService.CreateFabricIntentMapRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFabricIntentMapRef(ctx context.Context, request *DeleteFabricIntentMapRefRequest) (*DeleteFabricIntentMapRefResponse, error) {
	return w.WriteService.DeleteFabricIntentMapRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFabricNodeProfileRef(ctx context.Context, request *CreateFabricNodeProfileRefRequest) (*CreateFabricNodeProfileRefResponse, error) {
	return w.WriteService.CreateFabricNodeProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFabricNodeProfileRef(ctx context.Context, request *DeleteFabricNodeProfileRefRequest) (*DeleteFabricNodeProfileRefResponse, error) {
	return w.WriteService.DeleteFabricNodeProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFeatureConfig(ctx context.Context, request *CreateFeatureConfigRequest) (*CreateFeatureConfigResponse, error) {
	return w.WriteService.CreateFeatureConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateFeatureConfig(ctx context.Context, request *UpdateFeatureConfigRequest) (*UpdateFeatureConfigResponse, error) {
	return w.WriteService.UpdateFeatureConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFeatureConfig(ctx context.Context, request *DeleteFeatureConfigRequest) (*DeleteFeatureConfigResponse, error) {
	return w.WriteService.DeleteFeatureConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFeatureConfigTagRef(ctx context.Context, request *CreateFeatureConfigTagRefRequest) (*CreateFeatureConfigTagRefResponse, error) {
	return w.WriteService.CreateFeatureConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFeatureConfigTagRef(ctx context.Context, request *DeleteFeatureConfigTagRefRequest) (*DeleteFeatureConfigTagRefResponse, error) {
	return w.WriteService.DeleteFeatureConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFeatureFlag(ctx context.Context, request *CreateFeatureFlagRequest) (*CreateFeatureFlagResponse, error) {
	return w.WriteService.CreateFeatureFlag(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateFeatureFlag(ctx context.Context, request *UpdateFeatureFlagRequest) (*UpdateFeatureFlagResponse, error) {
	return w.WriteService.UpdateFeatureFlag(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFeatureFlag(ctx context.Context, request *DeleteFeatureFlagRequest) (*DeleteFeatureFlagResponse, error) {
	return w.WriteService.DeleteFeatureFlag(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFeatureFlagTagRef(ctx context.Context, request *CreateFeatureFlagTagRefRequest) (*CreateFeatureFlagTagRefResponse, error) {
	return w.WriteService.CreateFeatureFlagTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFeatureFlagTagRef(ctx context.Context, request *DeleteFeatureFlagTagRefRequest) (*DeleteFeatureFlagTagRefResponse, error) {
	return w.WriteService.DeleteFeatureFlagTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFeature(ctx context.Context, request *CreateFeatureRequest) (*CreateFeatureResponse, error) {
	return w.WriteService.CreateFeature(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateFeature(ctx context.Context, request *UpdateFeatureRequest) (*UpdateFeatureResponse, error) {
	return w.WriteService.UpdateFeature(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFeature(ctx context.Context, request *DeleteFeatureRequest) (*DeleteFeatureResponse, error) {
	return w.WriteService.DeleteFeature(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFeatureFeatureRef(ctx context.Context, request *CreateFeatureFeatureRefRequest) (*CreateFeatureFeatureRefResponse, error) {
	return w.WriteService.CreateFeatureFeatureRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFeatureFeatureRef(ctx context.Context, request *DeleteFeatureFeatureRefRequest) (*DeleteFeatureFeatureRefResponse, error) {
	return w.WriteService.DeleteFeatureFeatureRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFeatureTagRef(ctx context.Context, request *CreateFeatureTagRefRequest) (*CreateFeatureTagRefResponse, error) {
	return w.WriteService.CreateFeatureTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFeatureTagRef(ctx context.Context, request *DeleteFeatureTagRefRequest) (*DeleteFeatureTagRefResponse, error) {
	return w.WriteService.DeleteFeatureTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFirewallPolicy(ctx context.Context, request *CreateFirewallPolicyRequest) (*CreateFirewallPolicyResponse, error) {
	return w.WriteService.CreateFirewallPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateFirewallPolicy(ctx context.Context, request *UpdateFirewallPolicyRequest) (*UpdateFirewallPolicyResponse, error) {
	return w.WriteService.UpdateFirewallPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFirewallPolicy(ctx context.Context, request *DeleteFirewallPolicyRequest) (*DeleteFirewallPolicyResponse, error) {
	return w.WriteService.DeleteFirewallPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFirewallPolicyFirewallRuleRef(ctx context.Context, request *CreateFirewallPolicyFirewallRuleRefRequest) (*CreateFirewallPolicyFirewallRuleRefResponse, error) {
	return w.WriteService.CreateFirewallPolicyFirewallRuleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFirewallPolicyFirewallRuleRef(ctx context.Context, request *DeleteFirewallPolicyFirewallRuleRefRequest) (*DeleteFirewallPolicyFirewallRuleRefResponse, error) {
	return w.WriteService.DeleteFirewallPolicyFirewallRuleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFirewallPolicySecurityLoggingObjectRef(ctx context.Context, request *CreateFirewallPolicySecurityLoggingObjectRefRequest) (*CreateFirewallPolicySecurityLoggingObjectRefResponse, error) {
	return w.WriteService.CreateFirewallPolicySecurityLoggingObjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFirewallPolicySecurityLoggingObjectRef(ctx context.Context, request *DeleteFirewallPolicySecurityLoggingObjectRefRequest) (*DeleteFirewallPolicySecurityLoggingObjectRefResponse, error) {
	return w.WriteService.DeleteFirewallPolicySecurityLoggingObjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFirewallPolicyTagRef(ctx context.Context, request *CreateFirewallPolicyTagRefRequest) (*CreateFirewallPolicyTagRefResponse, error) {
	return w.WriteService.CreateFirewallPolicyTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFirewallPolicyTagRef(ctx context.Context, request *DeleteFirewallPolicyTagRefRequest) (*DeleteFirewallPolicyTagRefResponse, error) {
	return w.WriteService.DeleteFirewallPolicyTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFirewallRule(ctx context.Context, request *CreateFirewallRuleRequest) (*CreateFirewallRuleResponse, error) {
	return w.WriteService.CreateFirewallRule(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateFirewallRule(ctx context.Context, request *UpdateFirewallRuleRequest) (*UpdateFirewallRuleResponse, error) {
	return w.WriteService.UpdateFirewallRule(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFirewallRule(ctx context.Context, request *DeleteFirewallRuleRequest) (*DeleteFirewallRuleResponse, error) {
	return w.WriteService.DeleteFirewallRule(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFirewallRuleAddressGroupRef(ctx context.Context, request *CreateFirewallRuleAddressGroupRefRequest) (*CreateFirewallRuleAddressGroupRefResponse, error) {
	return w.WriteService.CreateFirewallRuleAddressGroupRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFirewallRuleAddressGroupRef(ctx context.Context, request *DeleteFirewallRuleAddressGroupRefRequest) (*DeleteFirewallRuleAddressGroupRefResponse, error) {
	return w.WriteService.DeleteFirewallRuleAddressGroupRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFirewallRuleSecurityLoggingObjectRef(ctx context.Context, request *CreateFirewallRuleSecurityLoggingObjectRefRequest) (*CreateFirewallRuleSecurityLoggingObjectRefResponse, error) {
	return w.WriteService.CreateFirewallRuleSecurityLoggingObjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFirewallRuleSecurityLoggingObjectRef(ctx context.Context, request *DeleteFirewallRuleSecurityLoggingObjectRefRequest) (*DeleteFirewallRuleSecurityLoggingObjectRefResponse, error) {
	return w.WriteService.DeleteFirewallRuleSecurityLoggingObjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFirewallRuleServiceGroupRef(ctx context.Context, request *CreateFirewallRuleServiceGroupRefRequest) (*CreateFirewallRuleServiceGroupRefResponse, error) {
	return w.WriteService.CreateFirewallRuleServiceGroupRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFirewallRuleServiceGroupRef(ctx context.Context, request *DeleteFirewallRuleServiceGroupRefRequest) (*DeleteFirewallRuleServiceGroupRefResponse, error) {
	return w.WriteService.DeleteFirewallRuleServiceGroupRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFirewallRuleVirtualNetworkRef(ctx context.Context, request *CreateFirewallRuleVirtualNetworkRefRequest) (*CreateFirewallRuleVirtualNetworkRefResponse, error) {
	return w.WriteService.CreateFirewallRuleVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFirewallRuleVirtualNetworkRef(ctx context.Context, request *DeleteFirewallRuleVirtualNetworkRefRequest) (*DeleteFirewallRuleVirtualNetworkRefResponse, error) {
	return w.WriteService.DeleteFirewallRuleVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFirewallRuleTagRef(ctx context.Context, request *CreateFirewallRuleTagRefRequest) (*CreateFirewallRuleTagRefResponse, error) {
	return w.WriteService.CreateFirewallRuleTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFirewallRuleTagRef(ctx context.Context, request *DeleteFirewallRuleTagRefRequest) (*DeleteFirewallRuleTagRefResponse, error) {
	return w.WriteService.DeleteFirewallRuleTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFloatingIPPool(ctx context.Context, request *CreateFloatingIPPoolRequest) (*CreateFloatingIPPoolResponse, error) {
	return w.WriteService.CreateFloatingIPPool(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateFloatingIPPool(ctx context.Context, request *UpdateFloatingIPPoolRequest) (*UpdateFloatingIPPoolResponse, error) {
	return w.WriteService.UpdateFloatingIPPool(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFloatingIPPool(ctx context.Context, request *DeleteFloatingIPPoolRequest) (*DeleteFloatingIPPoolResponse, error) {
	return w.WriteService.DeleteFloatingIPPool(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFloatingIPPoolTagRef(ctx context.Context, request *CreateFloatingIPPoolTagRefRequest) (*CreateFloatingIPPoolTagRefResponse, error) {
	return w.WriteService.CreateFloatingIPPoolTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFloatingIPPoolTagRef(ctx context.Context, request *DeleteFloatingIPPoolTagRefRequest) (*DeleteFloatingIPPoolTagRefResponse, error) {
	return w.WriteService.DeleteFloatingIPPoolTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFloatingIP(ctx context.Context, request *CreateFloatingIPRequest) (*CreateFloatingIPResponse, error) {
	return w.WriteService.CreateFloatingIP(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateFloatingIP(ctx context.Context, request *UpdateFloatingIPRequest) (*UpdateFloatingIPResponse, error) {
	return w.WriteService.UpdateFloatingIP(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFloatingIP(ctx context.Context, request *DeleteFloatingIPRequest) (*DeleteFloatingIPResponse, error) {
	return w.WriteService.DeleteFloatingIP(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFloatingIPProjectRef(ctx context.Context, request *CreateFloatingIPProjectRefRequest) (*CreateFloatingIPProjectRefResponse, error) {
	return w.WriteService.CreateFloatingIPProjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFloatingIPProjectRef(ctx context.Context, request *DeleteFloatingIPProjectRefRequest) (*DeleteFloatingIPProjectRefResponse, error) {
	return w.WriteService.DeleteFloatingIPProjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFloatingIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateFloatingIPVirtualMachineInterfaceRefRequest) (*CreateFloatingIPVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.CreateFloatingIPVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFloatingIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteFloatingIPVirtualMachineInterfaceRefRequest) (*DeleteFloatingIPVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.DeleteFloatingIPVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFloatingIPTagRef(ctx context.Context, request *CreateFloatingIPTagRefRequest) (*CreateFloatingIPTagRefResponse, error) {
	return w.WriteService.CreateFloatingIPTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFloatingIPTagRef(ctx context.Context, request *DeleteFloatingIPTagRefRequest) (*DeleteFloatingIPTagRefResponse, error) {
	return w.WriteService.DeleteFloatingIPTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFlowNode(ctx context.Context, request *CreateFlowNodeRequest) (*CreateFlowNodeResponse, error) {
	return w.WriteService.CreateFlowNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateFlowNode(ctx context.Context, request *UpdateFlowNodeRequest) (*UpdateFlowNodeResponse, error) {
	return w.WriteService.UpdateFlowNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFlowNode(ctx context.Context, request *DeleteFlowNodeRequest) (*DeleteFlowNodeResponse, error) {
	return w.WriteService.DeleteFlowNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFlowNodeTagRef(ctx context.Context, request *CreateFlowNodeTagRefRequest) (*CreateFlowNodeTagRefResponse, error) {
	return w.WriteService.CreateFlowNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFlowNodeTagRef(ctx context.Context, request *DeleteFlowNodeTagRefRequest) (*DeleteFlowNodeTagRefResponse, error) {
	return w.WriteService.DeleteFlowNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateFlowNodeVirtualNetworkRef(ctx context.Context, request *CreateFlowNodeVirtualNetworkRefRequest) (*CreateFlowNodeVirtualNetworkRefResponse, error) {
	return w.WriteService.CreateFlowNodeVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteFlowNodeVirtualNetworkRef(ctx context.Context, request *DeleteFlowNodeVirtualNetworkRefRequest) (*DeleteFlowNodeVirtualNetworkRefResponse, error) {
	return w.WriteService.DeleteFlowNodeVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateForwardingClass(ctx context.Context, request *CreateForwardingClassRequest) (*CreateForwardingClassResponse, error) {
	return w.WriteService.CreateForwardingClass(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateForwardingClass(ctx context.Context, request *UpdateForwardingClassRequest) (*UpdateForwardingClassResponse, error) {
	return w.WriteService.UpdateForwardingClass(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteForwardingClass(ctx context.Context, request *DeleteForwardingClassRequest) (*DeleteForwardingClassResponse, error) {
	return w.WriteService.DeleteForwardingClass(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateForwardingClassQosQueueRef(ctx context.Context, request *CreateForwardingClassQosQueueRefRequest) (*CreateForwardingClassQosQueueRefResponse, error) {
	return w.WriteService.CreateForwardingClassQosQueueRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteForwardingClassQosQueueRef(ctx context.Context, request *DeleteForwardingClassQosQueueRefRequest) (*DeleteForwardingClassQosQueueRefResponse, error) {
	return w.WriteService.DeleteForwardingClassQosQueueRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateForwardingClassTagRef(ctx context.Context, request *CreateForwardingClassTagRefRequest) (*CreateForwardingClassTagRefResponse, error) {
	return w.WriteService.CreateForwardingClassTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteForwardingClassTagRef(ctx context.Context, request *DeleteForwardingClassTagRefRequest) (*DeleteForwardingClassTagRefResponse, error) {
	return w.WriteService.DeleteForwardingClassTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateGlobalAnalyticsConfig(ctx context.Context, request *CreateGlobalAnalyticsConfigRequest) (*CreateGlobalAnalyticsConfigResponse, error) {
	return w.WriteService.CreateGlobalAnalyticsConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateGlobalAnalyticsConfig(ctx context.Context, request *UpdateGlobalAnalyticsConfigRequest) (*UpdateGlobalAnalyticsConfigResponse, error) {
	return w.WriteService.UpdateGlobalAnalyticsConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteGlobalAnalyticsConfig(ctx context.Context, request *DeleteGlobalAnalyticsConfigRequest) (*DeleteGlobalAnalyticsConfigResponse, error) {
	return w.WriteService.DeleteGlobalAnalyticsConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateGlobalAnalyticsConfigTagRef(ctx context.Context, request *CreateGlobalAnalyticsConfigTagRefRequest) (*CreateGlobalAnalyticsConfigTagRefResponse, error) {
	return w.WriteService.CreateGlobalAnalyticsConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteGlobalAnalyticsConfigTagRef(ctx context.Context, request *DeleteGlobalAnalyticsConfigTagRefRequest) (*DeleteGlobalAnalyticsConfigTagRefResponse, error) {
	return w.WriteService.DeleteGlobalAnalyticsConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateGlobalQosConfig(ctx context.Context, request *CreateGlobalQosConfigRequest) (*CreateGlobalQosConfigResponse, error) {
	return w.WriteService.CreateGlobalQosConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateGlobalQosConfig(ctx context.Context, request *UpdateGlobalQosConfigRequest) (*UpdateGlobalQosConfigResponse, error) {
	return w.WriteService.UpdateGlobalQosConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteGlobalQosConfig(ctx context.Context, request *DeleteGlobalQosConfigRequest) (*DeleteGlobalQosConfigResponse, error) {
	return w.WriteService.DeleteGlobalQosConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateGlobalQosConfigTagRef(ctx context.Context, request *CreateGlobalQosConfigTagRefRequest) (*CreateGlobalQosConfigTagRefResponse, error) {
	return w.WriteService.CreateGlobalQosConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteGlobalQosConfigTagRef(ctx context.Context, request *DeleteGlobalQosConfigTagRefRequest) (*DeleteGlobalQosConfigTagRefResponse, error) {
	return w.WriteService.DeleteGlobalQosConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateGlobalSystemConfig(ctx context.Context, request *CreateGlobalSystemConfigRequest) (*CreateGlobalSystemConfigResponse, error) {
	return w.WriteService.CreateGlobalSystemConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateGlobalSystemConfig(ctx context.Context, request *UpdateGlobalSystemConfigRequest) (*UpdateGlobalSystemConfigResponse, error) {
	return w.WriteService.UpdateGlobalSystemConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteGlobalSystemConfig(ctx context.Context, request *DeleteGlobalSystemConfigRequest) (*DeleteGlobalSystemConfigResponse, error) {
	return w.WriteService.DeleteGlobalSystemConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateGlobalSystemConfigBGPRouterRef(ctx context.Context, request *CreateGlobalSystemConfigBGPRouterRefRequest) (*CreateGlobalSystemConfigBGPRouterRefResponse, error) {
	return w.WriteService.CreateGlobalSystemConfigBGPRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteGlobalSystemConfigBGPRouterRef(ctx context.Context, request *DeleteGlobalSystemConfigBGPRouterRefRequest) (*DeleteGlobalSystemConfigBGPRouterRefResponse, error) {
	return w.WriteService.DeleteGlobalSystemConfigBGPRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateGlobalSystemConfigTagRef(ctx context.Context, request *CreateGlobalSystemConfigTagRefRequest) (*CreateGlobalSystemConfigTagRefResponse, error) {
	return w.WriteService.CreateGlobalSystemConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteGlobalSystemConfigTagRef(ctx context.Context, request *DeleteGlobalSystemConfigTagRefRequest) (*DeleteGlobalSystemConfigTagRefResponse, error) {
	return w.WriteService.DeleteGlobalSystemConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateGlobalVrouterConfig(ctx context.Context, request *CreateGlobalVrouterConfigRequest) (*CreateGlobalVrouterConfigResponse, error) {
	return w.WriteService.CreateGlobalVrouterConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateGlobalVrouterConfig(ctx context.Context, request *UpdateGlobalVrouterConfigRequest) (*UpdateGlobalVrouterConfigResponse, error) {
	return w.WriteService.UpdateGlobalVrouterConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteGlobalVrouterConfig(ctx context.Context, request *DeleteGlobalVrouterConfigRequest) (*DeleteGlobalVrouterConfigResponse, error) {
	return w.WriteService.DeleteGlobalVrouterConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateGlobalVrouterConfigTagRef(ctx context.Context, request *CreateGlobalVrouterConfigTagRefRequest) (*CreateGlobalVrouterConfigTagRefResponse, error) {
	return w.WriteService.CreateGlobalVrouterConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteGlobalVrouterConfigTagRef(ctx context.Context, request *DeleteGlobalVrouterConfigTagRefRequest) (*DeleteGlobalVrouterConfigTagRefResponse, error) {
	return w.WriteService.DeleteGlobalVrouterConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateHardwareInventory(ctx context.Context, request *CreateHardwareInventoryRequest) (*CreateHardwareInventoryResponse, error) {
	return w.WriteService.CreateHardwareInventory(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateHardwareInventory(ctx context.Context, request *UpdateHardwareInventoryRequest) (*UpdateHardwareInventoryResponse, error) {
	return w.WriteService.UpdateHardwareInventory(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteHardwareInventory(ctx context.Context, request *DeleteHardwareInventoryRequest) (*DeleteHardwareInventoryResponse, error) {
	return w.WriteService.DeleteHardwareInventory(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateHardwareInventoryTagRef(ctx context.Context, request *CreateHardwareInventoryTagRefRequest) (*CreateHardwareInventoryTagRefResponse, error) {
	return w.WriteService.CreateHardwareInventoryTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteHardwareInventoryTagRef(ctx context.Context, request *DeleteHardwareInventoryTagRefRequest) (*DeleteHardwareInventoryTagRefResponse, error) {
	return w.WriteService.DeleteHardwareInventoryTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateHardware(ctx context.Context, request *CreateHardwareRequest) (*CreateHardwareResponse, error) {
	return w.WriteService.CreateHardware(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateHardware(ctx context.Context, request *UpdateHardwareRequest) (*UpdateHardwareResponse, error) {
	return w.WriteService.UpdateHardware(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteHardware(ctx context.Context, request *DeleteHardwareRequest) (*DeleteHardwareResponse, error) {
	return w.WriteService.DeleteHardware(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateHardwareCardRef(ctx context.Context, request *CreateHardwareCardRefRequest) (*CreateHardwareCardRefResponse, error) {
	return w.WriteService.CreateHardwareCardRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteHardwareCardRef(ctx context.Context, request *DeleteHardwareCardRefRequest) (*DeleteHardwareCardRefResponse, error) {
	return w.WriteService.DeleteHardwareCardRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateHardwareTagRef(ctx context.Context, request *CreateHardwareTagRefRequest) (*CreateHardwareTagRefResponse, error) {
	return w.WriteService.CreateHardwareTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteHardwareTagRef(ctx context.Context, request *DeleteHardwareTagRefRequest) (*DeleteHardwareTagRefResponse, error) {
	return w.WriteService.DeleteHardwareTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateHostBasedService(ctx context.Context, request *CreateHostBasedServiceRequest) (*CreateHostBasedServiceResponse, error) {
	return w.WriteService.CreateHostBasedService(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateHostBasedService(ctx context.Context, request *UpdateHostBasedServiceRequest) (*UpdateHostBasedServiceResponse, error) {
	return w.WriteService.UpdateHostBasedService(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteHostBasedService(ctx context.Context, request *DeleteHostBasedServiceRequest) (*DeleteHostBasedServiceResponse, error) {
	return w.WriteService.DeleteHostBasedService(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateHostBasedServiceVirtualNetworkRef(ctx context.Context, request *CreateHostBasedServiceVirtualNetworkRefRequest) (*CreateHostBasedServiceVirtualNetworkRefResponse, error) {
	return w.WriteService.CreateHostBasedServiceVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteHostBasedServiceVirtualNetworkRef(ctx context.Context, request *DeleteHostBasedServiceVirtualNetworkRefRequest) (*DeleteHostBasedServiceVirtualNetworkRefResponse, error) {
	return w.WriteService.DeleteHostBasedServiceVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateHostBasedServiceTagRef(ctx context.Context, request *CreateHostBasedServiceTagRefRequest) (*CreateHostBasedServiceTagRefResponse, error) {
	return w.WriteService.CreateHostBasedServiceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteHostBasedServiceTagRef(ctx context.Context, request *DeleteHostBasedServiceTagRefRequest) (*DeleteHostBasedServiceTagRefResponse, error) {
	return w.WriteService.DeleteHostBasedServiceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateInstanceIP(ctx context.Context, request *CreateInstanceIPRequest) (*CreateInstanceIPResponse, error) {
	return w.WriteService.CreateInstanceIP(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateInstanceIP(ctx context.Context, request *UpdateInstanceIPRequest) (*UpdateInstanceIPResponse, error) {
	return w.WriteService.UpdateInstanceIP(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteInstanceIP(ctx context.Context, request *DeleteInstanceIPRequest) (*DeleteInstanceIPResponse, error) {
	return w.WriteService.DeleteInstanceIP(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateInstanceIPFlowNodeRef(ctx context.Context, request *CreateInstanceIPFlowNodeRefRequest) (*CreateInstanceIPFlowNodeRefResponse, error) {
	return w.WriteService.CreateInstanceIPFlowNodeRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteInstanceIPFlowNodeRef(ctx context.Context, request *DeleteInstanceIPFlowNodeRefRequest) (*DeleteInstanceIPFlowNodeRefResponse, error) {
	return w.WriteService.DeleteInstanceIPFlowNodeRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateInstanceIPLogicalInterfaceRef(ctx context.Context, request *CreateInstanceIPLogicalInterfaceRefRequest) (*CreateInstanceIPLogicalInterfaceRefResponse, error) {
	return w.WriteService.CreateInstanceIPLogicalInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteInstanceIPLogicalInterfaceRef(ctx context.Context, request *DeleteInstanceIPLogicalInterfaceRefRequest) (*DeleteInstanceIPLogicalInterfaceRefResponse, error) {
	return w.WriteService.DeleteInstanceIPLogicalInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateInstanceIPNetworkIpamRef(ctx context.Context, request *CreateInstanceIPNetworkIpamRefRequest) (*CreateInstanceIPNetworkIpamRefResponse, error) {
	return w.WriteService.CreateInstanceIPNetworkIpamRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteInstanceIPNetworkIpamRef(ctx context.Context, request *DeleteInstanceIPNetworkIpamRefRequest) (*DeleteInstanceIPNetworkIpamRefResponse, error) {
	return w.WriteService.DeleteInstanceIPNetworkIpamRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateInstanceIPPhysicalRouterRef(ctx context.Context, request *CreateInstanceIPPhysicalRouterRefRequest) (*CreateInstanceIPPhysicalRouterRefResponse, error) {
	return w.WriteService.CreateInstanceIPPhysicalRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteInstanceIPPhysicalRouterRef(ctx context.Context, request *DeleteInstanceIPPhysicalRouterRefRequest) (*DeleteInstanceIPPhysicalRouterRefResponse, error) {
	return w.WriteService.DeleteInstanceIPPhysicalRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateInstanceIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateInstanceIPVirtualMachineInterfaceRefRequest) (*CreateInstanceIPVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.CreateInstanceIPVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteInstanceIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteInstanceIPVirtualMachineInterfaceRefRequest) (*DeleteInstanceIPVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.DeleteInstanceIPVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateInstanceIPVirtualNetworkRef(ctx context.Context, request *CreateInstanceIPVirtualNetworkRefRequest) (*CreateInstanceIPVirtualNetworkRefResponse, error) {
	return w.WriteService.CreateInstanceIPVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteInstanceIPVirtualNetworkRef(ctx context.Context, request *DeleteInstanceIPVirtualNetworkRefRequest) (*DeleteInstanceIPVirtualNetworkRefResponse, error) {
	return w.WriteService.DeleteInstanceIPVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateInstanceIPVirtualRouterRef(ctx context.Context, request *CreateInstanceIPVirtualRouterRefRequest) (*CreateInstanceIPVirtualRouterRefResponse, error) {
	return w.WriteService.CreateInstanceIPVirtualRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteInstanceIPVirtualRouterRef(ctx context.Context, request *DeleteInstanceIPVirtualRouterRefRequest) (*DeleteInstanceIPVirtualRouterRefResponse, error) {
	return w.WriteService.DeleteInstanceIPVirtualRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateInstanceIPTagRef(ctx context.Context, request *CreateInstanceIPTagRefRequest) (*CreateInstanceIPTagRefResponse, error) {
	return w.WriteService.CreateInstanceIPTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteInstanceIPTagRef(ctx context.Context, request *DeleteInstanceIPTagRefRequest) (*DeleteInstanceIPTagRefResponse, error) {
	return w.WriteService.DeleteInstanceIPTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateIntentMap(ctx context.Context, request *CreateIntentMapRequest) (*CreateIntentMapResponse, error) {
	return w.WriteService.CreateIntentMap(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateIntentMap(ctx context.Context, request *UpdateIntentMapRequest) (*UpdateIntentMapResponse, error) {
	return w.WriteService.UpdateIntentMap(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteIntentMap(ctx context.Context, request *DeleteIntentMapRequest) (*DeleteIntentMapResponse, error) {
	return w.WriteService.DeleteIntentMap(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateIntentMapTagRef(ctx context.Context, request *CreateIntentMapTagRefRequest) (*CreateIntentMapTagRefResponse, error) {
	return w.WriteService.CreateIntentMapTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteIntentMapTagRef(ctx context.Context, request *DeleteIntentMapTagRefRequest) (*DeleteIntentMapTagRefResponse, error) {
	return w.WriteService.DeleteIntentMapTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateInterfaceRouteTable(ctx context.Context, request *CreateInterfaceRouteTableRequest) (*CreateInterfaceRouteTableResponse, error) {
	return w.WriteService.CreateInterfaceRouteTable(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateInterfaceRouteTable(ctx context.Context, request *UpdateInterfaceRouteTableRequest) (*UpdateInterfaceRouteTableResponse, error) {
	return w.WriteService.UpdateInterfaceRouteTable(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteInterfaceRouteTable(ctx context.Context, request *DeleteInterfaceRouteTableRequest) (*DeleteInterfaceRouteTableResponse, error) {
	return w.WriteService.DeleteInterfaceRouteTable(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateInterfaceRouteTableServiceInstanceRef(ctx context.Context, request *CreateInterfaceRouteTableServiceInstanceRefRequest) (*CreateInterfaceRouteTableServiceInstanceRefResponse, error) {
	return w.WriteService.CreateInterfaceRouteTableServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteInterfaceRouteTableServiceInstanceRef(ctx context.Context, request *DeleteInterfaceRouteTableServiceInstanceRefRequest) (*DeleteInterfaceRouteTableServiceInstanceRefResponse, error) {
	return w.WriteService.DeleteInterfaceRouteTableServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateInterfaceRouteTableTagRef(ctx context.Context, request *CreateInterfaceRouteTableTagRefRequest) (*CreateInterfaceRouteTableTagRefResponse, error) {
	return w.WriteService.CreateInterfaceRouteTableTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteInterfaceRouteTableTagRef(ctx context.Context, request *DeleteInterfaceRouteTableTagRefRequest) (*DeleteInterfaceRouteTableTagRefResponse, error) {
	return w.WriteService.DeleteInterfaceRouteTableTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateJobTemplate(ctx context.Context, request *CreateJobTemplateRequest) (*CreateJobTemplateResponse, error) {
	return w.WriteService.CreateJobTemplate(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateJobTemplate(ctx context.Context, request *UpdateJobTemplateRequest) (*UpdateJobTemplateResponse, error) {
	return w.WriteService.UpdateJobTemplate(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteJobTemplate(ctx context.Context, request *DeleteJobTemplateRequest) (*DeleteJobTemplateResponse, error) {
	return w.WriteService.DeleteJobTemplate(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateJobTemplateTagRef(ctx context.Context, request *CreateJobTemplateTagRefRequest) (*CreateJobTemplateTagRefResponse, error) {
	return w.WriteService.CreateJobTemplateTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteJobTemplateTagRef(ctx context.Context, request *DeleteJobTemplateTagRefRequest) (*DeleteJobTemplateTagRefResponse, error) {
	return w.WriteService.DeleteJobTemplateTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLinkAggregationGroup(ctx context.Context, request *CreateLinkAggregationGroupRequest) (*CreateLinkAggregationGroupResponse, error) {
	return w.WriteService.CreateLinkAggregationGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateLinkAggregationGroup(ctx context.Context, request *UpdateLinkAggregationGroupRequest) (*UpdateLinkAggregationGroupResponse, error) {
	return w.WriteService.UpdateLinkAggregationGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLinkAggregationGroup(ctx context.Context, request *DeleteLinkAggregationGroupRequest) (*DeleteLinkAggregationGroupResponse, error) {
	return w.WriteService.DeleteLinkAggregationGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLinkAggregationGroupPhysicalInterfaceRef(ctx context.Context, request *CreateLinkAggregationGroupPhysicalInterfaceRefRequest) (*CreateLinkAggregationGroupPhysicalInterfaceRefResponse, error) {
	return w.WriteService.CreateLinkAggregationGroupPhysicalInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLinkAggregationGroupPhysicalInterfaceRef(ctx context.Context, request *DeleteLinkAggregationGroupPhysicalInterfaceRefRequest) (*DeleteLinkAggregationGroupPhysicalInterfaceRefResponse, error) {
	return w.WriteService.DeleteLinkAggregationGroupPhysicalInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLinkAggregationGroupVirtualMachineInterfaceRef(ctx context.Context, request *CreateLinkAggregationGroupVirtualMachineInterfaceRefRequest) (*CreateLinkAggregationGroupVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.CreateLinkAggregationGroupVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLinkAggregationGroupVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLinkAggregationGroupVirtualMachineInterfaceRefRequest) (*DeleteLinkAggregationGroupVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.DeleteLinkAggregationGroupVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLinkAggregationGroupTagRef(ctx context.Context, request *CreateLinkAggregationGroupTagRefRequest) (*CreateLinkAggregationGroupTagRefResponse, error) {
	return w.WriteService.CreateLinkAggregationGroupTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLinkAggregationGroupTagRef(ctx context.Context, request *DeleteLinkAggregationGroupTagRefRequest) (*DeleteLinkAggregationGroupTagRefResponse, error) {
	return w.WriteService.DeleteLinkAggregationGroupTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerHealthmonitor(ctx context.Context, request *CreateLoadbalancerHealthmonitorRequest) (*CreateLoadbalancerHealthmonitorResponse, error) {
	return w.WriteService.CreateLoadbalancerHealthmonitor(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateLoadbalancerHealthmonitor(ctx context.Context, request *UpdateLoadbalancerHealthmonitorRequest) (*UpdateLoadbalancerHealthmonitorResponse, error) {
	return w.WriteService.UpdateLoadbalancerHealthmonitor(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerHealthmonitor(ctx context.Context, request *DeleteLoadbalancerHealthmonitorRequest) (*DeleteLoadbalancerHealthmonitorResponse, error) {
	return w.WriteService.DeleteLoadbalancerHealthmonitor(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerHealthmonitorTagRef(ctx context.Context, request *CreateLoadbalancerHealthmonitorTagRefRequest) (*CreateLoadbalancerHealthmonitorTagRefResponse, error) {
	return w.WriteService.CreateLoadbalancerHealthmonitorTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerHealthmonitorTagRef(ctx context.Context, request *DeleteLoadbalancerHealthmonitorTagRefRequest) (*DeleteLoadbalancerHealthmonitorTagRefResponse, error) {
	return w.WriteService.DeleteLoadbalancerHealthmonitorTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerListener(ctx context.Context, request *CreateLoadbalancerListenerRequest) (*CreateLoadbalancerListenerResponse, error) {
	return w.WriteService.CreateLoadbalancerListener(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateLoadbalancerListener(ctx context.Context, request *UpdateLoadbalancerListenerRequest) (*UpdateLoadbalancerListenerResponse, error) {
	return w.WriteService.UpdateLoadbalancerListener(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerListener(ctx context.Context, request *DeleteLoadbalancerListenerRequest) (*DeleteLoadbalancerListenerResponse, error) {
	return w.WriteService.DeleteLoadbalancerListener(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerListenerLoadbalancerRef(ctx context.Context, request *CreateLoadbalancerListenerLoadbalancerRefRequest) (*CreateLoadbalancerListenerLoadbalancerRefResponse, error) {
	return w.WriteService.CreateLoadbalancerListenerLoadbalancerRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerListenerLoadbalancerRef(ctx context.Context, request *DeleteLoadbalancerListenerLoadbalancerRefRequest) (*DeleteLoadbalancerListenerLoadbalancerRefResponse, error) {
	return w.WriteService.DeleteLoadbalancerListenerLoadbalancerRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerListenerTagRef(ctx context.Context, request *CreateLoadbalancerListenerTagRefRequest) (*CreateLoadbalancerListenerTagRefResponse, error) {
	return w.WriteService.CreateLoadbalancerListenerTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerListenerTagRef(ctx context.Context, request *DeleteLoadbalancerListenerTagRefRequest) (*DeleteLoadbalancerListenerTagRefResponse, error) {
	return w.WriteService.DeleteLoadbalancerListenerTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerMember(ctx context.Context, request *CreateLoadbalancerMemberRequest) (*CreateLoadbalancerMemberResponse, error) {
	return w.WriteService.CreateLoadbalancerMember(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateLoadbalancerMember(ctx context.Context, request *UpdateLoadbalancerMemberRequest) (*UpdateLoadbalancerMemberResponse, error) {
	return w.WriteService.UpdateLoadbalancerMember(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerMember(ctx context.Context, request *DeleteLoadbalancerMemberRequest) (*DeleteLoadbalancerMemberResponse, error) {
	return w.WriteService.DeleteLoadbalancerMember(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerMemberTagRef(ctx context.Context, request *CreateLoadbalancerMemberTagRefRequest) (*CreateLoadbalancerMemberTagRefResponse, error) {
	return w.WriteService.CreateLoadbalancerMemberTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerMemberTagRef(ctx context.Context, request *DeleteLoadbalancerMemberTagRefRequest) (*DeleteLoadbalancerMemberTagRefResponse, error) {
	return w.WriteService.DeleteLoadbalancerMemberTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerPool(ctx context.Context, request *CreateLoadbalancerPoolRequest) (*CreateLoadbalancerPoolResponse, error) {
	return w.WriteService.CreateLoadbalancerPool(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateLoadbalancerPool(ctx context.Context, request *UpdateLoadbalancerPoolRequest) (*UpdateLoadbalancerPoolResponse, error) {
	return w.WriteService.UpdateLoadbalancerPool(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerPool(ctx context.Context, request *DeleteLoadbalancerPoolRequest) (*DeleteLoadbalancerPoolResponse, error) {
	return w.WriteService.DeleteLoadbalancerPool(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerPoolTagRef(ctx context.Context, request *CreateLoadbalancerPoolTagRefRequest) (*CreateLoadbalancerPoolTagRefResponse, error) {
	return w.WriteService.CreateLoadbalancerPoolTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerPoolTagRef(ctx context.Context, request *DeleteLoadbalancerPoolTagRefRequest) (*DeleteLoadbalancerPoolTagRefResponse, error) {
	return w.WriteService.DeleteLoadbalancerPoolTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerPoolLoadbalancerHealthmonitorRef(ctx context.Context, request *CreateLoadbalancerPoolLoadbalancerHealthmonitorRefRequest) (*CreateLoadbalancerPoolLoadbalancerHealthmonitorRefResponse, error) {
	return w.WriteService.CreateLoadbalancerPoolLoadbalancerHealthmonitorRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerPoolLoadbalancerHealthmonitorRef(ctx context.Context, request *DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefRequest) (*DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefResponse, error) {
	return w.WriteService.DeleteLoadbalancerPoolLoadbalancerHealthmonitorRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerPoolLoadbalancerListenerRef(ctx context.Context, request *CreateLoadbalancerPoolLoadbalancerListenerRefRequest) (*CreateLoadbalancerPoolLoadbalancerListenerRefResponse, error) {
	return w.WriteService.CreateLoadbalancerPoolLoadbalancerListenerRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerPoolLoadbalancerListenerRef(ctx context.Context, request *DeleteLoadbalancerPoolLoadbalancerListenerRefRequest) (*DeleteLoadbalancerPoolLoadbalancerListenerRefResponse, error) {
	return w.WriteService.DeleteLoadbalancerPoolLoadbalancerListenerRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerPoolServiceApplianceSetRef(ctx context.Context, request *CreateLoadbalancerPoolServiceApplianceSetRefRequest) (*CreateLoadbalancerPoolServiceApplianceSetRefResponse, error) {
	return w.WriteService.CreateLoadbalancerPoolServiceApplianceSetRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerPoolServiceApplianceSetRef(ctx context.Context, request *DeleteLoadbalancerPoolServiceApplianceSetRefRequest) (*DeleteLoadbalancerPoolServiceApplianceSetRefResponse, error) {
	return w.WriteService.DeleteLoadbalancerPoolServiceApplianceSetRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerPoolServiceInstanceRef(ctx context.Context, request *CreateLoadbalancerPoolServiceInstanceRefRequest) (*CreateLoadbalancerPoolServiceInstanceRefResponse, error) {
	return w.WriteService.CreateLoadbalancerPoolServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerPoolServiceInstanceRef(ctx context.Context, request *DeleteLoadbalancerPoolServiceInstanceRefRequest) (*DeleteLoadbalancerPoolServiceInstanceRefResponse, error) {
	return w.WriteService.DeleteLoadbalancerPoolServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerPoolVirtualMachineInterfaceRef(ctx context.Context, request *CreateLoadbalancerPoolVirtualMachineInterfaceRefRequest) (*CreateLoadbalancerPoolVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.CreateLoadbalancerPoolVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerPoolVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLoadbalancerPoolVirtualMachineInterfaceRefRequest) (*DeleteLoadbalancerPoolVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.DeleteLoadbalancerPoolVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancer(ctx context.Context, request *CreateLoadbalancerRequest) (*CreateLoadbalancerResponse, error) {
	return w.WriteService.CreateLoadbalancer(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateLoadbalancer(ctx context.Context, request *UpdateLoadbalancerRequest) (*UpdateLoadbalancerResponse, error) {
	return w.WriteService.UpdateLoadbalancer(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancer(ctx context.Context, request *DeleteLoadbalancerRequest) (*DeleteLoadbalancerResponse, error) {
	return w.WriteService.DeleteLoadbalancer(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerTagRef(ctx context.Context, request *CreateLoadbalancerTagRefRequest) (*CreateLoadbalancerTagRefResponse, error) {
	return w.WriteService.CreateLoadbalancerTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerTagRef(ctx context.Context, request *DeleteLoadbalancerTagRefRequest) (*DeleteLoadbalancerTagRefResponse, error) {
	return w.WriteService.DeleteLoadbalancerTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerServiceApplianceSetRef(ctx context.Context, request *CreateLoadbalancerServiceApplianceSetRefRequest) (*CreateLoadbalancerServiceApplianceSetRefResponse, error) {
	return w.WriteService.CreateLoadbalancerServiceApplianceSetRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerServiceApplianceSetRef(ctx context.Context, request *DeleteLoadbalancerServiceApplianceSetRefRequest) (*DeleteLoadbalancerServiceApplianceSetRefResponse, error) {
	return w.WriteService.DeleteLoadbalancerServiceApplianceSetRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerServiceInstanceRef(ctx context.Context, request *CreateLoadbalancerServiceInstanceRefRequest) (*CreateLoadbalancerServiceInstanceRefResponse, error) {
	return w.WriteService.CreateLoadbalancerServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerServiceInstanceRef(ctx context.Context, request *DeleteLoadbalancerServiceInstanceRefRequest) (*DeleteLoadbalancerServiceInstanceRefResponse, error) {
	return w.WriteService.DeleteLoadbalancerServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLoadbalancerVirtualMachineInterfaceRef(ctx context.Context, request *CreateLoadbalancerVirtualMachineInterfaceRefRequest) (*CreateLoadbalancerVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.CreateLoadbalancerVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLoadbalancerVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLoadbalancerVirtualMachineInterfaceRefRequest) (*DeleteLoadbalancerVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.DeleteLoadbalancerVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLogicalInterface(ctx context.Context, request *CreateLogicalInterfaceRequest) (*CreateLogicalInterfaceResponse, error) {
	return w.WriteService.CreateLogicalInterface(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateLogicalInterface(ctx context.Context, request *UpdateLogicalInterfaceRequest) (*UpdateLogicalInterfaceResponse, error) {
	return w.WriteService.UpdateLogicalInterface(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLogicalInterface(ctx context.Context, request *DeleteLogicalInterfaceRequest) (*DeleteLogicalInterfaceResponse, error) {
	return w.WriteService.DeleteLogicalInterface(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLogicalInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *CreateLogicalInterfaceVirtualMachineInterfaceRefRequest) (*CreateLogicalInterfaceVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.CreateLogicalInterfaceVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLogicalInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLogicalInterfaceVirtualMachineInterfaceRefRequest) (*DeleteLogicalInterfaceVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.DeleteLogicalInterfaceVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLogicalInterfaceTagRef(ctx context.Context, request *CreateLogicalInterfaceTagRefRequest) (*CreateLogicalInterfaceTagRefResponse, error) {
	return w.WriteService.CreateLogicalInterfaceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLogicalInterfaceTagRef(ctx context.Context, request *DeleteLogicalInterfaceTagRefRequest) (*DeleteLogicalInterfaceTagRefResponse, error) {
	return w.WriteService.DeleteLogicalInterfaceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLogicalRouter(ctx context.Context, request *CreateLogicalRouterRequest) (*CreateLogicalRouterResponse, error) {
	return w.WriteService.CreateLogicalRouter(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateLogicalRouter(ctx context.Context, request *UpdateLogicalRouterRequest) (*UpdateLogicalRouterResponse, error) {
	return w.WriteService.UpdateLogicalRouter(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLogicalRouter(ctx context.Context, request *DeleteLogicalRouterRequest) (*DeleteLogicalRouterResponse, error) {
	return w.WriteService.DeleteLogicalRouter(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLogicalRouterVirtualNetworkRef(ctx context.Context, request *CreateLogicalRouterVirtualNetworkRefRequest) (*CreateLogicalRouterVirtualNetworkRefResponse, error) {
	return w.WriteService.CreateLogicalRouterVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLogicalRouterVirtualNetworkRef(ctx context.Context, request *DeleteLogicalRouterVirtualNetworkRefRequest) (*DeleteLogicalRouterVirtualNetworkRefResponse, error) {
	return w.WriteService.DeleteLogicalRouterVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLogicalRouterTagRef(ctx context.Context, request *CreateLogicalRouterTagRefRequest) (*CreateLogicalRouterTagRefResponse, error) {
	return w.WriteService.CreateLogicalRouterTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLogicalRouterTagRef(ctx context.Context, request *DeleteLogicalRouterTagRefRequest) (*DeleteLogicalRouterTagRefResponse, error) {
	return w.WriteService.DeleteLogicalRouterTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLogicalRouterBGPVPNRef(ctx context.Context, request *CreateLogicalRouterBGPVPNRefRequest) (*CreateLogicalRouterBGPVPNRefResponse, error) {
	return w.WriteService.CreateLogicalRouterBGPVPNRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLogicalRouterBGPVPNRef(ctx context.Context, request *DeleteLogicalRouterBGPVPNRefRequest) (*DeleteLogicalRouterBGPVPNRefResponse, error) {
	return w.WriteService.DeleteLogicalRouterBGPVPNRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLogicalRouterPhysicalRouterRef(ctx context.Context, request *CreateLogicalRouterPhysicalRouterRefRequest) (*CreateLogicalRouterPhysicalRouterRefResponse, error) {
	return w.WriteService.CreateLogicalRouterPhysicalRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLogicalRouterPhysicalRouterRef(ctx context.Context, request *DeleteLogicalRouterPhysicalRouterRefRequest) (*DeleteLogicalRouterPhysicalRouterRefResponse, error) {
	return w.WriteService.DeleteLogicalRouterPhysicalRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLogicalRouterRouteTableRef(ctx context.Context, request *CreateLogicalRouterRouteTableRefRequest) (*CreateLogicalRouterRouteTableRefResponse, error) {
	return w.WriteService.CreateLogicalRouterRouteTableRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLogicalRouterRouteTableRef(ctx context.Context, request *DeleteLogicalRouterRouteTableRefRequest) (*DeleteLogicalRouterRouteTableRefResponse, error) {
	return w.WriteService.DeleteLogicalRouterRouteTableRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLogicalRouterRouteTargetRef(ctx context.Context, request *CreateLogicalRouterRouteTargetRefRequest) (*CreateLogicalRouterRouteTargetRefResponse, error) {
	return w.WriteService.CreateLogicalRouterRouteTargetRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLogicalRouterRouteTargetRef(ctx context.Context, request *DeleteLogicalRouterRouteTargetRefRequest) (*DeleteLogicalRouterRouteTargetRefResponse, error) {
	return w.WriteService.DeleteLogicalRouterRouteTargetRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLogicalRouterServiceInstanceRef(ctx context.Context, request *CreateLogicalRouterServiceInstanceRefRequest) (*CreateLogicalRouterServiceInstanceRefResponse, error) {
	return w.WriteService.CreateLogicalRouterServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLogicalRouterServiceInstanceRef(ctx context.Context, request *DeleteLogicalRouterServiceInstanceRefRequest) (*DeleteLogicalRouterServiceInstanceRefResponse, error) {
	return w.WriteService.DeleteLogicalRouterServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateLogicalRouterVirtualMachineInterfaceRef(ctx context.Context, request *CreateLogicalRouterVirtualMachineInterfaceRefRequest) (*CreateLogicalRouterVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.CreateLogicalRouterVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteLogicalRouterVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLogicalRouterVirtualMachineInterfaceRefRequest) (*DeleteLogicalRouterVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.DeleteLogicalRouterVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateMulticastPolicy(ctx context.Context, request *CreateMulticastPolicyRequest) (*CreateMulticastPolicyResponse, error) {
	return w.WriteService.CreateMulticastPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateMulticastPolicy(ctx context.Context, request *UpdateMulticastPolicyRequest) (*UpdateMulticastPolicyResponse, error) {
	return w.WriteService.UpdateMulticastPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteMulticastPolicy(ctx context.Context, request *DeleteMulticastPolicyRequest) (*DeleteMulticastPolicyResponse, error) {
	return w.WriteService.DeleteMulticastPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateMulticastPolicyTagRef(ctx context.Context, request *CreateMulticastPolicyTagRefRequest) (*CreateMulticastPolicyTagRefResponse, error) {
	return w.WriteService.CreateMulticastPolicyTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteMulticastPolicyTagRef(ctx context.Context, request *DeleteMulticastPolicyTagRefRequest) (*DeleteMulticastPolicyTagRefResponse, error) {
	return w.WriteService.DeleteMulticastPolicyTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNamespace(ctx context.Context, request *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	return w.WriteService.CreateNamespace(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateNamespace(ctx context.Context, request *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error) {
	return w.WriteService.UpdateNamespace(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNamespace(ctx context.Context, request *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return w.WriteService.DeleteNamespace(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNamespaceTagRef(ctx context.Context, request *CreateNamespaceTagRefRequest) (*CreateNamespaceTagRefResponse, error) {
	return w.WriteService.CreateNamespaceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNamespaceTagRef(ctx context.Context, request *DeleteNamespaceTagRefRequest) (*DeleteNamespaceTagRefResponse, error) {
	return w.WriteService.DeleteNamespaceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNetworkDeviceConfig(ctx context.Context, request *CreateNetworkDeviceConfigRequest) (*CreateNetworkDeviceConfigResponse, error) {
	return w.WriteService.CreateNetworkDeviceConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateNetworkDeviceConfig(ctx context.Context, request *UpdateNetworkDeviceConfigRequest) (*UpdateNetworkDeviceConfigResponse, error) {
	return w.WriteService.UpdateNetworkDeviceConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNetworkDeviceConfig(ctx context.Context, request *DeleteNetworkDeviceConfigRequest) (*DeleteNetworkDeviceConfigResponse, error) {
	return w.WriteService.DeleteNetworkDeviceConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNetworkDeviceConfigPhysicalRouterRef(ctx context.Context, request *CreateNetworkDeviceConfigPhysicalRouterRefRequest) (*CreateNetworkDeviceConfigPhysicalRouterRefResponse, error) {
	return w.WriteService.CreateNetworkDeviceConfigPhysicalRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNetworkDeviceConfigPhysicalRouterRef(ctx context.Context, request *DeleteNetworkDeviceConfigPhysicalRouterRefRequest) (*DeleteNetworkDeviceConfigPhysicalRouterRefResponse, error) {
	return w.WriteService.DeleteNetworkDeviceConfigPhysicalRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNetworkDeviceConfigTagRef(ctx context.Context, request *CreateNetworkDeviceConfigTagRefRequest) (*CreateNetworkDeviceConfigTagRefResponse, error) {
	return w.WriteService.CreateNetworkDeviceConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNetworkDeviceConfigTagRef(ctx context.Context, request *DeleteNetworkDeviceConfigTagRefRequest) (*DeleteNetworkDeviceConfigTagRefResponse, error) {
	return w.WriteService.DeleteNetworkDeviceConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNetworkIpam(ctx context.Context, request *CreateNetworkIpamRequest) (*CreateNetworkIpamResponse, error) {
	return w.WriteService.CreateNetworkIpam(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateNetworkIpam(ctx context.Context, request *UpdateNetworkIpamRequest) (*UpdateNetworkIpamResponse, error) {
	return w.WriteService.UpdateNetworkIpam(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNetworkIpam(ctx context.Context, request *DeleteNetworkIpamRequest) (*DeleteNetworkIpamResponse, error) {
	return w.WriteService.DeleteNetworkIpam(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNetworkIpamVirtualDNSRef(ctx context.Context, request *CreateNetworkIpamVirtualDNSRefRequest) (*CreateNetworkIpamVirtualDNSRefResponse, error) {
	return w.WriteService.CreateNetworkIpamVirtualDNSRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNetworkIpamVirtualDNSRef(ctx context.Context, request *DeleteNetworkIpamVirtualDNSRefRequest) (*DeleteNetworkIpamVirtualDNSRefResponse, error) {
	return w.WriteService.DeleteNetworkIpamVirtualDNSRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNetworkIpamTagRef(ctx context.Context, request *CreateNetworkIpamTagRefRequest) (*CreateNetworkIpamTagRefResponse, error) {
	return w.WriteService.CreateNetworkIpamTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNetworkIpamTagRef(ctx context.Context, request *DeleteNetworkIpamTagRefRequest) (*DeleteNetworkIpamTagRefResponse, error) {
	return w.WriteService.DeleteNetworkIpamTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNetworkPolicy(ctx context.Context, request *CreateNetworkPolicyRequest) (*CreateNetworkPolicyResponse, error) {
	return w.WriteService.CreateNetworkPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateNetworkPolicy(ctx context.Context, request *UpdateNetworkPolicyRequest) (*UpdateNetworkPolicyResponse, error) {
	return w.WriteService.UpdateNetworkPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNetworkPolicy(ctx context.Context, request *DeleteNetworkPolicyRequest) (*DeleteNetworkPolicyResponse, error) {
	return w.WriteService.DeleteNetworkPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNetworkPolicyTagRef(ctx context.Context, request *CreateNetworkPolicyTagRefRequest) (*CreateNetworkPolicyTagRefResponse, error) {
	return w.WriteService.CreateNetworkPolicyTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNetworkPolicyTagRef(ctx context.Context, request *DeleteNetworkPolicyTagRefRequest) (*DeleteNetworkPolicyTagRefResponse, error) {
	return w.WriteService.DeleteNetworkPolicyTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNodeProfile(ctx context.Context, request *CreateNodeProfileRequest) (*CreateNodeProfileResponse, error) {
	return w.WriteService.CreateNodeProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateNodeProfile(ctx context.Context, request *UpdateNodeProfileRequest) (*UpdateNodeProfileResponse, error) {
	return w.WriteService.UpdateNodeProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNodeProfile(ctx context.Context, request *DeleteNodeProfileRequest) (*DeleteNodeProfileResponse, error) {
	return w.WriteService.DeleteNodeProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNodeProfileHardwareRef(ctx context.Context, request *CreateNodeProfileHardwareRefRequest) (*CreateNodeProfileHardwareRefResponse, error) {
	return w.WriteService.CreateNodeProfileHardwareRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNodeProfileHardwareRef(ctx context.Context, request *DeleteNodeProfileHardwareRefRequest) (*DeleteNodeProfileHardwareRefResponse, error) {
	return w.WriteService.DeleteNodeProfileHardwareRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNodeProfileJobTemplateRef(ctx context.Context, request *CreateNodeProfileJobTemplateRefRequest) (*CreateNodeProfileJobTemplateRefResponse, error) {
	return w.WriteService.CreateNodeProfileJobTemplateRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNodeProfileJobTemplateRef(ctx context.Context, request *DeleteNodeProfileJobTemplateRefRequest) (*DeleteNodeProfileJobTemplateRefResponse, error) {
	return w.WriteService.DeleteNodeProfileJobTemplateRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNodeProfileRoleDefinitionRef(ctx context.Context, request *CreateNodeProfileRoleDefinitionRefRequest) (*CreateNodeProfileRoleDefinitionRefResponse, error) {
	return w.WriteService.CreateNodeProfileRoleDefinitionRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNodeProfileRoleDefinitionRef(ctx context.Context, request *DeleteNodeProfileRoleDefinitionRefRequest) (*DeleteNodeProfileRoleDefinitionRefResponse, error) {
	return w.WriteService.DeleteNodeProfileRoleDefinitionRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNodeProfileTagRef(ctx context.Context, request *CreateNodeProfileTagRefRequest) (*CreateNodeProfileTagRefResponse, error) {
	return w.WriteService.CreateNodeProfileTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNodeProfileTagRef(ctx context.Context, request *DeleteNodeProfileTagRefRequest) (*DeleteNodeProfileTagRefResponse, error) {
	return w.WriteService.DeleteNodeProfileTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNode(ctx context.Context, request *CreateNodeRequest) (*CreateNodeResponse, error) {
	return w.WriteService.CreateNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateNode(ctx context.Context, request *UpdateNodeRequest) (*UpdateNodeResponse, error) {
	return w.WriteService.UpdateNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNode(ctx context.Context, request *DeleteNodeRequest) (*DeleteNodeResponse, error) {
	return w.WriteService.DeleteNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNodeNodeProfileRef(ctx context.Context, request *CreateNodeNodeProfileRefRequest) (*CreateNodeNodeProfileRefResponse, error) {
	return w.WriteService.CreateNodeNodeProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNodeNodeProfileRef(ctx context.Context, request *DeleteNodeNodeProfileRefRequest) (*DeleteNodeNodeProfileRefResponse, error) {
	return w.WriteService.DeleteNodeNodeProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateNodeTagRef(ctx context.Context, request *CreateNodeTagRefRequest) (*CreateNodeTagRefResponse, error) {
	return w.WriteService.CreateNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteNodeTagRef(ctx context.Context, request *DeleteNodeTagRefRequest) (*DeleteNodeTagRefResponse, error) {
	return w.WriteService.DeleteNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateOverlayRole(ctx context.Context, request *CreateOverlayRoleRequest) (*CreateOverlayRoleResponse, error) {
	return w.WriteService.CreateOverlayRole(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateOverlayRole(ctx context.Context, request *UpdateOverlayRoleRequest) (*UpdateOverlayRoleResponse, error) {
	return w.WriteService.UpdateOverlayRole(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteOverlayRole(ctx context.Context, request *DeleteOverlayRoleRequest) (*DeleteOverlayRoleResponse, error) {
	return w.WriteService.DeleteOverlayRole(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateOverlayRoleTagRef(ctx context.Context, request *CreateOverlayRoleTagRefRequest) (*CreateOverlayRoleTagRefResponse, error) {
	return w.WriteService.CreateOverlayRoleTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteOverlayRoleTagRef(ctx context.Context, request *DeleteOverlayRoleTagRefRequest) (*DeleteOverlayRoleTagRefResponse, error) {
	return w.WriteService.DeleteOverlayRoleTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePeeringPolicy(ctx context.Context, request *CreatePeeringPolicyRequest) (*CreatePeeringPolicyResponse, error) {
	return w.WriteService.CreatePeeringPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdatePeeringPolicy(ctx context.Context, request *UpdatePeeringPolicyRequest) (*UpdatePeeringPolicyResponse, error) {
	return w.WriteService.UpdatePeeringPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePeeringPolicy(ctx context.Context, request *DeletePeeringPolicyRequest) (*DeletePeeringPolicyResponse, error) {
	return w.WriteService.DeletePeeringPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePeeringPolicyTagRef(ctx context.Context, request *CreatePeeringPolicyTagRefRequest) (*CreatePeeringPolicyTagRefResponse, error) {
	return w.WriteService.CreatePeeringPolicyTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePeeringPolicyTagRef(ctx context.Context, request *DeletePeeringPolicyTagRefRequest) (*DeletePeeringPolicyTagRefResponse, error) {
	return w.WriteService.DeletePeeringPolicyTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalInterface(ctx context.Context, request *CreatePhysicalInterfaceRequest) (*CreatePhysicalInterfaceResponse, error) {
	return w.WriteService.CreatePhysicalInterface(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdatePhysicalInterface(ctx context.Context, request *UpdatePhysicalInterfaceRequest) (*UpdatePhysicalInterfaceResponse, error) {
	return w.WriteService.UpdatePhysicalInterface(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalInterface(ctx context.Context, request *DeletePhysicalInterfaceRequest) (*DeletePhysicalInterfaceResponse, error) {
	return w.WriteService.DeletePhysicalInterface(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalInterfacePhysicalInterfaceRef(ctx context.Context, request *CreatePhysicalInterfacePhysicalInterfaceRefRequest) (*CreatePhysicalInterfacePhysicalInterfaceRefResponse, error) {
	return w.WriteService.CreatePhysicalInterfacePhysicalInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalInterfacePhysicalInterfaceRef(ctx context.Context, request *DeletePhysicalInterfacePhysicalInterfaceRefRequest) (*DeletePhysicalInterfacePhysicalInterfaceRefResponse, error) {
	return w.WriteService.DeletePhysicalInterfacePhysicalInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalInterfacePortRef(ctx context.Context, request *CreatePhysicalInterfacePortRefRequest) (*CreatePhysicalInterfacePortRefResponse, error) {
	return w.WriteService.CreatePhysicalInterfacePortRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalInterfacePortRef(ctx context.Context, request *DeletePhysicalInterfacePortRefRequest) (*DeletePhysicalInterfacePortRefResponse, error) {
	return w.WriteService.DeletePhysicalInterfacePortRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalInterfaceTagRef(ctx context.Context, request *CreatePhysicalInterfaceTagRefRequest) (*CreatePhysicalInterfaceTagRefResponse, error) {
	return w.WriteService.CreatePhysicalInterfaceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalInterfaceTagRef(ctx context.Context, request *DeletePhysicalInterfaceTagRefRequest) (*DeletePhysicalInterfaceTagRefResponse, error) {
	return w.WriteService.DeletePhysicalInterfaceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRole(ctx context.Context, request *CreatePhysicalRoleRequest) (*CreatePhysicalRoleResponse, error) {
	return w.WriteService.CreatePhysicalRole(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdatePhysicalRole(ctx context.Context, request *UpdatePhysicalRoleRequest) (*UpdatePhysicalRoleResponse, error) {
	return w.WriteService.UpdatePhysicalRole(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRole(ctx context.Context, request *DeletePhysicalRoleRequest) (*DeletePhysicalRoleResponse, error) {
	return w.WriteService.DeletePhysicalRole(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRoleTagRef(ctx context.Context, request *CreatePhysicalRoleTagRefRequest) (*CreatePhysicalRoleTagRefResponse, error) {
	return w.WriteService.CreatePhysicalRoleTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRoleTagRef(ctx context.Context, request *DeletePhysicalRoleTagRefRequest) (*DeletePhysicalRoleTagRefResponse, error) {
	return w.WriteService.DeletePhysicalRoleTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRouter(ctx context.Context, request *CreatePhysicalRouterRequest) (*CreatePhysicalRouterResponse, error) {
	return w.WriteService.CreatePhysicalRouter(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdatePhysicalRouter(ctx context.Context, request *UpdatePhysicalRouterRequest) (*UpdatePhysicalRouterResponse, error) {
	return w.WriteService.UpdatePhysicalRouter(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRouter(ctx context.Context, request *DeletePhysicalRouterRequest) (*DeletePhysicalRouterResponse, error) {
	return w.WriteService.DeletePhysicalRouter(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRouterIntentMapRef(ctx context.Context, request *CreatePhysicalRouterIntentMapRefRequest) (*CreatePhysicalRouterIntentMapRefResponse, error) {
	return w.WriteService.CreatePhysicalRouterIntentMapRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRouterIntentMapRef(ctx context.Context, request *DeletePhysicalRouterIntentMapRefRequest) (*DeletePhysicalRouterIntentMapRefResponse, error) {
	return w.WriteService.DeletePhysicalRouterIntentMapRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRouterNodeProfileRef(ctx context.Context, request *CreatePhysicalRouterNodeProfileRefRequest) (*CreatePhysicalRouterNodeProfileRefResponse, error) {
	return w.WriteService.CreatePhysicalRouterNodeProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRouterNodeProfileRef(ctx context.Context, request *DeletePhysicalRouterNodeProfileRefRequest) (*DeletePhysicalRouterNodeProfileRefResponse, error) {
	return w.WriteService.DeletePhysicalRouterNodeProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRouterTelemetryProfileRef(ctx context.Context, request *CreatePhysicalRouterTelemetryProfileRefRequest) (*CreatePhysicalRouterTelemetryProfileRefResponse, error) {
	return w.WriteService.CreatePhysicalRouterTelemetryProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRouterTelemetryProfileRef(ctx context.Context, request *DeletePhysicalRouterTelemetryProfileRefRequest) (*DeletePhysicalRouterTelemetryProfileRefResponse, error) {
	return w.WriteService.DeletePhysicalRouterTelemetryProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRouterVirtualNetworkRef(ctx context.Context, request *CreatePhysicalRouterVirtualNetworkRefRequest) (*CreatePhysicalRouterVirtualNetworkRefResponse, error) {
	return w.WriteService.CreatePhysicalRouterVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRouterVirtualNetworkRef(ctx context.Context, request *DeletePhysicalRouterVirtualNetworkRefRequest) (*DeletePhysicalRouterVirtualNetworkRefResponse, error) {
	return w.WriteService.DeletePhysicalRouterVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRouterVirtualRouterRef(ctx context.Context, request *CreatePhysicalRouterVirtualRouterRefRequest) (*CreatePhysicalRouterVirtualRouterRefResponse, error) {
	return w.WriteService.CreatePhysicalRouterVirtualRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRouterVirtualRouterRef(ctx context.Context, request *DeletePhysicalRouterVirtualRouterRefRequest) (*DeletePhysicalRouterVirtualRouterRefResponse, error) {
	return w.WriteService.DeletePhysicalRouterVirtualRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRouterBGPRouterRef(ctx context.Context, request *CreatePhysicalRouterBGPRouterRefRequest) (*CreatePhysicalRouterBGPRouterRefResponse, error) {
	return w.WriteService.CreatePhysicalRouterBGPRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRouterBGPRouterRef(ctx context.Context, request *DeletePhysicalRouterBGPRouterRefRequest) (*DeletePhysicalRouterBGPRouterRefResponse, error) {
	return w.WriteService.DeletePhysicalRouterBGPRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRouterDeviceChassisRef(ctx context.Context, request *CreatePhysicalRouterDeviceChassisRefRequest) (*CreatePhysicalRouterDeviceChassisRefResponse, error) {
	return w.WriteService.CreatePhysicalRouterDeviceChassisRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRouterDeviceChassisRef(ctx context.Context, request *DeletePhysicalRouterDeviceChassisRefRequest) (*DeletePhysicalRouterDeviceChassisRefResponse, error) {
	return w.WriteService.DeletePhysicalRouterDeviceChassisRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRouterDeviceImageRef(ctx context.Context, request *CreatePhysicalRouterDeviceImageRefRequest) (*CreatePhysicalRouterDeviceImageRefResponse, error) {
	return w.WriteService.CreatePhysicalRouterDeviceImageRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRouterDeviceImageRef(ctx context.Context, request *DeletePhysicalRouterDeviceImageRefRequest) (*DeletePhysicalRouterDeviceImageRefResponse, error) {
	return w.WriteService.DeletePhysicalRouterDeviceImageRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRouterPhysicalRoleRef(ctx context.Context, request *CreatePhysicalRouterPhysicalRoleRefRequest) (*CreatePhysicalRouterPhysicalRoleRefResponse, error) {
	return w.WriteService.CreatePhysicalRouterPhysicalRoleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRouterPhysicalRoleRef(ctx context.Context, request *DeletePhysicalRouterPhysicalRoleRefRequest) (*DeletePhysicalRouterPhysicalRoleRefResponse, error) {
	return w.WriteService.DeletePhysicalRouterPhysicalRoleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRouterOverlayRoleRef(ctx context.Context, request *CreatePhysicalRouterOverlayRoleRefRequest) (*CreatePhysicalRouterOverlayRoleRefResponse, error) {
	return w.WriteService.CreatePhysicalRouterOverlayRoleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRouterOverlayRoleRef(ctx context.Context, request *DeletePhysicalRouterOverlayRoleRefRequest) (*DeletePhysicalRouterOverlayRoleRefResponse, error) {
	return w.WriteService.DeletePhysicalRouterOverlayRoleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRouterTagRef(ctx context.Context, request *CreatePhysicalRouterTagRefRequest) (*CreatePhysicalRouterTagRefResponse, error) {
	return w.WriteService.CreatePhysicalRouterTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRouterTagRef(ctx context.Context, request *DeletePhysicalRouterTagRefRequest) (*DeletePhysicalRouterTagRefResponse, error) {
	return w.WriteService.DeletePhysicalRouterTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRouterFabricRef(ctx context.Context, request *CreatePhysicalRouterFabricRefRequest) (*CreatePhysicalRouterFabricRefResponse, error) {
	return w.WriteService.CreatePhysicalRouterFabricRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRouterFabricRef(ctx context.Context, request *DeletePhysicalRouterFabricRefRequest) (*DeletePhysicalRouterFabricRefResponse, error) {
	return w.WriteService.DeletePhysicalRouterFabricRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePhysicalRouterDeviceFunctionalGroupRef(ctx context.Context, request *CreatePhysicalRouterDeviceFunctionalGroupRefRequest) (*CreatePhysicalRouterDeviceFunctionalGroupRefResponse, error) {
	return w.WriteService.CreatePhysicalRouterDeviceFunctionalGroupRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePhysicalRouterDeviceFunctionalGroupRef(ctx context.Context, request *DeletePhysicalRouterDeviceFunctionalGroupRefRequest) (*DeletePhysicalRouterDeviceFunctionalGroupRefResponse, error) {
	return w.WriteService.DeletePhysicalRouterDeviceFunctionalGroupRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePolicyManagement(ctx context.Context, request *CreatePolicyManagementRequest) (*CreatePolicyManagementResponse, error) {
	return w.WriteService.CreatePolicyManagement(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdatePolicyManagement(ctx context.Context, request *UpdatePolicyManagementRequest) (*UpdatePolicyManagementResponse, error) {
	return w.WriteService.UpdatePolicyManagement(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePolicyManagement(ctx context.Context, request *DeletePolicyManagementRequest) (*DeletePolicyManagementResponse, error) {
	return w.WriteService.DeletePolicyManagement(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePolicyManagementTagRef(ctx context.Context, request *CreatePolicyManagementTagRefRequest) (*CreatePolicyManagementTagRefResponse, error) {
	return w.WriteService.CreatePolicyManagementTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePolicyManagementTagRef(ctx context.Context, request *DeletePolicyManagementTagRefRequest) (*DeletePolicyManagementTagRefResponse, error) {
	return w.WriteService.DeletePolicyManagementTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePortGroup(ctx context.Context, request *CreatePortGroupRequest) (*CreatePortGroupResponse, error) {
	return w.WriteService.CreatePortGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdatePortGroup(ctx context.Context, request *UpdatePortGroupRequest) (*UpdatePortGroupResponse, error) {
	return w.WriteService.UpdatePortGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePortGroup(ctx context.Context, request *DeletePortGroupRequest) (*DeletePortGroupResponse, error) {
	return w.WriteService.DeletePortGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePortGroupPortRef(ctx context.Context, request *CreatePortGroupPortRefRequest) (*CreatePortGroupPortRefResponse, error) {
	return w.WriteService.CreatePortGroupPortRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePortGroupPortRef(ctx context.Context, request *DeletePortGroupPortRefRequest) (*DeletePortGroupPortRefResponse, error) {
	return w.WriteService.DeletePortGroupPortRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePortGroupTagRef(ctx context.Context, request *CreatePortGroupTagRefRequest) (*CreatePortGroupTagRefResponse, error) {
	return w.WriteService.CreatePortGroupTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePortGroupTagRef(ctx context.Context, request *DeletePortGroupTagRefRequest) (*DeletePortGroupTagRefResponse, error) {
	return w.WriteService.DeletePortGroupTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePortProfile(ctx context.Context, request *CreatePortProfileRequest) (*CreatePortProfileResponse, error) {
	return w.WriteService.CreatePortProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdatePortProfile(ctx context.Context, request *UpdatePortProfileRequest) (*UpdatePortProfileResponse, error) {
	return w.WriteService.UpdatePortProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePortProfile(ctx context.Context, request *DeletePortProfileRequest) (*DeletePortProfileResponse, error) {
	return w.WriteService.DeletePortProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePortProfileTagRef(ctx context.Context, request *CreatePortProfileTagRefRequest) (*CreatePortProfileTagRefResponse, error) {
	return w.WriteService.CreatePortProfileTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePortProfileTagRef(ctx context.Context, request *DeletePortProfileTagRefRequest) (*DeletePortProfileTagRefResponse, error) {
	return w.WriteService.DeletePortProfileTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePortProfileStormControlProfileRef(ctx context.Context, request *CreatePortProfileStormControlProfileRefRequest) (*CreatePortProfileStormControlProfileRefResponse, error) {
	return w.WriteService.CreatePortProfileStormControlProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePortProfileStormControlProfileRef(ctx context.Context, request *DeletePortProfileStormControlProfileRefRequest) (*DeletePortProfileStormControlProfileRefResponse, error) {
	return w.WriteService.DeletePortProfileStormControlProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePort(ctx context.Context, request *CreatePortRequest) (*CreatePortResponse, error) {
	return w.WriteService.CreatePort(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdatePort(ctx context.Context, request *UpdatePortRequest) (*UpdatePortResponse, error) {
	return w.WriteService.UpdatePort(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePort(ctx context.Context, request *DeletePortRequest) (*DeletePortResponse, error) {
	return w.WriteService.DeletePort(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePortTagRef(ctx context.Context, request *CreatePortTagRefRequest) (*CreatePortTagRefResponse, error) {
	return w.WriteService.CreatePortTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePortTagRef(ctx context.Context, request *DeletePortTagRefRequest) (*DeletePortTagRefResponse, error) {
	return w.WriteService.DeletePortTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePortTuple(ctx context.Context, request *CreatePortTupleRequest) (*CreatePortTupleResponse, error) {
	return w.WriteService.CreatePortTuple(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdatePortTuple(ctx context.Context, request *UpdatePortTupleRequest) (*UpdatePortTupleResponse, error) {
	return w.WriteService.UpdatePortTuple(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePortTuple(ctx context.Context, request *DeletePortTupleRequest) (*DeletePortTupleResponse, error) {
	return w.WriteService.DeletePortTuple(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePortTupleLogicalRouterRef(ctx context.Context, request *CreatePortTupleLogicalRouterRefRequest) (*CreatePortTupleLogicalRouterRefResponse, error) {
	return w.WriteService.CreatePortTupleLogicalRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePortTupleLogicalRouterRef(ctx context.Context, request *DeletePortTupleLogicalRouterRefRequest) (*DeletePortTupleLogicalRouterRefResponse, error) {
	return w.WriteService.DeletePortTupleLogicalRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePortTupleVirtualNetworkRef(ctx context.Context, request *CreatePortTupleVirtualNetworkRefRequest) (*CreatePortTupleVirtualNetworkRefResponse, error) {
	return w.WriteService.CreatePortTupleVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePortTupleVirtualNetworkRef(ctx context.Context, request *DeletePortTupleVirtualNetworkRefRequest) (*DeletePortTupleVirtualNetworkRefResponse, error) {
	return w.WriteService.DeletePortTupleVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreatePortTupleTagRef(ctx context.Context, request *CreatePortTupleTagRefRequest) (*CreatePortTupleTagRefResponse, error) {
	return w.WriteService.CreatePortTupleTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeletePortTupleTagRef(ctx context.Context, request *DeletePortTupleTagRefRequest) (*DeletePortTupleTagRefResponse, error) {
	return w.WriteService.DeletePortTupleTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateProject(ctx context.Context, request *CreateProjectRequest) (*CreateProjectResponse, error) {
	return w.WriteService.CreateProject(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateProject(ctx context.Context, request *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return w.WriteService.UpdateProject(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteProject(ctx context.Context, request *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return w.WriteService.DeleteProject(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateProjectFloatingIPPoolRef(ctx context.Context, request *CreateProjectFloatingIPPoolRefRequest) (*CreateProjectFloatingIPPoolRefResponse, error) {
	return w.WriteService.CreateProjectFloatingIPPoolRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteProjectFloatingIPPoolRef(ctx context.Context, request *DeleteProjectFloatingIPPoolRefRequest) (*DeleteProjectFloatingIPPoolRefResponse, error) {
	return w.WriteService.DeleteProjectFloatingIPPoolRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateProjectNamespaceRef(ctx context.Context, request *CreateProjectNamespaceRefRequest) (*CreateProjectNamespaceRefResponse, error) {
	return w.WriteService.CreateProjectNamespaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteProjectNamespaceRef(ctx context.Context, request *DeleteProjectNamespaceRefRequest) (*DeleteProjectNamespaceRefResponse, error) {
	return w.WriteService.DeleteProjectNamespaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateProjectTagRef(ctx context.Context, request *CreateProjectTagRefRequest) (*CreateProjectTagRefResponse, error) {
	return w.WriteService.CreateProjectTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteProjectTagRef(ctx context.Context, request *DeleteProjectTagRefRequest) (*DeleteProjectTagRefResponse, error) {
	return w.WriteService.DeleteProjectTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateProjectAliasIPPoolRef(ctx context.Context, request *CreateProjectAliasIPPoolRefRequest) (*CreateProjectAliasIPPoolRefResponse, error) {
	return w.WriteService.CreateProjectAliasIPPoolRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteProjectAliasIPPoolRef(ctx context.Context, request *DeleteProjectAliasIPPoolRefRequest) (*DeleteProjectAliasIPPoolRefResponse, error) {
	return w.WriteService.DeleteProjectAliasIPPoolRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateProjectApplicationPolicySetRef(ctx context.Context, request *CreateProjectApplicationPolicySetRefRequest) (*CreateProjectApplicationPolicySetRefResponse, error) {
	return w.WriteService.CreateProjectApplicationPolicySetRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteProjectApplicationPolicySetRef(ctx context.Context, request *DeleteProjectApplicationPolicySetRefRequest) (*DeleteProjectApplicationPolicySetRefResponse, error) {
	return w.WriteService.DeleteProjectApplicationPolicySetRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateProviderAttachment(ctx context.Context, request *CreateProviderAttachmentRequest) (*CreateProviderAttachmentResponse, error) {
	return w.WriteService.CreateProviderAttachment(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateProviderAttachment(ctx context.Context, request *UpdateProviderAttachmentRequest) (*UpdateProviderAttachmentResponse, error) {
	return w.WriteService.UpdateProviderAttachment(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteProviderAttachment(ctx context.Context, request *DeleteProviderAttachmentRequest) (*DeleteProviderAttachmentResponse, error) {
	return w.WriteService.DeleteProviderAttachment(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateProviderAttachmentVirtualRouterRef(ctx context.Context, request *CreateProviderAttachmentVirtualRouterRefRequest) (*CreateProviderAttachmentVirtualRouterRefResponse, error) {
	return w.WriteService.CreateProviderAttachmentVirtualRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteProviderAttachmentVirtualRouterRef(ctx context.Context, request *DeleteProviderAttachmentVirtualRouterRefRequest) (*DeleteProviderAttachmentVirtualRouterRefResponse, error) {
	return w.WriteService.DeleteProviderAttachmentVirtualRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateProviderAttachmentTagRef(ctx context.Context, request *CreateProviderAttachmentTagRefRequest) (*CreateProviderAttachmentTagRefResponse, error) {
	return w.WriteService.CreateProviderAttachmentTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteProviderAttachmentTagRef(ctx context.Context, request *DeleteProviderAttachmentTagRefRequest) (*DeleteProviderAttachmentTagRefResponse, error) {
	return w.WriteService.DeleteProviderAttachmentTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateQosConfig(ctx context.Context, request *CreateQosConfigRequest) (*CreateQosConfigResponse, error) {
	return w.WriteService.CreateQosConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateQosConfig(ctx context.Context, request *UpdateQosConfigRequest) (*UpdateQosConfigResponse, error) {
	return w.WriteService.UpdateQosConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteQosConfig(ctx context.Context, request *DeleteQosConfigRequest) (*DeleteQosConfigResponse, error) {
	return w.WriteService.DeleteQosConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateQosConfigTagRef(ctx context.Context, request *CreateQosConfigTagRefRequest) (*CreateQosConfigTagRefResponse, error) {
	return w.WriteService.CreateQosConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteQosConfigTagRef(ctx context.Context, request *DeleteQosConfigTagRefRequest) (*DeleteQosConfigTagRefResponse, error) {
	return w.WriteService.DeleteQosConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateQosConfigGlobalSystemConfigRef(ctx context.Context, request *CreateQosConfigGlobalSystemConfigRefRequest) (*CreateQosConfigGlobalSystemConfigRefResponse, error) {
	return w.WriteService.CreateQosConfigGlobalSystemConfigRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteQosConfigGlobalSystemConfigRef(ctx context.Context, request *DeleteQosConfigGlobalSystemConfigRefRequest) (*DeleteQosConfigGlobalSystemConfigRefResponse, error) {
	return w.WriteService.DeleteQosConfigGlobalSystemConfigRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateQosQueue(ctx context.Context, request *CreateQosQueueRequest) (*CreateQosQueueResponse, error) {
	return w.WriteService.CreateQosQueue(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateQosQueue(ctx context.Context, request *UpdateQosQueueRequest) (*UpdateQosQueueResponse, error) {
	return w.WriteService.UpdateQosQueue(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteQosQueue(ctx context.Context, request *DeleteQosQueueRequest) (*DeleteQosQueueResponse, error) {
	return w.WriteService.DeleteQosQueue(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateQosQueueTagRef(ctx context.Context, request *CreateQosQueueTagRefRequest) (*CreateQosQueueTagRefResponse, error) {
	return w.WriteService.CreateQosQueueTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteQosQueueTagRef(ctx context.Context, request *DeleteQosQueueTagRefRequest) (*DeleteQosQueueTagRefResponse, error) {
	return w.WriteService.DeleteQosQueueTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoleConfig(ctx context.Context, request *CreateRoleConfigRequest) (*CreateRoleConfigResponse, error) {
	return w.WriteService.CreateRoleConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateRoleConfig(ctx context.Context, request *UpdateRoleConfigRequest) (*UpdateRoleConfigResponse, error) {
	return w.WriteService.UpdateRoleConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoleConfig(ctx context.Context, request *DeleteRoleConfigRequest) (*DeleteRoleConfigResponse, error) {
	return w.WriteService.DeleteRoleConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoleConfigTagRef(ctx context.Context, request *CreateRoleConfigTagRefRequest) (*CreateRoleConfigTagRefResponse, error) {
	return w.WriteService.CreateRoleConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoleConfigTagRef(ctx context.Context, request *DeleteRoleConfigTagRefRequest) (*DeleteRoleConfigTagRefResponse, error) {
	return w.WriteService.DeleteRoleConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoleDefinition(ctx context.Context, request *CreateRoleDefinitionRequest) (*CreateRoleDefinitionResponse, error) {
	return w.WriteService.CreateRoleDefinition(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateRoleDefinition(ctx context.Context, request *UpdateRoleDefinitionRequest) (*UpdateRoleDefinitionResponse, error) {
	return w.WriteService.UpdateRoleDefinition(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoleDefinition(ctx context.Context, request *DeleteRoleDefinitionRequest) (*DeleteRoleDefinitionResponse, error) {
	return w.WriteService.DeleteRoleDefinition(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoleDefinitionFeatureRef(ctx context.Context, request *CreateRoleDefinitionFeatureRefRequest) (*CreateRoleDefinitionFeatureRefResponse, error) {
	return w.WriteService.CreateRoleDefinitionFeatureRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoleDefinitionFeatureRef(ctx context.Context, request *DeleteRoleDefinitionFeatureRefRequest) (*DeleteRoleDefinitionFeatureRefResponse, error) {
	return w.WriteService.DeleteRoleDefinitionFeatureRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoleDefinitionOverlayRoleRef(ctx context.Context, request *CreateRoleDefinitionOverlayRoleRefRequest) (*CreateRoleDefinitionOverlayRoleRefResponse, error) {
	return w.WriteService.CreateRoleDefinitionOverlayRoleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoleDefinitionOverlayRoleRef(ctx context.Context, request *DeleteRoleDefinitionOverlayRoleRefRequest) (*DeleteRoleDefinitionOverlayRoleRefResponse, error) {
	return w.WriteService.DeleteRoleDefinitionOverlayRoleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoleDefinitionPhysicalRoleRef(ctx context.Context, request *CreateRoleDefinitionPhysicalRoleRefRequest) (*CreateRoleDefinitionPhysicalRoleRefResponse, error) {
	return w.WriteService.CreateRoleDefinitionPhysicalRoleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoleDefinitionPhysicalRoleRef(ctx context.Context, request *DeleteRoleDefinitionPhysicalRoleRefRequest) (*DeleteRoleDefinitionPhysicalRoleRefResponse, error) {
	return w.WriteService.DeleteRoleDefinitionPhysicalRoleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoleDefinitionTagRef(ctx context.Context, request *CreateRoleDefinitionTagRefRequest) (*CreateRoleDefinitionTagRefResponse, error) {
	return w.WriteService.CreateRoleDefinitionTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoleDefinitionTagRef(ctx context.Context, request *DeleteRoleDefinitionTagRefRequest) (*DeleteRoleDefinitionTagRefResponse, error) {
	return w.WriteService.DeleteRoleDefinitionTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRouteAggregate(ctx context.Context, request *CreateRouteAggregateRequest) (*CreateRouteAggregateResponse, error) {
	return w.WriteService.CreateRouteAggregate(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateRouteAggregate(ctx context.Context, request *UpdateRouteAggregateRequest) (*UpdateRouteAggregateResponse, error) {
	return w.WriteService.UpdateRouteAggregate(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRouteAggregate(ctx context.Context, request *DeleteRouteAggregateRequest) (*DeleteRouteAggregateResponse, error) {
	return w.WriteService.DeleteRouteAggregate(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRouteAggregateRoutingInstanceRef(ctx context.Context, request *CreateRouteAggregateRoutingInstanceRefRequest) (*CreateRouteAggregateRoutingInstanceRefResponse, error) {
	return w.WriteService.CreateRouteAggregateRoutingInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRouteAggregateRoutingInstanceRef(ctx context.Context, request *DeleteRouteAggregateRoutingInstanceRefRequest) (*DeleteRouteAggregateRoutingInstanceRefResponse, error) {
	return w.WriteService.DeleteRouteAggregateRoutingInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRouteAggregateServiceInstanceRef(ctx context.Context, request *CreateRouteAggregateServiceInstanceRefRequest) (*CreateRouteAggregateServiceInstanceRefResponse, error) {
	return w.WriteService.CreateRouteAggregateServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRouteAggregateServiceInstanceRef(ctx context.Context, request *DeleteRouteAggregateServiceInstanceRefRequest) (*DeleteRouteAggregateServiceInstanceRefResponse, error) {
	return w.WriteService.DeleteRouteAggregateServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRouteAggregateTagRef(ctx context.Context, request *CreateRouteAggregateTagRefRequest) (*CreateRouteAggregateTagRefResponse, error) {
	return w.WriteService.CreateRouteAggregateTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRouteAggregateTagRef(ctx context.Context, request *DeleteRouteAggregateTagRefRequest) (*DeleteRouteAggregateTagRefResponse, error) {
	return w.WriteService.DeleteRouteAggregateTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRouteTable(ctx context.Context, request *CreateRouteTableRequest) (*CreateRouteTableResponse, error) {
	return w.WriteService.CreateRouteTable(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateRouteTable(ctx context.Context, request *UpdateRouteTableRequest) (*UpdateRouteTableResponse, error) {
	return w.WriteService.UpdateRouteTable(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRouteTable(ctx context.Context, request *DeleteRouteTableRequest) (*DeleteRouteTableResponse, error) {
	return w.WriteService.DeleteRouteTable(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRouteTableTagRef(ctx context.Context, request *CreateRouteTableTagRefRequest) (*CreateRouteTableTagRefResponse, error) {
	return w.WriteService.CreateRouteTableTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRouteTableTagRef(ctx context.Context, request *DeleteRouteTableTagRefRequest) (*DeleteRouteTableTagRefResponse, error) {
	return w.WriteService.DeleteRouteTableTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRouteTarget(ctx context.Context, request *CreateRouteTargetRequest) (*CreateRouteTargetResponse, error) {
	return w.WriteService.CreateRouteTarget(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateRouteTarget(ctx context.Context, request *UpdateRouteTargetRequest) (*UpdateRouteTargetResponse, error) {
	return w.WriteService.UpdateRouteTarget(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRouteTarget(ctx context.Context, request *DeleteRouteTargetRequest) (*DeleteRouteTargetResponse, error) {
	return w.WriteService.DeleteRouteTarget(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRouteTargetTagRef(ctx context.Context, request *CreateRouteTargetTagRefRequest) (*CreateRouteTargetTagRefResponse, error) {
	return w.WriteService.CreateRouteTargetTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRouteTargetTagRef(ctx context.Context, request *DeleteRouteTargetTagRefRequest) (*DeleteRouteTargetTagRefResponse, error) {
	return w.WriteService.DeleteRouteTargetTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoutingInstance(ctx context.Context, request *CreateRoutingInstanceRequest) (*CreateRoutingInstanceResponse, error) {
	return w.WriteService.CreateRoutingInstance(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateRoutingInstance(ctx context.Context, request *UpdateRoutingInstanceRequest) (*UpdateRoutingInstanceResponse, error) {
	return w.WriteService.UpdateRoutingInstance(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoutingInstance(ctx context.Context, request *DeleteRoutingInstanceRequest) (*DeleteRoutingInstanceResponse, error) {
	return w.WriteService.DeleteRoutingInstance(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoutingInstanceRouteTargetRef(ctx context.Context, request *CreateRoutingInstanceRouteTargetRefRequest) (*CreateRoutingInstanceRouteTargetRefResponse, error) {
	return w.WriteService.CreateRoutingInstanceRouteTargetRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoutingInstanceRouteTargetRef(ctx context.Context, request *DeleteRoutingInstanceRouteTargetRefRequest) (*DeleteRoutingInstanceRouteTargetRefResponse, error) {
	return w.WriteService.DeleteRoutingInstanceRouteTargetRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoutingInstanceRoutingInstanceRef(ctx context.Context, request *CreateRoutingInstanceRoutingInstanceRefRequest) (*CreateRoutingInstanceRoutingInstanceRefResponse, error) {
	return w.WriteService.CreateRoutingInstanceRoutingInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoutingInstanceRoutingInstanceRef(ctx context.Context, request *DeleteRoutingInstanceRoutingInstanceRefRequest) (*DeleteRoutingInstanceRoutingInstanceRefResponse, error) {
	return w.WriteService.DeleteRoutingInstanceRoutingInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoutingInstanceTagRef(ctx context.Context, request *CreateRoutingInstanceTagRefRequest) (*CreateRoutingInstanceTagRefResponse, error) {
	return w.WriteService.CreateRoutingInstanceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoutingInstanceTagRef(ctx context.Context, request *DeleteRoutingInstanceTagRefRequest) (*DeleteRoutingInstanceTagRefResponse, error) {
	return w.WriteService.DeleteRoutingInstanceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoutingPolicy(ctx context.Context, request *CreateRoutingPolicyRequest) (*CreateRoutingPolicyResponse, error) {
	return w.WriteService.CreateRoutingPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateRoutingPolicy(ctx context.Context, request *UpdateRoutingPolicyRequest) (*UpdateRoutingPolicyResponse, error) {
	return w.WriteService.UpdateRoutingPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoutingPolicy(ctx context.Context, request *DeleteRoutingPolicyRequest) (*DeleteRoutingPolicyResponse, error) {
	return w.WriteService.DeleteRoutingPolicy(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoutingPolicyRoutingInstanceRef(ctx context.Context, request *CreateRoutingPolicyRoutingInstanceRefRequest) (*CreateRoutingPolicyRoutingInstanceRefResponse, error) {
	return w.WriteService.CreateRoutingPolicyRoutingInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoutingPolicyRoutingInstanceRef(ctx context.Context, request *DeleteRoutingPolicyRoutingInstanceRefRequest) (*DeleteRoutingPolicyRoutingInstanceRefResponse, error) {
	return w.WriteService.DeleteRoutingPolicyRoutingInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoutingPolicyServiceInstanceRef(ctx context.Context, request *CreateRoutingPolicyServiceInstanceRefRequest) (*CreateRoutingPolicyServiceInstanceRefResponse, error) {
	return w.WriteService.CreateRoutingPolicyServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoutingPolicyServiceInstanceRef(ctx context.Context, request *DeleteRoutingPolicyServiceInstanceRefRequest) (*DeleteRoutingPolicyServiceInstanceRefResponse, error) {
	return w.WriteService.DeleteRoutingPolicyServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateRoutingPolicyTagRef(ctx context.Context, request *CreateRoutingPolicyTagRefRequest) (*CreateRoutingPolicyTagRefResponse, error) {
	return w.WriteService.CreateRoutingPolicyTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteRoutingPolicyTagRef(ctx context.Context, request *DeleteRoutingPolicyTagRefRequest) (*DeleteRoutingPolicyTagRefResponse, error) {
	return w.WriteService.DeleteRoutingPolicyTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateSecurityGroup(ctx context.Context, request *CreateSecurityGroupRequest) (*CreateSecurityGroupResponse, error) {
	return w.WriteService.CreateSecurityGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateSecurityGroup(ctx context.Context, request *UpdateSecurityGroupRequest) (*UpdateSecurityGroupResponse, error) {
	return w.WriteService.UpdateSecurityGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteSecurityGroup(ctx context.Context, request *DeleteSecurityGroupRequest) (*DeleteSecurityGroupResponse, error) {
	return w.WriteService.DeleteSecurityGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateSecurityGroupTagRef(ctx context.Context, request *CreateSecurityGroupTagRefRequest) (*CreateSecurityGroupTagRefResponse, error) {
	return w.WriteService.CreateSecurityGroupTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteSecurityGroupTagRef(ctx context.Context, request *DeleteSecurityGroupTagRefRequest) (*DeleteSecurityGroupTagRefResponse, error) {
	return w.WriteService.DeleteSecurityGroupTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateSecurityLoggingObject(ctx context.Context, request *CreateSecurityLoggingObjectRequest) (*CreateSecurityLoggingObjectResponse, error) {
	return w.WriteService.CreateSecurityLoggingObject(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateSecurityLoggingObject(ctx context.Context, request *UpdateSecurityLoggingObjectRequest) (*UpdateSecurityLoggingObjectResponse, error) {
	return w.WriteService.UpdateSecurityLoggingObject(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteSecurityLoggingObject(ctx context.Context, request *DeleteSecurityLoggingObjectRequest) (*DeleteSecurityLoggingObjectResponse, error) {
	return w.WriteService.DeleteSecurityLoggingObject(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateSecurityLoggingObjectNetworkPolicyRef(ctx context.Context, request *CreateSecurityLoggingObjectNetworkPolicyRefRequest) (*CreateSecurityLoggingObjectNetworkPolicyRefResponse, error) {
	return w.WriteService.CreateSecurityLoggingObjectNetworkPolicyRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteSecurityLoggingObjectNetworkPolicyRef(ctx context.Context, request *DeleteSecurityLoggingObjectNetworkPolicyRefRequest) (*DeleteSecurityLoggingObjectNetworkPolicyRefResponse, error) {
	return w.WriteService.DeleteSecurityLoggingObjectNetworkPolicyRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateSecurityLoggingObjectSecurityGroupRef(ctx context.Context, request *CreateSecurityLoggingObjectSecurityGroupRefRequest) (*CreateSecurityLoggingObjectSecurityGroupRefResponse, error) {
	return w.WriteService.CreateSecurityLoggingObjectSecurityGroupRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteSecurityLoggingObjectSecurityGroupRef(ctx context.Context, request *DeleteSecurityLoggingObjectSecurityGroupRefRequest) (*DeleteSecurityLoggingObjectSecurityGroupRefResponse, error) {
	return w.WriteService.DeleteSecurityLoggingObjectSecurityGroupRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateSecurityLoggingObjectTagRef(ctx context.Context, request *CreateSecurityLoggingObjectTagRefRequest) (*CreateSecurityLoggingObjectTagRefResponse, error) {
	return w.WriteService.CreateSecurityLoggingObjectTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteSecurityLoggingObjectTagRef(ctx context.Context, request *DeleteSecurityLoggingObjectTagRefRequest) (*DeleteSecurityLoggingObjectTagRefResponse, error) {
	return w.WriteService.DeleteSecurityLoggingObjectTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceAppliance(ctx context.Context, request *CreateServiceApplianceRequest) (*CreateServiceApplianceResponse, error) {
	return w.WriteService.CreateServiceAppliance(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateServiceAppliance(ctx context.Context, request *UpdateServiceApplianceRequest) (*UpdateServiceApplianceResponse, error) {
	return w.WriteService.UpdateServiceAppliance(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceAppliance(ctx context.Context, request *DeleteServiceApplianceRequest) (*DeleteServiceApplianceResponse, error) {
	return w.WriteService.DeleteServiceAppliance(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceAppliancePhysicalInterfaceRef(ctx context.Context, request *CreateServiceAppliancePhysicalInterfaceRefRequest) (*CreateServiceAppliancePhysicalInterfaceRefResponse, error) {
	return w.WriteService.CreateServiceAppliancePhysicalInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceAppliancePhysicalInterfaceRef(ctx context.Context, request *DeleteServiceAppliancePhysicalInterfaceRefRequest) (*DeleteServiceAppliancePhysicalInterfaceRefResponse, error) {
	return w.WriteService.DeleteServiceAppliancePhysicalInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceApplianceTagRef(ctx context.Context, request *CreateServiceApplianceTagRefRequest) (*CreateServiceApplianceTagRefResponse, error) {
	return w.WriteService.CreateServiceApplianceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceApplianceTagRef(ctx context.Context, request *DeleteServiceApplianceTagRefRequest) (*DeleteServiceApplianceTagRefResponse, error) {
	return w.WriteService.DeleteServiceApplianceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceApplianceSet(ctx context.Context, request *CreateServiceApplianceSetRequest) (*CreateServiceApplianceSetResponse, error) {
	return w.WriteService.CreateServiceApplianceSet(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateServiceApplianceSet(ctx context.Context, request *UpdateServiceApplianceSetRequest) (*UpdateServiceApplianceSetResponse, error) {
	return w.WriteService.UpdateServiceApplianceSet(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceApplianceSet(ctx context.Context, request *DeleteServiceApplianceSetRequest) (*DeleteServiceApplianceSetResponse, error) {
	return w.WriteService.DeleteServiceApplianceSet(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceApplianceSetTagRef(ctx context.Context, request *CreateServiceApplianceSetTagRefRequest) (*CreateServiceApplianceSetTagRefResponse, error) {
	return w.WriteService.CreateServiceApplianceSetTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceApplianceSetTagRef(ctx context.Context, request *DeleteServiceApplianceSetTagRefRequest) (*DeleteServiceApplianceSetTagRefResponse, error) {
	return w.WriteService.DeleteServiceApplianceSetTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceConnectionModule(ctx context.Context, request *CreateServiceConnectionModuleRequest) (*CreateServiceConnectionModuleResponse, error) {
	return w.WriteService.CreateServiceConnectionModule(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateServiceConnectionModule(ctx context.Context, request *UpdateServiceConnectionModuleRequest) (*UpdateServiceConnectionModuleResponse, error) {
	return w.WriteService.UpdateServiceConnectionModule(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceConnectionModule(ctx context.Context, request *DeleteServiceConnectionModuleRequest) (*DeleteServiceConnectionModuleResponse, error) {
	return w.WriteService.DeleteServiceConnectionModule(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceConnectionModuleTagRef(ctx context.Context, request *CreateServiceConnectionModuleTagRefRequest) (*CreateServiceConnectionModuleTagRefResponse, error) {
	return w.WriteService.CreateServiceConnectionModuleTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceConnectionModuleTagRef(ctx context.Context, request *DeleteServiceConnectionModuleTagRefRequest) (*DeleteServiceConnectionModuleTagRefResponse, error) {
	return w.WriteService.DeleteServiceConnectionModuleTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceConnectionModuleServiceObjectRef(ctx context.Context, request *CreateServiceConnectionModuleServiceObjectRefRequest) (*CreateServiceConnectionModuleServiceObjectRefResponse, error) {
	return w.WriteService.CreateServiceConnectionModuleServiceObjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceConnectionModuleServiceObjectRef(ctx context.Context, request *DeleteServiceConnectionModuleServiceObjectRefRequest) (*DeleteServiceConnectionModuleServiceObjectRefResponse, error) {
	return w.WriteService.DeleteServiceConnectionModuleServiceObjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceEndpoint(ctx context.Context, request *CreateServiceEndpointRequest) (*CreateServiceEndpointResponse, error) {
	return w.WriteService.CreateServiceEndpoint(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateServiceEndpoint(ctx context.Context, request *UpdateServiceEndpointRequest) (*UpdateServiceEndpointResponse, error) {
	return w.WriteService.UpdateServiceEndpoint(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceEndpoint(ctx context.Context, request *DeleteServiceEndpointRequest) (*DeleteServiceEndpointResponse, error) {
	return w.WriteService.DeleteServiceEndpoint(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceEndpointServiceConnectionModuleRef(ctx context.Context, request *CreateServiceEndpointServiceConnectionModuleRefRequest) (*CreateServiceEndpointServiceConnectionModuleRefResponse, error) {
	return w.WriteService.CreateServiceEndpointServiceConnectionModuleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceEndpointServiceConnectionModuleRef(ctx context.Context, request *DeleteServiceEndpointServiceConnectionModuleRefRequest) (*DeleteServiceEndpointServiceConnectionModuleRefResponse, error) {
	return w.WriteService.DeleteServiceEndpointServiceConnectionModuleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceEndpointServiceObjectRef(ctx context.Context, request *CreateServiceEndpointServiceObjectRefRequest) (*CreateServiceEndpointServiceObjectRefResponse, error) {
	return w.WriteService.CreateServiceEndpointServiceObjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceEndpointServiceObjectRef(ctx context.Context, request *DeleteServiceEndpointServiceObjectRefRequest) (*DeleteServiceEndpointServiceObjectRefResponse, error) {
	return w.WriteService.DeleteServiceEndpointServiceObjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceEndpointTagRef(ctx context.Context, request *CreateServiceEndpointTagRefRequest) (*CreateServiceEndpointTagRefResponse, error) {
	return w.WriteService.CreateServiceEndpointTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceEndpointTagRef(ctx context.Context, request *DeleteServiceEndpointTagRefRequest) (*DeleteServiceEndpointTagRefResponse, error) {
	return w.WriteService.DeleteServiceEndpointTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceEndpointPhysicalRouterRef(ctx context.Context, request *CreateServiceEndpointPhysicalRouterRefRequest) (*CreateServiceEndpointPhysicalRouterRefResponse, error) {
	return w.WriteService.CreateServiceEndpointPhysicalRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceEndpointPhysicalRouterRef(ctx context.Context, request *DeleteServiceEndpointPhysicalRouterRefRequest) (*DeleteServiceEndpointPhysicalRouterRefResponse, error) {
	return w.WriteService.DeleteServiceEndpointPhysicalRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceGroup(ctx context.Context, request *CreateServiceGroupRequest) (*CreateServiceGroupResponse, error) {
	return w.WriteService.CreateServiceGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateServiceGroup(ctx context.Context, request *UpdateServiceGroupRequest) (*UpdateServiceGroupResponse, error) {
	return w.WriteService.UpdateServiceGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceGroup(ctx context.Context, request *DeleteServiceGroupRequest) (*DeleteServiceGroupResponse, error) {
	return w.WriteService.DeleteServiceGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceGroupTagRef(ctx context.Context, request *CreateServiceGroupTagRefRequest) (*CreateServiceGroupTagRefResponse, error) {
	return w.WriteService.CreateServiceGroupTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceGroupTagRef(ctx context.Context, request *DeleteServiceGroupTagRefRequest) (*DeleteServiceGroupTagRefResponse, error) {
	return w.WriteService.DeleteServiceGroupTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceHealthCheck(ctx context.Context, request *CreateServiceHealthCheckRequest) (*CreateServiceHealthCheckResponse, error) {
	return w.WriteService.CreateServiceHealthCheck(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateServiceHealthCheck(ctx context.Context, request *UpdateServiceHealthCheckRequest) (*UpdateServiceHealthCheckResponse, error) {
	return w.WriteService.UpdateServiceHealthCheck(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceHealthCheck(ctx context.Context, request *DeleteServiceHealthCheckRequest) (*DeleteServiceHealthCheckResponse, error) {
	return w.WriteService.DeleteServiceHealthCheck(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceHealthCheckServiceInstanceRef(ctx context.Context, request *CreateServiceHealthCheckServiceInstanceRefRequest) (*CreateServiceHealthCheckServiceInstanceRefResponse, error) {
	return w.WriteService.CreateServiceHealthCheckServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceHealthCheckServiceInstanceRef(ctx context.Context, request *DeleteServiceHealthCheckServiceInstanceRefRequest) (*DeleteServiceHealthCheckServiceInstanceRefResponse, error) {
	return w.WriteService.DeleteServiceHealthCheckServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceHealthCheckTagRef(ctx context.Context, request *CreateServiceHealthCheckTagRefRequest) (*CreateServiceHealthCheckTagRefResponse, error) {
	return w.WriteService.CreateServiceHealthCheckTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceHealthCheckTagRef(ctx context.Context, request *DeleteServiceHealthCheckTagRefRequest) (*DeleteServiceHealthCheckTagRefResponse, error) {
	return w.WriteService.DeleteServiceHealthCheckTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceInstance(ctx context.Context, request *CreateServiceInstanceRequest) (*CreateServiceInstanceResponse, error) {
	return w.WriteService.CreateServiceInstance(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateServiceInstance(ctx context.Context, request *UpdateServiceInstanceRequest) (*UpdateServiceInstanceResponse, error) {
	return w.WriteService.UpdateServiceInstance(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceInstance(ctx context.Context, request *DeleteServiceInstanceRequest) (*DeleteServiceInstanceResponse, error) {
	return w.WriteService.DeleteServiceInstance(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceInstanceInstanceIPRef(ctx context.Context, request *CreateServiceInstanceInstanceIPRefRequest) (*CreateServiceInstanceInstanceIPRefResponse, error) {
	return w.WriteService.CreateServiceInstanceInstanceIPRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceInstanceInstanceIPRef(ctx context.Context, request *DeleteServiceInstanceInstanceIPRefRequest) (*DeleteServiceInstanceInstanceIPRefResponse, error) {
	return w.WriteService.DeleteServiceInstanceInstanceIPRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceInstanceServiceTemplateRef(ctx context.Context, request *CreateServiceInstanceServiceTemplateRefRequest) (*CreateServiceInstanceServiceTemplateRefResponse, error) {
	return w.WriteService.CreateServiceInstanceServiceTemplateRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceInstanceServiceTemplateRef(ctx context.Context, request *DeleteServiceInstanceServiceTemplateRefRequest) (*DeleteServiceInstanceServiceTemplateRefResponse, error) {
	return w.WriteService.DeleteServiceInstanceServiceTemplateRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceInstanceTagRef(ctx context.Context, request *CreateServiceInstanceTagRefRequest) (*CreateServiceInstanceTagRefResponse, error) {
	return w.WriteService.CreateServiceInstanceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceInstanceTagRef(ctx context.Context, request *DeleteServiceInstanceTagRefRequest) (*DeleteServiceInstanceTagRefResponse, error) {
	return w.WriteService.DeleteServiceInstanceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceObject(ctx context.Context, request *CreateServiceObjectRequest) (*CreateServiceObjectResponse, error) {
	return w.WriteService.CreateServiceObject(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateServiceObject(ctx context.Context, request *UpdateServiceObjectRequest) (*UpdateServiceObjectResponse, error) {
	return w.WriteService.UpdateServiceObject(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceObject(ctx context.Context, request *DeleteServiceObjectRequest) (*DeleteServiceObjectResponse, error) {
	return w.WriteService.DeleteServiceObject(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceObjectTagRef(ctx context.Context, request *CreateServiceObjectTagRefRequest) (*CreateServiceObjectTagRefResponse, error) {
	return w.WriteService.CreateServiceObjectTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceObjectTagRef(ctx context.Context, request *DeleteServiceObjectTagRefRequest) (*DeleteServiceObjectTagRefResponse, error) {
	return w.WriteService.DeleteServiceObjectTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceTemplate(ctx context.Context, request *CreateServiceTemplateRequest) (*CreateServiceTemplateResponse, error) {
	return w.WriteService.CreateServiceTemplate(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateServiceTemplate(ctx context.Context, request *UpdateServiceTemplateRequest) (*UpdateServiceTemplateResponse, error) {
	return w.WriteService.UpdateServiceTemplate(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceTemplate(ctx context.Context, request *DeleteServiceTemplateRequest) (*DeleteServiceTemplateResponse, error) {
	return w.WriteService.DeleteServiceTemplate(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceTemplateServiceApplianceSetRef(ctx context.Context, request *CreateServiceTemplateServiceApplianceSetRefRequest) (*CreateServiceTemplateServiceApplianceSetRefResponse, error) {
	return w.WriteService.CreateServiceTemplateServiceApplianceSetRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceTemplateServiceApplianceSetRef(ctx context.Context, request *DeleteServiceTemplateServiceApplianceSetRefRequest) (*DeleteServiceTemplateServiceApplianceSetRefResponse, error) {
	return w.WriteService.DeleteServiceTemplateServiceApplianceSetRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateServiceTemplateTagRef(ctx context.Context, request *CreateServiceTemplateTagRefRequest) (*CreateServiceTemplateTagRefResponse, error) {
	return w.WriteService.CreateServiceTemplateTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteServiceTemplateTagRef(ctx context.Context, request *DeleteServiceTemplateTagRefRequest) (*DeleteServiceTemplateTagRefResponse, error) {
	return w.WriteService.DeleteServiceTemplateTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateSflowProfile(ctx context.Context, request *CreateSflowProfileRequest) (*CreateSflowProfileResponse, error) {
	return w.WriteService.CreateSflowProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateSflowProfile(ctx context.Context, request *UpdateSflowProfileRequest) (*UpdateSflowProfileResponse, error) {
	return w.WriteService.UpdateSflowProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteSflowProfile(ctx context.Context, request *DeleteSflowProfileRequest) (*DeleteSflowProfileResponse, error) {
	return w.WriteService.DeleteSflowProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateSflowProfileTagRef(ctx context.Context, request *CreateSflowProfileTagRefRequest) (*CreateSflowProfileTagRefResponse, error) {
	return w.WriteService.CreateSflowProfileTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteSflowProfileTagRef(ctx context.Context, request *DeleteSflowProfileTagRefRequest) (*DeleteSflowProfileTagRefResponse, error) {
	return w.WriteService.DeleteSflowProfileTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateStormControlProfile(ctx context.Context, request *CreateStormControlProfileRequest) (*CreateStormControlProfileResponse, error) {
	return w.WriteService.CreateStormControlProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateStormControlProfile(ctx context.Context, request *UpdateStormControlProfileRequest) (*UpdateStormControlProfileResponse, error) {
	return w.WriteService.UpdateStormControlProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteStormControlProfile(ctx context.Context, request *DeleteStormControlProfileRequest) (*DeleteStormControlProfileResponse, error) {
	return w.WriteService.DeleteStormControlProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateStormControlProfileTagRef(ctx context.Context, request *CreateStormControlProfileTagRefRequest) (*CreateStormControlProfileTagRefResponse, error) {
	return w.WriteService.CreateStormControlProfileTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteStormControlProfileTagRef(ctx context.Context, request *DeleteStormControlProfileTagRefRequest) (*DeleteStormControlProfileTagRefResponse, error) {
	return w.WriteService.DeleteStormControlProfileTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateStructuredSyslogApplicationRecord(ctx context.Context, request *CreateStructuredSyslogApplicationRecordRequest) (*CreateStructuredSyslogApplicationRecordResponse, error) {
	return w.WriteService.CreateStructuredSyslogApplicationRecord(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateStructuredSyslogApplicationRecord(ctx context.Context, request *UpdateStructuredSyslogApplicationRecordRequest) (*UpdateStructuredSyslogApplicationRecordResponse, error) {
	return w.WriteService.UpdateStructuredSyslogApplicationRecord(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteStructuredSyslogApplicationRecord(ctx context.Context, request *DeleteStructuredSyslogApplicationRecordRequest) (*DeleteStructuredSyslogApplicationRecordResponse, error) {
	return w.WriteService.DeleteStructuredSyslogApplicationRecord(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateStructuredSyslogApplicationRecordTagRef(ctx context.Context, request *CreateStructuredSyslogApplicationRecordTagRefRequest) (*CreateStructuredSyslogApplicationRecordTagRefResponse, error) {
	return w.WriteService.CreateStructuredSyslogApplicationRecordTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteStructuredSyslogApplicationRecordTagRef(ctx context.Context, request *DeleteStructuredSyslogApplicationRecordTagRefRequest) (*DeleteStructuredSyslogApplicationRecordTagRefResponse, error) {
	return w.WriteService.DeleteStructuredSyslogApplicationRecordTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateStructuredSyslogConfig(ctx context.Context, request *CreateStructuredSyslogConfigRequest) (*CreateStructuredSyslogConfigResponse, error) {
	return w.WriteService.CreateStructuredSyslogConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateStructuredSyslogConfig(ctx context.Context, request *UpdateStructuredSyslogConfigRequest) (*UpdateStructuredSyslogConfigResponse, error) {
	return w.WriteService.UpdateStructuredSyslogConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteStructuredSyslogConfig(ctx context.Context, request *DeleteStructuredSyslogConfigRequest) (*DeleteStructuredSyslogConfigResponse, error) {
	return w.WriteService.DeleteStructuredSyslogConfig(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateStructuredSyslogConfigTagRef(ctx context.Context, request *CreateStructuredSyslogConfigTagRefRequest) (*CreateStructuredSyslogConfigTagRefResponse, error) {
	return w.WriteService.CreateStructuredSyslogConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteStructuredSyslogConfigTagRef(ctx context.Context, request *DeleteStructuredSyslogConfigTagRefRequest) (*DeleteStructuredSyslogConfigTagRefResponse, error) {
	return w.WriteService.DeleteStructuredSyslogConfigTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateStructuredSyslogHostnameRecord(ctx context.Context, request *CreateStructuredSyslogHostnameRecordRequest) (*CreateStructuredSyslogHostnameRecordResponse, error) {
	return w.WriteService.CreateStructuredSyslogHostnameRecord(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateStructuredSyslogHostnameRecord(ctx context.Context, request *UpdateStructuredSyslogHostnameRecordRequest) (*UpdateStructuredSyslogHostnameRecordResponse, error) {
	return w.WriteService.UpdateStructuredSyslogHostnameRecord(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteStructuredSyslogHostnameRecord(ctx context.Context, request *DeleteStructuredSyslogHostnameRecordRequest) (*DeleteStructuredSyslogHostnameRecordResponse, error) {
	return w.WriteService.DeleteStructuredSyslogHostnameRecord(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateStructuredSyslogHostnameRecordTagRef(ctx context.Context, request *CreateStructuredSyslogHostnameRecordTagRefRequest) (*CreateStructuredSyslogHostnameRecordTagRefResponse, error) {
	return w.WriteService.CreateStructuredSyslogHostnameRecordTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteStructuredSyslogHostnameRecordTagRef(ctx context.Context, request *DeleteStructuredSyslogHostnameRecordTagRefRequest) (*DeleteStructuredSyslogHostnameRecordTagRefResponse, error) {
	return w.WriteService.DeleteStructuredSyslogHostnameRecordTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateStructuredSyslogMessage(ctx context.Context, request *CreateStructuredSyslogMessageRequest) (*CreateStructuredSyslogMessageResponse, error) {
	return w.WriteService.CreateStructuredSyslogMessage(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateStructuredSyslogMessage(ctx context.Context, request *UpdateStructuredSyslogMessageRequest) (*UpdateStructuredSyslogMessageResponse, error) {
	return w.WriteService.UpdateStructuredSyslogMessage(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteStructuredSyslogMessage(ctx context.Context, request *DeleteStructuredSyslogMessageRequest) (*DeleteStructuredSyslogMessageResponse, error) {
	return w.WriteService.DeleteStructuredSyslogMessage(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateStructuredSyslogMessageTagRef(ctx context.Context, request *CreateStructuredSyslogMessageTagRefRequest) (*CreateStructuredSyslogMessageTagRefResponse, error) {
	return w.WriteService.CreateStructuredSyslogMessageTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteStructuredSyslogMessageTagRef(ctx context.Context, request *DeleteStructuredSyslogMessageTagRefRequest) (*DeleteStructuredSyslogMessageTagRefResponse, error) {
	return w.WriteService.DeleteStructuredSyslogMessageTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateStructuredSyslogSLAProfile(ctx context.Context, request *CreateStructuredSyslogSLAProfileRequest) (*CreateStructuredSyslogSLAProfileResponse, error) {
	return w.WriteService.CreateStructuredSyslogSLAProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateStructuredSyslogSLAProfile(ctx context.Context, request *UpdateStructuredSyslogSLAProfileRequest) (*UpdateStructuredSyslogSLAProfileResponse, error) {
	return w.WriteService.UpdateStructuredSyslogSLAProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteStructuredSyslogSLAProfile(ctx context.Context, request *DeleteStructuredSyslogSLAProfileRequest) (*DeleteStructuredSyslogSLAProfileResponse, error) {
	return w.WriteService.DeleteStructuredSyslogSLAProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateStructuredSyslogSLAProfileTagRef(ctx context.Context, request *CreateStructuredSyslogSLAProfileTagRefRequest) (*CreateStructuredSyslogSLAProfileTagRefResponse, error) {
	return w.WriteService.CreateStructuredSyslogSLAProfileTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteStructuredSyslogSLAProfileTagRef(ctx context.Context, request *DeleteStructuredSyslogSLAProfileTagRefRequest) (*DeleteStructuredSyslogSLAProfileTagRefResponse, error) {
	return w.WriteService.DeleteStructuredSyslogSLAProfileTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateSubCluster(ctx context.Context, request *CreateSubClusterRequest) (*CreateSubClusterResponse, error) {
	return w.WriteService.CreateSubCluster(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateSubCluster(ctx context.Context, request *UpdateSubClusterRequest) (*UpdateSubClusterResponse, error) {
	return w.WriteService.UpdateSubCluster(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteSubCluster(ctx context.Context, request *DeleteSubClusterRequest) (*DeleteSubClusterResponse, error) {
	return w.WriteService.DeleteSubCluster(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateSubClusterTagRef(ctx context.Context, request *CreateSubClusterTagRefRequest) (*CreateSubClusterTagRefResponse, error) {
	return w.WriteService.CreateSubClusterTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteSubClusterTagRef(ctx context.Context, request *DeleteSubClusterTagRefRequest) (*DeleteSubClusterTagRefResponse, error) {
	return w.WriteService.DeleteSubClusterTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateSubnet(ctx context.Context, request *CreateSubnetRequest) (*CreateSubnetResponse, error) {
	return w.WriteService.CreateSubnet(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateSubnet(ctx context.Context, request *UpdateSubnetRequest) (*UpdateSubnetResponse, error) {
	return w.WriteService.UpdateSubnet(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteSubnet(ctx context.Context, request *DeleteSubnetRequest) (*DeleteSubnetResponse, error) {
	return w.WriteService.DeleteSubnet(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateSubnetTagRef(ctx context.Context, request *CreateSubnetTagRefRequest) (*CreateSubnetTagRefResponse, error) {
	return w.WriteService.CreateSubnetTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteSubnetTagRef(ctx context.Context, request *DeleteSubnetTagRefRequest) (*DeleteSubnetTagRefResponse, error) {
	return w.WriteService.DeleteSubnetTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateSubnetVirtualMachineInterfaceRef(ctx context.Context, request *CreateSubnetVirtualMachineInterfaceRefRequest) (*CreateSubnetVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.CreateSubnetVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteSubnetVirtualMachineInterfaceRef(ctx context.Context, request *DeleteSubnetVirtualMachineInterfaceRefRequest) (*DeleteSubnetVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.DeleteSubnetVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateTag(ctx context.Context, request *CreateTagRequest) (*CreateTagResponse, error) {
	return w.WriteService.CreateTag(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateTag(ctx context.Context, request *UpdateTagRequest) (*UpdateTagResponse, error) {
	return w.WriteService.UpdateTag(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteTag(ctx context.Context, request *DeleteTagRequest) (*DeleteTagResponse, error) {
	return w.WriteService.DeleteTag(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateTagTagRef(ctx context.Context, request *CreateTagTagRefRequest) (*CreateTagTagRefResponse, error) {
	return w.WriteService.CreateTagTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteTagTagRef(ctx context.Context, request *DeleteTagTagRefRequest) (*DeleteTagTagRefResponse, error) {
	return w.WriteService.DeleteTagTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateTagTagTypeRef(ctx context.Context, request *CreateTagTagTypeRefRequest) (*CreateTagTagTypeRefResponse, error) {
	return w.WriteService.CreateTagTagTypeRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteTagTagTypeRef(ctx context.Context, request *DeleteTagTagTypeRefRequest) (*DeleteTagTagTypeRefResponse, error) {
	return w.WriteService.DeleteTagTagTypeRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateTagType(ctx context.Context, request *CreateTagTypeRequest) (*CreateTagTypeResponse, error) {
	return w.WriteService.CreateTagType(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateTagType(ctx context.Context, request *UpdateTagTypeRequest) (*UpdateTagTypeResponse, error) {
	return w.WriteService.UpdateTagType(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteTagType(ctx context.Context, request *DeleteTagTypeRequest) (*DeleteTagTypeResponse, error) {
	return w.WriteService.DeleteTagType(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateTagTypeTagRef(ctx context.Context, request *CreateTagTypeTagRefRequest) (*CreateTagTypeTagRefResponse, error) {
	return w.WriteService.CreateTagTypeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteTagTypeTagRef(ctx context.Context, request *DeleteTagTypeTagRefRequest) (*DeleteTagTypeTagRefResponse, error) {
	return w.WriteService.DeleteTagTypeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateTelemetryProfile(ctx context.Context, request *CreateTelemetryProfileRequest) (*CreateTelemetryProfileResponse, error) {
	return w.WriteService.CreateTelemetryProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateTelemetryProfile(ctx context.Context, request *UpdateTelemetryProfileRequest) (*UpdateTelemetryProfileResponse, error) {
	return w.WriteService.UpdateTelemetryProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteTelemetryProfile(ctx context.Context, request *DeleteTelemetryProfileRequest) (*DeleteTelemetryProfileResponse, error) {
	return w.WriteService.DeleteTelemetryProfile(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateTelemetryProfileTagRef(ctx context.Context, request *CreateTelemetryProfileTagRefRequest) (*CreateTelemetryProfileTagRefResponse, error) {
	return w.WriteService.CreateTelemetryProfileTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteTelemetryProfileTagRef(ctx context.Context, request *DeleteTelemetryProfileTagRefRequest) (*DeleteTelemetryProfileTagRefResponse, error) {
	return w.WriteService.DeleteTelemetryProfileTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateTelemetryProfileSflowProfileRef(ctx context.Context, request *CreateTelemetryProfileSflowProfileRefRequest) (*CreateTelemetryProfileSflowProfileRefResponse, error) {
	return w.WriteService.CreateTelemetryProfileSflowProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteTelemetryProfileSflowProfileRef(ctx context.Context, request *DeleteTelemetryProfileSflowProfileRefRequest) (*DeleteTelemetryProfileSflowProfileRefResponse, error) {
	return w.WriteService.DeleteTelemetryProfileSflowProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualDNSRecord(ctx context.Context, request *CreateVirtualDNSRecordRequest) (*CreateVirtualDNSRecordResponse, error) {
	return w.WriteService.CreateVirtualDNSRecord(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateVirtualDNSRecord(ctx context.Context, request *UpdateVirtualDNSRecordRequest) (*UpdateVirtualDNSRecordResponse, error) {
	return w.WriteService.UpdateVirtualDNSRecord(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualDNSRecord(ctx context.Context, request *DeleteVirtualDNSRecordRequest) (*DeleteVirtualDNSRecordResponse, error) {
	return w.WriteService.DeleteVirtualDNSRecord(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualDNSRecordTagRef(ctx context.Context, request *CreateVirtualDNSRecordTagRefRequest) (*CreateVirtualDNSRecordTagRefResponse, error) {
	return w.WriteService.CreateVirtualDNSRecordTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualDNSRecordTagRef(ctx context.Context, request *DeleteVirtualDNSRecordTagRefRequest) (*DeleteVirtualDNSRecordTagRefResponse, error) {
	return w.WriteService.DeleteVirtualDNSRecordTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualDNS(ctx context.Context, request *CreateVirtualDNSRequest) (*CreateVirtualDNSResponse, error) {
	return w.WriteService.CreateVirtualDNS(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateVirtualDNS(ctx context.Context, request *UpdateVirtualDNSRequest) (*UpdateVirtualDNSResponse, error) {
	return w.WriteService.UpdateVirtualDNS(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualDNS(ctx context.Context, request *DeleteVirtualDNSRequest) (*DeleteVirtualDNSResponse, error) {
	return w.WriteService.DeleteVirtualDNS(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualDNSTagRef(ctx context.Context, request *CreateVirtualDNSTagRefRequest) (*CreateVirtualDNSTagRefResponse, error) {
	return w.WriteService.CreateVirtualDNSTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualDNSTagRef(ctx context.Context, request *DeleteVirtualDNSTagRefRequest) (*DeleteVirtualDNSTagRefResponse, error) {
	return w.WriteService.DeleteVirtualDNSTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualIP(ctx context.Context, request *CreateVirtualIPRequest) (*CreateVirtualIPResponse, error) {
	return w.WriteService.CreateVirtualIP(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateVirtualIP(ctx context.Context, request *UpdateVirtualIPRequest) (*UpdateVirtualIPResponse, error) {
	return w.WriteService.UpdateVirtualIP(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualIP(ctx context.Context, request *DeleteVirtualIPRequest) (*DeleteVirtualIPResponse, error) {
	return w.WriteService.DeleteVirtualIP(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateVirtualIPVirtualMachineInterfaceRefRequest) (*CreateVirtualIPVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.CreateVirtualIPVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteVirtualIPVirtualMachineInterfaceRefRequest) (*DeleteVirtualIPVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.DeleteVirtualIPVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualIPTagRef(ctx context.Context, request *CreateVirtualIPTagRefRequest) (*CreateVirtualIPTagRefResponse, error) {
	return w.WriteService.CreateVirtualIPTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualIPTagRef(ctx context.Context, request *DeleteVirtualIPTagRefRequest) (*DeleteVirtualIPTagRefResponse, error) {
	return w.WriteService.DeleteVirtualIPTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualIPLoadbalancerPoolRef(ctx context.Context, request *CreateVirtualIPLoadbalancerPoolRefRequest) (*CreateVirtualIPLoadbalancerPoolRefResponse, error) {
	return w.WriteService.CreateVirtualIPLoadbalancerPoolRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualIPLoadbalancerPoolRef(ctx context.Context, request *DeleteVirtualIPLoadbalancerPoolRefRequest) (*DeleteVirtualIPLoadbalancerPoolRefResponse, error) {
	return w.WriteService.DeleteVirtualIPLoadbalancerPoolRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterface(ctx context.Context, request *CreateVirtualMachineInterfaceRequest) (*CreateVirtualMachineInterfaceResponse, error) {
	return w.WriteService.CreateVirtualMachineInterface(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateVirtualMachineInterface(ctx context.Context, request *UpdateVirtualMachineInterfaceRequest) (*UpdateVirtualMachineInterfaceResponse, error) {
	return w.WriteService.UpdateVirtualMachineInterface(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterface(ctx context.Context, request *DeleteVirtualMachineInterfaceRequest) (*DeleteVirtualMachineInterfaceResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterface(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfaceVirtualMachineRef(ctx context.Context, request *CreateVirtualMachineInterfaceVirtualMachineRefRequest) (*CreateVirtualMachineInterfaceVirtualMachineRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfaceVirtualMachineRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfaceVirtualMachineRef(ctx context.Context, request *DeleteVirtualMachineInterfaceVirtualMachineRefRequest) (*DeleteVirtualMachineInterfaceVirtualMachineRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfaceVirtualMachineRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *CreateVirtualMachineInterfaceVirtualMachineInterfaceRefRequest) (*CreateVirtualMachineInterfaceVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfaceVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefRequest) (*DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfaceVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfacePortProfileRef(ctx context.Context, request *CreateVirtualMachineInterfacePortProfileRefRequest) (*CreateVirtualMachineInterfacePortProfileRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfacePortProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfacePortProfileRef(ctx context.Context, request *DeleteVirtualMachineInterfacePortProfileRefRequest) (*DeleteVirtualMachineInterfacePortProfileRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfacePortProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfaceVirtualNetworkRef(ctx context.Context, request *CreateVirtualMachineInterfaceVirtualNetworkRefRequest) (*CreateVirtualMachineInterfaceVirtualNetworkRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfaceVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfaceVirtualNetworkRef(ctx context.Context, request *DeleteVirtualMachineInterfaceVirtualNetworkRefRequest) (*DeleteVirtualMachineInterfaceVirtualNetworkRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfaceVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfacePhysicalInterfaceRef(ctx context.Context, request *CreateVirtualMachineInterfacePhysicalInterfaceRefRequest) (*CreateVirtualMachineInterfacePhysicalInterfaceRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfacePhysicalInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfacePhysicalInterfaceRef(ctx context.Context, request *DeleteVirtualMachineInterfacePhysicalInterfaceRefRequest) (*DeleteVirtualMachineInterfacePhysicalInterfaceRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfacePhysicalInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfaceServiceHealthCheckRef(ctx context.Context, request *CreateVirtualMachineInterfaceServiceHealthCheckRefRequest) (*CreateVirtualMachineInterfaceServiceHealthCheckRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfaceServiceHealthCheckRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfaceServiceHealthCheckRef(ctx context.Context, request *DeleteVirtualMachineInterfaceServiceHealthCheckRefRequest) (*DeleteVirtualMachineInterfaceServiceHealthCheckRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfaceServiceHealthCheckRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfaceQosConfigRef(ctx context.Context, request *CreateVirtualMachineInterfaceQosConfigRefRequest) (*CreateVirtualMachineInterfaceQosConfigRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfaceQosConfigRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfaceQosConfigRef(ctx context.Context, request *DeleteVirtualMachineInterfaceQosConfigRefRequest) (*DeleteVirtualMachineInterfaceQosConfigRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfaceQosConfigRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfaceTagRef(ctx context.Context, request *CreateVirtualMachineInterfaceTagRefRequest) (*CreateVirtualMachineInterfaceTagRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfaceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfaceTagRef(ctx context.Context, request *DeleteVirtualMachineInterfaceTagRefRequest) (*DeleteVirtualMachineInterfaceTagRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfaceTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfaceBGPRouterRef(ctx context.Context, request *CreateVirtualMachineInterfaceBGPRouterRefRequest) (*CreateVirtualMachineInterfaceBGPRouterRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfaceBGPRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfaceBGPRouterRef(ctx context.Context, request *DeleteVirtualMachineInterfaceBGPRouterRefRequest) (*DeleteVirtualMachineInterfaceBGPRouterRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfaceBGPRouterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfaceRoutingInstanceRef(ctx context.Context, request *CreateVirtualMachineInterfaceRoutingInstanceRefRequest) (*CreateVirtualMachineInterfaceRoutingInstanceRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfaceRoutingInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfaceRoutingInstanceRef(ctx context.Context, request *DeleteVirtualMachineInterfaceRoutingInstanceRefRequest) (*DeleteVirtualMachineInterfaceRoutingInstanceRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfaceRoutingInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfaceBridgeDomainRef(ctx context.Context, request *CreateVirtualMachineInterfaceBridgeDomainRefRequest) (*CreateVirtualMachineInterfaceBridgeDomainRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfaceBridgeDomainRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfaceBridgeDomainRef(ctx context.Context, request *DeleteVirtualMachineInterfaceBridgeDomainRefRequest) (*DeleteVirtualMachineInterfaceBridgeDomainRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfaceBridgeDomainRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfaceSecurityGroupRef(ctx context.Context, request *CreateVirtualMachineInterfaceSecurityGroupRefRequest) (*CreateVirtualMachineInterfaceSecurityGroupRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfaceSecurityGroupRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfaceSecurityGroupRef(ctx context.Context, request *DeleteVirtualMachineInterfaceSecurityGroupRefRequest) (*DeleteVirtualMachineInterfaceSecurityGroupRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfaceSecurityGroupRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfaceSecurityLoggingObjectRef(ctx context.Context, request *CreateVirtualMachineInterfaceSecurityLoggingObjectRefRequest) (*CreateVirtualMachineInterfaceSecurityLoggingObjectRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfaceSecurityLoggingObjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfaceSecurityLoggingObjectRef(ctx context.Context, request *DeleteVirtualMachineInterfaceSecurityLoggingObjectRefRequest) (*DeleteVirtualMachineInterfaceSecurityLoggingObjectRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfaceSecurityLoggingObjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfacePortTupleRef(ctx context.Context, request *CreateVirtualMachineInterfacePortTupleRefRequest) (*CreateVirtualMachineInterfacePortTupleRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfacePortTupleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfacePortTupleRef(ctx context.Context, request *DeleteVirtualMachineInterfacePortTupleRefRequest) (*DeleteVirtualMachineInterfacePortTupleRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfacePortTupleRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfaceServiceEndpointRef(ctx context.Context, request *CreateVirtualMachineInterfaceServiceEndpointRefRequest) (*CreateVirtualMachineInterfaceServiceEndpointRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfaceServiceEndpointRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfaceServiceEndpointRef(ctx context.Context, request *DeleteVirtualMachineInterfaceServiceEndpointRefRequest) (*DeleteVirtualMachineInterfaceServiceEndpointRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfaceServiceEndpointRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineInterfaceInterfaceRouteTableRef(ctx context.Context, request *CreateVirtualMachineInterfaceInterfaceRouteTableRefRequest) (*CreateVirtualMachineInterfaceInterfaceRouteTableRefResponse, error) {
	return w.WriteService.CreateVirtualMachineInterfaceInterfaceRouteTableRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineInterfaceInterfaceRouteTableRef(ctx context.Context, request *DeleteVirtualMachineInterfaceInterfaceRouteTableRefRequest) (*DeleteVirtualMachineInterfaceInterfaceRouteTableRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineInterfaceInterfaceRouteTableRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachine(ctx context.Context, request *CreateVirtualMachineRequest) (*CreateVirtualMachineResponse, error) {
	return w.WriteService.CreateVirtualMachine(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateVirtualMachine(ctx context.Context, request *UpdateVirtualMachineRequest) (*UpdateVirtualMachineResponse, error) {
	return w.WriteService.UpdateVirtualMachine(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachine(ctx context.Context, request *DeleteVirtualMachineRequest) (*DeleteVirtualMachineResponse, error) {
	return w.WriteService.DeleteVirtualMachine(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineTagRef(ctx context.Context, request *CreateVirtualMachineTagRefRequest) (*CreateVirtualMachineTagRefResponse, error) {
	return w.WriteService.CreateVirtualMachineTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineTagRef(ctx context.Context, request *DeleteVirtualMachineTagRefRequest) (*DeleteVirtualMachineTagRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualMachineServiceInstanceRef(ctx context.Context, request *CreateVirtualMachineServiceInstanceRefRequest) (*CreateVirtualMachineServiceInstanceRefResponse, error) {
	return w.WriteService.CreateVirtualMachineServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualMachineServiceInstanceRef(ctx context.Context, request *DeleteVirtualMachineServiceInstanceRefRequest) (*DeleteVirtualMachineServiceInstanceRefResponse, error) {
	return w.WriteService.DeleteVirtualMachineServiceInstanceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualNetwork(ctx context.Context, request *CreateVirtualNetworkRequest) (*CreateVirtualNetworkResponse, error) {
	return w.WriteService.CreateVirtualNetwork(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateVirtualNetwork(ctx context.Context, request *UpdateVirtualNetworkRequest) (*UpdateVirtualNetworkResponse, error) {
	return w.WriteService.UpdateVirtualNetwork(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualNetwork(ctx context.Context, request *DeleteVirtualNetworkRequest) (*DeleteVirtualNetworkResponse, error) {
	return w.WriteService.DeleteVirtualNetwork(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualNetworkMulticastPolicyRef(ctx context.Context, request *CreateVirtualNetworkMulticastPolicyRefRequest) (*CreateVirtualNetworkMulticastPolicyRefResponse, error) {
	return w.WriteService.CreateVirtualNetworkMulticastPolicyRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualNetworkMulticastPolicyRef(ctx context.Context, request *DeleteVirtualNetworkMulticastPolicyRefRequest) (*DeleteVirtualNetworkMulticastPolicyRefResponse, error) {
	return w.WriteService.DeleteVirtualNetworkMulticastPolicyRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualNetworkNetworkIpamRef(ctx context.Context, request *CreateVirtualNetworkNetworkIpamRefRequest) (*CreateVirtualNetworkNetworkIpamRefResponse, error) {
	return w.WriteService.CreateVirtualNetworkNetworkIpamRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualNetworkNetworkIpamRef(ctx context.Context, request *DeleteVirtualNetworkNetworkIpamRefRequest) (*DeleteVirtualNetworkNetworkIpamRefResponse, error) {
	return w.WriteService.DeleteVirtualNetworkNetworkIpamRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualNetworkRouteTableRef(ctx context.Context, request *CreateVirtualNetworkRouteTableRefRequest) (*CreateVirtualNetworkRouteTableRefResponse, error) {
	return w.WriteService.CreateVirtualNetworkRouteTableRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualNetworkRouteTableRef(ctx context.Context, request *DeleteVirtualNetworkRouteTableRefRequest) (*DeleteVirtualNetworkRouteTableRefResponse, error) {
	return w.WriteService.DeleteVirtualNetworkRouteTableRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualNetworkQosConfigRef(ctx context.Context, request *CreateVirtualNetworkQosConfigRefRequest) (*CreateVirtualNetworkQosConfigRefResponse, error) {
	return w.WriteService.CreateVirtualNetworkQosConfigRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualNetworkQosConfigRef(ctx context.Context, request *DeleteVirtualNetworkQosConfigRefRequest) (*DeleteVirtualNetworkQosConfigRefResponse, error) {
	return w.WriteService.DeleteVirtualNetworkQosConfigRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualNetworkSecurityLoggingObjectRef(ctx context.Context, request *CreateVirtualNetworkSecurityLoggingObjectRefRequest) (*CreateVirtualNetworkSecurityLoggingObjectRefResponse, error) {
	return w.WriteService.CreateVirtualNetworkSecurityLoggingObjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualNetworkSecurityLoggingObjectRef(ctx context.Context, request *DeleteVirtualNetworkSecurityLoggingObjectRefRequest) (*DeleteVirtualNetworkSecurityLoggingObjectRefResponse, error) {
	return w.WriteService.DeleteVirtualNetworkSecurityLoggingObjectRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualNetworkTagRef(ctx context.Context, request *CreateVirtualNetworkTagRefRequest) (*CreateVirtualNetworkTagRefResponse, error) {
	return w.WriteService.CreateVirtualNetworkTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualNetworkTagRef(ctx context.Context, request *DeleteVirtualNetworkTagRefRequest) (*DeleteVirtualNetworkTagRefResponse, error) {
	return w.WriteService.DeleteVirtualNetworkTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualNetworkIntentMapRef(ctx context.Context, request *CreateVirtualNetworkIntentMapRefRequest) (*CreateVirtualNetworkIntentMapRefResponse, error) {
	return w.WriteService.CreateVirtualNetworkIntentMapRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualNetworkIntentMapRef(ctx context.Context, request *DeleteVirtualNetworkIntentMapRefRequest) (*DeleteVirtualNetworkIntentMapRefResponse, error) {
	return w.WriteService.DeleteVirtualNetworkIntentMapRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualNetworkBGPVPNRef(ctx context.Context, request *CreateVirtualNetworkBGPVPNRefRequest) (*CreateVirtualNetworkBGPVPNRefResponse, error) {
	return w.WriteService.CreateVirtualNetworkBGPVPNRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualNetworkBGPVPNRef(ctx context.Context, request *DeleteVirtualNetworkBGPVPNRefRequest) (*DeleteVirtualNetworkBGPVPNRefResponse, error) {
	return w.WriteService.DeleteVirtualNetworkBGPVPNRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualNetworkRoutingPolicyRef(ctx context.Context, request *CreateVirtualNetworkRoutingPolicyRefRequest) (*CreateVirtualNetworkRoutingPolicyRefResponse, error) {
	return w.WriteService.CreateVirtualNetworkRoutingPolicyRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualNetworkRoutingPolicyRef(ctx context.Context, request *DeleteVirtualNetworkRoutingPolicyRefRequest) (*DeleteVirtualNetworkRoutingPolicyRefResponse, error) {
	return w.WriteService.DeleteVirtualNetworkRoutingPolicyRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualNetworkNetworkPolicyRef(ctx context.Context, request *CreateVirtualNetworkNetworkPolicyRefRequest) (*CreateVirtualNetworkNetworkPolicyRefResponse, error) {
	return w.WriteService.CreateVirtualNetworkNetworkPolicyRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualNetworkNetworkPolicyRef(ctx context.Context, request *DeleteVirtualNetworkNetworkPolicyRefRequest) (*DeleteVirtualNetworkNetworkPolicyRefResponse, error) {
	return w.WriteService.DeleteVirtualNetworkNetworkPolicyRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualNetworkVirtualNetworkRef(ctx context.Context, request *CreateVirtualNetworkVirtualNetworkRefRequest) (*CreateVirtualNetworkVirtualNetworkRefResponse, error) {
	return w.WriteService.CreateVirtualNetworkVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualNetworkVirtualNetworkRef(ctx context.Context, request *DeleteVirtualNetworkVirtualNetworkRefRequest) (*DeleteVirtualNetworkVirtualNetworkRefResponse, error) {
	return w.WriteService.DeleteVirtualNetworkVirtualNetworkRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualPortGroup(ctx context.Context, request *CreateVirtualPortGroupRequest) (*CreateVirtualPortGroupResponse, error) {
	return w.WriteService.CreateVirtualPortGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateVirtualPortGroup(ctx context.Context, request *UpdateVirtualPortGroupRequest) (*UpdateVirtualPortGroupResponse, error) {
	return w.WriteService.UpdateVirtualPortGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualPortGroup(ctx context.Context, request *DeleteVirtualPortGroupRequest) (*DeleteVirtualPortGroupResponse, error) {
	return w.WriteService.DeleteVirtualPortGroup(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualPortGroupVirtualMachineInterfaceRef(ctx context.Context, request *CreateVirtualPortGroupVirtualMachineInterfaceRefRequest) (*CreateVirtualPortGroupVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.CreateVirtualPortGroupVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualPortGroupVirtualMachineInterfaceRef(ctx context.Context, request *DeleteVirtualPortGroupVirtualMachineInterfaceRefRequest) (*DeleteVirtualPortGroupVirtualMachineInterfaceRefResponse, error) {
	return w.WriteService.DeleteVirtualPortGroupVirtualMachineInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualPortGroupTagRef(ctx context.Context, request *CreateVirtualPortGroupTagRefRequest) (*CreateVirtualPortGroupTagRefResponse, error) {
	return w.WriteService.CreateVirtualPortGroupTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualPortGroupTagRef(ctx context.Context, request *DeleteVirtualPortGroupTagRefRequest) (*DeleteVirtualPortGroupTagRefResponse, error) {
	return w.WriteService.DeleteVirtualPortGroupTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualPortGroupPhysicalInterfaceRef(ctx context.Context, request *CreateVirtualPortGroupPhysicalInterfaceRefRequest) (*CreateVirtualPortGroupPhysicalInterfaceRefResponse, error) {
	return w.WriteService.CreateVirtualPortGroupPhysicalInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualPortGroupPhysicalInterfaceRef(ctx context.Context, request *DeleteVirtualPortGroupPhysicalInterfaceRefRequest) (*DeleteVirtualPortGroupPhysicalInterfaceRefResponse, error) {
	return w.WriteService.DeleteVirtualPortGroupPhysicalInterfaceRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualPortGroupPortProfileRef(ctx context.Context, request *CreateVirtualPortGroupPortProfileRefRequest) (*CreateVirtualPortGroupPortProfileRefResponse, error) {
	return w.WriteService.CreateVirtualPortGroupPortProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualPortGroupPortProfileRef(ctx context.Context, request *DeleteVirtualPortGroupPortProfileRefRequest) (*DeleteVirtualPortGroupPortProfileRefResponse, error) {
	return w.WriteService.DeleteVirtualPortGroupPortProfileRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualPortGroupSecurityGroupRef(ctx context.Context, request *CreateVirtualPortGroupSecurityGroupRefRequest) (*CreateVirtualPortGroupSecurityGroupRefResponse, error) {
	return w.WriteService.CreateVirtualPortGroupSecurityGroupRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualPortGroupSecurityGroupRef(ctx context.Context, request *DeleteVirtualPortGroupSecurityGroupRefRequest) (*DeleteVirtualPortGroupSecurityGroupRefResponse, error) {
	return w.WriteService.DeleteVirtualPortGroupSecurityGroupRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualRouter(ctx context.Context, request *CreateVirtualRouterRequest) (*CreateVirtualRouterResponse, error) {
	return w.WriteService.CreateVirtualRouter(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateVirtualRouter(ctx context.Context, request *UpdateVirtualRouterRequest) (*UpdateVirtualRouterResponse, error) {
	return w.WriteService.UpdateVirtualRouter(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualRouter(ctx context.Context, request *DeleteVirtualRouterRequest) (*DeleteVirtualRouterResponse, error) {
	return w.WriteService.DeleteVirtualRouter(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualRouterSubClusterRef(ctx context.Context, request *CreateVirtualRouterSubClusterRefRequest) (*CreateVirtualRouterSubClusterRefResponse, error) {
	return w.WriteService.CreateVirtualRouterSubClusterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualRouterSubClusterRef(ctx context.Context, request *DeleteVirtualRouterSubClusterRefRequest) (*DeleteVirtualRouterSubClusterRefResponse, error) {
	return w.WriteService.DeleteVirtualRouterSubClusterRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualRouterVirtualMachineRef(ctx context.Context, request *CreateVirtualRouterVirtualMachineRefRequest) (*CreateVirtualRouterVirtualMachineRefResponse, error) {
	return w.WriteService.CreateVirtualRouterVirtualMachineRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualRouterVirtualMachineRef(ctx context.Context, request *DeleteVirtualRouterVirtualMachineRefRequest) (*DeleteVirtualRouterVirtualMachineRefResponse, error) {
	return w.WriteService.DeleteVirtualRouterVirtualMachineRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualRouterTagRef(ctx context.Context, request *CreateVirtualRouterTagRefRequest) (*CreateVirtualRouterTagRefResponse, error) {
	return w.WriteService.CreateVirtualRouterTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualRouterTagRef(ctx context.Context, request *DeleteVirtualRouterTagRefRequest) (*DeleteVirtualRouterTagRefResponse, error) {
	return w.WriteService.DeleteVirtualRouterTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateVirtualRouterNetworkIpamRef(ctx context.Context, request *CreateVirtualRouterNetworkIpamRefRequest) (*CreateVirtualRouterNetworkIpamRefResponse, error) {
	return w.WriteService.CreateVirtualRouterNetworkIpamRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteVirtualRouterNetworkIpamRef(ctx context.Context, request *DeleteVirtualRouterNetworkIpamRefRequest) (*DeleteVirtualRouterNetworkIpamRefResponse, error) {
	return w.WriteService.DeleteVirtualRouterNetworkIpamRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateWebuiNode(ctx context.Context, request *CreateWebuiNodeRequest) (*CreateWebuiNodeResponse, error) {
	return w.WriteService.CreateWebuiNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) UpdateWebuiNode(ctx context.Context, request *UpdateWebuiNodeRequest) (*UpdateWebuiNodeResponse, error) {
	return w.WriteService.UpdateWebuiNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteWebuiNode(ctx context.Context, request *DeleteWebuiNodeRequest) (*DeleteWebuiNodeResponse, error) {
	return w.WriteService.DeleteWebuiNode(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) CreateWebuiNodeTagRef(ctx context.Context, request *CreateWebuiNodeTagRefRequest) (*CreateWebuiNodeTagRefResponse, error) {
	return w.WriteService.CreateWebuiNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

func (w *InternalContextWriteServiceWrapper) DeleteWebuiNodeTagRef(ctx context.Context, request *DeleteWebuiNodeTagRefRequest) (*DeleteWebuiNodeTagRefResponse, error) {
	return w.WriteService.DeleteWebuiNodeTagRef(baseservices.WithInternalRequest(ctx), request)
}

type AccessControlList = models.AccessControlList

func (s *BaseService) CreateAccessControlList(ctx context.Context, request *CreateAccessControlListRequest) (*CreateAccessControlListResponse, error) {
	if s.next == nil {
		return &CreateAccessControlListResponse{
			AccessControlList: request.GetAccessControlList(),
		}, nil
	}
	return s.Next().CreateAccessControlList(ctx, request)
}
func (s *BaseService) UpdateAccessControlList(ctx context.Context, request *UpdateAccessControlListRequest) (*UpdateAccessControlListResponse, error) {
	if s.next == nil {
		return &UpdateAccessControlListResponse{
			AccessControlList: request.GetAccessControlList(),
		}, nil
	}
	return s.Next().UpdateAccessControlList(ctx, request)
}
func (s *BaseService) DeleteAccessControlList(ctx context.Context, request *DeleteAccessControlListRequest) (*DeleteAccessControlListResponse, error) {
	if s.next == nil {
		return &DeleteAccessControlListResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteAccessControlList(ctx, request)
}
func (s *BaseService) GetAccessControlList(ctx context.Context, request *GetAccessControlListRequest) (*GetAccessControlListResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetAccessControlList(ctx, request)
}
func (s *BaseService) ListAccessControlList(ctx context.Context, request *ListAccessControlListRequest) (*ListAccessControlListResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListAccessControlList(ctx, request)
}

func (s *BaseService) CreateAccessControlListTagRef(ctx context.Context, request *CreateAccessControlListTagRefRequest) (*CreateAccessControlListTagRefResponse, error) {
	if s.next == nil {
		return &CreateAccessControlListTagRefResponse{
			ID:                      request.ID,
			AccessControlListTagRef: request.GetAccessControlListTagRef(),
		}, nil
	}
	return s.Next().CreateAccessControlListTagRef(ctx, request)
}

func (s *BaseService) DeleteAccessControlListTagRef(ctx context.Context, request *DeleteAccessControlListTagRefRequest) (*DeleteAccessControlListTagRefResponse, error) {
	if s.next == nil {
		return &DeleteAccessControlListTagRefResponse{
			ID:                      request.ID,
			AccessControlListTagRef: request.GetAccessControlListTagRef(),
		}, nil
	}
	return s.Next().DeleteAccessControlListTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateAccessControlListTagRef(ctx context.Context, request *CreateAccessControlListTagRefRequest) (*CreateAccessControlListTagRefResponse, error) {
	refField := models.AccessControlListFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAccessControlList(ctx, &GetAccessControlListRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AccessControlList
		obj.AddTagRef(request.AccessControlListTagRef)

		_, err = s.BaseService.UpdateAccessControlList(ctx, &UpdateAccessControlListRequest{
			AccessControlList: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateAccessControlListTagRefResponse{
		ID:                      request.ID,
		AccessControlListTagRef: request.GetAccessControlListTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteAccessControlListTagRef(ctx context.Context, request *DeleteAccessControlListTagRefRequest) (*DeleteAccessControlListTagRefResponse, error) {
	refField := models.AccessControlListFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAccessControlList(ctx, &GetAccessControlListRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AccessControlList
		obj.RemoveTagRef(request.AccessControlListTagRef)

		_, err = s.BaseService.UpdateAccessControlList(ctx, &UpdateAccessControlListRequest{
			AccessControlList: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteAccessControlListTagRefResponse{
		ID:                      request.ID,
		AccessControlListTagRef: request.GetAccessControlListTagRef(),
	}, nil
}

func (s *EventProducerService) CreateAccessControlList(ctx context.Context, request *CreateAccessControlListRequest) (*CreateAccessControlListResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateAccessControlListRequest{
				CreateAccessControlListRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAccessControlList(ctx, request)
}
func (s *EventProducerService) UpdateAccessControlList(ctx context.Context, request *UpdateAccessControlListRequest) (*UpdateAccessControlListResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateAccessControlListRequest{
				UpdateAccessControlListRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateAccessControlList(ctx, request)
}
func (s *EventProducerService) DeleteAccessControlList(ctx context.Context, request *DeleteAccessControlListRequest) (*DeleteAccessControlListResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteAccessControlListRequest{
				DeleteAccessControlListRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAccessControlList(ctx, request)
}

func (s *EventProducerService) CreateAccessControlListTagRef(ctx context.Context, request *CreateAccessControlListTagRefRequest) (*CreateAccessControlListTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateAccessControlListTagRefRequest{
			CreateAccessControlListTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAccessControlListTagRef(ctx, request)
}

func (s *EventProducerService) DeleteAccessControlListTagRef(ctx context.Context, request *DeleteAccessControlListTagRefRequest) (*DeleteAccessControlListTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteAccessControlListTagRefRequest{
			DeleteAccessControlListTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAccessControlListTagRef(ctx, request)
}

func (e *Event_CreateAccessControlListRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAccessControlListRequest
	model := request.AccessControlList
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetAccessControlList(ctx,
			&GetAccessControlListRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateAccessControlList(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateAccessControlListRequest{
			CreateAccessControlListRequest: &CreateAccessControlListRequest{
				AccessControlList: response.GetAccessControlList(),
			},
		},
	}, nil
}

func (e *Event_CreateAccessControlListRequest) ToUpdateEvent() *Event {
	request := e.CreateAccessControlListRequest
	model := request.AccessControlList
	return &Event{
		Request: &Event_UpdateAccessControlListRequest{
			UpdateAccessControlListRequest: &UpdateAccessControlListRequest{
				AccessControlList: model,
				FieldMask:         request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateAccessControlListRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateAccessControlListRequest
	response, err := service.UpdateAccessControlList(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateAccessControlListRequest{
			UpdateAccessControlListRequest: &UpdateAccessControlListRequest{
				AccessControlList: response.GetAccessControlList(),
			},
		},
	}, nil
}

func (e *Event_UpdateAccessControlListRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteAccessControlListRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAccessControlListRequest
	_, err := service.DeleteAccessControlList(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteAccessControlListRequest{
			DeleteAccessControlListRequest: &DeleteAccessControlListRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateAccessControlListTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAccessControlListTagRefRequest
	if _, err := service.CreateAccessControlListTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateAccessControlListTagRefRequest{
		CreateAccessControlListTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteAccessControlListTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAccessControlListTagRefRequest
	if _, err := service.DeleteAccessControlListTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteAccessControlListTagRefRequest{
		DeleteAccessControlListTagRefRequest: request,
	}}, nil
}

type AddressGroup = models.AddressGroup

func (s *BaseService) CreateAddressGroup(ctx context.Context, request *CreateAddressGroupRequest) (*CreateAddressGroupResponse, error) {
	if s.next == nil {
		return &CreateAddressGroupResponse{
			AddressGroup: request.GetAddressGroup(),
		}, nil
	}
	return s.Next().CreateAddressGroup(ctx, request)
}
func (s *BaseService) UpdateAddressGroup(ctx context.Context, request *UpdateAddressGroupRequest) (*UpdateAddressGroupResponse, error) {
	if s.next == nil {
		return &UpdateAddressGroupResponse{
			AddressGroup: request.GetAddressGroup(),
		}, nil
	}
	return s.Next().UpdateAddressGroup(ctx, request)
}
func (s *BaseService) DeleteAddressGroup(ctx context.Context, request *DeleteAddressGroupRequest) (*DeleteAddressGroupResponse, error) {
	if s.next == nil {
		return &DeleteAddressGroupResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteAddressGroup(ctx, request)
}
func (s *BaseService) GetAddressGroup(ctx context.Context, request *GetAddressGroupRequest) (*GetAddressGroupResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetAddressGroup(ctx, request)
}
func (s *BaseService) ListAddressGroup(ctx context.Context, request *ListAddressGroupRequest) (*ListAddressGroupResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListAddressGroup(ctx, request)
}

func (s *BaseService) CreateAddressGroupTagRef(ctx context.Context, request *CreateAddressGroupTagRefRequest) (*CreateAddressGroupTagRefResponse, error) {
	if s.next == nil {
		return &CreateAddressGroupTagRefResponse{
			ID:                 request.ID,
			AddressGroupTagRef: request.GetAddressGroupTagRef(),
		}, nil
	}
	return s.Next().CreateAddressGroupTagRef(ctx, request)
}

func (s *BaseService) DeleteAddressGroupTagRef(ctx context.Context, request *DeleteAddressGroupTagRefRequest) (*DeleteAddressGroupTagRefResponse, error) {
	if s.next == nil {
		return &DeleteAddressGroupTagRefResponse{
			ID:                 request.ID,
			AddressGroupTagRef: request.GetAddressGroupTagRef(),
		}, nil
	}
	return s.Next().DeleteAddressGroupTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateAddressGroupTagRef(ctx context.Context, request *CreateAddressGroupTagRefRequest) (*CreateAddressGroupTagRefResponse, error) {
	refField := models.AddressGroupFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAddressGroup(ctx, &GetAddressGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AddressGroup
		obj.AddTagRef(request.AddressGroupTagRef)

		_, err = s.BaseService.UpdateAddressGroup(ctx, &UpdateAddressGroupRequest{
			AddressGroup: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateAddressGroupTagRefResponse{
		ID:                 request.ID,
		AddressGroupTagRef: request.GetAddressGroupTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteAddressGroupTagRef(ctx context.Context, request *DeleteAddressGroupTagRefRequest) (*DeleteAddressGroupTagRefResponse, error) {
	refField := models.AddressGroupFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAddressGroup(ctx, &GetAddressGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AddressGroup
		obj.RemoveTagRef(request.AddressGroupTagRef)

		_, err = s.BaseService.UpdateAddressGroup(ctx, &UpdateAddressGroupRequest{
			AddressGroup: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteAddressGroupTagRefResponse{
		ID:                 request.ID,
		AddressGroupTagRef: request.GetAddressGroupTagRef(),
	}, nil
}

func (s *EventProducerService) CreateAddressGroup(ctx context.Context, request *CreateAddressGroupRequest) (*CreateAddressGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateAddressGroupRequest{
				CreateAddressGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAddressGroup(ctx, request)
}
func (s *EventProducerService) UpdateAddressGroup(ctx context.Context, request *UpdateAddressGroupRequest) (*UpdateAddressGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateAddressGroupRequest{
				UpdateAddressGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateAddressGroup(ctx, request)
}
func (s *EventProducerService) DeleteAddressGroup(ctx context.Context, request *DeleteAddressGroupRequest) (*DeleteAddressGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteAddressGroupRequest{
				DeleteAddressGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAddressGroup(ctx, request)
}

func (s *EventProducerService) CreateAddressGroupTagRef(ctx context.Context, request *CreateAddressGroupTagRefRequest) (*CreateAddressGroupTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateAddressGroupTagRefRequest{
			CreateAddressGroupTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAddressGroupTagRef(ctx, request)
}

func (s *EventProducerService) DeleteAddressGroupTagRef(ctx context.Context, request *DeleteAddressGroupTagRefRequest) (*DeleteAddressGroupTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteAddressGroupTagRefRequest{
			DeleteAddressGroupTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAddressGroupTagRef(ctx, request)
}

func (e *Event_CreateAddressGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAddressGroupRequest
	model := request.AddressGroup
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetAddressGroup(ctx,
			&GetAddressGroupRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateAddressGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateAddressGroupRequest{
			CreateAddressGroupRequest: &CreateAddressGroupRequest{
				AddressGroup: response.GetAddressGroup(),
			},
		},
	}, nil
}

func (e *Event_CreateAddressGroupRequest) ToUpdateEvent() *Event {
	request := e.CreateAddressGroupRequest
	model := request.AddressGroup
	return &Event{
		Request: &Event_UpdateAddressGroupRequest{
			UpdateAddressGroupRequest: &UpdateAddressGroupRequest{
				AddressGroup: model,
				FieldMask:    request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateAddressGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateAddressGroupRequest
	response, err := service.UpdateAddressGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateAddressGroupRequest{
			UpdateAddressGroupRequest: &UpdateAddressGroupRequest{
				AddressGroup: response.GetAddressGroup(),
			},
		},
	}, nil
}

func (e *Event_UpdateAddressGroupRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteAddressGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAddressGroupRequest
	_, err := service.DeleteAddressGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteAddressGroupRequest{
			DeleteAddressGroupRequest: &DeleteAddressGroupRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateAddressGroupTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAddressGroupTagRefRequest
	if _, err := service.CreateAddressGroupTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateAddressGroupTagRefRequest{
		CreateAddressGroupTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteAddressGroupTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAddressGroupTagRefRequest
	if _, err := service.DeleteAddressGroupTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteAddressGroupTagRefRequest{
		DeleteAddressGroupTagRefRequest: request,
	}}, nil
}

type Alarm = models.Alarm

func (s *BaseService) CreateAlarm(ctx context.Context, request *CreateAlarmRequest) (*CreateAlarmResponse, error) {
	if s.next == nil {
		return &CreateAlarmResponse{
			Alarm: request.GetAlarm(),
		}, nil
	}
	return s.Next().CreateAlarm(ctx, request)
}
func (s *BaseService) UpdateAlarm(ctx context.Context, request *UpdateAlarmRequest) (*UpdateAlarmResponse, error) {
	if s.next == nil {
		return &UpdateAlarmResponse{
			Alarm: request.GetAlarm(),
		}, nil
	}
	return s.Next().UpdateAlarm(ctx, request)
}
func (s *BaseService) DeleteAlarm(ctx context.Context, request *DeleteAlarmRequest) (*DeleteAlarmResponse, error) {
	if s.next == nil {
		return &DeleteAlarmResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteAlarm(ctx, request)
}
func (s *BaseService) GetAlarm(ctx context.Context, request *GetAlarmRequest) (*GetAlarmResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetAlarm(ctx, request)
}
func (s *BaseService) ListAlarm(ctx context.Context, request *ListAlarmRequest) (*ListAlarmResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListAlarm(ctx, request)
}

func (s *BaseService) CreateAlarmTagRef(ctx context.Context, request *CreateAlarmTagRefRequest) (*CreateAlarmTagRefResponse, error) {
	if s.next == nil {
		return &CreateAlarmTagRefResponse{
			ID:          request.ID,
			AlarmTagRef: request.GetAlarmTagRef(),
		}, nil
	}
	return s.Next().CreateAlarmTagRef(ctx, request)
}

func (s *BaseService) DeleteAlarmTagRef(ctx context.Context, request *DeleteAlarmTagRefRequest) (*DeleteAlarmTagRefResponse, error) {
	if s.next == nil {
		return &DeleteAlarmTagRefResponse{
			ID:          request.ID,
			AlarmTagRef: request.GetAlarmTagRef(),
		}, nil
	}
	return s.Next().DeleteAlarmTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateAlarmTagRef(ctx context.Context, request *CreateAlarmTagRefRequest) (*CreateAlarmTagRefResponse, error) {
	refField := models.AlarmFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAlarm(ctx, &GetAlarmRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Alarm
		obj.AddTagRef(request.AlarmTagRef)

		_, err = s.BaseService.UpdateAlarm(ctx, &UpdateAlarmRequest{
			Alarm:     obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateAlarmTagRefResponse{
		ID:          request.ID,
		AlarmTagRef: request.GetAlarmTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteAlarmTagRef(ctx context.Context, request *DeleteAlarmTagRefRequest) (*DeleteAlarmTagRefResponse, error) {
	refField := models.AlarmFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAlarm(ctx, &GetAlarmRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Alarm
		obj.RemoveTagRef(request.AlarmTagRef)

		_, err = s.BaseService.UpdateAlarm(ctx, &UpdateAlarmRequest{
			Alarm:     obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteAlarmTagRefResponse{
		ID:          request.ID,
		AlarmTagRef: request.GetAlarmTagRef(),
	}, nil
}

func (s *EventProducerService) CreateAlarm(ctx context.Context, request *CreateAlarmRequest) (*CreateAlarmResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateAlarmRequest{
				CreateAlarmRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAlarm(ctx, request)
}
func (s *EventProducerService) UpdateAlarm(ctx context.Context, request *UpdateAlarmRequest) (*UpdateAlarmResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateAlarmRequest{
				UpdateAlarmRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateAlarm(ctx, request)
}
func (s *EventProducerService) DeleteAlarm(ctx context.Context, request *DeleteAlarmRequest) (*DeleteAlarmResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteAlarmRequest{
				DeleteAlarmRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAlarm(ctx, request)
}

func (s *EventProducerService) CreateAlarmTagRef(ctx context.Context, request *CreateAlarmTagRefRequest) (*CreateAlarmTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateAlarmTagRefRequest{
			CreateAlarmTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAlarmTagRef(ctx, request)
}

func (s *EventProducerService) DeleteAlarmTagRef(ctx context.Context, request *DeleteAlarmTagRefRequest) (*DeleteAlarmTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteAlarmTagRefRequest{
			DeleteAlarmTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAlarmTagRef(ctx, request)
}

func (e *Event_CreateAlarmRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAlarmRequest
	model := request.Alarm
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetAlarm(ctx,
			&GetAlarmRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateAlarm(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateAlarmRequest{
			CreateAlarmRequest: &CreateAlarmRequest{
				Alarm: response.GetAlarm(),
			},
		},
	}, nil
}

func (e *Event_CreateAlarmRequest) ToUpdateEvent() *Event {
	request := e.CreateAlarmRequest
	model := request.Alarm
	return &Event{
		Request: &Event_UpdateAlarmRequest{
			UpdateAlarmRequest: &UpdateAlarmRequest{
				Alarm:     model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateAlarmRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateAlarmRequest
	response, err := service.UpdateAlarm(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateAlarmRequest{
			UpdateAlarmRequest: &UpdateAlarmRequest{
				Alarm: response.GetAlarm(),
			},
		},
	}, nil
}

func (e *Event_UpdateAlarmRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteAlarmRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAlarmRequest
	_, err := service.DeleteAlarm(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteAlarmRequest{
			DeleteAlarmRequest: &DeleteAlarmRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateAlarmTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAlarmTagRefRequest
	if _, err := service.CreateAlarmTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateAlarmTagRefRequest{
		CreateAlarmTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteAlarmTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAlarmTagRefRequest
	if _, err := service.DeleteAlarmTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteAlarmTagRefRequest{
		DeleteAlarmTagRefRequest: request,
	}}, nil
}

type AliasIPPool = models.AliasIPPool

func (s *BaseService) CreateAliasIPPool(ctx context.Context, request *CreateAliasIPPoolRequest) (*CreateAliasIPPoolResponse, error) {
	if s.next == nil {
		return &CreateAliasIPPoolResponse{
			AliasIPPool: request.GetAliasIPPool(),
		}, nil
	}
	return s.Next().CreateAliasIPPool(ctx, request)
}
func (s *BaseService) UpdateAliasIPPool(ctx context.Context, request *UpdateAliasIPPoolRequest) (*UpdateAliasIPPoolResponse, error) {
	if s.next == nil {
		return &UpdateAliasIPPoolResponse{
			AliasIPPool: request.GetAliasIPPool(),
		}, nil
	}
	return s.Next().UpdateAliasIPPool(ctx, request)
}
func (s *BaseService) DeleteAliasIPPool(ctx context.Context, request *DeleteAliasIPPoolRequest) (*DeleteAliasIPPoolResponse, error) {
	if s.next == nil {
		return &DeleteAliasIPPoolResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteAliasIPPool(ctx, request)
}
func (s *BaseService) GetAliasIPPool(ctx context.Context, request *GetAliasIPPoolRequest) (*GetAliasIPPoolResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetAliasIPPool(ctx, request)
}
func (s *BaseService) ListAliasIPPool(ctx context.Context, request *ListAliasIPPoolRequest) (*ListAliasIPPoolResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListAliasIPPool(ctx, request)
}

func (s *BaseService) CreateAliasIPPoolTagRef(ctx context.Context, request *CreateAliasIPPoolTagRefRequest) (*CreateAliasIPPoolTagRefResponse, error) {
	if s.next == nil {
		return &CreateAliasIPPoolTagRefResponse{
			ID:                request.ID,
			AliasIPPoolTagRef: request.GetAliasIPPoolTagRef(),
		}, nil
	}
	return s.Next().CreateAliasIPPoolTagRef(ctx, request)
}

func (s *BaseService) DeleteAliasIPPoolTagRef(ctx context.Context, request *DeleteAliasIPPoolTagRefRequest) (*DeleteAliasIPPoolTagRefResponse, error) {
	if s.next == nil {
		return &DeleteAliasIPPoolTagRefResponse{
			ID:                request.ID,
			AliasIPPoolTagRef: request.GetAliasIPPoolTagRef(),
		}, nil
	}
	return s.Next().DeleteAliasIPPoolTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateAliasIPPoolTagRef(ctx context.Context, request *CreateAliasIPPoolTagRefRequest) (*CreateAliasIPPoolTagRefResponse, error) {
	refField := models.AliasIPPoolFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAliasIPPool(ctx, &GetAliasIPPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AliasIPPool
		obj.AddTagRef(request.AliasIPPoolTagRef)

		_, err = s.BaseService.UpdateAliasIPPool(ctx, &UpdateAliasIPPoolRequest{
			AliasIPPool: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateAliasIPPoolTagRefResponse{
		ID:                request.ID,
		AliasIPPoolTagRef: request.GetAliasIPPoolTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteAliasIPPoolTagRef(ctx context.Context, request *DeleteAliasIPPoolTagRefRequest) (*DeleteAliasIPPoolTagRefResponse, error) {
	refField := models.AliasIPPoolFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAliasIPPool(ctx, &GetAliasIPPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AliasIPPool
		obj.RemoveTagRef(request.AliasIPPoolTagRef)

		_, err = s.BaseService.UpdateAliasIPPool(ctx, &UpdateAliasIPPoolRequest{
			AliasIPPool: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteAliasIPPoolTagRefResponse{
		ID:                request.ID,
		AliasIPPoolTagRef: request.GetAliasIPPoolTagRef(),
	}, nil
}

func (s *EventProducerService) CreateAliasIPPool(ctx context.Context, request *CreateAliasIPPoolRequest) (*CreateAliasIPPoolResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateAliasIPPoolRequest{
				CreateAliasIPPoolRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAliasIPPool(ctx, request)
}
func (s *EventProducerService) UpdateAliasIPPool(ctx context.Context, request *UpdateAliasIPPoolRequest) (*UpdateAliasIPPoolResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateAliasIPPoolRequest{
				UpdateAliasIPPoolRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateAliasIPPool(ctx, request)
}
func (s *EventProducerService) DeleteAliasIPPool(ctx context.Context, request *DeleteAliasIPPoolRequest) (*DeleteAliasIPPoolResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteAliasIPPoolRequest{
				DeleteAliasIPPoolRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAliasIPPool(ctx, request)
}

func (s *EventProducerService) CreateAliasIPPoolTagRef(ctx context.Context, request *CreateAliasIPPoolTagRefRequest) (*CreateAliasIPPoolTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateAliasIPPoolTagRefRequest{
			CreateAliasIPPoolTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAliasIPPoolTagRef(ctx, request)
}

func (s *EventProducerService) DeleteAliasIPPoolTagRef(ctx context.Context, request *DeleteAliasIPPoolTagRefRequest) (*DeleteAliasIPPoolTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteAliasIPPoolTagRefRequest{
			DeleteAliasIPPoolTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAliasIPPoolTagRef(ctx, request)
}

func (e *Event_CreateAliasIPPoolRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAliasIPPoolRequest
	model := request.AliasIPPool
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetAliasIPPool(ctx,
			&GetAliasIPPoolRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateAliasIPPool(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateAliasIPPoolRequest{
			CreateAliasIPPoolRequest: &CreateAliasIPPoolRequest{
				AliasIPPool: response.GetAliasIPPool(),
			},
		},
	}, nil
}

func (e *Event_CreateAliasIPPoolRequest) ToUpdateEvent() *Event {
	request := e.CreateAliasIPPoolRequest
	model := request.AliasIPPool
	return &Event{
		Request: &Event_UpdateAliasIPPoolRequest{
			UpdateAliasIPPoolRequest: &UpdateAliasIPPoolRequest{
				AliasIPPool: model,
				FieldMask:   request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateAliasIPPoolRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateAliasIPPoolRequest
	response, err := service.UpdateAliasIPPool(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateAliasIPPoolRequest{
			UpdateAliasIPPoolRequest: &UpdateAliasIPPoolRequest{
				AliasIPPool: response.GetAliasIPPool(),
			},
		},
	}, nil
}

func (e *Event_UpdateAliasIPPoolRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteAliasIPPoolRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAliasIPPoolRequest
	_, err := service.DeleteAliasIPPool(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteAliasIPPoolRequest{
			DeleteAliasIPPoolRequest: &DeleteAliasIPPoolRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateAliasIPPoolTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAliasIPPoolTagRefRequest
	if _, err := service.CreateAliasIPPoolTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateAliasIPPoolTagRefRequest{
		CreateAliasIPPoolTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteAliasIPPoolTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAliasIPPoolTagRefRequest
	if _, err := service.DeleteAliasIPPoolTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteAliasIPPoolTagRefRequest{
		DeleteAliasIPPoolTagRefRequest: request,
	}}, nil
}

type AliasIP = models.AliasIP

func (s *BaseService) CreateAliasIP(ctx context.Context, request *CreateAliasIPRequest) (*CreateAliasIPResponse, error) {
	if s.next == nil {
		return &CreateAliasIPResponse{
			AliasIP: request.GetAliasIP(),
		}, nil
	}
	return s.Next().CreateAliasIP(ctx, request)
}
func (s *BaseService) UpdateAliasIP(ctx context.Context, request *UpdateAliasIPRequest) (*UpdateAliasIPResponse, error) {
	if s.next == nil {
		return &UpdateAliasIPResponse{
			AliasIP: request.GetAliasIP(),
		}, nil
	}
	return s.Next().UpdateAliasIP(ctx, request)
}
func (s *BaseService) DeleteAliasIP(ctx context.Context, request *DeleteAliasIPRequest) (*DeleteAliasIPResponse, error) {
	if s.next == nil {
		return &DeleteAliasIPResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteAliasIP(ctx, request)
}
func (s *BaseService) GetAliasIP(ctx context.Context, request *GetAliasIPRequest) (*GetAliasIPResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetAliasIP(ctx, request)
}
func (s *BaseService) ListAliasIP(ctx context.Context, request *ListAliasIPRequest) (*ListAliasIPResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListAliasIP(ctx, request)
}

func (s *BaseService) CreateAliasIPProjectRef(ctx context.Context, request *CreateAliasIPProjectRefRequest) (*CreateAliasIPProjectRefResponse, error) {
	if s.next == nil {
		return &CreateAliasIPProjectRefResponse{
			ID:                request.ID,
			AliasIPProjectRef: request.GetAliasIPProjectRef(),
		}, nil
	}
	return s.Next().CreateAliasIPProjectRef(ctx, request)
}

func (s *BaseService) DeleteAliasIPProjectRef(ctx context.Context, request *DeleteAliasIPProjectRefRequest) (*DeleteAliasIPProjectRefResponse, error) {
	if s.next == nil {
		return &DeleteAliasIPProjectRefResponse{
			ID:                request.ID,
			AliasIPProjectRef: request.GetAliasIPProjectRef(),
		}, nil
	}
	return s.Next().DeleteAliasIPProjectRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateAliasIPProjectRef(ctx context.Context, request *CreateAliasIPProjectRefRequest) (*CreateAliasIPProjectRefResponse, error) {
	refField := models.AliasIPFieldProjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAliasIP(ctx, &GetAliasIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AliasIP
		obj.AddProjectRef(request.AliasIPProjectRef)

		_, err = s.BaseService.UpdateAliasIP(ctx, &UpdateAliasIPRequest{
			AliasIP:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateAliasIPProjectRefResponse{
		ID:                request.ID,
		AliasIPProjectRef: request.GetAliasIPProjectRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteAliasIPProjectRef(ctx context.Context, request *DeleteAliasIPProjectRefRequest) (*DeleteAliasIPProjectRefResponse, error) {
	refField := models.AliasIPFieldProjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAliasIP(ctx, &GetAliasIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AliasIP
		obj.RemoveProjectRef(request.AliasIPProjectRef)

		_, err = s.BaseService.UpdateAliasIP(ctx, &UpdateAliasIPRequest{
			AliasIP:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteAliasIPProjectRefResponse{
		ID:                request.ID,
		AliasIPProjectRef: request.GetAliasIPProjectRef(),
	}, nil
}

func (s *BaseService) CreateAliasIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateAliasIPVirtualMachineInterfaceRefRequest) (*CreateAliasIPVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateAliasIPVirtualMachineInterfaceRefResponse{
			ID:                                request.ID,
			AliasIPVirtualMachineInterfaceRef: request.GetAliasIPVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().CreateAliasIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteAliasIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteAliasIPVirtualMachineInterfaceRefRequest) (*DeleteAliasIPVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteAliasIPVirtualMachineInterfaceRefResponse{
			ID:                                request.ID,
			AliasIPVirtualMachineInterfaceRef: request.GetAliasIPVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteAliasIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateAliasIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateAliasIPVirtualMachineInterfaceRefRequest) (*CreateAliasIPVirtualMachineInterfaceRefResponse, error) {
	refField := models.AliasIPFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAliasIP(ctx, &GetAliasIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AliasIP
		obj.AddVirtualMachineInterfaceRef(request.AliasIPVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateAliasIP(ctx, &UpdateAliasIPRequest{
			AliasIP:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateAliasIPVirtualMachineInterfaceRefResponse{
		ID:                                request.ID,
		AliasIPVirtualMachineInterfaceRef: request.GetAliasIPVirtualMachineInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteAliasIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteAliasIPVirtualMachineInterfaceRefRequest) (*DeleteAliasIPVirtualMachineInterfaceRefResponse, error) {
	refField := models.AliasIPFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAliasIP(ctx, &GetAliasIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AliasIP
		obj.RemoveVirtualMachineInterfaceRef(request.AliasIPVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateAliasIP(ctx, &UpdateAliasIPRequest{
			AliasIP:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteAliasIPVirtualMachineInterfaceRefResponse{
		ID:                                request.ID,
		AliasIPVirtualMachineInterfaceRef: request.GetAliasIPVirtualMachineInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateAliasIPTagRef(ctx context.Context, request *CreateAliasIPTagRefRequest) (*CreateAliasIPTagRefResponse, error) {
	if s.next == nil {
		return &CreateAliasIPTagRefResponse{
			ID:            request.ID,
			AliasIPTagRef: request.GetAliasIPTagRef(),
		}, nil
	}
	return s.Next().CreateAliasIPTagRef(ctx, request)
}

func (s *BaseService) DeleteAliasIPTagRef(ctx context.Context, request *DeleteAliasIPTagRefRequest) (*DeleteAliasIPTagRefResponse, error) {
	if s.next == nil {
		return &DeleteAliasIPTagRefResponse{
			ID:            request.ID,
			AliasIPTagRef: request.GetAliasIPTagRef(),
		}, nil
	}
	return s.Next().DeleteAliasIPTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateAliasIPTagRef(ctx context.Context, request *CreateAliasIPTagRefRequest) (*CreateAliasIPTagRefResponse, error) {
	refField := models.AliasIPFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAliasIP(ctx, &GetAliasIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AliasIP
		obj.AddTagRef(request.AliasIPTagRef)

		_, err = s.BaseService.UpdateAliasIP(ctx, &UpdateAliasIPRequest{
			AliasIP:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateAliasIPTagRefResponse{
		ID:            request.ID,
		AliasIPTagRef: request.GetAliasIPTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteAliasIPTagRef(ctx context.Context, request *DeleteAliasIPTagRefRequest) (*DeleteAliasIPTagRefResponse, error) {
	refField := models.AliasIPFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAliasIP(ctx, &GetAliasIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AliasIP
		obj.RemoveTagRef(request.AliasIPTagRef)

		_, err = s.BaseService.UpdateAliasIP(ctx, &UpdateAliasIPRequest{
			AliasIP:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteAliasIPTagRefResponse{
		ID:            request.ID,
		AliasIPTagRef: request.GetAliasIPTagRef(),
	}, nil
}

func (s *EventProducerService) CreateAliasIP(ctx context.Context, request *CreateAliasIPRequest) (*CreateAliasIPResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateAliasIPRequest{
				CreateAliasIPRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAliasIP(ctx, request)
}
func (s *EventProducerService) UpdateAliasIP(ctx context.Context, request *UpdateAliasIPRequest) (*UpdateAliasIPResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateAliasIPRequest{
				UpdateAliasIPRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateAliasIP(ctx, request)
}
func (s *EventProducerService) DeleteAliasIP(ctx context.Context, request *DeleteAliasIPRequest) (*DeleteAliasIPResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteAliasIPRequest{
				DeleteAliasIPRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAliasIP(ctx, request)
}

func (s *EventProducerService) CreateAliasIPProjectRef(ctx context.Context, request *CreateAliasIPProjectRefRequest) (*CreateAliasIPProjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateAliasIPProjectRefRequest{
			CreateAliasIPProjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAliasIPProjectRef(ctx, request)
}

func (s *EventProducerService) DeleteAliasIPProjectRef(ctx context.Context, request *DeleteAliasIPProjectRefRequest) (*DeleteAliasIPProjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteAliasIPProjectRefRequest{
			DeleteAliasIPProjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAliasIPProjectRef(ctx, request)
}

func (s *EventProducerService) CreateAliasIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateAliasIPVirtualMachineInterfaceRefRequest) (*CreateAliasIPVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateAliasIPVirtualMachineInterfaceRefRequest{
			CreateAliasIPVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAliasIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteAliasIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteAliasIPVirtualMachineInterfaceRefRequest) (*DeleteAliasIPVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteAliasIPVirtualMachineInterfaceRefRequest{
			DeleteAliasIPVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAliasIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateAliasIPTagRef(ctx context.Context, request *CreateAliasIPTagRefRequest) (*CreateAliasIPTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateAliasIPTagRefRequest{
			CreateAliasIPTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAliasIPTagRef(ctx, request)
}

func (s *EventProducerService) DeleteAliasIPTagRef(ctx context.Context, request *DeleteAliasIPTagRefRequest) (*DeleteAliasIPTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteAliasIPTagRefRequest{
			DeleteAliasIPTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAliasIPTagRef(ctx, request)
}

func (e *Event_CreateAliasIPRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAliasIPRequest
	model := request.AliasIP
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetAliasIP(ctx,
			&GetAliasIPRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateAliasIP(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateAliasIPRequest{
			CreateAliasIPRequest: &CreateAliasIPRequest{
				AliasIP: response.GetAliasIP(),
			},
		},
	}, nil
}

func (e *Event_CreateAliasIPRequest) ToUpdateEvent() *Event {
	request := e.CreateAliasIPRequest
	model := request.AliasIP
	return &Event{
		Request: &Event_UpdateAliasIPRequest{
			UpdateAliasIPRequest: &UpdateAliasIPRequest{
				AliasIP:   model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateAliasIPRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateAliasIPRequest
	response, err := service.UpdateAliasIP(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateAliasIPRequest{
			UpdateAliasIPRequest: &UpdateAliasIPRequest{
				AliasIP: response.GetAliasIP(),
			},
		},
	}, nil
}

func (e *Event_UpdateAliasIPRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteAliasIPRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAliasIPRequest
	_, err := service.DeleteAliasIP(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteAliasIPRequest{
			DeleteAliasIPRequest: &DeleteAliasIPRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateAliasIPVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAliasIPVirtualMachineInterfaceRefRequest
	if _, err := service.CreateAliasIPVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateAliasIPVirtualMachineInterfaceRefRequest{
		CreateAliasIPVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteAliasIPVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAliasIPVirtualMachineInterfaceRefRequest
	if _, err := service.DeleteAliasIPVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteAliasIPVirtualMachineInterfaceRefRequest{
		DeleteAliasIPVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateAliasIPTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAliasIPTagRefRequest
	if _, err := service.CreateAliasIPTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateAliasIPTagRefRequest{
		CreateAliasIPTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteAliasIPTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAliasIPTagRefRequest
	if _, err := service.DeleteAliasIPTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteAliasIPTagRefRequest{
		DeleteAliasIPTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateAliasIPProjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAliasIPProjectRefRequest
	if _, err := service.CreateAliasIPProjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateAliasIPProjectRefRequest{
		CreateAliasIPProjectRefRequest: request,
	}}, nil
}

func (e *Event_DeleteAliasIPProjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAliasIPProjectRefRequest
	if _, err := service.DeleteAliasIPProjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteAliasIPProjectRefRequest{
		DeleteAliasIPProjectRefRequest: request,
	}}, nil
}

type AnalyticsAlarmNode = models.AnalyticsAlarmNode

func (s *BaseService) CreateAnalyticsAlarmNode(ctx context.Context, request *CreateAnalyticsAlarmNodeRequest) (*CreateAnalyticsAlarmNodeResponse, error) {
	if s.next == nil {
		return &CreateAnalyticsAlarmNodeResponse{
			AnalyticsAlarmNode: request.GetAnalyticsAlarmNode(),
		}, nil
	}
	return s.Next().CreateAnalyticsAlarmNode(ctx, request)
}
func (s *BaseService) UpdateAnalyticsAlarmNode(ctx context.Context, request *UpdateAnalyticsAlarmNodeRequest) (*UpdateAnalyticsAlarmNodeResponse, error) {
	if s.next == nil {
		return &UpdateAnalyticsAlarmNodeResponse{
			AnalyticsAlarmNode: request.GetAnalyticsAlarmNode(),
		}, nil
	}
	return s.Next().UpdateAnalyticsAlarmNode(ctx, request)
}
func (s *BaseService) DeleteAnalyticsAlarmNode(ctx context.Context, request *DeleteAnalyticsAlarmNodeRequest) (*DeleteAnalyticsAlarmNodeResponse, error) {
	if s.next == nil {
		return &DeleteAnalyticsAlarmNodeResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteAnalyticsAlarmNode(ctx, request)
}
func (s *BaseService) GetAnalyticsAlarmNode(ctx context.Context, request *GetAnalyticsAlarmNodeRequest) (*GetAnalyticsAlarmNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetAnalyticsAlarmNode(ctx, request)
}
func (s *BaseService) ListAnalyticsAlarmNode(ctx context.Context, request *ListAnalyticsAlarmNodeRequest) (*ListAnalyticsAlarmNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListAnalyticsAlarmNode(ctx, request)
}

func (s *BaseService) CreateAnalyticsAlarmNodeTagRef(ctx context.Context, request *CreateAnalyticsAlarmNodeTagRefRequest) (*CreateAnalyticsAlarmNodeTagRefResponse, error) {
	if s.next == nil {
		return &CreateAnalyticsAlarmNodeTagRefResponse{
			ID:                       request.ID,
			AnalyticsAlarmNodeTagRef: request.GetAnalyticsAlarmNodeTagRef(),
		}, nil
	}
	return s.Next().CreateAnalyticsAlarmNodeTagRef(ctx, request)
}

func (s *BaseService) DeleteAnalyticsAlarmNodeTagRef(ctx context.Context, request *DeleteAnalyticsAlarmNodeTagRefRequest) (*DeleteAnalyticsAlarmNodeTagRefResponse, error) {
	if s.next == nil {
		return &DeleteAnalyticsAlarmNodeTagRefResponse{
			ID:                       request.ID,
			AnalyticsAlarmNodeTagRef: request.GetAnalyticsAlarmNodeTagRef(),
		}, nil
	}
	return s.Next().DeleteAnalyticsAlarmNodeTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateAnalyticsAlarmNodeTagRef(ctx context.Context, request *CreateAnalyticsAlarmNodeTagRefRequest) (*CreateAnalyticsAlarmNodeTagRefResponse, error) {
	refField := models.AnalyticsAlarmNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAnalyticsAlarmNode(ctx, &GetAnalyticsAlarmNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AnalyticsAlarmNode
		obj.AddTagRef(request.AnalyticsAlarmNodeTagRef)

		_, err = s.BaseService.UpdateAnalyticsAlarmNode(ctx, &UpdateAnalyticsAlarmNodeRequest{
			AnalyticsAlarmNode: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateAnalyticsAlarmNodeTagRefResponse{
		ID:                       request.ID,
		AnalyticsAlarmNodeTagRef: request.GetAnalyticsAlarmNodeTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteAnalyticsAlarmNodeTagRef(ctx context.Context, request *DeleteAnalyticsAlarmNodeTagRefRequest) (*DeleteAnalyticsAlarmNodeTagRefResponse, error) {
	refField := models.AnalyticsAlarmNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAnalyticsAlarmNode(ctx, &GetAnalyticsAlarmNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AnalyticsAlarmNode
		obj.RemoveTagRef(request.AnalyticsAlarmNodeTagRef)

		_, err = s.BaseService.UpdateAnalyticsAlarmNode(ctx, &UpdateAnalyticsAlarmNodeRequest{
			AnalyticsAlarmNode: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteAnalyticsAlarmNodeTagRefResponse{
		ID:                       request.ID,
		AnalyticsAlarmNodeTagRef: request.GetAnalyticsAlarmNodeTagRef(),
	}, nil
}

func (s *EventProducerService) CreateAnalyticsAlarmNode(ctx context.Context, request *CreateAnalyticsAlarmNodeRequest) (*CreateAnalyticsAlarmNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateAnalyticsAlarmNodeRequest{
				CreateAnalyticsAlarmNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAnalyticsAlarmNode(ctx, request)
}
func (s *EventProducerService) UpdateAnalyticsAlarmNode(ctx context.Context, request *UpdateAnalyticsAlarmNodeRequest) (*UpdateAnalyticsAlarmNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateAnalyticsAlarmNodeRequest{
				UpdateAnalyticsAlarmNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateAnalyticsAlarmNode(ctx, request)
}
func (s *EventProducerService) DeleteAnalyticsAlarmNode(ctx context.Context, request *DeleteAnalyticsAlarmNodeRequest) (*DeleteAnalyticsAlarmNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteAnalyticsAlarmNodeRequest{
				DeleteAnalyticsAlarmNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAnalyticsAlarmNode(ctx, request)
}

func (s *EventProducerService) CreateAnalyticsAlarmNodeTagRef(ctx context.Context, request *CreateAnalyticsAlarmNodeTagRefRequest) (*CreateAnalyticsAlarmNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateAnalyticsAlarmNodeTagRefRequest{
			CreateAnalyticsAlarmNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAnalyticsAlarmNodeTagRef(ctx, request)
}

func (s *EventProducerService) DeleteAnalyticsAlarmNodeTagRef(ctx context.Context, request *DeleteAnalyticsAlarmNodeTagRefRequest) (*DeleteAnalyticsAlarmNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteAnalyticsAlarmNodeTagRefRequest{
			DeleteAnalyticsAlarmNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAnalyticsAlarmNodeTagRef(ctx, request)
}

func (e *Event_CreateAnalyticsAlarmNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAnalyticsAlarmNodeRequest
	model := request.AnalyticsAlarmNode
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetAnalyticsAlarmNode(ctx,
			&GetAnalyticsAlarmNodeRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateAnalyticsAlarmNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateAnalyticsAlarmNodeRequest{
			CreateAnalyticsAlarmNodeRequest: &CreateAnalyticsAlarmNodeRequest{
				AnalyticsAlarmNode: response.GetAnalyticsAlarmNode(),
			},
		},
	}, nil
}

func (e *Event_CreateAnalyticsAlarmNodeRequest) ToUpdateEvent() *Event {
	request := e.CreateAnalyticsAlarmNodeRequest
	model := request.AnalyticsAlarmNode
	return &Event{
		Request: &Event_UpdateAnalyticsAlarmNodeRequest{
			UpdateAnalyticsAlarmNodeRequest: &UpdateAnalyticsAlarmNodeRequest{
				AnalyticsAlarmNode: model,
				FieldMask:          request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateAnalyticsAlarmNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateAnalyticsAlarmNodeRequest
	response, err := service.UpdateAnalyticsAlarmNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateAnalyticsAlarmNodeRequest{
			UpdateAnalyticsAlarmNodeRequest: &UpdateAnalyticsAlarmNodeRequest{
				AnalyticsAlarmNode: response.GetAnalyticsAlarmNode(),
			},
		},
	}, nil
}

func (e *Event_UpdateAnalyticsAlarmNodeRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteAnalyticsAlarmNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAnalyticsAlarmNodeRequest
	_, err := service.DeleteAnalyticsAlarmNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteAnalyticsAlarmNodeRequest{
			DeleteAnalyticsAlarmNodeRequest: &DeleteAnalyticsAlarmNodeRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateAnalyticsAlarmNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAnalyticsAlarmNodeTagRefRequest
	if _, err := service.CreateAnalyticsAlarmNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateAnalyticsAlarmNodeTagRefRequest{
		CreateAnalyticsAlarmNodeTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteAnalyticsAlarmNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAnalyticsAlarmNodeTagRefRequest
	if _, err := service.DeleteAnalyticsAlarmNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteAnalyticsAlarmNodeTagRefRequest{
		DeleteAnalyticsAlarmNodeTagRefRequest: request,
	}}, nil
}

type AnalyticsNode = models.AnalyticsNode

func (s *BaseService) CreateAnalyticsNode(ctx context.Context, request *CreateAnalyticsNodeRequest) (*CreateAnalyticsNodeResponse, error) {
	if s.next == nil {
		return &CreateAnalyticsNodeResponse{
			AnalyticsNode: request.GetAnalyticsNode(),
		}, nil
	}
	return s.Next().CreateAnalyticsNode(ctx, request)
}
func (s *BaseService) UpdateAnalyticsNode(ctx context.Context, request *UpdateAnalyticsNodeRequest) (*UpdateAnalyticsNodeResponse, error) {
	if s.next == nil {
		return &UpdateAnalyticsNodeResponse{
			AnalyticsNode: request.GetAnalyticsNode(),
		}, nil
	}
	return s.Next().UpdateAnalyticsNode(ctx, request)
}
func (s *BaseService) DeleteAnalyticsNode(ctx context.Context, request *DeleteAnalyticsNodeRequest) (*DeleteAnalyticsNodeResponse, error) {
	if s.next == nil {
		return &DeleteAnalyticsNodeResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteAnalyticsNode(ctx, request)
}
func (s *BaseService) GetAnalyticsNode(ctx context.Context, request *GetAnalyticsNodeRequest) (*GetAnalyticsNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetAnalyticsNode(ctx, request)
}
func (s *BaseService) ListAnalyticsNode(ctx context.Context, request *ListAnalyticsNodeRequest) (*ListAnalyticsNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListAnalyticsNode(ctx, request)
}

func (s *BaseService) CreateAnalyticsNodeTagRef(ctx context.Context, request *CreateAnalyticsNodeTagRefRequest) (*CreateAnalyticsNodeTagRefResponse, error) {
	if s.next == nil {
		return &CreateAnalyticsNodeTagRefResponse{
			ID:                  request.ID,
			AnalyticsNodeTagRef: request.GetAnalyticsNodeTagRef(),
		}, nil
	}
	return s.Next().CreateAnalyticsNodeTagRef(ctx, request)
}

func (s *BaseService) DeleteAnalyticsNodeTagRef(ctx context.Context, request *DeleteAnalyticsNodeTagRefRequest) (*DeleteAnalyticsNodeTagRefResponse, error) {
	if s.next == nil {
		return &DeleteAnalyticsNodeTagRefResponse{
			ID:                  request.ID,
			AnalyticsNodeTagRef: request.GetAnalyticsNodeTagRef(),
		}, nil
	}
	return s.Next().DeleteAnalyticsNodeTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateAnalyticsNodeTagRef(ctx context.Context, request *CreateAnalyticsNodeTagRefRequest) (*CreateAnalyticsNodeTagRefResponse, error) {
	refField := models.AnalyticsNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAnalyticsNode(ctx, &GetAnalyticsNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AnalyticsNode
		obj.AddTagRef(request.AnalyticsNodeTagRef)

		_, err = s.BaseService.UpdateAnalyticsNode(ctx, &UpdateAnalyticsNodeRequest{
			AnalyticsNode: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateAnalyticsNodeTagRefResponse{
		ID:                  request.ID,
		AnalyticsNodeTagRef: request.GetAnalyticsNodeTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteAnalyticsNodeTagRef(ctx context.Context, request *DeleteAnalyticsNodeTagRefRequest) (*DeleteAnalyticsNodeTagRefResponse, error) {
	refField := models.AnalyticsNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAnalyticsNode(ctx, &GetAnalyticsNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AnalyticsNode
		obj.RemoveTagRef(request.AnalyticsNodeTagRef)

		_, err = s.BaseService.UpdateAnalyticsNode(ctx, &UpdateAnalyticsNodeRequest{
			AnalyticsNode: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteAnalyticsNodeTagRefResponse{
		ID:                  request.ID,
		AnalyticsNodeTagRef: request.GetAnalyticsNodeTagRef(),
	}, nil
}

func (s *EventProducerService) CreateAnalyticsNode(ctx context.Context, request *CreateAnalyticsNodeRequest) (*CreateAnalyticsNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateAnalyticsNodeRequest{
				CreateAnalyticsNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAnalyticsNode(ctx, request)
}
func (s *EventProducerService) UpdateAnalyticsNode(ctx context.Context, request *UpdateAnalyticsNodeRequest) (*UpdateAnalyticsNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateAnalyticsNodeRequest{
				UpdateAnalyticsNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateAnalyticsNode(ctx, request)
}
func (s *EventProducerService) DeleteAnalyticsNode(ctx context.Context, request *DeleteAnalyticsNodeRequest) (*DeleteAnalyticsNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteAnalyticsNodeRequest{
				DeleteAnalyticsNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAnalyticsNode(ctx, request)
}

func (s *EventProducerService) CreateAnalyticsNodeTagRef(ctx context.Context, request *CreateAnalyticsNodeTagRefRequest) (*CreateAnalyticsNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateAnalyticsNodeTagRefRequest{
			CreateAnalyticsNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAnalyticsNodeTagRef(ctx, request)
}

func (s *EventProducerService) DeleteAnalyticsNodeTagRef(ctx context.Context, request *DeleteAnalyticsNodeTagRefRequest) (*DeleteAnalyticsNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteAnalyticsNodeTagRefRequest{
			DeleteAnalyticsNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAnalyticsNodeTagRef(ctx, request)
}

func (e *Event_CreateAnalyticsNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAnalyticsNodeRequest
	model := request.AnalyticsNode
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetAnalyticsNode(ctx,
			&GetAnalyticsNodeRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateAnalyticsNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateAnalyticsNodeRequest{
			CreateAnalyticsNodeRequest: &CreateAnalyticsNodeRequest{
				AnalyticsNode: response.GetAnalyticsNode(),
			},
		},
	}, nil
}

func (e *Event_CreateAnalyticsNodeRequest) ToUpdateEvent() *Event {
	request := e.CreateAnalyticsNodeRequest
	model := request.AnalyticsNode
	return &Event{
		Request: &Event_UpdateAnalyticsNodeRequest{
			UpdateAnalyticsNodeRequest: &UpdateAnalyticsNodeRequest{
				AnalyticsNode: model,
				FieldMask:     request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateAnalyticsNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateAnalyticsNodeRequest
	response, err := service.UpdateAnalyticsNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateAnalyticsNodeRequest{
			UpdateAnalyticsNodeRequest: &UpdateAnalyticsNodeRequest{
				AnalyticsNode: response.GetAnalyticsNode(),
			},
		},
	}, nil
}

func (e *Event_UpdateAnalyticsNodeRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteAnalyticsNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAnalyticsNodeRequest
	_, err := service.DeleteAnalyticsNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteAnalyticsNodeRequest{
			DeleteAnalyticsNodeRequest: &DeleteAnalyticsNodeRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateAnalyticsNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAnalyticsNodeTagRefRequest
	if _, err := service.CreateAnalyticsNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateAnalyticsNodeTagRefRequest{
		CreateAnalyticsNodeTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteAnalyticsNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAnalyticsNodeTagRefRequest
	if _, err := service.DeleteAnalyticsNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteAnalyticsNodeTagRefRequest{
		DeleteAnalyticsNodeTagRefRequest: request,
	}}, nil
}

type AnalyticsSNMPNode = models.AnalyticsSNMPNode

func (s *BaseService) CreateAnalyticsSNMPNode(ctx context.Context, request *CreateAnalyticsSNMPNodeRequest) (*CreateAnalyticsSNMPNodeResponse, error) {
	if s.next == nil {
		return &CreateAnalyticsSNMPNodeResponse{
			AnalyticsSNMPNode: request.GetAnalyticsSNMPNode(),
		}, nil
	}
	return s.Next().CreateAnalyticsSNMPNode(ctx, request)
}
func (s *BaseService) UpdateAnalyticsSNMPNode(ctx context.Context, request *UpdateAnalyticsSNMPNodeRequest) (*UpdateAnalyticsSNMPNodeResponse, error) {
	if s.next == nil {
		return &UpdateAnalyticsSNMPNodeResponse{
			AnalyticsSNMPNode: request.GetAnalyticsSNMPNode(),
		}, nil
	}
	return s.Next().UpdateAnalyticsSNMPNode(ctx, request)
}
func (s *BaseService) DeleteAnalyticsSNMPNode(ctx context.Context, request *DeleteAnalyticsSNMPNodeRequest) (*DeleteAnalyticsSNMPNodeResponse, error) {
	if s.next == nil {
		return &DeleteAnalyticsSNMPNodeResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteAnalyticsSNMPNode(ctx, request)
}
func (s *BaseService) GetAnalyticsSNMPNode(ctx context.Context, request *GetAnalyticsSNMPNodeRequest) (*GetAnalyticsSNMPNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetAnalyticsSNMPNode(ctx, request)
}
func (s *BaseService) ListAnalyticsSNMPNode(ctx context.Context, request *ListAnalyticsSNMPNodeRequest) (*ListAnalyticsSNMPNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListAnalyticsSNMPNode(ctx, request)
}

func (s *BaseService) CreateAnalyticsSNMPNodeTagRef(ctx context.Context, request *CreateAnalyticsSNMPNodeTagRefRequest) (*CreateAnalyticsSNMPNodeTagRefResponse, error) {
	if s.next == nil {
		return &CreateAnalyticsSNMPNodeTagRefResponse{
			ID:                      request.ID,
			AnalyticsSNMPNodeTagRef: request.GetAnalyticsSNMPNodeTagRef(),
		}, nil
	}
	return s.Next().CreateAnalyticsSNMPNodeTagRef(ctx, request)
}

func (s *BaseService) DeleteAnalyticsSNMPNodeTagRef(ctx context.Context, request *DeleteAnalyticsSNMPNodeTagRefRequest) (*DeleteAnalyticsSNMPNodeTagRefResponse, error) {
	if s.next == nil {
		return &DeleteAnalyticsSNMPNodeTagRefResponse{
			ID:                      request.ID,
			AnalyticsSNMPNodeTagRef: request.GetAnalyticsSNMPNodeTagRef(),
		}, nil
	}
	return s.Next().DeleteAnalyticsSNMPNodeTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateAnalyticsSNMPNodeTagRef(ctx context.Context, request *CreateAnalyticsSNMPNodeTagRefRequest) (*CreateAnalyticsSNMPNodeTagRefResponse, error) {
	refField := models.AnalyticsSNMPNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAnalyticsSNMPNode(ctx, &GetAnalyticsSNMPNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AnalyticsSNMPNode
		obj.AddTagRef(request.AnalyticsSNMPNodeTagRef)

		_, err = s.BaseService.UpdateAnalyticsSNMPNode(ctx, &UpdateAnalyticsSNMPNodeRequest{
			AnalyticsSNMPNode: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateAnalyticsSNMPNodeTagRefResponse{
		ID:                      request.ID,
		AnalyticsSNMPNodeTagRef: request.GetAnalyticsSNMPNodeTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteAnalyticsSNMPNodeTagRef(ctx context.Context, request *DeleteAnalyticsSNMPNodeTagRefRequest) (*DeleteAnalyticsSNMPNodeTagRefResponse, error) {
	refField := models.AnalyticsSNMPNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAnalyticsSNMPNode(ctx, &GetAnalyticsSNMPNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.AnalyticsSNMPNode
		obj.RemoveTagRef(request.AnalyticsSNMPNodeTagRef)

		_, err = s.BaseService.UpdateAnalyticsSNMPNode(ctx, &UpdateAnalyticsSNMPNodeRequest{
			AnalyticsSNMPNode: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteAnalyticsSNMPNodeTagRefResponse{
		ID:                      request.ID,
		AnalyticsSNMPNodeTagRef: request.GetAnalyticsSNMPNodeTagRef(),
	}, nil
}

func (s *EventProducerService) CreateAnalyticsSNMPNode(ctx context.Context, request *CreateAnalyticsSNMPNodeRequest) (*CreateAnalyticsSNMPNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateAnalyticsSNMPNodeRequest{
				CreateAnalyticsSNMPNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAnalyticsSNMPNode(ctx, request)
}
func (s *EventProducerService) UpdateAnalyticsSNMPNode(ctx context.Context, request *UpdateAnalyticsSNMPNodeRequest) (*UpdateAnalyticsSNMPNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateAnalyticsSNMPNodeRequest{
				UpdateAnalyticsSNMPNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateAnalyticsSNMPNode(ctx, request)
}
func (s *EventProducerService) DeleteAnalyticsSNMPNode(ctx context.Context, request *DeleteAnalyticsSNMPNodeRequest) (*DeleteAnalyticsSNMPNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteAnalyticsSNMPNodeRequest{
				DeleteAnalyticsSNMPNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAnalyticsSNMPNode(ctx, request)
}

func (s *EventProducerService) CreateAnalyticsSNMPNodeTagRef(ctx context.Context, request *CreateAnalyticsSNMPNodeTagRefRequest) (*CreateAnalyticsSNMPNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateAnalyticsSNMPNodeTagRefRequest{
			CreateAnalyticsSNMPNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAnalyticsSNMPNodeTagRef(ctx, request)
}

func (s *EventProducerService) DeleteAnalyticsSNMPNodeTagRef(ctx context.Context, request *DeleteAnalyticsSNMPNodeTagRefRequest) (*DeleteAnalyticsSNMPNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteAnalyticsSNMPNodeTagRefRequest{
			DeleteAnalyticsSNMPNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAnalyticsSNMPNodeTagRef(ctx, request)
}

func (e *Event_CreateAnalyticsSNMPNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAnalyticsSNMPNodeRequest
	model := request.AnalyticsSNMPNode
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetAnalyticsSNMPNode(ctx,
			&GetAnalyticsSNMPNodeRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateAnalyticsSNMPNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateAnalyticsSNMPNodeRequest{
			CreateAnalyticsSNMPNodeRequest: &CreateAnalyticsSNMPNodeRequest{
				AnalyticsSNMPNode: response.GetAnalyticsSNMPNode(),
			},
		},
	}, nil
}

func (e *Event_CreateAnalyticsSNMPNodeRequest) ToUpdateEvent() *Event {
	request := e.CreateAnalyticsSNMPNodeRequest
	model := request.AnalyticsSNMPNode
	return &Event{
		Request: &Event_UpdateAnalyticsSNMPNodeRequest{
			UpdateAnalyticsSNMPNodeRequest: &UpdateAnalyticsSNMPNodeRequest{
				AnalyticsSNMPNode: model,
				FieldMask:         request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateAnalyticsSNMPNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateAnalyticsSNMPNodeRequest
	response, err := service.UpdateAnalyticsSNMPNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateAnalyticsSNMPNodeRequest{
			UpdateAnalyticsSNMPNodeRequest: &UpdateAnalyticsSNMPNodeRequest{
				AnalyticsSNMPNode: response.GetAnalyticsSNMPNode(),
			},
		},
	}, nil
}

func (e *Event_UpdateAnalyticsSNMPNodeRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteAnalyticsSNMPNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAnalyticsSNMPNodeRequest
	_, err := service.DeleteAnalyticsSNMPNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteAnalyticsSNMPNodeRequest{
			DeleteAnalyticsSNMPNodeRequest: &DeleteAnalyticsSNMPNodeRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateAnalyticsSNMPNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAnalyticsSNMPNodeTagRefRequest
	if _, err := service.CreateAnalyticsSNMPNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateAnalyticsSNMPNodeTagRefRequest{
		CreateAnalyticsSNMPNodeTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteAnalyticsSNMPNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAnalyticsSNMPNodeTagRefRequest
	if _, err := service.DeleteAnalyticsSNMPNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteAnalyticsSNMPNodeTagRefRequest{
		DeleteAnalyticsSNMPNodeTagRefRequest: request,
	}}, nil
}

type APIAccessList = models.APIAccessList

func (s *BaseService) CreateAPIAccessList(ctx context.Context, request *CreateAPIAccessListRequest) (*CreateAPIAccessListResponse, error) {
	if s.next == nil {
		return &CreateAPIAccessListResponse{
			APIAccessList: request.GetAPIAccessList(),
		}, nil
	}
	return s.Next().CreateAPIAccessList(ctx, request)
}
func (s *BaseService) UpdateAPIAccessList(ctx context.Context, request *UpdateAPIAccessListRequest) (*UpdateAPIAccessListResponse, error) {
	if s.next == nil {
		return &UpdateAPIAccessListResponse{
			APIAccessList: request.GetAPIAccessList(),
		}, nil
	}
	return s.Next().UpdateAPIAccessList(ctx, request)
}
func (s *BaseService) DeleteAPIAccessList(ctx context.Context, request *DeleteAPIAccessListRequest) (*DeleteAPIAccessListResponse, error) {
	if s.next == nil {
		return &DeleteAPIAccessListResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteAPIAccessList(ctx, request)
}
func (s *BaseService) GetAPIAccessList(ctx context.Context, request *GetAPIAccessListRequest) (*GetAPIAccessListResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetAPIAccessList(ctx, request)
}
func (s *BaseService) ListAPIAccessList(ctx context.Context, request *ListAPIAccessListRequest) (*ListAPIAccessListResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListAPIAccessList(ctx, request)
}

func (s *BaseService) CreateAPIAccessListTagRef(ctx context.Context, request *CreateAPIAccessListTagRefRequest) (*CreateAPIAccessListTagRefResponse, error) {
	if s.next == nil {
		return &CreateAPIAccessListTagRefResponse{
			ID:                  request.ID,
			APIAccessListTagRef: request.GetAPIAccessListTagRef(),
		}, nil
	}
	return s.Next().CreateAPIAccessListTagRef(ctx, request)
}

func (s *BaseService) DeleteAPIAccessListTagRef(ctx context.Context, request *DeleteAPIAccessListTagRefRequest) (*DeleteAPIAccessListTagRefResponse, error) {
	if s.next == nil {
		return &DeleteAPIAccessListTagRefResponse{
			ID:                  request.ID,
			APIAccessListTagRef: request.GetAPIAccessListTagRef(),
		}, nil
	}
	return s.Next().DeleteAPIAccessListTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateAPIAccessListTagRef(ctx context.Context, request *CreateAPIAccessListTagRefRequest) (*CreateAPIAccessListTagRefResponse, error) {
	refField := models.APIAccessListFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAPIAccessList(ctx, &GetAPIAccessListRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.APIAccessList
		obj.AddTagRef(request.APIAccessListTagRef)

		_, err = s.BaseService.UpdateAPIAccessList(ctx, &UpdateAPIAccessListRequest{
			APIAccessList: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateAPIAccessListTagRefResponse{
		ID:                  request.ID,
		APIAccessListTagRef: request.GetAPIAccessListTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteAPIAccessListTagRef(ctx context.Context, request *DeleteAPIAccessListTagRefRequest) (*DeleteAPIAccessListTagRefResponse, error) {
	refField := models.APIAccessListFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetAPIAccessList(ctx, &GetAPIAccessListRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.APIAccessList
		obj.RemoveTagRef(request.APIAccessListTagRef)

		_, err = s.BaseService.UpdateAPIAccessList(ctx, &UpdateAPIAccessListRequest{
			APIAccessList: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteAPIAccessListTagRefResponse{
		ID:                  request.ID,
		APIAccessListTagRef: request.GetAPIAccessListTagRef(),
	}, nil
}

func (s *EventProducerService) CreateAPIAccessList(ctx context.Context, request *CreateAPIAccessListRequest) (*CreateAPIAccessListResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateAPIAccessListRequest{
				CreateAPIAccessListRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAPIAccessList(ctx, request)
}
func (s *EventProducerService) UpdateAPIAccessList(ctx context.Context, request *UpdateAPIAccessListRequest) (*UpdateAPIAccessListResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateAPIAccessListRequest{
				UpdateAPIAccessListRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateAPIAccessList(ctx, request)
}
func (s *EventProducerService) DeleteAPIAccessList(ctx context.Context, request *DeleteAPIAccessListRequest) (*DeleteAPIAccessListResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteAPIAccessListRequest{
				DeleteAPIAccessListRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAPIAccessList(ctx, request)
}

func (s *EventProducerService) CreateAPIAccessListTagRef(ctx context.Context, request *CreateAPIAccessListTagRefRequest) (*CreateAPIAccessListTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateAPIAccessListTagRefRequest{
			CreateAPIAccessListTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateAPIAccessListTagRef(ctx, request)
}

func (s *EventProducerService) DeleteAPIAccessListTagRef(ctx context.Context, request *DeleteAPIAccessListTagRefRequest) (*DeleteAPIAccessListTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteAPIAccessListTagRefRequest{
			DeleteAPIAccessListTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteAPIAccessListTagRef(ctx, request)
}

func (e *Event_CreateAPIAccessListRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAPIAccessListRequest
	model := request.APIAccessList
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetAPIAccessList(ctx,
			&GetAPIAccessListRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateAPIAccessList(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateAPIAccessListRequest{
			CreateAPIAccessListRequest: &CreateAPIAccessListRequest{
				APIAccessList: response.GetAPIAccessList(),
			},
		},
	}, nil
}

func (e *Event_CreateAPIAccessListRequest) ToUpdateEvent() *Event {
	request := e.CreateAPIAccessListRequest
	model := request.APIAccessList
	return &Event{
		Request: &Event_UpdateAPIAccessListRequest{
			UpdateAPIAccessListRequest: &UpdateAPIAccessListRequest{
				APIAccessList: model,
				FieldMask:     request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateAPIAccessListRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateAPIAccessListRequest
	response, err := service.UpdateAPIAccessList(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateAPIAccessListRequest{
			UpdateAPIAccessListRequest: &UpdateAPIAccessListRequest{
				APIAccessList: response.GetAPIAccessList(),
			},
		},
	}, nil
}

func (e *Event_UpdateAPIAccessListRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteAPIAccessListRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAPIAccessListRequest
	_, err := service.DeleteAPIAccessList(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteAPIAccessListRequest{
			DeleteAPIAccessListRequest: &DeleteAPIAccessListRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateAPIAccessListTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateAPIAccessListTagRefRequest
	if _, err := service.CreateAPIAccessListTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateAPIAccessListTagRefRequest{
		CreateAPIAccessListTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteAPIAccessListTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteAPIAccessListTagRefRequest
	if _, err := service.DeleteAPIAccessListTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteAPIAccessListTagRefRequest{
		DeleteAPIAccessListTagRefRequest: request,
	}}, nil
}

type ApplicationPolicySet = models.ApplicationPolicySet

func (s *BaseService) CreateApplicationPolicySet(ctx context.Context, request *CreateApplicationPolicySetRequest) (*CreateApplicationPolicySetResponse, error) {
	if s.next == nil {
		return &CreateApplicationPolicySetResponse{
			ApplicationPolicySet: request.GetApplicationPolicySet(),
		}, nil
	}
	return s.Next().CreateApplicationPolicySet(ctx, request)
}
func (s *BaseService) UpdateApplicationPolicySet(ctx context.Context, request *UpdateApplicationPolicySetRequest) (*UpdateApplicationPolicySetResponse, error) {
	if s.next == nil {
		return &UpdateApplicationPolicySetResponse{
			ApplicationPolicySet: request.GetApplicationPolicySet(),
		}, nil
	}
	return s.Next().UpdateApplicationPolicySet(ctx, request)
}
func (s *BaseService) DeleteApplicationPolicySet(ctx context.Context, request *DeleteApplicationPolicySetRequest) (*DeleteApplicationPolicySetResponse, error) {
	if s.next == nil {
		return &DeleteApplicationPolicySetResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteApplicationPolicySet(ctx, request)
}
func (s *BaseService) GetApplicationPolicySet(ctx context.Context, request *GetApplicationPolicySetRequest) (*GetApplicationPolicySetResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetApplicationPolicySet(ctx, request)
}
func (s *BaseService) ListApplicationPolicySet(ctx context.Context, request *ListApplicationPolicySetRequest) (*ListApplicationPolicySetResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListApplicationPolicySet(ctx, request)
}

func (s *BaseService) CreateApplicationPolicySetGlobalVrouterConfigRef(ctx context.Context, request *CreateApplicationPolicySetGlobalVrouterConfigRefRequest) (*CreateApplicationPolicySetGlobalVrouterConfigRefResponse, error) {
	if s.next == nil {
		return &CreateApplicationPolicySetGlobalVrouterConfigRefResponse{
			ID: request.ID,
			ApplicationPolicySetGlobalVrouterConfigRef: request.GetApplicationPolicySetGlobalVrouterConfigRef(),
		}, nil
	}
	return s.Next().CreateApplicationPolicySetGlobalVrouterConfigRef(ctx, request)
}

func (s *BaseService) DeleteApplicationPolicySetGlobalVrouterConfigRef(ctx context.Context, request *DeleteApplicationPolicySetGlobalVrouterConfigRefRequest) (*DeleteApplicationPolicySetGlobalVrouterConfigRefResponse, error) {
	if s.next == nil {
		return &DeleteApplicationPolicySetGlobalVrouterConfigRefResponse{
			ID: request.ID,
			ApplicationPolicySetGlobalVrouterConfigRef: request.GetApplicationPolicySetGlobalVrouterConfigRef(),
		}, nil
	}
	return s.Next().DeleteApplicationPolicySetGlobalVrouterConfigRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateApplicationPolicySetGlobalVrouterConfigRef(ctx context.Context, request *CreateApplicationPolicySetGlobalVrouterConfigRefRequest) (*CreateApplicationPolicySetGlobalVrouterConfigRefResponse, error) {
	refField := models.ApplicationPolicySetFieldGlobalVrouterConfigRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetApplicationPolicySet(ctx, &GetApplicationPolicySetRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ApplicationPolicySet
		obj.AddGlobalVrouterConfigRef(request.ApplicationPolicySetGlobalVrouterConfigRef)

		_, err = s.BaseService.UpdateApplicationPolicySet(ctx, &UpdateApplicationPolicySetRequest{
			ApplicationPolicySet: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateApplicationPolicySetGlobalVrouterConfigRefResponse{
		ID: request.ID,
		ApplicationPolicySetGlobalVrouterConfigRef: request.GetApplicationPolicySetGlobalVrouterConfigRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteApplicationPolicySetGlobalVrouterConfigRef(ctx context.Context, request *DeleteApplicationPolicySetGlobalVrouterConfigRefRequest) (*DeleteApplicationPolicySetGlobalVrouterConfigRefResponse, error) {
	refField := models.ApplicationPolicySetFieldGlobalVrouterConfigRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetApplicationPolicySet(ctx, &GetApplicationPolicySetRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ApplicationPolicySet
		obj.RemoveGlobalVrouterConfigRef(request.ApplicationPolicySetGlobalVrouterConfigRef)

		_, err = s.BaseService.UpdateApplicationPolicySet(ctx, &UpdateApplicationPolicySetRequest{
			ApplicationPolicySet: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteApplicationPolicySetGlobalVrouterConfigRefResponse{
		ID: request.ID,
		ApplicationPolicySetGlobalVrouterConfigRef: request.GetApplicationPolicySetGlobalVrouterConfigRef(),
	}, nil
}

func (s *BaseService) CreateApplicationPolicySetTagRef(ctx context.Context, request *CreateApplicationPolicySetTagRefRequest) (*CreateApplicationPolicySetTagRefResponse, error) {
	if s.next == nil {
		return &CreateApplicationPolicySetTagRefResponse{
			ID:                         request.ID,
			ApplicationPolicySetTagRef: request.GetApplicationPolicySetTagRef(),
		}, nil
	}
	return s.Next().CreateApplicationPolicySetTagRef(ctx, request)
}

func (s *BaseService) DeleteApplicationPolicySetTagRef(ctx context.Context, request *DeleteApplicationPolicySetTagRefRequest) (*DeleteApplicationPolicySetTagRefResponse, error) {
	if s.next == nil {
		return &DeleteApplicationPolicySetTagRefResponse{
			ID:                         request.ID,
			ApplicationPolicySetTagRef: request.GetApplicationPolicySetTagRef(),
		}, nil
	}
	return s.Next().DeleteApplicationPolicySetTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateApplicationPolicySetTagRef(ctx context.Context, request *CreateApplicationPolicySetTagRefRequest) (*CreateApplicationPolicySetTagRefResponse, error) {
	refField := models.ApplicationPolicySetFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetApplicationPolicySet(ctx, &GetApplicationPolicySetRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ApplicationPolicySet
		obj.AddTagRef(request.ApplicationPolicySetTagRef)

		_, err = s.BaseService.UpdateApplicationPolicySet(ctx, &UpdateApplicationPolicySetRequest{
			ApplicationPolicySet: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateApplicationPolicySetTagRefResponse{
		ID:                         request.ID,
		ApplicationPolicySetTagRef: request.GetApplicationPolicySetTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteApplicationPolicySetTagRef(ctx context.Context, request *DeleteApplicationPolicySetTagRefRequest) (*DeleteApplicationPolicySetTagRefResponse, error) {
	refField := models.ApplicationPolicySetFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetApplicationPolicySet(ctx, &GetApplicationPolicySetRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ApplicationPolicySet
		obj.RemoveTagRef(request.ApplicationPolicySetTagRef)

		_, err = s.BaseService.UpdateApplicationPolicySet(ctx, &UpdateApplicationPolicySetRequest{
			ApplicationPolicySet: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteApplicationPolicySetTagRefResponse{
		ID:                         request.ID,
		ApplicationPolicySetTagRef: request.GetApplicationPolicySetTagRef(),
	}, nil
}

func (s *BaseService) CreateApplicationPolicySetFirewallPolicyRef(ctx context.Context, request *CreateApplicationPolicySetFirewallPolicyRefRequest) (*CreateApplicationPolicySetFirewallPolicyRefResponse, error) {
	if s.next == nil {
		return &CreateApplicationPolicySetFirewallPolicyRefResponse{
			ID:                                    request.ID,
			ApplicationPolicySetFirewallPolicyRef: request.GetApplicationPolicySetFirewallPolicyRef(),
		}, nil
	}
	return s.Next().CreateApplicationPolicySetFirewallPolicyRef(ctx, request)
}

func (s *BaseService) DeleteApplicationPolicySetFirewallPolicyRef(ctx context.Context, request *DeleteApplicationPolicySetFirewallPolicyRefRequest) (*DeleteApplicationPolicySetFirewallPolicyRefResponse, error) {
	if s.next == nil {
		return &DeleteApplicationPolicySetFirewallPolicyRefResponse{
			ID:                                    request.ID,
			ApplicationPolicySetFirewallPolicyRef: request.GetApplicationPolicySetFirewallPolicyRef(),
		}, nil
	}
	return s.Next().DeleteApplicationPolicySetFirewallPolicyRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateApplicationPolicySetFirewallPolicyRef(ctx context.Context, request *CreateApplicationPolicySetFirewallPolicyRefRequest) (*CreateApplicationPolicySetFirewallPolicyRefResponse, error) {
	refField := models.ApplicationPolicySetFieldFirewallPolicyRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetApplicationPolicySet(ctx, &GetApplicationPolicySetRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ApplicationPolicySet
		obj.AddFirewallPolicyRef(request.ApplicationPolicySetFirewallPolicyRef)

		_, err = s.BaseService.UpdateApplicationPolicySet(ctx, &UpdateApplicationPolicySetRequest{
			ApplicationPolicySet: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateApplicationPolicySetFirewallPolicyRefResponse{
		ID:                                    request.ID,
		ApplicationPolicySetFirewallPolicyRef: request.GetApplicationPolicySetFirewallPolicyRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteApplicationPolicySetFirewallPolicyRef(ctx context.Context, request *DeleteApplicationPolicySetFirewallPolicyRefRequest) (*DeleteApplicationPolicySetFirewallPolicyRefResponse, error) {
	refField := models.ApplicationPolicySetFieldFirewallPolicyRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetApplicationPolicySet(ctx, &GetApplicationPolicySetRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ApplicationPolicySet
		obj.RemoveFirewallPolicyRef(request.ApplicationPolicySetFirewallPolicyRef)

		_, err = s.BaseService.UpdateApplicationPolicySet(ctx, &UpdateApplicationPolicySetRequest{
			ApplicationPolicySet: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteApplicationPolicySetFirewallPolicyRefResponse{
		ID:                                    request.ID,
		ApplicationPolicySetFirewallPolicyRef: request.GetApplicationPolicySetFirewallPolicyRef(),
	}, nil
}

func (s *EventProducerService) CreateApplicationPolicySet(ctx context.Context, request *CreateApplicationPolicySetRequest) (*CreateApplicationPolicySetResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateApplicationPolicySetRequest{
				CreateApplicationPolicySetRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateApplicationPolicySet(ctx, request)
}
func (s *EventProducerService) UpdateApplicationPolicySet(ctx context.Context, request *UpdateApplicationPolicySetRequest) (*UpdateApplicationPolicySetResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateApplicationPolicySetRequest{
				UpdateApplicationPolicySetRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateApplicationPolicySet(ctx, request)
}
func (s *EventProducerService) DeleteApplicationPolicySet(ctx context.Context, request *DeleteApplicationPolicySetRequest) (*DeleteApplicationPolicySetResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteApplicationPolicySetRequest{
				DeleteApplicationPolicySetRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteApplicationPolicySet(ctx, request)
}

func (s *EventProducerService) CreateApplicationPolicySetFirewallPolicyRef(ctx context.Context, request *CreateApplicationPolicySetFirewallPolicyRefRequest) (*CreateApplicationPolicySetFirewallPolicyRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateApplicationPolicySetFirewallPolicyRefRequest{
			CreateApplicationPolicySetFirewallPolicyRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateApplicationPolicySetFirewallPolicyRef(ctx, request)
}

func (s *EventProducerService) DeleteApplicationPolicySetFirewallPolicyRef(ctx context.Context, request *DeleteApplicationPolicySetFirewallPolicyRefRequest) (*DeleteApplicationPolicySetFirewallPolicyRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteApplicationPolicySetFirewallPolicyRefRequest{
			DeleteApplicationPolicySetFirewallPolicyRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteApplicationPolicySetFirewallPolicyRef(ctx, request)
}

func (s *EventProducerService) CreateApplicationPolicySetGlobalVrouterConfigRef(ctx context.Context, request *CreateApplicationPolicySetGlobalVrouterConfigRefRequest) (*CreateApplicationPolicySetGlobalVrouterConfigRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateApplicationPolicySetGlobalVrouterConfigRefRequest{
			CreateApplicationPolicySetGlobalVrouterConfigRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateApplicationPolicySetGlobalVrouterConfigRef(ctx, request)
}

func (s *EventProducerService) DeleteApplicationPolicySetGlobalVrouterConfigRef(ctx context.Context, request *DeleteApplicationPolicySetGlobalVrouterConfigRefRequest) (*DeleteApplicationPolicySetGlobalVrouterConfigRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteApplicationPolicySetGlobalVrouterConfigRefRequest{
			DeleteApplicationPolicySetGlobalVrouterConfigRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteApplicationPolicySetGlobalVrouterConfigRef(ctx, request)
}

func (s *EventProducerService) CreateApplicationPolicySetTagRef(ctx context.Context, request *CreateApplicationPolicySetTagRefRequest) (*CreateApplicationPolicySetTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateApplicationPolicySetTagRefRequest{
			CreateApplicationPolicySetTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateApplicationPolicySetTagRef(ctx, request)
}

func (s *EventProducerService) DeleteApplicationPolicySetTagRef(ctx context.Context, request *DeleteApplicationPolicySetTagRefRequest) (*DeleteApplicationPolicySetTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteApplicationPolicySetTagRefRequest{
			DeleteApplicationPolicySetTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteApplicationPolicySetTagRef(ctx, request)
}

func (e *Event_CreateApplicationPolicySetRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateApplicationPolicySetRequest
	model := request.ApplicationPolicySet
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetApplicationPolicySet(ctx,
			&GetApplicationPolicySetRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateApplicationPolicySet(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateApplicationPolicySetRequest{
			CreateApplicationPolicySetRequest: &CreateApplicationPolicySetRequest{
				ApplicationPolicySet: response.GetApplicationPolicySet(),
			},
		},
	}, nil
}

func (e *Event_CreateApplicationPolicySetRequest) ToUpdateEvent() *Event {
	request := e.CreateApplicationPolicySetRequest
	model := request.ApplicationPolicySet
	return &Event{
		Request: &Event_UpdateApplicationPolicySetRequest{
			UpdateApplicationPolicySetRequest: &UpdateApplicationPolicySetRequest{
				ApplicationPolicySet: model,
				FieldMask:            request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateApplicationPolicySetRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateApplicationPolicySetRequest
	response, err := service.UpdateApplicationPolicySet(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateApplicationPolicySetRequest{
			UpdateApplicationPolicySetRequest: &UpdateApplicationPolicySetRequest{
				ApplicationPolicySet: response.GetApplicationPolicySet(),
			},
		},
	}, nil
}

func (e *Event_UpdateApplicationPolicySetRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteApplicationPolicySetRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteApplicationPolicySetRequest
	_, err := service.DeleteApplicationPolicySet(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteApplicationPolicySetRequest{
			DeleteApplicationPolicySetRequest: &DeleteApplicationPolicySetRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateApplicationPolicySetGlobalVrouterConfigRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateApplicationPolicySetGlobalVrouterConfigRefRequest
	if _, err := service.CreateApplicationPolicySetGlobalVrouterConfigRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateApplicationPolicySetGlobalVrouterConfigRefRequest{
		CreateApplicationPolicySetGlobalVrouterConfigRefRequest: request,
	}}, nil
}

func (e *Event_DeleteApplicationPolicySetGlobalVrouterConfigRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteApplicationPolicySetGlobalVrouterConfigRefRequest
	if _, err := service.DeleteApplicationPolicySetGlobalVrouterConfigRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteApplicationPolicySetGlobalVrouterConfigRefRequest{
		DeleteApplicationPolicySetGlobalVrouterConfigRefRequest: request,
	}}, nil
}

func (e *Event_CreateApplicationPolicySetTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateApplicationPolicySetTagRefRequest
	if _, err := service.CreateApplicationPolicySetTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateApplicationPolicySetTagRefRequest{
		CreateApplicationPolicySetTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteApplicationPolicySetTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteApplicationPolicySetTagRefRequest
	if _, err := service.DeleteApplicationPolicySetTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteApplicationPolicySetTagRefRequest{
		DeleteApplicationPolicySetTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateApplicationPolicySetFirewallPolicyRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateApplicationPolicySetFirewallPolicyRefRequest
	if _, err := service.CreateApplicationPolicySetFirewallPolicyRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateApplicationPolicySetFirewallPolicyRefRequest{
		CreateApplicationPolicySetFirewallPolicyRefRequest: request,
	}}, nil
}

func (e *Event_DeleteApplicationPolicySetFirewallPolicyRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteApplicationPolicySetFirewallPolicyRefRequest
	if _, err := service.DeleteApplicationPolicySetFirewallPolicyRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteApplicationPolicySetFirewallPolicyRefRequest{
		DeleteApplicationPolicySetFirewallPolicyRefRequest: request,
	}}, nil
}

type BGPAsAService = models.BGPAsAService

func (s *BaseService) CreateBGPAsAService(ctx context.Context, request *CreateBGPAsAServiceRequest) (*CreateBGPAsAServiceResponse, error) {
	if s.next == nil {
		return &CreateBGPAsAServiceResponse{
			BGPAsAService: request.GetBGPAsAService(),
		}, nil
	}
	return s.Next().CreateBGPAsAService(ctx, request)
}
func (s *BaseService) UpdateBGPAsAService(ctx context.Context, request *UpdateBGPAsAServiceRequest) (*UpdateBGPAsAServiceResponse, error) {
	if s.next == nil {
		return &UpdateBGPAsAServiceResponse{
			BGPAsAService: request.GetBGPAsAService(),
		}, nil
	}
	return s.Next().UpdateBGPAsAService(ctx, request)
}
func (s *BaseService) DeleteBGPAsAService(ctx context.Context, request *DeleteBGPAsAServiceRequest) (*DeleteBGPAsAServiceResponse, error) {
	if s.next == nil {
		return &DeleteBGPAsAServiceResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteBGPAsAService(ctx, request)
}
func (s *BaseService) GetBGPAsAService(ctx context.Context, request *GetBGPAsAServiceRequest) (*GetBGPAsAServiceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetBGPAsAService(ctx, request)
}
func (s *BaseService) ListBGPAsAService(ctx context.Context, request *ListBGPAsAServiceRequest) (*ListBGPAsAServiceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListBGPAsAService(ctx, request)
}

func (s *BaseService) CreateBGPAsAServiceBGPRouterRef(ctx context.Context, request *CreateBGPAsAServiceBGPRouterRefRequest) (*CreateBGPAsAServiceBGPRouterRefResponse, error) {
	if s.next == nil {
		return &CreateBGPAsAServiceBGPRouterRefResponse{
			ID:                        request.ID,
			BGPAsAServiceBGPRouterRef: request.GetBGPAsAServiceBGPRouterRef(),
		}, nil
	}
	return s.Next().CreateBGPAsAServiceBGPRouterRef(ctx, request)
}

func (s *BaseService) DeleteBGPAsAServiceBGPRouterRef(ctx context.Context, request *DeleteBGPAsAServiceBGPRouterRefRequest) (*DeleteBGPAsAServiceBGPRouterRefResponse, error) {
	if s.next == nil {
		return &DeleteBGPAsAServiceBGPRouterRefResponse{
			ID:                        request.ID,
			BGPAsAServiceBGPRouterRef: request.GetBGPAsAServiceBGPRouterRef(),
		}, nil
	}
	return s.Next().DeleteBGPAsAServiceBGPRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateBGPAsAServiceBGPRouterRef(ctx context.Context, request *CreateBGPAsAServiceBGPRouterRefRequest) (*CreateBGPAsAServiceBGPRouterRefResponse, error) {
	refField := models.BGPAsAServiceFieldBGPRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPAsAService(ctx, &GetBGPAsAServiceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPAsAService
		obj.AddBGPRouterRef(request.BGPAsAServiceBGPRouterRef)

		_, err = s.BaseService.UpdateBGPAsAService(ctx, &UpdateBGPAsAServiceRequest{
			BGPAsAService: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateBGPAsAServiceBGPRouterRefResponse{
		ID:                        request.ID,
		BGPAsAServiceBGPRouterRef: request.GetBGPAsAServiceBGPRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteBGPAsAServiceBGPRouterRef(ctx context.Context, request *DeleteBGPAsAServiceBGPRouterRefRequest) (*DeleteBGPAsAServiceBGPRouterRefResponse, error) {
	refField := models.BGPAsAServiceFieldBGPRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPAsAService(ctx, &GetBGPAsAServiceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPAsAService
		obj.RemoveBGPRouterRef(request.BGPAsAServiceBGPRouterRef)

		_, err = s.BaseService.UpdateBGPAsAService(ctx, &UpdateBGPAsAServiceRequest{
			BGPAsAService: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteBGPAsAServiceBGPRouterRefResponse{
		ID:                        request.ID,
		BGPAsAServiceBGPRouterRef: request.GetBGPAsAServiceBGPRouterRef(),
	}, nil
}

func (s *BaseService) CreateBGPAsAServiceControlNodeZoneRef(ctx context.Context, request *CreateBGPAsAServiceControlNodeZoneRefRequest) (*CreateBGPAsAServiceControlNodeZoneRefResponse, error) {
	if s.next == nil {
		return &CreateBGPAsAServiceControlNodeZoneRefResponse{
			ID:                              request.ID,
			BGPAsAServiceControlNodeZoneRef: request.GetBGPAsAServiceControlNodeZoneRef(),
		}, nil
	}
	return s.Next().CreateBGPAsAServiceControlNodeZoneRef(ctx, request)
}

func (s *BaseService) DeleteBGPAsAServiceControlNodeZoneRef(ctx context.Context, request *DeleteBGPAsAServiceControlNodeZoneRefRequest) (*DeleteBGPAsAServiceControlNodeZoneRefResponse, error) {
	if s.next == nil {
		return &DeleteBGPAsAServiceControlNodeZoneRefResponse{
			ID:                              request.ID,
			BGPAsAServiceControlNodeZoneRef: request.GetBGPAsAServiceControlNodeZoneRef(),
		}, nil
	}
	return s.Next().DeleteBGPAsAServiceControlNodeZoneRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateBGPAsAServiceControlNodeZoneRef(ctx context.Context, request *CreateBGPAsAServiceControlNodeZoneRefRequest) (*CreateBGPAsAServiceControlNodeZoneRefResponse, error) {
	refField := models.BGPAsAServiceFieldControlNodeZoneRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPAsAService(ctx, &GetBGPAsAServiceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPAsAService
		obj.AddControlNodeZoneRef(request.BGPAsAServiceControlNodeZoneRef)

		_, err = s.BaseService.UpdateBGPAsAService(ctx, &UpdateBGPAsAServiceRequest{
			BGPAsAService: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateBGPAsAServiceControlNodeZoneRefResponse{
		ID:                              request.ID,
		BGPAsAServiceControlNodeZoneRef: request.GetBGPAsAServiceControlNodeZoneRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteBGPAsAServiceControlNodeZoneRef(ctx context.Context, request *DeleteBGPAsAServiceControlNodeZoneRefRequest) (*DeleteBGPAsAServiceControlNodeZoneRefResponse, error) {
	refField := models.BGPAsAServiceFieldControlNodeZoneRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPAsAService(ctx, &GetBGPAsAServiceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPAsAService
		obj.RemoveControlNodeZoneRef(request.BGPAsAServiceControlNodeZoneRef)

		_, err = s.BaseService.UpdateBGPAsAService(ctx, &UpdateBGPAsAServiceRequest{
			BGPAsAService: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteBGPAsAServiceControlNodeZoneRefResponse{
		ID:                              request.ID,
		BGPAsAServiceControlNodeZoneRef: request.GetBGPAsAServiceControlNodeZoneRef(),
	}, nil
}

func (s *BaseService) CreateBGPAsAServiceServiceHealthCheckRef(ctx context.Context, request *CreateBGPAsAServiceServiceHealthCheckRefRequest) (*CreateBGPAsAServiceServiceHealthCheckRefResponse, error) {
	if s.next == nil {
		return &CreateBGPAsAServiceServiceHealthCheckRefResponse{
			ID:                                 request.ID,
			BGPAsAServiceServiceHealthCheckRef: request.GetBGPAsAServiceServiceHealthCheckRef(),
		}, nil
	}
	return s.Next().CreateBGPAsAServiceServiceHealthCheckRef(ctx, request)
}

func (s *BaseService) DeleteBGPAsAServiceServiceHealthCheckRef(ctx context.Context, request *DeleteBGPAsAServiceServiceHealthCheckRefRequest) (*DeleteBGPAsAServiceServiceHealthCheckRefResponse, error) {
	if s.next == nil {
		return &DeleteBGPAsAServiceServiceHealthCheckRefResponse{
			ID:                                 request.ID,
			BGPAsAServiceServiceHealthCheckRef: request.GetBGPAsAServiceServiceHealthCheckRef(),
		}, nil
	}
	return s.Next().DeleteBGPAsAServiceServiceHealthCheckRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateBGPAsAServiceServiceHealthCheckRef(ctx context.Context, request *CreateBGPAsAServiceServiceHealthCheckRefRequest) (*CreateBGPAsAServiceServiceHealthCheckRefResponse, error) {
	refField := models.BGPAsAServiceFieldServiceHealthCheckRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPAsAService(ctx, &GetBGPAsAServiceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPAsAService
		obj.AddServiceHealthCheckRef(request.BGPAsAServiceServiceHealthCheckRef)

		_, err = s.BaseService.UpdateBGPAsAService(ctx, &UpdateBGPAsAServiceRequest{
			BGPAsAService: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateBGPAsAServiceServiceHealthCheckRefResponse{
		ID:                                 request.ID,
		BGPAsAServiceServiceHealthCheckRef: request.GetBGPAsAServiceServiceHealthCheckRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteBGPAsAServiceServiceHealthCheckRef(ctx context.Context, request *DeleteBGPAsAServiceServiceHealthCheckRefRequest) (*DeleteBGPAsAServiceServiceHealthCheckRefResponse, error) {
	refField := models.BGPAsAServiceFieldServiceHealthCheckRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPAsAService(ctx, &GetBGPAsAServiceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPAsAService
		obj.RemoveServiceHealthCheckRef(request.BGPAsAServiceServiceHealthCheckRef)

		_, err = s.BaseService.UpdateBGPAsAService(ctx, &UpdateBGPAsAServiceRequest{
			BGPAsAService: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteBGPAsAServiceServiceHealthCheckRefResponse{
		ID:                                 request.ID,
		BGPAsAServiceServiceHealthCheckRef: request.GetBGPAsAServiceServiceHealthCheckRef(),
	}, nil
}

func (s *BaseService) CreateBGPAsAServiceVirtualMachineInterfaceRef(ctx context.Context, request *CreateBGPAsAServiceVirtualMachineInterfaceRefRequest) (*CreateBGPAsAServiceVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateBGPAsAServiceVirtualMachineInterfaceRefResponse{
			ID:                                      request.ID,
			BGPAsAServiceVirtualMachineInterfaceRef: request.GetBGPAsAServiceVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().CreateBGPAsAServiceVirtualMachineInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteBGPAsAServiceVirtualMachineInterfaceRef(ctx context.Context, request *DeleteBGPAsAServiceVirtualMachineInterfaceRefRequest) (*DeleteBGPAsAServiceVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteBGPAsAServiceVirtualMachineInterfaceRefResponse{
			ID:                                      request.ID,
			BGPAsAServiceVirtualMachineInterfaceRef: request.GetBGPAsAServiceVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteBGPAsAServiceVirtualMachineInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateBGPAsAServiceVirtualMachineInterfaceRef(ctx context.Context, request *CreateBGPAsAServiceVirtualMachineInterfaceRefRequest) (*CreateBGPAsAServiceVirtualMachineInterfaceRefResponse, error) {
	refField := models.BGPAsAServiceFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPAsAService(ctx, &GetBGPAsAServiceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPAsAService
		obj.AddVirtualMachineInterfaceRef(request.BGPAsAServiceVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateBGPAsAService(ctx, &UpdateBGPAsAServiceRequest{
			BGPAsAService: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateBGPAsAServiceVirtualMachineInterfaceRefResponse{
		ID:                                      request.ID,
		BGPAsAServiceVirtualMachineInterfaceRef: request.GetBGPAsAServiceVirtualMachineInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteBGPAsAServiceVirtualMachineInterfaceRef(ctx context.Context, request *DeleteBGPAsAServiceVirtualMachineInterfaceRefRequest) (*DeleteBGPAsAServiceVirtualMachineInterfaceRefResponse, error) {
	refField := models.BGPAsAServiceFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPAsAService(ctx, &GetBGPAsAServiceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPAsAService
		obj.RemoveVirtualMachineInterfaceRef(request.BGPAsAServiceVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateBGPAsAService(ctx, &UpdateBGPAsAServiceRequest{
			BGPAsAService: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteBGPAsAServiceVirtualMachineInterfaceRefResponse{
		ID:                                      request.ID,
		BGPAsAServiceVirtualMachineInterfaceRef: request.GetBGPAsAServiceVirtualMachineInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateBGPAsAServiceTagRef(ctx context.Context, request *CreateBGPAsAServiceTagRefRequest) (*CreateBGPAsAServiceTagRefResponse, error) {
	if s.next == nil {
		return &CreateBGPAsAServiceTagRefResponse{
			ID:                  request.ID,
			BGPAsAServiceTagRef: request.GetBGPAsAServiceTagRef(),
		}, nil
	}
	return s.Next().CreateBGPAsAServiceTagRef(ctx, request)
}

func (s *BaseService) DeleteBGPAsAServiceTagRef(ctx context.Context, request *DeleteBGPAsAServiceTagRefRequest) (*DeleteBGPAsAServiceTagRefResponse, error) {
	if s.next == nil {
		return &DeleteBGPAsAServiceTagRefResponse{
			ID:                  request.ID,
			BGPAsAServiceTagRef: request.GetBGPAsAServiceTagRef(),
		}, nil
	}
	return s.Next().DeleteBGPAsAServiceTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateBGPAsAServiceTagRef(ctx context.Context, request *CreateBGPAsAServiceTagRefRequest) (*CreateBGPAsAServiceTagRefResponse, error) {
	refField := models.BGPAsAServiceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPAsAService(ctx, &GetBGPAsAServiceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPAsAService
		obj.AddTagRef(request.BGPAsAServiceTagRef)

		_, err = s.BaseService.UpdateBGPAsAService(ctx, &UpdateBGPAsAServiceRequest{
			BGPAsAService: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateBGPAsAServiceTagRefResponse{
		ID:                  request.ID,
		BGPAsAServiceTagRef: request.GetBGPAsAServiceTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteBGPAsAServiceTagRef(ctx context.Context, request *DeleteBGPAsAServiceTagRefRequest) (*DeleteBGPAsAServiceTagRefResponse, error) {
	refField := models.BGPAsAServiceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPAsAService(ctx, &GetBGPAsAServiceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPAsAService
		obj.RemoveTagRef(request.BGPAsAServiceTagRef)

		_, err = s.BaseService.UpdateBGPAsAService(ctx, &UpdateBGPAsAServiceRequest{
			BGPAsAService: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteBGPAsAServiceTagRefResponse{
		ID:                  request.ID,
		BGPAsAServiceTagRef: request.GetBGPAsAServiceTagRef(),
	}, nil
}

func (s *EventProducerService) CreateBGPAsAService(ctx context.Context, request *CreateBGPAsAServiceRequest) (*CreateBGPAsAServiceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateBGPAsAServiceRequest{
				CreateBGPAsAServiceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBGPAsAService(ctx, request)
}
func (s *EventProducerService) UpdateBGPAsAService(ctx context.Context, request *UpdateBGPAsAServiceRequest) (*UpdateBGPAsAServiceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateBGPAsAServiceRequest{
				UpdateBGPAsAServiceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateBGPAsAService(ctx, request)
}
func (s *EventProducerService) DeleteBGPAsAService(ctx context.Context, request *DeleteBGPAsAServiceRequest) (*DeleteBGPAsAServiceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteBGPAsAServiceRequest{
				DeleteBGPAsAServiceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBGPAsAService(ctx, request)
}

func (s *EventProducerService) CreateBGPAsAServiceVirtualMachineInterfaceRef(ctx context.Context, request *CreateBGPAsAServiceVirtualMachineInterfaceRefRequest) (*CreateBGPAsAServiceVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateBGPAsAServiceVirtualMachineInterfaceRefRequest{
			CreateBGPAsAServiceVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBGPAsAServiceVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteBGPAsAServiceVirtualMachineInterfaceRef(ctx context.Context, request *DeleteBGPAsAServiceVirtualMachineInterfaceRefRequest) (*DeleteBGPAsAServiceVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteBGPAsAServiceVirtualMachineInterfaceRefRequest{
			DeleteBGPAsAServiceVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBGPAsAServiceVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateBGPAsAServiceTagRef(ctx context.Context, request *CreateBGPAsAServiceTagRefRequest) (*CreateBGPAsAServiceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateBGPAsAServiceTagRefRequest{
			CreateBGPAsAServiceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBGPAsAServiceTagRef(ctx, request)
}

func (s *EventProducerService) DeleteBGPAsAServiceTagRef(ctx context.Context, request *DeleteBGPAsAServiceTagRefRequest) (*DeleteBGPAsAServiceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteBGPAsAServiceTagRefRequest{
			DeleteBGPAsAServiceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBGPAsAServiceTagRef(ctx, request)
}

func (s *EventProducerService) CreateBGPAsAServiceBGPRouterRef(ctx context.Context, request *CreateBGPAsAServiceBGPRouterRefRequest) (*CreateBGPAsAServiceBGPRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateBGPAsAServiceBGPRouterRefRequest{
			CreateBGPAsAServiceBGPRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBGPAsAServiceBGPRouterRef(ctx, request)
}

func (s *EventProducerService) DeleteBGPAsAServiceBGPRouterRef(ctx context.Context, request *DeleteBGPAsAServiceBGPRouterRefRequest) (*DeleteBGPAsAServiceBGPRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteBGPAsAServiceBGPRouterRefRequest{
			DeleteBGPAsAServiceBGPRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBGPAsAServiceBGPRouterRef(ctx, request)
}

func (s *EventProducerService) CreateBGPAsAServiceControlNodeZoneRef(ctx context.Context, request *CreateBGPAsAServiceControlNodeZoneRefRequest) (*CreateBGPAsAServiceControlNodeZoneRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateBGPAsAServiceControlNodeZoneRefRequest{
			CreateBGPAsAServiceControlNodeZoneRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBGPAsAServiceControlNodeZoneRef(ctx, request)
}

func (s *EventProducerService) DeleteBGPAsAServiceControlNodeZoneRef(ctx context.Context, request *DeleteBGPAsAServiceControlNodeZoneRefRequest) (*DeleteBGPAsAServiceControlNodeZoneRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteBGPAsAServiceControlNodeZoneRefRequest{
			DeleteBGPAsAServiceControlNodeZoneRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBGPAsAServiceControlNodeZoneRef(ctx, request)
}

func (s *EventProducerService) CreateBGPAsAServiceServiceHealthCheckRef(ctx context.Context, request *CreateBGPAsAServiceServiceHealthCheckRefRequest) (*CreateBGPAsAServiceServiceHealthCheckRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateBGPAsAServiceServiceHealthCheckRefRequest{
			CreateBGPAsAServiceServiceHealthCheckRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBGPAsAServiceServiceHealthCheckRef(ctx, request)
}

func (s *EventProducerService) DeleteBGPAsAServiceServiceHealthCheckRef(ctx context.Context, request *DeleteBGPAsAServiceServiceHealthCheckRefRequest) (*DeleteBGPAsAServiceServiceHealthCheckRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteBGPAsAServiceServiceHealthCheckRefRequest{
			DeleteBGPAsAServiceServiceHealthCheckRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBGPAsAServiceServiceHealthCheckRef(ctx, request)
}

func (e *Event_CreateBGPAsAServiceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBGPAsAServiceRequest
	model := request.BGPAsAService
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetBGPAsAService(ctx,
			&GetBGPAsAServiceRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateBGPAsAService(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateBGPAsAServiceRequest{
			CreateBGPAsAServiceRequest: &CreateBGPAsAServiceRequest{
				BGPAsAService: response.GetBGPAsAService(),
			},
		},
	}, nil
}

func (e *Event_CreateBGPAsAServiceRequest) ToUpdateEvent() *Event {
	request := e.CreateBGPAsAServiceRequest
	model := request.BGPAsAService
	return &Event{
		Request: &Event_UpdateBGPAsAServiceRequest{
			UpdateBGPAsAServiceRequest: &UpdateBGPAsAServiceRequest{
				BGPAsAService: model,
				FieldMask:     request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateBGPAsAServiceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateBGPAsAServiceRequest
	response, err := service.UpdateBGPAsAService(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateBGPAsAServiceRequest{
			UpdateBGPAsAServiceRequest: &UpdateBGPAsAServiceRequest{
				BGPAsAService: response.GetBGPAsAService(),
			},
		},
	}, nil
}

func (e *Event_UpdateBGPAsAServiceRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteBGPAsAServiceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBGPAsAServiceRequest
	_, err := service.DeleteBGPAsAService(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteBGPAsAServiceRequest{
			DeleteBGPAsAServiceRequest: &DeleteBGPAsAServiceRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateBGPAsAServiceVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBGPAsAServiceVirtualMachineInterfaceRefRequest
	if _, err := service.CreateBGPAsAServiceVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateBGPAsAServiceVirtualMachineInterfaceRefRequest{
		CreateBGPAsAServiceVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteBGPAsAServiceVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBGPAsAServiceVirtualMachineInterfaceRefRequest
	if _, err := service.DeleteBGPAsAServiceVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteBGPAsAServiceVirtualMachineInterfaceRefRequest{
		DeleteBGPAsAServiceVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateBGPAsAServiceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBGPAsAServiceTagRefRequest
	if _, err := service.CreateBGPAsAServiceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateBGPAsAServiceTagRefRequest{
		CreateBGPAsAServiceTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteBGPAsAServiceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBGPAsAServiceTagRefRequest
	if _, err := service.DeleteBGPAsAServiceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteBGPAsAServiceTagRefRequest{
		DeleteBGPAsAServiceTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateBGPAsAServiceBGPRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBGPAsAServiceBGPRouterRefRequest
	if _, err := service.CreateBGPAsAServiceBGPRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateBGPAsAServiceBGPRouterRefRequest{
		CreateBGPAsAServiceBGPRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeleteBGPAsAServiceBGPRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBGPAsAServiceBGPRouterRefRequest
	if _, err := service.DeleteBGPAsAServiceBGPRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteBGPAsAServiceBGPRouterRefRequest{
		DeleteBGPAsAServiceBGPRouterRefRequest: request,
	}}, nil
}

func (e *Event_CreateBGPAsAServiceControlNodeZoneRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBGPAsAServiceControlNodeZoneRefRequest
	if _, err := service.CreateBGPAsAServiceControlNodeZoneRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateBGPAsAServiceControlNodeZoneRefRequest{
		CreateBGPAsAServiceControlNodeZoneRefRequest: request,
	}}, nil
}

func (e *Event_DeleteBGPAsAServiceControlNodeZoneRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBGPAsAServiceControlNodeZoneRefRequest
	if _, err := service.DeleteBGPAsAServiceControlNodeZoneRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteBGPAsAServiceControlNodeZoneRefRequest{
		DeleteBGPAsAServiceControlNodeZoneRefRequest: request,
	}}, nil
}

func (e *Event_CreateBGPAsAServiceServiceHealthCheckRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBGPAsAServiceServiceHealthCheckRefRequest
	if _, err := service.CreateBGPAsAServiceServiceHealthCheckRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateBGPAsAServiceServiceHealthCheckRefRequest{
		CreateBGPAsAServiceServiceHealthCheckRefRequest: request,
	}}, nil
}

func (e *Event_DeleteBGPAsAServiceServiceHealthCheckRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBGPAsAServiceServiceHealthCheckRefRequest
	if _, err := service.DeleteBGPAsAServiceServiceHealthCheckRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteBGPAsAServiceServiceHealthCheckRefRequest{
		DeleteBGPAsAServiceServiceHealthCheckRefRequest: request,
	}}, nil
}

type BGPRouter = models.BGPRouter

func (s *BaseService) CreateBGPRouter(ctx context.Context, request *CreateBGPRouterRequest) (*CreateBGPRouterResponse, error) {
	if s.next == nil {
		return &CreateBGPRouterResponse{
			BGPRouter: request.GetBGPRouter(),
		}, nil
	}
	return s.Next().CreateBGPRouter(ctx, request)
}
func (s *BaseService) UpdateBGPRouter(ctx context.Context, request *UpdateBGPRouterRequest) (*UpdateBGPRouterResponse, error) {
	if s.next == nil {
		return &UpdateBGPRouterResponse{
			BGPRouter: request.GetBGPRouter(),
		}, nil
	}
	return s.Next().UpdateBGPRouter(ctx, request)
}
func (s *BaseService) DeleteBGPRouter(ctx context.Context, request *DeleteBGPRouterRequest) (*DeleteBGPRouterResponse, error) {
	if s.next == nil {
		return &DeleteBGPRouterResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteBGPRouter(ctx, request)
}
func (s *BaseService) GetBGPRouter(ctx context.Context, request *GetBGPRouterRequest) (*GetBGPRouterResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetBGPRouter(ctx, request)
}
func (s *BaseService) ListBGPRouter(ctx context.Context, request *ListBGPRouterRequest) (*ListBGPRouterResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListBGPRouter(ctx, request)
}

func (s *BaseService) CreateBGPRouterSubClusterRef(ctx context.Context, request *CreateBGPRouterSubClusterRefRequest) (*CreateBGPRouterSubClusterRefResponse, error) {
	if s.next == nil {
		return &CreateBGPRouterSubClusterRefResponse{
			ID:                     request.ID,
			BGPRouterSubClusterRef: request.GetBGPRouterSubClusterRef(),
		}, nil
	}
	return s.Next().CreateBGPRouterSubClusterRef(ctx, request)
}

func (s *BaseService) DeleteBGPRouterSubClusterRef(ctx context.Context, request *DeleteBGPRouterSubClusterRefRequest) (*DeleteBGPRouterSubClusterRefResponse, error) {
	if s.next == nil {
		return &DeleteBGPRouterSubClusterRefResponse{
			ID:                     request.ID,
			BGPRouterSubClusterRef: request.GetBGPRouterSubClusterRef(),
		}, nil
	}
	return s.Next().DeleteBGPRouterSubClusterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateBGPRouterSubClusterRef(ctx context.Context, request *CreateBGPRouterSubClusterRefRequest) (*CreateBGPRouterSubClusterRefResponse, error) {
	refField := models.BGPRouterFieldSubClusterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPRouter(ctx, &GetBGPRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPRouter
		obj.AddSubClusterRef(request.BGPRouterSubClusterRef)

		_, err = s.BaseService.UpdateBGPRouter(ctx, &UpdateBGPRouterRequest{
			BGPRouter: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateBGPRouterSubClusterRefResponse{
		ID:                     request.ID,
		BGPRouterSubClusterRef: request.GetBGPRouterSubClusterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteBGPRouterSubClusterRef(ctx context.Context, request *DeleteBGPRouterSubClusterRefRequest) (*DeleteBGPRouterSubClusterRefResponse, error) {
	refField := models.BGPRouterFieldSubClusterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPRouter(ctx, &GetBGPRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPRouter
		obj.RemoveSubClusterRef(request.BGPRouterSubClusterRef)

		_, err = s.BaseService.UpdateBGPRouter(ctx, &UpdateBGPRouterRequest{
			BGPRouter: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteBGPRouterSubClusterRefResponse{
		ID:                     request.ID,
		BGPRouterSubClusterRef: request.GetBGPRouterSubClusterRef(),
	}, nil
}

func (s *BaseService) CreateBGPRouterTagRef(ctx context.Context, request *CreateBGPRouterTagRefRequest) (*CreateBGPRouterTagRefResponse, error) {
	if s.next == nil {
		return &CreateBGPRouterTagRefResponse{
			ID:              request.ID,
			BGPRouterTagRef: request.GetBGPRouterTagRef(),
		}, nil
	}
	return s.Next().CreateBGPRouterTagRef(ctx, request)
}

func (s *BaseService) DeleteBGPRouterTagRef(ctx context.Context, request *DeleteBGPRouterTagRefRequest) (*DeleteBGPRouterTagRefResponse, error) {
	if s.next == nil {
		return &DeleteBGPRouterTagRefResponse{
			ID:              request.ID,
			BGPRouterTagRef: request.GetBGPRouterTagRef(),
		}, nil
	}
	return s.Next().DeleteBGPRouterTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateBGPRouterTagRef(ctx context.Context, request *CreateBGPRouterTagRefRequest) (*CreateBGPRouterTagRefResponse, error) {
	refField := models.BGPRouterFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPRouter(ctx, &GetBGPRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPRouter
		obj.AddTagRef(request.BGPRouterTagRef)

		_, err = s.BaseService.UpdateBGPRouter(ctx, &UpdateBGPRouterRequest{
			BGPRouter: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateBGPRouterTagRefResponse{
		ID:              request.ID,
		BGPRouterTagRef: request.GetBGPRouterTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteBGPRouterTagRef(ctx context.Context, request *DeleteBGPRouterTagRefRequest) (*DeleteBGPRouterTagRefResponse, error) {
	refField := models.BGPRouterFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPRouter(ctx, &GetBGPRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPRouter
		obj.RemoveTagRef(request.BGPRouterTagRef)

		_, err = s.BaseService.UpdateBGPRouter(ctx, &UpdateBGPRouterRequest{
			BGPRouter: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteBGPRouterTagRefResponse{
		ID:              request.ID,
		BGPRouterTagRef: request.GetBGPRouterTagRef(),
	}, nil
}

func (s *BaseService) CreateBGPRouterBGPRouterRef(ctx context.Context, request *CreateBGPRouterBGPRouterRefRequest) (*CreateBGPRouterBGPRouterRefResponse, error) {
	if s.next == nil {
		return &CreateBGPRouterBGPRouterRefResponse{
			ID:                    request.ID,
			BGPRouterBGPRouterRef: request.GetBGPRouterBGPRouterRef(),
		}, nil
	}
	return s.Next().CreateBGPRouterBGPRouterRef(ctx, request)
}

func (s *BaseService) DeleteBGPRouterBGPRouterRef(ctx context.Context, request *DeleteBGPRouterBGPRouterRefRequest) (*DeleteBGPRouterBGPRouterRefResponse, error) {
	if s.next == nil {
		return &DeleteBGPRouterBGPRouterRefResponse{
			ID:                    request.ID,
			BGPRouterBGPRouterRef: request.GetBGPRouterBGPRouterRef(),
		}, nil
	}
	return s.Next().DeleteBGPRouterBGPRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateBGPRouterBGPRouterRef(ctx context.Context, request *CreateBGPRouterBGPRouterRefRequest) (*CreateBGPRouterBGPRouterRefResponse, error) {
	refField := models.BGPRouterFieldBGPRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPRouter(ctx, &GetBGPRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPRouter
		obj.AddBGPRouterRef(request.BGPRouterBGPRouterRef)

		_, err = s.BaseService.UpdateBGPRouter(ctx, &UpdateBGPRouterRequest{
			BGPRouter: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateBGPRouterBGPRouterRefResponse{
		ID:                    request.ID,
		BGPRouterBGPRouterRef: request.GetBGPRouterBGPRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteBGPRouterBGPRouterRef(ctx context.Context, request *DeleteBGPRouterBGPRouterRefRequest) (*DeleteBGPRouterBGPRouterRefResponse, error) {
	refField := models.BGPRouterFieldBGPRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPRouter(ctx, &GetBGPRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPRouter
		obj.RemoveBGPRouterRef(request.BGPRouterBGPRouterRef)

		_, err = s.BaseService.UpdateBGPRouter(ctx, &UpdateBGPRouterRequest{
			BGPRouter: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteBGPRouterBGPRouterRefResponse{
		ID:                    request.ID,
		BGPRouterBGPRouterRef: request.GetBGPRouterBGPRouterRef(),
	}, nil
}

func (s *BaseService) CreateBGPRouterControlNodeZoneRef(ctx context.Context, request *CreateBGPRouterControlNodeZoneRefRequest) (*CreateBGPRouterControlNodeZoneRefResponse, error) {
	if s.next == nil {
		return &CreateBGPRouterControlNodeZoneRefResponse{
			ID:                          request.ID,
			BGPRouterControlNodeZoneRef: request.GetBGPRouterControlNodeZoneRef(),
		}, nil
	}
	return s.Next().CreateBGPRouterControlNodeZoneRef(ctx, request)
}

func (s *BaseService) DeleteBGPRouterControlNodeZoneRef(ctx context.Context, request *DeleteBGPRouterControlNodeZoneRefRequest) (*DeleteBGPRouterControlNodeZoneRefResponse, error) {
	if s.next == nil {
		return &DeleteBGPRouterControlNodeZoneRefResponse{
			ID:                          request.ID,
			BGPRouterControlNodeZoneRef: request.GetBGPRouterControlNodeZoneRef(),
		}, nil
	}
	return s.Next().DeleteBGPRouterControlNodeZoneRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateBGPRouterControlNodeZoneRef(ctx context.Context, request *CreateBGPRouterControlNodeZoneRefRequest) (*CreateBGPRouterControlNodeZoneRefResponse, error) {
	refField := models.BGPRouterFieldControlNodeZoneRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPRouter(ctx, &GetBGPRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPRouter
		obj.AddControlNodeZoneRef(request.BGPRouterControlNodeZoneRef)

		_, err = s.BaseService.UpdateBGPRouter(ctx, &UpdateBGPRouterRequest{
			BGPRouter: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateBGPRouterControlNodeZoneRefResponse{
		ID:                          request.ID,
		BGPRouterControlNodeZoneRef: request.GetBGPRouterControlNodeZoneRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteBGPRouterControlNodeZoneRef(ctx context.Context, request *DeleteBGPRouterControlNodeZoneRefRequest) (*DeleteBGPRouterControlNodeZoneRefResponse, error) {
	refField := models.BGPRouterFieldControlNodeZoneRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPRouter(ctx, &GetBGPRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPRouter
		obj.RemoveControlNodeZoneRef(request.BGPRouterControlNodeZoneRef)

		_, err = s.BaseService.UpdateBGPRouter(ctx, &UpdateBGPRouterRequest{
			BGPRouter: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteBGPRouterControlNodeZoneRefResponse{
		ID:                          request.ID,
		BGPRouterControlNodeZoneRef: request.GetBGPRouterControlNodeZoneRef(),
	}, nil
}

func (s *EventProducerService) CreateBGPRouter(ctx context.Context, request *CreateBGPRouterRequest) (*CreateBGPRouterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateBGPRouterRequest{
				CreateBGPRouterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBGPRouter(ctx, request)
}
func (s *EventProducerService) UpdateBGPRouter(ctx context.Context, request *UpdateBGPRouterRequest) (*UpdateBGPRouterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateBGPRouterRequest{
				UpdateBGPRouterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateBGPRouter(ctx, request)
}
func (s *EventProducerService) DeleteBGPRouter(ctx context.Context, request *DeleteBGPRouterRequest) (*DeleteBGPRouterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteBGPRouterRequest{
				DeleteBGPRouterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBGPRouter(ctx, request)
}

func (s *EventProducerService) CreateBGPRouterControlNodeZoneRef(ctx context.Context, request *CreateBGPRouterControlNodeZoneRefRequest) (*CreateBGPRouterControlNodeZoneRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateBGPRouterControlNodeZoneRefRequest{
			CreateBGPRouterControlNodeZoneRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBGPRouterControlNodeZoneRef(ctx, request)
}

func (s *EventProducerService) DeleteBGPRouterControlNodeZoneRef(ctx context.Context, request *DeleteBGPRouterControlNodeZoneRefRequest) (*DeleteBGPRouterControlNodeZoneRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteBGPRouterControlNodeZoneRefRequest{
			DeleteBGPRouterControlNodeZoneRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBGPRouterControlNodeZoneRef(ctx, request)
}

func (s *EventProducerService) CreateBGPRouterSubClusterRef(ctx context.Context, request *CreateBGPRouterSubClusterRefRequest) (*CreateBGPRouterSubClusterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateBGPRouterSubClusterRefRequest{
			CreateBGPRouterSubClusterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBGPRouterSubClusterRef(ctx, request)
}

func (s *EventProducerService) DeleteBGPRouterSubClusterRef(ctx context.Context, request *DeleteBGPRouterSubClusterRefRequest) (*DeleteBGPRouterSubClusterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteBGPRouterSubClusterRefRequest{
			DeleteBGPRouterSubClusterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBGPRouterSubClusterRef(ctx, request)
}

func (s *EventProducerService) CreateBGPRouterTagRef(ctx context.Context, request *CreateBGPRouterTagRefRequest) (*CreateBGPRouterTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateBGPRouterTagRefRequest{
			CreateBGPRouterTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBGPRouterTagRef(ctx, request)
}

func (s *EventProducerService) DeleteBGPRouterTagRef(ctx context.Context, request *DeleteBGPRouterTagRefRequest) (*DeleteBGPRouterTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteBGPRouterTagRefRequest{
			DeleteBGPRouterTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBGPRouterTagRef(ctx, request)
}

func (s *EventProducerService) CreateBGPRouterBGPRouterRef(ctx context.Context, request *CreateBGPRouterBGPRouterRefRequest) (*CreateBGPRouterBGPRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateBGPRouterBGPRouterRefRequest{
			CreateBGPRouterBGPRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBGPRouterBGPRouterRef(ctx, request)
}

func (s *EventProducerService) DeleteBGPRouterBGPRouterRef(ctx context.Context, request *DeleteBGPRouterBGPRouterRefRequest) (*DeleteBGPRouterBGPRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteBGPRouterBGPRouterRefRequest{
			DeleteBGPRouterBGPRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBGPRouterBGPRouterRef(ctx, request)
}

func (e *Event_CreateBGPRouterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBGPRouterRequest
	model := request.BGPRouter
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetBGPRouter(ctx,
			&GetBGPRouterRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateBGPRouter(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateBGPRouterRequest{
			CreateBGPRouterRequest: &CreateBGPRouterRequest{
				BGPRouter: response.GetBGPRouter(),
			},
		},
	}, nil
}

func (e *Event_CreateBGPRouterRequest) ToUpdateEvent() *Event {
	request := e.CreateBGPRouterRequest
	model := request.BGPRouter
	return &Event{
		Request: &Event_UpdateBGPRouterRequest{
			UpdateBGPRouterRequest: &UpdateBGPRouterRequest{
				BGPRouter: model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateBGPRouterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateBGPRouterRequest
	response, err := service.UpdateBGPRouter(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateBGPRouterRequest{
			UpdateBGPRouterRequest: &UpdateBGPRouterRequest{
				BGPRouter: response.GetBGPRouter(),
			},
		},
	}, nil
}

func (e *Event_UpdateBGPRouterRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteBGPRouterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBGPRouterRequest
	_, err := service.DeleteBGPRouter(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteBGPRouterRequest{
			DeleteBGPRouterRequest: &DeleteBGPRouterRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateBGPRouterTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBGPRouterTagRefRequest
	if _, err := service.CreateBGPRouterTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateBGPRouterTagRefRequest{
		CreateBGPRouterTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteBGPRouterTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBGPRouterTagRefRequest
	if _, err := service.DeleteBGPRouterTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteBGPRouterTagRefRequest{
		DeleteBGPRouterTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateBGPRouterBGPRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBGPRouterBGPRouterRefRequest
	if _, err := service.CreateBGPRouterBGPRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateBGPRouterBGPRouterRefRequest{
		CreateBGPRouterBGPRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeleteBGPRouterBGPRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBGPRouterBGPRouterRefRequest
	if _, err := service.DeleteBGPRouterBGPRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteBGPRouterBGPRouterRefRequest{
		DeleteBGPRouterBGPRouterRefRequest: request,
	}}, nil
}

func (e *Event_CreateBGPRouterControlNodeZoneRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBGPRouterControlNodeZoneRefRequest
	if _, err := service.CreateBGPRouterControlNodeZoneRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateBGPRouterControlNodeZoneRefRequest{
		CreateBGPRouterControlNodeZoneRefRequest: request,
	}}, nil
}

func (e *Event_DeleteBGPRouterControlNodeZoneRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBGPRouterControlNodeZoneRefRequest
	if _, err := service.DeleteBGPRouterControlNodeZoneRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteBGPRouterControlNodeZoneRefRequest{
		DeleteBGPRouterControlNodeZoneRefRequest: request,
	}}, nil
}

func (e *Event_CreateBGPRouterSubClusterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBGPRouterSubClusterRefRequest
	if _, err := service.CreateBGPRouterSubClusterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateBGPRouterSubClusterRefRequest{
		CreateBGPRouterSubClusterRefRequest: request,
	}}, nil
}

func (e *Event_DeleteBGPRouterSubClusterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBGPRouterSubClusterRefRequest
	if _, err := service.DeleteBGPRouterSubClusterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteBGPRouterSubClusterRefRequest{
		DeleteBGPRouterSubClusterRefRequest: request,
	}}, nil
}

type BGPVPN = models.BGPVPN

func (s *BaseService) CreateBGPVPN(ctx context.Context, request *CreateBGPVPNRequest) (*CreateBGPVPNResponse, error) {
	if s.next == nil {
		return &CreateBGPVPNResponse{
			BGPVPN: request.GetBGPVPN(),
		}, nil
	}
	return s.Next().CreateBGPVPN(ctx, request)
}
func (s *BaseService) UpdateBGPVPN(ctx context.Context, request *UpdateBGPVPNRequest) (*UpdateBGPVPNResponse, error) {
	if s.next == nil {
		return &UpdateBGPVPNResponse{
			BGPVPN: request.GetBGPVPN(),
		}, nil
	}
	return s.Next().UpdateBGPVPN(ctx, request)
}
func (s *BaseService) DeleteBGPVPN(ctx context.Context, request *DeleteBGPVPNRequest) (*DeleteBGPVPNResponse, error) {
	if s.next == nil {
		return &DeleteBGPVPNResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteBGPVPN(ctx, request)
}
func (s *BaseService) GetBGPVPN(ctx context.Context, request *GetBGPVPNRequest) (*GetBGPVPNResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetBGPVPN(ctx, request)
}
func (s *BaseService) ListBGPVPN(ctx context.Context, request *ListBGPVPNRequest) (*ListBGPVPNResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListBGPVPN(ctx, request)
}

func (s *BaseService) CreateBGPVPNTagRef(ctx context.Context, request *CreateBGPVPNTagRefRequest) (*CreateBGPVPNTagRefResponse, error) {
	if s.next == nil {
		return &CreateBGPVPNTagRefResponse{
			ID:           request.ID,
			BGPVPNTagRef: request.GetBGPVPNTagRef(),
		}, nil
	}
	return s.Next().CreateBGPVPNTagRef(ctx, request)
}

func (s *BaseService) DeleteBGPVPNTagRef(ctx context.Context, request *DeleteBGPVPNTagRefRequest) (*DeleteBGPVPNTagRefResponse, error) {
	if s.next == nil {
		return &DeleteBGPVPNTagRefResponse{
			ID:           request.ID,
			BGPVPNTagRef: request.GetBGPVPNTagRef(),
		}, nil
	}
	return s.Next().DeleteBGPVPNTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateBGPVPNTagRef(ctx context.Context, request *CreateBGPVPNTagRefRequest) (*CreateBGPVPNTagRefResponse, error) {
	refField := models.BGPVPNFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPVPN(ctx, &GetBGPVPNRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPVPN
		obj.AddTagRef(request.BGPVPNTagRef)

		_, err = s.BaseService.UpdateBGPVPN(ctx, &UpdateBGPVPNRequest{
			BGPVPN:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateBGPVPNTagRefResponse{
		ID:           request.ID,
		BGPVPNTagRef: request.GetBGPVPNTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteBGPVPNTagRef(ctx context.Context, request *DeleteBGPVPNTagRefRequest) (*DeleteBGPVPNTagRefResponse, error) {
	refField := models.BGPVPNFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBGPVPN(ctx, &GetBGPVPNRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BGPVPN
		obj.RemoveTagRef(request.BGPVPNTagRef)

		_, err = s.BaseService.UpdateBGPVPN(ctx, &UpdateBGPVPNRequest{
			BGPVPN:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteBGPVPNTagRefResponse{
		ID:           request.ID,
		BGPVPNTagRef: request.GetBGPVPNTagRef(),
	}, nil
}

func (s *EventProducerService) CreateBGPVPN(ctx context.Context, request *CreateBGPVPNRequest) (*CreateBGPVPNResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateBGPVPNRequest{
				CreateBGPVPNRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBGPVPN(ctx, request)
}
func (s *EventProducerService) UpdateBGPVPN(ctx context.Context, request *UpdateBGPVPNRequest) (*UpdateBGPVPNResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateBGPVPNRequest{
				UpdateBGPVPNRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateBGPVPN(ctx, request)
}
func (s *EventProducerService) DeleteBGPVPN(ctx context.Context, request *DeleteBGPVPNRequest) (*DeleteBGPVPNResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteBGPVPNRequest{
				DeleteBGPVPNRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBGPVPN(ctx, request)
}

func (s *EventProducerService) CreateBGPVPNTagRef(ctx context.Context, request *CreateBGPVPNTagRefRequest) (*CreateBGPVPNTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateBGPVPNTagRefRequest{
			CreateBGPVPNTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBGPVPNTagRef(ctx, request)
}

func (s *EventProducerService) DeleteBGPVPNTagRef(ctx context.Context, request *DeleteBGPVPNTagRefRequest) (*DeleteBGPVPNTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteBGPVPNTagRefRequest{
			DeleteBGPVPNTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBGPVPNTagRef(ctx, request)
}

func (e *Event_CreateBGPVPNRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBGPVPNRequest
	model := request.BGPVPN
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetBGPVPN(ctx,
			&GetBGPVPNRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateBGPVPN(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateBGPVPNRequest{
			CreateBGPVPNRequest: &CreateBGPVPNRequest{
				BGPVPN: response.GetBGPVPN(),
			},
		},
	}, nil
}

func (e *Event_CreateBGPVPNRequest) ToUpdateEvent() *Event {
	request := e.CreateBGPVPNRequest
	model := request.BGPVPN
	return &Event{
		Request: &Event_UpdateBGPVPNRequest{
			UpdateBGPVPNRequest: &UpdateBGPVPNRequest{
				BGPVPN:    model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateBGPVPNRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateBGPVPNRequest
	response, err := service.UpdateBGPVPN(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateBGPVPNRequest{
			UpdateBGPVPNRequest: &UpdateBGPVPNRequest{
				BGPVPN: response.GetBGPVPN(),
			},
		},
	}, nil
}

func (e *Event_UpdateBGPVPNRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteBGPVPNRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBGPVPNRequest
	_, err := service.DeleteBGPVPN(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteBGPVPNRequest{
			DeleteBGPVPNRequest: &DeleteBGPVPNRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateBGPVPNTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBGPVPNTagRefRequest
	if _, err := service.CreateBGPVPNTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateBGPVPNTagRefRequest{
		CreateBGPVPNTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteBGPVPNTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBGPVPNTagRefRequest
	if _, err := service.DeleteBGPVPNTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteBGPVPNTagRefRequest{
		DeleteBGPVPNTagRefRequest: request,
	}}, nil
}

type BridgeDomain = models.BridgeDomain

func (s *BaseService) CreateBridgeDomain(ctx context.Context, request *CreateBridgeDomainRequest) (*CreateBridgeDomainResponse, error) {
	if s.next == nil {
		return &CreateBridgeDomainResponse{
			BridgeDomain: request.GetBridgeDomain(),
		}, nil
	}
	return s.Next().CreateBridgeDomain(ctx, request)
}
func (s *BaseService) UpdateBridgeDomain(ctx context.Context, request *UpdateBridgeDomainRequest) (*UpdateBridgeDomainResponse, error) {
	if s.next == nil {
		return &UpdateBridgeDomainResponse{
			BridgeDomain: request.GetBridgeDomain(),
		}, nil
	}
	return s.Next().UpdateBridgeDomain(ctx, request)
}
func (s *BaseService) DeleteBridgeDomain(ctx context.Context, request *DeleteBridgeDomainRequest) (*DeleteBridgeDomainResponse, error) {
	if s.next == nil {
		return &DeleteBridgeDomainResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteBridgeDomain(ctx, request)
}
func (s *BaseService) GetBridgeDomain(ctx context.Context, request *GetBridgeDomainRequest) (*GetBridgeDomainResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetBridgeDomain(ctx, request)
}
func (s *BaseService) ListBridgeDomain(ctx context.Context, request *ListBridgeDomainRequest) (*ListBridgeDomainResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListBridgeDomain(ctx, request)
}

func (s *BaseService) CreateBridgeDomainTagRef(ctx context.Context, request *CreateBridgeDomainTagRefRequest) (*CreateBridgeDomainTagRefResponse, error) {
	if s.next == nil {
		return &CreateBridgeDomainTagRefResponse{
			ID:                 request.ID,
			BridgeDomainTagRef: request.GetBridgeDomainTagRef(),
		}, nil
	}
	return s.Next().CreateBridgeDomainTagRef(ctx, request)
}

func (s *BaseService) DeleteBridgeDomainTagRef(ctx context.Context, request *DeleteBridgeDomainTagRefRequest) (*DeleteBridgeDomainTagRefResponse, error) {
	if s.next == nil {
		return &DeleteBridgeDomainTagRefResponse{
			ID:                 request.ID,
			BridgeDomainTagRef: request.GetBridgeDomainTagRef(),
		}, nil
	}
	return s.Next().DeleteBridgeDomainTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateBridgeDomainTagRef(ctx context.Context, request *CreateBridgeDomainTagRefRequest) (*CreateBridgeDomainTagRefResponse, error) {
	refField := models.BridgeDomainFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBridgeDomain(ctx, &GetBridgeDomainRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BridgeDomain
		obj.AddTagRef(request.BridgeDomainTagRef)

		_, err = s.BaseService.UpdateBridgeDomain(ctx, &UpdateBridgeDomainRequest{
			BridgeDomain: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateBridgeDomainTagRefResponse{
		ID:                 request.ID,
		BridgeDomainTagRef: request.GetBridgeDomainTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteBridgeDomainTagRef(ctx context.Context, request *DeleteBridgeDomainTagRefRequest) (*DeleteBridgeDomainTagRefResponse, error) {
	refField := models.BridgeDomainFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetBridgeDomain(ctx, &GetBridgeDomainRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.BridgeDomain
		obj.RemoveTagRef(request.BridgeDomainTagRef)

		_, err = s.BaseService.UpdateBridgeDomain(ctx, &UpdateBridgeDomainRequest{
			BridgeDomain: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteBridgeDomainTagRefResponse{
		ID:                 request.ID,
		BridgeDomainTagRef: request.GetBridgeDomainTagRef(),
	}, nil
}

func (s *EventProducerService) CreateBridgeDomain(ctx context.Context, request *CreateBridgeDomainRequest) (*CreateBridgeDomainResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateBridgeDomainRequest{
				CreateBridgeDomainRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBridgeDomain(ctx, request)
}
func (s *EventProducerService) UpdateBridgeDomain(ctx context.Context, request *UpdateBridgeDomainRequest) (*UpdateBridgeDomainResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateBridgeDomainRequest{
				UpdateBridgeDomainRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateBridgeDomain(ctx, request)
}
func (s *EventProducerService) DeleteBridgeDomain(ctx context.Context, request *DeleteBridgeDomainRequest) (*DeleteBridgeDomainResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteBridgeDomainRequest{
				DeleteBridgeDomainRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBridgeDomain(ctx, request)
}

func (s *EventProducerService) CreateBridgeDomainTagRef(ctx context.Context, request *CreateBridgeDomainTagRefRequest) (*CreateBridgeDomainTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateBridgeDomainTagRefRequest{
			CreateBridgeDomainTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateBridgeDomainTagRef(ctx, request)
}

func (s *EventProducerService) DeleteBridgeDomainTagRef(ctx context.Context, request *DeleteBridgeDomainTagRefRequest) (*DeleteBridgeDomainTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteBridgeDomainTagRefRequest{
			DeleteBridgeDomainTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteBridgeDomainTagRef(ctx, request)
}

func (e *Event_CreateBridgeDomainRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBridgeDomainRequest
	model := request.BridgeDomain
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetBridgeDomain(ctx,
			&GetBridgeDomainRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateBridgeDomain(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateBridgeDomainRequest{
			CreateBridgeDomainRequest: &CreateBridgeDomainRequest{
				BridgeDomain: response.GetBridgeDomain(),
			},
		},
	}, nil
}

func (e *Event_CreateBridgeDomainRequest) ToUpdateEvent() *Event {
	request := e.CreateBridgeDomainRequest
	model := request.BridgeDomain
	return &Event{
		Request: &Event_UpdateBridgeDomainRequest{
			UpdateBridgeDomainRequest: &UpdateBridgeDomainRequest{
				BridgeDomain: model,
				FieldMask:    request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateBridgeDomainRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateBridgeDomainRequest
	response, err := service.UpdateBridgeDomain(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateBridgeDomainRequest{
			UpdateBridgeDomainRequest: &UpdateBridgeDomainRequest{
				BridgeDomain: response.GetBridgeDomain(),
			},
		},
	}, nil
}

func (e *Event_UpdateBridgeDomainRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteBridgeDomainRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBridgeDomainRequest
	_, err := service.DeleteBridgeDomain(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteBridgeDomainRequest{
			DeleteBridgeDomainRequest: &DeleteBridgeDomainRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateBridgeDomainTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateBridgeDomainTagRefRequest
	if _, err := service.CreateBridgeDomainTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateBridgeDomainTagRefRequest{
		CreateBridgeDomainTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteBridgeDomainTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteBridgeDomainTagRefRequest
	if _, err := service.DeleteBridgeDomainTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteBridgeDomainTagRefRequest{
		DeleteBridgeDomainTagRefRequest: request,
	}}, nil
}

type Card = models.Card

func (s *BaseService) CreateCard(ctx context.Context, request *CreateCardRequest) (*CreateCardResponse, error) {
	if s.next == nil {
		return &CreateCardResponse{
			Card: request.GetCard(),
		}, nil
	}
	return s.Next().CreateCard(ctx, request)
}
func (s *BaseService) UpdateCard(ctx context.Context, request *UpdateCardRequest) (*UpdateCardResponse, error) {
	if s.next == nil {
		return &UpdateCardResponse{
			Card: request.GetCard(),
		}, nil
	}
	return s.Next().UpdateCard(ctx, request)
}
func (s *BaseService) DeleteCard(ctx context.Context, request *DeleteCardRequest) (*DeleteCardResponse, error) {
	if s.next == nil {
		return &DeleteCardResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteCard(ctx, request)
}
func (s *BaseService) GetCard(ctx context.Context, request *GetCardRequest) (*GetCardResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetCard(ctx, request)
}
func (s *BaseService) ListCard(ctx context.Context, request *ListCardRequest) (*ListCardResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListCard(ctx, request)
}

func (s *BaseService) CreateCardTagRef(ctx context.Context, request *CreateCardTagRefRequest) (*CreateCardTagRefResponse, error) {
	if s.next == nil {
		return &CreateCardTagRefResponse{
			ID:         request.ID,
			CardTagRef: request.GetCardTagRef(),
		}, nil
	}
	return s.Next().CreateCardTagRef(ctx, request)
}

func (s *BaseService) DeleteCardTagRef(ctx context.Context, request *DeleteCardTagRefRequest) (*DeleteCardTagRefResponse, error) {
	if s.next == nil {
		return &DeleteCardTagRefResponse{
			ID:         request.ID,
			CardTagRef: request.GetCardTagRef(),
		}, nil
	}
	return s.Next().DeleteCardTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateCardTagRef(ctx context.Context, request *CreateCardTagRefRequest) (*CreateCardTagRefResponse, error) {
	refField := models.CardFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetCard(ctx, &GetCardRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Card
		obj.AddTagRef(request.CardTagRef)

		_, err = s.BaseService.UpdateCard(ctx, &UpdateCardRequest{
			Card:      obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateCardTagRefResponse{
		ID:         request.ID,
		CardTagRef: request.GetCardTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteCardTagRef(ctx context.Context, request *DeleteCardTagRefRequest) (*DeleteCardTagRefResponse, error) {
	refField := models.CardFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetCard(ctx, &GetCardRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Card
		obj.RemoveTagRef(request.CardTagRef)

		_, err = s.BaseService.UpdateCard(ctx, &UpdateCardRequest{
			Card:      obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteCardTagRefResponse{
		ID:         request.ID,
		CardTagRef: request.GetCardTagRef(),
	}, nil
}

func (s *EventProducerService) CreateCard(ctx context.Context, request *CreateCardRequest) (*CreateCardResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateCardRequest{
				CreateCardRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateCard(ctx, request)
}
func (s *EventProducerService) UpdateCard(ctx context.Context, request *UpdateCardRequest) (*UpdateCardResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateCardRequest{
				UpdateCardRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateCard(ctx, request)
}
func (s *EventProducerService) DeleteCard(ctx context.Context, request *DeleteCardRequest) (*DeleteCardResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteCardRequest{
				DeleteCardRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteCard(ctx, request)
}

func (s *EventProducerService) CreateCardTagRef(ctx context.Context, request *CreateCardTagRefRequest) (*CreateCardTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateCardTagRefRequest{
			CreateCardTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateCardTagRef(ctx, request)
}

func (s *EventProducerService) DeleteCardTagRef(ctx context.Context, request *DeleteCardTagRefRequest) (*DeleteCardTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteCardTagRefRequest{
			DeleteCardTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteCardTagRef(ctx, request)
}

func (e *Event_CreateCardRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateCardRequest
	model := request.Card
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetCard(ctx,
			&GetCardRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateCard(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateCardRequest{
			CreateCardRequest: &CreateCardRequest{
				Card: response.GetCard(),
			},
		},
	}, nil
}

func (e *Event_CreateCardRequest) ToUpdateEvent() *Event {
	request := e.CreateCardRequest
	model := request.Card
	return &Event{
		Request: &Event_UpdateCardRequest{
			UpdateCardRequest: &UpdateCardRequest{
				Card:      model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateCardRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateCardRequest
	response, err := service.UpdateCard(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateCardRequest{
			UpdateCardRequest: &UpdateCardRequest{
				Card: response.GetCard(),
			},
		},
	}, nil
}

func (e *Event_UpdateCardRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteCardRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteCardRequest
	_, err := service.DeleteCard(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteCardRequest{
			DeleteCardRequest: &DeleteCardRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateCardTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateCardTagRefRequest
	if _, err := service.CreateCardTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateCardTagRefRequest{
		CreateCardTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteCardTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteCardTagRefRequest
	if _, err := service.DeleteCardTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteCardTagRefRequest{
		DeleteCardTagRefRequest: request,
	}}, nil
}

type CliConfig = models.CliConfig

func (s *BaseService) CreateCliConfig(ctx context.Context, request *CreateCliConfigRequest) (*CreateCliConfigResponse, error) {
	if s.next == nil {
		return &CreateCliConfigResponse{
			CliConfig: request.GetCliConfig(),
		}, nil
	}
	return s.Next().CreateCliConfig(ctx, request)
}
func (s *BaseService) UpdateCliConfig(ctx context.Context, request *UpdateCliConfigRequest) (*UpdateCliConfigResponse, error) {
	if s.next == nil {
		return &UpdateCliConfigResponse{
			CliConfig: request.GetCliConfig(),
		}, nil
	}
	return s.Next().UpdateCliConfig(ctx, request)
}
func (s *BaseService) DeleteCliConfig(ctx context.Context, request *DeleteCliConfigRequest) (*DeleteCliConfigResponse, error) {
	if s.next == nil {
		return &DeleteCliConfigResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteCliConfig(ctx, request)
}
func (s *BaseService) GetCliConfig(ctx context.Context, request *GetCliConfigRequest) (*GetCliConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetCliConfig(ctx, request)
}
func (s *BaseService) ListCliConfig(ctx context.Context, request *ListCliConfigRequest) (*ListCliConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListCliConfig(ctx, request)
}

func (s *BaseService) CreateCliConfigTagRef(ctx context.Context, request *CreateCliConfigTagRefRequest) (*CreateCliConfigTagRefResponse, error) {
	if s.next == nil {
		return &CreateCliConfigTagRefResponse{
			ID:              request.ID,
			CliConfigTagRef: request.GetCliConfigTagRef(),
		}, nil
	}
	return s.Next().CreateCliConfigTagRef(ctx, request)
}

func (s *BaseService) DeleteCliConfigTagRef(ctx context.Context, request *DeleteCliConfigTagRefRequest) (*DeleteCliConfigTagRefResponse, error) {
	if s.next == nil {
		return &DeleteCliConfigTagRefResponse{
			ID:              request.ID,
			CliConfigTagRef: request.GetCliConfigTagRef(),
		}, nil
	}
	return s.Next().DeleteCliConfigTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateCliConfigTagRef(ctx context.Context, request *CreateCliConfigTagRefRequest) (*CreateCliConfigTagRefResponse, error) {
	refField := models.CliConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetCliConfig(ctx, &GetCliConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.CliConfig
		obj.AddTagRef(request.CliConfigTagRef)

		_, err = s.BaseService.UpdateCliConfig(ctx, &UpdateCliConfigRequest{
			CliConfig: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateCliConfigTagRefResponse{
		ID:              request.ID,
		CliConfigTagRef: request.GetCliConfigTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteCliConfigTagRef(ctx context.Context, request *DeleteCliConfigTagRefRequest) (*DeleteCliConfigTagRefResponse, error) {
	refField := models.CliConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetCliConfig(ctx, &GetCliConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.CliConfig
		obj.RemoveTagRef(request.CliConfigTagRef)

		_, err = s.BaseService.UpdateCliConfig(ctx, &UpdateCliConfigRequest{
			CliConfig: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteCliConfigTagRefResponse{
		ID:              request.ID,
		CliConfigTagRef: request.GetCliConfigTagRef(),
	}, nil
}

func (s *EventProducerService) CreateCliConfig(ctx context.Context, request *CreateCliConfigRequest) (*CreateCliConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateCliConfigRequest{
				CreateCliConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateCliConfig(ctx, request)
}
func (s *EventProducerService) UpdateCliConfig(ctx context.Context, request *UpdateCliConfigRequest) (*UpdateCliConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateCliConfigRequest{
				UpdateCliConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateCliConfig(ctx, request)
}
func (s *EventProducerService) DeleteCliConfig(ctx context.Context, request *DeleteCliConfigRequest) (*DeleteCliConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteCliConfigRequest{
				DeleteCliConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteCliConfig(ctx, request)
}

func (s *EventProducerService) CreateCliConfigTagRef(ctx context.Context, request *CreateCliConfigTagRefRequest) (*CreateCliConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateCliConfigTagRefRequest{
			CreateCliConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateCliConfigTagRef(ctx, request)
}

func (s *EventProducerService) DeleteCliConfigTagRef(ctx context.Context, request *DeleteCliConfigTagRefRequest) (*DeleteCliConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteCliConfigTagRefRequest{
			DeleteCliConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteCliConfigTagRef(ctx, request)
}

func (e *Event_CreateCliConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateCliConfigRequest
	model := request.CliConfig
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetCliConfig(ctx,
			&GetCliConfigRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateCliConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateCliConfigRequest{
			CreateCliConfigRequest: &CreateCliConfigRequest{
				CliConfig: response.GetCliConfig(),
			},
		},
	}, nil
}

func (e *Event_CreateCliConfigRequest) ToUpdateEvent() *Event {
	request := e.CreateCliConfigRequest
	model := request.CliConfig
	return &Event{
		Request: &Event_UpdateCliConfigRequest{
			UpdateCliConfigRequest: &UpdateCliConfigRequest{
				CliConfig: model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateCliConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateCliConfigRequest
	response, err := service.UpdateCliConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateCliConfigRequest{
			UpdateCliConfigRequest: &UpdateCliConfigRequest{
				CliConfig: response.GetCliConfig(),
			},
		},
	}, nil
}

func (e *Event_UpdateCliConfigRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteCliConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteCliConfigRequest
	_, err := service.DeleteCliConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteCliConfigRequest{
			DeleteCliConfigRequest: &DeleteCliConfigRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateCliConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateCliConfigTagRefRequest
	if _, err := service.CreateCliConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateCliConfigTagRefRequest{
		CreateCliConfigTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteCliConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteCliConfigTagRefRequest
	if _, err := service.DeleteCliConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteCliConfigTagRefRequest{
		DeleteCliConfigTagRefRequest: request,
	}}, nil
}

type ConfigDatabaseNode = models.ConfigDatabaseNode

func (s *BaseService) CreateConfigDatabaseNode(ctx context.Context, request *CreateConfigDatabaseNodeRequest) (*CreateConfigDatabaseNodeResponse, error) {
	if s.next == nil {
		return &CreateConfigDatabaseNodeResponse{
			ConfigDatabaseNode: request.GetConfigDatabaseNode(),
		}, nil
	}
	return s.Next().CreateConfigDatabaseNode(ctx, request)
}
func (s *BaseService) UpdateConfigDatabaseNode(ctx context.Context, request *UpdateConfigDatabaseNodeRequest) (*UpdateConfigDatabaseNodeResponse, error) {
	if s.next == nil {
		return &UpdateConfigDatabaseNodeResponse{
			ConfigDatabaseNode: request.GetConfigDatabaseNode(),
		}, nil
	}
	return s.Next().UpdateConfigDatabaseNode(ctx, request)
}
func (s *BaseService) DeleteConfigDatabaseNode(ctx context.Context, request *DeleteConfigDatabaseNodeRequest) (*DeleteConfigDatabaseNodeResponse, error) {
	if s.next == nil {
		return &DeleteConfigDatabaseNodeResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteConfigDatabaseNode(ctx, request)
}
func (s *BaseService) GetConfigDatabaseNode(ctx context.Context, request *GetConfigDatabaseNodeRequest) (*GetConfigDatabaseNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetConfigDatabaseNode(ctx, request)
}
func (s *BaseService) ListConfigDatabaseNode(ctx context.Context, request *ListConfigDatabaseNodeRequest) (*ListConfigDatabaseNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListConfigDatabaseNode(ctx, request)
}

func (s *BaseService) CreateConfigDatabaseNodeTagRef(ctx context.Context, request *CreateConfigDatabaseNodeTagRefRequest) (*CreateConfigDatabaseNodeTagRefResponse, error) {
	if s.next == nil {
		return &CreateConfigDatabaseNodeTagRefResponse{
			ID:                       request.ID,
			ConfigDatabaseNodeTagRef: request.GetConfigDatabaseNodeTagRef(),
		}, nil
	}
	return s.Next().CreateConfigDatabaseNodeTagRef(ctx, request)
}

func (s *BaseService) DeleteConfigDatabaseNodeTagRef(ctx context.Context, request *DeleteConfigDatabaseNodeTagRefRequest) (*DeleteConfigDatabaseNodeTagRefResponse, error) {
	if s.next == nil {
		return &DeleteConfigDatabaseNodeTagRefResponse{
			ID:                       request.ID,
			ConfigDatabaseNodeTagRef: request.GetConfigDatabaseNodeTagRef(),
		}, nil
	}
	return s.Next().DeleteConfigDatabaseNodeTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateConfigDatabaseNodeTagRef(ctx context.Context, request *CreateConfigDatabaseNodeTagRefRequest) (*CreateConfigDatabaseNodeTagRefResponse, error) {
	refField := models.ConfigDatabaseNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetConfigDatabaseNode(ctx, &GetConfigDatabaseNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ConfigDatabaseNode
		obj.AddTagRef(request.ConfigDatabaseNodeTagRef)

		_, err = s.BaseService.UpdateConfigDatabaseNode(ctx, &UpdateConfigDatabaseNodeRequest{
			ConfigDatabaseNode: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateConfigDatabaseNodeTagRefResponse{
		ID:                       request.ID,
		ConfigDatabaseNodeTagRef: request.GetConfigDatabaseNodeTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteConfigDatabaseNodeTagRef(ctx context.Context, request *DeleteConfigDatabaseNodeTagRefRequest) (*DeleteConfigDatabaseNodeTagRefResponse, error) {
	refField := models.ConfigDatabaseNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetConfigDatabaseNode(ctx, &GetConfigDatabaseNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ConfigDatabaseNode
		obj.RemoveTagRef(request.ConfigDatabaseNodeTagRef)

		_, err = s.BaseService.UpdateConfigDatabaseNode(ctx, &UpdateConfigDatabaseNodeRequest{
			ConfigDatabaseNode: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteConfigDatabaseNodeTagRefResponse{
		ID:                       request.ID,
		ConfigDatabaseNodeTagRef: request.GetConfigDatabaseNodeTagRef(),
	}, nil
}

func (s *EventProducerService) CreateConfigDatabaseNode(ctx context.Context, request *CreateConfigDatabaseNodeRequest) (*CreateConfigDatabaseNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateConfigDatabaseNodeRequest{
				CreateConfigDatabaseNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateConfigDatabaseNode(ctx, request)
}
func (s *EventProducerService) UpdateConfigDatabaseNode(ctx context.Context, request *UpdateConfigDatabaseNodeRequest) (*UpdateConfigDatabaseNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateConfigDatabaseNodeRequest{
				UpdateConfigDatabaseNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateConfigDatabaseNode(ctx, request)
}
func (s *EventProducerService) DeleteConfigDatabaseNode(ctx context.Context, request *DeleteConfigDatabaseNodeRequest) (*DeleteConfigDatabaseNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteConfigDatabaseNodeRequest{
				DeleteConfigDatabaseNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteConfigDatabaseNode(ctx, request)
}

func (s *EventProducerService) CreateConfigDatabaseNodeTagRef(ctx context.Context, request *CreateConfigDatabaseNodeTagRefRequest) (*CreateConfigDatabaseNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateConfigDatabaseNodeTagRefRequest{
			CreateConfigDatabaseNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateConfigDatabaseNodeTagRef(ctx, request)
}

func (s *EventProducerService) DeleteConfigDatabaseNodeTagRef(ctx context.Context, request *DeleteConfigDatabaseNodeTagRefRequest) (*DeleteConfigDatabaseNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteConfigDatabaseNodeTagRefRequest{
			DeleteConfigDatabaseNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteConfigDatabaseNodeTagRef(ctx, request)
}

func (e *Event_CreateConfigDatabaseNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateConfigDatabaseNodeRequest
	model := request.ConfigDatabaseNode
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetConfigDatabaseNode(ctx,
			&GetConfigDatabaseNodeRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateConfigDatabaseNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateConfigDatabaseNodeRequest{
			CreateConfigDatabaseNodeRequest: &CreateConfigDatabaseNodeRequest{
				ConfigDatabaseNode: response.GetConfigDatabaseNode(),
			},
		},
	}, nil
}

func (e *Event_CreateConfigDatabaseNodeRequest) ToUpdateEvent() *Event {
	request := e.CreateConfigDatabaseNodeRequest
	model := request.ConfigDatabaseNode
	return &Event{
		Request: &Event_UpdateConfigDatabaseNodeRequest{
			UpdateConfigDatabaseNodeRequest: &UpdateConfigDatabaseNodeRequest{
				ConfigDatabaseNode: model,
				FieldMask:          request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateConfigDatabaseNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateConfigDatabaseNodeRequest
	response, err := service.UpdateConfigDatabaseNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateConfigDatabaseNodeRequest{
			UpdateConfigDatabaseNodeRequest: &UpdateConfigDatabaseNodeRequest{
				ConfigDatabaseNode: response.GetConfigDatabaseNode(),
			},
		},
	}, nil
}

func (e *Event_UpdateConfigDatabaseNodeRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteConfigDatabaseNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteConfigDatabaseNodeRequest
	_, err := service.DeleteConfigDatabaseNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteConfigDatabaseNodeRequest{
			DeleteConfigDatabaseNodeRequest: &DeleteConfigDatabaseNodeRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateConfigDatabaseNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateConfigDatabaseNodeTagRefRequest
	if _, err := service.CreateConfigDatabaseNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateConfigDatabaseNodeTagRefRequest{
		CreateConfigDatabaseNodeTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteConfigDatabaseNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteConfigDatabaseNodeTagRefRequest
	if _, err := service.DeleteConfigDatabaseNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteConfigDatabaseNodeTagRefRequest{
		DeleteConfigDatabaseNodeTagRefRequest: request,
	}}, nil
}

type ConfigNode = models.ConfigNode

func (s *BaseService) CreateConfigNode(ctx context.Context, request *CreateConfigNodeRequest) (*CreateConfigNodeResponse, error) {
	if s.next == nil {
		return &CreateConfigNodeResponse{
			ConfigNode: request.GetConfigNode(),
		}, nil
	}
	return s.Next().CreateConfigNode(ctx, request)
}
func (s *BaseService) UpdateConfigNode(ctx context.Context, request *UpdateConfigNodeRequest) (*UpdateConfigNodeResponse, error) {
	if s.next == nil {
		return &UpdateConfigNodeResponse{
			ConfigNode: request.GetConfigNode(),
		}, nil
	}
	return s.Next().UpdateConfigNode(ctx, request)
}
func (s *BaseService) DeleteConfigNode(ctx context.Context, request *DeleteConfigNodeRequest) (*DeleteConfigNodeResponse, error) {
	if s.next == nil {
		return &DeleteConfigNodeResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteConfigNode(ctx, request)
}
func (s *BaseService) GetConfigNode(ctx context.Context, request *GetConfigNodeRequest) (*GetConfigNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetConfigNode(ctx, request)
}
func (s *BaseService) ListConfigNode(ctx context.Context, request *ListConfigNodeRequest) (*ListConfigNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListConfigNode(ctx, request)
}

func (s *BaseService) CreateConfigNodeTagRef(ctx context.Context, request *CreateConfigNodeTagRefRequest) (*CreateConfigNodeTagRefResponse, error) {
	if s.next == nil {
		return &CreateConfigNodeTagRefResponse{
			ID:               request.ID,
			ConfigNodeTagRef: request.GetConfigNodeTagRef(),
		}, nil
	}
	return s.Next().CreateConfigNodeTagRef(ctx, request)
}

func (s *BaseService) DeleteConfigNodeTagRef(ctx context.Context, request *DeleteConfigNodeTagRefRequest) (*DeleteConfigNodeTagRefResponse, error) {
	if s.next == nil {
		return &DeleteConfigNodeTagRefResponse{
			ID:               request.ID,
			ConfigNodeTagRef: request.GetConfigNodeTagRef(),
		}, nil
	}
	return s.Next().DeleteConfigNodeTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateConfigNodeTagRef(ctx context.Context, request *CreateConfigNodeTagRefRequest) (*CreateConfigNodeTagRefResponse, error) {
	refField := models.ConfigNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetConfigNode(ctx, &GetConfigNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ConfigNode
		obj.AddTagRef(request.ConfigNodeTagRef)

		_, err = s.BaseService.UpdateConfigNode(ctx, &UpdateConfigNodeRequest{
			ConfigNode: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateConfigNodeTagRefResponse{
		ID:               request.ID,
		ConfigNodeTagRef: request.GetConfigNodeTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteConfigNodeTagRef(ctx context.Context, request *DeleteConfigNodeTagRefRequest) (*DeleteConfigNodeTagRefResponse, error) {
	refField := models.ConfigNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetConfigNode(ctx, &GetConfigNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ConfigNode
		obj.RemoveTagRef(request.ConfigNodeTagRef)

		_, err = s.BaseService.UpdateConfigNode(ctx, &UpdateConfigNodeRequest{
			ConfigNode: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteConfigNodeTagRefResponse{
		ID:               request.ID,
		ConfigNodeTagRef: request.GetConfigNodeTagRef(),
	}, nil
}

func (s *EventProducerService) CreateConfigNode(ctx context.Context, request *CreateConfigNodeRequest) (*CreateConfigNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateConfigNodeRequest{
				CreateConfigNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateConfigNode(ctx, request)
}
func (s *EventProducerService) UpdateConfigNode(ctx context.Context, request *UpdateConfigNodeRequest) (*UpdateConfigNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateConfigNodeRequest{
				UpdateConfigNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateConfigNode(ctx, request)
}
func (s *EventProducerService) DeleteConfigNode(ctx context.Context, request *DeleteConfigNodeRequest) (*DeleteConfigNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteConfigNodeRequest{
				DeleteConfigNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteConfigNode(ctx, request)
}

func (s *EventProducerService) CreateConfigNodeTagRef(ctx context.Context, request *CreateConfigNodeTagRefRequest) (*CreateConfigNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateConfigNodeTagRefRequest{
			CreateConfigNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateConfigNodeTagRef(ctx, request)
}

func (s *EventProducerService) DeleteConfigNodeTagRef(ctx context.Context, request *DeleteConfigNodeTagRefRequest) (*DeleteConfigNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteConfigNodeTagRefRequest{
			DeleteConfigNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteConfigNodeTagRef(ctx, request)
}

func (e *Event_CreateConfigNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateConfigNodeRequest
	model := request.ConfigNode
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetConfigNode(ctx,
			&GetConfigNodeRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateConfigNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateConfigNodeRequest{
			CreateConfigNodeRequest: &CreateConfigNodeRequest{
				ConfigNode: response.GetConfigNode(),
			},
		},
	}, nil
}

func (e *Event_CreateConfigNodeRequest) ToUpdateEvent() *Event {
	request := e.CreateConfigNodeRequest
	model := request.ConfigNode
	return &Event{
		Request: &Event_UpdateConfigNodeRequest{
			UpdateConfigNodeRequest: &UpdateConfigNodeRequest{
				ConfigNode: model,
				FieldMask:  request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateConfigNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateConfigNodeRequest
	response, err := service.UpdateConfigNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateConfigNodeRequest{
			UpdateConfigNodeRequest: &UpdateConfigNodeRequest{
				ConfigNode: response.GetConfigNode(),
			},
		},
	}, nil
}

func (e *Event_UpdateConfigNodeRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteConfigNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteConfigNodeRequest
	_, err := service.DeleteConfigNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteConfigNodeRequest{
			DeleteConfigNodeRequest: &DeleteConfigNodeRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateConfigNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateConfigNodeTagRefRequest
	if _, err := service.CreateConfigNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateConfigNodeTagRefRequest{
		CreateConfigNodeTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteConfigNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteConfigNodeTagRefRequest
	if _, err := service.DeleteConfigNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteConfigNodeTagRefRequest{
		DeleteConfigNodeTagRefRequest: request,
	}}, nil
}

type ConfigRoot = models.ConfigRoot

func (s *BaseService) CreateConfigRoot(ctx context.Context, request *CreateConfigRootRequest) (*CreateConfigRootResponse, error) {
	if s.next == nil {
		return &CreateConfigRootResponse{
			ConfigRoot: request.GetConfigRoot(),
		}, nil
	}
	return s.Next().CreateConfigRoot(ctx, request)
}
func (s *BaseService) UpdateConfigRoot(ctx context.Context, request *UpdateConfigRootRequest) (*UpdateConfigRootResponse, error) {
	if s.next == nil {
		return &UpdateConfigRootResponse{
			ConfigRoot: request.GetConfigRoot(),
		}, nil
	}
	return s.Next().UpdateConfigRoot(ctx, request)
}
func (s *BaseService) DeleteConfigRoot(ctx context.Context, request *DeleteConfigRootRequest) (*DeleteConfigRootResponse, error) {
	if s.next == nil {
		return &DeleteConfigRootResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteConfigRoot(ctx, request)
}
func (s *BaseService) GetConfigRoot(ctx context.Context, request *GetConfigRootRequest) (*GetConfigRootResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetConfigRoot(ctx, request)
}
func (s *BaseService) ListConfigRoot(ctx context.Context, request *ListConfigRootRequest) (*ListConfigRootResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListConfigRoot(ctx, request)
}

func (s *BaseService) CreateConfigRootTagRef(ctx context.Context, request *CreateConfigRootTagRefRequest) (*CreateConfigRootTagRefResponse, error) {
	if s.next == nil {
		return &CreateConfigRootTagRefResponse{
			ID:               request.ID,
			ConfigRootTagRef: request.GetConfigRootTagRef(),
		}, nil
	}
	return s.Next().CreateConfigRootTagRef(ctx, request)
}

func (s *BaseService) DeleteConfigRootTagRef(ctx context.Context, request *DeleteConfigRootTagRefRequest) (*DeleteConfigRootTagRefResponse, error) {
	if s.next == nil {
		return &DeleteConfigRootTagRefResponse{
			ID:               request.ID,
			ConfigRootTagRef: request.GetConfigRootTagRef(),
		}, nil
	}
	return s.Next().DeleteConfigRootTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateConfigRootTagRef(ctx context.Context, request *CreateConfigRootTagRefRequest) (*CreateConfigRootTagRefResponse, error) {
	refField := models.ConfigRootFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetConfigRoot(ctx, &GetConfigRootRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ConfigRoot
		obj.AddTagRef(request.ConfigRootTagRef)

		_, err = s.BaseService.UpdateConfigRoot(ctx, &UpdateConfigRootRequest{
			ConfigRoot: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateConfigRootTagRefResponse{
		ID:               request.ID,
		ConfigRootTagRef: request.GetConfigRootTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteConfigRootTagRef(ctx context.Context, request *DeleteConfigRootTagRefRequest) (*DeleteConfigRootTagRefResponse, error) {
	refField := models.ConfigRootFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetConfigRoot(ctx, &GetConfigRootRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ConfigRoot
		obj.RemoveTagRef(request.ConfigRootTagRef)

		_, err = s.BaseService.UpdateConfigRoot(ctx, &UpdateConfigRootRequest{
			ConfigRoot: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteConfigRootTagRefResponse{
		ID:               request.ID,
		ConfigRootTagRef: request.GetConfigRootTagRef(),
	}, nil
}

func (s *EventProducerService) CreateConfigRoot(ctx context.Context, request *CreateConfigRootRequest) (*CreateConfigRootResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateConfigRootRequest{
				CreateConfigRootRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateConfigRoot(ctx, request)
}
func (s *EventProducerService) UpdateConfigRoot(ctx context.Context, request *UpdateConfigRootRequest) (*UpdateConfigRootResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateConfigRootRequest{
				UpdateConfigRootRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateConfigRoot(ctx, request)
}
func (s *EventProducerService) DeleteConfigRoot(ctx context.Context, request *DeleteConfigRootRequest) (*DeleteConfigRootResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteConfigRootRequest{
				DeleteConfigRootRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteConfigRoot(ctx, request)
}

func (s *EventProducerService) CreateConfigRootTagRef(ctx context.Context, request *CreateConfigRootTagRefRequest) (*CreateConfigRootTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateConfigRootTagRefRequest{
			CreateConfigRootTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateConfigRootTagRef(ctx, request)
}

func (s *EventProducerService) DeleteConfigRootTagRef(ctx context.Context, request *DeleteConfigRootTagRefRequest) (*DeleteConfigRootTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteConfigRootTagRefRequest{
			DeleteConfigRootTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteConfigRootTagRef(ctx, request)
}

func (e *Event_CreateConfigRootRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateConfigRootRequest
	model := request.ConfigRoot
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetConfigRoot(ctx,
			&GetConfigRootRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateConfigRoot(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateConfigRootRequest{
			CreateConfigRootRequest: &CreateConfigRootRequest{
				ConfigRoot: response.GetConfigRoot(),
			},
		},
	}, nil
}

func (e *Event_CreateConfigRootRequest) ToUpdateEvent() *Event {
	request := e.CreateConfigRootRequest
	model := request.ConfigRoot
	return &Event{
		Request: &Event_UpdateConfigRootRequest{
			UpdateConfigRootRequest: &UpdateConfigRootRequest{
				ConfigRoot: model,
				FieldMask:  request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateConfigRootRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateConfigRootRequest
	response, err := service.UpdateConfigRoot(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateConfigRootRequest{
			UpdateConfigRootRequest: &UpdateConfigRootRequest{
				ConfigRoot: response.GetConfigRoot(),
			},
		},
	}, nil
}

func (e *Event_UpdateConfigRootRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteConfigRootRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteConfigRootRequest
	_, err := service.DeleteConfigRoot(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteConfigRootRequest{
			DeleteConfigRootRequest: &DeleteConfigRootRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateConfigRootTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateConfigRootTagRefRequest
	if _, err := service.CreateConfigRootTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateConfigRootTagRefRequest{
		CreateConfigRootTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteConfigRootTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteConfigRootTagRefRequest
	if _, err := service.DeleteConfigRootTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteConfigRootTagRefRequest{
		DeleteConfigRootTagRefRequest: request,
	}}, nil
}

type ControlNodeZone = models.ControlNodeZone

func (s *BaseService) CreateControlNodeZone(ctx context.Context, request *CreateControlNodeZoneRequest) (*CreateControlNodeZoneResponse, error) {
	if s.next == nil {
		return &CreateControlNodeZoneResponse{
			ControlNodeZone: request.GetControlNodeZone(),
		}, nil
	}
	return s.Next().CreateControlNodeZone(ctx, request)
}
func (s *BaseService) UpdateControlNodeZone(ctx context.Context, request *UpdateControlNodeZoneRequest) (*UpdateControlNodeZoneResponse, error) {
	if s.next == nil {
		return &UpdateControlNodeZoneResponse{
			ControlNodeZone: request.GetControlNodeZone(),
		}, nil
	}
	return s.Next().UpdateControlNodeZone(ctx, request)
}
func (s *BaseService) DeleteControlNodeZone(ctx context.Context, request *DeleteControlNodeZoneRequest) (*DeleteControlNodeZoneResponse, error) {
	if s.next == nil {
		return &DeleteControlNodeZoneResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteControlNodeZone(ctx, request)
}
func (s *BaseService) GetControlNodeZone(ctx context.Context, request *GetControlNodeZoneRequest) (*GetControlNodeZoneResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetControlNodeZone(ctx, request)
}
func (s *BaseService) ListControlNodeZone(ctx context.Context, request *ListControlNodeZoneRequest) (*ListControlNodeZoneResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListControlNodeZone(ctx, request)
}

func (s *BaseService) CreateControlNodeZoneTagRef(ctx context.Context, request *CreateControlNodeZoneTagRefRequest) (*CreateControlNodeZoneTagRefResponse, error) {
	if s.next == nil {
		return &CreateControlNodeZoneTagRefResponse{
			ID:                    request.ID,
			ControlNodeZoneTagRef: request.GetControlNodeZoneTagRef(),
		}, nil
	}
	return s.Next().CreateControlNodeZoneTagRef(ctx, request)
}

func (s *BaseService) DeleteControlNodeZoneTagRef(ctx context.Context, request *DeleteControlNodeZoneTagRefRequest) (*DeleteControlNodeZoneTagRefResponse, error) {
	if s.next == nil {
		return &DeleteControlNodeZoneTagRefResponse{
			ID:                    request.ID,
			ControlNodeZoneTagRef: request.GetControlNodeZoneTagRef(),
		}, nil
	}
	return s.Next().DeleteControlNodeZoneTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateControlNodeZoneTagRef(ctx context.Context, request *CreateControlNodeZoneTagRefRequest) (*CreateControlNodeZoneTagRefResponse, error) {
	refField := models.ControlNodeZoneFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetControlNodeZone(ctx, &GetControlNodeZoneRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ControlNodeZone
		obj.AddTagRef(request.ControlNodeZoneTagRef)

		_, err = s.BaseService.UpdateControlNodeZone(ctx, &UpdateControlNodeZoneRequest{
			ControlNodeZone: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateControlNodeZoneTagRefResponse{
		ID:                    request.ID,
		ControlNodeZoneTagRef: request.GetControlNodeZoneTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteControlNodeZoneTagRef(ctx context.Context, request *DeleteControlNodeZoneTagRefRequest) (*DeleteControlNodeZoneTagRefResponse, error) {
	refField := models.ControlNodeZoneFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetControlNodeZone(ctx, &GetControlNodeZoneRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ControlNodeZone
		obj.RemoveTagRef(request.ControlNodeZoneTagRef)

		_, err = s.BaseService.UpdateControlNodeZone(ctx, &UpdateControlNodeZoneRequest{
			ControlNodeZone: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteControlNodeZoneTagRefResponse{
		ID:                    request.ID,
		ControlNodeZoneTagRef: request.GetControlNodeZoneTagRef(),
	}, nil
}

func (s *EventProducerService) CreateControlNodeZone(ctx context.Context, request *CreateControlNodeZoneRequest) (*CreateControlNodeZoneResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateControlNodeZoneRequest{
				CreateControlNodeZoneRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateControlNodeZone(ctx, request)
}
func (s *EventProducerService) UpdateControlNodeZone(ctx context.Context, request *UpdateControlNodeZoneRequest) (*UpdateControlNodeZoneResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateControlNodeZoneRequest{
				UpdateControlNodeZoneRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateControlNodeZone(ctx, request)
}
func (s *EventProducerService) DeleteControlNodeZone(ctx context.Context, request *DeleteControlNodeZoneRequest) (*DeleteControlNodeZoneResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteControlNodeZoneRequest{
				DeleteControlNodeZoneRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteControlNodeZone(ctx, request)
}

func (s *EventProducerService) CreateControlNodeZoneTagRef(ctx context.Context, request *CreateControlNodeZoneTagRefRequest) (*CreateControlNodeZoneTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateControlNodeZoneTagRefRequest{
			CreateControlNodeZoneTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateControlNodeZoneTagRef(ctx, request)
}

func (s *EventProducerService) DeleteControlNodeZoneTagRef(ctx context.Context, request *DeleteControlNodeZoneTagRefRequest) (*DeleteControlNodeZoneTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteControlNodeZoneTagRefRequest{
			DeleteControlNodeZoneTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteControlNodeZoneTagRef(ctx, request)
}

func (e *Event_CreateControlNodeZoneRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateControlNodeZoneRequest
	model := request.ControlNodeZone
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetControlNodeZone(ctx,
			&GetControlNodeZoneRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateControlNodeZone(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateControlNodeZoneRequest{
			CreateControlNodeZoneRequest: &CreateControlNodeZoneRequest{
				ControlNodeZone: response.GetControlNodeZone(),
			},
		},
	}, nil
}

func (e *Event_CreateControlNodeZoneRequest) ToUpdateEvent() *Event {
	request := e.CreateControlNodeZoneRequest
	model := request.ControlNodeZone
	return &Event{
		Request: &Event_UpdateControlNodeZoneRequest{
			UpdateControlNodeZoneRequest: &UpdateControlNodeZoneRequest{
				ControlNodeZone: model,
				FieldMask:       request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateControlNodeZoneRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateControlNodeZoneRequest
	response, err := service.UpdateControlNodeZone(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateControlNodeZoneRequest{
			UpdateControlNodeZoneRequest: &UpdateControlNodeZoneRequest{
				ControlNodeZone: response.GetControlNodeZone(),
			},
		},
	}, nil
}

func (e *Event_UpdateControlNodeZoneRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteControlNodeZoneRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteControlNodeZoneRequest
	_, err := service.DeleteControlNodeZone(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteControlNodeZoneRequest{
			DeleteControlNodeZoneRequest: &DeleteControlNodeZoneRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateControlNodeZoneTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateControlNodeZoneTagRefRequest
	if _, err := service.CreateControlNodeZoneTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateControlNodeZoneTagRefRequest{
		CreateControlNodeZoneTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteControlNodeZoneTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteControlNodeZoneTagRefRequest
	if _, err := service.DeleteControlNodeZoneTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteControlNodeZoneTagRefRequest{
		DeleteControlNodeZoneTagRefRequest: request,
	}}, nil
}

type CustomerAttachment = models.CustomerAttachment

func (s *BaseService) CreateCustomerAttachment(ctx context.Context, request *CreateCustomerAttachmentRequest) (*CreateCustomerAttachmentResponse, error) {
	if s.next == nil {
		return &CreateCustomerAttachmentResponse{
			CustomerAttachment: request.GetCustomerAttachment(),
		}, nil
	}
	return s.Next().CreateCustomerAttachment(ctx, request)
}
func (s *BaseService) UpdateCustomerAttachment(ctx context.Context, request *UpdateCustomerAttachmentRequest) (*UpdateCustomerAttachmentResponse, error) {
	if s.next == nil {
		return &UpdateCustomerAttachmentResponse{
			CustomerAttachment: request.GetCustomerAttachment(),
		}, nil
	}
	return s.Next().UpdateCustomerAttachment(ctx, request)
}
func (s *BaseService) DeleteCustomerAttachment(ctx context.Context, request *DeleteCustomerAttachmentRequest) (*DeleteCustomerAttachmentResponse, error) {
	if s.next == nil {
		return &DeleteCustomerAttachmentResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteCustomerAttachment(ctx, request)
}
func (s *BaseService) GetCustomerAttachment(ctx context.Context, request *GetCustomerAttachmentRequest) (*GetCustomerAttachmentResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetCustomerAttachment(ctx, request)
}
func (s *BaseService) ListCustomerAttachment(ctx context.Context, request *ListCustomerAttachmentRequest) (*ListCustomerAttachmentResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListCustomerAttachment(ctx, request)
}

func (s *BaseService) CreateCustomerAttachmentFloatingIPRef(ctx context.Context, request *CreateCustomerAttachmentFloatingIPRefRequest) (*CreateCustomerAttachmentFloatingIPRefResponse, error) {
	if s.next == nil {
		return &CreateCustomerAttachmentFloatingIPRefResponse{
			ID:                              request.ID,
			CustomerAttachmentFloatingIPRef: request.GetCustomerAttachmentFloatingIPRef(),
		}, nil
	}
	return s.Next().CreateCustomerAttachmentFloatingIPRef(ctx, request)
}

func (s *BaseService) DeleteCustomerAttachmentFloatingIPRef(ctx context.Context, request *DeleteCustomerAttachmentFloatingIPRefRequest) (*DeleteCustomerAttachmentFloatingIPRefResponse, error) {
	if s.next == nil {
		return &DeleteCustomerAttachmentFloatingIPRefResponse{
			ID:                              request.ID,
			CustomerAttachmentFloatingIPRef: request.GetCustomerAttachmentFloatingIPRef(),
		}, nil
	}
	return s.Next().DeleteCustomerAttachmentFloatingIPRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateCustomerAttachmentFloatingIPRef(ctx context.Context, request *CreateCustomerAttachmentFloatingIPRefRequest) (*CreateCustomerAttachmentFloatingIPRefResponse, error) {
	refField := models.CustomerAttachmentFieldFloatingIPRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetCustomerAttachment(ctx, &GetCustomerAttachmentRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.CustomerAttachment
		obj.AddFloatingIPRef(request.CustomerAttachmentFloatingIPRef)

		_, err = s.BaseService.UpdateCustomerAttachment(ctx, &UpdateCustomerAttachmentRequest{
			CustomerAttachment: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateCustomerAttachmentFloatingIPRefResponse{
		ID:                              request.ID,
		CustomerAttachmentFloatingIPRef: request.GetCustomerAttachmentFloatingIPRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteCustomerAttachmentFloatingIPRef(ctx context.Context, request *DeleteCustomerAttachmentFloatingIPRefRequest) (*DeleteCustomerAttachmentFloatingIPRefResponse, error) {
	refField := models.CustomerAttachmentFieldFloatingIPRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetCustomerAttachment(ctx, &GetCustomerAttachmentRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.CustomerAttachment
		obj.RemoveFloatingIPRef(request.CustomerAttachmentFloatingIPRef)

		_, err = s.BaseService.UpdateCustomerAttachment(ctx, &UpdateCustomerAttachmentRequest{
			CustomerAttachment: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteCustomerAttachmentFloatingIPRefResponse{
		ID:                              request.ID,
		CustomerAttachmentFloatingIPRef: request.GetCustomerAttachmentFloatingIPRef(),
	}, nil
}

func (s *BaseService) CreateCustomerAttachmentVirtualMachineInterfaceRef(ctx context.Context, request *CreateCustomerAttachmentVirtualMachineInterfaceRefRequest) (*CreateCustomerAttachmentVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateCustomerAttachmentVirtualMachineInterfaceRefResponse{
			ID: request.ID,
			CustomerAttachmentVirtualMachineInterfaceRef: request.GetCustomerAttachmentVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().CreateCustomerAttachmentVirtualMachineInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteCustomerAttachmentVirtualMachineInterfaceRef(ctx context.Context, request *DeleteCustomerAttachmentVirtualMachineInterfaceRefRequest) (*DeleteCustomerAttachmentVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteCustomerAttachmentVirtualMachineInterfaceRefResponse{
			ID: request.ID,
			CustomerAttachmentVirtualMachineInterfaceRef: request.GetCustomerAttachmentVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteCustomerAttachmentVirtualMachineInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateCustomerAttachmentVirtualMachineInterfaceRef(ctx context.Context, request *CreateCustomerAttachmentVirtualMachineInterfaceRefRequest) (*CreateCustomerAttachmentVirtualMachineInterfaceRefResponse, error) {
	refField := models.CustomerAttachmentFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetCustomerAttachment(ctx, &GetCustomerAttachmentRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.CustomerAttachment
		obj.AddVirtualMachineInterfaceRef(request.CustomerAttachmentVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateCustomerAttachment(ctx, &UpdateCustomerAttachmentRequest{
			CustomerAttachment: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateCustomerAttachmentVirtualMachineInterfaceRefResponse{
		ID: request.ID,
		CustomerAttachmentVirtualMachineInterfaceRef: request.GetCustomerAttachmentVirtualMachineInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteCustomerAttachmentVirtualMachineInterfaceRef(ctx context.Context, request *DeleteCustomerAttachmentVirtualMachineInterfaceRefRequest) (*DeleteCustomerAttachmentVirtualMachineInterfaceRefResponse, error) {
	refField := models.CustomerAttachmentFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetCustomerAttachment(ctx, &GetCustomerAttachmentRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.CustomerAttachment
		obj.RemoveVirtualMachineInterfaceRef(request.CustomerAttachmentVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateCustomerAttachment(ctx, &UpdateCustomerAttachmentRequest{
			CustomerAttachment: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteCustomerAttachmentVirtualMachineInterfaceRefResponse{
		ID: request.ID,
		CustomerAttachmentVirtualMachineInterfaceRef: request.GetCustomerAttachmentVirtualMachineInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateCustomerAttachmentTagRef(ctx context.Context, request *CreateCustomerAttachmentTagRefRequest) (*CreateCustomerAttachmentTagRefResponse, error) {
	if s.next == nil {
		return &CreateCustomerAttachmentTagRefResponse{
			ID:                       request.ID,
			CustomerAttachmentTagRef: request.GetCustomerAttachmentTagRef(),
		}, nil
	}
	return s.Next().CreateCustomerAttachmentTagRef(ctx, request)
}

func (s *BaseService) DeleteCustomerAttachmentTagRef(ctx context.Context, request *DeleteCustomerAttachmentTagRefRequest) (*DeleteCustomerAttachmentTagRefResponse, error) {
	if s.next == nil {
		return &DeleteCustomerAttachmentTagRefResponse{
			ID:                       request.ID,
			CustomerAttachmentTagRef: request.GetCustomerAttachmentTagRef(),
		}, nil
	}
	return s.Next().DeleteCustomerAttachmentTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateCustomerAttachmentTagRef(ctx context.Context, request *CreateCustomerAttachmentTagRefRequest) (*CreateCustomerAttachmentTagRefResponse, error) {
	refField := models.CustomerAttachmentFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetCustomerAttachment(ctx, &GetCustomerAttachmentRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.CustomerAttachment
		obj.AddTagRef(request.CustomerAttachmentTagRef)

		_, err = s.BaseService.UpdateCustomerAttachment(ctx, &UpdateCustomerAttachmentRequest{
			CustomerAttachment: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateCustomerAttachmentTagRefResponse{
		ID:                       request.ID,
		CustomerAttachmentTagRef: request.GetCustomerAttachmentTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteCustomerAttachmentTagRef(ctx context.Context, request *DeleteCustomerAttachmentTagRefRequest) (*DeleteCustomerAttachmentTagRefResponse, error) {
	refField := models.CustomerAttachmentFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetCustomerAttachment(ctx, &GetCustomerAttachmentRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.CustomerAttachment
		obj.RemoveTagRef(request.CustomerAttachmentTagRef)

		_, err = s.BaseService.UpdateCustomerAttachment(ctx, &UpdateCustomerAttachmentRequest{
			CustomerAttachment: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteCustomerAttachmentTagRefResponse{
		ID:                       request.ID,
		CustomerAttachmentTagRef: request.GetCustomerAttachmentTagRef(),
	}, nil
}

func (s *EventProducerService) CreateCustomerAttachment(ctx context.Context, request *CreateCustomerAttachmentRequest) (*CreateCustomerAttachmentResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateCustomerAttachmentRequest{
				CreateCustomerAttachmentRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateCustomerAttachment(ctx, request)
}
func (s *EventProducerService) UpdateCustomerAttachment(ctx context.Context, request *UpdateCustomerAttachmentRequest) (*UpdateCustomerAttachmentResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateCustomerAttachmentRequest{
				UpdateCustomerAttachmentRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateCustomerAttachment(ctx, request)
}
func (s *EventProducerService) DeleteCustomerAttachment(ctx context.Context, request *DeleteCustomerAttachmentRequest) (*DeleteCustomerAttachmentResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteCustomerAttachmentRequest{
				DeleteCustomerAttachmentRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteCustomerAttachment(ctx, request)
}

func (s *EventProducerService) CreateCustomerAttachmentTagRef(ctx context.Context, request *CreateCustomerAttachmentTagRefRequest) (*CreateCustomerAttachmentTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateCustomerAttachmentTagRefRequest{
			CreateCustomerAttachmentTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateCustomerAttachmentTagRef(ctx, request)
}

func (s *EventProducerService) DeleteCustomerAttachmentTagRef(ctx context.Context, request *DeleteCustomerAttachmentTagRefRequest) (*DeleteCustomerAttachmentTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteCustomerAttachmentTagRefRequest{
			DeleteCustomerAttachmentTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteCustomerAttachmentTagRef(ctx, request)
}

func (s *EventProducerService) CreateCustomerAttachmentFloatingIPRef(ctx context.Context, request *CreateCustomerAttachmentFloatingIPRefRequest) (*CreateCustomerAttachmentFloatingIPRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateCustomerAttachmentFloatingIPRefRequest{
			CreateCustomerAttachmentFloatingIPRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateCustomerAttachmentFloatingIPRef(ctx, request)
}

func (s *EventProducerService) DeleteCustomerAttachmentFloatingIPRef(ctx context.Context, request *DeleteCustomerAttachmentFloatingIPRefRequest) (*DeleteCustomerAttachmentFloatingIPRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteCustomerAttachmentFloatingIPRefRequest{
			DeleteCustomerAttachmentFloatingIPRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteCustomerAttachmentFloatingIPRef(ctx, request)
}

func (s *EventProducerService) CreateCustomerAttachmentVirtualMachineInterfaceRef(ctx context.Context, request *CreateCustomerAttachmentVirtualMachineInterfaceRefRequest) (*CreateCustomerAttachmentVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateCustomerAttachmentVirtualMachineInterfaceRefRequest{
			CreateCustomerAttachmentVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateCustomerAttachmentVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteCustomerAttachmentVirtualMachineInterfaceRef(ctx context.Context, request *DeleteCustomerAttachmentVirtualMachineInterfaceRefRequest) (*DeleteCustomerAttachmentVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteCustomerAttachmentVirtualMachineInterfaceRefRequest{
			DeleteCustomerAttachmentVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteCustomerAttachmentVirtualMachineInterfaceRef(ctx, request)
}

func (e *Event_CreateCustomerAttachmentRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateCustomerAttachmentRequest
	model := request.CustomerAttachment
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetCustomerAttachment(ctx,
			&GetCustomerAttachmentRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateCustomerAttachment(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateCustomerAttachmentRequest{
			CreateCustomerAttachmentRequest: &CreateCustomerAttachmentRequest{
				CustomerAttachment: response.GetCustomerAttachment(),
			},
		},
	}, nil
}

func (e *Event_CreateCustomerAttachmentRequest) ToUpdateEvent() *Event {
	request := e.CreateCustomerAttachmentRequest
	model := request.CustomerAttachment
	return &Event{
		Request: &Event_UpdateCustomerAttachmentRequest{
			UpdateCustomerAttachmentRequest: &UpdateCustomerAttachmentRequest{
				CustomerAttachment: model,
				FieldMask:          request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateCustomerAttachmentRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateCustomerAttachmentRequest
	response, err := service.UpdateCustomerAttachment(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateCustomerAttachmentRequest{
			UpdateCustomerAttachmentRequest: &UpdateCustomerAttachmentRequest{
				CustomerAttachment: response.GetCustomerAttachment(),
			},
		},
	}, nil
}

func (e *Event_UpdateCustomerAttachmentRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteCustomerAttachmentRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteCustomerAttachmentRequest
	_, err := service.DeleteCustomerAttachment(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteCustomerAttachmentRequest{
			DeleteCustomerAttachmentRequest: &DeleteCustomerAttachmentRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateCustomerAttachmentTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateCustomerAttachmentTagRefRequest
	if _, err := service.CreateCustomerAttachmentTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateCustomerAttachmentTagRefRequest{
		CreateCustomerAttachmentTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteCustomerAttachmentTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteCustomerAttachmentTagRefRequest
	if _, err := service.DeleteCustomerAttachmentTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteCustomerAttachmentTagRefRequest{
		DeleteCustomerAttachmentTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateCustomerAttachmentFloatingIPRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateCustomerAttachmentFloatingIPRefRequest
	if _, err := service.CreateCustomerAttachmentFloatingIPRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateCustomerAttachmentFloatingIPRefRequest{
		CreateCustomerAttachmentFloatingIPRefRequest: request,
	}}, nil
}

func (e *Event_DeleteCustomerAttachmentFloatingIPRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteCustomerAttachmentFloatingIPRefRequest
	if _, err := service.DeleteCustomerAttachmentFloatingIPRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteCustomerAttachmentFloatingIPRefRequest{
		DeleteCustomerAttachmentFloatingIPRefRequest: request,
	}}, nil
}

func (e *Event_CreateCustomerAttachmentVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateCustomerAttachmentVirtualMachineInterfaceRefRequest
	if _, err := service.CreateCustomerAttachmentVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateCustomerAttachmentVirtualMachineInterfaceRefRequest{
		CreateCustomerAttachmentVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteCustomerAttachmentVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteCustomerAttachmentVirtualMachineInterfaceRefRequest
	if _, err := service.DeleteCustomerAttachmentVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteCustomerAttachmentVirtualMachineInterfaceRefRequest{
		DeleteCustomerAttachmentVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

type DataCenterInterconnect = models.DataCenterInterconnect

func (s *BaseService) CreateDataCenterInterconnect(ctx context.Context, request *CreateDataCenterInterconnectRequest) (*CreateDataCenterInterconnectResponse, error) {
	if s.next == nil {
		return &CreateDataCenterInterconnectResponse{
			DataCenterInterconnect: request.GetDataCenterInterconnect(),
		}, nil
	}
	return s.Next().CreateDataCenterInterconnect(ctx, request)
}
func (s *BaseService) UpdateDataCenterInterconnect(ctx context.Context, request *UpdateDataCenterInterconnectRequest) (*UpdateDataCenterInterconnectResponse, error) {
	if s.next == nil {
		return &UpdateDataCenterInterconnectResponse{
			DataCenterInterconnect: request.GetDataCenterInterconnect(),
		}, nil
	}
	return s.Next().UpdateDataCenterInterconnect(ctx, request)
}
func (s *BaseService) DeleteDataCenterInterconnect(ctx context.Context, request *DeleteDataCenterInterconnectRequest) (*DeleteDataCenterInterconnectResponse, error) {
	if s.next == nil {
		return &DeleteDataCenterInterconnectResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteDataCenterInterconnect(ctx, request)
}
func (s *BaseService) GetDataCenterInterconnect(ctx context.Context, request *GetDataCenterInterconnectRequest) (*GetDataCenterInterconnectResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetDataCenterInterconnect(ctx, request)
}
func (s *BaseService) ListDataCenterInterconnect(ctx context.Context, request *ListDataCenterInterconnectRequest) (*ListDataCenterInterconnectResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListDataCenterInterconnect(ctx, request)
}

func (s *BaseService) CreateDataCenterInterconnectLogicalRouterRef(ctx context.Context, request *CreateDataCenterInterconnectLogicalRouterRefRequest) (*CreateDataCenterInterconnectLogicalRouterRefResponse, error) {
	if s.next == nil {
		return &CreateDataCenterInterconnectLogicalRouterRefResponse{
			ID:                                     request.ID,
			DataCenterInterconnectLogicalRouterRef: request.GetDataCenterInterconnectLogicalRouterRef(),
		}, nil
	}
	return s.Next().CreateDataCenterInterconnectLogicalRouterRef(ctx, request)
}

func (s *BaseService) DeleteDataCenterInterconnectLogicalRouterRef(ctx context.Context, request *DeleteDataCenterInterconnectLogicalRouterRefRequest) (*DeleteDataCenterInterconnectLogicalRouterRefResponse, error) {
	if s.next == nil {
		return &DeleteDataCenterInterconnectLogicalRouterRefResponse{
			ID:                                     request.ID,
			DataCenterInterconnectLogicalRouterRef: request.GetDataCenterInterconnectLogicalRouterRef(),
		}, nil
	}
	return s.Next().DeleteDataCenterInterconnectLogicalRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateDataCenterInterconnectLogicalRouterRef(ctx context.Context, request *CreateDataCenterInterconnectLogicalRouterRefRequest) (*CreateDataCenterInterconnectLogicalRouterRefResponse, error) {
	refField := models.DataCenterInterconnectFieldLogicalRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDataCenterInterconnect(ctx, &GetDataCenterInterconnectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DataCenterInterconnect
		obj.AddLogicalRouterRef(request.DataCenterInterconnectLogicalRouterRef)

		_, err = s.BaseService.UpdateDataCenterInterconnect(ctx, &UpdateDataCenterInterconnectRequest{
			DataCenterInterconnect: obj,
			FieldMask:              types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateDataCenterInterconnectLogicalRouterRefResponse{
		ID:                                     request.ID,
		DataCenterInterconnectLogicalRouterRef: request.GetDataCenterInterconnectLogicalRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteDataCenterInterconnectLogicalRouterRef(ctx context.Context, request *DeleteDataCenterInterconnectLogicalRouterRefRequest) (*DeleteDataCenterInterconnectLogicalRouterRefResponse, error) {
	refField := models.DataCenterInterconnectFieldLogicalRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDataCenterInterconnect(ctx, &GetDataCenterInterconnectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DataCenterInterconnect
		obj.RemoveLogicalRouterRef(request.DataCenterInterconnectLogicalRouterRef)

		_, err = s.BaseService.UpdateDataCenterInterconnect(ctx, &UpdateDataCenterInterconnectRequest{
			DataCenterInterconnect: obj,
			FieldMask:              types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteDataCenterInterconnectLogicalRouterRefResponse{
		ID:                                     request.ID,
		DataCenterInterconnectLogicalRouterRef: request.GetDataCenterInterconnectLogicalRouterRef(),
	}, nil
}

func (s *BaseService) CreateDataCenterInterconnectVirtualNetworkRef(ctx context.Context, request *CreateDataCenterInterconnectVirtualNetworkRefRequest) (*CreateDataCenterInterconnectVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &CreateDataCenterInterconnectVirtualNetworkRefResponse{
			ID:                                      request.ID,
			DataCenterInterconnectVirtualNetworkRef: request.GetDataCenterInterconnectVirtualNetworkRef(),
		}, nil
	}
	return s.Next().CreateDataCenterInterconnectVirtualNetworkRef(ctx, request)
}

func (s *BaseService) DeleteDataCenterInterconnectVirtualNetworkRef(ctx context.Context, request *DeleteDataCenterInterconnectVirtualNetworkRefRequest) (*DeleteDataCenterInterconnectVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &DeleteDataCenterInterconnectVirtualNetworkRefResponse{
			ID:                                      request.ID,
			DataCenterInterconnectVirtualNetworkRef: request.GetDataCenterInterconnectVirtualNetworkRef(),
		}, nil
	}
	return s.Next().DeleteDataCenterInterconnectVirtualNetworkRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateDataCenterInterconnectVirtualNetworkRef(ctx context.Context, request *CreateDataCenterInterconnectVirtualNetworkRefRequest) (*CreateDataCenterInterconnectVirtualNetworkRefResponse, error) {
	refField := models.DataCenterInterconnectFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDataCenterInterconnect(ctx, &GetDataCenterInterconnectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DataCenterInterconnect
		obj.AddVirtualNetworkRef(request.DataCenterInterconnectVirtualNetworkRef)

		_, err = s.BaseService.UpdateDataCenterInterconnect(ctx, &UpdateDataCenterInterconnectRequest{
			DataCenterInterconnect: obj,
			FieldMask:              types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateDataCenterInterconnectVirtualNetworkRefResponse{
		ID:                                      request.ID,
		DataCenterInterconnectVirtualNetworkRef: request.GetDataCenterInterconnectVirtualNetworkRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteDataCenterInterconnectVirtualNetworkRef(ctx context.Context, request *DeleteDataCenterInterconnectVirtualNetworkRefRequest) (*DeleteDataCenterInterconnectVirtualNetworkRefResponse, error) {
	refField := models.DataCenterInterconnectFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDataCenterInterconnect(ctx, &GetDataCenterInterconnectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DataCenterInterconnect
		obj.RemoveVirtualNetworkRef(request.DataCenterInterconnectVirtualNetworkRef)

		_, err = s.BaseService.UpdateDataCenterInterconnect(ctx, &UpdateDataCenterInterconnectRequest{
			DataCenterInterconnect: obj,
			FieldMask:              types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteDataCenterInterconnectVirtualNetworkRefResponse{
		ID:                                      request.ID,
		DataCenterInterconnectVirtualNetworkRef: request.GetDataCenterInterconnectVirtualNetworkRef(),
	}, nil
}

func (s *BaseService) CreateDataCenterInterconnectTagRef(ctx context.Context, request *CreateDataCenterInterconnectTagRefRequest) (*CreateDataCenterInterconnectTagRefResponse, error) {
	if s.next == nil {
		return &CreateDataCenterInterconnectTagRefResponse{
			ID:                           request.ID,
			DataCenterInterconnectTagRef: request.GetDataCenterInterconnectTagRef(),
		}, nil
	}
	return s.Next().CreateDataCenterInterconnectTagRef(ctx, request)
}

func (s *BaseService) DeleteDataCenterInterconnectTagRef(ctx context.Context, request *DeleteDataCenterInterconnectTagRefRequest) (*DeleteDataCenterInterconnectTagRefResponse, error) {
	if s.next == nil {
		return &DeleteDataCenterInterconnectTagRefResponse{
			ID:                           request.ID,
			DataCenterInterconnectTagRef: request.GetDataCenterInterconnectTagRef(),
		}, nil
	}
	return s.Next().DeleteDataCenterInterconnectTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateDataCenterInterconnectTagRef(ctx context.Context, request *CreateDataCenterInterconnectTagRefRequest) (*CreateDataCenterInterconnectTagRefResponse, error) {
	refField := models.DataCenterInterconnectFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDataCenterInterconnect(ctx, &GetDataCenterInterconnectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DataCenterInterconnect
		obj.AddTagRef(request.DataCenterInterconnectTagRef)

		_, err = s.BaseService.UpdateDataCenterInterconnect(ctx, &UpdateDataCenterInterconnectRequest{
			DataCenterInterconnect: obj,
			FieldMask:              types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateDataCenterInterconnectTagRefResponse{
		ID:                           request.ID,
		DataCenterInterconnectTagRef: request.GetDataCenterInterconnectTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteDataCenterInterconnectTagRef(ctx context.Context, request *DeleteDataCenterInterconnectTagRefRequest) (*DeleteDataCenterInterconnectTagRefResponse, error) {
	refField := models.DataCenterInterconnectFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDataCenterInterconnect(ctx, &GetDataCenterInterconnectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DataCenterInterconnect
		obj.RemoveTagRef(request.DataCenterInterconnectTagRef)

		_, err = s.BaseService.UpdateDataCenterInterconnect(ctx, &UpdateDataCenterInterconnectRequest{
			DataCenterInterconnect: obj,
			FieldMask:              types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteDataCenterInterconnectTagRefResponse{
		ID:                           request.ID,
		DataCenterInterconnectTagRef: request.GetDataCenterInterconnectTagRef(),
	}, nil
}

func (s *EventProducerService) CreateDataCenterInterconnect(ctx context.Context, request *CreateDataCenterInterconnectRequest) (*CreateDataCenterInterconnectResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateDataCenterInterconnectRequest{
				CreateDataCenterInterconnectRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDataCenterInterconnect(ctx, request)
}
func (s *EventProducerService) UpdateDataCenterInterconnect(ctx context.Context, request *UpdateDataCenterInterconnectRequest) (*UpdateDataCenterInterconnectResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateDataCenterInterconnectRequest{
				UpdateDataCenterInterconnectRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateDataCenterInterconnect(ctx, request)
}
func (s *EventProducerService) DeleteDataCenterInterconnect(ctx context.Context, request *DeleteDataCenterInterconnectRequest) (*DeleteDataCenterInterconnectResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteDataCenterInterconnectRequest{
				DeleteDataCenterInterconnectRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDataCenterInterconnect(ctx, request)
}

func (s *EventProducerService) CreateDataCenterInterconnectLogicalRouterRef(ctx context.Context, request *CreateDataCenterInterconnectLogicalRouterRefRequest) (*CreateDataCenterInterconnectLogicalRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateDataCenterInterconnectLogicalRouterRefRequest{
			CreateDataCenterInterconnectLogicalRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDataCenterInterconnectLogicalRouterRef(ctx, request)
}

func (s *EventProducerService) DeleteDataCenterInterconnectLogicalRouterRef(ctx context.Context, request *DeleteDataCenterInterconnectLogicalRouterRefRequest) (*DeleteDataCenterInterconnectLogicalRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteDataCenterInterconnectLogicalRouterRefRequest{
			DeleteDataCenterInterconnectLogicalRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDataCenterInterconnectLogicalRouterRef(ctx, request)
}

func (s *EventProducerService) CreateDataCenterInterconnectVirtualNetworkRef(ctx context.Context, request *CreateDataCenterInterconnectVirtualNetworkRefRequest) (*CreateDataCenterInterconnectVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateDataCenterInterconnectVirtualNetworkRefRequest{
			CreateDataCenterInterconnectVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDataCenterInterconnectVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) DeleteDataCenterInterconnectVirtualNetworkRef(ctx context.Context, request *DeleteDataCenterInterconnectVirtualNetworkRefRequest) (*DeleteDataCenterInterconnectVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteDataCenterInterconnectVirtualNetworkRefRequest{
			DeleteDataCenterInterconnectVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDataCenterInterconnectVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) CreateDataCenterInterconnectTagRef(ctx context.Context, request *CreateDataCenterInterconnectTagRefRequest) (*CreateDataCenterInterconnectTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateDataCenterInterconnectTagRefRequest{
			CreateDataCenterInterconnectTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDataCenterInterconnectTagRef(ctx, request)
}

func (s *EventProducerService) DeleteDataCenterInterconnectTagRef(ctx context.Context, request *DeleteDataCenterInterconnectTagRefRequest) (*DeleteDataCenterInterconnectTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteDataCenterInterconnectTagRefRequest{
			DeleteDataCenterInterconnectTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDataCenterInterconnectTagRef(ctx, request)
}

func (e *Event_CreateDataCenterInterconnectRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDataCenterInterconnectRequest
	model := request.DataCenterInterconnect
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetDataCenterInterconnect(ctx,
			&GetDataCenterInterconnectRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateDataCenterInterconnect(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateDataCenterInterconnectRequest{
			CreateDataCenterInterconnectRequest: &CreateDataCenterInterconnectRequest{
				DataCenterInterconnect: response.GetDataCenterInterconnect(),
			},
		},
	}, nil
}

func (e *Event_CreateDataCenterInterconnectRequest) ToUpdateEvent() *Event {
	request := e.CreateDataCenterInterconnectRequest
	model := request.DataCenterInterconnect
	return &Event{
		Request: &Event_UpdateDataCenterInterconnectRequest{
			UpdateDataCenterInterconnectRequest: &UpdateDataCenterInterconnectRequest{
				DataCenterInterconnect: model,
				FieldMask:              request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateDataCenterInterconnectRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateDataCenterInterconnectRequest
	response, err := service.UpdateDataCenterInterconnect(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateDataCenterInterconnectRequest{
			UpdateDataCenterInterconnectRequest: &UpdateDataCenterInterconnectRequest{
				DataCenterInterconnect: response.GetDataCenterInterconnect(),
			},
		},
	}, nil
}

func (e *Event_UpdateDataCenterInterconnectRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteDataCenterInterconnectRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDataCenterInterconnectRequest
	_, err := service.DeleteDataCenterInterconnect(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteDataCenterInterconnectRequest{
			DeleteDataCenterInterconnectRequest: &DeleteDataCenterInterconnectRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateDataCenterInterconnectLogicalRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDataCenterInterconnectLogicalRouterRefRequest
	if _, err := service.CreateDataCenterInterconnectLogicalRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateDataCenterInterconnectLogicalRouterRefRequest{
		CreateDataCenterInterconnectLogicalRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeleteDataCenterInterconnectLogicalRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDataCenterInterconnectLogicalRouterRefRequest
	if _, err := service.DeleteDataCenterInterconnectLogicalRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteDataCenterInterconnectLogicalRouterRefRequest{
		DeleteDataCenterInterconnectLogicalRouterRefRequest: request,
	}}, nil
}

func (e *Event_CreateDataCenterInterconnectVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDataCenterInterconnectVirtualNetworkRefRequest
	if _, err := service.CreateDataCenterInterconnectVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateDataCenterInterconnectVirtualNetworkRefRequest{
		CreateDataCenterInterconnectVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_DeleteDataCenterInterconnectVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDataCenterInterconnectVirtualNetworkRefRequest
	if _, err := service.DeleteDataCenterInterconnectVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteDataCenterInterconnectVirtualNetworkRefRequest{
		DeleteDataCenterInterconnectVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_CreateDataCenterInterconnectTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDataCenterInterconnectTagRefRequest
	if _, err := service.CreateDataCenterInterconnectTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateDataCenterInterconnectTagRefRequest{
		CreateDataCenterInterconnectTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteDataCenterInterconnectTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDataCenterInterconnectTagRefRequest
	if _, err := service.DeleteDataCenterInterconnectTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteDataCenterInterconnectTagRefRequest{
		DeleteDataCenterInterconnectTagRefRequest: request,
	}}, nil
}

type DatabaseNode = models.DatabaseNode

func (s *BaseService) CreateDatabaseNode(ctx context.Context, request *CreateDatabaseNodeRequest) (*CreateDatabaseNodeResponse, error) {
	if s.next == nil {
		return &CreateDatabaseNodeResponse{
			DatabaseNode: request.GetDatabaseNode(),
		}, nil
	}
	return s.Next().CreateDatabaseNode(ctx, request)
}
func (s *BaseService) UpdateDatabaseNode(ctx context.Context, request *UpdateDatabaseNodeRequest) (*UpdateDatabaseNodeResponse, error) {
	if s.next == nil {
		return &UpdateDatabaseNodeResponse{
			DatabaseNode: request.GetDatabaseNode(),
		}, nil
	}
	return s.Next().UpdateDatabaseNode(ctx, request)
}
func (s *BaseService) DeleteDatabaseNode(ctx context.Context, request *DeleteDatabaseNodeRequest) (*DeleteDatabaseNodeResponse, error) {
	if s.next == nil {
		return &DeleteDatabaseNodeResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteDatabaseNode(ctx, request)
}
func (s *BaseService) GetDatabaseNode(ctx context.Context, request *GetDatabaseNodeRequest) (*GetDatabaseNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetDatabaseNode(ctx, request)
}
func (s *BaseService) ListDatabaseNode(ctx context.Context, request *ListDatabaseNodeRequest) (*ListDatabaseNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListDatabaseNode(ctx, request)
}

func (s *BaseService) CreateDatabaseNodeTagRef(ctx context.Context, request *CreateDatabaseNodeTagRefRequest) (*CreateDatabaseNodeTagRefResponse, error) {
	if s.next == nil {
		return &CreateDatabaseNodeTagRefResponse{
			ID:                 request.ID,
			DatabaseNodeTagRef: request.GetDatabaseNodeTagRef(),
		}, nil
	}
	return s.Next().CreateDatabaseNodeTagRef(ctx, request)
}

func (s *BaseService) DeleteDatabaseNodeTagRef(ctx context.Context, request *DeleteDatabaseNodeTagRefRequest) (*DeleteDatabaseNodeTagRefResponse, error) {
	if s.next == nil {
		return &DeleteDatabaseNodeTagRefResponse{
			ID:                 request.ID,
			DatabaseNodeTagRef: request.GetDatabaseNodeTagRef(),
		}, nil
	}
	return s.Next().DeleteDatabaseNodeTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateDatabaseNodeTagRef(ctx context.Context, request *CreateDatabaseNodeTagRefRequest) (*CreateDatabaseNodeTagRefResponse, error) {
	refField := models.DatabaseNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDatabaseNode(ctx, &GetDatabaseNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DatabaseNode
		obj.AddTagRef(request.DatabaseNodeTagRef)

		_, err = s.BaseService.UpdateDatabaseNode(ctx, &UpdateDatabaseNodeRequest{
			DatabaseNode: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateDatabaseNodeTagRefResponse{
		ID:                 request.ID,
		DatabaseNodeTagRef: request.GetDatabaseNodeTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteDatabaseNodeTagRef(ctx context.Context, request *DeleteDatabaseNodeTagRefRequest) (*DeleteDatabaseNodeTagRefResponse, error) {
	refField := models.DatabaseNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDatabaseNode(ctx, &GetDatabaseNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DatabaseNode
		obj.RemoveTagRef(request.DatabaseNodeTagRef)

		_, err = s.BaseService.UpdateDatabaseNode(ctx, &UpdateDatabaseNodeRequest{
			DatabaseNode: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteDatabaseNodeTagRefResponse{
		ID:                 request.ID,
		DatabaseNodeTagRef: request.GetDatabaseNodeTagRef(),
	}, nil
}

func (s *EventProducerService) CreateDatabaseNode(ctx context.Context, request *CreateDatabaseNodeRequest) (*CreateDatabaseNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateDatabaseNodeRequest{
				CreateDatabaseNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDatabaseNode(ctx, request)
}
func (s *EventProducerService) UpdateDatabaseNode(ctx context.Context, request *UpdateDatabaseNodeRequest) (*UpdateDatabaseNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateDatabaseNodeRequest{
				UpdateDatabaseNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateDatabaseNode(ctx, request)
}
func (s *EventProducerService) DeleteDatabaseNode(ctx context.Context, request *DeleteDatabaseNodeRequest) (*DeleteDatabaseNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteDatabaseNodeRequest{
				DeleteDatabaseNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDatabaseNode(ctx, request)
}

func (s *EventProducerService) CreateDatabaseNodeTagRef(ctx context.Context, request *CreateDatabaseNodeTagRefRequest) (*CreateDatabaseNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateDatabaseNodeTagRefRequest{
			CreateDatabaseNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDatabaseNodeTagRef(ctx, request)
}

func (s *EventProducerService) DeleteDatabaseNodeTagRef(ctx context.Context, request *DeleteDatabaseNodeTagRefRequest) (*DeleteDatabaseNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteDatabaseNodeTagRefRequest{
			DeleteDatabaseNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDatabaseNodeTagRef(ctx, request)
}

func (e *Event_CreateDatabaseNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDatabaseNodeRequest
	model := request.DatabaseNode
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetDatabaseNode(ctx,
			&GetDatabaseNodeRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateDatabaseNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateDatabaseNodeRequest{
			CreateDatabaseNodeRequest: &CreateDatabaseNodeRequest{
				DatabaseNode: response.GetDatabaseNode(),
			},
		},
	}, nil
}

func (e *Event_CreateDatabaseNodeRequest) ToUpdateEvent() *Event {
	request := e.CreateDatabaseNodeRequest
	model := request.DatabaseNode
	return &Event{
		Request: &Event_UpdateDatabaseNodeRequest{
			UpdateDatabaseNodeRequest: &UpdateDatabaseNodeRequest{
				DatabaseNode: model,
				FieldMask:    request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateDatabaseNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateDatabaseNodeRequest
	response, err := service.UpdateDatabaseNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateDatabaseNodeRequest{
			UpdateDatabaseNodeRequest: &UpdateDatabaseNodeRequest{
				DatabaseNode: response.GetDatabaseNode(),
			},
		},
	}, nil
}

func (e *Event_UpdateDatabaseNodeRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteDatabaseNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDatabaseNodeRequest
	_, err := service.DeleteDatabaseNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteDatabaseNodeRequest{
			DeleteDatabaseNodeRequest: &DeleteDatabaseNodeRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateDatabaseNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDatabaseNodeTagRefRequest
	if _, err := service.CreateDatabaseNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateDatabaseNodeTagRefRequest{
		CreateDatabaseNodeTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteDatabaseNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDatabaseNodeTagRefRequest
	if _, err := service.DeleteDatabaseNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteDatabaseNodeTagRefRequest{
		DeleteDatabaseNodeTagRefRequest: request,
	}}, nil
}

type DeviceChassis = models.DeviceChassis

func (s *BaseService) CreateDeviceChassis(ctx context.Context, request *CreateDeviceChassisRequest) (*CreateDeviceChassisResponse, error) {
	if s.next == nil {
		return &CreateDeviceChassisResponse{
			DeviceChassis: request.GetDeviceChassis(),
		}, nil
	}
	return s.Next().CreateDeviceChassis(ctx, request)
}
func (s *BaseService) UpdateDeviceChassis(ctx context.Context, request *UpdateDeviceChassisRequest) (*UpdateDeviceChassisResponse, error) {
	if s.next == nil {
		return &UpdateDeviceChassisResponse{
			DeviceChassis: request.GetDeviceChassis(),
		}, nil
	}
	return s.Next().UpdateDeviceChassis(ctx, request)
}
func (s *BaseService) DeleteDeviceChassis(ctx context.Context, request *DeleteDeviceChassisRequest) (*DeleteDeviceChassisResponse, error) {
	if s.next == nil {
		return &DeleteDeviceChassisResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteDeviceChassis(ctx, request)
}
func (s *BaseService) GetDeviceChassis(ctx context.Context, request *GetDeviceChassisRequest) (*GetDeviceChassisResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetDeviceChassis(ctx, request)
}
func (s *BaseService) ListDeviceChassis(ctx context.Context, request *ListDeviceChassisRequest) (*ListDeviceChassisResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListDeviceChassis(ctx, request)
}

func (s *BaseService) CreateDeviceChassisTagRef(ctx context.Context, request *CreateDeviceChassisTagRefRequest) (*CreateDeviceChassisTagRefResponse, error) {
	if s.next == nil {
		return &CreateDeviceChassisTagRefResponse{
			ID:                  request.ID,
			DeviceChassisTagRef: request.GetDeviceChassisTagRef(),
		}, nil
	}
	return s.Next().CreateDeviceChassisTagRef(ctx, request)
}

func (s *BaseService) DeleteDeviceChassisTagRef(ctx context.Context, request *DeleteDeviceChassisTagRefRequest) (*DeleteDeviceChassisTagRefResponse, error) {
	if s.next == nil {
		return &DeleteDeviceChassisTagRefResponse{
			ID:                  request.ID,
			DeviceChassisTagRef: request.GetDeviceChassisTagRef(),
		}, nil
	}
	return s.Next().DeleteDeviceChassisTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateDeviceChassisTagRef(ctx context.Context, request *CreateDeviceChassisTagRefRequest) (*CreateDeviceChassisTagRefResponse, error) {
	refField := models.DeviceChassisFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDeviceChassis(ctx, &GetDeviceChassisRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DeviceChassis
		obj.AddTagRef(request.DeviceChassisTagRef)

		_, err = s.BaseService.UpdateDeviceChassis(ctx, &UpdateDeviceChassisRequest{
			DeviceChassis: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateDeviceChassisTagRefResponse{
		ID:                  request.ID,
		DeviceChassisTagRef: request.GetDeviceChassisTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteDeviceChassisTagRef(ctx context.Context, request *DeleteDeviceChassisTagRefRequest) (*DeleteDeviceChassisTagRefResponse, error) {
	refField := models.DeviceChassisFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDeviceChassis(ctx, &GetDeviceChassisRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DeviceChassis
		obj.RemoveTagRef(request.DeviceChassisTagRef)

		_, err = s.BaseService.UpdateDeviceChassis(ctx, &UpdateDeviceChassisRequest{
			DeviceChassis: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteDeviceChassisTagRefResponse{
		ID:                  request.ID,
		DeviceChassisTagRef: request.GetDeviceChassisTagRef(),
	}, nil
}

func (s *EventProducerService) CreateDeviceChassis(ctx context.Context, request *CreateDeviceChassisRequest) (*CreateDeviceChassisResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateDeviceChassisRequest{
				CreateDeviceChassisRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDeviceChassis(ctx, request)
}
func (s *EventProducerService) UpdateDeviceChassis(ctx context.Context, request *UpdateDeviceChassisRequest) (*UpdateDeviceChassisResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateDeviceChassisRequest{
				UpdateDeviceChassisRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateDeviceChassis(ctx, request)
}
func (s *EventProducerService) DeleteDeviceChassis(ctx context.Context, request *DeleteDeviceChassisRequest) (*DeleteDeviceChassisResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteDeviceChassisRequest{
				DeleteDeviceChassisRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDeviceChassis(ctx, request)
}

func (s *EventProducerService) CreateDeviceChassisTagRef(ctx context.Context, request *CreateDeviceChassisTagRefRequest) (*CreateDeviceChassisTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateDeviceChassisTagRefRequest{
			CreateDeviceChassisTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDeviceChassisTagRef(ctx, request)
}

func (s *EventProducerService) DeleteDeviceChassisTagRef(ctx context.Context, request *DeleteDeviceChassisTagRefRequest) (*DeleteDeviceChassisTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteDeviceChassisTagRefRequest{
			DeleteDeviceChassisTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDeviceChassisTagRef(ctx, request)
}

func (e *Event_CreateDeviceChassisRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDeviceChassisRequest
	model := request.DeviceChassis
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetDeviceChassis(ctx,
			&GetDeviceChassisRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateDeviceChassis(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateDeviceChassisRequest{
			CreateDeviceChassisRequest: &CreateDeviceChassisRequest{
				DeviceChassis: response.GetDeviceChassis(),
			},
		},
	}, nil
}

func (e *Event_CreateDeviceChassisRequest) ToUpdateEvent() *Event {
	request := e.CreateDeviceChassisRequest
	model := request.DeviceChassis
	return &Event{
		Request: &Event_UpdateDeviceChassisRequest{
			UpdateDeviceChassisRequest: &UpdateDeviceChassisRequest{
				DeviceChassis: model,
				FieldMask:     request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateDeviceChassisRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateDeviceChassisRequest
	response, err := service.UpdateDeviceChassis(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateDeviceChassisRequest{
			UpdateDeviceChassisRequest: &UpdateDeviceChassisRequest{
				DeviceChassis: response.GetDeviceChassis(),
			},
		},
	}, nil
}

func (e *Event_UpdateDeviceChassisRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteDeviceChassisRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDeviceChassisRequest
	_, err := service.DeleteDeviceChassis(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteDeviceChassisRequest{
			DeleteDeviceChassisRequest: &DeleteDeviceChassisRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateDeviceChassisTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDeviceChassisTagRefRequest
	if _, err := service.CreateDeviceChassisTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateDeviceChassisTagRefRequest{
		CreateDeviceChassisTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteDeviceChassisTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDeviceChassisTagRefRequest
	if _, err := service.DeleteDeviceChassisTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteDeviceChassisTagRefRequest{
		DeleteDeviceChassisTagRefRequest: request,
	}}, nil
}

type DeviceFunctionalGroup = models.DeviceFunctionalGroup

func (s *BaseService) CreateDeviceFunctionalGroup(ctx context.Context, request *CreateDeviceFunctionalGroupRequest) (*CreateDeviceFunctionalGroupResponse, error) {
	if s.next == nil {
		return &CreateDeviceFunctionalGroupResponse{
			DeviceFunctionalGroup: request.GetDeviceFunctionalGroup(),
		}, nil
	}
	return s.Next().CreateDeviceFunctionalGroup(ctx, request)
}
func (s *BaseService) UpdateDeviceFunctionalGroup(ctx context.Context, request *UpdateDeviceFunctionalGroupRequest) (*UpdateDeviceFunctionalGroupResponse, error) {
	if s.next == nil {
		return &UpdateDeviceFunctionalGroupResponse{
			DeviceFunctionalGroup: request.GetDeviceFunctionalGroup(),
		}, nil
	}
	return s.Next().UpdateDeviceFunctionalGroup(ctx, request)
}
func (s *BaseService) DeleteDeviceFunctionalGroup(ctx context.Context, request *DeleteDeviceFunctionalGroupRequest) (*DeleteDeviceFunctionalGroupResponse, error) {
	if s.next == nil {
		return &DeleteDeviceFunctionalGroupResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteDeviceFunctionalGroup(ctx, request)
}
func (s *BaseService) GetDeviceFunctionalGroup(ctx context.Context, request *GetDeviceFunctionalGroupRequest) (*GetDeviceFunctionalGroupResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetDeviceFunctionalGroup(ctx, request)
}
func (s *BaseService) ListDeviceFunctionalGroup(ctx context.Context, request *ListDeviceFunctionalGroupRequest) (*ListDeviceFunctionalGroupResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListDeviceFunctionalGroup(ctx, request)
}

func (s *BaseService) CreateDeviceFunctionalGroupPhysicalRoleRef(ctx context.Context, request *CreateDeviceFunctionalGroupPhysicalRoleRefRequest) (*CreateDeviceFunctionalGroupPhysicalRoleRefResponse, error) {
	if s.next == nil {
		return &CreateDeviceFunctionalGroupPhysicalRoleRefResponse{
			ID:                                   request.ID,
			DeviceFunctionalGroupPhysicalRoleRef: request.GetDeviceFunctionalGroupPhysicalRoleRef(),
		}, nil
	}
	return s.Next().CreateDeviceFunctionalGroupPhysicalRoleRef(ctx, request)
}

func (s *BaseService) DeleteDeviceFunctionalGroupPhysicalRoleRef(ctx context.Context, request *DeleteDeviceFunctionalGroupPhysicalRoleRefRequest) (*DeleteDeviceFunctionalGroupPhysicalRoleRefResponse, error) {
	if s.next == nil {
		return &DeleteDeviceFunctionalGroupPhysicalRoleRefResponse{
			ID:                                   request.ID,
			DeviceFunctionalGroupPhysicalRoleRef: request.GetDeviceFunctionalGroupPhysicalRoleRef(),
		}, nil
	}
	return s.Next().DeleteDeviceFunctionalGroupPhysicalRoleRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateDeviceFunctionalGroupPhysicalRoleRef(ctx context.Context, request *CreateDeviceFunctionalGroupPhysicalRoleRefRequest) (*CreateDeviceFunctionalGroupPhysicalRoleRefResponse, error) {
	refField := models.DeviceFunctionalGroupFieldPhysicalRoleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDeviceFunctionalGroup(ctx, &GetDeviceFunctionalGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DeviceFunctionalGroup
		obj.AddPhysicalRoleRef(request.DeviceFunctionalGroupPhysicalRoleRef)

		_, err = s.BaseService.UpdateDeviceFunctionalGroup(ctx, &UpdateDeviceFunctionalGroupRequest{
			DeviceFunctionalGroup: obj,
			FieldMask:             types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateDeviceFunctionalGroupPhysicalRoleRefResponse{
		ID:                                   request.ID,
		DeviceFunctionalGroupPhysicalRoleRef: request.GetDeviceFunctionalGroupPhysicalRoleRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteDeviceFunctionalGroupPhysicalRoleRef(ctx context.Context, request *DeleteDeviceFunctionalGroupPhysicalRoleRefRequest) (*DeleteDeviceFunctionalGroupPhysicalRoleRefResponse, error) {
	refField := models.DeviceFunctionalGroupFieldPhysicalRoleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDeviceFunctionalGroup(ctx, &GetDeviceFunctionalGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DeviceFunctionalGroup
		obj.RemovePhysicalRoleRef(request.DeviceFunctionalGroupPhysicalRoleRef)

		_, err = s.BaseService.UpdateDeviceFunctionalGroup(ctx, &UpdateDeviceFunctionalGroupRequest{
			DeviceFunctionalGroup: obj,
			FieldMask:             types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteDeviceFunctionalGroupPhysicalRoleRefResponse{
		ID:                                   request.ID,
		DeviceFunctionalGroupPhysicalRoleRef: request.GetDeviceFunctionalGroupPhysicalRoleRef(),
	}, nil
}

func (s *BaseService) CreateDeviceFunctionalGroupTagRef(ctx context.Context, request *CreateDeviceFunctionalGroupTagRefRequest) (*CreateDeviceFunctionalGroupTagRefResponse, error) {
	if s.next == nil {
		return &CreateDeviceFunctionalGroupTagRefResponse{
			ID:                          request.ID,
			DeviceFunctionalGroupTagRef: request.GetDeviceFunctionalGroupTagRef(),
		}, nil
	}
	return s.Next().CreateDeviceFunctionalGroupTagRef(ctx, request)
}

func (s *BaseService) DeleteDeviceFunctionalGroupTagRef(ctx context.Context, request *DeleteDeviceFunctionalGroupTagRefRequest) (*DeleteDeviceFunctionalGroupTagRefResponse, error) {
	if s.next == nil {
		return &DeleteDeviceFunctionalGroupTagRefResponse{
			ID:                          request.ID,
			DeviceFunctionalGroupTagRef: request.GetDeviceFunctionalGroupTagRef(),
		}, nil
	}
	return s.Next().DeleteDeviceFunctionalGroupTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateDeviceFunctionalGroupTagRef(ctx context.Context, request *CreateDeviceFunctionalGroupTagRefRequest) (*CreateDeviceFunctionalGroupTagRefResponse, error) {
	refField := models.DeviceFunctionalGroupFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDeviceFunctionalGroup(ctx, &GetDeviceFunctionalGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DeviceFunctionalGroup
		obj.AddTagRef(request.DeviceFunctionalGroupTagRef)

		_, err = s.BaseService.UpdateDeviceFunctionalGroup(ctx, &UpdateDeviceFunctionalGroupRequest{
			DeviceFunctionalGroup: obj,
			FieldMask:             types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateDeviceFunctionalGroupTagRefResponse{
		ID:                          request.ID,
		DeviceFunctionalGroupTagRef: request.GetDeviceFunctionalGroupTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteDeviceFunctionalGroupTagRef(ctx context.Context, request *DeleteDeviceFunctionalGroupTagRefRequest) (*DeleteDeviceFunctionalGroupTagRefResponse, error) {
	refField := models.DeviceFunctionalGroupFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDeviceFunctionalGroup(ctx, &GetDeviceFunctionalGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DeviceFunctionalGroup
		obj.RemoveTagRef(request.DeviceFunctionalGroupTagRef)

		_, err = s.BaseService.UpdateDeviceFunctionalGroup(ctx, &UpdateDeviceFunctionalGroupRequest{
			DeviceFunctionalGroup: obj,
			FieldMask:             types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteDeviceFunctionalGroupTagRefResponse{
		ID:                          request.ID,
		DeviceFunctionalGroupTagRef: request.GetDeviceFunctionalGroupTagRef(),
	}, nil
}

func (s *EventProducerService) CreateDeviceFunctionalGroup(ctx context.Context, request *CreateDeviceFunctionalGroupRequest) (*CreateDeviceFunctionalGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateDeviceFunctionalGroupRequest{
				CreateDeviceFunctionalGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDeviceFunctionalGroup(ctx, request)
}
func (s *EventProducerService) UpdateDeviceFunctionalGroup(ctx context.Context, request *UpdateDeviceFunctionalGroupRequest) (*UpdateDeviceFunctionalGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateDeviceFunctionalGroupRequest{
				UpdateDeviceFunctionalGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateDeviceFunctionalGroup(ctx, request)
}
func (s *EventProducerService) DeleteDeviceFunctionalGroup(ctx context.Context, request *DeleteDeviceFunctionalGroupRequest) (*DeleteDeviceFunctionalGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteDeviceFunctionalGroupRequest{
				DeleteDeviceFunctionalGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDeviceFunctionalGroup(ctx, request)
}

func (s *EventProducerService) CreateDeviceFunctionalGroupPhysicalRoleRef(ctx context.Context, request *CreateDeviceFunctionalGroupPhysicalRoleRefRequest) (*CreateDeviceFunctionalGroupPhysicalRoleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateDeviceFunctionalGroupPhysicalRoleRefRequest{
			CreateDeviceFunctionalGroupPhysicalRoleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDeviceFunctionalGroupPhysicalRoleRef(ctx, request)
}

func (s *EventProducerService) DeleteDeviceFunctionalGroupPhysicalRoleRef(ctx context.Context, request *DeleteDeviceFunctionalGroupPhysicalRoleRefRequest) (*DeleteDeviceFunctionalGroupPhysicalRoleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteDeviceFunctionalGroupPhysicalRoleRefRequest{
			DeleteDeviceFunctionalGroupPhysicalRoleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDeviceFunctionalGroupPhysicalRoleRef(ctx, request)
}

func (s *EventProducerService) CreateDeviceFunctionalGroupTagRef(ctx context.Context, request *CreateDeviceFunctionalGroupTagRefRequest) (*CreateDeviceFunctionalGroupTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateDeviceFunctionalGroupTagRefRequest{
			CreateDeviceFunctionalGroupTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDeviceFunctionalGroupTagRef(ctx, request)
}

func (s *EventProducerService) DeleteDeviceFunctionalGroupTagRef(ctx context.Context, request *DeleteDeviceFunctionalGroupTagRefRequest) (*DeleteDeviceFunctionalGroupTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteDeviceFunctionalGroupTagRefRequest{
			DeleteDeviceFunctionalGroupTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDeviceFunctionalGroupTagRef(ctx, request)
}

func (e *Event_CreateDeviceFunctionalGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDeviceFunctionalGroupRequest
	model := request.DeviceFunctionalGroup
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetDeviceFunctionalGroup(ctx,
			&GetDeviceFunctionalGroupRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateDeviceFunctionalGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateDeviceFunctionalGroupRequest{
			CreateDeviceFunctionalGroupRequest: &CreateDeviceFunctionalGroupRequest{
				DeviceFunctionalGroup: response.GetDeviceFunctionalGroup(),
			},
		},
	}, nil
}

func (e *Event_CreateDeviceFunctionalGroupRequest) ToUpdateEvent() *Event {
	request := e.CreateDeviceFunctionalGroupRequest
	model := request.DeviceFunctionalGroup
	return &Event{
		Request: &Event_UpdateDeviceFunctionalGroupRequest{
			UpdateDeviceFunctionalGroupRequest: &UpdateDeviceFunctionalGroupRequest{
				DeviceFunctionalGroup: model,
				FieldMask:             request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateDeviceFunctionalGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateDeviceFunctionalGroupRequest
	response, err := service.UpdateDeviceFunctionalGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateDeviceFunctionalGroupRequest{
			UpdateDeviceFunctionalGroupRequest: &UpdateDeviceFunctionalGroupRequest{
				DeviceFunctionalGroup: response.GetDeviceFunctionalGroup(),
			},
		},
	}, nil
}

func (e *Event_UpdateDeviceFunctionalGroupRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteDeviceFunctionalGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDeviceFunctionalGroupRequest
	_, err := service.DeleteDeviceFunctionalGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteDeviceFunctionalGroupRequest{
			DeleteDeviceFunctionalGroupRequest: &DeleteDeviceFunctionalGroupRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateDeviceFunctionalGroupPhysicalRoleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDeviceFunctionalGroupPhysicalRoleRefRequest
	if _, err := service.CreateDeviceFunctionalGroupPhysicalRoleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateDeviceFunctionalGroupPhysicalRoleRefRequest{
		CreateDeviceFunctionalGroupPhysicalRoleRefRequest: request,
	}}, nil
}

func (e *Event_DeleteDeviceFunctionalGroupPhysicalRoleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDeviceFunctionalGroupPhysicalRoleRefRequest
	if _, err := service.DeleteDeviceFunctionalGroupPhysicalRoleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteDeviceFunctionalGroupPhysicalRoleRefRequest{
		DeleteDeviceFunctionalGroupPhysicalRoleRefRequest: request,
	}}, nil
}

func (e *Event_CreateDeviceFunctionalGroupTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDeviceFunctionalGroupTagRefRequest
	if _, err := service.CreateDeviceFunctionalGroupTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateDeviceFunctionalGroupTagRefRequest{
		CreateDeviceFunctionalGroupTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteDeviceFunctionalGroupTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDeviceFunctionalGroupTagRefRequest
	if _, err := service.DeleteDeviceFunctionalGroupTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteDeviceFunctionalGroupTagRefRequest{
		DeleteDeviceFunctionalGroupTagRefRequest: request,
	}}, nil
}

type DeviceImage = models.DeviceImage

func (s *BaseService) CreateDeviceImage(ctx context.Context, request *CreateDeviceImageRequest) (*CreateDeviceImageResponse, error) {
	if s.next == nil {
		return &CreateDeviceImageResponse{
			DeviceImage: request.GetDeviceImage(),
		}, nil
	}
	return s.Next().CreateDeviceImage(ctx, request)
}
func (s *BaseService) UpdateDeviceImage(ctx context.Context, request *UpdateDeviceImageRequest) (*UpdateDeviceImageResponse, error) {
	if s.next == nil {
		return &UpdateDeviceImageResponse{
			DeviceImage: request.GetDeviceImage(),
		}, nil
	}
	return s.Next().UpdateDeviceImage(ctx, request)
}
func (s *BaseService) DeleteDeviceImage(ctx context.Context, request *DeleteDeviceImageRequest) (*DeleteDeviceImageResponse, error) {
	if s.next == nil {
		return &DeleteDeviceImageResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteDeviceImage(ctx, request)
}
func (s *BaseService) GetDeviceImage(ctx context.Context, request *GetDeviceImageRequest) (*GetDeviceImageResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetDeviceImage(ctx, request)
}
func (s *BaseService) ListDeviceImage(ctx context.Context, request *ListDeviceImageRequest) (*ListDeviceImageResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListDeviceImage(ctx, request)
}

func (s *BaseService) CreateDeviceImageHardwareRef(ctx context.Context, request *CreateDeviceImageHardwareRefRequest) (*CreateDeviceImageHardwareRefResponse, error) {
	if s.next == nil {
		return &CreateDeviceImageHardwareRefResponse{
			ID:                     request.ID,
			DeviceImageHardwareRef: request.GetDeviceImageHardwareRef(),
		}, nil
	}
	return s.Next().CreateDeviceImageHardwareRef(ctx, request)
}

func (s *BaseService) DeleteDeviceImageHardwareRef(ctx context.Context, request *DeleteDeviceImageHardwareRefRequest) (*DeleteDeviceImageHardwareRefResponse, error) {
	if s.next == nil {
		return &DeleteDeviceImageHardwareRefResponse{
			ID:                     request.ID,
			DeviceImageHardwareRef: request.GetDeviceImageHardwareRef(),
		}, nil
	}
	return s.Next().DeleteDeviceImageHardwareRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateDeviceImageHardwareRef(ctx context.Context, request *CreateDeviceImageHardwareRefRequest) (*CreateDeviceImageHardwareRefResponse, error) {
	refField := models.DeviceImageFieldHardwareRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDeviceImage(ctx, &GetDeviceImageRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DeviceImage
		obj.AddHardwareRef(request.DeviceImageHardwareRef)

		_, err = s.BaseService.UpdateDeviceImage(ctx, &UpdateDeviceImageRequest{
			DeviceImage: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateDeviceImageHardwareRefResponse{
		ID:                     request.ID,
		DeviceImageHardwareRef: request.GetDeviceImageHardwareRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteDeviceImageHardwareRef(ctx context.Context, request *DeleteDeviceImageHardwareRefRequest) (*DeleteDeviceImageHardwareRefResponse, error) {
	refField := models.DeviceImageFieldHardwareRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDeviceImage(ctx, &GetDeviceImageRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DeviceImage
		obj.RemoveHardwareRef(request.DeviceImageHardwareRef)

		_, err = s.BaseService.UpdateDeviceImage(ctx, &UpdateDeviceImageRequest{
			DeviceImage: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteDeviceImageHardwareRefResponse{
		ID:                     request.ID,
		DeviceImageHardwareRef: request.GetDeviceImageHardwareRef(),
	}, nil
}

func (s *BaseService) CreateDeviceImageTagRef(ctx context.Context, request *CreateDeviceImageTagRefRequest) (*CreateDeviceImageTagRefResponse, error) {
	if s.next == nil {
		return &CreateDeviceImageTagRefResponse{
			ID:                request.ID,
			DeviceImageTagRef: request.GetDeviceImageTagRef(),
		}, nil
	}
	return s.Next().CreateDeviceImageTagRef(ctx, request)
}

func (s *BaseService) DeleteDeviceImageTagRef(ctx context.Context, request *DeleteDeviceImageTagRefRequest) (*DeleteDeviceImageTagRefResponse, error) {
	if s.next == nil {
		return &DeleteDeviceImageTagRefResponse{
			ID:                request.ID,
			DeviceImageTagRef: request.GetDeviceImageTagRef(),
		}, nil
	}
	return s.Next().DeleteDeviceImageTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateDeviceImageTagRef(ctx context.Context, request *CreateDeviceImageTagRefRequest) (*CreateDeviceImageTagRefResponse, error) {
	refField := models.DeviceImageFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDeviceImage(ctx, &GetDeviceImageRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DeviceImage
		obj.AddTagRef(request.DeviceImageTagRef)

		_, err = s.BaseService.UpdateDeviceImage(ctx, &UpdateDeviceImageRequest{
			DeviceImage: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateDeviceImageTagRefResponse{
		ID:                request.ID,
		DeviceImageTagRef: request.GetDeviceImageTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteDeviceImageTagRef(ctx context.Context, request *DeleteDeviceImageTagRefRequest) (*DeleteDeviceImageTagRefResponse, error) {
	refField := models.DeviceImageFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDeviceImage(ctx, &GetDeviceImageRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DeviceImage
		obj.RemoveTagRef(request.DeviceImageTagRef)

		_, err = s.BaseService.UpdateDeviceImage(ctx, &UpdateDeviceImageRequest{
			DeviceImage: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteDeviceImageTagRefResponse{
		ID:                request.ID,
		DeviceImageTagRef: request.GetDeviceImageTagRef(),
	}, nil
}

func (s *EventProducerService) CreateDeviceImage(ctx context.Context, request *CreateDeviceImageRequest) (*CreateDeviceImageResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateDeviceImageRequest{
				CreateDeviceImageRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDeviceImage(ctx, request)
}
func (s *EventProducerService) UpdateDeviceImage(ctx context.Context, request *UpdateDeviceImageRequest) (*UpdateDeviceImageResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateDeviceImageRequest{
				UpdateDeviceImageRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateDeviceImage(ctx, request)
}
func (s *EventProducerService) DeleteDeviceImage(ctx context.Context, request *DeleteDeviceImageRequest) (*DeleteDeviceImageResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteDeviceImageRequest{
				DeleteDeviceImageRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDeviceImage(ctx, request)
}

func (s *EventProducerService) CreateDeviceImageHardwareRef(ctx context.Context, request *CreateDeviceImageHardwareRefRequest) (*CreateDeviceImageHardwareRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateDeviceImageHardwareRefRequest{
			CreateDeviceImageHardwareRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDeviceImageHardwareRef(ctx, request)
}

func (s *EventProducerService) DeleteDeviceImageHardwareRef(ctx context.Context, request *DeleteDeviceImageHardwareRefRequest) (*DeleteDeviceImageHardwareRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteDeviceImageHardwareRefRequest{
			DeleteDeviceImageHardwareRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDeviceImageHardwareRef(ctx, request)
}

func (s *EventProducerService) CreateDeviceImageTagRef(ctx context.Context, request *CreateDeviceImageTagRefRequest) (*CreateDeviceImageTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateDeviceImageTagRefRequest{
			CreateDeviceImageTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDeviceImageTagRef(ctx, request)
}

func (s *EventProducerService) DeleteDeviceImageTagRef(ctx context.Context, request *DeleteDeviceImageTagRefRequest) (*DeleteDeviceImageTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteDeviceImageTagRefRequest{
			DeleteDeviceImageTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDeviceImageTagRef(ctx, request)
}

func (e *Event_CreateDeviceImageRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDeviceImageRequest
	model := request.DeviceImage
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetDeviceImage(ctx,
			&GetDeviceImageRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateDeviceImage(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateDeviceImageRequest{
			CreateDeviceImageRequest: &CreateDeviceImageRequest{
				DeviceImage: response.GetDeviceImage(),
			},
		},
	}, nil
}

func (e *Event_CreateDeviceImageRequest) ToUpdateEvent() *Event {
	request := e.CreateDeviceImageRequest
	model := request.DeviceImage
	return &Event{
		Request: &Event_UpdateDeviceImageRequest{
			UpdateDeviceImageRequest: &UpdateDeviceImageRequest{
				DeviceImage: model,
				FieldMask:   request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateDeviceImageRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateDeviceImageRequest
	response, err := service.UpdateDeviceImage(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateDeviceImageRequest{
			UpdateDeviceImageRequest: &UpdateDeviceImageRequest{
				DeviceImage: response.GetDeviceImage(),
			},
		},
	}, nil
}

func (e *Event_UpdateDeviceImageRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteDeviceImageRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDeviceImageRequest
	_, err := service.DeleteDeviceImage(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteDeviceImageRequest{
			DeleteDeviceImageRequest: &DeleteDeviceImageRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateDeviceImageHardwareRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDeviceImageHardwareRefRequest
	if _, err := service.CreateDeviceImageHardwareRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateDeviceImageHardwareRefRequest{
		CreateDeviceImageHardwareRefRequest: request,
	}}, nil
}

func (e *Event_DeleteDeviceImageHardwareRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDeviceImageHardwareRefRequest
	if _, err := service.DeleteDeviceImageHardwareRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteDeviceImageHardwareRefRequest{
		DeleteDeviceImageHardwareRefRequest: request,
	}}, nil
}

func (e *Event_CreateDeviceImageTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDeviceImageTagRefRequest
	if _, err := service.CreateDeviceImageTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateDeviceImageTagRefRequest{
		CreateDeviceImageTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteDeviceImageTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDeviceImageTagRefRequest
	if _, err := service.DeleteDeviceImageTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteDeviceImageTagRefRequest{
		DeleteDeviceImageTagRefRequest: request,
	}}, nil
}

type DevicemgrNode = models.DevicemgrNode

func (s *BaseService) CreateDevicemgrNode(ctx context.Context, request *CreateDevicemgrNodeRequest) (*CreateDevicemgrNodeResponse, error) {
	if s.next == nil {
		return &CreateDevicemgrNodeResponse{
			DevicemgrNode: request.GetDevicemgrNode(),
		}, nil
	}
	return s.Next().CreateDevicemgrNode(ctx, request)
}
func (s *BaseService) UpdateDevicemgrNode(ctx context.Context, request *UpdateDevicemgrNodeRequest) (*UpdateDevicemgrNodeResponse, error) {
	if s.next == nil {
		return &UpdateDevicemgrNodeResponse{
			DevicemgrNode: request.GetDevicemgrNode(),
		}, nil
	}
	return s.Next().UpdateDevicemgrNode(ctx, request)
}
func (s *BaseService) DeleteDevicemgrNode(ctx context.Context, request *DeleteDevicemgrNodeRequest) (*DeleteDevicemgrNodeResponse, error) {
	if s.next == nil {
		return &DeleteDevicemgrNodeResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteDevicemgrNode(ctx, request)
}
func (s *BaseService) GetDevicemgrNode(ctx context.Context, request *GetDevicemgrNodeRequest) (*GetDevicemgrNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetDevicemgrNode(ctx, request)
}
func (s *BaseService) ListDevicemgrNode(ctx context.Context, request *ListDevicemgrNodeRequest) (*ListDevicemgrNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListDevicemgrNode(ctx, request)
}

func (s *BaseService) CreateDevicemgrNodeTagRef(ctx context.Context, request *CreateDevicemgrNodeTagRefRequest) (*CreateDevicemgrNodeTagRefResponse, error) {
	if s.next == nil {
		return &CreateDevicemgrNodeTagRefResponse{
			ID:                  request.ID,
			DevicemgrNodeTagRef: request.GetDevicemgrNodeTagRef(),
		}, nil
	}
	return s.Next().CreateDevicemgrNodeTagRef(ctx, request)
}

func (s *BaseService) DeleteDevicemgrNodeTagRef(ctx context.Context, request *DeleteDevicemgrNodeTagRefRequest) (*DeleteDevicemgrNodeTagRefResponse, error) {
	if s.next == nil {
		return &DeleteDevicemgrNodeTagRefResponse{
			ID:                  request.ID,
			DevicemgrNodeTagRef: request.GetDevicemgrNodeTagRef(),
		}, nil
	}
	return s.Next().DeleteDevicemgrNodeTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateDevicemgrNodeTagRef(ctx context.Context, request *CreateDevicemgrNodeTagRefRequest) (*CreateDevicemgrNodeTagRefResponse, error) {
	refField := models.DevicemgrNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDevicemgrNode(ctx, &GetDevicemgrNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DevicemgrNode
		obj.AddTagRef(request.DevicemgrNodeTagRef)

		_, err = s.BaseService.UpdateDevicemgrNode(ctx, &UpdateDevicemgrNodeRequest{
			DevicemgrNode: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateDevicemgrNodeTagRefResponse{
		ID:                  request.ID,
		DevicemgrNodeTagRef: request.GetDevicemgrNodeTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteDevicemgrNodeTagRef(ctx context.Context, request *DeleteDevicemgrNodeTagRefRequest) (*DeleteDevicemgrNodeTagRefResponse, error) {
	refField := models.DevicemgrNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDevicemgrNode(ctx, &GetDevicemgrNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DevicemgrNode
		obj.RemoveTagRef(request.DevicemgrNodeTagRef)

		_, err = s.BaseService.UpdateDevicemgrNode(ctx, &UpdateDevicemgrNodeRequest{
			DevicemgrNode: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteDevicemgrNodeTagRefResponse{
		ID:                  request.ID,
		DevicemgrNodeTagRef: request.GetDevicemgrNodeTagRef(),
	}, nil
}

func (s *EventProducerService) CreateDevicemgrNode(ctx context.Context, request *CreateDevicemgrNodeRequest) (*CreateDevicemgrNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateDevicemgrNodeRequest{
				CreateDevicemgrNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDevicemgrNode(ctx, request)
}
func (s *EventProducerService) UpdateDevicemgrNode(ctx context.Context, request *UpdateDevicemgrNodeRequest) (*UpdateDevicemgrNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateDevicemgrNodeRequest{
				UpdateDevicemgrNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateDevicemgrNode(ctx, request)
}
func (s *EventProducerService) DeleteDevicemgrNode(ctx context.Context, request *DeleteDevicemgrNodeRequest) (*DeleteDevicemgrNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteDevicemgrNodeRequest{
				DeleteDevicemgrNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDevicemgrNode(ctx, request)
}

func (s *EventProducerService) CreateDevicemgrNodeTagRef(ctx context.Context, request *CreateDevicemgrNodeTagRefRequest) (*CreateDevicemgrNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateDevicemgrNodeTagRefRequest{
			CreateDevicemgrNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDevicemgrNodeTagRef(ctx, request)
}

func (s *EventProducerService) DeleteDevicemgrNodeTagRef(ctx context.Context, request *DeleteDevicemgrNodeTagRefRequest) (*DeleteDevicemgrNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteDevicemgrNodeTagRefRequest{
			DeleteDevicemgrNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDevicemgrNodeTagRef(ctx, request)
}

func (e *Event_CreateDevicemgrNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDevicemgrNodeRequest
	model := request.DevicemgrNode
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetDevicemgrNode(ctx,
			&GetDevicemgrNodeRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateDevicemgrNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateDevicemgrNodeRequest{
			CreateDevicemgrNodeRequest: &CreateDevicemgrNodeRequest{
				DevicemgrNode: response.GetDevicemgrNode(),
			},
		},
	}, nil
}

func (e *Event_CreateDevicemgrNodeRequest) ToUpdateEvent() *Event {
	request := e.CreateDevicemgrNodeRequest
	model := request.DevicemgrNode
	return &Event{
		Request: &Event_UpdateDevicemgrNodeRequest{
			UpdateDevicemgrNodeRequest: &UpdateDevicemgrNodeRequest{
				DevicemgrNode: model,
				FieldMask:     request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateDevicemgrNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateDevicemgrNodeRequest
	response, err := service.UpdateDevicemgrNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateDevicemgrNodeRequest{
			UpdateDevicemgrNodeRequest: &UpdateDevicemgrNodeRequest{
				DevicemgrNode: response.GetDevicemgrNode(),
			},
		},
	}, nil
}

func (e *Event_UpdateDevicemgrNodeRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteDevicemgrNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDevicemgrNodeRequest
	_, err := service.DeleteDevicemgrNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteDevicemgrNodeRequest{
			DeleteDevicemgrNodeRequest: &DeleteDevicemgrNodeRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateDevicemgrNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDevicemgrNodeTagRefRequest
	if _, err := service.CreateDevicemgrNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateDevicemgrNodeTagRefRequest{
		CreateDevicemgrNodeTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteDevicemgrNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDevicemgrNodeTagRefRequest
	if _, err := service.DeleteDevicemgrNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteDevicemgrNodeTagRefRequest{
		DeleteDevicemgrNodeTagRefRequest: request,
	}}, nil
}

type DiscoveryServiceAssignment = models.DiscoveryServiceAssignment

func (s *BaseService) CreateDiscoveryServiceAssignment(ctx context.Context, request *CreateDiscoveryServiceAssignmentRequest) (*CreateDiscoveryServiceAssignmentResponse, error) {
	if s.next == nil {
		return &CreateDiscoveryServiceAssignmentResponse{
			DiscoveryServiceAssignment: request.GetDiscoveryServiceAssignment(),
		}, nil
	}
	return s.Next().CreateDiscoveryServiceAssignment(ctx, request)
}
func (s *BaseService) UpdateDiscoveryServiceAssignment(ctx context.Context, request *UpdateDiscoveryServiceAssignmentRequest) (*UpdateDiscoveryServiceAssignmentResponse, error) {
	if s.next == nil {
		return &UpdateDiscoveryServiceAssignmentResponse{
			DiscoveryServiceAssignment: request.GetDiscoveryServiceAssignment(),
		}, nil
	}
	return s.Next().UpdateDiscoveryServiceAssignment(ctx, request)
}
func (s *BaseService) DeleteDiscoveryServiceAssignment(ctx context.Context, request *DeleteDiscoveryServiceAssignmentRequest) (*DeleteDiscoveryServiceAssignmentResponse, error) {
	if s.next == nil {
		return &DeleteDiscoveryServiceAssignmentResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteDiscoveryServiceAssignment(ctx, request)
}
func (s *BaseService) GetDiscoveryServiceAssignment(ctx context.Context, request *GetDiscoveryServiceAssignmentRequest) (*GetDiscoveryServiceAssignmentResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetDiscoveryServiceAssignment(ctx, request)
}
func (s *BaseService) ListDiscoveryServiceAssignment(ctx context.Context, request *ListDiscoveryServiceAssignmentRequest) (*ListDiscoveryServiceAssignmentResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListDiscoveryServiceAssignment(ctx, request)
}

func (s *BaseService) CreateDiscoveryServiceAssignmentTagRef(ctx context.Context, request *CreateDiscoveryServiceAssignmentTagRefRequest) (*CreateDiscoveryServiceAssignmentTagRefResponse, error) {
	if s.next == nil {
		return &CreateDiscoveryServiceAssignmentTagRefResponse{
			ID:                               request.ID,
			DiscoveryServiceAssignmentTagRef: request.GetDiscoveryServiceAssignmentTagRef(),
		}, nil
	}
	return s.Next().CreateDiscoveryServiceAssignmentTagRef(ctx, request)
}

func (s *BaseService) DeleteDiscoveryServiceAssignmentTagRef(ctx context.Context, request *DeleteDiscoveryServiceAssignmentTagRefRequest) (*DeleteDiscoveryServiceAssignmentTagRefResponse, error) {
	if s.next == nil {
		return &DeleteDiscoveryServiceAssignmentTagRefResponse{
			ID:                               request.ID,
			DiscoveryServiceAssignmentTagRef: request.GetDiscoveryServiceAssignmentTagRef(),
		}, nil
	}
	return s.Next().DeleteDiscoveryServiceAssignmentTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateDiscoveryServiceAssignmentTagRef(ctx context.Context, request *CreateDiscoveryServiceAssignmentTagRefRequest) (*CreateDiscoveryServiceAssignmentTagRefResponse, error) {
	refField := models.DiscoveryServiceAssignmentFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDiscoveryServiceAssignment(ctx, &GetDiscoveryServiceAssignmentRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DiscoveryServiceAssignment
		obj.AddTagRef(request.DiscoveryServiceAssignmentTagRef)

		_, err = s.BaseService.UpdateDiscoveryServiceAssignment(ctx, &UpdateDiscoveryServiceAssignmentRequest{
			DiscoveryServiceAssignment: obj,
			FieldMask:                  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateDiscoveryServiceAssignmentTagRefResponse{
		ID:                               request.ID,
		DiscoveryServiceAssignmentTagRef: request.GetDiscoveryServiceAssignmentTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteDiscoveryServiceAssignmentTagRef(ctx context.Context, request *DeleteDiscoveryServiceAssignmentTagRefRequest) (*DeleteDiscoveryServiceAssignmentTagRefResponse, error) {
	refField := models.DiscoveryServiceAssignmentFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDiscoveryServiceAssignment(ctx, &GetDiscoveryServiceAssignmentRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DiscoveryServiceAssignment
		obj.RemoveTagRef(request.DiscoveryServiceAssignmentTagRef)

		_, err = s.BaseService.UpdateDiscoveryServiceAssignment(ctx, &UpdateDiscoveryServiceAssignmentRequest{
			DiscoveryServiceAssignment: obj,
			FieldMask:                  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteDiscoveryServiceAssignmentTagRefResponse{
		ID:                               request.ID,
		DiscoveryServiceAssignmentTagRef: request.GetDiscoveryServiceAssignmentTagRef(),
	}, nil
}

func (s *EventProducerService) CreateDiscoveryServiceAssignment(ctx context.Context, request *CreateDiscoveryServiceAssignmentRequest) (*CreateDiscoveryServiceAssignmentResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateDiscoveryServiceAssignmentRequest{
				CreateDiscoveryServiceAssignmentRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDiscoveryServiceAssignment(ctx, request)
}
func (s *EventProducerService) UpdateDiscoveryServiceAssignment(ctx context.Context, request *UpdateDiscoveryServiceAssignmentRequest) (*UpdateDiscoveryServiceAssignmentResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateDiscoveryServiceAssignmentRequest{
				UpdateDiscoveryServiceAssignmentRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateDiscoveryServiceAssignment(ctx, request)
}
func (s *EventProducerService) DeleteDiscoveryServiceAssignment(ctx context.Context, request *DeleteDiscoveryServiceAssignmentRequest) (*DeleteDiscoveryServiceAssignmentResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteDiscoveryServiceAssignmentRequest{
				DeleteDiscoveryServiceAssignmentRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDiscoveryServiceAssignment(ctx, request)
}

func (s *EventProducerService) CreateDiscoveryServiceAssignmentTagRef(ctx context.Context, request *CreateDiscoveryServiceAssignmentTagRefRequest) (*CreateDiscoveryServiceAssignmentTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateDiscoveryServiceAssignmentTagRefRequest{
			CreateDiscoveryServiceAssignmentTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDiscoveryServiceAssignmentTagRef(ctx, request)
}

func (s *EventProducerService) DeleteDiscoveryServiceAssignmentTagRef(ctx context.Context, request *DeleteDiscoveryServiceAssignmentTagRefRequest) (*DeleteDiscoveryServiceAssignmentTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteDiscoveryServiceAssignmentTagRefRequest{
			DeleteDiscoveryServiceAssignmentTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDiscoveryServiceAssignmentTagRef(ctx, request)
}

func (e *Event_CreateDiscoveryServiceAssignmentRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDiscoveryServiceAssignmentRequest
	model := request.DiscoveryServiceAssignment
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetDiscoveryServiceAssignment(ctx,
			&GetDiscoveryServiceAssignmentRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateDiscoveryServiceAssignment(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateDiscoveryServiceAssignmentRequest{
			CreateDiscoveryServiceAssignmentRequest: &CreateDiscoveryServiceAssignmentRequest{
				DiscoveryServiceAssignment: response.GetDiscoveryServiceAssignment(),
			},
		},
	}, nil
}

func (e *Event_CreateDiscoveryServiceAssignmentRequest) ToUpdateEvent() *Event {
	request := e.CreateDiscoveryServiceAssignmentRequest
	model := request.DiscoveryServiceAssignment
	return &Event{
		Request: &Event_UpdateDiscoveryServiceAssignmentRequest{
			UpdateDiscoveryServiceAssignmentRequest: &UpdateDiscoveryServiceAssignmentRequest{
				DiscoveryServiceAssignment: model,
				FieldMask:                  request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateDiscoveryServiceAssignmentRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateDiscoveryServiceAssignmentRequest
	response, err := service.UpdateDiscoveryServiceAssignment(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateDiscoveryServiceAssignmentRequest{
			UpdateDiscoveryServiceAssignmentRequest: &UpdateDiscoveryServiceAssignmentRequest{
				DiscoveryServiceAssignment: response.GetDiscoveryServiceAssignment(),
			},
		},
	}, nil
}

func (e *Event_UpdateDiscoveryServiceAssignmentRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteDiscoveryServiceAssignmentRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDiscoveryServiceAssignmentRequest
	_, err := service.DeleteDiscoveryServiceAssignment(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteDiscoveryServiceAssignmentRequest{
			DeleteDiscoveryServiceAssignmentRequest: &DeleteDiscoveryServiceAssignmentRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateDiscoveryServiceAssignmentTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDiscoveryServiceAssignmentTagRefRequest
	if _, err := service.CreateDiscoveryServiceAssignmentTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateDiscoveryServiceAssignmentTagRefRequest{
		CreateDiscoveryServiceAssignmentTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteDiscoveryServiceAssignmentTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDiscoveryServiceAssignmentTagRefRequest
	if _, err := service.DeleteDiscoveryServiceAssignmentTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteDiscoveryServiceAssignmentTagRefRequest{
		DeleteDiscoveryServiceAssignmentTagRefRequest: request,
	}}, nil
}

type Domain = models.Domain

func (s *BaseService) CreateDomain(ctx context.Context, request *CreateDomainRequest) (*CreateDomainResponse, error) {
	if s.next == nil {
		return &CreateDomainResponse{
			Domain: request.GetDomain(),
		}, nil
	}
	return s.Next().CreateDomain(ctx, request)
}
func (s *BaseService) UpdateDomain(ctx context.Context, request *UpdateDomainRequest) (*UpdateDomainResponse, error) {
	if s.next == nil {
		return &UpdateDomainResponse{
			Domain: request.GetDomain(),
		}, nil
	}
	return s.Next().UpdateDomain(ctx, request)
}
func (s *BaseService) DeleteDomain(ctx context.Context, request *DeleteDomainRequest) (*DeleteDomainResponse, error) {
	if s.next == nil {
		return &DeleteDomainResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteDomain(ctx, request)
}
func (s *BaseService) GetDomain(ctx context.Context, request *GetDomainRequest) (*GetDomainResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetDomain(ctx, request)
}
func (s *BaseService) ListDomain(ctx context.Context, request *ListDomainRequest) (*ListDomainResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListDomain(ctx, request)
}

func (s *BaseService) CreateDomainTagRef(ctx context.Context, request *CreateDomainTagRefRequest) (*CreateDomainTagRefResponse, error) {
	if s.next == nil {
		return &CreateDomainTagRefResponse{
			ID:           request.ID,
			DomainTagRef: request.GetDomainTagRef(),
		}, nil
	}
	return s.Next().CreateDomainTagRef(ctx, request)
}

func (s *BaseService) DeleteDomainTagRef(ctx context.Context, request *DeleteDomainTagRefRequest) (*DeleteDomainTagRefResponse, error) {
	if s.next == nil {
		return &DeleteDomainTagRefResponse{
			ID:           request.ID,
			DomainTagRef: request.GetDomainTagRef(),
		}, nil
	}
	return s.Next().DeleteDomainTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateDomainTagRef(ctx context.Context, request *CreateDomainTagRefRequest) (*CreateDomainTagRefResponse, error) {
	refField := models.DomainFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDomain(ctx, &GetDomainRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Domain
		obj.AddTagRef(request.DomainTagRef)

		_, err = s.BaseService.UpdateDomain(ctx, &UpdateDomainRequest{
			Domain:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateDomainTagRefResponse{
		ID:           request.ID,
		DomainTagRef: request.GetDomainTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteDomainTagRef(ctx context.Context, request *DeleteDomainTagRefRequest) (*DeleteDomainTagRefResponse, error) {
	refField := models.DomainFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDomain(ctx, &GetDomainRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Domain
		obj.RemoveTagRef(request.DomainTagRef)

		_, err = s.BaseService.UpdateDomain(ctx, &UpdateDomainRequest{
			Domain:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteDomainTagRefResponse{
		ID:           request.ID,
		DomainTagRef: request.GetDomainTagRef(),
	}, nil
}

func (s *EventProducerService) CreateDomain(ctx context.Context, request *CreateDomainRequest) (*CreateDomainResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateDomainRequest{
				CreateDomainRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDomain(ctx, request)
}
func (s *EventProducerService) UpdateDomain(ctx context.Context, request *UpdateDomainRequest) (*UpdateDomainResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateDomainRequest{
				UpdateDomainRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateDomain(ctx, request)
}
func (s *EventProducerService) DeleteDomain(ctx context.Context, request *DeleteDomainRequest) (*DeleteDomainResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteDomainRequest{
				DeleteDomainRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDomain(ctx, request)
}

func (s *EventProducerService) CreateDomainTagRef(ctx context.Context, request *CreateDomainTagRefRequest) (*CreateDomainTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateDomainTagRefRequest{
			CreateDomainTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDomainTagRef(ctx, request)
}

func (s *EventProducerService) DeleteDomainTagRef(ctx context.Context, request *DeleteDomainTagRefRequest) (*DeleteDomainTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteDomainTagRefRequest{
			DeleteDomainTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDomainTagRef(ctx, request)
}

func (e *Event_CreateDomainRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDomainRequest
	model := request.Domain
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetDomain(ctx,
			&GetDomainRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateDomain(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateDomainRequest{
			CreateDomainRequest: &CreateDomainRequest{
				Domain: response.GetDomain(),
			},
		},
	}, nil
}

func (e *Event_CreateDomainRequest) ToUpdateEvent() *Event {
	request := e.CreateDomainRequest
	model := request.Domain
	return &Event{
		Request: &Event_UpdateDomainRequest{
			UpdateDomainRequest: &UpdateDomainRequest{
				Domain:    model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateDomainRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateDomainRequest
	response, err := service.UpdateDomain(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateDomainRequest{
			UpdateDomainRequest: &UpdateDomainRequest{
				Domain: response.GetDomain(),
			},
		},
	}, nil
}

func (e *Event_UpdateDomainRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteDomainRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDomainRequest
	_, err := service.DeleteDomain(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteDomainRequest{
			DeleteDomainRequest: &DeleteDomainRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateDomainTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDomainTagRefRequest
	if _, err := service.CreateDomainTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateDomainTagRefRequest{
		CreateDomainTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteDomainTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDomainTagRefRequest
	if _, err := service.DeleteDomainTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteDomainTagRefRequest{
		DeleteDomainTagRefRequest: request,
	}}, nil
}

type DsaRule = models.DsaRule

func (s *BaseService) CreateDsaRule(ctx context.Context, request *CreateDsaRuleRequest) (*CreateDsaRuleResponse, error) {
	if s.next == nil {
		return &CreateDsaRuleResponse{
			DsaRule: request.GetDsaRule(),
		}, nil
	}
	return s.Next().CreateDsaRule(ctx, request)
}
func (s *BaseService) UpdateDsaRule(ctx context.Context, request *UpdateDsaRuleRequest) (*UpdateDsaRuleResponse, error) {
	if s.next == nil {
		return &UpdateDsaRuleResponse{
			DsaRule: request.GetDsaRule(),
		}, nil
	}
	return s.Next().UpdateDsaRule(ctx, request)
}
func (s *BaseService) DeleteDsaRule(ctx context.Context, request *DeleteDsaRuleRequest) (*DeleteDsaRuleResponse, error) {
	if s.next == nil {
		return &DeleteDsaRuleResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteDsaRule(ctx, request)
}
func (s *BaseService) GetDsaRule(ctx context.Context, request *GetDsaRuleRequest) (*GetDsaRuleResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetDsaRule(ctx, request)
}
func (s *BaseService) ListDsaRule(ctx context.Context, request *ListDsaRuleRequest) (*ListDsaRuleResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListDsaRule(ctx, request)
}

func (s *BaseService) CreateDsaRuleTagRef(ctx context.Context, request *CreateDsaRuleTagRefRequest) (*CreateDsaRuleTagRefResponse, error) {
	if s.next == nil {
		return &CreateDsaRuleTagRefResponse{
			ID:            request.ID,
			DsaRuleTagRef: request.GetDsaRuleTagRef(),
		}, nil
	}
	return s.Next().CreateDsaRuleTagRef(ctx, request)
}

func (s *BaseService) DeleteDsaRuleTagRef(ctx context.Context, request *DeleteDsaRuleTagRefRequest) (*DeleteDsaRuleTagRefResponse, error) {
	if s.next == nil {
		return &DeleteDsaRuleTagRefResponse{
			ID:            request.ID,
			DsaRuleTagRef: request.GetDsaRuleTagRef(),
		}, nil
	}
	return s.Next().DeleteDsaRuleTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateDsaRuleTagRef(ctx context.Context, request *CreateDsaRuleTagRefRequest) (*CreateDsaRuleTagRefResponse, error) {
	refField := models.DsaRuleFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDsaRule(ctx, &GetDsaRuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DsaRule
		obj.AddTagRef(request.DsaRuleTagRef)

		_, err = s.BaseService.UpdateDsaRule(ctx, &UpdateDsaRuleRequest{
			DsaRule:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateDsaRuleTagRefResponse{
		ID:            request.ID,
		DsaRuleTagRef: request.GetDsaRuleTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteDsaRuleTagRef(ctx context.Context, request *DeleteDsaRuleTagRefRequest) (*DeleteDsaRuleTagRefResponse, error) {
	refField := models.DsaRuleFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetDsaRule(ctx, &GetDsaRuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.DsaRule
		obj.RemoveTagRef(request.DsaRuleTagRef)

		_, err = s.BaseService.UpdateDsaRule(ctx, &UpdateDsaRuleRequest{
			DsaRule:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteDsaRuleTagRefResponse{
		ID:            request.ID,
		DsaRuleTagRef: request.GetDsaRuleTagRef(),
	}, nil
}

func (s *EventProducerService) CreateDsaRule(ctx context.Context, request *CreateDsaRuleRequest) (*CreateDsaRuleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateDsaRuleRequest{
				CreateDsaRuleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDsaRule(ctx, request)
}
func (s *EventProducerService) UpdateDsaRule(ctx context.Context, request *UpdateDsaRuleRequest) (*UpdateDsaRuleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateDsaRuleRequest{
				UpdateDsaRuleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateDsaRule(ctx, request)
}
func (s *EventProducerService) DeleteDsaRule(ctx context.Context, request *DeleteDsaRuleRequest) (*DeleteDsaRuleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteDsaRuleRequest{
				DeleteDsaRuleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDsaRule(ctx, request)
}

func (s *EventProducerService) CreateDsaRuleTagRef(ctx context.Context, request *CreateDsaRuleTagRefRequest) (*CreateDsaRuleTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateDsaRuleTagRefRequest{
			CreateDsaRuleTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateDsaRuleTagRef(ctx, request)
}

func (s *EventProducerService) DeleteDsaRuleTagRef(ctx context.Context, request *DeleteDsaRuleTagRefRequest) (*DeleteDsaRuleTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteDsaRuleTagRefRequest{
			DeleteDsaRuleTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteDsaRuleTagRef(ctx, request)
}

func (e *Event_CreateDsaRuleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDsaRuleRequest
	model := request.DsaRule
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetDsaRule(ctx,
			&GetDsaRuleRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateDsaRule(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateDsaRuleRequest{
			CreateDsaRuleRequest: &CreateDsaRuleRequest{
				DsaRule: response.GetDsaRule(),
			},
		},
	}, nil
}

func (e *Event_CreateDsaRuleRequest) ToUpdateEvent() *Event {
	request := e.CreateDsaRuleRequest
	model := request.DsaRule
	return &Event{
		Request: &Event_UpdateDsaRuleRequest{
			UpdateDsaRuleRequest: &UpdateDsaRuleRequest{
				DsaRule:   model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateDsaRuleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateDsaRuleRequest
	response, err := service.UpdateDsaRule(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateDsaRuleRequest{
			UpdateDsaRuleRequest: &UpdateDsaRuleRequest{
				DsaRule: response.GetDsaRule(),
			},
		},
	}, nil
}

func (e *Event_UpdateDsaRuleRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteDsaRuleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDsaRuleRequest
	_, err := service.DeleteDsaRule(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteDsaRuleRequest{
			DeleteDsaRuleRequest: &DeleteDsaRuleRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateDsaRuleTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateDsaRuleTagRefRequest
	if _, err := service.CreateDsaRuleTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateDsaRuleTagRefRequest{
		CreateDsaRuleTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteDsaRuleTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteDsaRuleTagRefRequest
	if _, err := service.DeleteDsaRuleTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteDsaRuleTagRefRequest{
		DeleteDsaRuleTagRefRequest: request,
	}}, nil
}

type E2ServiceProvider = models.E2ServiceProvider

func (s *BaseService) CreateE2ServiceProvider(ctx context.Context, request *CreateE2ServiceProviderRequest) (*CreateE2ServiceProviderResponse, error) {
	if s.next == nil {
		return &CreateE2ServiceProviderResponse{
			E2ServiceProvider: request.GetE2ServiceProvider(),
		}, nil
	}
	return s.Next().CreateE2ServiceProvider(ctx, request)
}
func (s *BaseService) UpdateE2ServiceProvider(ctx context.Context, request *UpdateE2ServiceProviderRequest) (*UpdateE2ServiceProviderResponse, error) {
	if s.next == nil {
		return &UpdateE2ServiceProviderResponse{
			E2ServiceProvider: request.GetE2ServiceProvider(),
		}, nil
	}
	return s.Next().UpdateE2ServiceProvider(ctx, request)
}
func (s *BaseService) DeleteE2ServiceProvider(ctx context.Context, request *DeleteE2ServiceProviderRequest) (*DeleteE2ServiceProviderResponse, error) {
	if s.next == nil {
		return &DeleteE2ServiceProviderResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteE2ServiceProvider(ctx, request)
}
func (s *BaseService) GetE2ServiceProvider(ctx context.Context, request *GetE2ServiceProviderRequest) (*GetE2ServiceProviderResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetE2ServiceProvider(ctx, request)
}
func (s *BaseService) ListE2ServiceProvider(ctx context.Context, request *ListE2ServiceProviderRequest) (*ListE2ServiceProviderResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListE2ServiceProvider(ctx, request)
}

func (s *BaseService) CreateE2ServiceProviderPeeringPolicyRef(ctx context.Context, request *CreateE2ServiceProviderPeeringPolicyRefRequest) (*CreateE2ServiceProviderPeeringPolicyRefResponse, error) {
	if s.next == nil {
		return &CreateE2ServiceProviderPeeringPolicyRefResponse{
			ID:                                request.ID,
			E2ServiceProviderPeeringPolicyRef: request.GetE2ServiceProviderPeeringPolicyRef(),
		}, nil
	}
	return s.Next().CreateE2ServiceProviderPeeringPolicyRef(ctx, request)
}

func (s *BaseService) DeleteE2ServiceProviderPeeringPolicyRef(ctx context.Context, request *DeleteE2ServiceProviderPeeringPolicyRefRequest) (*DeleteE2ServiceProviderPeeringPolicyRefResponse, error) {
	if s.next == nil {
		return &DeleteE2ServiceProviderPeeringPolicyRefResponse{
			ID:                                request.ID,
			E2ServiceProviderPeeringPolicyRef: request.GetE2ServiceProviderPeeringPolicyRef(),
		}, nil
	}
	return s.Next().DeleteE2ServiceProviderPeeringPolicyRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateE2ServiceProviderPeeringPolicyRef(ctx context.Context, request *CreateE2ServiceProviderPeeringPolicyRefRequest) (*CreateE2ServiceProviderPeeringPolicyRefResponse, error) {
	refField := models.E2ServiceProviderFieldPeeringPolicyRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetE2ServiceProvider(ctx, &GetE2ServiceProviderRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.E2ServiceProvider
		obj.AddPeeringPolicyRef(request.E2ServiceProviderPeeringPolicyRef)

		_, err = s.BaseService.UpdateE2ServiceProvider(ctx, &UpdateE2ServiceProviderRequest{
			E2ServiceProvider: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateE2ServiceProviderPeeringPolicyRefResponse{
		ID:                                request.ID,
		E2ServiceProviderPeeringPolicyRef: request.GetE2ServiceProviderPeeringPolicyRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteE2ServiceProviderPeeringPolicyRef(ctx context.Context, request *DeleteE2ServiceProviderPeeringPolicyRefRequest) (*DeleteE2ServiceProviderPeeringPolicyRefResponse, error) {
	refField := models.E2ServiceProviderFieldPeeringPolicyRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetE2ServiceProvider(ctx, &GetE2ServiceProviderRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.E2ServiceProvider
		obj.RemovePeeringPolicyRef(request.E2ServiceProviderPeeringPolicyRef)

		_, err = s.BaseService.UpdateE2ServiceProvider(ctx, &UpdateE2ServiceProviderRequest{
			E2ServiceProvider: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteE2ServiceProviderPeeringPolicyRefResponse{
		ID:                                request.ID,
		E2ServiceProviderPeeringPolicyRef: request.GetE2ServiceProviderPeeringPolicyRef(),
	}, nil
}

func (s *BaseService) CreateE2ServiceProviderPhysicalRouterRef(ctx context.Context, request *CreateE2ServiceProviderPhysicalRouterRefRequest) (*CreateE2ServiceProviderPhysicalRouterRefResponse, error) {
	if s.next == nil {
		return &CreateE2ServiceProviderPhysicalRouterRefResponse{
			ID:                                 request.ID,
			E2ServiceProviderPhysicalRouterRef: request.GetE2ServiceProviderPhysicalRouterRef(),
		}, nil
	}
	return s.Next().CreateE2ServiceProviderPhysicalRouterRef(ctx, request)
}

func (s *BaseService) DeleteE2ServiceProviderPhysicalRouterRef(ctx context.Context, request *DeleteE2ServiceProviderPhysicalRouterRefRequest) (*DeleteE2ServiceProviderPhysicalRouterRefResponse, error) {
	if s.next == nil {
		return &DeleteE2ServiceProviderPhysicalRouterRefResponse{
			ID:                                 request.ID,
			E2ServiceProviderPhysicalRouterRef: request.GetE2ServiceProviderPhysicalRouterRef(),
		}, nil
	}
	return s.Next().DeleteE2ServiceProviderPhysicalRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateE2ServiceProviderPhysicalRouterRef(ctx context.Context, request *CreateE2ServiceProviderPhysicalRouterRefRequest) (*CreateE2ServiceProviderPhysicalRouterRefResponse, error) {
	refField := models.E2ServiceProviderFieldPhysicalRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetE2ServiceProvider(ctx, &GetE2ServiceProviderRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.E2ServiceProvider
		obj.AddPhysicalRouterRef(request.E2ServiceProviderPhysicalRouterRef)

		_, err = s.BaseService.UpdateE2ServiceProvider(ctx, &UpdateE2ServiceProviderRequest{
			E2ServiceProvider: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateE2ServiceProviderPhysicalRouterRefResponse{
		ID:                                 request.ID,
		E2ServiceProviderPhysicalRouterRef: request.GetE2ServiceProviderPhysicalRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteE2ServiceProviderPhysicalRouterRef(ctx context.Context, request *DeleteE2ServiceProviderPhysicalRouterRefRequest) (*DeleteE2ServiceProviderPhysicalRouterRefResponse, error) {
	refField := models.E2ServiceProviderFieldPhysicalRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetE2ServiceProvider(ctx, &GetE2ServiceProviderRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.E2ServiceProvider
		obj.RemovePhysicalRouterRef(request.E2ServiceProviderPhysicalRouterRef)

		_, err = s.BaseService.UpdateE2ServiceProvider(ctx, &UpdateE2ServiceProviderRequest{
			E2ServiceProvider: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteE2ServiceProviderPhysicalRouterRefResponse{
		ID:                                 request.ID,
		E2ServiceProviderPhysicalRouterRef: request.GetE2ServiceProviderPhysicalRouterRef(),
	}, nil
}

func (s *BaseService) CreateE2ServiceProviderTagRef(ctx context.Context, request *CreateE2ServiceProviderTagRefRequest) (*CreateE2ServiceProviderTagRefResponse, error) {
	if s.next == nil {
		return &CreateE2ServiceProviderTagRefResponse{
			ID:                      request.ID,
			E2ServiceProviderTagRef: request.GetE2ServiceProviderTagRef(),
		}, nil
	}
	return s.Next().CreateE2ServiceProviderTagRef(ctx, request)
}

func (s *BaseService) DeleteE2ServiceProviderTagRef(ctx context.Context, request *DeleteE2ServiceProviderTagRefRequest) (*DeleteE2ServiceProviderTagRefResponse, error) {
	if s.next == nil {
		return &DeleteE2ServiceProviderTagRefResponse{
			ID:                      request.ID,
			E2ServiceProviderTagRef: request.GetE2ServiceProviderTagRef(),
		}, nil
	}
	return s.Next().DeleteE2ServiceProviderTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateE2ServiceProviderTagRef(ctx context.Context, request *CreateE2ServiceProviderTagRefRequest) (*CreateE2ServiceProviderTagRefResponse, error) {
	refField := models.E2ServiceProviderFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetE2ServiceProvider(ctx, &GetE2ServiceProviderRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.E2ServiceProvider
		obj.AddTagRef(request.E2ServiceProviderTagRef)

		_, err = s.BaseService.UpdateE2ServiceProvider(ctx, &UpdateE2ServiceProviderRequest{
			E2ServiceProvider: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateE2ServiceProviderTagRefResponse{
		ID:                      request.ID,
		E2ServiceProviderTagRef: request.GetE2ServiceProviderTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteE2ServiceProviderTagRef(ctx context.Context, request *DeleteE2ServiceProviderTagRefRequest) (*DeleteE2ServiceProviderTagRefResponse, error) {
	refField := models.E2ServiceProviderFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetE2ServiceProvider(ctx, &GetE2ServiceProviderRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.E2ServiceProvider
		obj.RemoveTagRef(request.E2ServiceProviderTagRef)

		_, err = s.BaseService.UpdateE2ServiceProvider(ctx, &UpdateE2ServiceProviderRequest{
			E2ServiceProvider: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteE2ServiceProviderTagRefResponse{
		ID:                      request.ID,
		E2ServiceProviderTagRef: request.GetE2ServiceProviderTagRef(),
	}, nil
}

func (s *EventProducerService) CreateE2ServiceProvider(ctx context.Context, request *CreateE2ServiceProviderRequest) (*CreateE2ServiceProviderResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateE2ServiceProviderRequest{
				CreateE2ServiceProviderRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateE2ServiceProvider(ctx, request)
}
func (s *EventProducerService) UpdateE2ServiceProvider(ctx context.Context, request *UpdateE2ServiceProviderRequest) (*UpdateE2ServiceProviderResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateE2ServiceProviderRequest{
				UpdateE2ServiceProviderRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateE2ServiceProvider(ctx, request)
}
func (s *EventProducerService) DeleteE2ServiceProvider(ctx context.Context, request *DeleteE2ServiceProviderRequest) (*DeleteE2ServiceProviderResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteE2ServiceProviderRequest{
				DeleteE2ServiceProviderRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteE2ServiceProvider(ctx, request)
}

func (s *EventProducerService) CreateE2ServiceProviderTagRef(ctx context.Context, request *CreateE2ServiceProviderTagRefRequest) (*CreateE2ServiceProviderTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateE2ServiceProviderTagRefRequest{
			CreateE2ServiceProviderTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateE2ServiceProviderTagRef(ctx, request)
}

func (s *EventProducerService) DeleteE2ServiceProviderTagRef(ctx context.Context, request *DeleteE2ServiceProviderTagRefRequest) (*DeleteE2ServiceProviderTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteE2ServiceProviderTagRefRequest{
			DeleteE2ServiceProviderTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteE2ServiceProviderTagRef(ctx, request)
}

func (s *EventProducerService) CreateE2ServiceProviderPeeringPolicyRef(ctx context.Context, request *CreateE2ServiceProviderPeeringPolicyRefRequest) (*CreateE2ServiceProviderPeeringPolicyRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateE2ServiceProviderPeeringPolicyRefRequest{
			CreateE2ServiceProviderPeeringPolicyRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateE2ServiceProviderPeeringPolicyRef(ctx, request)
}

func (s *EventProducerService) DeleteE2ServiceProviderPeeringPolicyRef(ctx context.Context, request *DeleteE2ServiceProviderPeeringPolicyRefRequest) (*DeleteE2ServiceProviderPeeringPolicyRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteE2ServiceProviderPeeringPolicyRefRequest{
			DeleteE2ServiceProviderPeeringPolicyRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteE2ServiceProviderPeeringPolicyRef(ctx, request)
}

func (s *EventProducerService) CreateE2ServiceProviderPhysicalRouterRef(ctx context.Context, request *CreateE2ServiceProviderPhysicalRouterRefRequest) (*CreateE2ServiceProviderPhysicalRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateE2ServiceProviderPhysicalRouterRefRequest{
			CreateE2ServiceProviderPhysicalRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateE2ServiceProviderPhysicalRouterRef(ctx, request)
}

func (s *EventProducerService) DeleteE2ServiceProviderPhysicalRouterRef(ctx context.Context, request *DeleteE2ServiceProviderPhysicalRouterRefRequest) (*DeleteE2ServiceProviderPhysicalRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteE2ServiceProviderPhysicalRouterRefRequest{
			DeleteE2ServiceProviderPhysicalRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteE2ServiceProviderPhysicalRouterRef(ctx, request)
}

func (e *Event_CreateE2ServiceProviderRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateE2ServiceProviderRequest
	model := request.E2ServiceProvider
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetE2ServiceProvider(ctx,
			&GetE2ServiceProviderRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateE2ServiceProvider(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateE2ServiceProviderRequest{
			CreateE2ServiceProviderRequest: &CreateE2ServiceProviderRequest{
				E2ServiceProvider: response.GetE2ServiceProvider(),
			},
		},
	}, nil
}

func (e *Event_CreateE2ServiceProviderRequest) ToUpdateEvent() *Event {
	request := e.CreateE2ServiceProviderRequest
	model := request.E2ServiceProvider
	return &Event{
		Request: &Event_UpdateE2ServiceProviderRequest{
			UpdateE2ServiceProviderRequest: &UpdateE2ServiceProviderRequest{
				E2ServiceProvider: model,
				FieldMask:         request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateE2ServiceProviderRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateE2ServiceProviderRequest
	response, err := service.UpdateE2ServiceProvider(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateE2ServiceProviderRequest{
			UpdateE2ServiceProviderRequest: &UpdateE2ServiceProviderRequest{
				E2ServiceProvider: response.GetE2ServiceProvider(),
			},
		},
	}, nil
}

func (e *Event_UpdateE2ServiceProviderRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteE2ServiceProviderRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteE2ServiceProviderRequest
	_, err := service.DeleteE2ServiceProvider(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteE2ServiceProviderRequest{
			DeleteE2ServiceProviderRequest: &DeleteE2ServiceProviderRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateE2ServiceProviderPeeringPolicyRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateE2ServiceProviderPeeringPolicyRefRequest
	if _, err := service.CreateE2ServiceProviderPeeringPolicyRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateE2ServiceProviderPeeringPolicyRefRequest{
		CreateE2ServiceProviderPeeringPolicyRefRequest: request,
	}}, nil
}

func (e *Event_DeleteE2ServiceProviderPeeringPolicyRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteE2ServiceProviderPeeringPolicyRefRequest
	if _, err := service.DeleteE2ServiceProviderPeeringPolicyRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteE2ServiceProviderPeeringPolicyRefRequest{
		DeleteE2ServiceProviderPeeringPolicyRefRequest: request,
	}}, nil
}

func (e *Event_CreateE2ServiceProviderPhysicalRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateE2ServiceProviderPhysicalRouterRefRequest
	if _, err := service.CreateE2ServiceProviderPhysicalRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateE2ServiceProviderPhysicalRouterRefRequest{
		CreateE2ServiceProviderPhysicalRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeleteE2ServiceProviderPhysicalRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteE2ServiceProviderPhysicalRouterRefRequest
	if _, err := service.DeleteE2ServiceProviderPhysicalRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteE2ServiceProviderPhysicalRouterRefRequest{
		DeleteE2ServiceProviderPhysicalRouterRefRequest: request,
	}}, nil
}

func (e *Event_CreateE2ServiceProviderTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateE2ServiceProviderTagRefRequest
	if _, err := service.CreateE2ServiceProviderTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateE2ServiceProviderTagRefRequest{
		CreateE2ServiceProviderTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteE2ServiceProviderTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteE2ServiceProviderTagRefRequest
	if _, err := service.DeleteE2ServiceProviderTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteE2ServiceProviderTagRefRequest{
		DeleteE2ServiceProviderTagRefRequest: request,
	}}, nil
}

type FabricNamespace = models.FabricNamespace

func (s *BaseService) CreateFabricNamespace(ctx context.Context, request *CreateFabricNamespaceRequest) (*CreateFabricNamespaceResponse, error) {
	if s.next == nil {
		return &CreateFabricNamespaceResponse{
			FabricNamespace: request.GetFabricNamespace(),
		}, nil
	}
	return s.Next().CreateFabricNamespace(ctx, request)
}
func (s *BaseService) UpdateFabricNamespace(ctx context.Context, request *UpdateFabricNamespaceRequest) (*UpdateFabricNamespaceResponse, error) {
	if s.next == nil {
		return &UpdateFabricNamespaceResponse{
			FabricNamespace: request.GetFabricNamespace(),
		}, nil
	}
	return s.Next().UpdateFabricNamespace(ctx, request)
}
func (s *BaseService) DeleteFabricNamespace(ctx context.Context, request *DeleteFabricNamespaceRequest) (*DeleteFabricNamespaceResponse, error) {
	if s.next == nil {
		return &DeleteFabricNamespaceResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteFabricNamespace(ctx, request)
}
func (s *BaseService) GetFabricNamespace(ctx context.Context, request *GetFabricNamespaceRequest) (*GetFabricNamespaceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetFabricNamespace(ctx, request)
}
func (s *BaseService) ListFabricNamespace(ctx context.Context, request *ListFabricNamespaceRequest) (*ListFabricNamespaceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListFabricNamespace(ctx, request)
}

func (s *BaseService) CreateFabricNamespaceTagRef(ctx context.Context, request *CreateFabricNamespaceTagRefRequest) (*CreateFabricNamespaceTagRefResponse, error) {
	if s.next == nil {
		return &CreateFabricNamespaceTagRefResponse{
			ID:                    request.ID,
			FabricNamespaceTagRef: request.GetFabricNamespaceTagRef(),
		}, nil
	}
	return s.Next().CreateFabricNamespaceTagRef(ctx, request)
}

func (s *BaseService) DeleteFabricNamespaceTagRef(ctx context.Context, request *DeleteFabricNamespaceTagRefRequest) (*DeleteFabricNamespaceTagRefResponse, error) {
	if s.next == nil {
		return &DeleteFabricNamespaceTagRefResponse{
			ID:                    request.ID,
			FabricNamespaceTagRef: request.GetFabricNamespaceTagRef(),
		}, nil
	}
	return s.Next().DeleteFabricNamespaceTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFabricNamespaceTagRef(ctx context.Context, request *CreateFabricNamespaceTagRefRequest) (*CreateFabricNamespaceTagRefResponse, error) {
	refField := models.FabricNamespaceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFabricNamespace(ctx, &GetFabricNamespaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FabricNamespace
		obj.AddTagRef(request.FabricNamespaceTagRef)

		_, err = s.BaseService.UpdateFabricNamespace(ctx, &UpdateFabricNamespaceRequest{
			FabricNamespace: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFabricNamespaceTagRefResponse{
		ID:                    request.ID,
		FabricNamespaceTagRef: request.GetFabricNamespaceTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFabricNamespaceTagRef(ctx context.Context, request *DeleteFabricNamespaceTagRefRequest) (*DeleteFabricNamespaceTagRefResponse, error) {
	refField := models.FabricNamespaceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFabricNamespace(ctx, &GetFabricNamespaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FabricNamespace
		obj.RemoveTagRef(request.FabricNamespaceTagRef)

		_, err = s.BaseService.UpdateFabricNamespace(ctx, &UpdateFabricNamespaceRequest{
			FabricNamespace: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFabricNamespaceTagRefResponse{
		ID:                    request.ID,
		FabricNamespaceTagRef: request.GetFabricNamespaceTagRef(),
	}, nil
}

func (s *EventProducerService) CreateFabricNamespace(ctx context.Context, request *CreateFabricNamespaceRequest) (*CreateFabricNamespaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateFabricNamespaceRequest{
				CreateFabricNamespaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFabricNamespace(ctx, request)
}
func (s *EventProducerService) UpdateFabricNamespace(ctx context.Context, request *UpdateFabricNamespaceRequest) (*UpdateFabricNamespaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateFabricNamespaceRequest{
				UpdateFabricNamespaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateFabricNamespace(ctx, request)
}
func (s *EventProducerService) DeleteFabricNamespace(ctx context.Context, request *DeleteFabricNamespaceRequest) (*DeleteFabricNamespaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteFabricNamespaceRequest{
				DeleteFabricNamespaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFabricNamespace(ctx, request)
}

func (s *EventProducerService) CreateFabricNamespaceTagRef(ctx context.Context, request *CreateFabricNamespaceTagRefRequest) (*CreateFabricNamespaceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFabricNamespaceTagRefRequest{
			CreateFabricNamespaceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFabricNamespaceTagRef(ctx, request)
}

func (s *EventProducerService) DeleteFabricNamespaceTagRef(ctx context.Context, request *DeleteFabricNamespaceTagRefRequest) (*DeleteFabricNamespaceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFabricNamespaceTagRefRequest{
			DeleteFabricNamespaceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFabricNamespaceTagRef(ctx, request)
}

func (e *Event_CreateFabricNamespaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFabricNamespaceRequest
	model := request.FabricNamespace
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetFabricNamespace(ctx,
			&GetFabricNamespaceRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateFabricNamespace(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateFabricNamespaceRequest{
			CreateFabricNamespaceRequest: &CreateFabricNamespaceRequest{
				FabricNamespace: response.GetFabricNamespace(),
			},
		},
	}, nil
}

func (e *Event_CreateFabricNamespaceRequest) ToUpdateEvent() *Event {
	request := e.CreateFabricNamespaceRequest
	model := request.FabricNamespace
	return &Event{
		Request: &Event_UpdateFabricNamespaceRequest{
			UpdateFabricNamespaceRequest: &UpdateFabricNamespaceRequest{
				FabricNamespace: model,
				FieldMask:       request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateFabricNamespaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateFabricNamespaceRequest
	response, err := service.UpdateFabricNamespace(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateFabricNamespaceRequest{
			UpdateFabricNamespaceRequest: &UpdateFabricNamespaceRequest{
				FabricNamespace: response.GetFabricNamespace(),
			},
		},
	}, nil
}

func (e *Event_UpdateFabricNamespaceRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteFabricNamespaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFabricNamespaceRequest
	_, err := service.DeleteFabricNamespace(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteFabricNamespaceRequest{
			DeleteFabricNamespaceRequest: &DeleteFabricNamespaceRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateFabricNamespaceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFabricNamespaceTagRefRequest
	if _, err := service.CreateFabricNamespaceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFabricNamespaceTagRefRequest{
		CreateFabricNamespaceTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFabricNamespaceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFabricNamespaceTagRefRequest
	if _, err := service.DeleteFabricNamespaceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFabricNamespaceTagRefRequest{
		DeleteFabricNamespaceTagRefRequest: request,
	}}, nil
}

type Fabric = models.Fabric

func (s *BaseService) CreateFabric(ctx context.Context, request *CreateFabricRequest) (*CreateFabricResponse, error) {
	if s.next == nil {
		return &CreateFabricResponse{
			Fabric: request.GetFabric(),
		}, nil
	}
	return s.Next().CreateFabric(ctx, request)
}
func (s *BaseService) UpdateFabric(ctx context.Context, request *UpdateFabricRequest) (*UpdateFabricResponse, error) {
	if s.next == nil {
		return &UpdateFabricResponse{
			Fabric: request.GetFabric(),
		}, nil
	}
	return s.Next().UpdateFabric(ctx, request)
}
func (s *BaseService) DeleteFabric(ctx context.Context, request *DeleteFabricRequest) (*DeleteFabricResponse, error) {
	if s.next == nil {
		return &DeleteFabricResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteFabric(ctx, request)
}
func (s *BaseService) GetFabric(ctx context.Context, request *GetFabricRequest) (*GetFabricResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetFabric(ctx, request)
}
func (s *BaseService) ListFabric(ctx context.Context, request *ListFabricRequest) (*ListFabricResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListFabric(ctx, request)
}

func (s *BaseService) CreateFabricVirtualNetworkRef(ctx context.Context, request *CreateFabricVirtualNetworkRefRequest) (*CreateFabricVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &CreateFabricVirtualNetworkRefResponse{
			ID:                      request.ID,
			FabricVirtualNetworkRef: request.GetFabricVirtualNetworkRef(),
		}, nil
	}
	return s.Next().CreateFabricVirtualNetworkRef(ctx, request)
}

func (s *BaseService) DeleteFabricVirtualNetworkRef(ctx context.Context, request *DeleteFabricVirtualNetworkRefRequest) (*DeleteFabricVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &DeleteFabricVirtualNetworkRefResponse{
			ID:                      request.ID,
			FabricVirtualNetworkRef: request.GetFabricVirtualNetworkRef(),
		}, nil
	}
	return s.Next().DeleteFabricVirtualNetworkRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFabricVirtualNetworkRef(ctx context.Context, request *CreateFabricVirtualNetworkRefRequest) (*CreateFabricVirtualNetworkRefResponse, error) {
	refField := models.FabricFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFabric(ctx, &GetFabricRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Fabric
		obj.AddVirtualNetworkRef(request.FabricVirtualNetworkRef)

		_, err = s.BaseService.UpdateFabric(ctx, &UpdateFabricRequest{
			Fabric:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFabricVirtualNetworkRefResponse{
		ID:                      request.ID,
		FabricVirtualNetworkRef: request.GetFabricVirtualNetworkRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFabricVirtualNetworkRef(ctx context.Context, request *DeleteFabricVirtualNetworkRefRequest) (*DeleteFabricVirtualNetworkRefResponse, error) {
	refField := models.FabricFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFabric(ctx, &GetFabricRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Fabric
		obj.RemoveVirtualNetworkRef(request.FabricVirtualNetworkRef)

		_, err = s.BaseService.UpdateFabric(ctx, &UpdateFabricRequest{
			Fabric:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFabricVirtualNetworkRefResponse{
		ID:                      request.ID,
		FabricVirtualNetworkRef: request.GetFabricVirtualNetworkRef(),
	}, nil
}

func (s *BaseService) CreateFabricTagRef(ctx context.Context, request *CreateFabricTagRefRequest) (*CreateFabricTagRefResponse, error) {
	if s.next == nil {
		return &CreateFabricTagRefResponse{
			ID:           request.ID,
			FabricTagRef: request.GetFabricTagRef(),
		}, nil
	}
	return s.Next().CreateFabricTagRef(ctx, request)
}

func (s *BaseService) DeleteFabricTagRef(ctx context.Context, request *DeleteFabricTagRefRequest) (*DeleteFabricTagRefResponse, error) {
	if s.next == nil {
		return &DeleteFabricTagRefResponse{
			ID:           request.ID,
			FabricTagRef: request.GetFabricTagRef(),
		}, nil
	}
	return s.Next().DeleteFabricTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFabricTagRef(ctx context.Context, request *CreateFabricTagRefRequest) (*CreateFabricTagRefResponse, error) {
	refField := models.FabricFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFabric(ctx, &GetFabricRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Fabric
		obj.AddTagRef(request.FabricTagRef)

		_, err = s.BaseService.UpdateFabric(ctx, &UpdateFabricRequest{
			Fabric:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFabricTagRefResponse{
		ID:           request.ID,
		FabricTagRef: request.GetFabricTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFabricTagRef(ctx context.Context, request *DeleteFabricTagRefRequest) (*DeleteFabricTagRefResponse, error) {
	refField := models.FabricFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFabric(ctx, &GetFabricRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Fabric
		obj.RemoveTagRef(request.FabricTagRef)

		_, err = s.BaseService.UpdateFabric(ctx, &UpdateFabricRequest{
			Fabric:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFabricTagRefResponse{
		ID:           request.ID,
		FabricTagRef: request.GetFabricTagRef(),
	}, nil
}

func (s *BaseService) CreateFabricIntentMapRef(ctx context.Context, request *CreateFabricIntentMapRefRequest) (*CreateFabricIntentMapRefResponse, error) {
	if s.next == nil {
		return &CreateFabricIntentMapRefResponse{
			ID:                 request.ID,
			FabricIntentMapRef: request.GetFabricIntentMapRef(),
		}, nil
	}
	return s.Next().CreateFabricIntentMapRef(ctx, request)
}

func (s *BaseService) DeleteFabricIntentMapRef(ctx context.Context, request *DeleteFabricIntentMapRefRequest) (*DeleteFabricIntentMapRefResponse, error) {
	if s.next == nil {
		return &DeleteFabricIntentMapRefResponse{
			ID:                 request.ID,
			FabricIntentMapRef: request.GetFabricIntentMapRef(),
		}, nil
	}
	return s.Next().DeleteFabricIntentMapRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFabricIntentMapRef(ctx context.Context, request *CreateFabricIntentMapRefRequest) (*CreateFabricIntentMapRefResponse, error) {
	refField := models.FabricFieldIntentMapRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFabric(ctx, &GetFabricRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Fabric
		obj.AddIntentMapRef(request.FabricIntentMapRef)

		_, err = s.BaseService.UpdateFabric(ctx, &UpdateFabricRequest{
			Fabric:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFabricIntentMapRefResponse{
		ID:                 request.ID,
		FabricIntentMapRef: request.GetFabricIntentMapRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFabricIntentMapRef(ctx context.Context, request *DeleteFabricIntentMapRefRequest) (*DeleteFabricIntentMapRefResponse, error) {
	refField := models.FabricFieldIntentMapRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFabric(ctx, &GetFabricRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Fabric
		obj.RemoveIntentMapRef(request.FabricIntentMapRef)

		_, err = s.BaseService.UpdateFabric(ctx, &UpdateFabricRequest{
			Fabric:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFabricIntentMapRefResponse{
		ID:                 request.ID,
		FabricIntentMapRef: request.GetFabricIntentMapRef(),
	}, nil
}

func (s *BaseService) CreateFabricNodeProfileRef(ctx context.Context, request *CreateFabricNodeProfileRefRequest) (*CreateFabricNodeProfileRefResponse, error) {
	if s.next == nil {
		return &CreateFabricNodeProfileRefResponse{
			ID:                   request.ID,
			FabricNodeProfileRef: request.GetFabricNodeProfileRef(),
		}, nil
	}
	return s.Next().CreateFabricNodeProfileRef(ctx, request)
}

func (s *BaseService) DeleteFabricNodeProfileRef(ctx context.Context, request *DeleteFabricNodeProfileRefRequest) (*DeleteFabricNodeProfileRefResponse, error) {
	if s.next == nil {
		return &DeleteFabricNodeProfileRefResponse{
			ID:                   request.ID,
			FabricNodeProfileRef: request.GetFabricNodeProfileRef(),
		}, nil
	}
	return s.Next().DeleteFabricNodeProfileRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFabricNodeProfileRef(ctx context.Context, request *CreateFabricNodeProfileRefRequest) (*CreateFabricNodeProfileRefResponse, error) {
	refField := models.FabricFieldNodeProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFabric(ctx, &GetFabricRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Fabric
		obj.AddNodeProfileRef(request.FabricNodeProfileRef)

		_, err = s.BaseService.UpdateFabric(ctx, &UpdateFabricRequest{
			Fabric:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFabricNodeProfileRefResponse{
		ID:                   request.ID,
		FabricNodeProfileRef: request.GetFabricNodeProfileRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFabricNodeProfileRef(ctx context.Context, request *DeleteFabricNodeProfileRefRequest) (*DeleteFabricNodeProfileRefResponse, error) {
	refField := models.FabricFieldNodeProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFabric(ctx, &GetFabricRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Fabric
		obj.RemoveNodeProfileRef(request.FabricNodeProfileRef)

		_, err = s.BaseService.UpdateFabric(ctx, &UpdateFabricRequest{
			Fabric:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFabricNodeProfileRefResponse{
		ID:                   request.ID,
		FabricNodeProfileRef: request.GetFabricNodeProfileRef(),
	}, nil
}

func (s *EventProducerService) CreateFabric(ctx context.Context, request *CreateFabricRequest) (*CreateFabricResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateFabricRequest{
				CreateFabricRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFabric(ctx, request)
}
func (s *EventProducerService) UpdateFabric(ctx context.Context, request *UpdateFabricRequest) (*UpdateFabricResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateFabricRequest{
				UpdateFabricRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateFabric(ctx, request)
}
func (s *EventProducerService) DeleteFabric(ctx context.Context, request *DeleteFabricRequest) (*DeleteFabricResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteFabricRequest{
				DeleteFabricRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFabric(ctx, request)
}

func (s *EventProducerService) CreateFabricVirtualNetworkRef(ctx context.Context, request *CreateFabricVirtualNetworkRefRequest) (*CreateFabricVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFabricVirtualNetworkRefRequest{
			CreateFabricVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFabricVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) DeleteFabricVirtualNetworkRef(ctx context.Context, request *DeleteFabricVirtualNetworkRefRequest) (*DeleteFabricVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFabricVirtualNetworkRefRequest{
			DeleteFabricVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFabricVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) CreateFabricTagRef(ctx context.Context, request *CreateFabricTagRefRequest) (*CreateFabricTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFabricTagRefRequest{
			CreateFabricTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFabricTagRef(ctx, request)
}

func (s *EventProducerService) DeleteFabricTagRef(ctx context.Context, request *DeleteFabricTagRefRequest) (*DeleteFabricTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFabricTagRefRequest{
			DeleteFabricTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFabricTagRef(ctx, request)
}

func (s *EventProducerService) CreateFabricIntentMapRef(ctx context.Context, request *CreateFabricIntentMapRefRequest) (*CreateFabricIntentMapRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFabricIntentMapRefRequest{
			CreateFabricIntentMapRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFabricIntentMapRef(ctx, request)
}

func (s *EventProducerService) DeleteFabricIntentMapRef(ctx context.Context, request *DeleteFabricIntentMapRefRequest) (*DeleteFabricIntentMapRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFabricIntentMapRefRequest{
			DeleteFabricIntentMapRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFabricIntentMapRef(ctx, request)
}

func (s *EventProducerService) CreateFabricNodeProfileRef(ctx context.Context, request *CreateFabricNodeProfileRefRequest) (*CreateFabricNodeProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFabricNodeProfileRefRequest{
			CreateFabricNodeProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFabricNodeProfileRef(ctx, request)
}

func (s *EventProducerService) DeleteFabricNodeProfileRef(ctx context.Context, request *DeleteFabricNodeProfileRefRequest) (*DeleteFabricNodeProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFabricNodeProfileRefRequest{
			DeleteFabricNodeProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFabricNodeProfileRef(ctx, request)
}

func (e *Event_CreateFabricRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFabricRequest
	model := request.Fabric
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetFabric(ctx,
			&GetFabricRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateFabric(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateFabricRequest{
			CreateFabricRequest: &CreateFabricRequest{
				Fabric: response.GetFabric(),
			},
		},
	}, nil
}

func (e *Event_CreateFabricRequest) ToUpdateEvent() *Event {
	request := e.CreateFabricRequest
	model := request.Fabric
	return &Event{
		Request: &Event_UpdateFabricRequest{
			UpdateFabricRequest: &UpdateFabricRequest{
				Fabric:    model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateFabricRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateFabricRequest
	response, err := service.UpdateFabric(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateFabricRequest{
			UpdateFabricRequest: &UpdateFabricRequest{
				Fabric: response.GetFabric(),
			},
		},
	}, nil
}

func (e *Event_UpdateFabricRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteFabricRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFabricRequest
	_, err := service.DeleteFabric(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteFabricRequest{
			DeleteFabricRequest: &DeleteFabricRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateFabricTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFabricTagRefRequest
	if _, err := service.CreateFabricTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFabricTagRefRequest{
		CreateFabricTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFabricTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFabricTagRefRequest
	if _, err := service.DeleteFabricTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFabricTagRefRequest{
		DeleteFabricTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateFabricIntentMapRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFabricIntentMapRefRequest
	if _, err := service.CreateFabricIntentMapRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFabricIntentMapRefRequest{
		CreateFabricIntentMapRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFabricIntentMapRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFabricIntentMapRefRequest
	if _, err := service.DeleteFabricIntentMapRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFabricIntentMapRefRequest{
		DeleteFabricIntentMapRefRequest: request,
	}}, nil
}

func (e *Event_CreateFabricNodeProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFabricNodeProfileRefRequest
	if _, err := service.CreateFabricNodeProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFabricNodeProfileRefRequest{
		CreateFabricNodeProfileRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFabricNodeProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFabricNodeProfileRefRequest
	if _, err := service.DeleteFabricNodeProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFabricNodeProfileRefRequest{
		DeleteFabricNodeProfileRefRequest: request,
	}}, nil
}

func (e *Event_CreateFabricVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFabricVirtualNetworkRefRequest
	if _, err := service.CreateFabricVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFabricVirtualNetworkRefRequest{
		CreateFabricVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFabricVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFabricVirtualNetworkRefRequest
	if _, err := service.DeleteFabricVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFabricVirtualNetworkRefRequest{
		DeleteFabricVirtualNetworkRefRequest: request,
	}}, nil
}

type FeatureConfig = models.FeatureConfig

func (s *BaseService) CreateFeatureConfig(ctx context.Context, request *CreateFeatureConfigRequest) (*CreateFeatureConfigResponse, error) {
	if s.next == nil {
		return &CreateFeatureConfigResponse{
			FeatureConfig: request.GetFeatureConfig(),
		}, nil
	}
	return s.Next().CreateFeatureConfig(ctx, request)
}
func (s *BaseService) UpdateFeatureConfig(ctx context.Context, request *UpdateFeatureConfigRequest) (*UpdateFeatureConfigResponse, error) {
	if s.next == nil {
		return &UpdateFeatureConfigResponse{
			FeatureConfig: request.GetFeatureConfig(),
		}, nil
	}
	return s.Next().UpdateFeatureConfig(ctx, request)
}
func (s *BaseService) DeleteFeatureConfig(ctx context.Context, request *DeleteFeatureConfigRequest) (*DeleteFeatureConfigResponse, error) {
	if s.next == nil {
		return &DeleteFeatureConfigResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteFeatureConfig(ctx, request)
}
func (s *BaseService) GetFeatureConfig(ctx context.Context, request *GetFeatureConfigRequest) (*GetFeatureConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetFeatureConfig(ctx, request)
}
func (s *BaseService) ListFeatureConfig(ctx context.Context, request *ListFeatureConfigRequest) (*ListFeatureConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListFeatureConfig(ctx, request)
}

func (s *BaseService) CreateFeatureConfigTagRef(ctx context.Context, request *CreateFeatureConfigTagRefRequest) (*CreateFeatureConfigTagRefResponse, error) {
	if s.next == nil {
		return &CreateFeatureConfigTagRefResponse{
			ID:                  request.ID,
			FeatureConfigTagRef: request.GetFeatureConfigTagRef(),
		}, nil
	}
	return s.Next().CreateFeatureConfigTagRef(ctx, request)
}

func (s *BaseService) DeleteFeatureConfigTagRef(ctx context.Context, request *DeleteFeatureConfigTagRefRequest) (*DeleteFeatureConfigTagRefResponse, error) {
	if s.next == nil {
		return &DeleteFeatureConfigTagRefResponse{
			ID:                  request.ID,
			FeatureConfigTagRef: request.GetFeatureConfigTagRef(),
		}, nil
	}
	return s.Next().DeleteFeatureConfigTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFeatureConfigTagRef(ctx context.Context, request *CreateFeatureConfigTagRefRequest) (*CreateFeatureConfigTagRefResponse, error) {
	refField := models.FeatureConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFeatureConfig(ctx, &GetFeatureConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FeatureConfig
		obj.AddTagRef(request.FeatureConfigTagRef)

		_, err = s.BaseService.UpdateFeatureConfig(ctx, &UpdateFeatureConfigRequest{
			FeatureConfig: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFeatureConfigTagRefResponse{
		ID:                  request.ID,
		FeatureConfigTagRef: request.GetFeatureConfigTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFeatureConfigTagRef(ctx context.Context, request *DeleteFeatureConfigTagRefRequest) (*DeleteFeatureConfigTagRefResponse, error) {
	refField := models.FeatureConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFeatureConfig(ctx, &GetFeatureConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FeatureConfig
		obj.RemoveTagRef(request.FeatureConfigTagRef)

		_, err = s.BaseService.UpdateFeatureConfig(ctx, &UpdateFeatureConfigRequest{
			FeatureConfig: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFeatureConfigTagRefResponse{
		ID:                  request.ID,
		FeatureConfigTagRef: request.GetFeatureConfigTagRef(),
	}, nil
}

func (s *EventProducerService) CreateFeatureConfig(ctx context.Context, request *CreateFeatureConfigRequest) (*CreateFeatureConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateFeatureConfigRequest{
				CreateFeatureConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFeatureConfig(ctx, request)
}
func (s *EventProducerService) UpdateFeatureConfig(ctx context.Context, request *UpdateFeatureConfigRequest) (*UpdateFeatureConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateFeatureConfigRequest{
				UpdateFeatureConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateFeatureConfig(ctx, request)
}
func (s *EventProducerService) DeleteFeatureConfig(ctx context.Context, request *DeleteFeatureConfigRequest) (*DeleteFeatureConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteFeatureConfigRequest{
				DeleteFeatureConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFeatureConfig(ctx, request)
}

func (s *EventProducerService) CreateFeatureConfigTagRef(ctx context.Context, request *CreateFeatureConfigTagRefRequest) (*CreateFeatureConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFeatureConfigTagRefRequest{
			CreateFeatureConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFeatureConfigTagRef(ctx, request)
}

func (s *EventProducerService) DeleteFeatureConfigTagRef(ctx context.Context, request *DeleteFeatureConfigTagRefRequest) (*DeleteFeatureConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFeatureConfigTagRefRequest{
			DeleteFeatureConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFeatureConfigTagRef(ctx, request)
}

func (e *Event_CreateFeatureConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFeatureConfigRequest
	model := request.FeatureConfig
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetFeatureConfig(ctx,
			&GetFeatureConfigRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateFeatureConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateFeatureConfigRequest{
			CreateFeatureConfigRequest: &CreateFeatureConfigRequest{
				FeatureConfig: response.GetFeatureConfig(),
			},
		},
	}, nil
}

func (e *Event_CreateFeatureConfigRequest) ToUpdateEvent() *Event {
	request := e.CreateFeatureConfigRequest
	model := request.FeatureConfig
	return &Event{
		Request: &Event_UpdateFeatureConfigRequest{
			UpdateFeatureConfigRequest: &UpdateFeatureConfigRequest{
				FeatureConfig: model,
				FieldMask:     request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateFeatureConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateFeatureConfigRequest
	response, err := service.UpdateFeatureConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateFeatureConfigRequest{
			UpdateFeatureConfigRequest: &UpdateFeatureConfigRequest{
				FeatureConfig: response.GetFeatureConfig(),
			},
		},
	}, nil
}

func (e *Event_UpdateFeatureConfigRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteFeatureConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFeatureConfigRequest
	_, err := service.DeleteFeatureConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteFeatureConfigRequest{
			DeleteFeatureConfigRequest: &DeleteFeatureConfigRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateFeatureConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFeatureConfigTagRefRequest
	if _, err := service.CreateFeatureConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFeatureConfigTagRefRequest{
		CreateFeatureConfigTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFeatureConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFeatureConfigTagRefRequest
	if _, err := service.DeleteFeatureConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFeatureConfigTagRefRequest{
		DeleteFeatureConfigTagRefRequest: request,
	}}, nil
}

type FeatureFlag = models.FeatureFlag

func (s *BaseService) CreateFeatureFlag(ctx context.Context, request *CreateFeatureFlagRequest) (*CreateFeatureFlagResponse, error) {
	if s.next == nil {
		return &CreateFeatureFlagResponse{
			FeatureFlag: request.GetFeatureFlag(),
		}, nil
	}
	return s.Next().CreateFeatureFlag(ctx, request)
}
func (s *BaseService) UpdateFeatureFlag(ctx context.Context, request *UpdateFeatureFlagRequest) (*UpdateFeatureFlagResponse, error) {
	if s.next == nil {
		return &UpdateFeatureFlagResponse{
			FeatureFlag: request.GetFeatureFlag(),
		}, nil
	}
	return s.Next().UpdateFeatureFlag(ctx, request)
}
func (s *BaseService) DeleteFeatureFlag(ctx context.Context, request *DeleteFeatureFlagRequest) (*DeleteFeatureFlagResponse, error) {
	if s.next == nil {
		return &DeleteFeatureFlagResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteFeatureFlag(ctx, request)
}
func (s *BaseService) GetFeatureFlag(ctx context.Context, request *GetFeatureFlagRequest) (*GetFeatureFlagResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetFeatureFlag(ctx, request)
}
func (s *BaseService) ListFeatureFlag(ctx context.Context, request *ListFeatureFlagRequest) (*ListFeatureFlagResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListFeatureFlag(ctx, request)
}

func (s *BaseService) CreateFeatureFlagTagRef(ctx context.Context, request *CreateFeatureFlagTagRefRequest) (*CreateFeatureFlagTagRefResponse, error) {
	if s.next == nil {
		return &CreateFeatureFlagTagRefResponse{
			ID:                request.ID,
			FeatureFlagTagRef: request.GetFeatureFlagTagRef(),
		}, nil
	}
	return s.Next().CreateFeatureFlagTagRef(ctx, request)
}

func (s *BaseService) DeleteFeatureFlagTagRef(ctx context.Context, request *DeleteFeatureFlagTagRefRequest) (*DeleteFeatureFlagTagRefResponse, error) {
	if s.next == nil {
		return &DeleteFeatureFlagTagRefResponse{
			ID:                request.ID,
			FeatureFlagTagRef: request.GetFeatureFlagTagRef(),
		}, nil
	}
	return s.Next().DeleteFeatureFlagTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFeatureFlagTagRef(ctx context.Context, request *CreateFeatureFlagTagRefRequest) (*CreateFeatureFlagTagRefResponse, error) {
	refField := models.FeatureFlagFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFeatureFlag(ctx, &GetFeatureFlagRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FeatureFlag
		obj.AddTagRef(request.FeatureFlagTagRef)

		_, err = s.BaseService.UpdateFeatureFlag(ctx, &UpdateFeatureFlagRequest{
			FeatureFlag: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFeatureFlagTagRefResponse{
		ID:                request.ID,
		FeatureFlagTagRef: request.GetFeatureFlagTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFeatureFlagTagRef(ctx context.Context, request *DeleteFeatureFlagTagRefRequest) (*DeleteFeatureFlagTagRefResponse, error) {
	refField := models.FeatureFlagFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFeatureFlag(ctx, &GetFeatureFlagRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FeatureFlag
		obj.RemoveTagRef(request.FeatureFlagTagRef)

		_, err = s.BaseService.UpdateFeatureFlag(ctx, &UpdateFeatureFlagRequest{
			FeatureFlag: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFeatureFlagTagRefResponse{
		ID:                request.ID,
		FeatureFlagTagRef: request.GetFeatureFlagTagRef(),
	}, nil
}

func (s *EventProducerService) CreateFeatureFlag(ctx context.Context, request *CreateFeatureFlagRequest) (*CreateFeatureFlagResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateFeatureFlagRequest{
				CreateFeatureFlagRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFeatureFlag(ctx, request)
}
func (s *EventProducerService) UpdateFeatureFlag(ctx context.Context, request *UpdateFeatureFlagRequest) (*UpdateFeatureFlagResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateFeatureFlagRequest{
				UpdateFeatureFlagRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateFeatureFlag(ctx, request)
}
func (s *EventProducerService) DeleteFeatureFlag(ctx context.Context, request *DeleteFeatureFlagRequest) (*DeleteFeatureFlagResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteFeatureFlagRequest{
				DeleteFeatureFlagRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFeatureFlag(ctx, request)
}

func (s *EventProducerService) CreateFeatureFlagTagRef(ctx context.Context, request *CreateFeatureFlagTagRefRequest) (*CreateFeatureFlagTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFeatureFlagTagRefRequest{
			CreateFeatureFlagTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFeatureFlagTagRef(ctx, request)
}

func (s *EventProducerService) DeleteFeatureFlagTagRef(ctx context.Context, request *DeleteFeatureFlagTagRefRequest) (*DeleteFeatureFlagTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFeatureFlagTagRefRequest{
			DeleteFeatureFlagTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFeatureFlagTagRef(ctx, request)
}

func (e *Event_CreateFeatureFlagRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFeatureFlagRequest
	model := request.FeatureFlag
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetFeatureFlag(ctx,
			&GetFeatureFlagRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateFeatureFlag(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateFeatureFlagRequest{
			CreateFeatureFlagRequest: &CreateFeatureFlagRequest{
				FeatureFlag: response.GetFeatureFlag(),
			},
		},
	}, nil
}

func (e *Event_CreateFeatureFlagRequest) ToUpdateEvent() *Event {
	request := e.CreateFeatureFlagRequest
	model := request.FeatureFlag
	return &Event{
		Request: &Event_UpdateFeatureFlagRequest{
			UpdateFeatureFlagRequest: &UpdateFeatureFlagRequest{
				FeatureFlag: model,
				FieldMask:   request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateFeatureFlagRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateFeatureFlagRequest
	response, err := service.UpdateFeatureFlag(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateFeatureFlagRequest{
			UpdateFeatureFlagRequest: &UpdateFeatureFlagRequest{
				FeatureFlag: response.GetFeatureFlag(),
			},
		},
	}, nil
}

func (e *Event_UpdateFeatureFlagRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteFeatureFlagRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFeatureFlagRequest
	_, err := service.DeleteFeatureFlag(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteFeatureFlagRequest{
			DeleteFeatureFlagRequest: &DeleteFeatureFlagRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateFeatureFlagTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFeatureFlagTagRefRequest
	if _, err := service.CreateFeatureFlagTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFeatureFlagTagRefRequest{
		CreateFeatureFlagTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFeatureFlagTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFeatureFlagTagRefRequest
	if _, err := service.DeleteFeatureFlagTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFeatureFlagTagRefRequest{
		DeleteFeatureFlagTagRefRequest: request,
	}}, nil
}

type Feature = models.Feature

func (s *BaseService) CreateFeature(ctx context.Context, request *CreateFeatureRequest) (*CreateFeatureResponse, error) {
	if s.next == nil {
		return &CreateFeatureResponse{
			Feature: request.GetFeature(),
		}, nil
	}
	return s.Next().CreateFeature(ctx, request)
}
func (s *BaseService) UpdateFeature(ctx context.Context, request *UpdateFeatureRequest) (*UpdateFeatureResponse, error) {
	if s.next == nil {
		return &UpdateFeatureResponse{
			Feature: request.GetFeature(),
		}, nil
	}
	return s.Next().UpdateFeature(ctx, request)
}
func (s *BaseService) DeleteFeature(ctx context.Context, request *DeleteFeatureRequest) (*DeleteFeatureResponse, error) {
	if s.next == nil {
		return &DeleteFeatureResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteFeature(ctx, request)
}
func (s *BaseService) GetFeature(ctx context.Context, request *GetFeatureRequest) (*GetFeatureResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetFeature(ctx, request)
}
func (s *BaseService) ListFeature(ctx context.Context, request *ListFeatureRequest) (*ListFeatureResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListFeature(ctx, request)
}

func (s *BaseService) CreateFeatureFeatureRef(ctx context.Context, request *CreateFeatureFeatureRefRequest) (*CreateFeatureFeatureRefResponse, error) {
	if s.next == nil {
		return &CreateFeatureFeatureRefResponse{
			ID:                request.ID,
			FeatureFeatureRef: request.GetFeatureFeatureRef(),
		}, nil
	}
	return s.Next().CreateFeatureFeatureRef(ctx, request)
}

func (s *BaseService) DeleteFeatureFeatureRef(ctx context.Context, request *DeleteFeatureFeatureRefRequest) (*DeleteFeatureFeatureRefResponse, error) {
	if s.next == nil {
		return &DeleteFeatureFeatureRefResponse{
			ID:                request.ID,
			FeatureFeatureRef: request.GetFeatureFeatureRef(),
		}, nil
	}
	return s.Next().DeleteFeatureFeatureRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFeatureFeatureRef(ctx context.Context, request *CreateFeatureFeatureRefRequest) (*CreateFeatureFeatureRefResponse, error) {
	refField := models.FeatureFieldFeatureRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFeature(ctx, &GetFeatureRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Feature
		obj.AddFeatureRef(request.FeatureFeatureRef)

		_, err = s.BaseService.UpdateFeature(ctx, &UpdateFeatureRequest{
			Feature:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFeatureFeatureRefResponse{
		ID:                request.ID,
		FeatureFeatureRef: request.GetFeatureFeatureRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFeatureFeatureRef(ctx context.Context, request *DeleteFeatureFeatureRefRequest) (*DeleteFeatureFeatureRefResponse, error) {
	refField := models.FeatureFieldFeatureRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFeature(ctx, &GetFeatureRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Feature
		obj.RemoveFeatureRef(request.FeatureFeatureRef)

		_, err = s.BaseService.UpdateFeature(ctx, &UpdateFeatureRequest{
			Feature:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFeatureFeatureRefResponse{
		ID:                request.ID,
		FeatureFeatureRef: request.GetFeatureFeatureRef(),
	}, nil
}

func (s *BaseService) CreateFeatureTagRef(ctx context.Context, request *CreateFeatureTagRefRequest) (*CreateFeatureTagRefResponse, error) {
	if s.next == nil {
		return &CreateFeatureTagRefResponse{
			ID:            request.ID,
			FeatureTagRef: request.GetFeatureTagRef(),
		}, nil
	}
	return s.Next().CreateFeatureTagRef(ctx, request)
}

func (s *BaseService) DeleteFeatureTagRef(ctx context.Context, request *DeleteFeatureTagRefRequest) (*DeleteFeatureTagRefResponse, error) {
	if s.next == nil {
		return &DeleteFeatureTagRefResponse{
			ID:            request.ID,
			FeatureTagRef: request.GetFeatureTagRef(),
		}, nil
	}
	return s.Next().DeleteFeatureTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFeatureTagRef(ctx context.Context, request *CreateFeatureTagRefRequest) (*CreateFeatureTagRefResponse, error) {
	refField := models.FeatureFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFeature(ctx, &GetFeatureRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Feature
		obj.AddTagRef(request.FeatureTagRef)

		_, err = s.BaseService.UpdateFeature(ctx, &UpdateFeatureRequest{
			Feature:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFeatureTagRefResponse{
		ID:            request.ID,
		FeatureTagRef: request.GetFeatureTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFeatureTagRef(ctx context.Context, request *DeleteFeatureTagRefRequest) (*DeleteFeatureTagRefResponse, error) {
	refField := models.FeatureFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFeature(ctx, &GetFeatureRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Feature
		obj.RemoveTagRef(request.FeatureTagRef)

		_, err = s.BaseService.UpdateFeature(ctx, &UpdateFeatureRequest{
			Feature:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFeatureTagRefResponse{
		ID:            request.ID,
		FeatureTagRef: request.GetFeatureTagRef(),
	}, nil
}

func (s *EventProducerService) CreateFeature(ctx context.Context, request *CreateFeatureRequest) (*CreateFeatureResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateFeatureRequest{
				CreateFeatureRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFeature(ctx, request)
}
func (s *EventProducerService) UpdateFeature(ctx context.Context, request *UpdateFeatureRequest) (*UpdateFeatureResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateFeatureRequest{
				UpdateFeatureRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateFeature(ctx, request)
}
func (s *EventProducerService) DeleteFeature(ctx context.Context, request *DeleteFeatureRequest) (*DeleteFeatureResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteFeatureRequest{
				DeleteFeatureRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFeature(ctx, request)
}

func (s *EventProducerService) CreateFeatureFeatureRef(ctx context.Context, request *CreateFeatureFeatureRefRequest) (*CreateFeatureFeatureRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFeatureFeatureRefRequest{
			CreateFeatureFeatureRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFeatureFeatureRef(ctx, request)
}

func (s *EventProducerService) DeleteFeatureFeatureRef(ctx context.Context, request *DeleteFeatureFeatureRefRequest) (*DeleteFeatureFeatureRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFeatureFeatureRefRequest{
			DeleteFeatureFeatureRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFeatureFeatureRef(ctx, request)
}

func (s *EventProducerService) CreateFeatureTagRef(ctx context.Context, request *CreateFeatureTagRefRequest) (*CreateFeatureTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFeatureTagRefRequest{
			CreateFeatureTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFeatureTagRef(ctx, request)
}

func (s *EventProducerService) DeleteFeatureTagRef(ctx context.Context, request *DeleteFeatureTagRefRequest) (*DeleteFeatureTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFeatureTagRefRequest{
			DeleteFeatureTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFeatureTagRef(ctx, request)
}

func (e *Event_CreateFeatureRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFeatureRequest
	model := request.Feature
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetFeature(ctx,
			&GetFeatureRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateFeature(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateFeatureRequest{
			CreateFeatureRequest: &CreateFeatureRequest{
				Feature: response.GetFeature(),
			},
		},
	}, nil
}

func (e *Event_CreateFeatureRequest) ToUpdateEvent() *Event {
	request := e.CreateFeatureRequest
	model := request.Feature
	return &Event{
		Request: &Event_UpdateFeatureRequest{
			UpdateFeatureRequest: &UpdateFeatureRequest{
				Feature:   model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateFeatureRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateFeatureRequest
	response, err := service.UpdateFeature(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateFeatureRequest{
			UpdateFeatureRequest: &UpdateFeatureRequest{
				Feature: response.GetFeature(),
			},
		},
	}, nil
}

func (e *Event_UpdateFeatureRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteFeatureRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFeatureRequest
	_, err := service.DeleteFeature(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteFeatureRequest{
			DeleteFeatureRequest: &DeleteFeatureRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateFeatureFeatureRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFeatureFeatureRefRequest
	if _, err := service.CreateFeatureFeatureRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFeatureFeatureRefRequest{
		CreateFeatureFeatureRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFeatureFeatureRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFeatureFeatureRefRequest
	if _, err := service.DeleteFeatureFeatureRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFeatureFeatureRefRequest{
		DeleteFeatureFeatureRefRequest: request,
	}}, nil
}

func (e *Event_CreateFeatureTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFeatureTagRefRequest
	if _, err := service.CreateFeatureTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFeatureTagRefRequest{
		CreateFeatureTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFeatureTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFeatureTagRefRequest
	if _, err := service.DeleteFeatureTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFeatureTagRefRequest{
		DeleteFeatureTagRefRequest: request,
	}}, nil
}

type FirewallPolicy = models.FirewallPolicy

func (s *BaseService) CreateFirewallPolicy(ctx context.Context, request *CreateFirewallPolicyRequest) (*CreateFirewallPolicyResponse, error) {
	if s.next == nil {
		return &CreateFirewallPolicyResponse{
			FirewallPolicy: request.GetFirewallPolicy(),
		}, nil
	}
	return s.Next().CreateFirewallPolicy(ctx, request)
}
func (s *BaseService) UpdateFirewallPolicy(ctx context.Context, request *UpdateFirewallPolicyRequest) (*UpdateFirewallPolicyResponse, error) {
	if s.next == nil {
		return &UpdateFirewallPolicyResponse{
			FirewallPolicy: request.GetFirewallPolicy(),
		}, nil
	}
	return s.Next().UpdateFirewallPolicy(ctx, request)
}
func (s *BaseService) DeleteFirewallPolicy(ctx context.Context, request *DeleteFirewallPolicyRequest) (*DeleteFirewallPolicyResponse, error) {
	if s.next == nil {
		return &DeleteFirewallPolicyResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteFirewallPolicy(ctx, request)
}
func (s *BaseService) GetFirewallPolicy(ctx context.Context, request *GetFirewallPolicyRequest) (*GetFirewallPolicyResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetFirewallPolicy(ctx, request)
}
func (s *BaseService) ListFirewallPolicy(ctx context.Context, request *ListFirewallPolicyRequest) (*ListFirewallPolicyResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListFirewallPolicy(ctx, request)
}

func (s *BaseService) CreateFirewallPolicySecurityLoggingObjectRef(ctx context.Context, request *CreateFirewallPolicySecurityLoggingObjectRefRequest) (*CreateFirewallPolicySecurityLoggingObjectRefResponse, error) {
	if s.next == nil {
		return &CreateFirewallPolicySecurityLoggingObjectRefResponse{
			ID:                                     request.ID,
			FirewallPolicySecurityLoggingObjectRef: request.GetFirewallPolicySecurityLoggingObjectRef(),
		}, nil
	}
	return s.Next().CreateFirewallPolicySecurityLoggingObjectRef(ctx, request)
}

func (s *BaseService) DeleteFirewallPolicySecurityLoggingObjectRef(ctx context.Context, request *DeleteFirewallPolicySecurityLoggingObjectRefRequest) (*DeleteFirewallPolicySecurityLoggingObjectRefResponse, error) {
	if s.next == nil {
		return &DeleteFirewallPolicySecurityLoggingObjectRefResponse{
			ID:                                     request.ID,
			FirewallPolicySecurityLoggingObjectRef: request.GetFirewallPolicySecurityLoggingObjectRef(),
		}, nil
	}
	return s.Next().DeleteFirewallPolicySecurityLoggingObjectRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFirewallPolicySecurityLoggingObjectRef(ctx context.Context, request *CreateFirewallPolicySecurityLoggingObjectRefRequest) (*CreateFirewallPolicySecurityLoggingObjectRefResponse, error) {
	refField := models.FirewallPolicyFieldSecurityLoggingObjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallPolicy(ctx, &GetFirewallPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallPolicy
		obj.AddSecurityLoggingObjectRef(request.FirewallPolicySecurityLoggingObjectRef)

		_, err = s.BaseService.UpdateFirewallPolicy(ctx, &UpdateFirewallPolicyRequest{
			FirewallPolicy: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFirewallPolicySecurityLoggingObjectRefResponse{
		ID:                                     request.ID,
		FirewallPolicySecurityLoggingObjectRef: request.GetFirewallPolicySecurityLoggingObjectRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFirewallPolicySecurityLoggingObjectRef(ctx context.Context, request *DeleteFirewallPolicySecurityLoggingObjectRefRequest) (*DeleteFirewallPolicySecurityLoggingObjectRefResponse, error) {
	refField := models.FirewallPolicyFieldSecurityLoggingObjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallPolicy(ctx, &GetFirewallPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallPolicy
		obj.RemoveSecurityLoggingObjectRef(request.FirewallPolicySecurityLoggingObjectRef)

		_, err = s.BaseService.UpdateFirewallPolicy(ctx, &UpdateFirewallPolicyRequest{
			FirewallPolicy: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFirewallPolicySecurityLoggingObjectRefResponse{
		ID:                                     request.ID,
		FirewallPolicySecurityLoggingObjectRef: request.GetFirewallPolicySecurityLoggingObjectRef(),
	}, nil
}

func (s *BaseService) CreateFirewallPolicyTagRef(ctx context.Context, request *CreateFirewallPolicyTagRefRequest) (*CreateFirewallPolicyTagRefResponse, error) {
	if s.next == nil {
		return &CreateFirewallPolicyTagRefResponse{
			ID:                   request.ID,
			FirewallPolicyTagRef: request.GetFirewallPolicyTagRef(),
		}, nil
	}
	return s.Next().CreateFirewallPolicyTagRef(ctx, request)
}

func (s *BaseService) DeleteFirewallPolicyTagRef(ctx context.Context, request *DeleteFirewallPolicyTagRefRequest) (*DeleteFirewallPolicyTagRefResponse, error) {
	if s.next == nil {
		return &DeleteFirewallPolicyTagRefResponse{
			ID:                   request.ID,
			FirewallPolicyTagRef: request.GetFirewallPolicyTagRef(),
		}, nil
	}
	return s.Next().DeleteFirewallPolicyTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFirewallPolicyTagRef(ctx context.Context, request *CreateFirewallPolicyTagRefRequest) (*CreateFirewallPolicyTagRefResponse, error) {
	refField := models.FirewallPolicyFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallPolicy(ctx, &GetFirewallPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallPolicy
		obj.AddTagRef(request.FirewallPolicyTagRef)

		_, err = s.BaseService.UpdateFirewallPolicy(ctx, &UpdateFirewallPolicyRequest{
			FirewallPolicy: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFirewallPolicyTagRefResponse{
		ID:                   request.ID,
		FirewallPolicyTagRef: request.GetFirewallPolicyTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFirewallPolicyTagRef(ctx context.Context, request *DeleteFirewallPolicyTagRefRequest) (*DeleteFirewallPolicyTagRefResponse, error) {
	refField := models.FirewallPolicyFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallPolicy(ctx, &GetFirewallPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallPolicy
		obj.RemoveTagRef(request.FirewallPolicyTagRef)

		_, err = s.BaseService.UpdateFirewallPolicy(ctx, &UpdateFirewallPolicyRequest{
			FirewallPolicy: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFirewallPolicyTagRefResponse{
		ID:                   request.ID,
		FirewallPolicyTagRef: request.GetFirewallPolicyTagRef(),
	}, nil
}

func (s *BaseService) CreateFirewallPolicyFirewallRuleRef(ctx context.Context, request *CreateFirewallPolicyFirewallRuleRefRequest) (*CreateFirewallPolicyFirewallRuleRefResponse, error) {
	if s.next == nil {
		return &CreateFirewallPolicyFirewallRuleRefResponse{
			ID:                            request.ID,
			FirewallPolicyFirewallRuleRef: request.GetFirewallPolicyFirewallRuleRef(),
		}, nil
	}
	return s.Next().CreateFirewallPolicyFirewallRuleRef(ctx, request)
}

func (s *BaseService) DeleteFirewallPolicyFirewallRuleRef(ctx context.Context, request *DeleteFirewallPolicyFirewallRuleRefRequest) (*DeleteFirewallPolicyFirewallRuleRefResponse, error) {
	if s.next == nil {
		return &DeleteFirewallPolicyFirewallRuleRefResponse{
			ID:                            request.ID,
			FirewallPolicyFirewallRuleRef: request.GetFirewallPolicyFirewallRuleRef(),
		}, nil
	}
	return s.Next().DeleteFirewallPolicyFirewallRuleRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFirewallPolicyFirewallRuleRef(ctx context.Context, request *CreateFirewallPolicyFirewallRuleRefRequest) (*CreateFirewallPolicyFirewallRuleRefResponse, error) {
	refField := models.FirewallPolicyFieldFirewallRuleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallPolicy(ctx, &GetFirewallPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallPolicy
		obj.AddFirewallRuleRef(request.FirewallPolicyFirewallRuleRef)

		_, err = s.BaseService.UpdateFirewallPolicy(ctx, &UpdateFirewallPolicyRequest{
			FirewallPolicy: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFirewallPolicyFirewallRuleRefResponse{
		ID:                            request.ID,
		FirewallPolicyFirewallRuleRef: request.GetFirewallPolicyFirewallRuleRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFirewallPolicyFirewallRuleRef(ctx context.Context, request *DeleteFirewallPolicyFirewallRuleRefRequest) (*DeleteFirewallPolicyFirewallRuleRefResponse, error) {
	refField := models.FirewallPolicyFieldFirewallRuleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallPolicy(ctx, &GetFirewallPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallPolicy
		obj.RemoveFirewallRuleRef(request.FirewallPolicyFirewallRuleRef)

		_, err = s.BaseService.UpdateFirewallPolicy(ctx, &UpdateFirewallPolicyRequest{
			FirewallPolicy: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFirewallPolicyFirewallRuleRefResponse{
		ID:                            request.ID,
		FirewallPolicyFirewallRuleRef: request.GetFirewallPolicyFirewallRuleRef(),
	}, nil
}

func (s *EventProducerService) CreateFirewallPolicy(ctx context.Context, request *CreateFirewallPolicyRequest) (*CreateFirewallPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateFirewallPolicyRequest{
				CreateFirewallPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFirewallPolicy(ctx, request)
}
func (s *EventProducerService) UpdateFirewallPolicy(ctx context.Context, request *UpdateFirewallPolicyRequest) (*UpdateFirewallPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateFirewallPolicyRequest{
				UpdateFirewallPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateFirewallPolicy(ctx, request)
}
func (s *EventProducerService) DeleteFirewallPolicy(ctx context.Context, request *DeleteFirewallPolicyRequest) (*DeleteFirewallPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteFirewallPolicyRequest{
				DeleteFirewallPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFirewallPolicy(ctx, request)
}

func (s *EventProducerService) CreateFirewallPolicyFirewallRuleRef(ctx context.Context, request *CreateFirewallPolicyFirewallRuleRefRequest) (*CreateFirewallPolicyFirewallRuleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFirewallPolicyFirewallRuleRefRequest{
			CreateFirewallPolicyFirewallRuleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFirewallPolicyFirewallRuleRef(ctx, request)
}

func (s *EventProducerService) DeleteFirewallPolicyFirewallRuleRef(ctx context.Context, request *DeleteFirewallPolicyFirewallRuleRefRequest) (*DeleteFirewallPolicyFirewallRuleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFirewallPolicyFirewallRuleRefRequest{
			DeleteFirewallPolicyFirewallRuleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFirewallPolicyFirewallRuleRef(ctx, request)
}

func (s *EventProducerService) CreateFirewallPolicySecurityLoggingObjectRef(ctx context.Context, request *CreateFirewallPolicySecurityLoggingObjectRefRequest) (*CreateFirewallPolicySecurityLoggingObjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFirewallPolicySecurityLoggingObjectRefRequest{
			CreateFirewallPolicySecurityLoggingObjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFirewallPolicySecurityLoggingObjectRef(ctx, request)
}

func (s *EventProducerService) DeleteFirewallPolicySecurityLoggingObjectRef(ctx context.Context, request *DeleteFirewallPolicySecurityLoggingObjectRefRequest) (*DeleteFirewallPolicySecurityLoggingObjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFirewallPolicySecurityLoggingObjectRefRequest{
			DeleteFirewallPolicySecurityLoggingObjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFirewallPolicySecurityLoggingObjectRef(ctx, request)
}

func (s *EventProducerService) CreateFirewallPolicyTagRef(ctx context.Context, request *CreateFirewallPolicyTagRefRequest) (*CreateFirewallPolicyTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFirewallPolicyTagRefRequest{
			CreateFirewallPolicyTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFirewallPolicyTagRef(ctx, request)
}

func (s *EventProducerService) DeleteFirewallPolicyTagRef(ctx context.Context, request *DeleteFirewallPolicyTagRefRequest) (*DeleteFirewallPolicyTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFirewallPolicyTagRefRequest{
			DeleteFirewallPolicyTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFirewallPolicyTagRef(ctx, request)
}

func (e *Event_CreateFirewallPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFirewallPolicyRequest
	model := request.FirewallPolicy
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetFirewallPolicy(ctx,
			&GetFirewallPolicyRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateFirewallPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateFirewallPolicyRequest{
			CreateFirewallPolicyRequest: &CreateFirewallPolicyRequest{
				FirewallPolicy: response.GetFirewallPolicy(),
			},
		},
	}, nil
}

func (e *Event_CreateFirewallPolicyRequest) ToUpdateEvent() *Event {
	request := e.CreateFirewallPolicyRequest
	model := request.FirewallPolicy
	return &Event{
		Request: &Event_UpdateFirewallPolicyRequest{
			UpdateFirewallPolicyRequest: &UpdateFirewallPolicyRequest{
				FirewallPolicy: model,
				FieldMask:      request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateFirewallPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateFirewallPolicyRequest
	response, err := service.UpdateFirewallPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateFirewallPolicyRequest{
			UpdateFirewallPolicyRequest: &UpdateFirewallPolicyRequest{
				FirewallPolicy: response.GetFirewallPolicy(),
			},
		},
	}, nil
}

func (e *Event_UpdateFirewallPolicyRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteFirewallPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFirewallPolicyRequest
	_, err := service.DeleteFirewallPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteFirewallPolicyRequest{
			DeleteFirewallPolicyRequest: &DeleteFirewallPolicyRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateFirewallPolicyFirewallRuleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFirewallPolicyFirewallRuleRefRequest
	if _, err := service.CreateFirewallPolicyFirewallRuleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFirewallPolicyFirewallRuleRefRequest{
		CreateFirewallPolicyFirewallRuleRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFirewallPolicyFirewallRuleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFirewallPolicyFirewallRuleRefRequest
	if _, err := service.DeleteFirewallPolicyFirewallRuleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFirewallPolicyFirewallRuleRefRequest{
		DeleteFirewallPolicyFirewallRuleRefRequest: request,
	}}, nil
}

func (e *Event_CreateFirewallPolicySecurityLoggingObjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFirewallPolicySecurityLoggingObjectRefRequest
	if _, err := service.CreateFirewallPolicySecurityLoggingObjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFirewallPolicySecurityLoggingObjectRefRequest{
		CreateFirewallPolicySecurityLoggingObjectRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFirewallPolicySecurityLoggingObjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFirewallPolicySecurityLoggingObjectRefRequest
	if _, err := service.DeleteFirewallPolicySecurityLoggingObjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFirewallPolicySecurityLoggingObjectRefRequest{
		DeleteFirewallPolicySecurityLoggingObjectRefRequest: request,
	}}, nil
}

func (e *Event_CreateFirewallPolicyTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFirewallPolicyTagRefRequest
	if _, err := service.CreateFirewallPolicyTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFirewallPolicyTagRefRequest{
		CreateFirewallPolicyTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFirewallPolicyTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFirewallPolicyTagRefRequest
	if _, err := service.DeleteFirewallPolicyTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFirewallPolicyTagRefRequest{
		DeleteFirewallPolicyTagRefRequest: request,
	}}, nil
}

type FirewallRule = models.FirewallRule

func (s *BaseService) CreateFirewallRule(ctx context.Context, request *CreateFirewallRuleRequest) (*CreateFirewallRuleResponse, error) {
	if s.next == nil {
		return &CreateFirewallRuleResponse{
			FirewallRule: request.GetFirewallRule(),
		}, nil
	}
	return s.Next().CreateFirewallRule(ctx, request)
}
func (s *BaseService) UpdateFirewallRule(ctx context.Context, request *UpdateFirewallRuleRequest) (*UpdateFirewallRuleResponse, error) {
	if s.next == nil {
		return &UpdateFirewallRuleResponse{
			FirewallRule: request.GetFirewallRule(),
		}, nil
	}
	return s.Next().UpdateFirewallRule(ctx, request)
}
func (s *BaseService) DeleteFirewallRule(ctx context.Context, request *DeleteFirewallRuleRequest) (*DeleteFirewallRuleResponse, error) {
	if s.next == nil {
		return &DeleteFirewallRuleResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteFirewallRule(ctx, request)
}
func (s *BaseService) GetFirewallRule(ctx context.Context, request *GetFirewallRuleRequest) (*GetFirewallRuleResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetFirewallRule(ctx, request)
}
func (s *BaseService) ListFirewallRule(ctx context.Context, request *ListFirewallRuleRequest) (*ListFirewallRuleResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListFirewallRule(ctx, request)
}

func (s *BaseService) CreateFirewallRuleServiceGroupRef(ctx context.Context, request *CreateFirewallRuleServiceGroupRefRequest) (*CreateFirewallRuleServiceGroupRefResponse, error) {
	if s.next == nil {
		return &CreateFirewallRuleServiceGroupRefResponse{
			ID:                          request.ID,
			FirewallRuleServiceGroupRef: request.GetFirewallRuleServiceGroupRef(),
		}, nil
	}
	return s.Next().CreateFirewallRuleServiceGroupRef(ctx, request)
}

func (s *BaseService) DeleteFirewallRuleServiceGroupRef(ctx context.Context, request *DeleteFirewallRuleServiceGroupRefRequest) (*DeleteFirewallRuleServiceGroupRefResponse, error) {
	if s.next == nil {
		return &DeleteFirewallRuleServiceGroupRefResponse{
			ID:                          request.ID,
			FirewallRuleServiceGroupRef: request.GetFirewallRuleServiceGroupRef(),
		}, nil
	}
	return s.Next().DeleteFirewallRuleServiceGroupRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFirewallRuleServiceGroupRef(ctx context.Context, request *CreateFirewallRuleServiceGroupRefRequest) (*CreateFirewallRuleServiceGroupRefResponse, error) {
	refField := models.FirewallRuleFieldServiceGroupRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallRule(ctx, &GetFirewallRuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallRule
		obj.AddServiceGroupRef(request.FirewallRuleServiceGroupRef)

		_, err = s.BaseService.UpdateFirewallRule(ctx, &UpdateFirewallRuleRequest{
			FirewallRule: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFirewallRuleServiceGroupRefResponse{
		ID:                          request.ID,
		FirewallRuleServiceGroupRef: request.GetFirewallRuleServiceGroupRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFirewallRuleServiceGroupRef(ctx context.Context, request *DeleteFirewallRuleServiceGroupRefRequest) (*DeleteFirewallRuleServiceGroupRefResponse, error) {
	refField := models.FirewallRuleFieldServiceGroupRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallRule(ctx, &GetFirewallRuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallRule
		obj.RemoveServiceGroupRef(request.FirewallRuleServiceGroupRef)

		_, err = s.BaseService.UpdateFirewallRule(ctx, &UpdateFirewallRuleRequest{
			FirewallRule: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFirewallRuleServiceGroupRefResponse{
		ID:                          request.ID,
		FirewallRuleServiceGroupRef: request.GetFirewallRuleServiceGroupRef(),
	}, nil
}

func (s *BaseService) CreateFirewallRuleVirtualNetworkRef(ctx context.Context, request *CreateFirewallRuleVirtualNetworkRefRequest) (*CreateFirewallRuleVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &CreateFirewallRuleVirtualNetworkRefResponse{
			ID:                            request.ID,
			FirewallRuleVirtualNetworkRef: request.GetFirewallRuleVirtualNetworkRef(),
		}, nil
	}
	return s.Next().CreateFirewallRuleVirtualNetworkRef(ctx, request)
}

func (s *BaseService) DeleteFirewallRuleVirtualNetworkRef(ctx context.Context, request *DeleteFirewallRuleVirtualNetworkRefRequest) (*DeleteFirewallRuleVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &DeleteFirewallRuleVirtualNetworkRefResponse{
			ID:                            request.ID,
			FirewallRuleVirtualNetworkRef: request.GetFirewallRuleVirtualNetworkRef(),
		}, nil
	}
	return s.Next().DeleteFirewallRuleVirtualNetworkRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFirewallRuleVirtualNetworkRef(ctx context.Context, request *CreateFirewallRuleVirtualNetworkRefRequest) (*CreateFirewallRuleVirtualNetworkRefResponse, error) {
	refField := models.FirewallRuleFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallRule(ctx, &GetFirewallRuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallRule
		obj.AddVirtualNetworkRef(request.FirewallRuleVirtualNetworkRef)

		_, err = s.BaseService.UpdateFirewallRule(ctx, &UpdateFirewallRuleRequest{
			FirewallRule: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFirewallRuleVirtualNetworkRefResponse{
		ID:                            request.ID,
		FirewallRuleVirtualNetworkRef: request.GetFirewallRuleVirtualNetworkRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFirewallRuleVirtualNetworkRef(ctx context.Context, request *DeleteFirewallRuleVirtualNetworkRefRequest) (*DeleteFirewallRuleVirtualNetworkRefResponse, error) {
	refField := models.FirewallRuleFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallRule(ctx, &GetFirewallRuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallRule
		obj.RemoveVirtualNetworkRef(request.FirewallRuleVirtualNetworkRef)

		_, err = s.BaseService.UpdateFirewallRule(ctx, &UpdateFirewallRuleRequest{
			FirewallRule: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFirewallRuleVirtualNetworkRefResponse{
		ID:                            request.ID,
		FirewallRuleVirtualNetworkRef: request.GetFirewallRuleVirtualNetworkRef(),
	}, nil
}

func (s *BaseService) CreateFirewallRuleTagRef(ctx context.Context, request *CreateFirewallRuleTagRefRequest) (*CreateFirewallRuleTagRefResponse, error) {
	if s.next == nil {
		return &CreateFirewallRuleTagRefResponse{
			ID:                 request.ID,
			FirewallRuleTagRef: request.GetFirewallRuleTagRef(),
		}, nil
	}
	return s.Next().CreateFirewallRuleTagRef(ctx, request)
}

func (s *BaseService) DeleteFirewallRuleTagRef(ctx context.Context, request *DeleteFirewallRuleTagRefRequest) (*DeleteFirewallRuleTagRefResponse, error) {
	if s.next == nil {
		return &DeleteFirewallRuleTagRefResponse{
			ID:                 request.ID,
			FirewallRuleTagRef: request.GetFirewallRuleTagRef(),
		}, nil
	}
	return s.Next().DeleteFirewallRuleTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFirewallRuleTagRef(ctx context.Context, request *CreateFirewallRuleTagRefRequest) (*CreateFirewallRuleTagRefResponse, error) {
	refField := models.FirewallRuleFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallRule(ctx, &GetFirewallRuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallRule
		obj.AddTagRef(request.FirewallRuleTagRef)

		_, err = s.BaseService.UpdateFirewallRule(ctx, &UpdateFirewallRuleRequest{
			FirewallRule: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFirewallRuleTagRefResponse{
		ID:                 request.ID,
		FirewallRuleTagRef: request.GetFirewallRuleTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFirewallRuleTagRef(ctx context.Context, request *DeleteFirewallRuleTagRefRequest) (*DeleteFirewallRuleTagRefResponse, error) {
	refField := models.FirewallRuleFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallRule(ctx, &GetFirewallRuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallRule
		obj.RemoveTagRef(request.FirewallRuleTagRef)

		_, err = s.BaseService.UpdateFirewallRule(ctx, &UpdateFirewallRuleRequest{
			FirewallRule: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFirewallRuleTagRefResponse{
		ID:                 request.ID,
		FirewallRuleTagRef: request.GetFirewallRuleTagRef(),
	}, nil
}

func (s *BaseService) CreateFirewallRuleAddressGroupRef(ctx context.Context, request *CreateFirewallRuleAddressGroupRefRequest) (*CreateFirewallRuleAddressGroupRefResponse, error) {
	if s.next == nil {
		return &CreateFirewallRuleAddressGroupRefResponse{
			ID:                          request.ID,
			FirewallRuleAddressGroupRef: request.GetFirewallRuleAddressGroupRef(),
		}, nil
	}
	return s.Next().CreateFirewallRuleAddressGroupRef(ctx, request)
}

func (s *BaseService) DeleteFirewallRuleAddressGroupRef(ctx context.Context, request *DeleteFirewallRuleAddressGroupRefRequest) (*DeleteFirewallRuleAddressGroupRefResponse, error) {
	if s.next == nil {
		return &DeleteFirewallRuleAddressGroupRefResponse{
			ID:                          request.ID,
			FirewallRuleAddressGroupRef: request.GetFirewallRuleAddressGroupRef(),
		}, nil
	}
	return s.Next().DeleteFirewallRuleAddressGroupRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFirewallRuleAddressGroupRef(ctx context.Context, request *CreateFirewallRuleAddressGroupRefRequest) (*CreateFirewallRuleAddressGroupRefResponse, error) {
	refField := models.FirewallRuleFieldAddressGroupRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallRule(ctx, &GetFirewallRuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallRule
		obj.AddAddressGroupRef(request.FirewallRuleAddressGroupRef)

		_, err = s.BaseService.UpdateFirewallRule(ctx, &UpdateFirewallRuleRequest{
			FirewallRule: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFirewallRuleAddressGroupRefResponse{
		ID:                          request.ID,
		FirewallRuleAddressGroupRef: request.GetFirewallRuleAddressGroupRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFirewallRuleAddressGroupRef(ctx context.Context, request *DeleteFirewallRuleAddressGroupRefRequest) (*DeleteFirewallRuleAddressGroupRefResponse, error) {
	refField := models.FirewallRuleFieldAddressGroupRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallRule(ctx, &GetFirewallRuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallRule
		obj.RemoveAddressGroupRef(request.FirewallRuleAddressGroupRef)

		_, err = s.BaseService.UpdateFirewallRule(ctx, &UpdateFirewallRuleRequest{
			FirewallRule: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFirewallRuleAddressGroupRefResponse{
		ID:                          request.ID,
		FirewallRuleAddressGroupRef: request.GetFirewallRuleAddressGroupRef(),
	}, nil
}

func (s *BaseService) CreateFirewallRuleSecurityLoggingObjectRef(ctx context.Context, request *CreateFirewallRuleSecurityLoggingObjectRefRequest) (*CreateFirewallRuleSecurityLoggingObjectRefResponse, error) {
	if s.next == nil {
		return &CreateFirewallRuleSecurityLoggingObjectRefResponse{
			ID:                                   request.ID,
			FirewallRuleSecurityLoggingObjectRef: request.GetFirewallRuleSecurityLoggingObjectRef(),
		}, nil
	}
	return s.Next().CreateFirewallRuleSecurityLoggingObjectRef(ctx, request)
}

func (s *BaseService) DeleteFirewallRuleSecurityLoggingObjectRef(ctx context.Context, request *DeleteFirewallRuleSecurityLoggingObjectRefRequest) (*DeleteFirewallRuleSecurityLoggingObjectRefResponse, error) {
	if s.next == nil {
		return &DeleteFirewallRuleSecurityLoggingObjectRefResponse{
			ID:                                   request.ID,
			FirewallRuleSecurityLoggingObjectRef: request.GetFirewallRuleSecurityLoggingObjectRef(),
		}, nil
	}
	return s.Next().DeleteFirewallRuleSecurityLoggingObjectRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFirewallRuleSecurityLoggingObjectRef(ctx context.Context, request *CreateFirewallRuleSecurityLoggingObjectRefRequest) (*CreateFirewallRuleSecurityLoggingObjectRefResponse, error) {
	refField := models.FirewallRuleFieldSecurityLoggingObjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallRule(ctx, &GetFirewallRuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallRule
		obj.AddSecurityLoggingObjectRef(request.FirewallRuleSecurityLoggingObjectRef)

		_, err = s.BaseService.UpdateFirewallRule(ctx, &UpdateFirewallRuleRequest{
			FirewallRule: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFirewallRuleSecurityLoggingObjectRefResponse{
		ID:                                   request.ID,
		FirewallRuleSecurityLoggingObjectRef: request.GetFirewallRuleSecurityLoggingObjectRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFirewallRuleSecurityLoggingObjectRef(ctx context.Context, request *DeleteFirewallRuleSecurityLoggingObjectRefRequest) (*DeleteFirewallRuleSecurityLoggingObjectRefResponse, error) {
	refField := models.FirewallRuleFieldSecurityLoggingObjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFirewallRule(ctx, &GetFirewallRuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FirewallRule
		obj.RemoveSecurityLoggingObjectRef(request.FirewallRuleSecurityLoggingObjectRef)

		_, err = s.BaseService.UpdateFirewallRule(ctx, &UpdateFirewallRuleRequest{
			FirewallRule: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFirewallRuleSecurityLoggingObjectRefResponse{
		ID:                                   request.ID,
		FirewallRuleSecurityLoggingObjectRef: request.GetFirewallRuleSecurityLoggingObjectRef(),
	}, nil
}

func (s *EventProducerService) CreateFirewallRule(ctx context.Context, request *CreateFirewallRuleRequest) (*CreateFirewallRuleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateFirewallRuleRequest{
				CreateFirewallRuleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFirewallRule(ctx, request)
}
func (s *EventProducerService) UpdateFirewallRule(ctx context.Context, request *UpdateFirewallRuleRequest) (*UpdateFirewallRuleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateFirewallRuleRequest{
				UpdateFirewallRuleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateFirewallRule(ctx, request)
}
func (s *EventProducerService) DeleteFirewallRule(ctx context.Context, request *DeleteFirewallRuleRequest) (*DeleteFirewallRuleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteFirewallRuleRequest{
				DeleteFirewallRuleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFirewallRule(ctx, request)
}

func (s *EventProducerService) CreateFirewallRuleVirtualNetworkRef(ctx context.Context, request *CreateFirewallRuleVirtualNetworkRefRequest) (*CreateFirewallRuleVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFirewallRuleVirtualNetworkRefRequest{
			CreateFirewallRuleVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFirewallRuleVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) DeleteFirewallRuleVirtualNetworkRef(ctx context.Context, request *DeleteFirewallRuleVirtualNetworkRefRequest) (*DeleteFirewallRuleVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFirewallRuleVirtualNetworkRefRequest{
			DeleteFirewallRuleVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFirewallRuleVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) CreateFirewallRuleTagRef(ctx context.Context, request *CreateFirewallRuleTagRefRequest) (*CreateFirewallRuleTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFirewallRuleTagRefRequest{
			CreateFirewallRuleTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFirewallRuleTagRef(ctx, request)
}

func (s *EventProducerService) DeleteFirewallRuleTagRef(ctx context.Context, request *DeleteFirewallRuleTagRefRequest) (*DeleteFirewallRuleTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFirewallRuleTagRefRequest{
			DeleteFirewallRuleTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFirewallRuleTagRef(ctx, request)
}

func (s *EventProducerService) CreateFirewallRuleAddressGroupRef(ctx context.Context, request *CreateFirewallRuleAddressGroupRefRequest) (*CreateFirewallRuleAddressGroupRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFirewallRuleAddressGroupRefRequest{
			CreateFirewallRuleAddressGroupRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFirewallRuleAddressGroupRef(ctx, request)
}

func (s *EventProducerService) DeleteFirewallRuleAddressGroupRef(ctx context.Context, request *DeleteFirewallRuleAddressGroupRefRequest) (*DeleteFirewallRuleAddressGroupRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFirewallRuleAddressGroupRefRequest{
			DeleteFirewallRuleAddressGroupRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFirewallRuleAddressGroupRef(ctx, request)
}

func (s *EventProducerService) CreateFirewallRuleSecurityLoggingObjectRef(ctx context.Context, request *CreateFirewallRuleSecurityLoggingObjectRefRequest) (*CreateFirewallRuleSecurityLoggingObjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFirewallRuleSecurityLoggingObjectRefRequest{
			CreateFirewallRuleSecurityLoggingObjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFirewallRuleSecurityLoggingObjectRef(ctx, request)
}

func (s *EventProducerService) DeleteFirewallRuleSecurityLoggingObjectRef(ctx context.Context, request *DeleteFirewallRuleSecurityLoggingObjectRefRequest) (*DeleteFirewallRuleSecurityLoggingObjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFirewallRuleSecurityLoggingObjectRefRequest{
			DeleteFirewallRuleSecurityLoggingObjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFirewallRuleSecurityLoggingObjectRef(ctx, request)
}

func (s *EventProducerService) CreateFirewallRuleServiceGroupRef(ctx context.Context, request *CreateFirewallRuleServiceGroupRefRequest) (*CreateFirewallRuleServiceGroupRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFirewallRuleServiceGroupRefRequest{
			CreateFirewallRuleServiceGroupRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFirewallRuleServiceGroupRef(ctx, request)
}

func (s *EventProducerService) DeleteFirewallRuleServiceGroupRef(ctx context.Context, request *DeleteFirewallRuleServiceGroupRefRequest) (*DeleteFirewallRuleServiceGroupRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFirewallRuleServiceGroupRefRequest{
			DeleteFirewallRuleServiceGroupRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFirewallRuleServiceGroupRef(ctx, request)
}

func (e *Event_CreateFirewallRuleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFirewallRuleRequest
	model := request.FirewallRule
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetFirewallRule(ctx,
			&GetFirewallRuleRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateFirewallRule(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateFirewallRuleRequest{
			CreateFirewallRuleRequest: &CreateFirewallRuleRequest{
				FirewallRule: response.GetFirewallRule(),
			},
		},
	}, nil
}

func (e *Event_CreateFirewallRuleRequest) ToUpdateEvent() *Event {
	request := e.CreateFirewallRuleRequest
	model := request.FirewallRule
	return &Event{
		Request: &Event_UpdateFirewallRuleRequest{
			UpdateFirewallRuleRequest: &UpdateFirewallRuleRequest{
				FirewallRule: model,
				FieldMask:    request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateFirewallRuleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateFirewallRuleRequest
	response, err := service.UpdateFirewallRule(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateFirewallRuleRequest{
			UpdateFirewallRuleRequest: &UpdateFirewallRuleRequest{
				FirewallRule: response.GetFirewallRule(),
			},
		},
	}, nil
}

func (e *Event_UpdateFirewallRuleRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteFirewallRuleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFirewallRuleRequest
	_, err := service.DeleteFirewallRule(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteFirewallRuleRequest{
			DeleteFirewallRuleRequest: &DeleteFirewallRuleRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateFirewallRuleTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFirewallRuleTagRefRequest
	if _, err := service.CreateFirewallRuleTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFirewallRuleTagRefRequest{
		CreateFirewallRuleTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFirewallRuleTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFirewallRuleTagRefRequest
	if _, err := service.DeleteFirewallRuleTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFirewallRuleTagRefRequest{
		DeleteFirewallRuleTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateFirewallRuleAddressGroupRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFirewallRuleAddressGroupRefRequest
	if _, err := service.CreateFirewallRuleAddressGroupRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFirewallRuleAddressGroupRefRequest{
		CreateFirewallRuleAddressGroupRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFirewallRuleAddressGroupRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFirewallRuleAddressGroupRefRequest
	if _, err := service.DeleteFirewallRuleAddressGroupRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFirewallRuleAddressGroupRefRequest{
		DeleteFirewallRuleAddressGroupRefRequest: request,
	}}, nil
}

func (e *Event_CreateFirewallRuleSecurityLoggingObjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFirewallRuleSecurityLoggingObjectRefRequest
	if _, err := service.CreateFirewallRuleSecurityLoggingObjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFirewallRuleSecurityLoggingObjectRefRequest{
		CreateFirewallRuleSecurityLoggingObjectRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFirewallRuleSecurityLoggingObjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFirewallRuleSecurityLoggingObjectRefRequest
	if _, err := service.DeleteFirewallRuleSecurityLoggingObjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFirewallRuleSecurityLoggingObjectRefRequest{
		DeleteFirewallRuleSecurityLoggingObjectRefRequest: request,
	}}, nil
}

func (e *Event_CreateFirewallRuleServiceGroupRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFirewallRuleServiceGroupRefRequest
	if _, err := service.CreateFirewallRuleServiceGroupRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFirewallRuleServiceGroupRefRequest{
		CreateFirewallRuleServiceGroupRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFirewallRuleServiceGroupRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFirewallRuleServiceGroupRefRequest
	if _, err := service.DeleteFirewallRuleServiceGroupRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFirewallRuleServiceGroupRefRequest{
		DeleteFirewallRuleServiceGroupRefRequest: request,
	}}, nil
}

func (e *Event_CreateFirewallRuleVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFirewallRuleVirtualNetworkRefRequest
	if _, err := service.CreateFirewallRuleVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFirewallRuleVirtualNetworkRefRequest{
		CreateFirewallRuleVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFirewallRuleVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFirewallRuleVirtualNetworkRefRequest
	if _, err := service.DeleteFirewallRuleVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFirewallRuleVirtualNetworkRefRequest{
		DeleteFirewallRuleVirtualNetworkRefRequest: request,
	}}, nil
}

type FloatingIPPool = models.FloatingIPPool

func (s *BaseService) CreateFloatingIPPool(ctx context.Context, request *CreateFloatingIPPoolRequest) (*CreateFloatingIPPoolResponse, error) {
	if s.next == nil {
		return &CreateFloatingIPPoolResponse{
			FloatingIPPool: request.GetFloatingIPPool(),
		}, nil
	}
	return s.Next().CreateFloatingIPPool(ctx, request)
}
func (s *BaseService) UpdateFloatingIPPool(ctx context.Context, request *UpdateFloatingIPPoolRequest) (*UpdateFloatingIPPoolResponse, error) {
	if s.next == nil {
		return &UpdateFloatingIPPoolResponse{
			FloatingIPPool: request.GetFloatingIPPool(),
		}, nil
	}
	return s.Next().UpdateFloatingIPPool(ctx, request)
}
func (s *BaseService) DeleteFloatingIPPool(ctx context.Context, request *DeleteFloatingIPPoolRequest) (*DeleteFloatingIPPoolResponse, error) {
	if s.next == nil {
		return &DeleteFloatingIPPoolResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteFloatingIPPool(ctx, request)
}
func (s *BaseService) GetFloatingIPPool(ctx context.Context, request *GetFloatingIPPoolRequest) (*GetFloatingIPPoolResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetFloatingIPPool(ctx, request)
}
func (s *BaseService) ListFloatingIPPool(ctx context.Context, request *ListFloatingIPPoolRequest) (*ListFloatingIPPoolResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListFloatingIPPool(ctx, request)
}

func (s *BaseService) CreateFloatingIPPoolTagRef(ctx context.Context, request *CreateFloatingIPPoolTagRefRequest) (*CreateFloatingIPPoolTagRefResponse, error) {
	if s.next == nil {
		return &CreateFloatingIPPoolTagRefResponse{
			ID:                   request.ID,
			FloatingIPPoolTagRef: request.GetFloatingIPPoolTagRef(),
		}, nil
	}
	return s.Next().CreateFloatingIPPoolTagRef(ctx, request)
}

func (s *BaseService) DeleteFloatingIPPoolTagRef(ctx context.Context, request *DeleteFloatingIPPoolTagRefRequest) (*DeleteFloatingIPPoolTagRefResponse, error) {
	if s.next == nil {
		return &DeleteFloatingIPPoolTagRefResponse{
			ID:                   request.ID,
			FloatingIPPoolTagRef: request.GetFloatingIPPoolTagRef(),
		}, nil
	}
	return s.Next().DeleteFloatingIPPoolTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFloatingIPPoolTagRef(ctx context.Context, request *CreateFloatingIPPoolTagRefRequest) (*CreateFloatingIPPoolTagRefResponse, error) {
	refField := models.FloatingIPPoolFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFloatingIPPool(ctx, &GetFloatingIPPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FloatingIPPool
		obj.AddTagRef(request.FloatingIPPoolTagRef)

		_, err = s.BaseService.UpdateFloatingIPPool(ctx, &UpdateFloatingIPPoolRequest{
			FloatingIPPool: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFloatingIPPoolTagRefResponse{
		ID:                   request.ID,
		FloatingIPPoolTagRef: request.GetFloatingIPPoolTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFloatingIPPoolTagRef(ctx context.Context, request *DeleteFloatingIPPoolTagRefRequest) (*DeleteFloatingIPPoolTagRefResponse, error) {
	refField := models.FloatingIPPoolFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFloatingIPPool(ctx, &GetFloatingIPPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FloatingIPPool
		obj.RemoveTagRef(request.FloatingIPPoolTagRef)

		_, err = s.BaseService.UpdateFloatingIPPool(ctx, &UpdateFloatingIPPoolRequest{
			FloatingIPPool: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFloatingIPPoolTagRefResponse{
		ID:                   request.ID,
		FloatingIPPoolTagRef: request.GetFloatingIPPoolTagRef(),
	}, nil
}

func (s *EventProducerService) CreateFloatingIPPool(ctx context.Context, request *CreateFloatingIPPoolRequest) (*CreateFloatingIPPoolResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateFloatingIPPoolRequest{
				CreateFloatingIPPoolRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFloatingIPPool(ctx, request)
}
func (s *EventProducerService) UpdateFloatingIPPool(ctx context.Context, request *UpdateFloatingIPPoolRequest) (*UpdateFloatingIPPoolResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateFloatingIPPoolRequest{
				UpdateFloatingIPPoolRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateFloatingIPPool(ctx, request)
}
func (s *EventProducerService) DeleteFloatingIPPool(ctx context.Context, request *DeleteFloatingIPPoolRequest) (*DeleteFloatingIPPoolResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteFloatingIPPoolRequest{
				DeleteFloatingIPPoolRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFloatingIPPool(ctx, request)
}

func (s *EventProducerService) CreateFloatingIPPoolTagRef(ctx context.Context, request *CreateFloatingIPPoolTagRefRequest) (*CreateFloatingIPPoolTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFloatingIPPoolTagRefRequest{
			CreateFloatingIPPoolTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFloatingIPPoolTagRef(ctx, request)
}

func (s *EventProducerService) DeleteFloatingIPPoolTagRef(ctx context.Context, request *DeleteFloatingIPPoolTagRefRequest) (*DeleteFloatingIPPoolTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFloatingIPPoolTagRefRequest{
			DeleteFloatingIPPoolTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFloatingIPPoolTagRef(ctx, request)
}

func (e *Event_CreateFloatingIPPoolRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFloatingIPPoolRequest
	model := request.FloatingIPPool
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetFloatingIPPool(ctx,
			&GetFloatingIPPoolRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateFloatingIPPool(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateFloatingIPPoolRequest{
			CreateFloatingIPPoolRequest: &CreateFloatingIPPoolRequest{
				FloatingIPPool: response.GetFloatingIPPool(),
			},
		},
	}, nil
}

func (e *Event_CreateFloatingIPPoolRequest) ToUpdateEvent() *Event {
	request := e.CreateFloatingIPPoolRequest
	model := request.FloatingIPPool
	return &Event{
		Request: &Event_UpdateFloatingIPPoolRequest{
			UpdateFloatingIPPoolRequest: &UpdateFloatingIPPoolRequest{
				FloatingIPPool: model,
				FieldMask:      request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateFloatingIPPoolRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateFloatingIPPoolRequest
	response, err := service.UpdateFloatingIPPool(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateFloatingIPPoolRequest{
			UpdateFloatingIPPoolRequest: &UpdateFloatingIPPoolRequest{
				FloatingIPPool: response.GetFloatingIPPool(),
			},
		},
	}, nil
}

func (e *Event_UpdateFloatingIPPoolRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteFloatingIPPoolRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFloatingIPPoolRequest
	_, err := service.DeleteFloatingIPPool(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteFloatingIPPoolRequest{
			DeleteFloatingIPPoolRequest: &DeleteFloatingIPPoolRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateFloatingIPPoolTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFloatingIPPoolTagRefRequest
	if _, err := service.CreateFloatingIPPoolTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFloatingIPPoolTagRefRequest{
		CreateFloatingIPPoolTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFloatingIPPoolTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFloatingIPPoolTagRefRequest
	if _, err := service.DeleteFloatingIPPoolTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFloatingIPPoolTagRefRequest{
		DeleteFloatingIPPoolTagRefRequest: request,
	}}, nil
}

type FloatingIP = models.FloatingIP

func (s *BaseService) CreateFloatingIP(ctx context.Context, request *CreateFloatingIPRequest) (*CreateFloatingIPResponse, error) {
	if s.next == nil {
		return &CreateFloatingIPResponse{
			FloatingIP: request.GetFloatingIP(),
		}, nil
	}
	return s.Next().CreateFloatingIP(ctx, request)
}
func (s *BaseService) UpdateFloatingIP(ctx context.Context, request *UpdateFloatingIPRequest) (*UpdateFloatingIPResponse, error) {
	if s.next == nil {
		return &UpdateFloatingIPResponse{
			FloatingIP: request.GetFloatingIP(),
		}, nil
	}
	return s.Next().UpdateFloatingIP(ctx, request)
}
func (s *BaseService) DeleteFloatingIP(ctx context.Context, request *DeleteFloatingIPRequest) (*DeleteFloatingIPResponse, error) {
	if s.next == nil {
		return &DeleteFloatingIPResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteFloatingIP(ctx, request)
}
func (s *BaseService) GetFloatingIP(ctx context.Context, request *GetFloatingIPRequest) (*GetFloatingIPResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetFloatingIP(ctx, request)
}
func (s *BaseService) ListFloatingIP(ctx context.Context, request *ListFloatingIPRequest) (*ListFloatingIPResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListFloatingIP(ctx, request)
}

func (s *BaseService) CreateFloatingIPTagRef(ctx context.Context, request *CreateFloatingIPTagRefRequest) (*CreateFloatingIPTagRefResponse, error) {
	if s.next == nil {
		return &CreateFloatingIPTagRefResponse{
			ID:               request.ID,
			FloatingIPTagRef: request.GetFloatingIPTagRef(),
		}, nil
	}
	return s.Next().CreateFloatingIPTagRef(ctx, request)
}

func (s *BaseService) DeleteFloatingIPTagRef(ctx context.Context, request *DeleteFloatingIPTagRefRequest) (*DeleteFloatingIPTagRefResponse, error) {
	if s.next == nil {
		return &DeleteFloatingIPTagRefResponse{
			ID:               request.ID,
			FloatingIPTagRef: request.GetFloatingIPTagRef(),
		}, nil
	}
	return s.Next().DeleteFloatingIPTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFloatingIPTagRef(ctx context.Context, request *CreateFloatingIPTagRefRequest) (*CreateFloatingIPTagRefResponse, error) {
	refField := models.FloatingIPFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFloatingIP(ctx, &GetFloatingIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FloatingIP
		obj.AddTagRef(request.FloatingIPTagRef)

		_, err = s.BaseService.UpdateFloatingIP(ctx, &UpdateFloatingIPRequest{
			FloatingIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFloatingIPTagRefResponse{
		ID:               request.ID,
		FloatingIPTagRef: request.GetFloatingIPTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFloatingIPTagRef(ctx context.Context, request *DeleteFloatingIPTagRefRequest) (*DeleteFloatingIPTagRefResponse, error) {
	refField := models.FloatingIPFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFloatingIP(ctx, &GetFloatingIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FloatingIP
		obj.RemoveTagRef(request.FloatingIPTagRef)

		_, err = s.BaseService.UpdateFloatingIP(ctx, &UpdateFloatingIPRequest{
			FloatingIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFloatingIPTagRefResponse{
		ID:               request.ID,
		FloatingIPTagRef: request.GetFloatingIPTagRef(),
	}, nil
}

func (s *BaseService) CreateFloatingIPProjectRef(ctx context.Context, request *CreateFloatingIPProjectRefRequest) (*CreateFloatingIPProjectRefResponse, error) {
	if s.next == nil {
		return &CreateFloatingIPProjectRefResponse{
			ID:                   request.ID,
			FloatingIPProjectRef: request.GetFloatingIPProjectRef(),
		}, nil
	}
	return s.Next().CreateFloatingIPProjectRef(ctx, request)
}

func (s *BaseService) DeleteFloatingIPProjectRef(ctx context.Context, request *DeleteFloatingIPProjectRefRequest) (*DeleteFloatingIPProjectRefResponse, error) {
	if s.next == nil {
		return &DeleteFloatingIPProjectRefResponse{
			ID:                   request.ID,
			FloatingIPProjectRef: request.GetFloatingIPProjectRef(),
		}, nil
	}
	return s.Next().DeleteFloatingIPProjectRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFloatingIPProjectRef(ctx context.Context, request *CreateFloatingIPProjectRefRequest) (*CreateFloatingIPProjectRefResponse, error) {
	refField := models.FloatingIPFieldProjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFloatingIP(ctx, &GetFloatingIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FloatingIP
		obj.AddProjectRef(request.FloatingIPProjectRef)

		_, err = s.BaseService.UpdateFloatingIP(ctx, &UpdateFloatingIPRequest{
			FloatingIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFloatingIPProjectRefResponse{
		ID:                   request.ID,
		FloatingIPProjectRef: request.GetFloatingIPProjectRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFloatingIPProjectRef(ctx context.Context, request *DeleteFloatingIPProjectRefRequest) (*DeleteFloatingIPProjectRefResponse, error) {
	refField := models.FloatingIPFieldProjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFloatingIP(ctx, &GetFloatingIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FloatingIP
		obj.RemoveProjectRef(request.FloatingIPProjectRef)

		_, err = s.BaseService.UpdateFloatingIP(ctx, &UpdateFloatingIPRequest{
			FloatingIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFloatingIPProjectRefResponse{
		ID:                   request.ID,
		FloatingIPProjectRef: request.GetFloatingIPProjectRef(),
	}, nil
}

func (s *BaseService) CreateFloatingIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateFloatingIPVirtualMachineInterfaceRefRequest) (*CreateFloatingIPVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateFloatingIPVirtualMachineInterfaceRefResponse{
			ID:                                   request.ID,
			FloatingIPVirtualMachineInterfaceRef: request.GetFloatingIPVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().CreateFloatingIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteFloatingIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteFloatingIPVirtualMachineInterfaceRefRequest) (*DeleteFloatingIPVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteFloatingIPVirtualMachineInterfaceRefResponse{
			ID:                                   request.ID,
			FloatingIPVirtualMachineInterfaceRef: request.GetFloatingIPVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteFloatingIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFloatingIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateFloatingIPVirtualMachineInterfaceRefRequest) (*CreateFloatingIPVirtualMachineInterfaceRefResponse, error) {
	refField := models.FloatingIPFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFloatingIP(ctx, &GetFloatingIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FloatingIP
		obj.AddVirtualMachineInterfaceRef(request.FloatingIPVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateFloatingIP(ctx, &UpdateFloatingIPRequest{
			FloatingIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFloatingIPVirtualMachineInterfaceRefResponse{
		ID:                                   request.ID,
		FloatingIPVirtualMachineInterfaceRef: request.GetFloatingIPVirtualMachineInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFloatingIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteFloatingIPVirtualMachineInterfaceRefRequest) (*DeleteFloatingIPVirtualMachineInterfaceRefResponse, error) {
	refField := models.FloatingIPFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFloatingIP(ctx, &GetFloatingIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FloatingIP
		obj.RemoveVirtualMachineInterfaceRef(request.FloatingIPVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateFloatingIP(ctx, &UpdateFloatingIPRequest{
			FloatingIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFloatingIPVirtualMachineInterfaceRefResponse{
		ID:                                   request.ID,
		FloatingIPVirtualMachineInterfaceRef: request.GetFloatingIPVirtualMachineInterfaceRef(),
	}, nil
}

func (s *EventProducerService) CreateFloatingIP(ctx context.Context, request *CreateFloatingIPRequest) (*CreateFloatingIPResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateFloatingIPRequest{
				CreateFloatingIPRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFloatingIP(ctx, request)
}
func (s *EventProducerService) UpdateFloatingIP(ctx context.Context, request *UpdateFloatingIPRequest) (*UpdateFloatingIPResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateFloatingIPRequest{
				UpdateFloatingIPRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateFloatingIP(ctx, request)
}
func (s *EventProducerService) DeleteFloatingIP(ctx context.Context, request *DeleteFloatingIPRequest) (*DeleteFloatingIPResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteFloatingIPRequest{
				DeleteFloatingIPRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFloatingIP(ctx, request)
}

func (s *EventProducerService) CreateFloatingIPTagRef(ctx context.Context, request *CreateFloatingIPTagRefRequest) (*CreateFloatingIPTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFloatingIPTagRefRequest{
			CreateFloatingIPTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFloatingIPTagRef(ctx, request)
}

func (s *EventProducerService) DeleteFloatingIPTagRef(ctx context.Context, request *DeleteFloatingIPTagRefRequest) (*DeleteFloatingIPTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFloatingIPTagRefRequest{
			DeleteFloatingIPTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFloatingIPTagRef(ctx, request)
}

func (s *EventProducerService) CreateFloatingIPProjectRef(ctx context.Context, request *CreateFloatingIPProjectRefRequest) (*CreateFloatingIPProjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFloatingIPProjectRefRequest{
			CreateFloatingIPProjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFloatingIPProjectRef(ctx, request)
}

func (s *EventProducerService) DeleteFloatingIPProjectRef(ctx context.Context, request *DeleteFloatingIPProjectRefRequest) (*DeleteFloatingIPProjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFloatingIPProjectRefRequest{
			DeleteFloatingIPProjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFloatingIPProjectRef(ctx, request)
}

func (s *EventProducerService) CreateFloatingIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateFloatingIPVirtualMachineInterfaceRefRequest) (*CreateFloatingIPVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFloatingIPVirtualMachineInterfaceRefRequest{
			CreateFloatingIPVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFloatingIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteFloatingIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteFloatingIPVirtualMachineInterfaceRefRequest) (*DeleteFloatingIPVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFloatingIPVirtualMachineInterfaceRefRequest{
			DeleteFloatingIPVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFloatingIPVirtualMachineInterfaceRef(ctx, request)
}

func (e *Event_CreateFloatingIPRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFloatingIPRequest
	model := request.FloatingIP
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetFloatingIP(ctx,
			&GetFloatingIPRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateFloatingIP(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateFloatingIPRequest{
			CreateFloatingIPRequest: &CreateFloatingIPRequest{
				FloatingIP: response.GetFloatingIP(),
			},
		},
	}, nil
}

func (e *Event_CreateFloatingIPRequest) ToUpdateEvent() *Event {
	request := e.CreateFloatingIPRequest
	model := request.FloatingIP
	return &Event{
		Request: &Event_UpdateFloatingIPRequest{
			UpdateFloatingIPRequest: &UpdateFloatingIPRequest{
				FloatingIP: model,
				FieldMask:  request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateFloatingIPRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateFloatingIPRequest
	response, err := service.UpdateFloatingIP(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateFloatingIPRequest{
			UpdateFloatingIPRequest: &UpdateFloatingIPRequest{
				FloatingIP: response.GetFloatingIP(),
			},
		},
	}, nil
}

func (e *Event_UpdateFloatingIPRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteFloatingIPRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFloatingIPRequest
	_, err := service.DeleteFloatingIP(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteFloatingIPRequest{
			DeleteFloatingIPRequest: &DeleteFloatingIPRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateFloatingIPProjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFloatingIPProjectRefRequest
	if _, err := service.CreateFloatingIPProjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFloatingIPProjectRefRequest{
		CreateFloatingIPProjectRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFloatingIPProjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFloatingIPProjectRefRequest
	if _, err := service.DeleteFloatingIPProjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFloatingIPProjectRefRequest{
		DeleteFloatingIPProjectRefRequest: request,
	}}, nil
}

func (e *Event_CreateFloatingIPVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFloatingIPVirtualMachineInterfaceRefRequest
	if _, err := service.CreateFloatingIPVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFloatingIPVirtualMachineInterfaceRefRequest{
		CreateFloatingIPVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFloatingIPVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFloatingIPVirtualMachineInterfaceRefRequest
	if _, err := service.DeleteFloatingIPVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFloatingIPVirtualMachineInterfaceRefRequest{
		DeleteFloatingIPVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateFloatingIPTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFloatingIPTagRefRequest
	if _, err := service.CreateFloatingIPTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFloatingIPTagRefRequest{
		CreateFloatingIPTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFloatingIPTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFloatingIPTagRefRequest
	if _, err := service.DeleteFloatingIPTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFloatingIPTagRefRequest{
		DeleteFloatingIPTagRefRequest: request,
	}}, nil
}

type FlowNode = models.FlowNode

func (s *BaseService) CreateFlowNode(ctx context.Context, request *CreateFlowNodeRequest) (*CreateFlowNodeResponse, error) {
	if s.next == nil {
		return &CreateFlowNodeResponse{
			FlowNode: request.GetFlowNode(),
		}, nil
	}
	return s.Next().CreateFlowNode(ctx, request)
}
func (s *BaseService) UpdateFlowNode(ctx context.Context, request *UpdateFlowNodeRequest) (*UpdateFlowNodeResponse, error) {
	if s.next == nil {
		return &UpdateFlowNodeResponse{
			FlowNode: request.GetFlowNode(),
		}, nil
	}
	return s.Next().UpdateFlowNode(ctx, request)
}
func (s *BaseService) DeleteFlowNode(ctx context.Context, request *DeleteFlowNodeRequest) (*DeleteFlowNodeResponse, error) {
	if s.next == nil {
		return &DeleteFlowNodeResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteFlowNode(ctx, request)
}
func (s *BaseService) GetFlowNode(ctx context.Context, request *GetFlowNodeRequest) (*GetFlowNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetFlowNode(ctx, request)
}
func (s *BaseService) ListFlowNode(ctx context.Context, request *ListFlowNodeRequest) (*ListFlowNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListFlowNode(ctx, request)
}

func (s *BaseService) CreateFlowNodeTagRef(ctx context.Context, request *CreateFlowNodeTagRefRequest) (*CreateFlowNodeTagRefResponse, error) {
	if s.next == nil {
		return &CreateFlowNodeTagRefResponse{
			ID:             request.ID,
			FlowNodeTagRef: request.GetFlowNodeTagRef(),
		}, nil
	}
	return s.Next().CreateFlowNodeTagRef(ctx, request)
}

func (s *BaseService) DeleteFlowNodeTagRef(ctx context.Context, request *DeleteFlowNodeTagRefRequest) (*DeleteFlowNodeTagRefResponse, error) {
	if s.next == nil {
		return &DeleteFlowNodeTagRefResponse{
			ID:             request.ID,
			FlowNodeTagRef: request.GetFlowNodeTagRef(),
		}, nil
	}
	return s.Next().DeleteFlowNodeTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFlowNodeTagRef(ctx context.Context, request *CreateFlowNodeTagRefRequest) (*CreateFlowNodeTagRefResponse, error) {
	refField := models.FlowNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFlowNode(ctx, &GetFlowNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FlowNode
		obj.AddTagRef(request.FlowNodeTagRef)

		_, err = s.BaseService.UpdateFlowNode(ctx, &UpdateFlowNodeRequest{
			FlowNode:  obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFlowNodeTagRefResponse{
		ID:             request.ID,
		FlowNodeTagRef: request.GetFlowNodeTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFlowNodeTagRef(ctx context.Context, request *DeleteFlowNodeTagRefRequest) (*DeleteFlowNodeTagRefResponse, error) {
	refField := models.FlowNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFlowNode(ctx, &GetFlowNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FlowNode
		obj.RemoveTagRef(request.FlowNodeTagRef)

		_, err = s.BaseService.UpdateFlowNode(ctx, &UpdateFlowNodeRequest{
			FlowNode:  obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFlowNodeTagRefResponse{
		ID:             request.ID,
		FlowNodeTagRef: request.GetFlowNodeTagRef(),
	}, nil
}

func (s *BaseService) CreateFlowNodeVirtualNetworkRef(ctx context.Context, request *CreateFlowNodeVirtualNetworkRefRequest) (*CreateFlowNodeVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &CreateFlowNodeVirtualNetworkRefResponse{
			ID:                        request.ID,
			FlowNodeVirtualNetworkRef: request.GetFlowNodeVirtualNetworkRef(),
		}, nil
	}
	return s.Next().CreateFlowNodeVirtualNetworkRef(ctx, request)
}

func (s *BaseService) DeleteFlowNodeVirtualNetworkRef(ctx context.Context, request *DeleteFlowNodeVirtualNetworkRefRequest) (*DeleteFlowNodeVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &DeleteFlowNodeVirtualNetworkRefResponse{
			ID:                        request.ID,
			FlowNodeVirtualNetworkRef: request.GetFlowNodeVirtualNetworkRef(),
		}, nil
	}
	return s.Next().DeleteFlowNodeVirtualNetworkRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateFlowNodeVirtualNetworkRef(ctx context.Context, request *CreateFlowNodeVirtualNetworkRefRequest) (*CreateFlowNodeVirtualNetworkRefResponse, error) {
	refField := models.FlowNodeFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFlowNode(ctx, &GetFlowNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FlowNode
		obj.AddVirtualNetworkRef(request.FlowNodeVirtualNetworkRef)

		_, err = s.BaseService.UpdateFlowNode(ctx, &UpdateFlowNodeRequest{
			FlowNode:  obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateFlowNodeVirtualNetworkRefResponse{
		ID:                        request.ID,
		FlowNodeVirtualNetworkRef: request.GetFlowNodeVirtualNetworkRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteFlowNodeVirtualNetworkRef(ctx context.Context, request *DeleteFlowNodeVirtualNetworkRefRequest) (*DeleteFlowNodeVirtualNetworkRefResponse, error) {
	refField := models.FlowNodeFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetFlowNode(ctx, &GetFlowNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.FlowNode
		obj.RemoveVirtualNetworkRef(request.FlowNodeVirtualNetworkRef)

		_, err = s.BaseService.UpdateFlowNode(ctx, &UpdateFlowNodeRequest{
			FlowNode:  obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteFlowNodeVirtualNetworkRefResponse{
		ID:                        request.ID,
		FlowNodeVirtualNetworkRef: request.GetFlowNodeVirtualNetworkRef(),
	}, nil
}

func (s *EventProducerService) CreateFlowNode(ctx context.Context, request *CreateFlowNodeRequest) (*CreateFlowNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateFlowNodeRequest{
				CreateFlowNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFlowNode(ctx, request)
}
func (s *EventProducerService) UpdateFlowNode(ctx context.Context, request *UpdateFlowNodeRequest) (*UpdateFlowNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateFlowNodeRequest{
				UpdateFlowNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateFlowNode(ctx, request)
}
func (s *EventProducerService) DeleteFlowNode(ctx context.Context, request *DeleteFlowNodeRequest) (*DeleteFlowNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteFlowNodeRequest{
				DeleteFlowNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFlowNode(ctx, request)
}

func (s *EventProducerService) CreateFlowNodeTagRef(ctx context.Context, request *CreateFlowNodeTagRefRequest) (*CreateFlowNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFlowNodeTagRefRequest{
			CreateFlowNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFlowNodeTagRef(ctx, request)
}

func (s *EventProducerService) DeleteFlowNodeTagRef(ctx context.Context, request *DeleteFlowNodeTagRefRequest) (*DeleteFlowNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFlowNodeTagRefRequest{
			DeleteFlowNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFlowNodeTagRef(ctx, request)
}

func (s *EventProducerService) CreateFlowNodeVirtualNetworkRef(ctx context.Context, request *CreateFlowNodeVirtualNetworkRefRequest) (*CreateFlowNodeVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateFlowNodeVirtualNetworkRefRequest{
			CreateFlowNodeVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateFlowNodeVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) DeleteFlowNodeVirtualNetworkRef(ctx context.Context, request *DeleteFlowNodeVirtualNetworkRefRequest) (*DeleteFlowNodeVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteFlowNodeVirtualNetworkRefRequest{
			DeleteFlowNodeVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteFlowNodeVirtualNetworkRef(ctx, request)
}

func (e *Event_CreateFlowNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFlowNodeRequest
	model := request.FlowNode
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetFlowNode(ctx,
			&GetFlowNodeRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateFlowNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateFlowNodeRequest{
			CreateFlowNodeRequest: &CreateFlowNodeRequest{
				FlowNode: response.GetFlowNode(),
			},
		},
	}, nil
}

func (e *Event_CreateFlowNodeRequest) ToUpdateEvent() *Event {
	request := e.CreateFlowNodeRequest
	model := request.FlowNode
	return &Event{
		Request: &Event_UpdateFlowNodeRequest{
			UpdateFlowNodeRequest: &UpdateFlowNodeRequest{
				FlowNode:  model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateFlowNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateFlowNodeRequest
	response, err := service.UpdateFlowNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateFlowNodeRequest{
			UpdateFlowNodeRequest: &UpdateFlowNodeRequest{
				FlowNode: response.GetFlowNode(),
			},
		},
	}, nil
}

func (e *Event_UpdateFlowNodeRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteFlowNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFlowNodeRequest
	_, err := service.DeleteFlowNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteFlowNodeRequest{
			DeleteFlowNodeRequest: &DeleteFlowNodeRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateFlowNodeVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFlowNodeVirtualNetworkRefRequest
	if _, err := service.CreateFlowNodeVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFlowNodeVirtualNetworkRefRequest{
		CreateFlowNodeVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFlowNodeVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFlowNodeVirtualNetworkRefRequest
	if _, err := service.DeleteFlowNodeVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFlowNodeVirtualNetworkRefRequest{
		DeleteFlowNodeVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_CreateFlowNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateFlowNodeTagRefRequest
	if _, err := service.CreateFlowNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateFlowNodeTagRefRequest{
		CreateFlowNodeTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteFlowNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteFlowNodeTagRefRequest
	if _, err := service.DeleteFlowNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteFlowNodeTagRefRequest{
		DeleteFlowNodeTagRefRequest: request,
	}}, nil
}

type ForwardingClass = models.ForwardingClass

func (s *BaseService) CreateForwardingClass(ctx context.Context, request *CreateForwardingClassRequest) (*CreateForwardingClassResponse, error) {
	if s.next == nil {
		return &CreateForwardingClassResponse{
			ForwardingClass: request.GetForwardingClass(),
		}, nil
	}
	return s.Next().CreateForwardingClass(ctx, request)
}
func (s *BaseService) UpdateForwardingClass(ctx context.Context, request *UpdateForwardingClassRequest) (*UpdateForwardingClassResponse, error) {
	if s.next == nil {
		return &UpdateForwardingClassResponse{
			ForwardingClass: request.GetForwardingClass(),
		}, nil
	}
	return s.Next().UpdateForwardingClass(ctx, request)
}
func (s *BaseService) DeleteForwardingClass(ctx context.Context, request *DeleteForwardingClassRequest) (*DeleteForwardingClassResponse, error) {
	if s.next == nil {
		return &DeleteForwardingClassResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteForwardingClass(ctx, request)
}
func (s *BaseService) GetForwardingClass(ctx context.Context, request *GetForwardingClassRequest) (*GetForwardingClassResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetForwardingClass(ctx, request)
}
func (s *BaseService) ListForwardingClass(ctx context.Context, request *ListForwardingClassRequest) (*ListForwardingClassResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListForwardingClass(ctx, request)
}

func (s *BaseService) CreateForwardingClassQosQueueRef(ctx context.Context, request *CreateForwardingClassQosQueueRefRequest) (*CreateForwardingClassQosQueueRefResponse, error) {
	if s.next == nil {
		return &CreateForwardingClassQosQueueRefResponse{
			ID:                         request.ID,
			ForwardingClassQosQueueRef: request.GetForwardingClassQosQueueRef(),
		}, nil
	}
	return s.Next().CreateForwardingClassQosQueueRef(ctx, request)
}

func (s *BaseService) DeleteForwardingClassQosQueueRef(ctx context.Context, request *DeleteForwardingClassQosQueueRefRequest) (*DeleteForwardingClassQosQueueRefResponse, error) {
	if s.next == nil {
		return &DeleteForwardingClassQosQueueRefResponse{
			ID:                         request.ID,
			ForwardingClassQosQueueRef: request.GetForwardingClassQosQueueRef(),
		}, nil
	}
	return s.Next().DeleteForwardingClassQosQueueRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateForwardingClassQosQueueRef(ctx context.Context, request *CreateForwardingClassQosQueueRefRequest) (*CreateForwardingClassQosQueueRefResponse, error) {
	refField := models.ForwardingClassFieldQosQueueRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetForwardingClass(ctx, &GetForwardingClassRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ForwardingClass
		obj.AddQosQueueRef(request.ForwardingClassQosQueueRef)

		_, err = s.BaseService.UpdateForwardingClass(ctx, &UpdateForwardingClassRequest{
			ForwardingClass: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateForwardingClassQosQueueRefResponse{
		ID:                         request.ID,
		ForwardingClassQosQueueRef: request.GetForwardingClassQosQueueRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteForwardingClassQosQueueRef(ctx context.Context, request *DeleteForwardingClassQosQueueRefRequest) (*DeleteForwardingClassQosQueueRefResponse, error) {
	refField := models.ForwardingClassFieldQosQueueRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetForwardingClass(ctx, &GetForwardingClassRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ForwardingClass
		obj.RemoveQosQueueRef(request.ForwardingClassQosQueueRef)

		_, err = s.BaseService.UpdateForwardingClass(ctx, &UpdateForwardingClassRequest{
			ForwardingClass: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteForwardingClassQosQueueRefResponse{
		ID:                         request.ID,
		ForwardingClassQosQueueRef: request.GetForwardingClassQosQueueRef(),
	}, nil
}

func (s *BaseService) CreateForwardingClassTagRef(ctx context.Context, request *CreateForwardingClassTagRefRequest) (*CreateForwardingClassTagRefResponse, error) {
	if s.next == nil {
		return &CreateForwardingClassTagRefResponse{
			ID:                    request.ID,
			ForwardingClassTagRef: request.GetForwardingClassTagRef(),
		}, nil
	}
	return s.Next().CreateForwardingClassTagRef(ctx, request)
}

func (s *BaseService) DeleteForwardingClassTagRef(ctx context.Context, request *DeleteForwardingClassTagRefRequest) (*DeleteForwardingClassTagRefResponse, error) {
	if s.next == nil {
		return &DeleteForwardingClassTagRefResponse{
			ID:                    request.ID,
			ForwardingClassTagRef: request.GetForwardingClassTagRef(),
		}, nil
	}
	return s.Next().DeleteForwardingClassTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateForwardingClassTagRef(ctx context.Context, request *CreateForwardingClassTagRefRequest) (*CreateForwardingClassTagRefResponse, error) {
	refField := models.ForwardingClassFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetForwardingClass(ctx, &GetForwardingClassRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ForwardingClass
		obj.AddTagRef(request.ForwardingClassTagRef)

		_, err = s.BaseService.UpdateForwardingClass(ctx, &UpdateForwardingClassRequest{
			ForwardingClass: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateForwardingClassTagRefResponse{
		ID:                    request.ID,
		ForwardingClassTagRef: request.GetForwardingClassTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteForwardingClassTagRef(ctx context.Context, request *DeleteForwardingClassTagRefRequest) (*DeleteForwardingClassTagRefResponse, error) {
	refField := models.ForwardingClassFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetForwardingClass(ctx, &GetForwardingClassRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ForwardingClass
		obj.RemoveTagRef(request.ForwardingClassTagRef)

		_, err = s.BaseService.UpdateForwardingClass(ctx, &UpdateForwardingClassRequest{
			ForwardingClass: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteForwardingClassTagRefResponse{
		ID:                    request.ID,
		ForwardingClassTagRef: request.GetForwardingClassTagRef(),
	}, nil
}

func (s *EventProducerService) CreateForwardingClass(ctx context.Context, request *CreateForwardingClassRequest) (*CreateForwardingClassResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateForwardingClassRequest{
				CreateForwardingClassRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateForwardingClass(ctx, request)
}
func (s *EventProducerService) UpdateForwardingClass(ctx context.Context, request *UpdateForwardingClassRequest) (*UpdateForwardingClassResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateForwardingClassRequest{
				UpdateForwardingClassRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateForwardingClass(ctx, request)
}
func (s *EventProducerService) DeleteForwardingClass(ctx context.Context, request *DeleteForwardingClassRequest) (*DeleteForwardingClassResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteForwardingClassRequest{
				DeleteForwardingClassRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteForwardingClass(ctx, request)
}

func (s *EventProducerService) CreateForwardingClassQosQueueRef(ctx context.Context, request *CreateForwardingClassQosQueueRefRequest) (*CreateForwardingClassQosQueueRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateForwardingClassQosQueueRefRequest{
			CreateForwardingClassQosQueueRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateForwardingClassQosQueueRef(ctx, request)
}

func (s *EventProducerService) DeleteForwardingClassQosQueueRef(ctx context.Context, request *DeleteForwardingClassQosQueueRefRequest) (*DeleteForwardingClassQosQueueRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteForwardingClassQosQueueRefRequest{
			DeleteForwardingClassQosQueueRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteForwardingClassQosQueueRef(ctx, request)
}

func (s *EventProducerService) CreateForwardingClassTagRef(ctx context.Context, request *CreateForwardingClassTagRefRequest) (*CreateForwardingClassTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateForwardingClassTagRefRequest{
			CreateForwardingClassTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateForwardingClassTagRef(ctx, request)
}

func (s *EventProducerService) DeleteForwardingClassTagRef(ctx context.Context, request *DeleteForwardingClassTagRefRequest) (*DeleteForwardingClassTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteForwardingClassTagRefRequest{
			DeleteForwardingClassTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteForwardingClassTagRef(ctx, request)
}

func (e *Event_CreateForwardingClassRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateForwardingClassRequest
	model := request.ForwardingClass
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetForwardingClass(ctx,
			&GetForwardingClassRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateForwardingClass(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateForwardingClassRequest{
			CreateForwardingClassRequest: &CreateForwardingClassRequest{
				ForwardingClass: response.GetForwardingClass(),
			},
		},
	}, nil
}

func (e *Event_CreateForwardingClassRequest) ToUpdateEvent() *Event {
	request := e.CreateForwardingClassRequest
	model := request.ForwardingClass
	return &Event{
		Request: &Event_UpdateForwardingClassRequest{
			UpdateForwardingClassRequest: &UpdateForwardingClassRequest{
				ForwardingClass: model,
				FieldMask:       request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateForwardingClassRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateForwardingClassRequest
	response, err := service.UpdateForwardingClass(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateForwardingClassRequest{
			UpdateForwardingClassRequest: &UpdateForwardingClassRequest{
				ForwardingClass: response.GetForwardingClass(),
			},
		},
	}, nil
}

func (e *Event_UpdateForwardingClassRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteForwardingClassRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteForwardingClassRequest
	_, err := service.DeleteForwardingClass(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteForwardingClassRequest{
			DeleteForwardingClassRequest: &DeleteForwardingClassRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateForwardingClassTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateForwardingClassTagRefRequest
	if _, err := service.CreateForwardingClassTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateForwardingClassTagRefRequest{
		CreateForwardingClassTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteForwardingClassTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteForwardingClassTagRefRequest
	if _, err := service.DeleteForwardingClassTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteForwardingClassTagRefRequest{
		DeleteForwardingClassTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateForwardingClassQosQueueRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateForwardingClassQosQueueRefRequest
	if _, err := service.CreateForwardingClassQosQueueRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateForwardingClassQosQueueRefRequest{
		CreateForwardingClassQosQueueRefRequest: request,
	}}, nil
}

func (e *Event_DeleteForwardingClassQosQueueRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteForwardingClassQosQueueRefRequest
	if _, err := service.DeleteForwardingClassQosQueueRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteForwardingClassQosQueueRefRequest{
		DeleteForwardingClassQosQueueRefRequest: request,
	}}, nil
}

type GlobalAnalyticsConfig = models.GlobalAnalyticsConfig

func (s *BaseService) CreateGlobalAnalyticsConfig(ctx context.Context, request *CreateGlobalAnalyticsConfigRequest) (*CreateGlobalAnalyticsConfigResponse, error) {
	if s.next == nil {
		return &CreateGlobalAnalyticsConfigResponse{
			GlobalAnalyticsConfig: request.GetGlobalAnalyticsConfig(),
		}, nil
	}
	return s.Next().CreateGlobalAnalyticsConfig(ctx, request)
}
func (s *BaseService) UpdateGlobalAnalyticsConfig(ctx context.Context, request *UpdateGlobalAnalyticsConfigRequest) (*UpdateGlobalAnalyticsConfigResponse, error) {
	if s.next == nil {
		return &UpdateGlobalAnalyticsConfigResponse{
			GlobalAnalyticsConfig: request.GetGlobalAnalyticsConfig(),
		}, nil
	}
	return s.Next().UpdateGlobalAnalyticsConfig(ctx, request)
}
func (s *BaseService) DeleteGlobalAnalyticsConfig(ctx context.Context, request *DeleteGlobalAnalyticsConfigRequest) (*DeleteGlobalAnalyticsConfigResponse, error) {
	if s.next == nil {
		return &DeleteGlobalAnalyticsConfigResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteGlobalAnalyticsConfig(ctx, request)
}
func (s *BaseService) GetGlobalAnalyticsConfig(ctx context.Context, request *GetGlobalAnalyticsConfigRequest) (*GetGlobalAnalyticsConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetGlobalAnalyticsConfig(ctx, request)
}
func (s *BaseService) ListGlobalAnalyticsConfig(ctx context.Context, request *ListGlobalAnalyticsConfigRequest) (*ListGlobalAnalyticsConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListGlobalAnalyticsConfig(ctx, request)
}

func (s *BaseService) CreateGlobalAnalyticsConfigTagRef(ctx context.Context, request *CreateGlobalAnalyticsConfigTagRefRequest) (*CreateGlobalAnalyticsConfigTagRefResponse, error) {
	if s.next == nil {
		return &CreateGlobalAnalyticsConfigTagRefResponse{
			ID:                          request.ID,
			GlobalAnalyticsConfigTagRef: request.GetGlobalAnalyticsConfigTagRef(),
		}, nil
	}
	return s.Next().CreateGlobalAnalyticsConfigTagRef(ctx, request)
}

func (s *BaseService) DeleteGlobalAnalyticsConfigTagRef(ctx context.Context, request *DeleteGlobalAnalyticsConfigTagRefRequest) (*DeleteGlobalAnalyticsConfigTagRefResponse, error) {
	if s.next == nil {
		return &DeleteGlobalAnalyticsConfigTagRefResponse{
			ID:                          request.ID,
			GlobalAnalyticsConfigTagRef: request.GetGlobalAnalyticsConfigTagRef(),
		}, nil
	}
	return s.Next().DeleteGlobalAnalyticsConfigTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateGlobalAnalyticsConfigTagRef(ctx context.Context, request *CreateGlobalAnalyticsConfigTagRefRequest) (*CreateGlobalAnalyticsConfigTagRefResponse, error) {
	refField := models.GlobalAnalyticsConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetGlobalAnalyticsConfig(ctx, &GetGlobalAnalyticsConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.GlobalAnalyticsConfig
		obj.AddTagRef(request.GlobalAnalyticsConfigTagRef)

		_, err = s.BaseService.UpdateGlobalAnalyticsConfig(ctx, &UpdateGlobalAnalyticsConfigRequest{
			GlobalAnalyticsConfig: obj,
			FieldMask:             types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateGlobalAnalyticsConfigTagRefResponse{
		ID:                          request.ID,
		GlobalAnalyticsConfigTagRef: request.GetGlobalAnalyticsConfigTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteGlobalAnalyticsConfigTagRef(ctx context.Context, request *DeleteGlobalAnalyticsConfigTagRefRequest) (*DeleteGlobalAnalyticsConfigTagRefResponse, error) {
	refField := models.GlobalAnalyticsConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetGlobalAnalyticsConfig(ctx, &GetGlobalAnalyticsConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.GlobalAnalyticsConfig
		obj.RemoveTagRef(request.GlobalAnalyticsConfigTagRef)

		_, err = s.BaseService.UpdateGlobalAnalyticsConfig(ctx, &UpdateGlobalAnalyticsConfigRequest{
			GlobalAnalyticsConfig: obj,
			FieldMask:             types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteGlobalAnalyticsConfigTagRefResponse{
		ID:                          request.ID,
		GlobalAnalyticsConfigTagRef: request.GetGlobalAnalyticsConfigTagRef(),
	}, nil
}

func (s *EventProducerService) CreateGlobalAnalyticsConfig(ctx context.Context, request *CreateGlobalAnalyticsConfigRequest) (*CreateGlobalAnalyticsConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateGlobalAnalyticsConfigRequest{
				CreateGlobalAnalyticsConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateGlobalAnalyticsConfig(ctx, request)
}
func (s *EventProducerService) UpdateGlobalAnalyticsConfig(ctx context.Context, request *UpdateGlobalAnalyticsConfigRequest) (*UpdateGlobalAnalyticsConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateGlobalAnalyticsConfigRequest{
				UpdateGlobalAnalyticsConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateGlobalAnalyticsConfig(ctx, request)
}
func (s *EventProducerService) DeleteGlobalAnalyticsConfig(ctx context.Context, request *DeleteGlobalAnalyticsConfigRequest) (*DeleteGlobalAnalyticsConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteGlobalAnalyticsConfigRequest{
				DeleteGlobalAnalyticsConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteGlobalAnalyticsConfig(ctx, request)
}

func (s *EventProducerService) CreateGlobalAnalyticsConfigTagRef(ctx context.Context, request *CreateGlobalAnalyticsConfigTagRefRequest) (*CreateGlobalAnalyticsConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateGlobalAnalyticsConfigTagRefRequest{
			CreateGlobalAnalyticsConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateGlobalAnalyticsConfigTagRef(ctx, request)
}

func (s *EventProducerService) DeleteGlobalAnalyticsConfigTagRef(ctx context.Context, request *DeleteGlobalAnalyticsConfigTagRefRequest) (*DeleteGlobalAnalyticsConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteGlobalAnalyticsConfigTagRefRequest{
			DeleteGlobalAnalyticsConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteGlobalAnalyticsConfigTagRef(ctx, request)
}

func (e *Event_CreateGlobalAnalyticsConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateGlobalAnalyticsConfigRequest
	model := request.GlobalAnalyticsConfig
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetGlobalAnalyticsConfig(ctx,
			&GetGlobalAnalyticsConfigRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateGlobalAnalyticsConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateGlobalAnalyticsConfigRequest{
			CreateGlobalAnalyticsConfigRequest: &CreateGlobalAnalyticsConfigRequest{
				GlobalAnalyticsConfig: response.GetGlobalAnalyticsConfig(),
			},
		},
	}, nil
}

func (e *Event_CreateGlobalAnalyticsConfigRequest) ToUpdateEvent() *Event {
	request := e.CreateGlobalAnalyticsConfigRequest
	model := request.GlobalAnalyticsConfig
	return &Event{
		Request: &Event_UpdateGlobalAnalyticsConfigRequest{
			UpdateGlobalAnalyticsConfigRequest: &UpdateGlobalAnalyticsConfigRequest{
				GlobalAnalyticsConfig: model,
				FieldMask:             request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateGlobalAnalyticsConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateGlobalAnalyticsConfigRequest
	response, err := service.UpdateGlobalAnalyticsConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateGlobalAnalyticsConfigRequest{
			UpdateGlobalAnalyticsConfigRequest: &UpdateGlobalAnalyticsConfigRequest{
				GlobalAnalyticsConfig: response.GetGlobalAnalyticsConfig(),
			},
		},
	}, nil
}

func (e *Event_UpdateGlobalAnalyticsConfigRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteGlobalAnalyticsConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteGlobalAnalyticsConfigRequest
	_, err := service.DeleteGlobalAnalyticsConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteGlobalAnalyticsConfigRequest{
			DeleteGlobalAnalyticsConfigRequest: &DeleteGlobalAnalyticsConfigRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateGlobalAnalyticsConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateGlobalAnalyticsConfigTagRefRequest
	if _, err := service.CreateGlobalAnalyticsConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateGlobalAnalyticsConfigTagRefRequest{
		CreateGlobalAnalyticsConfigTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteGlobalAnalyticsConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteGlobalAnalyticsConfigTagRefRequest
	if _, err := service.DeleteGlobalAnalyticsConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteGlobalAnalyticsConfigTagRefRequest{
		DeleteGlobalAnalyticsConfigTagRefRequest: request,
	}}, nil
}

type GlobalQosConfig = models.GlobalQosConfig

func (s *BaseService) CreateGlobalQosConfig(ctx context.Context, request *CreateGlobalQosConfigRequest) (*CreateGlobalQosConfigResponse, error) {
	if s.next == nil {
		return &CreateGlobalQosConfigResponse{
			GlobalQosConfig: request.GetGlobalQosConfig(),
		}, nil
	}
	return s.Next().CreateGlobalQosConfig(ctx, request)
}
func (s *BaseService) UpdateGlobalQosConfig(ctx context.Context, request *UpdateGlobalQosConfigRequest) (*UpdateGlobalQosConfigResponse, error) {
	if s.next == nil {
		return &UpdateGlobalQosConfigResponse{
			GlobalQosConfig: request.GetGlobalQosConfig(),
		}, nil
	}
	return s.Next().UpdateGlobalQosConfig(ctx, request)
}
func (s *BaseService) DeleteGlobalQosConfig(ctx context.Context, request *DeleteGlobalQosConfigRequest) (*DeleteGlobalQosConfigResponse, error) {
	if s.next == nil {
		return &DeleteGlobalQosConfigResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteGlobalQosConfig(ctx, request)
}
func (s *BaseService) GetGlobalQosConfig(ctx context.Context, request *GetGlobalQosConfigRequest) (*GetGlobalQosConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetGlobalQosConfig(ctx, request)
}
func (s *BaseService) ListGlobalQosConfig(ctx context.Context, request *ListGlobalQosConfigRequest) (*ListGlobalQosConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListGlobalQosConfig(ctx, request)
}

func (s *BaseService) CreateGlobalQosConfigTagRef(ctx context.Context, request *CreateGlobalQosConfigTagRefRequest) (*CreateGlobalQosConfigTagRefResponse, error) {
	if s.next == nil {
		return &CreateGlobalQosConfigTagRefResponse{
			ID:                    request.ID,
			GlobalQosConfigTagRef: request.GetGlobalQosConfigTagRef(),
		}, nil
	}
	return s.Next().CreateGlobalQosConfigTagRef(ctx, request)
}

func (s *BaseService) DeleteGlobalQosConfigTagRef(ctx context.Context, request *DeleteGlobalQosConfigTagRefRequest) (*DeleteGlobalQosConfigTagRefResponse, error) {
	if s.next == nil {
		return &DeleteGlobalQosConfigTagRefResponse{
			ID:                    request.ID,
			GlobalQosConfigTagRef: request.GetGlobalQosConfigTagRef(),
		}, nil
	}
	return s.Next().DeleteGlobalQosConfigTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateGlobalQosConfigTagRef(ctx context.Context, request *CreateGlobalQosConfigTagRefRequest) (*CreateGlobalQosConfigTagRefResponse, error) {
	refField := models.GlobalQosConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetGlobalQosConfig(ctx, &GetGlobalQosConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.GlobalQosConfig
		obj.AddTagRef(request.GlobalQosConfigTagRef)

		_, err = s.BaseService.UpdateGlobalQosConfig(ctx, &UpdateGlobalQosConfigRequest{
			GlobalQosConfig: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateGlobalQosConfigTagRefResponse{
		ID:                    request.ID,
		GlobalQosConfigTagRef: request.GetGlobalQosConfigTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteGlobalQosConfigTagRef(ctx context.Context, request *DeleteGlobalQosConfigTagRefRequest) (*DeleteGlobalQosConfigTagRefResponse, error) {
	refField := models.GlobalQosConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetGlobalQosConfig(ctx, &GetGlobalQosConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.GlobalQosConfig
		obj.RemoveTagRef(request.GlobalQosConfigTagRef)

		_, err = s.BaseService.UpdateGlobalQosConfig(ctx, &UpdateGlobalQosConfigRequest{
			GlobalQosConfig: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteGlobalQosConfigTagRefResponse{
		ID:                    request.ID,
		GlobalQosConfigTagRef: request.GetGlobalQosConfigTagRef(),
	}, nil
}

func (s *EventProducerService) CreateGlobalQosConfig(ctx context.Context, request *CreateGlobalQosConfigRequest) (*CreateGlobalQosConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateGlobalQosConfigRequest{
				CreateGlobalQosConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateGlobalQosConfig(ctx, request)
}
func (s *EventProducerService) UpdateGlobalQosConfig(ctx context.Context, request *UpdateGlobalQosConfigRequest) (*UpdateGlobalQosConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateGlobalQosConfigRequest{
				UpdateGlobalQosConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateGlobalQosConfig(ctx, request)
}
func (s *EventProducerService) DeleteGlobalQosConfig(ctx context.Context, request *DeleteGlobalQosConfigRequest) (*DeleteGlobalQosConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteGlobalQosConfigRequest{
				DeleteGlobalQosConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteGlobalQosConfig(ctx, request)
}

func (s *EventProducerService) CreateGlobalQosConfigTagRef(ctx context.Context, request *CreateGlobalQosConfigTagRefRequest) (*CreateGlobalQosConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateGlobalQosConfigTagRefRequest{
			CreateGlobalQosConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateGlobalQosConfigTagRef(ctx, request)
}

func (s *EventProducerService) DeleteGlobalQosConfigTagRef(ctx context.Context, request *DeleteGlobalQosConfigTagRefRequest) (*DeleteGlobalQosConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteGlobalQosConfigTagRefRequest{
			DeleteGlobalQosConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteGlobalQosConfigTagRef(ctx, request)
}

func (e *Event_CreateGlobalQosConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateGlobalQosConfigRequest
	model := request.GlobalQosConfig
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetGlobalQosConfig(ctx,
			&GetGlobalQosConfigRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateGlobalQosConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateGlobalQosConfigRequest{
			CreateGlobalQosConfigRequest: &CreateGlobalQosConfigRequest{
				GlobalQosConfig: response.GetGlobalQosConfig(),
			},
		},
	}, nil
}

func (e *Event_CreateGlobalQosConfigRequest) ToUpdateEvent() *Event {
	request := e.CreateGlobalQosConfigRequest
	model := request.GlobalQosConfig
	return &Event{
		Request: &Event_UpdateGlobalQosConfigRequest{
			UpdateGlobalQosConfigRequest: &UpdateGlobalQosConfigRequest{
				GlobalQosConfig: model,
				FieldMask:       request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateGlobalQosConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateGlobalQosConfigRequest
	response, err := service.UpdateGlobalQosConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateGlobalQosConfigRequest{
			UpdateGlobalQosConfigRequest: &UpdateGlobalQosConfigRequest{
				GlobalQosConfig: response.GetGlobalQosConfig(),
			},
		},
	}, nil
}

func (e *Event_UpdateGlobalQosConfigRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteGlobalQosConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteGlobalQosConfigRequest
	_, err := service.DeleteGlobalQosConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteGlobalQosConfigRequest{
			DeleteGlobalQosConfigRequest: &DeleteGlobalQosConfigRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateGlobalQosConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateGlobalQosConfigTagRefRequest
	if _, err := service.CreateGlobalQosConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateGlobalQosConfigTagRefRequest{
		CreateGlobalQosConfigTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteGlobalQosConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteGlobalQosConfigTagRefRequest
	if _, err := service.DeleteGlobalQosConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteGlobalQosConfigTagRefRequest{
		DeleteGlobalQosConfigTagRefRequest: request,
	}}, nil
}

type GlobalSystemConfig = models.GlobalSystemConfig

func (s *BaseService) CreateGlobalSystemConfig(ctx context.Context, request *CreateGlobalSystemConfigRequest) (*CreateGlobalSystemConfigResponse, error) {
	if s.next == nil {
		return &CreateGlobalSystemConfigResponse{
			GlobalSystemConfig: request.GetGlobalSystemConfig(),
		}, nil
	}
	return s.Next().CreateGlobalSystemConfig(ctx, request)
}
func (s *BaseService) UpdateGlobalSystemConfig(ctx context.Context, request *UpdateGlobalSystemConfigRequest) (*UpdateGlobalSystemConfigResponse, error) {
	if s.next == nil {
		return &UpdateGlobalSystemConfigResponse{
			GlobalSystemConfig: request.GetGlobalSystemConfig(),
		}, nil
	}
	return s.Next().UpdateGlobalSystemConfig(ctx, request)
}
func (s *BaseService) DeleteGlobalSystemConfig(ctx context.Context, request *DeleteGlobalSystemConfigRequest) (*DeleteGlobalSystemConfigResponse, error) {
	if s.next == nil {
		return &DeleteGlobalSystemConfigResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteGlobalSystemConfig(ctx, request)
}
func (s *BaseService) GetGlobalSystemConfig(ctx context.Context, request *GetGlobalSystemConfigRequest) (*GetGlobalSystemConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetGlobalSystemConfig(ctx, request)
}
func (s *BaseService) ListGlobalSystemConfig(ctx context.Context, request *ListGlobalSystemConfigRequest) (*ListGlobalSystemConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListGlobalSystemConfig(ctx, request)
}

func (s *BaseService) CreateGlobalSystemConfigBGPRouterRef(ctx context.Context, request *CreateGlobalSystemConfigBGPRouterRefRequest) (*CreateGlobalSystemConfigBGPRouterRefResponse, error) {
	if s.next == nil {
		return &CreateGlobalSystemConfigBGPRouterRefResponse{
			ID:                             request.ID,
			GlobalSystemConfigBGPRouterRef: request.GetGlobalSystemConfigBGPRouterRef(),
		}, nil
	}
	return s.Next().CreateGlobalSystemConfigBGPRouterRef(ctx, request)
}

func (s *BaseService) DeleteGlobalSystemConfigBGPRouterRef(ctx context.Context, request *DeleteGlobalSystemConfigBGPRouterRefRequest) (*DeleteGlobalSystemConfigBGPRouterRefResponse, error) {
	if s.next == nil {
		return &DeleteGlobalSystemConfigBGPRouterRefResponse{
			ID:                             request.ID,
			GlobalSystemConfigBGPRouterRef: request.GetGlobalSystemConfigBGPRouterRef(),
		}, nil
	}
	return s.Next().DeleteGlobalSystemConfigBGPRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateGlobalSystemConfigBGPRouterRef(ctx context.Context, request *CreateGlobalSystemConfigBGPRouterRefRequest) (*CreateGlobalSystemConfigBGPRouterRefResponse, error) {
	refField := models.GlobalSystemConfigFieldBGPRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetGlobalSystemConfig(ctx, &GetGlobalSystemConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.GlobalSystemConfig
		obj.AddBGPRouterRef(request.GlobalSystemConfigBGPRouterRef)

		_, err = s.BaseService.UpdateGlobalSystemConfig(ctx, &UpdateGlobalSystemConfigRequest{
			GlobalSystemConfig: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateGlobalSystemConfigBGPRouterRefResponse{
		ID:                             request.ID,
		GlobalSystemConfigBGPRouterRef: request.GetGlobalSystemConfigBGPRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteGlobalSystemConfigBGPRouterRef(ctx context.Context, request *DeleteGlobalSystemConfigBGPRouterRefRequest) (*DeleteGlobalSystemConfigBGPRouterRefResponse, error) {
	refField := models.GlobalSystemConfigFieldBGPRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetGlobalSystemConfig(ctx, &GetGlobalSystemConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.GlobalSystemConfig
		obj.RemoveBGPRouterRef(request.GlobalSystemConfigBGPRouterRef)

		_, err = s.BaseService.UpdateGlobalSystemConfig(ctx, &UpdateGlobalSystemConfigRequest{
			GlobalSystemConfig: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteGlobalSystemConfigBGPRouterRefResponse{
		ID:                             request.ID,
		GlobalSystemConfigBGPRouterRef: request.GetGlobalSystemConfigBGPRouterRef(),
	}, nil
}

func (s *BaseService) CreateGlobalSystemConfigTagRef(ctx context.Context, request *CreateGlobalSystemConfigTagRefRequest) (*CreateGlobalSystemConfigTagRefResponse, error) {
	if s.next == nil {
		return &CreateGlobalSystemConfigTagRefResponse{
			ID:                       request.ID,
			GlobalSystemConfigTagRef: request.GetGlobalSystemConfigTagRef(),
		}, nil
	}
	return s.Next().CreateGlobalSystemConfigTagRef(ctx, request)
}

func (s *BaseService) DeleteGlobalSystemConfigTagRef(ctx context.Context, request *DeleteGlobalSystemConfigTagRefRequest) (*DeleteGlobalSystemConfigTagRefResponse, error) {
	if s.next == nil {
		return &DeleteGlobalSystemConfigTagRefResponse{
			ID:                       request.ID,
			GlobalSystemConfigTagRef: request.GetGlobalSystemConfigTagRef(),
		}, nil
	}
	return s.Next().DeleteGlobalSystemConfigTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateGlobalSystemConfigTagRef(ctx context.Context, request *CreateGlobalSystemConfigTagRefRequest) (*CreateGlobalSystemConfigTagRefResponse, error) {
	refField := models.GlobalSystemConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetGlobalSystemConfig(ctx, &GetGlobalSystemConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.GlobalSystemConfig
		obj.AddTagRef(request.GlobalSystemConfigTagRef)

		_, err = s.BaseService.UpdateGlobalSystemConfig(ctx, &UpdateGlobalSystemConfigRequest{
			GlobalSystemConfig: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateGlobalSystemConfigTagRefResponse{
		ID:                       request.ID,
		GlobalSystemConfigTagRef: request.GetGlobalSystemConfigTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteGlobalSystemConfigTagRef(ctx context.Context, request *DeleteGlobalSystemConfigTagRefRequest) (*DeleteGlobalSystemConfigTagRefResponse, error) {
	refField := models.GlobalSystemConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetGlobalSystemConfig(ctx, &GetGlobalSystemConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.GlobalSystemConfig
		obj.RemoveTagRef(request.GlobalSystemConfigTagRef)

		_, err = s.BaseService.UpdateGlobalSystemConfig(ctx, &UpdateGlobalSystemConfigRequest{
			GlobalSystemConfig: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteGlobalSystemConfigTagRefResponse{
		ID:                       request.ID,
		GlobalSystemConfigTagRef: request.GetGlobalSystemConfigTagRef(),
	}, nil
}

func (s *EventProducerService) CreateGlobalSystemConfig(ctx context.Context, request *CreateGlobalSystemConfigRequest) (*CreateGlobalSystemConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateGlobalSystemConfigRequest{
				CreateGlobalSystemConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateGlobalSystemConfig(ctx, request)
}
func (s *EventProducerService) UpdateGlobalSystemConfig(ctx context.Context, request *UpdateGlobalSystemConfigRequest) (*UpdateGlobalSystemConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateGlobalSystemConfigRequest{
				UpdateGlobalSystemConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateGlobalSystemConfig(ctx, request)
}
func (s *EventProducerService) DeleteGlobalSystemConfig(ctx context.Context, request *DeleteGlobalSystemConfigRequest) (*DeleteGlobalSystemConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteGlobalSystemConfigRequest{
				DeleteGlobalSystemConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteGlobalSystemConfig(ctx, request)
}

func (s *EventProducerService) CreateGlobalSystemConfigBGPRouterRef(ctx context.Context, request *CreateGlobalSystemConfigBGPRouterRefRequest) (*CreateGlobalSystemConfigBGPRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateGlobalSystemConfigBGPRouterRefRequest{
			CreateGlobalSystemConfigBGPRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateGlobalSystemConfigBGPRouterRef(ctx, request)
}

func (s *EventProducerService) DeleteGlobalSystemConfigBGPRouterRef(ctx context.Context, request *DeleteGlobalSystemConfigBGPRouterRefRequest) (*DeleteGlobalSystemConfigBGPRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteGlobalSystemConfigBGPRouterRefRequest{
			DeleteGlobalSystemConfigBGPRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteGlobalSystemConfigBGPRouterRef(ctx, request)
}

func (s *EventProducerService) CreateGlobalSystemConfigTagRef(ctx context.Context, request *CreateGlobalSystemConfigTagRefRequest) (*CreateGlobalSystemConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateGlobalSystemConfigTagRefRequest{
			CreateGlobalSystemConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateGlobalSystemConfigTagRef(ctx, request)
}

func (s *EventProducerService) DeleteGlobalSystemConfigTagRef(ctx context.Context, request *DeleteGlobalSystemConfigTagRefRequest) (*DeleteGlobalSystemConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteGlobalSystemConfigTagRefRequest{
			DeleteGlobalSystemConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteGlobalSystemConfigTagRef(ctx, request)
}

func (e *Event_CreateGlobalSystemConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateGlobalSystemConfigRequest
	model := request.GlobalSystemConfig
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetGlobalSystemConfig(ctx,
			&GetGlobalSystemConfigRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateGlobalSystemConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateGlobalSystemConfigRequest{
			CreateGlobalSystemConfigRequest: &CreateGlobalSystemConfigRequest{
				GlobalSystemConfig: response.GetGlobalSystemConfig(),
			},
		},
	}, nil
}

func (e *Event_CreateGlobalSystemConfigRequest) ToUpdateEvent() *Event {
	request := e.CreateGlobalSystemConfigRequest
	model := request.GlobalSystemConfig
	return &Event{
		Request: &Event_UpdateGlobalSystemConfigRequest{
			UpdateGlobalSystemConfigRequest: &UpdateGlobalSystemConfigRequest{
				GlobalSystemConfig: model,
				FieldMask:          request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateGlobalSystemConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateGlobalSystemConfigRequest
	response, err := service.UpdateGlobalSystemConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateGlobalSystemConfigRequest{
			UpdateGlobalSystemConfigRequest: &UpdateGlobalSystemConfigRequest{
				GlobalSystemConfig: response.GetGlobalSystemConfig(),
			},
		},
	}, nil
}

func (e *Event_UpdateGlobalSystemConfigRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteGlobalSystemConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteGlobalSystemConfigRequest
	_, err := service.DeleteGlobalSystemConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteGlobalSystemConfigRequest{
			DeleteGlobalSystemConfigRequest: &DeleteGlobalSystemConfigRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateGlobalSystemConfigBGPRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateGlobalSystemConfigBGPRouterRefRequest
	if _, err := service.CreateGlobalSystemConfigBGPRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateGlobalSystemConfigBGPRouterRefRequest{
		CreateGlobalSystemConfigBGPRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeleteGlobalSystemConfigBGPRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteGlobalSystemConfigBGPRouterRefRequest
	if _, err := service.DeleteGlobalSystemConfigBGPRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteGlobalSystemConfigBGPRouterRefRequest{
		DeleteGlobalSystemConfigBGPRouterRefRequest: request,
	}}, nil
}

func (e *Event_CreateGlobalSystemConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateGlobalSystemConfigTagRefRequest
	if _, err := service.CreateGlobalSystemConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateGlobalSystemConfigTagRefRequest{
		CreateGlobalSystemConfigTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteGlobalSystemConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteGlobalSystemConfigTagRefRequest
	if _, err := service.DeleteGlobalSystemConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteGlobalSystemConfigTagRefRequest{
		DeleteGlobalSystemConfigTagRefRequest: request,
	}}, nil
}

type GlobalVrouterConfig = models.GlobalVrouterConfig

func (s *BaseService) CreateGlobalVrouterConfig(ctx context.Context, request *CreateGlobalVrouterConfigRequest) (*CreateGlobalVrouterConfigResponse, error) {
	if s.next == nil {
		return &CreateGlobalVrouterConfigResponse{
			GlobalVrouterConfig: request.GetGlobalVrouterConfig(),
		}, nil
	}
	return s.Next().CreateGlobalVrouterConfig(ctx, request)
}
func (s *BaseService) UpdateGlobalVrouterConfig(ctx context.Context, request *UpdateGlobalVrouterConfigRequest) (*UpdateGlobalVrouterConfigResponse, error) {
	if s.next == nil {
		return &UpdateGlobalVrouterConfigResponse{
			GlobalVrouterConfig: request.GetGlobalVrouterConfig(),
		}, nil
	}
	return s.Next().UpdateGlobalVrouterConfig(ctx, request)
}
func (s *BaseService) DeleteGlobalVrouterConfig(ctx context.Context, request *DeleteGlobalVrouterConfigRequest) (*DeleteGlobalVrouterConfigResponse, error) {
	if s.next == nil {
		return &DeleteGlobalVrouterConfigResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteGlobalVrouterConfig(ctx, request)
}
func (s *BaseService) GetGlobalVrouterConfig(ctx context.Context, request *GetGlobalVrouterConfigRequest) (*GetGlobalVrouterConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetGlobalVrouterConfig(ctx, request)
}
func (s *BaseService) ListGlobalVrouterConfig(ctx context.Context, request *ListGlobalVrouterConfigRequest) (*ListGlobalVrouterConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListGlobalVrouterConfig(ctx, request)
}

func (s *BaseService) CreateGlobalVrouterConfigTagRef(ctx context.Context, request *CreateGlobalVrouterConfigTagRefRequest) (*CreateGlobalVrouterConfigTagRefResponse, error) {
	if s.next == nil {
		return &CreateGlobalVrouterConfigTagRefResponse{
			ID:                        request.ID,
			GlobalVrouterConfigTagRef: request.GetGlobalVrouterConfigTagRef(),
		}, nil
	}
	return s.Next().CreateGlobalVrouterConfigTagRef(ctx, request)
}

func (s *BaseService) DeleteGlobalVrouterConfigTagRef(ctx context.Context, request *DeleteGlobalVrouterConfigTagRefRequest) (*DeleteGlobalVrouterConfigTagRefResponse, error) {
	if s.next == nil {
		return &DeleteGlobalVrouterConfigTagRefResponse{
			ID:                        request.ID,
			GlobalVrouterConfigTagRef: request.GetGlobalVrouterConfigTagRef(),
		}, nil
	}
	return s.Next().DeleteGlobalVrouterConfigTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateGlobalVrouterConfigTagRef(ctx context.Context, request *CreateGlobalVrouterConfigTagRefRequest) (*CreateGlobalVrouterConfigTagRefResponse, error) {
	refField := models.GlobalVrouterConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetGlobalVrouterConfig(ctx, &GetGlobalVrouterConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.GlobalVrouterConfig
		obj.AddTagRef(request.GlobalVrouterConfigTagRef)

		_, err = s.BaseService.UpdateGlobalVrouterConfig(ctx, &UpdateGlobalVrouterConfigRequest{
			GlobalVrouterConfig: obj,
			FieldMask:           types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateGlobalVrouterConfigTagRefResponse{
		ID:                        request.ID,
		GlobalVrouterConfigTagRef: request.GetGlobalVrouterConfigTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteGlobalVrouterConfigTagRef(ctx context.Context, request *DeleteGlobalVrouterConfigTagRefRequest) (*DeleteGlobalVrouterConfigTagRefResponse, error) {
	refField := models.GlobalVrouterConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetGlobalVrouterConfig(ctx, &GetGlobalVrouterConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.GlobalVrouterConfig
		obj.RemoveTagRef(request.GlobalVrouterConfigTagRef)

		_, err = s.BaseService.UpdateGlobalVrouterConfig(ctx, &UpdateGlobalVrouterConfigRequest{
			GlobalVrouterConfig: obj,
			FieldMask:           types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteGlobalVrouterConfigTagRefResponse{
		ID:                        request.ID,
		GlobalVrouterConfigTagRef: request.GetGlobalVrouterConfigTagRef(),
	}, nil
}

func (s *EventProducerService) CreateGlobalVrouterConfig(ctx context.Context, request *CreateGlobalVrouterConfigRequest) (*CreateGlobalVrouterConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateGlobalVrouterConfigRequest{
				CreateGlobalVrouterConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateGlobalVrouterConfig(ctx, request)
}
func (s *EventProducerService) UpdateGlobalVrouterConfig(ctx context.Context, request *UpdateGlobalVrouterConfigRequest) (*UpdateGlobalVrouterConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateGlobalVrouterConfigRequest{
				UpdateGlobalVrouterConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateGlobalVrouterConfig(ctx, request)
}
func (s *EventProducerService) DeleteGlobalVrouterConfig(ctx context.Context, request *DeleteGlobalVrouterConfigRequest) (*DeleteGlobalVrouterConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteGlobalVrouterConfigRequest{
				DeleteGlobalVrouterConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteGlobalVrouterConfig(ctx, request)
}

func (s *EventProducerService) CreateGlobalVrouterConfigTagRef(ctx context.Context, request *CreateGlobalVrouterConfigTagRefRequest) (*CreateGlobalVrouterConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateGlobalVrouterConfigTagRefRequest{
			CreateGlobalVrouterConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateGlobalVrouterConfigTagRef(ctx, request)
}

func (s *EventProducerService) DeleteGlobalVrouterConfigTagRef(ctx context.Context, request *DeleteGlobalVrouterConfigTagRefRequest) (*DeleteGlobalVrouterConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteGlobalVrouterConfigTagRefRequest{
			DeleteGlobalVrouterConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteGlobalVrouterConfigTagRef(ctx, request)
}

func (e *Event_CreateGlobalVrouterConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateGlobalVrouterConfigRequest
	model := request.GlobalVrouterConfig
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetGlobalVrouterConfig(ctx,
			&GetGlobalVrouterConfigRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateGlobalVrouterConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateGlobalVrouterConfigRequest{
			CreateGlobalVrouterConfigRequest: &CreateGlobalVrouterConfigRequest{
				GlobalVrouterConfig: response.GetGlobalVrouterConfig(),
			},
		},
	}, nil
}

func (e *Event_CreateGlobalVrouterConfigRequest) ToUpdateEvent() *Event {
	request := e.CreateGlobalVrouterConfigRequest
	model := request.GlobalVrouterConfig
	return &Event{
		Request: &Event_UpdateGlobalVrouterConfigRequest{
			UpdateGlobalVrouterConfigRequest: &UpdateGlobalVrouterConfigRequest{
				GlobalVrouterConfig: model,
				FieldMask:           request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateGlobalVrouterConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateGlobalVrouterConfigRequest
	response, err := service.UpdateGlobalVrouterConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateGlobalVrouterConfigRequest{
			UpdateGlobalVrouterConfigRequest: &UpdateGlobalVrouterConfigRequest{
				GlobalVrouterConfig: response.GetGlobalVrouterConfig(),
			},
		},
	}, nil
}

func (e *Event_UpdateGlobalVrouterConfigRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteGlobalVrouterConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteGlobalVrouterConfigRequest
	_, err := service.DeleteGlobalVrouterConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteGlobalVrouterConfigRequest{
			DeleteGlobalVrouterConfigRequest: &DeleteGlobalVrouterConfigRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateGlobalVrouterConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateGlobalVrouterConfigTagRefRequest
	if _, err := service.CreateGlobalVrouterConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateGlobalVrouterConfigTagRefRequest{
		CreateGlobalVrouterConfigTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteGlobalVrouterConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteGlobalVrouterConfigTagRefRequest
	if _, err := service.DeleteGlobalVrouterConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteGlobalVrouterConfigTagRefRequest{
		DeleteGlobalVrouterConfigTagRefRequest: request,
	}}, nil
}

type HardwareInventory = models.HardwareInventory

func (s *BaseService) CreateHardwareInventory(ctx context.Context, request *CreateHardwareInventoryRequest) (*CreateHardwareInventoryResponse, error) {
	if s.next == nil {
		return &CreateHardwareInventoryResponse{
			HardwareInventory: request.GetHardwareInventory(),
		}, nil
	}
	return s.Next().CreateHardwareInventory(ctx, request)
}
func (s *BaseService) UpdateHardwareInventory(ctx context.Context, request *UpdateHardwareInventoryRequest) (*UpdateHardwareInventoryResponse, error) {
	if s.next == nil {
		return &UpdateHardwareInventoryResponse{
			HardwareInventory: request.GetHardwareInventory(),
		}, nil
	}
	return s.Next().UpdateHardwareInventory(ctx, request)
}
func (s *BaseService) DeleteHardwareInventory(ctx context.Context, request *DeleteHardwareInventoryRequest) (*DeleteHardwareInventoryResponse, error) {
	if s.next == nil {
		return &DeleteHardwareInventoryResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteHardwareInventory(ctx, request)
}
func (s *BaseService) GetHardwareInventory(ctx context.Context, request *GetHardwareInventoryRequest) (*GetHardwareInventoryResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetHardwareInventory(ctx, request)
}
func (s *BaseService) ListHardwareInventory(ctx context.Context, request *ListHardwareInventoryRequest) (*ListHardwareInventoryResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListHardwareInventory(ctx, request)
}

func (s *BaseService) CreateHardwareInventoryTagRef(ctx context.Context, request *CreateHardwareInventoryTagRefRequest) (*CreateHardwareInventoryTagRefResponse, error) {
	if s.next == nil {
		return &CreateHardwareInventoryTagRefResponse{
			ID:                      request.ID,
			HardwareInventoryTagRef: request.GetHardwareInventoryTagRef(),
		}, nil
	}
	return s.Next().CreateHardwareInventoryTagRef(ctx, request)
}

func (s *BaseService) DeleteHardwareInventoryTagRef(ctx context.Context, request *DeleteHardwareInventoryTagRefRequest) (*DeleteHardwareInventoryTagRefResponse, error) {
	if s.next == nil {
		return &DeleteHardwareInventoryTagRefResponse{
			ID:                      request.ID,
			HardwareInventoryTagRef: request.GetHardwareInventoryTagRef(),
		}, nil
	}
	return s.Next().DeleteHardwareInventoryTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateHardwareInventoryTagRef(ctx context.Context, request *CreateHardwareInventoryTagRefRequest) (*CreateHardwareInventoryTagRefResponse, error) {
	refField := models.HardwareInventoryFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetHardwareInventory(ctx, &GetHardwareInventoryRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.HardwareInventory
		obj.AddTagRef(request.HardwareInventoryTagRef)

		_, err = s.BaseService.UpdateHardwareInventory(ctx, &UpdateHardwareInventoryRequest{
			HardwareInventory: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateHardwareInventoryTagRefResponse{
		ID:                      request.ID,
		HardwareInventoryTagRef: request.GetHardwareInventoryTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteHardwareInventoryTagRef(ctx context.Context, request *DeleteHardwareInventoryTagRefRequest) (*DeleteHardwareInventoryTagRefResponse, error) {
	refField := models.HardwareInventoryFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetHardwareInventory(ctx, &GetHardwareInventoryRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.HardwareInventory
		obj.RemoveTagRef(request.HardwareInventoryTagRef)

		_, err = s.BaseService.UpdateHardwareInventory(ctx, &UpdateHardwareInventoryRequest{
			HardwareInventory: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteHardwareInventoryTagRefResponse{
		ID:                      request.ID,
		HardwareInventoryTagRef: request.GetHardwareInventoryTagRef(),
	}, nil
}

func (s *EventProducerService) CreateHardwareInventory(ctx context.Context, request *CreateHardwareInventoryRequest) (*CreateHardwareInventoryResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateHardwareInventoryRequest{
				CreateHardwareInventoryRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateHardwareInventory(ctx, request)
}
func (s *EventProducerService) UpdateHardwareInventory(ctx context.Context, request *UpdateHardwareInventoryRequest) (*UpdateHardwareInventoryResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateHardwareInventoryRequest{
				UpdateHardwareInventoryRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateHardwareInventory(ctx, request)
}
func (s *EventProducerService) DeleteHardwareInventory(ctx context.Context, request *DeleteHardwareInventoryRequest) (*DeleteHardwareInventoryResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteHardwareInventoryRequest{
				DeleteHardwareInventoryRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteHardwareInventory(ctx, request)
}

func (s *EventProducerService) CreateHardwareInventoryTagRef(ctx context.Context, request *CreateHardwareInventoryTagRefRequest) (*CreateHardwareInventoryTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateHardwareInventoryTagRefRequest{
			CreateHardwareInventoryTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateHardwareInventoryTagRef(ctx, request)
}

func (s *EventProducerService) DeleteHardwareInventoryTagRef(ctx context.Context, request *DeleteHardwareInventoryTagRefRequest) (*DeleteHardwareInventoryTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteHardwareInventoryTagRefRequest{
			DeleteHardwareInventoryTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteHardwareInventoryTagRef(ctx, request)
}

func (e *Event_CreateHardwareInventoryRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateHardwareInventoryRequest
	model := request.HardwareInventory
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetHardwareInventory(ctx,
			&GetHardwareInventoryRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateHardwareInventory(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateHardwareInventoryRequest{
			CreateHardwareInventoryRequest: &CreateHardwareInventoryRequest{
				HardwareInventory: response.GetHardwareInventory(),
			},
		},
	}, nil
}

func (e *Event_CreateHardwareInventoryRequest) ToUpdateEvent() *Event {
	request := e.CreateHardwareInventoryRequest
	model := request.HardwareInventory
	return &Event{
		Request: &Event_UpdateHardwareInventoryRequest{
			UpdateHardwareInventoryRequest: &UpdateHardwareInventoryRequest{
				HardwareInventory: model,
				FieldMask:         request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateHardwareInventoryRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateHardwareInventoryRequest
	response, err := service.UpdateHardwareInventory(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateHardwareInventoryRequest{
			UpdateHardwareInventoryRequest: &UpdateHardwareInventoryRequest{
				HardwareInventory: response.GetHardwareInventory(),
			},
		},
	}, nil
}

func (e *Event_UpdateHardwareInventoryRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteHardwareInventoryRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteHardwareInventoryRequest
	_, err := service.DeleteHardwareInventory(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteHardwareInventoryRequest{
			DeleteHardwareInventoryRequest: &DeleteHardwareInventoryRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateHardwareInventoryTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateHardwareInventoryTagRefRequest
	if _, err := service.CreateHardwareInventoryTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateHardwareInventoryTagRefRequest{
		CreateHardwareInventoryTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteHardwareInventoryTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteHardwareInventoryTagRefRequest
	if _, err := service.DeleteHardwareInventoryTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteHardwareInventoryTagRefRequest{
		DeleteHardwareInventoryTagRefRequest: request,
	}}, nil
}

type Hardware = models.Hardware

func (s *BaseService) CreateHardware(ctx context.Context, request *CreateHardwareRequest) (*CreateHardwareResponse, error) {
	if s.next == nil {
		return &CreateHardwareResponse{
			Hardware: request.GetHardware(),
		}, nil
	}
	return s.Next().CreateHardware(ctx, request)
}
func (s *BaseService) UpdateHardware(ctx context.Context, request *UpdateHardwareRequest) (*UpdateHardwareResponse, error) {
	if s.next == nil {
		return &UpdateHardwareResponse{
			Hardware: request.GetHardware(),
		}, nil
	}
	return s.Next().UpdateHardware(ctx, request)
}
func (s *BaseService) DeleteHardware(ctx context.Context, request *DeleteHardwareRequest) (*DeleteHardwareResponse, error) {
	if s.next == nil {
		return &DeleteHardwareResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteHardware(ctx, request)
}
func (s *BaseService) GetHardware(ctx context.Context, request *GetHardwareRequest) (*GetHardwareResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetHardware(ctx, request)
}
func (s *BaseService) ListHardware(ctx context.Context, request *ListHardwareRequest) (*ListHardwareResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListHardware(ctx, request)
}

func (s *BaseService) CreateHardwareCardRef(ctx context.Context, request *CreateHardwareCardRefRequest) (*CreateHardwareCardRefResponse, error) {
	if s.next == nil {
		return &CreateHardwareCardRefResponse{
			ID:              request.ID,
			HardwareCardRef: request.GetHardwareCardRef(),
		}, nil
	}
	return s.Next().CreateHardwareCardRef(ctx, request)
}

func (s *BaseService) DeleteHardwareCardRef(ctx context.Context, request *DeleteHardwareCardRefRequest) (*DeleteHardwareCardRefResponse, error) {
	if s.next == nil {
		return &DeleteHardwareCardRefResponse{
			ID:              request.ID,
			HardwareCardRef: request.GetHardwareCardRef(),
		}, nil
	}
	return s.Next().DeleteHardwareCardRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateHardwareCardRef(ctx context.Context, request *CreateHardwareCardRefRequest) (*CreateHardwareCardRefResponse, error) {
	refField := models.HardwareFieldCardRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetHardware(ctx, &GetHardwareRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Hardware
		obj.AddCardRef(request.HardwareCardRef)

		_, err = s.BaseService.UpdateHardware(ctx, &UpdateHardwareRequest{
			Hardware:  obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateHardwareCardRefResponse{
		ID:              request.ID,
		HardwareCardRef: request.GetHardwareCardRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteHardwareCardRef(ctx context.Context, request *DeleteHardwareCardRefRequest) (*DeleteHardwareCardRefResponse, error) {
	refField := models.HardwareFieldCardRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetHardware(ctx, &GetHardwareRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Hardware
		obj.RemoveCardRef(request.HardwareCardRef)

		_, err = s.BaseService.UpdateHardware(ctx, &UpdateHardwareRequest{
			Hardware:  obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteHardwareCardRefResponse{
		ID:              request.ID,
		HardwareCardRef: request.GetHardwareCardRef(),
	}, nil
}

func (s *BaseService) CreateHardwareTagRef(ctx context.Context, request *CreateHardwareTagRefRequest) (*CreateHardwareTagRefResponse, error) {
	if s.next == nil {
		return &CreateHardwareTagRefResponse{
			ID:             request.ID,
			HardwareTagRef: request.GetHardwareTagRef(),
		}, nil
	}
	return s.Next().CreateHardwareTagRef(ctx, request)
}

func (s *BaseService) DeleteHardwareTagRef(ctx context.Context, request *DeleteHardwareTagRefRequest) (*DeleteHardwareTagRefResponse, error) {
	if s.next == nil {
		return &DeleteHardwareTagRefResponse{
			ID:             request.ID,
			HardwareTagRef: request.GetHardwareTagRef(),
		}, nil
	}
	return s.Next().DeleteHardwareTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateHardwareTagRef(ctx context.Context, request *CreateHardwareTagRefRequest) (*CreateHardwareTagRefResponse, error) {
	refField := models.HardwareFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetHardware(ctx, &GetHardwareRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Hardware
		obj.AddTagRef(request.HardwareTagRef)

		_, err = s.BaseService.UpdateHardware(ctx, &UpdateHardwareRequest{
			Hardware:  obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateHardwareTagRefResponse{
		ID:             request.ID,
		HardwareTagRef: request.GetHardwareTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteHardwareTagRef(ctx context.Context, request *DeleteHardwareTagRefRequest) (*DeleteHardwareTagRefResponse, error) {
	refField := models.HardwareFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetHardware(ctx, &GetHardwareRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Hardware
		obj.RemoveTagRef(request.HardwareTagRef)

		_, err = s.BaseService.UpdateHardware(ctx, &UpdateHardwareRequest{
			Hardware:  obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteHardwareTagRefResponse{
		ID:             request.ID,
		HardwareTagRef: request.GetHardwareTagRef(),
	}, nil
}

func (s *EventProducerService) CreateHardware(ctx context.Context, request *CreateHardwareRequest) (*CreateHardwareResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateHardwareRequest{
				CreateHardwareRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateHardware(ctx, request)
}
func (s *EventProducerService) UpdateHardware(ctx context.Context, request *UpdateHardwareRequest) (*UpdateHardwareResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateHardwareRequest{
				UpdateHardwareRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateHardware(ctx, request)
}
func (s *EventProducerService) DeleteHardware(ctx context.Context, request *DeleteHardwareRequest) (*DeleteHardwareResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteHardwareRequest{
				DeleteHardwareRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteHardware(ctx, request)
}

func (s *EventProducerService) CreateHardwareCardRef(ctx context.Context, request *CreateHardwareCardRefRequest) (*CreateHardwareCardRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateHardwareCardRefRequest{
			CreateHardwareCardRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateHardwareCardRef(ctx, request)
}

func (s *EventProducerService) DeleteHardwareCardRef(ctx context.Context, request *DeleteHardwareCardRefRequest) (*DeleteHardwareCardRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteHardwareCardRefRequest{
			DeleteHardwareCardRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteHardwareCardRef(ctx, request)
}

func (s *EventProducerService) CreateHardwareTagRef(ctx context.Context, request *CreateHardwareTagRefRequest) (*CreateHardwareTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateHardwareTagRefRequest{
			CreateHardwareTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateHardwareTagRef(ctx, request)
}

func (s *EventProducerService) DeleteHardwareTagRef(ctx context.Context, request *DeleteHardwareTagRefRequest) (*DeleteHardwareTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteHardwareTagRefRequest{
			DeleteHardwareTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteHardwareTagRef(ctx, request)
}

func (e *Event_CreateHardwareRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateHardwareRequest
	model := request.Hardware
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetHardware(ctx,
			&GetHardwareRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateHardware(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateHardwareRequest{
			CreateHardwareRequest: &CreateHardwareRequest{
				Hardware: response.GetHardware(),
			},
		},
	}, nil
}

func (e *Event_CreateHardwareRequest) ToUpdateEvent() *Event {
	request := e.CreateHardwareRequest
	model := request.Hardware
	return &Event{
		Request: &Event_UpdateHardwareRequest{
			UpdateHardwareRequest: &UpdateHardwareRequest{
				Hardware:  model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateHardwareRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateHardwareRequest
	response, err := service.UpdateHardware(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateHardwareRequest{
			UpdateHardwareRequest: &UpdateHardwareRequest{
				Hardware: response.GetHardware(),
			},
		},
	}, nil
}

func (e *Event_UpdateHardwareRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteHardwareRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteHardwareRequest
	_, err := service.DeleteHardware(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteHardwareRequest{
			DeleteHardwareRequest: &DeleteHardwareRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateHardwareTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateHardwareTagRefRequest
	if _, err := service.CreateHardwareTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateHardwareTagRefRequest{
		CreateHardwareTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteHardwareTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteHardwareTagRefRequest
	if _, err := service.DeleteHardwareTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteHardwareTagRefRequest{
		DeleteHardwareTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateHardwareCardRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateHardwareCardRefRequest
	if _, err := service.CreateHardwareCardRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateHardwareCardRefRequest{
		CreateHardwareCardRefRequest: request,
	}}, nil
}

func (e *Event_DeleteHardwareCardRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteHardwareCardRefRequest
	if _, err := service.DeleteHardwareCardRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteHardwareCardRefRequest{
		DeleteHardwareCardRefRequest: request,
	}}, nil
}

type HostBasedService = models.HostBasedService

func (s *BaseService) CreateHostBasedService(ctx context.Context, request *CreateHostBasedServiceRequest) (*CreateHostBasedServiceResponse, error) {
	if s.next == nil {
		return &CreateHostBasedServiceResponse{
			HostBasedService: request.GetHostBasedService(),
		}, nil
	}
	return s.Next().CreateHostBasedService(ctx, request)
}
func (s *BaseService) UpdateHostBasedService(ctx context.Context, request *UpdateHostBasedServiceRequest) (*UpdateHostBasedServiceResponse, error) {
	if s.next == nil {
		return &UpdateHostBasedServiceResponse{
			HostBasedService: request.GetHostBasedService(),
		}, nil
	}
	return s.Next().UpdateHostBasedService(ctx, request)
}
func (s *BaseService) DeleteHostBasedService(ctx context.Context, request *DeleteHostBasedServiceRequest) (*DeleteHostBasedServiceResponse, error) {
	if s.next == nil {
		return &DeleteHostBasedServiceResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteHostBasedService(ctx, request)
}
func (s *BaseService) GetHostBasedService(ctx context.Context, request *GetHostBasedServiceRequest) (*GetHostBasedServiceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetHostBasedService(ctx, request)
}
func (s *BaseService) ListHostBasedService(ctx context.Context, request *ListHostBasedServiceRequest) (*ListHostBasedServiceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListHostBasedService(ctx, request)
}

func (s *BaseService) CreateHostBasedServiceVirtualNetworkRef(ctx context.Context, request *CreateHostBasedServiceVirtualNetworkRefRequest) (*CreateHostBasedServiceVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &CreateHostBasedServiceVirtualNetworkRefResponse{
			ID:                                request.ID,
			HostBasedServiceVirtualNetworkRef: request.GetHostBasedServiceVirtualNetworkRef(),
		}, nil
	}
	return s.Next().CreateHostBasedServiceVirtualNetworkRef(ctx, request)
}

func (s *BaseService) DeleteHostBasedServiceVirtualNetworkRef(ctx context.Context, request *DeleteHostBasedServiceVirtualNetworkRefRequest) (*DeleteHostBasedServiceVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &DeleteHostBasedServiceVirtualNetworkRefResponse{
			ID:                                request.ID,
			HostBasedServiceVirtualNetworkRef: request.GetHostBasedServiceVirtualNetworkRef(),
		}, nil
	}
	return s.Next().DeleteHostBasedServiceVirtualNetworkRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateHostBasedServiceVirtualNetworkRef(ctx context.Context, request *CreateHostBasedServiceVirtualNetworkRefRequest) (*CreateHostBasedServiceVirtualNetworkRefResponse, error) {
	refField := models.HostBasedServiceFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetHostBasedService(ctx, &GetHostBasedServiceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.HostBasedService
		obj.AddVirtualNetworkRef(request.HostBasedServiceVirtualNetworkRef)

		_, err = s.BaseService.UpdateHostBasedService(ctx, &UpdateHostBasedServiceRequest{
			HostBasedService: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateHostBasedServiceVirtualNetworkRefResponse{
		ID:                                request.ID,
		HostBasedServiceVirtualNetworkRef: request.GetHostBasedServiceVirtualNetworkRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteHostBasedServiceVirtualNetworkRef(ctx context.Context, request *DeleteHostBasedServiceVirtualNetworkRefRequest) (*DeleteHostBasedServiceVirtualNetworkRefResponse, error) {
	refField := models.HostBasedServiceFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetHostBasedService(ctx, &GetHostBasedServiceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.HostBasedService
		obj.RemoveVirtualNetworkRef(request.HostBasedServiceVirtualNetworkRef)

		_, err = s.BaseService.UpdateHostBasedService(ctx, &UpdateHostBasedServiceRequest{
			HostBasedService: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteHostBasedServiceVirtualNetworkRefResponse{
		ID:                                request.ID,
		HostBasedServiceVirtualNetworkRef: request.GetHostBasedServiceVirtualNetworkRef(),
	}, nil
}

func (s *BaseService) CreateHostBasedServiceTagRef(ctx context.Context, request *CreateHostBasedServiceTagRefRequest) (*CreateHostBasedServiceTagRefResponse, error) {
	if s.next == nil {
		return &CreateHostBasedServiceTagRefResponse{
			ID:                     request.ID,
			HostBasedServiceTagRef: request.GetHostBasedServiceTagRef(),
		}, nil
	}
	return s.Next().CreateHostBasedServiceTagRef(ctx, request)
}

func (s *BaseService) DeleteHostBasedServiceTagRef(ctx context.Context, request *DeleteHostBasedServiceTagRefRequest) (*DeleteHostBasedServiceTagRefResponse, error) {
	if s.next == nil {
		return &DeleteHostBasedServiceTagRefResponse{
			ID:                     request.ID,
			HostBasedServiceTagRef: request.GetHostBasedServiceTagRef(),
		}, nil
	}
	return s.Next().DeleteHostBasedServiceTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateHostBasedServiceTagRef(ctx context.Context, request *CreateHostBasedServiceTagRefRequest) (*CreateHostBasedServiceTagRefResponse, error) {
	refField := models.HostBasedServiceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetHostBasedService(ctx, &GetHostBasedServiceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.HostBasedService
		obj.AddTagRef(request.HostBasedServiceTagRef)

		_, err = s.BaseService.UpdateHostBasedService(ctx, &UpdateHostBasedServiceRequest{
			HostBasedService: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateHostBasedServiceTagRefResponse{
		ID:                     request.ID,
		HostBasedServiceTagRef: request.GetHostBasedServiceTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteHostBasedServiceTagRef(ctx context.Context, request *DeleteHostBasedServiceTagRefRequest) (*DeleteHostBasedServiceTagRefResponse, error) {
	refField := models.HostBasedServiceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetHostBasedService(ctx, &GetHostBasedServiceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.HostBasedService
		obj.RemoveTagRef(request.HostBasedServiceTagRef)

		_, err = s.BaseService.UpdateHostBasedService(ctx, &UpdateHostBasedServiceRequest{
			HostBasedService: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteHostBasedServiceTagRefResponse{
		ID:                     request.ID,
		HostBasedServiceTagRef: request.GetHostBasedServiceTagRef(),
	}, nil
}

func (s *EventProducerService) CreateHostBasedService(ctx context.Context, request *CreateHostBasedServiceRequest) (*CreateHostBasedServiceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateHostBasedServiceRequest{
				CreateHostBasedServiceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateHostBasedService(ctx, request)
}
func (s *EventProducerService) UpdateHostBasedService(ctx context.Context, request *UpdateHostBasedServiceRequest) (*UpdateHostBasedServiceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateHostBasedServiceRequest{
				UpdateHostBasedServiceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateHostBasedService(ctx, request)
}
func (s *EventProducerService) DeleteHostBasedService(ctx context.Context, request *DeleteHostBasedServiceRequest) (*DeleteHostBasedServiceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteHostBasedServiceRequest{
				DeleteHostBasedServiceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteHostBasedService(ctx, request)
}

func (s *EventProducerService) CreateHostBasedServiceVirtualNetworkRef(ctx context.Context, request *CreateHostBasedServiceVirtualNetworkRefRequest) (*CreateHostBasedServiceVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateHostBasedServiceVirtualNetworkRefRequest{
			CreateHostBasedServiceVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateHostBasedServiceVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) DeleteHostBasedServiceVirtualNetworkRef(ctx context.Context, request *DeleteHostBasedServiceVirtualNetworkRefRequest) (*DeleteHostBasedServiceVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteHostBasedServiceVirtualNetworkRefRequest{
			DeleteHostBasedServiceVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteHostBasedServiceVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) CreateHostBasedServiceTagRef(ctx context.Context, request *CreateHostBasedServiceTagRefRequest) (*CreateHostBasedServiceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateHostBasedServiceTagRefRequest{
			CreateHostBasedServiceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateHostBasedServiceTagRef(ctx, request)
}

func (s *EventProducerService) DeleteHostBasedServiceTagRef(ctx context.Context, request *DeleteHostBasedServiceTagRefRequest) (*DeleteHostBasedServiceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteHostBasedServiceTagRefRequest{
			DeleteHostBasedServiceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteHostBasedServiceTagRef(ctx, request)
}

func (e *Event_CreateHostBasedServiceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateHostBasedServiceRequest
	model := request.HostBasedService
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetHostBasedService(ctx,
			&GetHostBasedServiceRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateHostBasedService(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateHostBasedServiceRequest{
			CreateHostBasedServiceRequest: &CreateHostBasedServiceRequest{
				HostBasedService: response.GetHostBasedService(),
			},
		},
	}, nil
}

func (e *Event_CreateHostBasedServiceRequest) ToUpdateEvent() *Event {
	request := e.CreateHostBasedServiceRequest
	model := request.HostBasedService
	return &Event{
		Request: &Event_UpdateHostBasedServiceRequest{
			UpdateHostBasedServiceRequest: &UpdateHostBasedServiceRequest{
				HostBasedService: model,
				FieldMask:        request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateHostBasedServiceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateHostBasedServiceRequest
	response, err := service.UpdateHostBasedService(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateHostBasedServiceRequest{
			UpdateHostBasedServiceRequest: &UpdateHostBasedServiceRequest{
				HostBasedService: response.GetHostBasedService(),
			},
		},
	}, nil
}

func (e *Event_UpdateHostBasedServiceRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteHostBasedServiceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteHostBasedServiceRequest
	_, err := service.DeleteHostBasedService(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteHostBasedServiceRequest{
			DeleteHostBasedServiceRequest: &DeleteHostBasedServiceRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateHostBasedServiceVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateHostBasedServiceVirtualNetworkRefRequest
	if _, err := service.CreateHostBasedServiceVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateHostBasedServiceVirtualNetworkRefRequest{
		CreateHostBasedServiceVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_DeleteHostBasedServiceVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteHostBasedServiceVirtualNetworkRefRequest
	if _, err := service.DeleteHostBasedServiceVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteHostBasedServiceVirtualNetworkRefRequest{
		DeleteHostBasedServiceVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_CreateHostBasedServiceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateHostBasedServiceTagRefRequest
	if _, err := service.CreateHostBasedServiceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateHostBasedServiceTagRefRequest{
		CreateHostBasedServiceTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteHostBasedServiceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteHostBasedServiceTagRefRequest
	if _, err := service.DeleteHostBasedServiceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteHostBasedServiceTagRefRequest{
		DeleteHostBasedServiceTagRefRequest: request,
	}}, nil
}

type InstanceIP = models.InstanceIP

func (s *BaseService) CreateInstanceIP(ctx context.Context, request *CreateInstanceIPRequest) (*CreateInstanceIPResponse, error) {
	if s.next == nil {
		return &CreateInstanceIPResponse{
			InstanceIP: request.GetInstanceIP(),
		}, nil
	}
	return s.Next().CreateInstanceIP(ctx, request)
}
func (s *BaseService) UpdateInstanceIP(ctx context.Context, request *UpdateInstanceIPRequest) (*UpdateInstanceIPResponse, error) {
	if s.next == nil {
		return &UpdateInstanceIPResponse{
			InstanceIP: request.GetInstanceIP(),
		}, nil
	}
	return s.Next().UpdateInstanceIP(ctx, request)
}
func (s *BaseService) DeleteInstanceIP(ctx context.Context, request *DeleteInstanceIPRequest) (*DeleteInstanceIPResponse, error) {
	if s.next == nil {
		return &DeleteInstanceIPResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteInstanceIP(ctx, request)
}
func (s *BaseService) GetInstanceIP(ctx context.Context, request *GetInstanceIPRequest) (*GetInstanceIPResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetInstanceIP(ctx, request)
}
func (s *BaseService) ListInstanceIP(ctx context.Context, request *ListInstanceIPRequest) (*ListInstanceIPResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListInstanceIP(ctx, request)
}

func (s *BaseService) CreateInstanceIPPhysicalRouterRef(ctx context.Context, request *CreateInstanceIPPhysicalRouterRefRequest) (*CreateInstanceIPPhysicalRouterRefResponse, error) {
	if s.next == nil {
		return &CreateInstanceIPPhysicalRouterRefResponse{
			ID:                          request.ID,
			InstanceIPPhysicalRouterRef: request.GetInstanceIPPhysicalRouterRef(),
		}, nil
	}
	return s.Next().CreateInstanceIPPhysicalRouterRef(ctx, request)
}

func (s *BaseService) DeleteInstanceIPPhysicalRouterRef(ctx context.Context, request *DeleteInstanceIPPhysicalRouterRefRequest) (*DeleteInstanceIPPhysicalRouterRefResponse, error) {
	if s.next == nil {
		return &DeleteInstanceIPPhysicalRouterRefResponse{
			ID:                          request.ID,
			InstanceIPPhysicalRouterRef: request.GetInstanceIPPhysicalRouterRef(),
		}, nil
	}
	return s.Next().DeleteInstanceIPPhysicalRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateInstanceIPPhysicalRouterRef(ctx context.Context, request *CreateInstanceIPPhysicalRouterRefRequest) (*CreateInstanceIPPhysicalRouterRefResponse, error) {
	refField := models.InstanceIPFieldPhysicalRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.AddPhysicalRouterRef(request.InstanceIPPhysicalRouterRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateInstanceIPPhysicalRouterRefResponse{
		ID:                          request.ID,
		InstanceIPPhysicalRouterRef: request.GetInstanceIPPhysicalRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteInstanceIPPhysicalRouterRef(ctx context.Context, request *DeleteInstanceIPPhysicalRouterRefRequest) (*DeleteInstanceIPPhysicalRouterRefResponse, error) {
	refField := models.InstanceIPFieldPhysicalRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.RemovePhysicalRouterRef(request.InstanceIPPhysicalRouterRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteInstanceIPPhysicalRouterRefResponse{
		ID:                          request.ID,
		InstanceIPPhysicalRouterRef: request.GetInstanceIPPhysicalRouterRef(),
	}, nil
}

func (s *BaseService) CreateInstanceIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateInstanceIPVirtualMachineInterfaceRefRequest) (*CreateInstanceIPVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateInstanceIPVirtualMachineInterfaceRefResponse{
			ID:                                   request.ID,
			InstanceIPVirtualMachineInterfaceRef: request.GetInstanceIPVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().CreateInstanceIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteInstanceIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteInstanceIPVirtualMachineInterfaceRefRequest) (*DeleteInstanceIPVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteInstanceIPVirtualMachineInterfaceRefResponse{
			ID:                                   request.ID,
			InstanceIPVirtualMachineInterfaceRef: request.GetInstanceIPVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteInstanceIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateInstanceIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateInstanceIPVirtualMachineInterfaceRefRequest) (*CreateInstanceIPVirtualMachineInterfaceRefResponse, error) {
	refField := models.InstanceIPFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.AddVirtualMachineInterfaceRef(request.InstanceIPVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateInstanceIPVirtualMachineInterfaceRefResponse{
		ID:                                   request.ID,
		InstanceIPVirtualMachineInterfaceRef: request.GetInstanceIPVirtualMachineInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteInstanceIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteInstanceIPVirtualMachineInterfaceRefRequest) (*DeleteInstanceIPVirtualMachineInterfaceRefResponse, error) {
	refField := models.InstanceIPFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.RemoveVirtualMachineInterfaceRef(request.InstanceIPVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteInstanceIPVirtualMachineInterfaceRefResponse{
		ID:                                   request.ID,
		InstanceIPVirtualMachineInterfaceRef: request.GetInstanceIPVirtualMachineInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateInstanceIPVirtualNetworkRef(ctx context.Context, request *CreateInstanceIPVirtualNetworkRefRequest) (*CreateInstanceIPVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &CreateInstanceIPVirtualNetworkRefResponse{
			ID:                          request.ID,
			InstanceIPVirtualNetworkRef: request.GetInstanceIPVirtualNetworkRef(),
		}, nil
	}
	return s.Next().CreateInstanceIPVirtualNetworkRef(ctx, request)
}

func (s *BaseService) DeleteInstanceIPVirtualNetworkRef(ctx context.Context, request *DeleteInstanceIPVirtualNetworkRefRequest) (*DeleteInstanceIPVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &DeleteInstanceIPVirtualNetworkRefResponse{
			ID:                          request.ID,
			InstanceIPVirtualNetworkRef: request.GetInstanceIPVirtualNetworkRef(),
		}, nil
	}
	return s.Next().DeleteInstanceIPVirtualNetworkRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateInstanceIPVirtualNetworkRef(ctx context.Context, request *CreateInstanceIPVirtualNetworkRefRequest) (*CreateInstanceIPVirtualNetworkRefResponse, error) {
	refField := models.InstanceIPFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.AddVirtualNetworkRef(request.InstanceIPVirtualNetworkRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateInstanceIPVirtualNetworkRefResponse{
		ID:                          request.ID,
		InstanceIPVirtualNetworkRef: request.GetInstanceIPVirtualNetworkRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteInstanceIPVirtualNetworkRef(ctx context.Context, request *DeleteInstanceIPVirtualNetworkRefRequest) (*DeleteInstanceIPVirtualNetworkRefResponse, error) {
	refField := models.InstanceIPFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.RemoveVirtualNetworkRef(request.InstanceIPVirtualNetworkRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteInstanceIPVirtualNetworkRefResponse{
		ID:                          request.ID,
		InstanceIPVirtualNetworkRef: request.GetInstanceIPVirtualNetworkRef(),
	}, nil
}

func (s *BaseService) CreateInstanceIPVirtualRouterRef(ctx context.Context, request *CreateInstanceIPVirtualRouterRefRequest) (*CreateInstanceIPVirtualRouterRefResponse, error) {
	if s.next == nil {
		return &CreateInstanceIPVirtualRouterRefResponse{
			ID:                         request.ID,
			InstanceIPVirtualRouterRef: request.GetInstanceIPVirtualRouterRef(),
		}, nil
	}
	return s.Next().CreateInstanceIPVirtualRouterRef(ctx, request)
}

func (s *BaseService) DeleteInstanceIPVirtualRouterRef(ctx context.Context, request *DeleteInstanceIPVirtualRouterRefRequest) (*DeleteInstanceIPVirtualRouterRefResponse, error) {
	if s.next == nil {
		return &DeleteInstanceIPVirtualRouterRefResponse{
			ID:                         request.ID,
			InstanceIPVirtualRouterRef: request.GetInstanceIPVirtualRouterRef(),
		}, nil
	}
	return s.Next().DeleteInstanceIPVirtualRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateInstanceIPVirtualRouterRef(ctx context.Context, request *CreateInstanceIPVirtualRouterRefRequest) (*CreateInstanceIPVirtualRouterRefResponse, error) {
	refField := models.InstanceIPFieldVirtualRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.AddVirtualRouterRef(request.InstanceIPVirtualRouterRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateInstanceIPVirtualRouterRefResponse{
		ID:                         request.ID,
		InstanceIPVirtualRouterRef: request.GetInstanceIPVirtualRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteInstanceIPVirtualRouterRef(ctx context.Context, request *DeleteInstanceIPVirtualRouterRefRequest) (*DeleteInstanceIPVirtualRouterRefResponse, error) {
	refField := models.InstanceIPFieldVirtualRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.RemoveVirtualRouterRef(request.InstanceIPVirtualRouterRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteInstanceIPVirtualRouterRefResponse{
		ID:                         request.ID,
		InstanceIPVirtualRouterRef: request.GetInstanceIPVirtualRouterRef(),
	}, nil
}

func (s *BaseService) CreateInstanceIPTagRef(ctx context.Context, request *CreateInstanceIPTagRefRequest) (*CreateInstanceIPTagRefResponse, error) {
	if s.next == nil {
		return &CreateInstanceIPTagRefResponse{
			ID:               request.ID,
			InstanceIPTagRef: request.GetInstanceIPTagRef(),
		}, nil
	}
	return s.Next().CreateInstanceIPTagRef(ctx, request)
}

func (s *BaseService) DeleteInstanceIPTagRef(ctx context.Context, request *DeleteInstanceIPTagRefRequest) (*DeleteInstanceIPTagRefResponse, error) {
	if s.next == nil {
		return &DeleteInstanceIPTagRefResponse{
			ID:               request.ID,
			InstanceIPTagRef: request.GetInstanceIPTagRef(),
		}, nil
	}
	return s.Next().DeleteInstanceIPTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateInstanceIPTagRef(ctx context.Context, request *CreateInstanceIPTagRefRequest) (*CreateInstanceIPTagRefResponse, error) {
	refField := models.InstanceIPFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.AddTagRef(request.InstanceIPTagRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateInstanceIPTagRefResponse{
		ID:               request.ID,
		InstanceIPTagRef: request.GetInstanceIPTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteInstanceIPTagRef(ctx context.Context, request *DeleteInstanceIPTagRefRequest) (*DeleteInstanceIPTagRefResponse, error) {
	refField := models.InstanceIPFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.RemoveTagRef(request.InstanceIPTagRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteInstanceIPTagRefResponse{
		ID:               request.ID,
		InstanceIPTagRef: request.GetInstanceIPTagRef(),
	}, nil
}

func (s *BaseService) CreateInstanceIPFlowNodeRef(ctx context.Context, request *CreateInstanceIPFlowNodeRefRequest) (*CreateInstanceIPFlowNodeRefResponse, error) {
	if s.next == nil {
		return &CreateInstanceIPFlowNodeRefResponse{
			ID:                    request.ID,
			InstanceIPFlowNodeRef: request.GetInstanceIPFlowNodeRef(),
		}, nil
	}
	return s.Next().CreateInstanceIPFlowNodeRef(ctx, request)
}

func (s *BaseService) DeleteInstanceIPFlowNodeRef(ctx context.Context, request *DeleteInstanceIPFlowNodeRefRequest) (*DeleteInstanceIPFlowNodeRefResponse, error) {
	if s.next == nil {
		return &DeleteInstanceIPFlowNodeRefResponse{
			ID:                    request.ID,
			InstanceIPFlowNodeRef: request.GetInstanceIPFlowNodeRef(),
		}, nil
	}
	return s.Next().DeleteInstanceIPFlowNodeRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateInstanceIPFlowNodeRef(ctx context.Context, request *CreateInstanceIPFlowNodeRefRequest) (*CreateInstanceIPFlowNodeRefResponse, error) {
	refField := models.InstanceIPFieldFlowNodeRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.AddFlowNodeRef(request.InstanceIPFlowNodeRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateInstanceIPFlowNodeRefResponse{
		ID:                    request.ID,
		InstanceIPFlowNodeRef: request.GetInstanceIPFlowNodeRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteInstanceIPFlowNodeRef(ctx context.Context, request *DeleteInstanceIPFlowNodeRefRequest) (*DeleteInstanceIPFlowNodeRefResponse, error) {
	refField := models.InstanceIPFieldFlowNodeRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.RemoveFlowNodeRef(request.InstanceIPFlowNodeRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteInstanceIPFlowNodeRefResponse{
		ID:                    request.ID,
		InstanceIPFlowNodeRef: request.GetInstanceIPFlowNodeRef(),
	}, nil
}

func (s *BaseService) CreateInstanceIPLogicalInterfaceRef(ctx context.Context, request *CreateInstanceIPLogicalInterfaceRefRequest) (*CreateInstanceIPLogicalInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateInstanceIPLogicalInterfaceRefResponse{
			ID:                            request.ID,
			InstanceIPLogicalInterfaceRef: request.GetInstanceIPLogicalInterfaceRef(),
		}, nil
	}
	return s.Next().CreateInstanceIPLogicalInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteInstanceIPLogicalInterfaceRef(ctx context.Context, request *DeleteInstanceIPLogicalInterfaceRefRequest) (*DeleteInstanceIPLogicalInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteInstanceIPLogicalInterfaceRefResponse{
			ID:                            request.ID,
			InstanceIPLogicalInterfaceRef: request.GetInstanceIPLogicalInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteInstanceIPLogicalInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateInstanceIPLogicalInterfaceRef(ctx context.Context, request *CreateInstanceIPLogicalInterfaceRefRequest) (*CreateInstanceIPLogicalInterfaceRefResponse, error) {
	refField := models.InstanceIPFieldLogicalInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.AddLogicalInterfaceRef(request.InstanceIPLogicalInterfaceRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateInstanceIPLogicalInterfaceRefResponse{
		ID:                            request.ID,
		InstanceIPLogicalInterfaceRef: request.GetInstanceIPLogicalInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteInstanceIPLogicalInterfaceRef(ctx context.Context, request *DeleteInstanceIPLogicalInterfaceRefRequest) (*DeleteInstanceIPLogicalInterfaceRefResponse, error) {
	refField := models.InstanceIPFieldLogicalInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.RemoveLogicalInterfaceRef(request.InstanceIPLogicalInterfaceRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteInstanceIPLogicalInterfaceRefResponse{
		ID:                            request.ID,
		InstanceIPLogicalInterfaceRef: request.GetInstanceIPLogicalInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateInstanceIPNetworkIpamRef(ctx context.Context, request *CreateInstanceIPNetworkIpamRefRequest) (*CreateInstanceIPNetworkIpamRefResponse, error) {
	if s.next == nil {
		return &CreateInstanceIPNetworkIpamRefResponse{
			ID:                       request.ID,
			InstanceIPNetworkIpamRef: request.GetInstanceIPNetworkIpamRef(),
		}, nil
	}
	return s.Next().CreateInstanceIPNetworkIpamRef(ctx, request)
}

func (s *BaseService) DeleteInstanceIPNetworkIpamRef(ctx context.Context, request *DeleteInstanceIPNetworkIpamRefRequest) (*DeleteInstanceIPNetworkIpamRefResponse, error) {
	if s.next == nil {
		return &DeleteInstanceIPNetworkIpamRefResponse{
			ID:                       request.ID,
			InstanceIPNetworkIpamRef: request.GetInstanceIPNetworkIpamRef(),
		}, nil
	}
	return s.Next().DeleteInstanceIPNetworkIpamRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateInstanceIPNetworkIpamRef(ctx context.Context, request *CreateInstanceIPNetworkIpamRefRequest) (*CreateInstanceIPNetworkIpamRefResponse, error) {
	refField := models.InstanceIPFieldNetworkIpamRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.AddNetworkIpamRef(request.InstanceIPNetworkIpamRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateInstanceIPNetworkIpamRefResponse{
		ID:                       request.ID,
		InstanceIPNetworkIpamRef: request.GetInstanceIPNetworkIpamRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteInstanceIPNetworkIpamRef(ctx context.Context, request *DeleteInstanceIPNetworkIpamRefRequest) (*DeleteInstanceIPNetworkIpamRefResponse, error) {
	refField := models.InstanceIPFieldNetworkIpamRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInstanceIP(ctx, &GetInstanceIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InstanceIP
		obj.RemoveNetworkIpamRef(request.InstanceIPNetworkIpamRef)

		_, err = s.BaseService.UpdateInstanceIP(ctx, &UpdateInstanceIPRequest{
			InstanceIP: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteInstanceIPNetworkIpamRefResponse{
		ID:                       request.ID,
		InstanceIPNetworkIpamRef: request.GetInstanceIPNetworkIpamRef(),
	}, nil
}

func (s *EventProducerService) CreateInstanceIP(ctx context.Context, request *CreateInstanceIPRequest) (*CreateInstanceIPResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateInstanceIPRequest{
				CreateInstanceIPRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateInstanceIP(ctx, request)
}
func (s *EventProducerService) UpdateInstanceIP(ctx context.Context, request *UpdateInstanceIPRequest) (*UpdateInstanceIPResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateInstanceIPRequest{
				UpdateInstanceIPRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateInstanceIP(ctx, request)
}
func (s *EventProducerService) DeleteInstanceIP(ctx context.Context, request *DeleteInstanceIPRequest) (*DeleteInstanceIPResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteInstanceIPRequest{
				DeleteInstanceIPRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteInstanceIP(ctx, request)
}

func (s *EventProducerService) CreateInstanceIPNetworkIpamRef(ctx context.Context, request *CreateInstanceIPNetworkIpamRefRequest) (*CreateInstanceIPNetworkIpamRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateInstanceIPNetworkIpamRefRequest{
			CreateInstanceIPNetworkIpamRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateInstanceIPNetworkIpamRef(ctx, request)
}

func (s *EventProducerService) DeleteInstanceIPNetworkIpamRef(ctx context.Context, request *DeleteInstanceIPNetworkIpamRefRequest) (*DeleteInstanceIPNetworkIpamRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteInstanceIPNetworkIpamRefRequest{
			DeleteInstanceIPNetworkIpamRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteInstanceIPNetworkIpamRef(ctx, request)
}

func (s *EventProducerService) CreateInstanceIPPhysicalRouterRef(ctx context.Context, request *CreateInstanceIPPhysicalRouterRefRequest) (*CreateInstanceIPPhysicalRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateInstanceIPPhysicalRouterRefRequest{
			CreateInstanceIPPhysicalRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateInstanceIPPhysicalRouterRef(ctx, request)
}

func (s *EventProducerService) DeleteInstanceIPPhysicalRouterRef(ctx context.Context, request *DeleteInstanceIPPhysicalRouterRefRequest) (*DeleteInstanceIPPhysicalRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteInstanceIPPhysicalRouterRefRequest{
			DeleteInstanceIPPhysicalRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteInstanceIPPhysicalRouterRef(ctx, request)
}

func (s *EventProducerService) CreateInstanceIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateInstanceIPVirtualMachineInterfaceRefRequest) (*CreateInstanceIPVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateInstanceIPVirtualMachineInterfaceRefRequest{
			CreateInstanceIPVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateInstanceIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteInstanceIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteInstanceIPVirtualMachineInterfaceRefRequest) (*DeleteInstanceIPVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteInstanceIPVirtualMachineInterfaceRefRequest{
			DeleteInstanceIPVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteInstanceIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateInstanceIPVirtualNetworkRef(ctx context.Context, request *CreateInstanceIPVirtualNetworkRefRequest) (*CreateInstanceIPVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateInstanceIPVirtualNetworkRefRequest{
			CreateInstanceIPVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateInstanceIPVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) DeleteInstanceIPVirtualNetworkRef(ctx context.Context, request *DeleteInstanceIPVirtualNetworkRefRequest) (*DeleteInstanceIPVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteInstanceIPVirtualNetworkRefRequest{
			DeleteInstanceIPVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteInstanceIPVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) CreateInstanceIPVirtualRouterRef(ctx context.Context, request *CreateInstanceIPVirtualRouterRefRequest) (*CreateInstanceIPVirtualRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateInstanceIPVirtualRouterRefRequest{
			CreateInstanceIPVirtualRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateInstanceIPVirtualRouterRef(ctx, request)
}

func (s *EventProducerService) DeleteInstanceIPVirtualRouterRef(ctx context.Context, request *DeleteInstanceIPVirtualRouterRefRequest) (*DeleteInstanceIPVirtualRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteInstanceIPVirtualRouterRefRequest{
			DeleteInstanceIPVirtualRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteInstanceIPVirtualRouterRef(ctx, request)
}

func (s *EventProducerService) CreateInstanceIPTagRef(ctx context.Context, request *CreateInstanceIPTagRefRequest) (*CreateInstanceIPTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateInstanceIPTagRefRequest{
			CreateInstanceIPTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateInstanceIPTagRef(ctx, request)
}

func (s *EventProducerService) DeleteInstanceIPTagRef(ctx context.Context, request *DeleteInstanceIPTagRefRequest) (*DeleteInstanceIPTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteInstanceIPTagRefRequest{
			DeleteInstanceIPTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteInstanceIPTagRef(ctx, request)
}

func (s *EventProducerService) CreateInstanceIPFlowNodeRef(ctx context.Context, request *CreateInstanceIPFlowNodeRefRequest) (*CreateInstanceIPFlowNodeRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateInstanceIPFlowNodeRefRequest{
			CreateInstanceIPFlowNodeRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateInstanceIPFlowNodeRef(ctx, request)
}

func (s *EventProducerService) DeleteInstanceIPFlowNodeRef(ctx context.Context, request *DeleteInstanceIPFlowNodeRefRequest) (*DeleteInstanceIPFlowNodeRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteInstanceIPFlowNodeRefRequest{
			DeleteInstanceIPFlowNodeRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteInstanceIPFlowNodeRef(ctx, request)
}

func (s *EventProducerService) CreateInstanceIPLogicalInterfaceRef(ctx context.Context, request *CreateInstanceIPLogicalInterfaceRefRequest) (*CreateInstanceIPLogicalInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateInstanceIPLogicalInterfaceRefRequest{
			CreateInstanceIPLogicalInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateInstanceIPLogicalInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteInstanceIPLogicalInterfaceRef(ctx context.Context, request *DeleteInstanceIPLogicalInterfaceRefRequest) (*DeleteInstanceIPLogicalInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteInstanceIPLogicalInterfaceRefRequest{
			DeleteInstanceIPLogicalInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteInstanceIPLogicalInterfaceRef(ctx, request)
}

func (e *Event_CreateInstanceIPRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateInstanceIPRequest
	model := request.InstanceIP
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetInstanceIP(ctx,
			&GetInstanceIPRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateInstanceIP(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateInstanceIPRequest{
			CreateInstanceIPRequest: &CreateInstanceIPRequest{
				InstanceIP: response.GetInstanceIP(),
			},
		},
	}, nil
}

func (e *Event_CreateInstanceIPRequest) ToUpdateEvent() *Event {
	request := e.CreateInstanceIPRequest
	model := request.InstanceIP
	return &Event{
		Request: &Event_UpdateInstanceIPRequest{
			UpdateInstanceIPRequest: &UpdateInstanceIPRequest{
				InstanceIP: model,
				FieldMask:  request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateInstanceIPRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateInstanceIPRequest
	response, err := service.UpdateInstanceIP(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateInstanceIPRequest{
			UpdateInstanceIPRequest: &UpdateInstanceIPRequest{
				InstanceIP: response.GetInstanceIP(),
			},
		},
	}, nil
}

func (e *Event_UpdateInstanceIPRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteInstanceIPRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteInstanceIPRequest
	_, err := service.DeleteInstanceIP(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteInstanceIPRequest{
			DeleteInstanceIPRequest: &DeleteInstanceIPRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateInstanceIPPhysicalRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateInstanceIPPhysicalRouterRefRequest
	if _, err := service.CreateInstanceIPPhysicalRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateInstanceIPPhysicalRouterRefRequest{
		CreateInstanceIPPhysicalRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeleteInstanceIPPhysicalRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteInstanceIPPhysicalRouterRefRequest
	if _, err := service.DeleteInstanceIPPhysicalRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteInstanceIPPhysicalRouterRefRequest{
		DeleteInstanceIPPhysicalRouterRefRequest: request,
	}}, nil
}

func (e *Event_CreateInstanceIPVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateInstanceIPVirtualMachineInterfaceRefRequest
	if _, err := service.CreateInstanceIPVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateInstanceIPVirtualMachineInterfaceRefRequest{
		CreateInstanceIPVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteInstanceIPVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteInstanceIPVirtualMachineInterfaceRefRequest
	if _, err := service.DeleteInstanceIPVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteInstanceIPVirtualMachineInterfaceRefRequest{
		DeleteInstanceIPVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateInstanceIPVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateInstanceIPVirtualNetworkRefRequest
	if _, err := service.CreateInstanceIPVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateInstanceIPVirtualNetworkRefRequest{
		CreateInstanceIPVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_DeleteInstanceIPVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteInstanceIPVirtualNetworkRefRequest
	if _, err := service.DeleteInstanceIPVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteInstanceIPVirtualNetworkRefRequest{
		DeleteInstanceIPVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_CreateInstanceIPVirtualRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateInstanceIPVirtualRouterRefRequest
	if _, err := service.CreateInstanceIPVirtualRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateInstanceIPVirtualRouterRefRequest{
		CreateInstanceIPVirtualRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeleteInstanceIPVirtualRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteInstanceIPVirtualRouterRefRequest
	if _, err := service.DeleteInstanceIPVirtualRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteInstanceIPVirtualRouterRefRequest{
		DeleteInstanceIPVirtualRouterRefRequest: request,
	}}, nil
}

func (e *Event_CreateInstanceIPTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateInstanceIPTagRefRequest
	if _, err := service.CreateInstanceIPTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateInstanceIPTagRefRequest{
		CreateInstanceIPTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteInstanceIPTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteInstanceIPTagRefRequest
	if _, err := service.DeleteInstanceIPTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteInstanceIPTagRefRequest{
		DeleteInstanceIPTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateInstanceIPFlowNodeRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateInstanceIPFlowNodeRefRequest
	if _, err := service.CreateInstanceIPFlowNodeRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateInstanceIPFlowNodeRefRequest{
		CreateInstanceIPFlowNodeRefRequest: request,
	}}, nil
}

func (e *Event_DeleteInstanceIPFlowNodeRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteInstanceIPFlowNodeRefRequest
	if _, err := service.DeleteInstanceIPFlowNodeRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteInstanceIPFlowNodeRefRequest{
		DeleteInstanceIPFlowNodeRefRequest: request,
	}}, nil
}

func (e *Event_CreateInstanceIPLogicalInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateInstanceIPLogicalInterfaceRefRequest
	if _, err := service.CreateInstanceIPLogicalInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateInstanceIPLogicalInterfaceRefRequest{
		CreateInstanceIPLogicalInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteInstanceIPLogicalInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteInstanceIPLogicalInterfaceRefRequest
	if _, err := service.DeleteInstanceIPLogicalInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteInstanceIPLogicalInterfaceRefRequest{
		DeleteInstanceIPLogicalInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateInstanceIPNetworkIpamRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateInstanceIPNetworkIpamRefRequest
	if _, err := service.CreateInstanceIPNetworkIpamRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateInstanceIPNetworkIpamRefRequest{
		CreateInstanceIPNetworkIpamRefRequest: request,
	}}, nil
}

func (e *Event_DeleteInstanceIPNetworkIpamRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteInstanceIPNetworkIpamRefRequest
	if _, err := service.DeleteInstanceIPNetworkIpamRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteInstanceIPNetworkIpamRefRequest{
		DeleteInstanceIPNetworkIpamRefRequest: request,
	}}, nil
}

type IntentMap = models.IntentMap

func (s *BaseService) CreateIntentMap(ctx context.Context, request *CreateIntentMapRequest) (*CreateIntentMapResponse, error) {
	if s.next == nil {
		return &CreateIntentMapResponse{
			IntentMap: request.GetIntentMap(),
		}, nil
	}
	return s.Next().CreateIntentMap(ctx, request)
}
func (s *BaseService) UpdateIntentMap(ctx context.Context, request *UpdateIntentMapRequest) (*UpdateIntentMapResponse, error) {
	if s.next == nil {
		return &UpdateIntentMapResponse{
			IntentMap: request.GetIntentMap(),
		}, nil
	}
	return s.Next().UpdateIntentMap(ctx, request)
}
func (s *BaseService) DeleteIntentMap(ctx context.Context, request *DeleteIntentMapRequest) (*DeleteIntentMapResponse, error) {
	if s.next == nil {
		return &DeleteIntentMapResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteIntentMap(ctx, request)
}
func (s *BaseService) GetIntentMap(ctx context.Context, request *GetIntentMapRequest) (*GetIntentMapResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetIntentMap(ctx, request)
}
func (s *BaseService) ListIntentMap(ctx context.Context, request *ListIntentMapRequest) (*ListIntentMapResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListIntentMap(ctx, request)
}

func (s *BaseService) CreateIntentMapTagRef(ctx context.Context, request *CreateIntentMapTagRefRequest) (*CreateIntentMapTagRefResponse, error) {
	if s.next == nil {
		return &CreateIntentMapTagRefResponse{
			ID:              request.ID,
			IntentMapTagRef: request.GetIntentMapTagRef(),
		}, nil
	}
	return s.Next().CreateIntentMapTagRef(ctx, request)
}

func (s *BaseService) DeleteIntentMapTagRef(ctx context.Context, request *DeleteIntentMapTagRefRequest) (*DeleteIntentMapTagRefResponse, error) {
	if s.next == nil {
		return &DeleteIntentMapTagRefResponse{
			ID:              request.ID,
			IntentMapTagRef: request.GetIntentMapTagRef(),
		}, nil
	}
	return s.Next().DeleteIntentMapTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateIntentMapTagRef(ctx context.Context, request *CreateIntentMapTagRefRequest) (*CreateIntentMapTagRefResponse, error) {
	refField := models.IntentMapFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetIntentMap(ctx, &GetIntentMapRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.IntentMap
		obj.AddTagRef(request.IntentMapTagRef)

		_, err = s.BaseService.UpdateIntentMap(ctx, &UpdateIntentMapRequest{
			IntentMap: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateIntentMapTagRefResponse{
		ID:              request.ID,
		IntentMapTagRef: request.GetIntentMapTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteIntentMapTagRef(ctx context.Context, request *DeleteIntentMapTagRefRequest) (*DeleteIntentMapTagRefResponse, error) {
	refField := models.IntentMapFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetIntentMap(ctx, &GetIntentMapRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.IntentMap
		obj.RemoveTagRef(request.IntentMapTagRef)

		_, err = s.BaseService.UpdateIntentMap(ctx, &UpdateIntentMapRequest{
			IntentMap: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteIntentMapTagRefResponse{
		ID:              request.ID,
		IntentMapTagRef: request.GetIntentMapTagRef(),
	}, nil
}

func (s *EventProducerService) CreateIntentMap(ctx context.Context, request *CreateIntentMapRequest) (*CreateIntentMapResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateIntentMapRequest{
				CreateIntentMapRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateIntentMap(ctx, request)
}
func (s *EventProducerService) UpdateIntentMap(ctx context.Context, request *UpdateIntentMapRequest) (*UpdateIntentMapResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateIntentMapRequest{
				UpdateIntentMapRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateIntentMap(ctx, request)
}
func (s *EventProducerService) DeleteIntentMap(ctx context.Context, request *DeleteIntentMapRequest) (*DeleteIntentMapResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteIntentMapRequest{
				DeleteIntentMapRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteIntentMap(ctx, request)
}

func (s *EventProducerService) CreateIntentMapTagRef(ctx context.Context, request *CreateIntentMapTagRefRequest) (*CreateIntentMapTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateIntentMapTagRefRequest{
			CreateIntentMapTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateIntentMapTagRef(ctx, request)
}

func (s *EventProducerService) DeleteIntentMapTagRef(ctx context.Context, request *DeleteIntentMapTagRefRequest) (*DeleteIntentMapTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteIntentMapTagRefRequest{
			DeleteIntentMapTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteIntentMapTagRef(ctx, request)
}

func (e *Event_CreateIntentMapRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateIntentMapRequest
	model := request.IntentMap
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetIntentMap(ctx,
			&GetIntentMapRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateIntentMap(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateIntentMapRequest{
			CreateIntentMapRequest: &CreateIntentMapRequest{
				IntentMap: response.GetIntentMap(),
			},
		},
	}, nil
}

func (e *Event_CreateIntentMapRequest) ToUpdateEvent() *Event {
	request := e.CreateIntentMapRequest
	model := request.IntentMap
	return &Event{
		Request: &Event_UpdateIntentMapRequest{
			UpdateIntentMapRequest: &UpdateIntentMapRequest{
				IntentMap: model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateIntentMapRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateIntentMapRequest
	response, err := service.UpdateIntentMap(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateIntentMapRequest{
			UpdateIntentMapRequest: &UpdateIntentMapRequest{
				IntentMap: response.GetIntentMap(),
			},
		},
	}, nil
}

func (e *Event_UpdateIntentMapRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteIntentMapRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteIntentMapRequest
	_, err := service.DeleteIntentMap(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteIntentMapRequest{
			DeleteIntentMapRequest: &DeleteIntentMapRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateIntentMapTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateIntentMapTagRefRequest
	if _, err := service.CreateIntentMapTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateIntentMapTagRefRequest{
		CreateIntentMapTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteIntentMapTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteIntentMapTagRefRequest
	if _, err := service.DeleteIntentMapTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteIntentMapTagRefRequest{
		DeleteIntentMapTagRefRequest: request,
	}}, nil
}

type InterfaceRouteTable = models.InterfaceRouteTable

func (s *BaseService) CreateInterfaceRouteTable(ctx context.Context, request *CreateInterfaceRouteTableRequest) (*CreateInterfaceRouteTableResponse, error) {
	if s.next == nil {
		return &CreateInterfaceRouteTableResponse{
			InterfaceRouteTable: request.GetInterfaceRouteTable(),
		}, nil
	}
	return s.Next().CreateInterfaceRouteTable(ctx, request)
}
func (s *BaseService) UpdateInterfaceRouteTable(ctx context.Context, request *UpdateInterfaceRouteTableRequest) (*UpdateInterfaceRouteTableResponse, error) {
	if s.next == nil {
		return &UpdateInterfaceRouteTableResponse{
			InterfaceRouteTable: request.GetInterfaceRouteTable(),
		}, nil
	}
	return s.Next().UpdateInterfaceRouteTable(ctx, request)
}
func (s *BaseService) DeleteInterfaceRouteTable(ctx context.Context, request *DeleteInterfaceRouteTableRequest) (*DeleteInterfaceRouteTableResponse, error) {
	if s.next == nil {
		return &DeleteInterfaceRouteTableResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteInterfaceRouteTable(ctx, request)
}
func (s *BaseService) GetInterfaceRouteTable(ctx context.Context, request *GetInterfaceRouteTableRequest) (*GetInterfaceRouteTableResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetInterfaceRouteTable(ctx, request)
}
func (s *BaseService) ListInterfaceRouteTable(ctx context.Context, request *ListInterfaceRouteTableRequest) (*ListInterfaceRouteTableResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListInterfaceRouteTable(ctx, request)
}

func (s *BaseService) CreateInterfaceRouteTableServiceInstanceRef(ctx context.Context, request *CreateInterfaceRouteTableServiceInstanceRefRequest) (*CreateInterfaceRouteTableServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &CreateInterfaceRouteTableServiceInstanceRefResponse{
			ID:                                    request.ID,
			InterfaceRouteTableServiceInstanceRef: request.GetInterfaceRouteTableServiceInstanceRef(),
		}, nil
	}
	return s.Next().CreateInterfaceRouteTableServiceInstanceRef(ctx, request)
}

func (s *BaseService) DeleteInterfaceRouteTableServiceInstanceRef(ctx context.Context, request *DeleteInterfaceRouteTableServiceInstanceRefRequest) (*DeleteInterfaceRouteTableServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &DeleteInterfaceRouteTableServiceInstanceRefResponse{
			ID:                                    request.ID,
			InterfaceRouteTableServiceInstanceRef: request.GetInterfaceRouteTableServiceInstanceRef(),
		}, nil
	}
	return s.Next().DeleteInterfaceRouteTableServiceInstanceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateInterfaceRouteTableServiceInstanceRef(ctx context.Context, request *CreateInterfaceRouteTableServiceInstanceRefRequest) (*CreateInterfaceRouteTableServiceInstanceRefResponse, error) {
	refField := models.InterfaceRouteTableFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInterfaceRouteTable(ctx, &GetInterfaceRouteTableRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InterfaceRouteTable
		obj.AddServiceInstanceRef(request.InterfaceRouteTableServiceInstanceRef)

		_, err = s.BaseService.UpdateInterfaceRouteTable(ctx, &UpdateInterfaceRouteTableRequest{
			InterfaceRouteTable: obj,
			FieldMask:           types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateInterfaceRouteTableServiceInstanceRefResponse{
		ID:                                    request.ID,
		InterfaceRouteTableServiceInstanceRef: request.GetInterfaceRouteTableServiceInstanceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteInterfaceRouteTableServiceInstanceRef(ctx context.Context, request *DeleteInterfaceRouteTableServiceInstanceRefRequest) (*DeleteInterfaceRouteTableServiceInstanceRefResponse, error) {
	refField := models.InterfaceRouteTableFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInterfaceRouteTable(ctx, &GetInterfaceRouteTableRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InterfaceRouteTable
		obj.RemoveServiceInstanceRef(request.InterfaceRouteTableServiceInstanceRef)

		_, err = s.BaseService.UpdateInterfaceRouteTable(ctx, &UpdateInterfaceRouteTableRequest{
			InterfaceRouteTable: obj,
			FieldMask:           types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteInterfaceRouteTableServiceInstanceRefResponse{
		ID:                                    request.ID,
		InterfaceRouteTableServiceInstanceRef: request.GetInterfaceRouteTableServiceInstanceRef(),
	}, nil
}

func (s *BaseService) CreateInterfaceRouteTableTagRef(ctx context.Context, request *CreateInterfaceRouteTableTagRefRequest) (*CreateInterfaceRouteTableTagRefResponse, error) {
	if s.next == nil {
		return &CreateInterfaceRouteTableTagRefResponse{
			ID:                        request.ID,
			InterfaceRouteTableTagRef: request.GetInterfaceRouteTableTagRef(),
		}, nil
	}
	return s.Next().CreateInterfaceRouteTableTagRef(ctx, request)
}

func (s *BaseService) DeleteInterfaceRouteTableTagRef(ctx context.Context, request *DeleteInterfaceRouteTableTagRefRequest) (*DeleteInterfaceRouteTableTagRefResponse, error) {
	if s.next == nil {
		return &DeleteInterfaceRouteTableTagRefResponse{
			ID:                        request.ID,
			InterfaceRouteTableTagRef: request.GetInterfaceRouteTableTagRef(),
		}, nil
	}
	return s.Next().DeleteInterfaceRouteTableTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateInterfaceRouteTableTagRef(ctx context.Context, request *CreateInterfaceRouteTableTagRefRequest) (*CreateInterfaceRouteTableTagRefResponse, error) {
	refField := models.InterfaceRouteTableFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInterfaceRouteTable(ctx, &GetInterfaceRouteTableRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InterfaceRouteTable
		obj.AddTagRef(request.InterfaceRouteTableTagRef)

		_, err = s.BaseService.UpdateInterfaceRouteTable(ctx, &UpdateInterfaceRouteTableRequest{
			InterfaceRouteTable: obj,
			FieldMask:           types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateInterfaceRouteTableTagRefResponse{
		ID:                        request.ID,
		InterfaceRouteTableTagRef: request.GetInterfaceRouteTableTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteInterfaceRouteTableTagRef(ctx context.Context, request *DeleteInterfaceRouteTableTagRefRequest) (*DeleteInterfaceRouteTableTagRefResponse, error) {
	refField := models.InterfaceRouteTableFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetInterfaceRouteTable(ctx, &GetInterfaceRouteTableRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.InterfaceRouteTable
		obj.RemoveTagRef(request.InterfaceRouteTableTagRef)

		_, err = s.BaseService.UpdateInterfaceRouteTable(ctx, &UpdateInterfaceRouteTableRequest{
			InterfaceRouteTable: obj,
			FieldMask:           types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteInterfaceRouteTableTagRefResponse{
		ID:                        request.ID,
		InterfaceRouteTableTagRef: request.GetInterfaceRouteTableTagRef(),
	}, nil
}

func (s *EventProducerService) CreateInterfaceRouteTable(ctx context.Context, request *CreateInterfaceRouteTableRequest) (*CreateInterfaceRouteTableResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateInterfaceRouteTableRequest{
				CreateInterfaceRouteTableRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateInterfaceRouteTable(ctx, request)
}
func (s *EventProducerService) UpdateInterfaceRouteTable(ctx context.Context, request *UpdateInterfaceRouteTableRequest) (*UpdateInterfaceRouteTableResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateInterfaceRouteTableRequest{
				UpdateInterfaceRouteTableRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateInterfaceRouteTable(ctx, request)
}
func (s *EventProducerService) DeleteInterfaceRouteTable(ctx context.Context, request *DeleteInterfaceRouteTableRequest) (*DeleteInterfaceRouteTableResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteInterfaceRouteTableRequest{
				DeleteInterfaceRouteTableRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteInterfaceRouteTable(ctx, request)
}

func (s *EventProducerService) CreateInterfaceRouteTableServiceInstanceRef(ctx context.Context, request *CreateInterfaceRouteTableServiceInstanceRefRequest) (*CreateInterfaceRouteTableServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateInterfaceRouteTableServiceInstanceRefRequest{
			CreateInterfaceRouteTableServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateInterfaceRouteTableServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) DeleteInterfaceRouteTableServiceInstanceRef(ctx context.Context, request *DeleteInterfaceRouteTableServiceInstanceRefRequest) (*DeleteInterfaceRouteTableServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteInterfaceRouteTableServiceInstanceRefRequest{
			DeleteInterfaceRouteTableServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteInterfaceRouteTableServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) CreateInterfaceRouteTableTagRef(ctx context.Context, request *CreateInterfaceRouteTableTagRefRequest) (*CreateInterfaceRouteTableTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateInterfaceRouteTableTagRefRequest{
			CreateInterfaceRouteTableTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateInterfaceRouteTableTagRef(ctx, request)
}

func (s *EventProducerService) DeleteInterfaceRouteTableTagRef(ctx context.Context, request *DeleteInterfaceRouteTableTagRefRequest) (*DeleteInterfaceRouteTableTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteInterfaceRouteTableTagRefRequest{
			DeleteInterfaceRouteTableTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteInterfaceRouteTableTagRef(ctx, request)
}

func (e *Event_CreateInterfaceRouteTableRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateInterfaceRouteTableRequest
	model := request.InterfaceRouteTable
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetInterfaceRouteTable(ctx,
			&GetInterfaceRouteTableRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateInterfaceRouteTable(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateInterfaceRouteTableRequest{
			CreateInterfaceRouteTableRequest: &CreateInterfaceRouteTableRequest{
				InterfaceRouteTable: response.GetInterfaceRouteTable(),
			},
		},
	}, nil
}

func (e *Event_CreateInterfaceRouteTableRequest) ToUpdateEvent() *Event {
	request := e.CreateInterfaceRouteTableRequest
	model := request.InterfaceRouteTable
	return &Event{
		Request: &Event_UpdateInterfaceRouteTableRequest{
			UpdateInterfaceRouteTableRequest: &UpdateInterfaceRouteTableRequest{
				InterfaceRouteTable: model,
				FieldMask:           request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateInterfaceRouteTableRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateInterfaceRouteTableRequest
	response, err := service.UpdateInterfaceRouteTable(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateInterfaceRouteTableRequest{
			UpdateInterfaceRouteTableRequest: &UpdateInterfaceRouteTableRequest{
				InterfaceRouteTable: response.GetInterfaceRouteTable(),
			},
		},
	}, nil
}

func (e *Event_UpdateInterfaceRouteTableRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteInterfaceRouteTableRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteInterfaceRouteTableRequest
	_, err := service.DeleteInterfaceRouteTable(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteInterfaceRouteTableRequest{
			DeleteInterfaceRouteTableRequest: &DeleteInterfaceRouteTableRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateInterfaceRouteTableTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateInterfaceRouteTableTagRefRequest
	if _, err := service.CreateInterfaceRouteTableTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateInterfaceRouteTableTagRefRequest{
		CreateInterfaceRouteTableTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteInterfaceRouteTableTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteInterfaceRouteTableTagRefRequest
	if _, err := service.DeleteInterfaceRouteTableTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteInterfaceRouteTableTagRefRequest{
		DeleteInterfaceRouteTableTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateInterfaceRouteTableServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateInterfaceRouteTableServiceInstanceRefRequest
	if _, err := service.CreateInterfaceRouteTableServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateInterfaceRouteTableServiceInstanceRefRequest{
		CreateInterfaceRouteTableServiceInstanceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteInterfaceRouteTableServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteInterfaceRouteTableServiceInstanceRefRequest
	if _, err := service.DeleteInterfaceRouteTableServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteInterfaceRouteTableServiceInstanceRefRequest{
		DeleteInterfaceRouteTableServiceInstanceRefRequest: request,
	}}, nil
}

type JobTemplate = models.JobTemplate

func (s *BaseService) CreateJobTemplate(ctx context.Context, request *CreateJobTemplateRequest) (*CreateJobTemplateResponse, error) {
	if s.next == nil {
		return &CreateJobTemplateResponse{
			JobTemplate: request.GetJobTemplate(),
		}, nil
	}
	return s.Next().CreateJobTemplate(ctx, request)
}
func (s *BaseService) UpdateJobTemplate(ctx context.Context, request *UpdateJobTemplateRequest) (*UpdateJobTemplateResponse, error) {
	if s.next == nil {
		return &UpdateJobTemplateResponse{
			JobTemplate: request.GetJobTemplate(),
		}, nil
	}
	return s.Next().UpdateJobTemplate(ctx, request)
}
func (s *BaseService) DeleteJobTemplate(ctx context.Context, request *DeleteJobTemplateRequest) (*DeleteJobTemplateResponse, error) {
	if s.next == nil {
		return &DeleteJobTemplateResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteJobTemplate(ctx, request)
}
func (s *BaseService) GetJobTemplate(ctx context.Context, request *GetJobTemplateRequest) (*GetJobTemplateResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetJobTemplate(ctx, request)
}
func (s *BaseService) ListJobTemplate(ctx context.Context, request *ListJobTemplateRequest) (*ListJobTemplateResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListJobTemplate(ctx, request)
}

func (s *BaseService) CreateJobTemplateTagRef(ctx context.Context, request *CreateJobTemplateTagRefRequest) (*CreateJobTemplateTagRefResponse, error) {
	if s.next == nil {
		return &CreateJobTemplateTagRefResponse{
			ID:                request.ID,
			JobTemplateTagRef: request.GetJobTemplateTagRef(),
		}, nil
	}
	return s.Next().CreateJobTemplateTagRef(ctx, request)
}

func (s *BaseService) DeleteJobTemplateTagRef(ctx context.Context, request *DeleteJobTemplateTagRefRequest) (*DeleteJobTemplateTagRefResponse, error) {
	if s.next == nil {
		return &DeleteJobTemplateTagRefResponse{
			ID:                request.ID,
			JobTemplateTagRef: request.GetJobTemplateTagRef(),
		}, nil
	}
	return s.Next().DeleteJobTemplateTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateJobTemplateTagRef(ctx context.Context, request *CreateJobTemplateTagRefRequest) (*CreateJobTemplateTagRefResponse, error) {
	refField := models.JobTemplateFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetJobTemplate(ctx, &GetJobTemplateRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.JobTemplate
		obj.AddTagRef(request.JobTemplateTagRef)

		_, err = s.BaseService.UpdateJobTemplate(ctx, &UpdateJobTemplateRequest{
			JobTemplate: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateJobTemplateTagRefResponse{
		ID:                request.ID,
		JobTemplateTagRef: request.GetJobTemplateTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteJobTemplateTagRef(ctx context.Context, request *DeleteJobTemplateTagRefRequest) (*DeleteJobTemplateTagRefResponse, error) {
	refField := models.JobTemplateFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetJobTemplate(ctx, &GetJobTemplateRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.JobTemplate
		obj.RemoveTagRef(request.JobTemplateTagRef)

		_, err = s.BaseService.UpdateJobTemplate(ctx, &UpdateJobTemplateRequest{
			JobTemplate: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteJobTemplateTagRefResponse{
		ID:                request.ID,
		JobTemplateTagRef: request.GetJobTemplateTagRef(),
	}, nil
}

func (s *EventProducerService) CreateJobTemplate(ctx context.Context, request *CreateJobTemplateRequest) (*CreateJobTemplateResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateJobTemplateRequest{
				CreateJobTemplateRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateJobTemplate(ctx, request)
}
func (s *EventProducerService) UpdateJobTemplate(ctx context.Context, request *UpdateJobTemplateRequest) (*UpdateJobTemplateResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateJobTemplateRequest{
				UpdateJobTemplateRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateJobTemplate(ctx, request)
}
func (s *EventProducerService) DeleteJobTemplate(ctx context.Context, request *DeleteJobTemplateRequest) (*DeleteJobTemplateResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteJobTemplateRequest{
				DeleteJobTemplateRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteJobTemplate(ctx, request)
}

func (s *EventProducerService) CreateJobTemplateTagRef(ctx context.Context, request *CreateJobTemplateTagRefRequest) (*CreateJobTemplateTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateJobTemplateTagRefRequest{
			CreateJobTemplateTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateJobTemplateTagRef(ctx, request)
}

func (s *EventProducerService) DeleteJobTemplateTagRef(ctx context.Context, request *DeleteJobTemplateTagRefRequest) (*DeleteJobTemplateTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteJobTemplateTagRefRequest{
			DeleteJobTemplateTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteJobTemplateTagRef(ctx, request)
}

func (e *Event_CreateJobTemplateRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateJobTemplateRequest
	model := request.JobTemplate
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetJobTemplate(ctx,
			&GetJobTemplateRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateJobTemplate(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateJobTemplateRequest{
			CreateJobTemplateRequest: &CreateJobTemplateRequest{
				JobTemplate: response.GetJobTemplate(),
			},
		},
	}, nil
}

func (e *Event_CreateJobTemplateRequest) ToUpdateEvent() *Event {
	request := e.CreateJobTemplateRequest
	model := request.JobTemplate
	return &Event{
		Request: &Event_UpdateJobTemplateRequest{
			UpdateJobTemplateRequest: &UpdateJobTemplateRequest{
				JobTemplate: model,
				FieldMask:   request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateJobTemplateRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateJobTemplateRequest
	response, err := service.UpdateJobTemplate(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateJobTemplateRequest{
			UpdateJobTemplateRequest: &UpdateJobTemplateRequest{
				JobTemplate: response.GetJobTemplate(),
			},
		},
	}, nil
}

func (e *Event_UpdateJobTemplateRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteJobTemplateRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteJobTemplateRequest
	_, err := service.DeleteJobTemplate(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteJobTemplateRequest{
			DeleteJobTemplateRequest: &DeleteJobTemplateRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateJobTemplateTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateJobTemplateTagRefRequest
	if _, err := service.CreateJobTemplateTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateJobTemplateTagRefRequest{
		CreateJobTemplateTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteJobTemplateTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteJobTemplateTagRefRequest
	if _, err := service.DeleteJobTemplateTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteJobTemplateTagRefRequest{
		DeleteJobTemplateTagRefRequest: request,
	}}, nil
}

type LinkAggregationGroup = models.LinkAggregationGroup

func (s *BaseService) CreateLinkAggregationGroup(ctx context.Context, request *CreateLinkAggregationGroupRequest) (*CreateLinkAggregationGroupResponse, error) {
	if s.next == nil {
		return &CreateLinkAggregationGroupResponse{
			LinkAggregationGroup: request.GetLinkAggregationGroup(),
		}, nil
	}
	return s.Next().CreateLinkAggregationGroup(ctx, request)
}
func (s *BaseService) UpdateLinkAggregationGroup(ctx context.Context, request *UpdateLinkAggregationGroupRequest) (*UpdateLinkAggregationGroupResponse, error) {
	if s.next == nil {
		return &UpdateLinkAggregationGroupResponse{
			LinkAggregationGroup: request.GetLinkAggregationGroup(),
		}, nil
	}
	return s.Next().UpdateLinkAggregationGroup(ctx, request)
}
func (s *BaseService) DeleteLinkAggregationGroup(ctx context.Context, request *DeleteLinkAggregationGroupRequest) (*DeleteLinkAggregationGroupResponse, error) {
	if s.next == nil {
		return &DeleteLinkAggregationGroupResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteLinkAggregationGroup(ctx, request)
}
func (s *BaseService) GetLinkAggregationGroup(ctx context.Context, request *GetLinkAggregationGroupRequest) (*GetLinkAggregationGroupResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetLinkAggregationGroup(ctx, request)
}
func (s *BaseService) ListLinkAggregationGroup(ctx context.Context, request *ListLinkAggregationGroupRequest) (*ListLinkAggregationGroupResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListLinkAggregationGroup(ctx, request)
}

func (s *BaseService) CreateLinkAggregationGroupPhysicalInterfaceRef(ctx context.Context, request *CreateLinkAggregationGroupPhysicalInterfaceRefRequest) (*CreateLinkAggregationGroupPhysicalInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateLinkAggregationGroupPhysicalInterfaceRefResponse{
			ID:                                       request.ID,
			LinkAggregationGroupPhysicalInterfaceRef: request.GetLinkAggregationGroupPhysicalInterfaceRef(),
		}, nil
	}
	return s.Next().CreateLinkAggregationGroupPhysicalInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteLinkAggregationGroupPhysicalInterfaceRef(ctx context.Context, request *DeleteLinkAggregationGroupPhysicalInterfaceRefRequest) (*DeleteLinkAggregationGroupPhysicalInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteLinkAggregationGroupPhysicalInterfaceRefResponse{
			ID:                                       request.ID,
			LinkAggregationGroupPhysicalInterfaceRef: request.GetLinkAggregationGroupPhysicalInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteLinkAggregationGroupPhysicalInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLinkAggregationGroupPhysicalInterfaceRef(ctx context.Context, request *CreateLinkAggregationGroupPhysicalInterfaceRefRequest) (*CreateLinkAggregationGroupPhysicalInterfaceRefResponse, error) {
	refField := models.LinkAggregationGroupFieldPhysicalInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLinkAggregationGroup(ctx, &GetLinkAggregationGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LinkAggregationGroup
		obj.AddPhysicalInterfaceRef(request.LinkAggregationGroupPhysicalInterfaceRef)

		_, err = s.BaseService.UpdateLinkAggregationGroup(ctx, &UpdateLinkAggregationGroupRequest{
			LinkAggregationGroup: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLinkAggregationGroupPhysicalInterfaceRefResponse{
		ID:                                       request.ID,
		LinkAggregationGroupPhysicalInterfaceRef: request.GetLinkAggregationGroupPhysicalInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLinkAggregationGroupPhysicalInterfaceRef(ctx context.Context, request *DeleteLinkAggregationGroupPhysicalInterfaceRefRequest) (*DeleteLinkAggregationGroupPhysicalInterfaceRefResponse, error) {
	refField := models.LinkAggregationGroupFieldPhysicalInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLinkAggregationGroup(ctx, &GetLinkAggregationGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LinkAggregationGroup
		obj.RemovePhysicalInterfaceRef(request.LinkAggregationGroupPhysicalInterfaceRef)

		_, err = s.BaseService.UpdateLinkAggregationGroup(ctx, &UpdateLinkAggregationGroupRequest{
			LinkAggregationGroup: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLinkAggregationGroupPhysicalInterfaceRefResponse{
		ID:                                       request.ID,
		LinkAggregationGroupPhysicalInterfaceRef: request.GetLinkAggregationGroupPhysicalInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateLinkAggregationGroupVirtualMachineInterfaceRef(ctx context.Context, request *CreateLinkAggregationGroupVirtualMachineInterfaceRefRequest) (*CreateLinkAggregationGroupVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateLinkAggregationGroupVirtualMachineInterfaceRefResponse{
			ID: request.ID,
			LinkAggregationGroupVirtualMachineInterfaceRef: request.GetLinkAggregationGroupVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().CreateLinkAggregationGroupVirtualMachineInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteLinkAggregationGroupVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLinkAggregationGroupVirtualMachineInterfaceRefRequest) (*DeleteLinkAggregationGroupVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteLinkAggregationGroupVirtualMachineInterfaceRefResponse{
			ID: request.ID,
			LinkAggregationGroupVirtualMachineInterfaceRef: request.GetLinkAggregationGroupVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteLinkAggregationGroupVirtualMachineInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLinkAggregationGroupVirtualMachineInterfaceRef(ctx context.Context, request *CreateLinkAggregationGroupVirtualMachineInterfaceRefRequest) (*CreateLinkAggregationGroupVirtualMachineInterfaceRefResponse, error) {
	refField := models.LinkAggregationGroupFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLinkAggregationGroup(ctx, &GetLinkAggregationGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LinkAggregationGroup
		obj.AddVirtualMachineInterfaceRef(request.LinkAggregationGroupVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateLinkAggregationGroup(ctx, &UpdateLinkAggregationGroupRequest{
			LinkAggregationGroup: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLinkAggregationGroupVirtualMachineInterfaceRefResponse{
		ID: request.ID,
		LinkAggregationGroupVirtualMachineInterfaceRef: request.GetLinkAggregationGroupVirtualMachineInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLinkAggregationGroupVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLinkAggregationGroupVirtualMachineInterfaceRefRequest) (*DeleteLinkAggregationGroupVirtualMachineInterfaceRefResponse, error) {
	refField := models.LinkAggregationGroupFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLinkAggregationGroup(ctx, &GetLinkAggregationGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LinkAggregationGroup
		obj.RemoveVirtualMachineInterfaceRef(request.LinkAggregationGroupVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateLinkAggregationGroup(ctx, &UpdateLinkAggregationGroupRequest{
			LinkAggregationGroup: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLinkAggregationGroupVirtualMachineInterfaceRefResponse{
		ID: request.ID,
		LinkAggregationGroupVirtualMachineInterfaceRef: request.GetLinkAggregationGroupVirtualMachineInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateLinkAggregationGroupTagRef(ctx context.Context, request *CreateLinkAggregationGroupTagRefRequest) (*CreateLinkAggregationGroupTagRefResponse, error) {
	if s.next == nil {
		return &CreateLinkAggregationGroupTagRefResponse{
			ID:                         request.ID,
			LinkAggregationGroupTagRef: request.GetLinkAggregationGroupTagRef(),
		}, nil
	}
	return s.Next().CreateLinkAggregationGroupTagRef(ctx, request)
}

func (s *BaseService) DeleteLinkAggregationGroupTagRef(ctx context.Context, request *DeleteLinkAggregationGroupTagRefRequest) (*DeleteLinkAggregationGroupTagRefResponse, error) {
	if s.next == nil {
		return &DeleteLinkAggregationGroupTagRefResponse{
			ID:                         request.ID,
			LinkAggregationGroupTagRef: request.GetLinkAggregationGroupTagRef(),
		}, nil
	}
	return s.Next().DeleteLinkAggregationGroupTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLinkAggregationGroupTagRef(ctx context.Context, request *CreateLinkAggregationGroupTagRefRequest) (*CreateLinkAggregationGroupTagRefResponse, error) {
	refField := models.LinkAggregationGroupFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLinkAggregationGroup(ctx, &GetLinkAggregationGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LinkAggregationGroup
		obj.AddTagRef(request.LinkAggregationGroupTagRef)

		_, err = s.BaseService.UpdateLinkAggregationGroup(ctx, &UpdateLinkAggregationGroupRequest{
			LinkAggregationGroup: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLinkAggregationGroupTagRefResponse{
		ID:                         request.ID,
		LinkAggregationGroupTagRef: request.GetLinkAggregationGroupTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLinkAggregationGroupTagRef(ctx context.Context, request *DeleteLinkAggregationGroupTagRefRequest) (*DeleteLinkAggregationGroupTagRefResponse, error) {
	refField := models.LinkAggregationGroupFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLinkAggregationGroup(ctx, &GetLinkAggregationGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LinkAggregationGroup
		obj.RemoveTagRef(request.LinkAggregationGroupTagRef)

		_, err = s.BaseService.UpdateLinkAggregationGroup(ctx, &UpdateLinkAggregationGroupRequest{
			LinkAggregationGroup: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLinkAggregationGroupTagRefResponse{
		ID:                         request.ID,
		LinkAggregationGroupTagRef: request.GetLinkAggregationGroupTagRef(),
	}, nil
}

func (s *EventProducerService) CreateLinkAggregationGroup(ctx context.Context, request *CreateLinkAggregationGroupRequest) (*CreateLinkAggregationGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateLinkAggregationGroupRequest{
				CreateLinkAggregationGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLinkAggregationGroup(ctx, request)
}
func (s *EventProducerService) UpdateLinkAggregationGroup(ctx context.Context, request *UpdateLinkAggregationGroupRequest) (*UpdateLinkAggregationGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateLinkAggregationGroupRequest{
				UpdateLinkAggregationGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateLinkAggregationGroup(ctx, request)
}
func (s *EventProducerService) DeleteLinkAggregationGroup(ctx context.Context, request *DeleteLinkAggregationGroupRequest) (*DeleteLinkAggregationGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteLinkAggregationGroupRequest{
				DeleteLinkAggregationGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLinkAggregationGroup(ctx, request)
}

func (s *EventProducerService) CreateLinkAggregationGroupPhysicalInterfaceRef(ctx context.Context, request *CreateLinkAggregationGroupPhysicalInterfaceRefRequest) (*CreateLinkAggregationGroupPhysicalInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLinkAggregationGroupPhysicalInterfaceRefRequest{
			CreateLinkAggregationGroupPhysicalInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLinkAggregationGroupPhysicalInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteLinkAggregationGroupPhysicalInterfaceRef(ctx context.Context, request *DeleteLinkAggregationGroupPhysicalInterfaceRefRequest) (*DeleteLinkAggregationGroupPhysicalInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLinkAggregationGroupPhysicalInterfaceRefRequest{
			DeleteLinkAggregationGroupPhysicalInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLinkAggregationGroupPhysicalInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateLinkAggregationGroupVirtualMachineInterfaceRef(ctx context.Context, request *CreateLinkAggregationGroupVirtualMachineInterfaceRefRequest) (*CreateLinkAggregationGroupVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLinkAggregationGroupVirtualMachineInterfaceRefRequest{
			CreateLinkAggregationGroupVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLinkAggregationGroupVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteLinkAggregationGroupVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLinkAggregationGroupVirtualMachineInterfaceRefRequest) (*DeleteLinkAggregationGroupVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLinkAggregationGroupVirtualMachineInterfaceRefRequest{
			DeleteLinkAggregationGroupVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLinkAggregationGroupVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateLinkAggregationGroupTagRef(ctx context.Context, request *CreateLinkAggregationGroupTagRefRequest) (*CreateLinkAggregationGroupTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLinkAggregationGroupTagRefRequest{
			CreateLinkAggregationGroupTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLinkAggregationGroupTagRef(ctx, request)
}

func (s *EventProducerService) DeleteLinkAggregationGroupTagRef(ctx context.Context, request *DeleteLinkAggregationGroupTagRefRequest) (*DeleteLinkAggregationGroupTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLinkAggregationGroupTagRefRequest{
			DeleteLinkAggregationGroupTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLinkAggregationGroupTagRef(ctx, request)
}

func (e *Event_CreateLinkAggregationGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLinkAggregationGroupRequest
	model := request.LinkAggregationGroup
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetLinkAggregationGroup(ctx,
			&GetLinkAggregationGroupRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateLinkAggregationGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateLinkAggregationGroupRequest{
			CreateLinkAggregationGroupRequest: &CreateLinkAggregationGroupRequest{
				LinkAggregationGroup: response.GetLinkAggregationGroup(),
			},
		},
	}, nil
}

func (e *Event_CreateLinkAggregationGroupRequest) ToUpdateEvent() *Event {
	request := e.CreateLinkAggregationGroupRequest
	model := request.LinkAggregationGroup
	return &Event{
		Request: &Event_UpdateLinkAggregationGroupRequest{
			UpdateLinkAggregationGroupRequest: &UpdateLinkAggregationGroupRequest{
				LinkAggregationGroup: model,
				FieldMask:            request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateLinkAggregationGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateLinkAggregationGroupRequest
	response, err := service.UpdateLinkAggregationGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateLinkAggregationGroupRequest{
			UpdateLinkAggregationGroupRequest: &UpdateLinkAggregationGroupRequest{
				LinkAggregationGroup: response.GetLinkAggregationGroup(),
			},
		},
	}, nil
}

func (e *Event_UpdateLinkAggregationGroupRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteLinkAggregationGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLinkAggregationGroupRequest
	_, err := service.DeleteLinkAggregationGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteLinkAggregationGroupRequest{
			DeleteLinkAggregationGroupRequest: &DeleteLinkAggregationGroupRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateLinkAggregationGroupVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLinkAggregationGroupVirtualMachineInterfaceRefRequest
	if _, err := service.CreateLinkAggregationGroupVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLinkAggregationGroupVirtualMachineInterfaceRefRequest{
		CreateLinkAggregationGroupVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLinkAggregationGroupVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLinkAggregationGroupVirtualMachineInterfaceRefRequest
	if _, err := service.DeleteLinkAggregationGroupVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLinkAggregationGroupVirtualMachineInterfaceRefRequest{
		DeleteLinkAggregationGroupVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateLinkAggregationGroupTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLinkAggregationGroupTagRefRequest
	if _, err := service.CreateLinkAggregationGroupTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLinkAggregationGroupTagRefRequest{
		CreateLinkAggregationGroupTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLinkAggregationGroupTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLinkAggregationGroupTagRefRequest
	if _, err := service.DeleteLinkAggregationGroupTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLinkAggregationGroupTagRefRequest{
		DeleteLinkAggregationGroupTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateLinkAggregationGroupPhysicalInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLinkAggregationGroupPhysicalInterfaceRefRequest
	if _, err := service.CreateLinkAggregationGroupPhysicalInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLinkAggregationGroupPhysicalInterfaceRefRequest{
		CreateLinkAggregationGroupPhysicalInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLinkAggregationGroupPhysicalInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLinkAggregationGroupPhysicalInterfaceRefRequest
	if _, err := service.DeleteLinkAggregationGroupPhysicalInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLinkAggregationGroupPhysicalInterfaceRefRequest{
		DeleteLinkAggregationGroupPhysicalInterfaceRefRequest: request,
	}}, nil
}

type LoadbalancerHealthmonitor = models.LoadbalancerHealthmonitor

func (s *BaseService) CreateLoadbalancerHealthmonitor(ctx context.Context, request *CreateLoadbalancerHealthmonitorRequest) (*CreateLoadbalancerHealthmonitorResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerHealthmonitorResponse{
			LoadbalancerHealthmonitor: request.GetLoadbalancerHealthmonitor(),
		}, nil
	}
	return s.Next().CreateLoadbalancerHealthmonitor(ctx, request)
}
func (s *BaseService) UpdateLoadbalancerHealthmonitor(ctx context.Context, request *UpdateLoadbalancerHealthmonitorRequest) (*UpdateLoadbalancerHealthmonitorResponse, error) {
	if s.next == nil {
		return &UpdateLoadbalancerHealthmonitorResponse{
			LoadbalancerHealthmonitor: request.GetLoadbalancerHealthmonitor(),
		}, nil
	}
	return s.Next().UpdateLoadbalancerHealthmonitor(ctx, request)
}
func (s *BaseService) DeleteLoadbalancerHealthmonitor(ctx context.Context, request *DeleteLoadbalancerHealthmonitorRequest) (*DeleteLoadbalancerHealthmonitorResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerHealthmonitorResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteLoadbalancerHealthmonitor(ctx, request)
}
func (s *BaseService) GetLoadbalancerHealthmonitor(ctx context.Context, request *GetLoadbalancerHealthmonitorRequest) (*GetLoadbalancerHealthmonitorResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetLoadbalancerHealthmonitor(ctx, request)
}
func (s *BaseService) ListLoadbalancerHealthmonitor(ctx context.Context, request *ListLoadbalancerHealthmonitorRequest) (*ListLoadbalancerHealthmonitorResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListLoadbalancerHealthmonitor(ctx, request)
}

func (s *BaseService) CreateLoadbalancerHealthmonitorTagRef(ctx context.Context, request *CreateLoadbalancerHealthmonitorTagRefRequest) (*CreateLoadbalancerHealthmonitorTagRefResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerHealthmonitorTagRefResponse{
			ID:                              request.ID,
			LoadbalancerHealthmonitorTagRef: request.GetLoadbalancerHealthmonitorTagRef(),
		}, nil
	}
	return s.Next().CreateLoadbalancerHealthmonitorTagRef(ctx, request)
}

func (s *BaseService) DeleteLoadbalancerHealthmonitorTagRef(ctx context.Context, request *DeleteLoadbalancerHealthmonitorTagRefRequest) (*DeleteLoadbalancerHealthmonitorTagRefResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerHealthmonitorTagRefResponse{
			ID:                              request.ID,
			LoadbalancerHealthmonitorTagRef: request.GetLoadbalancerHealthmonitorTagRef(),
		}, nil
	}
	return s.Next().DeleteLoadbalancerHealthmonitorTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLoadbalancerHealthmonitorTagRef(ctx context.Context, request *CreateLoadbalancerHealthmonitorTagRefRequest) (*CreateLoadbalancerHealthmonitorTagRefResponse, error) {
	refField := models.LoadbalancerHealthmonitorFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerHealthmonitor(ctx, &GetLoadbalancerHealthmonitorRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerHealthmonitor
		obj.AddTagRef(request.LoadbalancerHealthmonitorTagRef)

		_, err = s.BaseService.UpdateLoadbalancerHealthmonitor(ctx, &UpdateLoadbalancerHealthmonitorRequest{
			LoadbalancerHealthmonitor: obj,
			FieldMask:                 types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLoadbalancerHealthmonitorTagRefResponse{
		ID:                              request.ID,
		LoadbalancerHealthmonitorTagRef: request.GetLoadbalancerHealthmonitorTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLoadbalancerHealthmonitorTagRef(ctx context.Context, request *DeleteLoadbalancerHealthmonitorTagRefRequest) (*DeleteLoadbalancerHealthmonitorTagRefResponse, error) {
	refField := models.LoadbalancerHealthmonitorFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerHealthmonitor(ctx, &GetLoadbalancerHealthmonitorRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerHealthmonitor
		obj.RemoveTagRef(request.LoadbalancerHealthmonitorTagRef)

		_, err = s.BaseService.UpdateLoadbalancerHealthmonitor(ctx, &UpdateLoadbalancerHealthmonitorRequest{
			LoadbalancerHealthmonitor: obj,
			FieldMask:                 types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLoadbalancerHealthmonitorTagRefResponse{
		ID:                              request.ID,
		LoadbalancerHealthmonitorTagRef: request.GetLoadbalancerHealthmonitorTagRef(),
	}, nil
}

func (s *EventProducerService) CreateLoadbalancerHealthmonitor(ctx context.Context, request *CreateLoadbalancerHealthmonitorRequest) (*CreateLoadbalancerHealthmonitorResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateLoadbalancerHealthmonitorRequest{
				CreateLoadbalancerHealthmonitorRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerHealthmonitor(ctx, request)
}
func (s *EventProducerService) UpdateLoadbalancerHealthmonitor(ctx context.Context, request *UpdateLoadbalancerHealthmonitorRequest) (*UpdateLoadbalancerHealthmonitorResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateLoadbalancerHealthmonitorRequest{
				UpdateLoadbalancerHealthmonitorRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateLoadbalancerHealthmonitor(ctx, request)
}
func (s *EventProducerService) DeleteLoadbalancerHealthmonitor(ctx context.Context, request *DeleteLoadbalancerHealthmonitorRequest) (*DeleteLoadbalancerHealthmonitorResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteLoadbalancerHealthmonitorRequest{
				DeleteLoadbalancerHealthmonitorRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerHealthmonitor(ctx, request)
}

func (s *EventProducerService) CreateLoadbalancerHealthmonitorTagRef(ctx context.Context, request *CreateLoadbalancerHealthmonitorTagRefRequest) (*CreateLoadbalancerHealthmonitorTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLoadbalancerHealthmonitorTagRefRequest{
			CreateLoadbalancerHealthmonitorTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerHealthmonitorTagRef(ctx, request)
}

func (s *EventProducerService) DeleteLoadbalancerHealthmonitorTagRef(ctx context.Context, request *DeleteLoadbalancerHealthmonitorTagRefRequest) (*DeleteLoadbalancerHealthmonitorTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLoadbalancerHealthmonitorTagRefRequest{
			DeleteLoadbalancerHealthmonitorTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerHealthmonitorTagRef(ctx, request)
}

func (e *Event_CreateLoadbalancerHealthmonitorRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerHealthmonitorRequest
	model := request.LoadbalancerHealthmonitor
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetLoadbalancerHealthmonitor(ctx,
			&GetLoadbalancerHealthmonitorRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateLoadbalancerHealthmonitor(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateLoadbalancerHealthmonitorRequest{
			CreateLoadbalancerHealthmonitorRequest: &CreateLoadbalancerHealthmonitorRequest{
				LoadbalancerHealthmonitor: response.GetLoadbalancerHealthmonitor(),
			},
		},
	}, nil
}

func (e *Event_CreateLoadbalancerHealthmonitorRequest) ToUpdateEvent() *Event {
	request := e.CreateLoadbalancerHealthmonitorRequest
	model := request.LoadbalancerHealthmonitor
	return &Event{
		Request: &Event_UpdateLoadbalancerHealthmonitorRequest{
			UpdateLoadbalancerHealthmonitorRequest: &UpdateLoadbalancerHealthmonitorRequest{
				LoadbalancerHealthmonitor: model,
				FieldMask:                 request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateLoadbalancerHealthmonitorRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateLoadbalancerHealthmonitorRequest
	response, err := service.UpdateLoadbalancerHealthmonitor(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateLoadbalancerHealthmonitorRequest{
			UpdateLoadbalancerHealthmonitorRequest: &UpdateLoadbalancerHealthmonitorRequest{
				LoadbalancerHealthmonitor: response.GetLoadbalancerHealthmonitor(),
			},
		},
	}, nil
}

func (e *Event_UpdateLoadbalancerHealthmonitorRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteLoadbalancerHealthmonitorRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerHealthmonitorRequest
	_, err := service.DeleteLoadbalancerHealthmonitor(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteLoadbalancerHealthmonitorRequest{
			DeleteLoadbalancerHealthmonitorRequest: &DeleteLoadbalancerHealthmonitorRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateLoadbalancerHealthmonitorTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerHealthmonitorTagRefRequest
	if _, err := service.CreateLoadbalancerHealthmonitorTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLoadbalancerHealthmonitorTagRefRequest{
		CreateLoadbalancerHealthmonitorTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLoadbalancerHealthmonitorTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerHealthmonitorTagRefRequest
	if _, err := service.DeleteLoadbalancerHealthmonitorTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLoadbalancerHealthmonitorTagRefRequest{
		DeleteLoadbalancerHealthmonitorTagRefRequest: request,
	}}, nil
}

type LoadbalancerListener = models.LoadbalancerListener

func (s *BaseService) CreateLoadbalancerListener(ctx context.Context, request *CreateLoadbalancerListenerRequest) (*CreateLoadbalancerListenerResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerListenerResponse{
			LoadbalancerListener: request.GetLoadbalancerListener(),
		}, nil
	}
	return s.Next().CreateLoadbalancerListener(ctx, request)
}
func (s *BaseService) UpdateLoadbalancerListener(ctx context.Context, request *UpdateLoadbalancerListenerRequest) (*UpdateLoadbalancerListenerResponse, error) {
	if s.next == nil {
		return &UpdateLoadbalancerListenerResponse{
			LoadbalancerListener: request.GetLoadbalancerListener(),
		}, nil
	}
	return s.Next().UpdateLoadbalancerListener(ctx, request)
}
func (s *BaseService) DeleteLoadbalancerListener(ctx context.Context, request *DeleteLoadbalancerListenerRequest) (*DeleteLoadbalancerListenerResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerListenerResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteLoadbalancerListener(ctx, request)
}
func (s *BaseService) GetLoadbalancerListener(ctx context.Context, request *GetLoadbalancerListenerRequest) (*GetLoadbalancerListenerResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetLoadbalancerListener(ctx, request)
}
func (s *BaseService) ListLoadbalancerListener(ctx context.Context, request *ListLoadbalancerListenerRequest) (*ListLoadbalancerListenerResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListLoadbalancerListener(ctx, request)
}

func (s *BaseService) CreateLoadbalancerListenerLoadbalancerRef(ctx context.Context, request *CreateLoadbalancerListenerLoadbalancerRefRequest) (*CreateLoadbalancerListenerLoadbalancerRefResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerListenerLoadbalancerRefResponse{
			ID:                                  request.ID,
			LoadbalancerListenerLoadbalancerRef: request.GetLoadbalancerListenerLoadbalancerRef(),
		}, nil
	}
	return s.Next().CreateLoadbalancerListenerLoadbalancerRef(ctx, request)
}

func (s *BaseService) DeleteLoadbalancerListenerLoadbalancerRef(ctx context.Context, request *DeleteLoadbalancerListenerLoadbalancerRefRequest) (*DeleteLoadbalancerListenerLoadbalancerRefResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerListenerLoadbalancerRefResponse{
			ID:                                  request.ID,
			LoadbalancerListenerLoadbalancerRef: request.GetLoadbalancerListenerLoadbalancerRef(),
		}, nil
	}
	return s.Next().DeleteLoadbalancerListenerLoadbalancerRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLoadbalancerListenerLoadbalancerRef(ctx context.Context, request *CreateLoadbalancerListenerLoadbalancerRefRequest) (*CreateLoadbalancerListenerLoadbalancerRefResponse, error) {
	refField := models.LoadbalancerListenerFieldLoadbalancerRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerListener(ctx, &GetLoadbalancerListenerRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerListener
		obj.AddLoadbalancerRef(request.LoadbalancerListenerLoadbalancerRef)

		_, err = s.BaseService.UpdateLoadbalancerListener(ctx, &UpdateLoadbalancerListenerRequest{
			LoadbalancerListener: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLoadbalancerListenerLoadbalancerRefResponse{
		ID:                                  request.ID,
		LoadbalancerListenerLoadbalancerRef: request.GetLoadbalancerListenerLoadbalancerRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLoadbalancerListenerLoadbalancerRef(ctx context.Context, request *DeleteLoadbalancerListenerLoadbalancerRefRequest) (*DeleteLoadbalancerListenerLoadbalancerRefResponse, error) {
	refField := models.LoadbalancerListenerFieldLoadbalancerRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerListener(ctx, &GetLoadbalancerListenerRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerListener
		obj.RemoveLoadbalancerRef(request.LoadbalancerListenerLoadbalancerRef)

		_, err = s.BaseService.UpdateLoadbalancerListener(ctx, &UpdateLoadbalancerListenerRequest{
			LoadbalancerListener: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLoadbalancerListenerLoadbalancerRefResponse{
		ID:                                  request.ID,
		LoadbalancerListenerLoadbalancerRef: request.GetLoadbalancerListenerLoadbalancerRef(),
	}, nil
}

func (s *BaseService) CreateLoadbalancerListenerTagRef(ctx context.Context, request *CreateLoadbalancerListenerTagRefRequest) (*CreateLoadbalancerListenerTagRefResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerListenerTagRefResponse{
			ID:                         request.ID,
			LoadbalancerListenerTagRef: request.GetLoadbalancerListenerTagRef(),
		}, nil
	}
	return s.Next().CreateLoadbalancerListenerTagRef(ctx, request)
}

func (s *BaseService) DeleteLoadbalancerListenerTagRef(ctx context.Context, request *DeleteLoadbalancerListenerTagRefRequest) (*DeleteLoadbalancerListenerTagRefResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerListenerTagRefResponse{
			ID:                         request.ID,
			LoadbalancerListenerTagRef: request.GetLoadbalancerListenerTagRef(),
		}, nil
	}
	return s.Next().DeleteLoadbalancerListenerTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLoadbalancerListenerTagRef(ctx context.Context, request *CreateLoadbalancerListenerTagRefRequest) (*CreateLoadbalancerListenerTagRefResponse, error) {
	refField := models.LoadbalancerListenerFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerListener(ctx, &GetLoadbalancerListenerRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerListener
		obj.AddTagRef(request.LoadbalancerListenerTagRef)

		_, err = s.BaseService.UpdateLoadbalancerListener(ctx, &UpdateLoadbalancerListenerRequest{
			LoadbalancerListener: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLoadbalancerListenerTagRefResponse{
		ID:                         request.ID,
		LoadbalancerListenerTagRef: request.GetLoadbalancerListenerTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLoadbalancerListenerTagRef(ctx context.Context, request *DeleteLoadbalancerListenerTagRefRequest) (*DeleteLoadbalancerListenerTagRefResponse, error) {
	refField := models.LoadbalancerListenerFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerListener(ctx, &GetLoadbalancerListenerRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerListener
		obj.RemoveTagRef(request.LoadbalancerListenerTagRef)

		_, err = s.BaseService.UpdateLoadbalancerListener(ctx, &UpdateLoadbalancerListenerRequest{
			LoadbalancerListener: obj,
			FieldMask:            types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLoadbalancerListenerTagRefResponse{
		ID:                         request.ID,
		LoadbalancerListenerTagRef: request.GetLoadbalancerListenerTagRef(),
	}, nil
}

func (s *EventProducerService) CreateLoadbalancerListener(ctx context.Context, request *CreateLoadbalancerListenerRequest) (*CreateLoadbalancerListenerResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateLoadbalancerListenerRequest{
				CreateLoadbalancerListenerRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerListener(ctx, request)
}
func (s *EventProducerService) UpdateLoadbalancerListener(ctx context.Context, request *UpdateLoadbalancerListenerRequest) (*UpdateLoadbalancerListenerResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateLoadbalancerListenerRequest{
				UpdateLoadbalancerListenerRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateLoadbalancerListener(ctx, request)
}
func (s *EventProducerService) DeleteLoadbalancerListener(ctx context.Context, request *DeleteLoadbalancerListenerRequest) (*DeleteLoadbalancerListenerResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteLoadbalancerListenerRequest{
				DeleteLoadbalancerListenerRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerListener(ctx, request)
}

func (s *EventProducerService) CreateLoadbalancerListenerLoadbalancerRef(ctx context.Context, request *CreateLoadbalancerListenerLoadbalancerRefRequest) (*CreateLoadbalancerListenerLoadbalancerRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLoadbalancerListenerLoadbalancerRefRequest{
			CreateLoadbalancerListenerLoadbalancerRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerListenerLoadbalancerRef(ctx, request)
}

func (s *EventProducerService) DeleteLoadbalancerListenerLoadbalancerRef(ctx context.Context, request *DeleteLoadbalancerListenerLoadbalancerRefRequest) (*DeleteLoadbalancerListenerLoadbalancerRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLoadbalancerListenerLoadbalancerRefRequest{
			DeleteLoadbalancerListenerLoadbalancerRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerListenerLoadbalancerRef(ctx, request)
}

func (s *EventProducerService) CreateLoadbalancerListenerTagRef(ctx context.Context, request *CreateLoadbalancerListenerTagRefRequest) (*CreateLoadbalancerListenerTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLoadbalancerListenerTagRefRequest{
			CreateLoadbalancerListenerTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerListenerTagRef(ctx, request)
}

func (s *EventProducerService) DeleteLoadbalancerListenerTagRef(ctx context.Context, request *DeleteLoadbalancerListenerTagRefRequest) (*DeleteLoadbalancerListenerTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLoadbalancerListenerTagRefRequest{
			DeleteLoadbalancerListenerTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerListenerTagRef(ctx, request)
}

func (e *Event_CreateLoadbalancerListenerRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerListenerRequest
	model := request.LoadbalancerListener
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetLoadbalancerListener(ctx,
			&GetLoadbalancerListenerRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateLoadbalancerListener(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateLoadbalancerListenerRequest{
			CreateLoadbalancerListenerRequest: &CreateLoadbalancerListenerRequest{
				LoadbalancerListener: response.GetLoadbalancerListener(),
			},
		},
	}, nil
}

func (e *Event_CreateLoadbalancerListenerRequest) ToUpdateEvent() *Event {
	request := e.CreateLoadbalancerListenerRequest
	model := request.LoadbalancerListener
	return &Event{
		Request: &Event_UpdateLoadbalancerListenerRequest{
			UpdateLoadbalancerListenerRequest: &UpdateLoadbalancerListenerRequest{
				LoadbalancerListener: model,
				FieldMask:            request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateLoadbalancerListenerRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateLoadbalancerListenerRequest
	response, err := service.UpdateLoadbalancerListener(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateLoadbalancerListenerRequest{
			UpdateLoadbalancerListenerRequest: &UpdateLoadbalancerListenerRequest{
				LoadbalancerListener: response.GetLoadbalancerListener(),
			},
		},
	}, nil
}

func (e *Event_UpdateLoadbalancerListenerRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteLoadbalancerListenerRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerListenerRequest
	_, err := service.DeleteLoadbalancerListener(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteLoadbalancerListenerRequest{
			DeleteLoadbalancerListenerRequest: &DeleteLoadbalancerListenerRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateLoadbalancerListenerLoadbalancerRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerListenerLoadbalancerRefRequest
	if _, err := service.CreateLoadbalancerListenerLoadbalancerRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLoadbalancerListenerLoadbalancerRefRequest{
		CreateLoadbalancerListenerLoadbalancerRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLoadbalancerListenerLoadbalancerRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerListenerLoadbalancerRefRequest
	if _, err := service.DeleteLoadbalancerListenerLoadbalancerRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLoadbalancerListenerLoadbalancerRefRequest{
		DeleteLoadbalancerListenerLoadbalancerRefRequest: request,
	}}, nil
}

func (e *Event_CreateLoadbalancerListenerTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerListenerTagRefRequest
	if _, err := service.CreateLoadbalancerListenerTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLoadbalancerListenerTagRefRequest{
		CreateLoadbalancerListenerTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLoadbalancerListenerTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerListenerTagRefRequest
	if _, err := service.DeleteLoadbalancerListenerTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLoadbalancerListenerTagRefRequest{
		DeleteLoadbalancerListenerTagRefRequest: request,
	}}, nil
}

type LoadbalancerMember = models.LoadbalancerMember

func (s *BaseService) CreateLoadbalancerMember(ctx context.Context, request *CreateLoadbalancerMemberRequest) (*CreateLoadbalancerMemberResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerMemberResponse{
			LoadbalancerMember: request.GetLoadbalancerMember(),
		}, nil
	}
	return s.Next().CreateLoadbalancerMember(ctx, request)
}
func (s *BaseService) UpdateLoadbalancerMember(ctx context.Context, request *UpdateLoadbalancerMemberRequest) (*UpdateLoadbalancerMemberResponse, error) {
	if s.next == nil {
		return &UpdateLoadbalancerMemberResponse{
			LoadbalancerMember: request.GetLoadbalancerMember(),
		}, nil
	}
	return s.Next().UpdateLoadbalancerMember(ctx, request)
}
func (s *BaseService) DeleteLoadbalancerMember(ctx context.Context, request *DeleteLoadbalancerMemberRequest) (*DeleteLoadbalancerMemberResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerMemberResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteLoadbalancerMember(ctx, request)
}
func (s *BaseService) GetLoadbalancerMember(ctx context.Context, request *GetLoadbalancerMemberRequest) (*GetLoadbalancerMemberResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetLoadbalancerMember(ctx, request)
}
func (s *BaseService) ListLoadbalancerMember(ctx context.Context, request *ListLoadbalancerMemberRequest) (*ListLoadbalancerMemberResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListLoadbalancerMember(ctx, request)
}

func (s *BaseService) CreateLoadbalancerMemberTagRef(ctx context.Context, request *CreateLoadbalancerMemberTagRefRequest) (*CreateLoadbalancerMemberTagRefResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerMemberTagRefResponse{
			ID:                       request.ID,
			LoadbalancerMemberTagRef: request.GetLoadbalancerMemberTagRef(),
		}, nil
	}
	return s.Next().CreateLoadbalancerMemberTagRef(ctx, request)
}

func (s *BaseService) DeleteLoadbalancerMemberTagRef(ctx context.Context, request *DeleteLoadbalancerMemberTagRefRequest) (*DeleteLoadbalancerMemberTagRefResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerMemberTagRefResponse{
			ID:                       request.ID,
			LoadbalancerMemberTagRef: request.GetLoadbalancerMemberTagRef(),
		}, nil
	}
	return s.Next().DeleteLoadbalancerMemberTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLoadbalancerMemberTagRef(ctx context.Context, request *CreateLoadbalancerMemberTagRefRequest) (*CreateLoadbalancerMemberTagRefResponse, error) {
	refField := models.LoadbalancerMemberFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerMember(ctx, &GetLoadbalancerMemberRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerMember
		obj.AddTagRef(request.LoadbalancerMemberTagRef)

		_, err = s.BaseService.UpdateLoadbalancerMember(ctx, &UpdateLoadbalancerMemberRequest{
			LoadbalancerMember: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLoadbalancerMemberTagRefResponse{
		ID:                       request.ID,
		LoadbalancerMemberTagRef: request.GetLoadbalancerMemberTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLoadbalancerMemberTagRef(ctx context.Context, request *DeleteLoadbalancerMemberTagRefRequest) (*DeleteLoadbalancerMemberTagRefResponse, error) {
	refField := models.LoadbalancerMemberFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerMember(ctx, &GetLoadbalancerMemberRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerMember
		obj.RemoveTagRef(request.LoadbalancerMemberTagRef)

		_, err = s.BaseService.UpdateLoadbalancerMember(ctx, &UpdateLoadbalancerMemberRequest{
			LoadbalancerMember: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLoadbalancerMemberTagRefResponse{
		ID:                       request.ID,
		LoadbalancerMemberTagRef: request.GetLoadbalancerMemberTagRef(),
	}, nil
}

func (s *EventProducerService) CreateLoadbalancerMember(ctx context.Context, request *CreateLoadbalancerMemberRequest) (*CreateLoadbalancerMemberResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateLoadbalancerMemberRequest{
				CreateLoadbalancerMemberRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerMember(ctx, request)
}
func (s *EventProducerService) UpdateLoadbalancerMember(ctx context.Context, request *UpdateLoadbalancerMemberRequest) (*UpdateLoadbalancerMemberResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateLoadbalancerMemberRequest{
				UpdateLoadbalancerMemberRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateLoadbalancerMember(ctx, request)
}
func (s *EventProducerService) DeleteLoadbalancerMember(ctx context.Context, request *DeleteLoadbalancerMemberRequest) (*DeleteLoadbalancerMemberResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteLoadbalancerMemberRequest{
				DeleteLoadbalancerMemberRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerMember(ctx, request)
}

func (s *EventProducerService) CreateLoadbalancerMemberTagRef(ctx context.Context, request *CreateLoadbalancerMemberTagRefRequest) (*CreateLoadbalancerMemberTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLoadbalancerMemberTagRefRequest{
			CreateLoadbalancerMemberTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerMemberTagRef(ctx, request)
}

func (s *EventProducerService) DeleteLoadbalancerMemberTagRef(ctx context.Context, request *DeleteLoadbalancerMemberTagRefRequest) (*DeleteLoadbalancerMemberTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLoadbalancerMemberTagRefRequest{
			DeleteLoadbalancerMemberTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerMemberTagRef(ctx, request)
}

func (e *Event_CreateLoadbalancerMemberRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerMemberRequest
	model := request.LoadbalancerMember
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetLoadbalancerMember(ctx,
			&GetLoadbalancerMemberRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateLoadbalancerMember(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateLoadbalancerMemberRequest{
			CreateLoadbalancerMemberRequest: &CreateLoadbalancerMemberRequest{
				LoadbalancerMember: response.GetLoadbalancerMember(),
			},
		},
	}, nil
}

func (e *Event_CreateLoadbalancerMemberRequest) ToUpdateEvent() *Event {
	request := e.CreateLoadbalancerMemberRequest
	model := request.LoadbalancerMember
	return &Event{
		Request: &Event_UpdateLoadbalancerMemberRequest{
			UpdateLoadbalancerMemberRequest: &UpdateLoadbalancerMemberRequest{
				LoadbalancerMember: model,
				FieldMask:          request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateLoadbalancerMemberRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateLoadbalancerMemberRequest
	response, err := service.UpdateLoadbalancerMember(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateLoadbalancerMemberRequest{
			UpdateLoadbalancerMemberRequest: &UpdateLoadbalancerMemberRequest{
				LoadbalancerMember: response.GetLoadbalancerMember(),
			},
		},
	}, nil
}

func (e *Event_UpdateLoadbalancerMemberRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteLoadbalancerMemberRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerMemberRequest
	_, err := service.DeleteLoadbalancerMember(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteLoadbalancerMemberRequest{
			DeleteLoadbalancerMemberRequest: &DeleteLoadbalancerMemberRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateLoadbalancerMemberTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerMemberTagRefRequest
	if _, err := service.CreateLoadbalancerMemberTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLoadbalancerMemberTagRefRequest{
		CreateLoadbalancerMemberTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLoadbalancerMemberTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerMemberTagRefRequest
	if _, err := service.DeleteLoadbalancerMemberTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLoadbalancerMemberTagRefRequest{
		DeleteLoadbalancerMemberTagRefRequest: request,
	}}, nil
}

type LoadbalancerPool = models.LoadbalancerPool

func (s *BaseService) CreateLoadbalancerPool(ctx context.Context, request *CreateLoadbalancerPoolRequest) (*CreateLoadbalancerPoolResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerPoolResponse{
			LoadbalancerPool: request.GetLoadbalancerPool(),
		}, nil
	}
	return s.Next().CreateLoadbalancerPool(ctx, request)
}
func (s *BaseService) UpdateLoadbalancerPool(ctx context.Context, request *UpdateLoadbalancerPoolRequest) (*UpdateLoadbalancerPoolResponse, error) {
	if s.next == nil {
		return &UpdateLoadbalancerPoolResponse{
			LoadbalancerPool: request.GetLoadbalancerPool(),
		}, nil
	}
	return s.Next().UpdateLoadbalancerPool(ctx, request)
}
func (s *BaseService) DeleteLoadbalancerPool(ctx context.Context, request *DeleteLoadbalancerPoolRequest) (*DeleteLoadbalancerPoolResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerPoolResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteLoadbalancerPool(ctx, request)
}
func (s *BaseService) GetLoadbalancerPool(ctx context.Context, request *GetLoadbalancerPoolRequest) (*GetLoadbalancerPoolResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetLoadbalancerPool(ctx, request)
}
func (s *BaseService) ListLoadbalancerPool(ctx context.Context, request *ListLoadbalancerPoolRequest) (*ListLoadbalancerPoolResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListLoadbalancerPool(ctx, request)
}

func (s *BaseService) CreateLoadbalancerPoolServiceInstanceRef(ctx context.Context, request *CreateLoadbalancerPoolServiceInstanceRefRequest) (*CreateLoadbalancerPoolServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerPoolServiceInstanceRefResponse{
			ID:                                 request.ID,
			LoadbalancerPoolServiceInstanceRef: request.GetLoadbalancerPoolServiceInstanceRef(),
		}, nil
	}
	return s.Next().CreateLoadbalancerPoolServiceInstanceRef(ctx, request)
}

func (s *BaseService) DeleteLoadbalancerPoolServiceInstanceRef(ctx context.Context, request *DeleteLoadbalancerPoolServiceInstanceRefRequest) (*DeleteLoadbalancerPoolServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerPoolServiceInstanceRefResponse{
			ID:                                 request.ID,
			LoadbalancerPoolServiceInstanceRef: request.GetLoadbalancerPoolServiceInstanceRef(),
		}, nil
	}
	return s.Next().DeleteLoadbalancerPoolServiceInstanceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLoadbalancerPoolServiceInstanceRef(ctx context.Context, request *CreateLoadbalancerPoolServiceInstanceRefRequest) (*CreateLoadbalancerPoolServiceInstanceRefResponse, error) {
	refField := models.LoadbalancerPoolFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerPool(ctx, &GetLoadbalancerPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerPool
		obj.AddServiceInstanceRef(request.LoadbalancerPoolServiceInstanceRef)

		_, err = s.BaseService.UpdateLoadbalancerPool(ctx, &UpdateLoadbalancerPoolRequest{
			LoadbalancerPool: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLoadbalancerPoolServiceInstanceRefResponse{
		ID:                                 request.ID,
		LoadbalancerPoolServiceInstanceRef: request.GetLoadbalancerPoolServiceInstanceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLoadbalancerPoolServiceInstanceRef(ctx context.Context, request *DeleteLoadbalancerPoolServiceInstanceRefRequest) (*DeleteLoadbalancerPoolServiceInstanceRefResponse, error) {
	refField := models.LoadbalancerPoolFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerPool(ctx, &GetLoadbalancerPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerPool
		obj.RemoveServiceInstanceRef(request.LoadbalancerPoolServiceInstanceRef)

		_, err = s.BaseService.UpdateLoadbalancerPool(ctx, &UpdateLoadbalancerPoolRequest{
			LoadbalancerPool: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLoadbalancerPoolServiceInstanceRefResponse{
		ID:                                 request.ID,
		LoadbalancerPoolServiceInstanceRef: request.GetLoadbalancerPoolServiceInstanceRef(),
	}, nil
}

func (s *BaseService) CreateLoadbalancerPoolVirtualMachineInterfaceRef(ctx context.Context, request *CreateLoadbalancerPoolVirtualMachineInterfaceRefRequest) (*CreateLoadbalancerPoolVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerPoolVirtualMachineInterfaceRefResponse{
			ID: request.ID,
			LoadbalancerPoolVirtualMachineInterfaceRef: request.GetLoadbalancerPoolVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().CreateLoadbalancerPoolVirtualMachineInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteLoadbalancerPoolVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLoadbalancerPoolVirtualMachineInterfaceRefRequest) (*DeleteLoadbalancerPoolVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerPoolVirtualMachineInterfaceRefResponse{
			ID: request.ID,
			LoadbalancerPoolVirtualMachineInterfaceRef: request.GetLoadbalancerPoolVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteLoadbalancerPoolVirtualMachineInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLoadbalancerPoolVirtualMachineInterfaceRef(ctx context.Context, request *CreateLoadbalancerPoolVirtualMachineInterfaceRefRequest) (*CreateLoadbalancerPoolVirtualMachineInterfaceRefResponse, error) {
	refField := models.LoadbalancerPoolFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerPool(ctx, &GetLoadbalancerPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerPool
		obj.AddVirtualMachineInterfaceRef(request.LoadbalancerPoolVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateLoadbalancerPool(ctx, &UpdateLoadbalancerPoolRequest{
			LoadbalancerPool: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLoadbalancerPoolVirtualMachineInterfaceRefResponse{
		ID: request.ID,
		LoadbalancerPoolVirtualMachineInterfaceRef: request.GetLoadbalancerPoolVirtualMachineInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLoadbalancerPoolVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLoadbalancerPoolVirtualMachineInterfaceRefRequest) (*DeleteLoadbalancerPoolVirtualMachineInterfaceRefResponse, error) {
	refField := models.LoadbalancerPoolFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerPool(ctx, &GetLoadbalancerPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerPool
		obj.RemoveVirtualMachineInterfaceRef(request.LoadbalancerPoolVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateLoadbalancerPool(ctx, &UpdateLoadbalancerPoolRequest{
			LoadbalancerPool: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLoadbalancerPoolVirtualMachineInterfaceRefResponse{
		ID: request.ID,
		LoadbalancerPoolVirtualMachineInterfaceRef: request.GetLoadbalancerPoolVirtualMachineInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateLoadbalancerPoolTagRef(ctx context.Context, request *CreateLoadbalancerPoolTagRefRequest) (*CreateLoadbalancerPoolTagRefResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerPoolTagRefResponse{
			ID:                     request.ID,
			LoadbalancerPoolTagRef: request.GetLoadbalancerPoolTagRef(),
		}, nil
	}
	return s.Next().CreateLoadbalancerPoolTagRef(ctx, request)
}

func (s *BaseService) DeleteLoadbalancerPoolTagRef(ctx context.Context, request *DeleteLoadbalancerPoolTagRefRequest) (*DeleteLoadbalancerPoolTagRefResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerPoolTagRefResponse{
			ID:                     request.ID,
			LoadbalancerPoolTagRef: request.GetLoadbalancerPoolTagRef(),
		}, nil
	}
	return s.Next().DeleteLoadbalancerPoolTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLoadbalancerPoolTagRef(ctx context.Context, request *CreateLoadbalancerPoolTagRefRequest) (*CreateLoadbalancerPoolTagRefResponse, error) {
	refField := models.LoadbalancerPoolFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerPool(ctx, &GetLoadbalancerPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerPool
		obj.AddTagRef(request.LoadbalancerPoolTagRef)

		_, err = s.BaseService.UpdateLoadbalancerPool(ctx, &UpdateLoadbalancerPoolRequest{
			LoadbalancerPool: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLoadbalancerPoolTagRefResponse{
		ID:                     request.ID,
		LoadbalancerPoolTagRef: request.GetLoadbalancerPoolTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLoadbalancerPoolTagRef(ctx context.Context, request *DeleteLoadbalancerPoolTagRefRequest) (*DeleteLoadbalancerPoolTagRefResponse, error) {
	refField := models.LoadbalancerPoolFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerPool(ctx, &GetLoadbalancerPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerPool
		obj.RemoveTagRef(request.LoadbalancerPoolTagRef)

		_, err = s.BaseService.UpdateLoadbalancerPool(ctx, &UpdateLoadbalancerPoolRequest{
			LoadbalancerPool: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLoadbalancerPoolTagRefResponse{
		ID:                     request.ID,
		LoadbalancerPoolTagRef: request.GetLoadbalancerPoolTagRef(),
	}, nil
}

func (s *BaseService) CreateLoadbalancerPoolLoadbalancerHealthmonitorRef(ctx context.Context, request *CreateLoadbalancerPoolLoadbalancerHealthmonitorRefRequest) (*CreateLoadbalancerPoolLoadbalancerHealthmonitorRefResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerPoolLoadbalancerHealthmonitorRefResponse{
			ID: request.ID,
			LoadbalancerPoolLoadbalancerHealthmonitorRef: request.GetLoadbalancerPoolLoadbalancerHealthmonitorRef(),
		}, nil
	}
	return s.Next().CreateLoadbalancerPoolLoadbalancerHealthmonitorRef(ctx, request)
}

func (s *BaseService) DeleteLoadbalancerPoolLoadbalancerHealthmonitorRef(ctx context.Context, request *DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefRequest) (*DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefResponse{
			ID: request.ID,
			LoadbalancerPoolLoadbalancerHealthmonitorRef: request.GetLoadbalancerPoolLoadbalancerHealthmonitorRef(),
		}, nil
	}
	return s.Next().DeleteLoadbalancerPoolLoadbalancerHealthmonitorRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLoadbalancerPoolLoadbalancerHealthmonitorRef(ctx context.Context, request *CreateLoadbalancerPoolLoadbalancerHealthmonitorRefRequest) (*CreateLoadbalancerPoolLoadbalancerHealthmonitorRefResponse, error) {
	refField := models.LoadbalancerPoolFieldLoadbalancerHealthmonitorRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerPool(ctx, &GetLoadbalancerPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerPool
		obj.AddLoadbalancerHealthmonitorRef(request.LoadbalancerPoolLoadbalancerHealthmonitorRef)

		_, err = s.BaseService.UpdateLoadbalancerPool(ctx, &UpdateLoadbalancerPoolRequest{
			LoadbalancerPool: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLoadbalancerPoolLoadbalancerHealthmonitorRefResponse{
		ID: request.ID,
		LoadbalancerPoolLoadbalancerHealthmonitorRef: request.GetLoadbalancerPoolLoadbalancerHealthmonitorRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLoadbalancerPoolLoadbalancerHealthmonitorRef(ctx context.Context, request *DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefRequest) (*DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefResponse, error) {
	refField := models.LoadbalancerPoolFieldLoadbalancerHealthmonitorRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerPool(ctx, &GetLoadbalancerPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerPool
		obj.RemoveLoadbalancerHealthmonitorRef(request.LoadbalancerPoolLoadbalancerHealthmonitorRef)

		_, err = s.BaseService.UpdateLoadbalancerPool(ctx, &UpdateLoadbalancerPoolRequest{
			LoadbalancerPool: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefResponse{
		ID: request.ID,
		LoadbalancerPoolLoadbalancerHealthmonitorRef: request.GetLoadbalancerPoolLoadbalancerHealthmonitorRef(),
	}, nil
}

func (s *BaseService) CreateLoadbalancerPoolLoadbalancerListenerRef(ctx context.Context, request *CreateLoadbalancerPoolLoadbalancerListenerRefRequest) (*CreateLoadbalancerPoolLoadbalancerListenerRefResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerPoolLoadbalancerListenerRefResponse{
			ID:                                      request.ID,
			LoadbalancerPoolLoadbalancerListenerRef: request.GetLoadbalancerPoolLoadbalancerListenerRef(),
		}, nil
	}
	return s.Next().CreateLoadbalancerPoolLoadbalancerListenerRef(ctx, request)
}

func (s *BaseService) DeleteLoadbalancerPoolLoadbalancerListenerRef(ctx context.Context, request *DeleteLoadbalancerPoolLoadbalancerListenerRefRequest) (*DeleteLoadbalancerPoolLoadbalancerListenerRefResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerPoolLoadbalancerListenerRefResponse{
			ID:                                      request.ID,
			LoadbalancerPoolLoadbalancerListenerRef: request.GetLoadbalancerPoolLoadbalancerListenerRef(),
		}, nil
	}
	return s.Next().DeleteLoadbalancerPoolLoadbalancerListenerRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLoadbalancerPoolLoadbalancerListenerRef(ctx context.Context, request *CreateLoadbalancerPoolLoadbalancerListenerRefRequest) (*CreateLoadbalancerPoolLoadbalancerListenerRefResponse, error) {
	refField := models.LoadbalancerPoolFieldLoadbalancerListenerRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerPool(ctx, &GetLoadbalancerPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerPool
		obj.AddLoadbalancerListenerRef(request.LoadbalancerPoolLoadbalancerListenerRef)

		_, err = s.BaseService.UpdateLoadbalancerPool(ctx, &UpdateLoadbalancerPoolRequest{
			LoadbalancerPool: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLoadbalancerPoolLoadbalancerListenerRefResponse{
		ID:                                      request.ID,
		LoadbalancerPoolLoadbalancerListenerRef: request.GetLoadbalancerPoolLoadbalancerListenerRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLoadbalancerPoolLoadbalancerListenerRef(ctx context.Context, request *DeleteLoadbalancerPoolLoadbalancerListenerRefRequest) (*DeleteLoadbalancerPoolLoadbalancerListenerRefResponse, error) {
	refField := models.LoadbalancerPoolFieldLoadbalancerListenerRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerPool(ctx, &GetLoadbalancerPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerPool
		obj.RemoveLoadbalancerListenerRef(request.LoadbalancerPoolLoadbalancerListenerRef)

		_, err = s.BaseService.UpdateLoadbalancerPool(ctx, &UpdateLoadbalancerPoolRequest{
			LoadbalancerPool: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLoadbalancerPoolLoadbalancerListenerRefResponse{
		ID:                                      request.ID,
		LoadbalancerPoolLoadbalancerListenerRef: request.GetLoadbalancerPoolLoadbalancerListenerRef(),
	}, nil
}

func (s *BaseService) CreateLoadbalancerPoolServiceApplianceSetRef(ctx context.Context, request *CreateLoadbalancerPoolServiceApplianceSetRefRequest) (*CreateLoadbalancerPoolServiceApplianceSetRefResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerPoolServiceApplianceSetRefResponse{
			ID:                                     request.ID,
			LoadbalancerPoolServiceApplianceSetRef: request.GetLoadbalancerPoolServiceApplianceSetRef(),
		}, nil
	}
	return s.Next().CreateLoadbalancerPoolServiceApplianceSetRef(ctx, request)
}

func (s *BaseService) DeleteLoadbalancerPoolServiceApplianceSetRef(ctx context.Context, request *DeleteLoadbalancerPoolServiceApplianceSetRefRequest) (*DeleteLoadbalancerPoolServiceApplianceSetRefResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerPoolServiceApplianceSetRefResponse{
			ID:                                     request.ID,
			LoadbalancerPoolServiceApplianceSetRef: request.GetLoadbalancerPoolServiceApplianceSetRef(),
		}, nil
	}
	return s.Next().DeleteLoadbalancerPoolServiceApplianceSetRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLoadbalancerPoolServiceApplianceSetRef(ctx context.Context, request *CreateLoadbalancerPoolServiceApplianceSetRefRequest) (*CreateLoadbalancerPoolServiceApplianceSetRefResponse, error) {
	refField := models.LoadbalancerPoolFieldServiceApplianceSetRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerPool(ctx, &GetLoadbalancerPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerPool
		obj.AddServiceApplianceSetRef(request.LoadbalancerPoolServiceApplianceSetRef)

		_, err = s.BaseService.UpdateLoadbalancerPool(ctx, &UpdateLoadbalancerPoolRequest{
			LoadbalancerPool: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLoadbalancerPoolServiceApplianceSetRefResponse{
		ID:                                     request.ID,
		LoadbalancerPoolServiceApplianceSetRef: request.GetLoadbalancerPoolServiceApplianceSetRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLoadbalancerPoolServiceApplianceSetRef(ctx context.Context, request *DeleteLoadbalancerPoolServiceApplianceSetRefRequest) (*DeleteLoadbalancerPoolServiceApplianceSetRefResponse, error) {
	refField := models.LoadbalancerPoolFieldServiceApplianceSetRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancerPool(ctx, &GetLoadbalancerPoolRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LoadbalancerPool
		obj.RemoveServiceApplianceSetRef(request.LoadbalancerPoolServiceApplianceSetRef)

		_, err = s.BaseService.UpdateLoadbalancerPool(ctx, &UpdateLoadbalancerPoolRequest{
			LoadbalancerPool: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLoadbalancerPoolServiceApplianceSetRefResponse{
		ID:                                     request.ID,
		LoadbalancerPoolServiceApplianceSetRef: request.GetLoadbalancerPoolServiceApplianceSetRef(),
	}, nil
}

func (s *EventProducerService) CreateLoadbalancerPool(ctx context.Context, request *CreateLoadbalancerPoolRequest) (*CreateLoadbalancerPoolResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateLoadbalancerPoolRequest{
				CreateLoadbalancerPoolRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerPool(ctx, request)
}
func (s *EventProducerService) UpdateLoadbalancerPool(ctx context.Context, request *UpdateLoadbalancerPoolRequest) (*UpdateLoadbalancerPoolResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateLoadbalancerPoolRequest{
				UpdateLoadbalancerPoolRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateLoadbalancerPool(ctx, request)
}
func (s *EventProducerService) DeleteLoadbalancerPool(ctx context.Context, request *DeleteLoadbalancerPoolRequest) (*DeleteLoadbalancerPoolResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteLoadbalancerPoolRequest{
				DeleteLoadbalancerPoolRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerPool(ctx, request)
}

func (s *EventProducerService) CreateLoadbalancerPoolServiceInstanceRef(ctx context.Context, request *CreateLoadbalancerPoolServiceInstanceRefRequest) (*CreateLoadbalancerPoolServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLoadbalancerPoolServiceInstanceRefRequest{
			CreateLoadbalancerPoolServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerPoolServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) DeleteLoadbalancerPoolServiceInstanceRef(ctx context.Context, request *DeleteLoadbalancerPoolServiceInstanceRefRequest) (*DeleteLoadbalancerPoolServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLoadbalancerPoolServiceInstanceRefRequest{
			DeleteLoadbalancerPoolServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerPoolServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) CreateLoadbalancerPoolVirtualMachineInterfaceRef(ctx context.Context, request *CreateLoadbalancerPoolVirtualMachineInterfaceRefRequest) (*CreateLoadbalancerPoolVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLoadbalancerPoolVirtualMachineInterfaceRefRequest{
			CreateLoadbalancerPoolVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerPoolVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteLoadbalancerPoolVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLoadbalancerPoolVirtualMachineInterfaceRefRequest) (*DeleteLoadbalancerPoolVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLoadbalancerPoolVirtualMachineInterfaceRefRequest{
			DeleteLoadbalancerPoolVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerPoolVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateLoadbalancerPoolTagRef(ctx context.Context, request *CreateLoadbalancerPoolTagRefRequest) (*CreateLoadbalancerPoolTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLoadbalancerPoolTagRefRequest{
			CreateLoadbalancerPoolTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerPoolTagRef(ctx, request)
}

func (s *EventProducerService) DeleteLoadbalancerPoolTagRef(ctx context.Context, request *DeleteLoadbalancerPoolTagRefRequest) (*DeleteLoadbalancerPoolTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLoadbalancerPoolTagRefRequest{
			DeleteLoadbalancerPoolTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerPoolTagRef(ctx, request)
}

func (s *EventProducerService) CreateLoadbalancerPoolLoadbalancerHealthmonitorRef(ctx context.Context, request *CreateLoadbalancerPoolLoadbalancerHealthmonitorRefRequest) (*CreateLoadbalancerPoolLoadbalancerHealthmonitorRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLoadbalancerPoolLoadbalancerHealthmonitorRefRequest{
			CreateLoadbalancerPoolLoadbalancerHealthmonitorRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerPoolLoadbalancerHealthmonitorRef(ctx, request)
}

func (s *EventProducerService) DeleteLoadbalancerPoolLoadbalancerHealthmonitorRef(ctx context.Context, request *DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefRequest) (*DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefRequest{
			DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerPoolLoadbalancerHealthmonitorRef(ctx, request)
}

func (s *EventProducerService) CreateLoadbalancerPoolLoadbalancerListenerRef(ctx context.Context, request *CreateLoadbalancerPoolLoadbalancerListenerRefRequest) (*CreateLoadbalancerPoolLoadbalancerListenerRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLoadbalancerPoolLoadbalancerListenerRefRequest{
			CreateLoadbalancerPoolLoadbalancerListenerRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerPoolLoadbalancerListenerRef(ctx, request)
}

func (s *EventProducerService) DeleteLoadbalancerPoolLoadbalancerListenerRef(ctx context.Context, request *DeleteLoadbalancerPoolLoadbalancerListenerRefRequest) (*DeleteLoadbalancerPoolLoadbalancerListenerRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLoadbalancerPoolLoadbalancerListenerRefRequest{
			DeleteLoadbalancerPoolLoadbalancerListenerRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerPoolLoadbalancerListenerRef(ctx, request)
}

func (s *EventProducerService) CreateLoadbalancerPoolServiceApplianceSetRef(ctx context.Context, request *CreateLoadbalancerPoolServiceApplianceSetRefRequest) (*CreateLoadbalancerPoolServiceApplianceSetRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLoadbalancerPoolServiceApplianceSetRefRequest{
			CreateLoadbalancerPoolServiceApplianceSetRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerPoolServiceApplianceSetRef(ctx, request)
}

func (s *EventProducerService) DeleteLoadbalancerPoolServiceApplianceSetRef(ctx context.Context, request *DeleteLoadbalancerPoolServiceApplianceSetRefRequest) (*DeleteLoadbalancerPoolServiceApplianceSetRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLoadbalancerPoolServiceApplianceSetRefRequest{
			DeleteLoadbalancerPoolServiceApplianceSetRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerPoolServiceApplianceSetRef(ctx, request)
}

func (e *Event_CreateLoadbalancerPoolRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerPoolRequest
	model := request.LoadbalancerPool
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetLoadbalancerPool(ctx,
			&GetLoadbalancerPoolRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateLoadbalancerPool(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateLoadbalancerPoolRequest{
			CreateLoadbalancerPoolRequest: &CreateLoadbalancerPoolRequest{
				LoadbalancerPool: response.GetLoadbalancerPool(),
			},
		},
	}, nil
}

func (e *Event_CreateLoadbalancerPoolRequest) ToUpdateEvent() *Event {
	request := e.CreateLoadbalancerPoolRequest
	model := request.LoadbalancerPool
	return &Event{
		Request: &Event_UpdateLoadbalancerPoolRequest{
			UpdateLoadbalancerPoolRequest: &UpdateLoadbalancerPoolRequest{
				LoadbalancerPool: model,
				FieldMask:        request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateLoadbalancerPoolRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateLoadbalancerPoolRequest
	response, err := service.UpdateLoadbalancerPool(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateLoadbalancerPoolRequest{
			UpdateLoadbalancerPoolRequest: &UpdateLoadbalancerPoolRequest{
				LoadbalancerPool: response.GetLoadbalancerPool(),
			},
		},
	}, nil
}

func (e *Event_UpdateLoadbalancerPoolRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteLoadbalancerPoolRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerPoolRequest
	_, err := service.DeleteLoadbalancerPool(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteLoadbalancerPoolRequest{
			DeleteLoadbalancerPoolRequest: &DeleteLoadbalancerPoolRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateLoadbalancerPoolLoadbalancerListenerRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerPoolLoadbalancerListenerRefRequest
	if _, err := service.CreateLoadbalancerPoolLoadbalancerListenerRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLoadbalancerPoolLoadbalancerListenerRefRequest{
		CreateLoadbalancerPoolLoadbalancerListenerRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLoadbalancerPoolLoadbalancerListenerRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerPoolLoadbalancerListenerRefRequest
	if _, err := service.DeleteLoadbalancerPoolLoadbalancerListenerRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLoadbalancerPoolLoadbalancerListenerRefRequest{
		DeleteLoadbalancerPoolLoadbalancerListenerRefRequest: request,
	}}, nil
}

func (e *Event_CreateLoadbalancerPoolServiceApplianceSetRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerPoolServiceApplianceSetRefRequest
	if _, err := service.CreateLoadbalancerPoolServiceApplianceSetRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLoadbalancerPoolServiceApplianceSetRefRequest{
		CreateLoadbalancerPoolServiceApplianceSetRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLoadbalancerPoolServiceApplianceSetRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerPoolServiceApplianceSetRefRequest
	if _, err := service.DeleteLoadbalancerPoolServiceApplianceSetRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLoadbalancerPoolServiceApplianceSetRefRequest{
		DeleteLoadbalancerPoolServiceApplianceSetRefRequest: request,
	}}, nil
}

func (e *Event_CreateLoadbalancerPoolServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerPoolServiceInstanceRefRequest
	if _, err := service.CreateLoadbalancerPoolServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLoadbalancerPoolServiceInstanceRefRequest{
		CreateLoadbalancerPoolServiceInstanceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLoadbalancerPoolServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerPoolServiceInstanceRefRequest
	if _, err := service.DeleteLoadbalancerPoolServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLoadbalancerPoolServiceInstanceRefRequest{
		DeleteLoadbalancerPoolServiceInstanceRefRequest: request,
	}}, nil
}

func (e *Event_CreateLoadbalancerPoolVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerPoolVirtualMachineInterfaceRefRequest
	if _, err := service.CreateLoadbalancerPoolVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLoadbalancerPoolVirtualMachineInterfaceRefRequest{
		CreateLoadbalancerPoolVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLoadbalancerPoolVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerPoolVirtualMachineInterfaceRefRequest
	if _, err := service.DeleteLoadbalancerPoolVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLoadbalancerPoolVirtualMachineInterfaceRefRequest{
		DeleteLoadbalancerPoolVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateLoadbalancerPoolTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerPoolTagRefRequest
	if _, err := service.CreateLoadbalancerPoolTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLoadbalancerPoolTagRefRequest{
		CreateLoadbalancerPoolTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLoadbalancerPoolTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerPoolTagRefRequest
	if _, err := service.DeleteLoadbalancerPoolTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLoadbalancerPoolTagRefRequest{
		DeleteLoadbalancerPoolTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateLoadbalancerPoolLoadbalancerHealthmonitorRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerPoolLoadbalancerHealthmonitorRefRequest
	if _, err := service.CreateLoadbalancerPoolLoadbalancerHealthmonitorRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLoadbalancerPoolLoadbalancerHealthmonitorRefRequest{
		CreateLoadbalancerPoolLoadbalancerHealthmonitorRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefRequest
	if _, err := service.DeleteLoadbalancerPoolLoadbalancerHealthmonitorRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefRequest{
		DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefRequest: request,
	}}, nil
}

type Loadbalancer = models.Loadbalancer

func (s *BaseService) CreateLoadbalancer(ctx context.Context, request *CreateLoadbalancerRequest) (*CreateLoadbalancerResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerResponse{
			Loadbalancer: request.GetLoadbalancer(),
		}, nil
	}
	return s.Next().CreateLoadbalancer(ctx, request)
}
func (s *BaseService) UpdateLoadbalancer(ctx context.Context, request *UpdateLoadbalancerRequest) (*UpdateLoadbalancerResponse, error) {
	if s.next == nil {
		return &UpdateLoadbalancerResponse{
			Loadbalancer: request.GetLoadbalancer(),
		}, nil
	}
	return s.Next().UpdateLoadbalancer(ctx, request)
}
func (s *BaseService) DeleteLoadbalancer(ctx context.Context, request *DeleteLoadbalancerRequest) (*DeleteLoadbalancerResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteLoadbalancer(ctx, request)
}
func (s *BaseService) GetLoadbalancer(ctx context.Context, request *GetLoadbalancerRequest) (*GetLoadbalancerResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetLoadbalancer(ctx, request)
}
func (s *BaseService) ListLoadbalancer(ctx context.Context, request *ListLoadbalancerRequest) (*ListLoadbalancerResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListLoadbalancer(ctx, request)
}

func (s *BaseService) CreateLoadbalancerVirtualMachineInterfaceRef(ctx context.Context, request *CreateLoadbalancerVirtualMachineInterfaceRefRequest) (*CreateLoadbalancerVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerVirtualMachineInterfaceRefResponse{
			ID:                                     request.ID,
			LoadbalancerVirtualMachineInterfaceRef: request.GetLoadbalancerVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().CreateLoadbalancerVirtualMachineInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteLoadbalancerVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLoadbalancerVirtualMachineInterfaceRefRequest) (*DeleteLoadbalancerVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerVirtualMachineInterfaceRefResponse{
			ID:                                     request.ID,
			LoadbalancerVirtualMachineInterfaceRef: request.GetLoadbalancerVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteLoadbalancerVirtualMachineInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLoadbalancerVirtualMachineInterfaceRef(ctx context.Context, request *CreateLoadbalancerVirtualMachineInterfaceRefRequest) (*CreateLoadbalancerVirtualMachineInterfaceRefResponse, error) {
	refField := models.LoadbalancerFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancer(ctx, &GetLoadbalancerRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Loadbalancer
		obj.AddVirtualMachineInterfaceRef(request.LoadbalancerVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateLoadbalancer(ctx, &UpdateLoadbalancerRequest{
			Loadbalancer: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLoadbalancerVirtualMachineInterfaceRefResponse{
		ID:                                     request.ID,
		LoadbalancerVirtualMachineInterfaceRef: request.GetLoadbalancerVirtualMachineInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLoadbalancerVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLoadbalancerVirtualMachineInterfaceRefRequest) (*DeleteLoadbalancerVirtualMachineInterfaceRefResponse, error) {
	refField := models.LoadbalancerFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancer(ctx, &GetLoadbalancerRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Loadbalancer
		obj.RemoveVirtualMachineInterfaceRef(request.LoadbalancerVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateLoadbalancer(ctx, &UpdateLoadbalancerRequest{
			Loadbalancer: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLoadbalancerVirtualMachineInterfaceRefResponse{
		ID:                                     request.ID,
		LoadbalancerVirtualMachineInterfaceRef: request.GetLoadbalancerVirtualMachineInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateLoadbalancerTagRef(ctx context.Context, request *CreateLoadbalancerTagRefRequest) (*CreateLoadbalancerTagRefResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerTagRefResponse{
			ID:                 request.ID,
			LoadbalancerTagRef: request.GetLoadbalancerTagRef(),
		}, nil
	}
	return s.Next().CreateLoadbalancerTagRef(ctx, request)
}

func (s *BaseService) DeleteLoadbalancerTagRef(ctx context.Context, request *DeleteLoadbalancerTagRefRequest) (*DeleteLoadbalancerTagRefResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerTagRefResponse{
			ID:                 request.ID,
			LoadbalancerTagRef: request.GetLoadbalancerTagRef(),
		}, nil
	}
	return s.Next().DeleteLoadbalancerTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLoadbalancerTagRef(ctx context.Context, request *CreateLoadbalancerTagRefRequest) (*CreateLoadbalancerTagRefResponse, error) {
	refField := models.LoadbalancerFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancer(ctx, &GetLoadbalancerRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Loadbalancer
		obj.AddTagRef(request.LoadbalancerTagRef)

		_, err = s.BaseService.UpdateLoadbalancer(ctx, &UpdateLoadbalancerRequest{
			Loadbalancer: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLoadbalancerTagRefResponse{
		ID:                 request.ID,
		LoadbalancerTagRef: request.GetLoadbalancerTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLoadbalancerTagRef(ctx context.Context, request *DeleteLoadbalancerTagRefRequest) (*DeleteLoadbalancerTagRefResponse, error) {
	refField := models.LoadbalancerFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancer(ctx, &GetLoadbalancerRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Loadbalancer
		obj.RemoveTagRef(request.LoadbalancerTagRef)

		_, err = s.BaseService.UpdateLoadbalancer(ctx, &UpdateLoadbalancerRequest{
			Loadbalancer: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLoadbalancerTagRefResponse{
		ID:                 request.ID,
		LoadbalancerTagRef: request.GetLoadbalancerTagRef(),
	}, nil
}

func (s *BaseService) CreateLoadbalancerServiceApplianceSetRef(ctx context.Context, request *CreateLoadbalancerServiceApplianceSetRefRequest) (*CreateLoadbalancerServiceApplianceSetRefResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerServiceApplianceSetRefResponse{
			ID:                                 request.ID,
			LoadbalancerServiceApplianceSetRef: request.GetLoadbalancerServiceApplianceSetRef(),
		}, nil
	}
	return s.Next().CreateLoadbalancerServiceApplianceSetRef(ctx, request)
}

func (s *BaseService) DeleteLoadbalancerServiceApplianceSetRef(ctx context.Context, request *DeleteLoadbalancerServiceApplianceSetRefRequest) (*DeleteLoadbalancerServiceApplianceSetRefResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerServiceApplianceSetRefResponse{
			ID:                                 request.ID,
			LoadbalancerServiceApplianceSetRef: request.GetLoadbalancerServiceApplianceSetRef(),
		}, nil
	}
	return s.Next().DeleteLoadbalancerServiceApplianceSetRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLoadbalancerServiceApplianceSetRef(ctx context.Context, request *CreateLoadbalancerServiceApplianceSetRefRequest) (*CreateLoadbalancerServiceApplianceSetRefResponse, error) {
	refField := models.LoadbalancerFieldServiceApplianceSetRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancer(ctx, &GetLoadbalancerRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Loadbalancer
		obj.AddServiceApplianceSetRef(request.LoadbalancerServiceApplianceSetRef)

		_, err = s.BaseService.UpdateLoadbalancer(ctx, &UpdateLoadbalancerRequest{
			Loadbalancer: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLoadbalancerServiceApplianceSetRefResponse{
		ID:                                 request.ID,
		LoadbalancerServiceApplianceSetRef: request.GetLoadbalancerServiceApplianceSetRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLoadbalancerServiceApplianceSetRef(ctx context.Context, request *DeleteLoadbalancerServiceApplianceSetRefRequest) (*DeleteLoadbalancerServiceApplianceSetRefResponse, error) {
	refField := models.LoadbalancerFieldServiceApplianceSetRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancer(ctx, &GetLoadbalancerRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Loadbalancer
		obj.RemoveServiceApplianceSetRef(request.LoadbalancerServiceApplianceSetRef)

		_, err = s.BaseService.UpdateLoadbalancer(ctx, &UpdateLoadbalancerRequest{
			Loadbalancer: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLoadbalancerServiceApplianceSetRefResponse{
		ID:                                 request.ID,
		LoadbalancerServiceApplianceSetRef: request.GetLoadbalancerServiceApplianceSetRef(),
	}, nil
}

func (s *BaseService) CreateLoadbalancerServiceInstanceRef(ctx context.Context, request *CreateLoadbalancerServiceInstanceRefRequest) (*CreateLoadbalancerServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &CreateLoadbalancerServiceInstanceRefResponse{
			ID:                             request.ID,
			LoadbalancerServiceInstanceRef: request.GetLoadbalancerServiceInstanceRef(),
		}, nil
	}
	return s.Next().CreateLoadbalancerServiceInstanceRef(ctx, request)
}

func (s *BaseService) DeleteLoadbalancerServiceInstanceRef(ctx context.Context, request *DeleteLoadbalancerServiceInstanceRefRequest) (*DeleteLoadbalancerServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &DeleteLoadbalancerServiceInstanceRefResponse{
			ID:                             request.ID,
			LoadbalancerServiceInstanceRef: request.GetLoadbalancerServiceInstanceRef(),
		}, nil
	}
	return s.Next().DeleteLoadbalancerServiceInstanceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLoadbalancerServiceInstanceRef(ctx context.Context, request *CreateLoadbalancerServiceInstanceRefRequest) (*CreateLoadbalancerServiceInstanceRefResponse, error) {
	refField := models.LoadbalancerFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancer(ctx, &GetLoadbalancerRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Loadbalancer
		obj.AddServiceInstanceRef(request.LoadbalancerServiceInstanceRef)

		_, err = s.BaseService.UpdateLoadbalancer(ctx, &UpdateLoadbalancerRequest{
			Loadbalancer: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLoadbalancerServiceInstanceRefResponse{
		ID:                             request.ID,
		LoadbalancerServiceInstanceRef: request.GetLoadbalancerServiceInstanceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLoadbalancerServiceInstanceRef(ctx context.Context, request *DeleteLoadbalancerServiceInstanceRefRequest) (*DeleteLoadbalancerServiceInstanceRefResponse, error) {
	refField := models.LoadbalancerFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLoadbalancer(ctx, &GetLoadbalancerRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Loadbalancer
		obj.RemoveServiceInstanceRef(request.LoadbalancerServiceInstanceRef)

		_, err = s.BaseService.UpdateLoadbalancer(ctx, &UpdateLoadbalancerRequest{
			Loadbalancer: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLoadbalancerServiceInstanceRefResponse{
		ID:                             request.ID,
		LoadbalancerServiceInstanceRef: request.GetLoadbalancerServiceInstanceRef(),
	}, nil
}

func (s *EventProducerService) CreateLoadbalancer(ctx context.Context, request *CreateLoadbalancerRequest) (*CreateLoadbalancerResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateLoadbalancerRequest{
				CreateLoadbalancerRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancer(ctx, request)
}
func (s *EventProducerService) UpdateLoadbalancer(ctx context.Context, request *UpdateLoadbalancerRequest) (*UpdateLoadbalancerResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateLoadbalancerRequest{
				UpdateLoadbalancerRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateLoadbalancer(ctx, request)
}
func (s *EventProducerService) DeleteLoadbalancer(ctx context.Context, request *DeleteLoadbalancerRequest) (*DeleteLoadbalancerResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteLoadbalancerRequest{
				DeleteLoadbalancerRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancer(ctx, request)
}

func (s *EventProducerService) CreateLoadbalancerTagRef(ctx context.Context, request *CreateLoadbalancerTagRefRequest) (*CreateLoadbalancerTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLoadbalancerTagRefRequest{
			CreateLoadbalancerTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerTagRef(ctx, request)
}

func (s *EventProducerService) DeleteLoadbalancerTagRef(ctx context.Context, request *DeleteLoadbalancerTagRefRequest) (*DeleteLoadbalancerTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLoadbalancerTagRefRequest{
			DeleteLoadbalancerTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerTagRef(ctx, request)
}

func (s *EventProducerService) CreateLoadbalancerServiceApplianceSetRef(ctx context.Context, request *CreateLoadbalancerServiceApplianceSetRefRequest) (*CreateLoadbalancerServiceApplianceSetRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLoadbalancerServiceApplianceSetRefRequest{
			CreateLoadbalancerServiceApplianceSetRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerServiceApplianceSetRef(ctx, request)
}

func (s *EventProducerService) DeleteLoadbalancerServiceApplianceSetRef(ctx context.Context, request *DeleteLoadbalancerServiceApplianceSetRefRequest) (*DeleteLoadbalancerServiceApplianceSetRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLoadbalancerServiceApplianceSetRefRequest{
			DeleteLoadbalancerServiceApplianceSetRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerServiceApplianceSetRef(ctx, request)
}

func (s *EventProducerService) CreateLoadbalancerServiceInstanceRef(ctx context.Context, request *CreateLoadbalancerServiceInstanceRefRequest) (*CreateLoadbalancerServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLoadbalancerServiceInstanceRefRequest{
			CreateLoadbalancerServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) DeleteLoadbalancerServiceInstanceRef(ctx context.Context, request *DeleteLoadbalancerServiceInstanceRefRequest) (*DeleteLoadbalancerServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLoadbalancerServiceInstanceRefRequest{
			DeleteLoadbalancerServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) CreateLoadbalancerVirtualMachineInterfaceRef(ctx context.Context, request *CreateLoadbalancerVirtualMachineInterfaceRefRequest) (*CreateLoadbalancerVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLoadbalancerVirtualMachineInterfaceRefRequest{
			CreateLoadbalancerVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLoadbalancerVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteLoadbalancerVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLoadbalancerVirtualMachineInterfaceRefRequest) (*DeleteLoadbalancerVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLoadbalancerVirtualMachineInterfaceRefRequest{
			DeleteLoadbalancerVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLoadbalancerVirtualMachineInterfaceRef(ctx, request)
}

func (e *Event_CreateLoadbalancerRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerRequest
	model := request.Loadbalancer
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetLoadbalancer(ctx,
			&GetLoadbalancerRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateLoadbalancer(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateLoadbalancerRequest{
			CreateLoadbalancerRequest: &CreateLoadbalancerRequest{
				Loadbalancer: response.GetLoadbalancer(),
			},
		},
	}, nil
}

func (e *Event_CreateLoadbalancerRequest) ToUpdateEvent() *Event {
	request := e.CreateLoadbalancerRequest
	model := request.Loadbalancer
	return &Event{
		Request: &Event_UpdateLoadbalancerRequest{
			UpdateLoadbalancerRequest: &UpdateLoadbalancerRequest{
				Loadbalancer: model,
				FieldMask:    request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateLoadbalancerRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateLoadbalancerRequest
	response, err := service.UpdateLoadbalancer(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateLoadbalancerRequest{
			UpdateLoadbalancerRequest: &UpdateLoadbalancerRequest{
				Loadbalancer: response.GetLoadbalancer(),
			},
		},
	}, nil
}

func (e *Event_UpdateLoadbalancerRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteLoadbalancerRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerRequest
	_, err := service.DeleteLoadbalancer(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteLoadbalancerRequest{
			DeleteLoadbalancerRequest: &DeleteLoadbalancerRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateLoadbalancerVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerVirtualMachineInterfaceRefRequest
	if _, err := service.CreateLoadbalancerVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLoadbalancerVirtualMachineInterfaceRefRequest{
		CreateLoadbalancerVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLoadbalancerVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerVirtualMachineInterfaceRefRequest
	if _, err := service.DeleteLoadbalancerVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLoadbalancerVirtualMachineInterfaceRefRequest{
		DeleteLoadbalancerVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateLoadbalancerTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerTagRefRequest
	if _, err := service.CreateLoadbalancerTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLoadbalancerTagRefRequest{
		CreateLoadbalancerTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLoadbalancerTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerTagRefRequest
	if _, err := service.DeleteLoadbalancerTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLoadbalancerTagRefRequest{
		DeleteLoadbalancerTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateLoadbalancerServiceApplianceSetRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerServiceApplianceSetRefRequest
	if _, err := service.CreateLoadbalancerServiceApplianceSetRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLoadbalancerServiceApplianceSetRefRequest{
		CreateLoadbalancerServiceApplianceSetRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLoadbalancerServiceApplianceSetRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerServiceApplianceSetRefRequest
	if _, err := service.DeleteLoadbalancerServiceApplianceSetRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLoadbalancerServiceApplianceSetRefRequest{
		DeleteLoadbalancerServiceApplianceSetRefRequest: request,
	}}, nil
}

func (e *Event_CreateLoadbalancerServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLoadbalancerServiceInstanceRefRequest
	if _, err := service.CreateLoadbalancerServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLoadbalancerServiceInstanceRefRequest{
		CreateLoadbalancerServiceInstanceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLoadbalancerServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLoadbalancerServiceInstanceRefRequest
	if _, err := service.DeleteLoadbalancerServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLoadbalancerServiceInstanceRefRequest{
		DeleteLoadbalancerServiceInstanceRefRequest: request,
	}}, nil
}

type LogicalInterface = models.LogicalInterface

func (s *BaseService) CreateLogicalInterface(ctx context.Context, request *CreateLogicalInterfaceRequest) (*CreateLogicalInterfaceResponse, error) {
	if s.next == nil {
		return &CreateLogicalInterfaceResponse{
			LogicalInterface: request.GetLogicalInterface(),
		}, nil
	}
	return s.Next().CreateLogicalInterface(ctx, request)
}
func (s *BaseService) UpdateLogicalInterface(ctx context.Context, request *UpdateLogicalInterfaceRequest) (*UpdateLogicalInterfaceResponse, error) {
	if s.next == nil {
		return &UpdateLogicalInterfaceResponse{
			LogicalInterface: request.GetLogicalInterface(),
		}, nil
	}
	return s.Next().UpdateLogicalInterface(ctx, request)
}
func (s *BaseService) DeleteLogicalInterface(ctx context.Context, request *DeleteLogicalInterfaceRequest) (*DeleteLogicalInterfaceResponse, error) {
	if s.next == nil {
		return &DeleteLogicalInterfaceResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteLogicalInterface(ctx, request)
}
func (s *BaseService) GetLogicalInterface(ctx context.Context, request *GetLogicalInterfaceRequest) (*GetLogicalInterfaceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetLogicalInterface(ctx, request)
}
func (s *BaseService) ListLogicalInterface(ctx context.Context, request *ListLogicalInterfaceRequest) (*ListLogicalInterfaceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListLogicalInterface(ctx, request)
}

func (s *BaseService) CreateLogicalInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *CreateLogicalInterfaceVirtualMachineInterfaceRefRequest) (*CreateLogicalInterfaceVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateLogicalInterfaceVirtualMachineInterfaceRefResponse{
			ID: request.ID,
			LogicalInterfaceVirtualMachineInterfaceRef: request.GetLogicalInterfaceVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().CreateLogicalInterfaceVirtualMachineInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteLogicalInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLogicalInterfaceVirtualMachineInterfaceRefRequest) (*DeleteLogicalInterfaceVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteLogicalInterfaceVirtualMachineInterfaceRefResponse{
			ID: request.ID,
			LogicalInterfaceVirtualMachineInterfaceRef: request.GetLogicalInterfaceVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteLogicalInterfaceVirtualMachineInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLogicalInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *CreateLogicalInterfaceVirtualMachineInterfaceRefRequest) (*CreateLogicalInterfaceVirtualMachineInterfaceRefResponse, error) {
	refField := models.LogicalInterfaceFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalInterface(ctx, &GetLogicalInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalInterface
		obj.AddVirtualMachineInterfaceRef(request.LogicalInterfaceVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateLogicalInterface(ctx, &UpdateLogicalInterfaceRequest{
			LogicalInterface: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLogicalInterfaceVirtualMachineInterfaceRefResponse{
		ID: request.ID,
		LogicalInterfaceVirtualMachineInterfaceRef: request.GetLogicalInterfaceVirtualMachineInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLogicalInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLogicalInterfaceVirtualMachineInterfaceRefRequest) (*DeleteLogicalInterfaceVirtualMachineInterfaceRefResponse, error) {
	refField := models.LogicalInterfaceFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalInterface(ctx, &GetLogicalInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalInterface
		obj.RemoveVirtualMachineInterfaceRef(request.LogicalInterfaceVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateLogicalInterface(ctx, &UpdateLogicalInterfaceRequest{
			LogicalInterface: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLogicalInterfaceVirtualMachineInterfaceRefResponse{
		ID: request.ID,
		LogicalInterfaceVirtualMachineInterfaceRef: request.GetLogicalInterfaceVirtualMachineInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateLogicalInterfaceTagRef(ctx context.Context, request *CreateLogicalInterfaceTagRefRequest) (*CreateLogicalInterfaceTagRefResponse, error) {
	if s.next == nil {
		return &CreateLogicalInterfaceTagRefResponse{
			ID:                     request.ID,
			LogicalInterfaceTagRef: request.GetLogicalInterfaceTagRef(),
		}, nil
	}
	return s.Next().CreateLogicalInterfaceTagRef(ctx, request)
}

func (s *BaseService) DeleteLogicalInterfaceTagRef(ctx context.Context, request *DeleteLogicalInterfaceTagRefRequest) (*DeleteLogicalInterfaceTagRefResponse, error) {
	if s.next == nil {
		return &DeleteLogicalInterfaceTagRefResponse{
			ID:                     request.ID,
			LogicalInterfaceTagRef: request.GetLogicalInterfaceTagRef(),
		}, nil
	}
	return s.Next().DeleteLogicalInterfaceTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLogicalInterfaceTagRef(ctx context.Context, request *CreateLogicalInterfaceTagRefRequest) (*CreateLogicalInterfaceTagRefResponse, error) {
	refField := models.LogicalInterfaceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalInterface(ctx, &GetLogicalInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalInterface
		obj.AddTagRef(request.LogicalInterfaceTagRef)

		_, err = s.BaseService.UpdateLogicalInterface(ctx, &UpdateLogicalInterfaceRequest{
			LogicalInterface: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLogicalInterfaceTagRefResponse{
		ID:                     request.ID,
		LogicalInterfaceTagRef: request.GetLogicalInterfaceTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLogicalInterfaceTagRef(ctx context.Context, request *DeleteLogicalInterfaceTagRefRequest) (*DeleteLogicalInterfaceTagRefResponse, error) {
	refField := models.LogicalInterfaceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalInterface(ctx, &GetLogicalInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalInterface
		obj.RemoveTagRef(request.LogicalInterfaceTagRef)

		_, err = s.BaseService.UpdateLogicalInterface(ctx, &UpdateLogicalInterfaceRequest{
			LogicalInterface: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLogicalInterfaceTagRefResponse{
		ID:                     request.ID,
		LogicalInterfaceTagRef: request.GetLogicalInterfaceTagRef(),
	}, nil
}

func (s *EventProducerService) CreateLogicalInterface(ctx context.Context, request *CreateLogicalInterfaceRequest) (*CreateLogicalInterfaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateLogicalInterfaceRequest{
				CreateLogicalInterfaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLogicalInterface(ctx, request)
}
func (s *EventProducerService) UpdateLogicalInterface(ctx context.Context, request *UpdateLogicalInterfaceRequest) (*UpdateLogicalInterfaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateLogicalInterfaceRequest{
				UpdateLogicalInterfaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateLogicalInterface(ctx, request)
}
func (s *EventProducerService) DeleteLogicalInterface(ctx context.Context, request *DeleteLogicalInterfaceRequest) (*DeleteLogicalInterfaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteLogicalInterfaceRequest{
				DeleteLogicalInterfaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLogicalInterface(ctx, request)
}

func (s *EventProducerService) CreateLogicalInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *CreateLogicalInterfaceVirtualMachineInterfaceRefRequest) (*CreateLogicalInterfaceVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLogicalInterfaceVirtualMachineInterfaceRefRequest{
			CreateLogicalInterfaceVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLogicalInterfaceVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteLogicalInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLogicalInterfaceVirtualMachineInterfaceRefRequest) (*DeleteLogicalInterfaceVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLogicalInterfaceVirtualMachineInterfaceRefRequest{
			DeleteLogicalInterfaceVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLogicalInterfaceVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateLogicalInterfaceTagRef(ctx context.Context, request *CreateLogicalInterfaceTagRefRequest) (*CreateLogicalInterfaceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLogicalInterfaceTagRefRequest{
			CreateLogicalInterfaceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLogicalInterfaceTagRef(ctx, request)
}

func (s *EventProducerService) DeleteLogicalInterfaceTagRef(ctx context.Context, request *DeleteLogicalInterfaceTagRefRequest) (*DeleteLogicalInterfaceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLogicalInterfaceTagRefRequest{
			DeleteLogicalInterfaceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLogicalInterfaceTagRef(ctx, request)
}

func (e *Event_CreateLogicalInterfaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLogicalInterfaceRequest
	model := request.LogicalInterface
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetLogicalInterface(ctx,
			&GetLogicalInterfaceRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateLogicalInterface(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateLogicalInterfaceRequest{
			CreateLogicalInterfaceRequest: &CreateLogicalInterfaceRequest{
				LogicalInterface: response.GetLogicalInterface(),
			},
		},
	}, nil
}

func (e *Event_CreateLogicalInterfaceRequest) ToUpdateEvent() *Event {
	request := e.CreateLogicalInterfaceRequest
	model := request.LogicalInterface
	return &Event{
		Request: &Event_UpdateLogicalInterfaceRequest{
			UpdateLogicalInterfaceRequest: &UpdateLogicalInterfaceRequest{
				LogicalInterface: model,
				FieldMask:        request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateLogicalInterfaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateLogicalInterfaceRequest
	response, err := service.UpdateLogicalInterface(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateLogicalInterfaceRequest{
			UpdateLogicalInterfaceRequest: &UpdateLogicalInterfaceRequest{
				LogicalInterface: response.GetLogicalInterface(),
			},
		},
	}, nil
}

func (e *Event_UpdateLogicalInterfaceRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteLogicalInterfaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLogicalInterfaceRequest
	_, err := service.DeleteLogicalInterface(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteLogicalInterfaceRequest{
			DeleteLogicalInterfaceRequest: &DeleteLogicalInterfaceRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateLogicalInterfaceVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLogicalInterfaceVirtualMachineInterfaceRefRequest
	if _, err := service.CreateLogicalInterfaceVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLogicalInterfaceVirtualMachineInterfaceRefRequest{
		CreateLogicalInterfaceVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLogicalInterfaceVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLogicalInterfaceVirtualMachineInterfaceRefRequest
	if _, err := service.DeleteLogicalInterfaceVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLogicalInterfaceVirtualMachineInterfaceRefRequest{
		DeleteLogicalInterfaceVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateLogicalInterfaceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLogicalInterfaceTagRefRequest
	if _, err := service.CreateLogicalInterfaceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLogicalInterfaceTagRefRequest{
		CreateLogicalInterfaceTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLogicalInterfaceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLogicalInterfaceTagRefRequest
	if _, err := service.DeleteLogicalInterfaceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLogicalInterfaceTagRefRequest{
		DeleteLogicalInterfaceTagRefRequest: request,
	}}, nil
}

type LogicalRouter = models.LogicalRouter

func (s *BaseService) CreateLogicalRouter(ctx context.Context, request *CreateLogicalRouterRequest) (*CreateLogicalRouterResponse, error) {
	if s.next == nil {
		return &CreateLogicalRouterResponse{
			LogicalRouter: request.GetLogicalRouter(),
		}, nil
	}
	return s.Next().CreateLogicalRouter(ctx, request)
}
func (s *BaseService) UpdateLogicalRouter(ctx context.Context, request *UpdateLogicalRouterRequest) (*UpdateLogicalRouterResponse, error) {
	if s.next == nil {
		return &UpdateLogicalRouterResponse{
			LogicalRouter: request.GetLogicalRouter(),
		}, nil
	}
	return s.Next().UpdateLogicalRouter(ctx, request)
}
func (s *BaseService) DeleteLogicalRouter(ctx context.Context, request *DeleteLogicalRouterRequest) (*DeleteLogicalRouterResponse, error) {
	if s.next == nil {
		return &DeleteLogicalRouterResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteLogicalRouter(ctx, request)
}
func (s *BaseService) GetLogicalRouter(ctx context.Context, request *GetLogicalRouterRequest) (*GetLogicalRouterResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetLogicalRouter(ctx, request)
}
func (s *BaseService) ListLogicalRouter(ctx context.Context, request *ListLogicalRouterRequest) (*ListLogicalRouterResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListLogicalRouter(ctx, request)
}

func (s *BaseService) CreateLogicalRouterPhysicalRouterRef(ctx context.Context, request *CreateLogicalRouterPhysicalRouterRefRequest) (*CreateLogicalRouterPhysicalRouterRefResponse, error) {
	if s.next == nil {
		return &CreateLogicalRouterPhysicalRouterRefResponse{
			ID:                             request.ID,
			LogicalRouterPhysicalRouterRef: request.GetLogicalRouterPhysicalRouterRef(),
		}, nil
	}
	return s.Next().CreateLogicalRouterPhysicalRouterRef(ctx, request)
}

func (s *BaseService) DeleteLogicalRouterPhysicalRouterRef(ctx context.Context, request *DeleteLogicalRouterPhysicalRouterRefRequest) (*DeleteLogicalRouterPhysicalRouterRefResponse, error) {
	if s.next == nil {
		return &DeleteLogicalRouterPhysicalRouterRefResponse{
			ID:                             request.ID,
			LogicalRouterPhysicalRouterRef: request.GetLogicalRouterPhysicalRouterRef(),
		}, nil
	}
	return s.Next().DeleteLogicalRouterPhysicalRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLogicalRouterPhysicalRouterRef(ctx context.Context, request *CreateLogicalRouterPhysicalRouterRefRequest) (*CreateLogicalRouterPhysicalRouterRefResponse, error) {
	refField := models.LogicalRouterFieldPhysicalRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.AddPhysicalRouterRef(request.LogicalRouterPhysicalRouterRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLogicalRouterPhysicalRouterRefResponse{
		ID:                             request.ID,
		LogicalRouterPhysicalRouterRef: request.GetLogicalRouterPhysicalRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLogicalRouterPhysicalRouterRef(ctx context.Context, request *DeleteLogicalRouterPhysicalRouterRefRequest) (*DeleteLogicalRouterPhysicalRouterRefResponse, error) {
	refField := models.LogicalRouterFieldPhysicalRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.RemovePhysicalRouterRef(request.LogicalRouterPhysicalRouterRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLogicalRouterPhysicalRouterRefResponse{
		ID:                             request.ID,
		LogicalRouterPhysicalRouterRef: request.GetLogicalRouterPhysicalRouterRef(),
	}, nil
}

func (s *BaseService) CreateLogicalRouterRouteTableRef(ctx context.Context, request *CreateLogicalRouterRouteTableRefRequest) (*CreateLogicalRouterRouteTableRefResponse, error) {
	if s.next == nil {
		return &CreateLogicalRouterRouteTableRefResponse{
			ID:                         request.ID,
			LogicalRouterRouteTableRef: request.GetLogicalRouterRouteTableRef(),
		}, nil
	}
	return s.Next().CreateLogicalRouterRouteTableRef(ctx, request)
}

func (s *BaseService) DeleteLogicalRouterRouteTableRef(ctx context.Context, request *DeleteLogicalRouterRouteTableRefRequest) (*DeleteLogicalRouterRouteTableRefResponse, error) {
	if s.next == nil {
		return &DeleteLogicalRouterRouteTableRefResponse{
			ID:                         request.ID,
			LogicalRouterRouteTableRef: request.GetLogicalRouterRouteTableRef(),
		}, nil
	}
	return s.Next().DeleteLogicalRouterRouteTableRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLogicalRouterRouteTableRef(ctx context.Context, request *CreateLogicalRouterRouteTableRefRequest) (*CreateLogicalRouterRouteTableRefResponse, error) {
	refField := models.LogicalRouterFieldRouteTableRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.AddRouteTableRef(request.LogicalRouterRouteTableRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLogicalRouterRouteTableRefResponse{
		ID:                         request.ID,
		LogicalRouterRouteTableRef: request.GetLogicalRouterRouteTableRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLogicalRouterRouteTableRef(ctx context.Context, request *DeleteLogicalRouterRouteTableRefRequest) (*DeleteLogicalRouterRouteTableRefResponse, error) {
	refField := models.LogicalRouterFieldRouteTableRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.RemoveRouteTableRef(request.LogicalRouterRouteTableRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLogicalRouterRouteTableRefResponse{
		ID:                         request.ID,
		LogicalRouterRouteTableRef: request.GetLogicalRouterRouteTableRef(),
	}, nil
}

func (s *BaseService) CreateLogicalRouterRouteTargetRef(ctx context.Context, request *CreateLogicalRouterRouteTargetRefRequest) (*CreateLogicalRouterRouteTargetRefResponse, error) {
	if s.next == nil {
		return &CreateLogicalRouterRouteTargetRefResponse{
			ID:                          request.ID,
			LogicalRouterRouteTargetRef: request.GetLogicalRouterRouteTargetRef(),
		}, nil
	}
	return s.Next().CreateLogicalRouterRouteTargetRef(ctx, request)
}

func (s *BaseService) DeleteLogicalRouterRouteTargetRef(ctx context.Context, request *DeleteLogicalRouterRouteTargetRefRequest) (*DeleteLogicalRouterRouteTargetRefResponse, error) {
	if s.next == nil {
		return &DeleteLogicalRouterRouteTargetRefResponse{
			ID:                          request.ID,
			LogicalRouterRouteTargetRef: request.GetLogicalRouterRouteTargetRef(),
		}, nil
	}
	return s.Next().DeleteLogicalRouterRouteTargetRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLogicalRouterRouteTargetRef(ctx context.Context, request *CreateLogicalRouterRouteTargetRefRequest) (*CreateLogicalRouterRouteTargetRefResponse, error) {
	refField := models.LogicalRouterFieldRouteTargetRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.AddRouteTargetRef(request.LogicalRouterRouteTargetRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLogicalRouterRouteTargetRefResponse{
		ID:                          request.ID,
		LogicalRouterRouteTargetRef: request.GetLogicalRouterRouteTargetRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLogicalRouterRouteTargetRef(ctx context.Context, request *DeleteLogicalRouterRouteTargetRefRequest) (*DeleteLogicalRouterRouteTargetRefResponse, error) {
	refField := models.LogicalRouterFieldRouteTargetRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.RemoveRouteTargetRef(request.LogicalRouterRouteTargetRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLogicalRouterRouteTargetRefResponse{
		ID:                          request.ID,
		LogicalRouterRouteTargetRef: request.GetLogicalRouterRouteTargetRef(),
	}, nil
}

func (s *BaseService) CreateLogicalRouterServiceInstanceRef(ctx context.Context, request *CreateLogicalRouterServiceInstanceRefRequest) (*CreateLogicalRouterServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &CreateLogicalRouterServiceInstanceRefResponse{
			ID:                              request.ID,
			LogicalRouterServiceInstanceRef: request.GetLogicalRouterServiceInstanceRef(),
		}, nil
	}
	return s.Next().CreateLogicalRouterServiceInstanceRef(ctx, request)
}

func (s *BaseService) DeleteLogicalRouterServiceInstanceRef(ctx context.Context, request *DeleteLogicalRouterServiceInstanceRefRequest) (*DeleteLogicalRouterServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &DeleteLogicalRouterServiceInstanceRefResponse{
			ID:                              request.ID,
			LogicalRouterServiceInstanceRef: request.GetLogicalRouterServiceInstanceRef(),
		}, nil
	}
	return s.Next().DeleteLogicalRouterServiceInstanceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLogicalRouterServiceInstanceRef(ctx context.Context, request *CreateLogicalRouterServiceInstanceRefRequest) (*CreateLogicalRouterServiceInstanceRefResponse, error) {
	refField := models.LogicalRouterFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.AddServiceInstanceRef(request.LogicalRouterServiceInstanceRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLogicalRouterServiceInstanceRefResponse{
		ID:                              request.ID,
		LogicalRouterServiceInstanceRef: request.GetLogicalRouterServiceInstanceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLogicalRouterServiceInstanceRef(ctx context.Context, request *DeleteLogicalRouterServiceInstanceRefRequest) (*DeleteLogicalRouterServiceInstanceRefResponse, error) {
	refField := models.LogicalRouterFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.RemoveServiceInstanceRef(request.LogicalRouterServiceInstanceRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLogicalRouterServiceInstanceRefResponse{
		ID:                              request.ID,
		LogicalRouterServiceInstanceRef: request.GetLogicalRouterServiceInstanceRef(),
	}, nil
}

func (s *BaseService) CreateLogicalRouterVirtualMachineInterfaceRef(ctx context.Context, request *CreateLogicalRouterVirtualMachineInterfaceRefRequest) (*CreateLogicalRouterVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateLogicalRouterVirtualMachineInterfaceRefResponse{
			ID:                                      request.ID,
			LogicalRouterVirtualMachineInterfaceRef: request.GetLogicalRouterVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().CreateLogicalRouterVirtualMachineInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteLogicalRouterVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLogicalRouterVirtualMachineInterfaceRefRequest) (*DeleteLogicalRouterVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteLogicalRouterVirtualMachineInterfaceRefResponse{
			ID:                                      request.ID,
			LogicalRouterVirtualMachineInterfaceRef: request.GetLogicalRouterVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteLogicalRouterVirtualMachineInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLogicalRouterVirtualMachineInterfaceRef(ctx context.Context, request *CreateLogicalRouterVirtualMachineInterfaceRefRequest) (*CreateLogicalRouterVirtualMachineInterfaceRefResponse, error) {
	refField := models.LogicalRouterFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.AddVirtualMachineInterfaceRef(request.LogicalRouterVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLogicalRouterVirtualMachineInterfaceRefResponse{
		ID:                                      request.ID,
		LogicalRouterVirtualMachineInterfaceRef: request.GetLogicalRouterVirtualMachineInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLogicalRouterVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLogicalRouterVirtualMachineInterfaceRefRequest) (*DeleteLogicalRouterVirtualMachineInterfaceRefResponse, error) {
	refField := models.LogicalRouterFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.RemoveVirtualMachineInterfaceRef(request.LogicalRouterVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLogicalRouterVirtualMachineInterfaceRefResponse{
		ID:                                      request.ID,
		LogicalRouterVirtualMachineInterfaceRef: request.GetLogicalRouterVirtualMachineInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateLogicalRouterVirtualNetworkRef(ctx context.Context, request *CreateLogicalRouterVirtualNetworkRefRequest) (*CreateLogicalRouterVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &CreateLogicalRouterVirtualNetworkRefResponse{
			ID:                             request.ID,
			LogicalRouterVirtualNetworkRef: request.GetLogicalRouterVirtualNetworkRef(),
		}, nil
	}
	return s.Next().CreateLogicalRouterVirtualNetworkRef(ctx, request)
}

func (s *BaseService) DeleteLogicalRouterVirtualNetworkRef(ctx context.Context, request *DeleteLogicalRouterVirtualNetworkRefRequest) (*DeleteLogicalRouterVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &DeleteLogicalRouterVirtualNetworkRefResponse{
			ID:                             request.ID,
			LogicalRouterVirtualNetworkRef: request.GetLogicalRouterVirtualNetworkRef(),
		}, nil
	}
	return s.Next().DeleteLogicalRouterVirtualNetworkRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLogicalRouterVirtualNetworkRef(ctx context.Context, request *CreateLogicalRouterVirtualNetworkRefRequest) (*CreateLogicalRouterVirtualNetworkRefResponse, error) {
	refField := models.LogicalRouterFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.AddVirtualNetworkRef(request.LogicalRouterVirtualNetworkRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLogicalRouterVirtualNetworkRefResponse{
		ID:                             request.ID,
		LogicalRouterVirtualNetworkRef: request.GetLogicalRouterVirtualNetworkRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLogicalRouterVirtualNetworkRef(ctx context.Context, request *DeleteLogicalRouterVirtualNetworkRefRequest) (*DeleteLogicalRouterVirtualNetworkRefResponse, error) {
	refField := models.LogicalRouterFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.RemoveVirtualNetworkRef(request.LogicalRouterVirtualNetworkRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLogicalRouterVirtualNetworkRefResponse{
		ID:                             request.ID,
		LogicalRouterVirtualNetworkRef: request.GetLogicalRouterVirtualNetworkRef(),
	}, nil
}

func (s *BaseService) CreateLogicalRouterTagRef(ctx context.Context, request *CreateLogicalRouterTagRefRequest) (*CreateLogicalRouterTagRefResponse, error) {
	if s.next == nil {
		return &CreateLogicalRouterTagRefResponse{
			ID:                  request.ID,
			LogicalRouterTagRef: request.GetLogicalRouterTagRef(),
		}, nil
	}
	return s.Next().CreateLogicalRouterTagRef(ctx, request)
}

func (s *BaseService) DeleteLogicalRouterTagRef(ctx context.Context, request *DeleteLogicalRouterTagRefRequest) (*DeleteLogicalRouterTagRefResponse, error) {
	if s.next == nil {
		return &DeleteLogicalRouterTagRefResponse{
			ID:                  request.ID,
			LogicalRouterTagRef: request.GetLogicalRouterTagRef(),
		}, nil
	}
	return s.Next().DeleteLogicalRouterTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLogicalRouterTagRef(ctx context.Context, request *CreateLogicalRouterTagRefRequest) (*CreateLogicalRouterTagRefResponse, error) {
	refField := models.LogicalRouterFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.AddTagRef(request.LogicalRouterTagRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLogicalRouterTagRefResponse{
		ID:                  request.ID,
		LogicalRouterTagRef: request.GetLogicalRouterTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLogicalRouterTagRef(ctx context.Context, request *DeleteLogicalRouterTagRefRequest) (*DeleteLogicalRouterTagRefResponse, error) {
	refField := models.LogicalRouterFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.RemoveTagRef(request.LogicalRouterTagRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLogicalRouterTagRefResponse{
		ID:                  request.ID,
		LogicalRouterTagRef: request.GetLogicalRouterTagRef(),
	}, nil
}

func (s *BaseService) CreateLogicalRouterBGPVPNRef(ctx context.Context, request *CreateLogicalRouterBGPVPNRefRequest) (*CreateLogicalRouterBGPVPNRefResponse, error) {
	if s.next == nil {
		return &CreateLogicalRouterBGPVPNRefResponse{
			ID:                     request.ID,
			LogicalRouterBGPVPNRef: request.GetLogicalRouterBGPVPNRef(),
		}, nil
	}
	return s.Next().CreateLogicalRouterBGPVPNRef(ctx, request)
}

func (s *BaseService) DeleteLogicalRouterBGPVPNRef(ctx context.Context, request *DeleteLogicalRouterBGPVPNRefRequest) (*DeleteLogicalRouterBGPVPNRefResponse, error) {
	if s.next == nil {
		return &DeleteLogicalRouterBGPVPNRefResponse{
			ID:                     request.ID,
			LogicalRouterBGPVPNRef: request.GetLogicalRouterBGPVPNRef(),
		}, nil
	}
	return s.Next().DeleteLogicalRouterBGPVPNRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateLogicalRouterBGPVPNRef(ctx context.Context, request *CreateLogicalRouterBGPVPNRefRequest) (*CreateLogicalRouterBGPVPNRefResponse, error) {
	refField := models.LogicalRouterFieldBGPVPNRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.AddBGPVPNRef(request.LogicalRouterBGPVPNRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateLogicalRouterBGPVPNRefResponse{
		ID:                     request.ID,
		LogicalRouterBGPVPNRef: request.GetLogicalRouterBGPVPNRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteLogicalRouterBGPVPNRef(ctx context.Context, request *DeleteLogicalRouterBGPVPNRefRequest) (*DeleteLogicalRouterBGPVPNRefResponse, error) {
	refField := models.LogicalRouterFieldBGPVPNRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetLogicalRouter(ctx, &GetLogicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.LogicalRouter
		obj.RemoveBGPVPNRef(request.LogicalRouterBGPVPNRef)

		_, err = s.BaseService.UpdateLogicalRouter(ctx, &UpdateLogicalRouterRequest{
			LogicalRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteLogicalRouterBGPVPNRefResponse{
		ID:                     request.ID,
		LogicalRouterBGPVPNRef: request.GetLogicalRouterBGPVPNRef(),
	}, nil
}

func (s *EventProducerService) CreateLogicalRouter(ctx context.Context, request *CreateLogicalRouterRequest) (*CreateLogicalRouterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateLogicalRouterRequest{
				CreateLogicalRouterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLogicalRouter(ctx, request)
}
func (s *EventProducerService) UpdateLogicalRouter(ctx context.Context, request *UpdateLogicalRouterRequest) (*UpdateLogicalRouterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateLogicalRouterRequest{
				UpdateLogicalRouterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateLogicalRouter(ctx, request)
}
func (s *EventProducerService) DeleteLogicalRouter(ctx context.Context, request *DeleteLogicalRouterRequest) (*DeleteLogicalRouterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteLogicalRouterRequest{
				DeleteLogicalRouterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLogicalRouter(ctx, request)
}

func (s *EventProducerService) CreateLogicalRouterVirtualMachineInterfaceRef(ctx context.Context, request *CreateLogicalRouterVirtualMachineInterfaceRefRequest) (*CreateLogicalRouterVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLogicalRouterVirtualMachineInterfaceRefRequest{
			CreateLogicalRouterVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLogicalRouterVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteLogicalRouterVirtualMachineInterfaceRef(ctx context.Context, request *DeleteLogicalRouterVirtualMachineInterfaceRefRequest) (*DeleteLogicalRouterVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLogicalRouterVirtualMachineInterfaceRefRequest{
			DeleteLogicalRouterVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLogicalRouterVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateLogicalRouterVirtualNetworkRef(ctx context.Context, request *CreateLogicalRouterVirtualNetworkRefRequest) (*CreateLogicalRouterVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLogicalRouterVirtualNetworkRefRequest{
			CreateLogicalRouterVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLogicalRouterVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) DeleteLogicalRouterVirtualNetworkRef(ctx context.Context, request *DeleteLogicalRouterVirtualNetworkRefRequest) (*DeleteLogicalRouterVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLogicalRouterVirtualNetworkRefRequest{
			DeleteLogicalRouterVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLogicalRouterVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) CreateLogicalRouterTagRef(ctx context.Context, request *CreateLogicalRouterTagRefRequest) (*CreateLogicalRouterTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLogicalRouterTagRefRequest{
			CreateLogicalRouterTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLogicalRouterTagRef(ctx, request)
}

func (s *EventProducerService) DeleteLogicalRouterTagRef(ctx context.Context, request *DeleteLogicalRouterTagRefRequest) (*DeleteLogicalRouterTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLogicalRouterTagRefRequest{
			DeleteLogicalRouterTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLogicalRouterTagRef(ctx, request)
}

func (s *EventProducerService) CreateLogicalRouterBGPVPNRef(ctx context.Context, request *CreateLogicalRouterBGPVPNRefRequest) (*CreateLogicalRouterBGPVPNRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLogicalRouterBGPVPNRefRequest{
			CreateLogicalRouterBGPVPNRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLogicalRouterBGPVPNRef(ctx, request)
}

func (s *EventProducerService) DeleteLogicalRouterBGPVPNRef(ctx context.Context, request *DeleteLogicalRouterBGPVPNRefRequest) (*DeleteLogicalRouterBGPVPNRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLogicalRouterBGPVPNRefRequest{
			DeleteLogicalRouterBGPVPNRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLogicalRouterBGPVPNRef(ctx, request)
}

func (s *EventProducerService) CreateLogicalRouterPhysicalRouterRef(ctx context.Context, request *CreateLogicalRouterPhysicalRouterRefRequest) (*CreateLogicalRouterPhysicalRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLogicalRouterPhysicalRouterRefRequest{
			CreateLogicalRouterPhysicalRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLogicalRouterPhysicalRouterRef(ctx, request)
}

func (s *EventProducerService) DeleteLogicalRouterPhysicalRouterRef(ctx context.Context, request *DeleteLogicalRouterPhysicalRouterRefRequest) (*DeleteLogicalRouterPhysicalRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLogicalRouterPhysicalRouterRefRequest{
			DeleteLogicalRouterPhysicalRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLogicalRouterPhysicalRouterRef(ctx, request)
}

func (s *EventProducerService) CreateLogicalRouterRouteTableRef(ctx context.Context, request *CreateLogicalRouterRouteTableRefRequest) (*CreateLogicalRouterRouteTableRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLogicalRouterRouteTableRefRequest{
			CreateLogicalRouterRouteTableRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLogicalRouterRouteTableRef(ctx, request)
}

func (s *EventProducerService) DeleteLogicalRouterRouteTableRef(ctx context.Context, request *DeleteLogicalRouterRouteTableRefRequest) (*DeleteLogicalRouterRouteTableRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLogicalRouterRouteTableRefRequest{
			DeleteLogicalRouterRouteTableRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLogicalRouterRouteTableRef(ctx, request)
}

func (s *EventProducerService) CreateLogicalRouterRouteTargetRef(ctx context.Context, request *CreateLogicalRouterRouteTargetRefRequest) (*CreateLogicalRouterRouteTargetRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLogicalRouterRouteTargetRefRequest{
			CreateLogicalRouterRouteTargetRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLogicalRouterRouteTargetRef(ctx, request)
}

func (s *EventProducerService) DeleteLogicalRouterRouteTargetRef(ctx context.Context, request *DeleteLogicalRouterRouteTargetRefRequest) (*DeleteLogicalRouterRouteTargetRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLogicalRouterRouteTargetRefRequest{
			DeleteLogicalRouterRouteTargetRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLogicalRouterRouteTargetRef(ctx, request)
}

func (s *EventProducerService) CreateLogicalRouterServiceInstanceRef(ctx context.Context, request *CreateLogicalRouterServiceInstanceRefRequest) (*CreateLogicalRouterServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateLogicalRouterServiceInstanceRefRequest{
			CreateLogicalRouterServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateLogicalRouterServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) DeleteLogicalRouterServiceInstanceRef(ctx context.Context, request *DeleteLogicalRouterServiceInstanceRefRequest) (*DeleteLogicalRouterServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteLogicalRouterServiceInstanceRefRequest{
			DeleteLogicalRouterServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteLogicalRouterServiceInstanceRef(ctx, request)
}

func (e *Event_CreateLogicalRouterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLogicalRouterRequest
	model := request.LogicalRouter
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetLogicalRouter(ctx,
			&GetLogicalRouterRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateLogicalRouter(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateLogicalRouterRequest{
			CreateLogicalRouterRequest: &CreateLogicalRouterRequest{
				LogicalRouter: response.GetLogicalRouter(),
			},
		},
	}, nil
}

func (e *Event_CreateLogicalRouterRequest) ToUpdateEvent() *Event {
	request := e.CreateLogicalRouterRequest
	model := request.LogicalRouter
	return &Event{
		Request: &Event_UpdateLogicalRouterRequest{
			UpdateLogicalRouterRequest: &UpdateLogicalRouterRequest{
				LogicalRouter: model,
				FieldMask:     request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateLogicalRouterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateLogicalRouterRequest
	response, err := service.UpdateLogicalRouter(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateLogicalRouterRequest{
			UpdateLogicalRouterRequest: &UpdateLogicalRouterRequest{
				LogicalRouter: response.GetLogicalRouter(),
			},
		},
	}, nil
}

func (e *Event_UpdateLogicalRouterRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteLogicalRouterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLogicalRouterRequest
	_, err := service.DeleteLogicalRouter(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteLogicalRouterRequest{
			DeleteLogicalRouterRequest: &DeleteLogicalRouterRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateLogicalRouterTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLogicalRouterTagRefRequest
	if _, err := service.CreateLogicalRouterTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLogicalRouterTagRefRequest{
		CreateLogicalRouterTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLogicalRouterTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLogicalRouterTagRefRequest
	if _, err := service.DeleteLogicalRouterTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLogicalRouterTagRefRequest{
		DeleteLogicalRouterTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateLogicalRouterBGPVPNRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLogicalRouterBGPVPNRefRequest
	if _, err := service.CreateLogicalRouterBGPVPNRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLogicalRouterBGPVPNRefRequest{
		CreateLogicalRouterBGPVPNRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLogicalRouterBGPVPNRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLogicalRouterBGPVPNRefRequest
	if _, err := service.DeleteLogicalRouterBGPVPNRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLogicalRouterBGPVPNRefRequest{
		DeleteLogicalRouterBGPVPNRefRequest: request,
	}}, nil
}

func (e *Event_CreateLogicalRouterPhysicalRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLogicalRouterPhysicalRouterRefRequest
	if _, err := service.CreateLogicalRouterPhysicalRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLogicalRouterPhysicalRouterRefRequest{
		CreateLogicalRouterPhysicalRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLogicalRouterPhysicalRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLogicalRouterPhysicalRouterRefRequest
	if _, err := service.DeleteLogicalRouterPhysicalRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLogicalRouterPhysicalRouterRefRequest{
		DeleteLogicalRouterPhysicalRouterRefRequest: request,
	}}, nil
}

func (e *Event_CreateLogicalRouterRouteTableRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLogicalRouterRouteTableRefRequest
	if _, err := service.CreateLogicalRouterRouteTableRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLogicalRouterRouteTableRefRequest{
		CreateLogicalRouterRouteTableRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLogicalRouterRouteTableRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLogicalRouterRouteTableRefRequest
	if _, err := service.DeleteLogicalRouterRouteTableRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLogicalRouterRouteTableRefRequest{
		DeleteLogicalRouterRouteTableRefRequest: request,
	}}, nil
}

func (e *Event_CreateLogicalRouterRouteTargetRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLogicalRouterRouteTargetRefRequest
	if _, err := service.CreateLogicalRouterRouteTargetRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLogicalRouterRouteTargetRefRequest{
		CreateLogicalRouterRouteTargetRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLogicalRouterRouteTargetRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLogicalRouterRouteTargetRefRequest
	if _, err := service.DeleteLogicalRouterRouteTargetRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLogicalRouterRouteTargetRefRequest{
		DeleteLogicalRouterRouteTargetRefRequest: request,
	}}, nil
}

func (e *Event_CreateLogicalRouterServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLogicalRouterServiceInstanceRefRequest
	if _, err := service.CreateLogicalRouterServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLogicalRouterServiceInstanceRefRequest{
		CreateLogicalRouterServiceInstanceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLogicalRouterServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLogicalRouterServiceInstanceRefRequest
	if _, err := service.DeleteLogicalRouterServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLogicalRouterServiceInstanceRefRequest{
		DeleteLogicalRouterServiceInstanceRefRequest: request,
	}}, nil
}

func (e *Event_CreateLogicalRouterVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLogicalRouterVirtualMachineInterfaceRefRequest
	if _, err := service.CreateLogicalRouterVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLogicalRouterVirtualMachineInterfaceRefRequest{
		CreateLogicalRouterVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLogicalRouterVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLogicalRouterVirtualMachineInterfaceRefRequest
	if _, err := service.DeleteLogicalRouterVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLogicalRouterVirtualMachineInterfaceRefRequest{
		DeleteLogicalRouterVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateLogicalRouterVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateLogicalRouterVirtualNetworkRefRequest
	if _, err := service.CreateLogicalRouterVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateLogicalRouterVirtualNetworkRefRequest{
		CreateLogicalRouterVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_DeleteLogicalRouterVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteLogicalRouterVirtualNetworkRefRequest
	if _, err := service.DeleteLogicalRouterVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteLogicalRouterVirtualNetworkRefRequest{
		DeleteLogicalRouterVirtualNetworkRefRequest: request,
	}}, nil
}

type MulticastPolicy = models.MulticastPolicy

func (s *BaseService) CreateMulticastPolicy(ctx context.Context, request *CreateMulticastPolicyRequest) (*CreateMulticastPolicyResponse, error) {
	if s.next == nil {
		return &CreateMulticastPolicyResponse{
			MulticastPolicy: request.GetMulticastPolicy(),
		}, nil
	}
	return s.Next().CreateMulticastPolicy(ctx, request)
}
func (s *BaseService) UpdateMulticastPolicy(ctx context.Context, request *UpdateMulticastPolicyRequest) (*UpdateMulticastPolicyResponse, error) {
	if s.next == nil {
		return &UpdateMulticastPolicyResponse{
			MulticastPolicy: request.GetMulticastPolicy(),
		}, nil
	}
	return s.Next().UpdateMulticastPolicy(ctx, request)
}
func (s *BaseService) DeleteMulticastPolicy(ctx context.Context, request *DeleteMulticastPolicyRequest) (*DeleteMulticastPolicyResponse, error) {
	if s.next == nil {
		return &DeleteMulticastPolicyResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteMulticastPolicy(ctx, request)
}
func (s *BaseService) GetMulticastPolicy(ctx context.Context, request *GetMulticastPolicyRequest) (*GetMulticastPolicyResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetMulticastPolicy(ctx, request)
}
func (s *BaseService) ListMulticastPolicy(ctx context.Context, request *ListMulticastPolicyRequest) (*ListMulticastPolicyResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListMulticastPolicy(ctx, request)
}

func (s *BaseService) CreateMulticastPolicyTagRef(ctx context.Context, request *CreateMulticastPolicyTagRefRequest) (*CreateMulticastPolicyTagRefResponse, error) {
	if s.next == nil {
		return &CreateMulticastPolicyTagRefResponse{
			ID:                    request.ID,
			MulticastPolicyTagRef: request.GetMulticastPolicyTagRef(),
		}, nil
	}
	return s.Next().CreateMulticastPolicyTagRef(ctx, request)
}

func (s *BaseService) DeleteMulticastPolicyTagRef(ctx context.Context, request *DeleteMulticastPolicyTagRefRequest) (*DeleteMulticastPolicyTagRefResponse, error) {
	if s.next == nil {
		return &DeleteMulticastPolicyTagRefResponse{
			ID:                    request.ID,
			MulticastPolicyTagRef: request.GetMulticastPolicyTagRef(),
		}, nil
	}
	return s.Next().DeleteMulticastPolicyTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateMulticastPolicyTagRef(ctx context.Context, request *CreateMulticastPolicyTagRefRequest) (*CreateMulticastPolicyTagRefResponse, error) {
	refField := models.MulticastPolicyFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetMulticastPolicy(ctx, &GetMulticastPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.MulticastPolicy
		obj.AddTagRef(request.MulticastPolicyTagRef)

		_, err = s.BaseService.UpdateMulticastPolicy(ctx, &UpdateMulticastPolicyRequest{
			MulticastPolicy: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateMulticastPolicyTagRefResponse{
		ID:                    request.ID,
		MulticastPolicyTagRef: request.GetMulticastPolicyTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteMulticastPolicyTagRef(ctx context.Context, request *DeleteMulticastPolicyTagRefRequest) (*DeleteMulticastPolicyTagRefResponse, error) {
	refField := models.MulticastPolicyFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetMulticastPolicy(ctx, &GetMulticastPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.MulticastPolicy
		obj.RemoveTagRef(request.MulticastPolicyTagRef)

		_, err = s.BaseService.UpdateMulticastPolicy(ctx, &UpdateMulticastPolicyRequest{
			MulticastPolicy: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteMulticastPolicyTagRefResponse{
		ID:                    request.ID,
		MulticastPolicyTagRef: request.GetMulticastPolicyTagRef(),
	}, nil
}

func (s *EventProducerService) CreateMulticastPolicy(ctx context.Context, request *CreateMulticastPolicyRequest) (*CreateMulticastPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateMulticastPolicyRequest{
				CreateMulticastPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateMulticastPolicy(ctx, request)
}
func (s *EventProducerService) UpdateMulticastPolicy(ctx context.Context, request *UpdateMulticastPolicyRequest) (*UpdateMulticastPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateMulticastPolicyRequest{
				UpdateMulticastPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateMulticastPolicy(ctx, request)
}
func (s *EventProducerService) DeleteMulticastPolicy(ctx context.Context, request *DeleteMulticastPolicyRequest) (*DeleteMulticastPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteMulticastPolicyRequest{
				DeleteMulticastPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteMulticastPolicy(ctx, request)
}

func (s *EventProducerService) CreateMulticastPolicyTagRef(ctx context.Context, request *CreateMulticastPolicyTagRefRequest) (*CreateMulticastPolicyTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateMulticastPolicyTagRefRequest{
			CreateMulticastPolicyTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateMulticastPolicyTagRef(ctx, request)
}

func (s *EventProducerService) DeleteMulticastPolicyTagRef(ctx context.Context, request *DeleteMulticastPolicyTagRefRequest) (*DeleteMulticastPolicyTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteMulticastPolicyTagRefRequest{
			DeleteMulticastPolicyTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteMulticastPolicyTagRef(ctx, request)
}

func (e *Event_CreateMulticastPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateMulticastPolicyRequest
	model := request.MulticastPolicy
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetMulticastPolicy(ctx,
			&GetMulticastPolicyRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateMulticastPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateMulticastPolicyRequest{
			CreateMulticastPolicyRequest: &CreateMulticastPolicyRequest{
				MulticastPolicy: response.GetMulticastPolicy(),
			},
		},
	}, nil
}

func (e *Event_CreateMulticastPolicyRequest) ToUpdateEvent() *Event {
	request := e.CreateMulticastPolicyRequest
	model := request.MulticastPolicy
	return &Event{
		Request: &Event_UpdateMulticastPolicyRequest{
			UpdateMulticastPolicyRequest: &UpdateMulticastPolicyRequest{
				MulticastPolicy: model,
				FieldMask:       request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateMulticastPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateMulticastPolicyRequest
	response, err := service.UpdateMulticastPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateMulticastPolicyRequest{
			UpdateMulticastPolicyRequest: &UpdateMulticastPolicyRequest{
				MulticastPolicy: response.GetMulticastPolicy(),
			},
		},
	}, nil
}

func (e *Event_UpdateMulticastPolicyRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteMulticastPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteMulticastPolicyRequest
	_, err := service.DeleteMulticastPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteMulticastPolicyRequest{
			DeleteMulticastPolicyRequest: &DeleteMulticastPolicyRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateMulticastPolicyTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateMulticastPolicyTagRefRequest
	if _, err := service.CreateMulticastPolicyTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateMulticastPolicyTagRefRequest{
		CreateMulticastPolicyTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteMulticastPolicyTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteMulticastPolicyTagRefRequest
	if _, err := service.DeleteMulticastPolicyTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteMulticastPolicyTagRefRequest{
		DeleteMulticastPolicyTagRefRequest: request,
	}}, nil
}

type Namespace = models.Namespace

func (s *BaseService) CreateNamespace(ctx context.Context, request *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	if s.next == nil {
		return &CreateNamespaceResponse{
			Namespace: request.GetNamespace(),
		}, nil
	}
	return s.Next().CreateNamespace(ctx, request)
}
func (s *BaseService) UpdateNamespace(ctx context.Context, request *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error) {
	if s.next == nil {
		return &UpdateNamespaceResponse{
			Namespace: request.GetNamespace(),
		}, nil
	}
	return s.Next().UpdateNamespace(ctx, request)
}
func (s *BaseService) DeleteNamespace(ctx context.Context, request *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	if s.next == nil {
		return &DeleteNamespaceResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteNamespace(ctx, request)
}
func (s *BaseService) GetNamespace(ctx context.Context, request *GetNamespaceRequest) (*GetNamespaceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetNamespace(ctx, request)
}
func (s *BaseService) ListNamespace(ctx context.Context, request *ListNamespaceRequest) (*ListNamespaceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListNamespace(ctx, request)
}

func (s *BaseService) CreateNamespaceTagRef(ctx context.Context, request *CreateNamespaceTagRefRequest) (*CreateNamespaceTagRefResponse, error) {
	if s.next == nil {
		return &CreateNamespaceTagRefResponse{
			ID:              request.ID,
			NamespaceTagRef: request.GetNamespaceTagRef(),
		}, nil
	}
	return s.Next().CreateNamespaceTagRef(ctx, request)
}

func (s *BaseService) DeleteNamespaceTagRef(ctx context.Context, request *DeleteNamespaceTagRefRequest) (*DeleteNamespaceTagRefResponse, error) {
	if s.next == nil {
		return &DeleteNamespaceTagRefResponse{
			ID:              request.ID,
			NamespaceTagRef: request.GetNamespaceTagRef(),
		}, nil
	}
	return s.Next().DeleteNamespaceTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateNamespaceTagRef(ctx context.Context, request *CreateNamespaceTagRefRequest) (*CreateNamespaceTagRefResponse, error) {
	refField := models.NamespaceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNamespace(ctx, &GetNamespaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Namespace
		obj.AddTagRef(request.NamespaceTagRef)

		_, err = s.BaseService.UpdateNamespace(ctx, &UpdateNamespaceRequest{
			Namespace: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateNamespaceTagRefResponse{
		ID:              request.ID,
		NamespaceTagRef: request.GetNamespaceTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteNamespaceTagRef(ctx context.Context, request *DeleteNamespaceTagRefRequest) (*DeleteNamespaceTagRefResponse, error) {
	refField := models.NamespaceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNamespace(ctx, &GetNamespaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Namespace
		obj.RemoveTagRef(request.NamespaceTagRef)

		_, err = s.BaseService.UpdateNamespace(ctx, &UpdateNamespaceRequest{
			Namespace: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteNamespaceTagRefResponse{
		ID:              request.ID,
		NamespaceTagRef: request.GetNamespaceTagRef(),
	}, nil
}

func (s *EventProducerService) CreateNamespace(ctx context.Context, request *CreateNamespaceRequest) (*CreateNamespaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateNamespaceRequest{
				CreateNamespaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNamespace(ctx, request)
}
func (s *EventProducerService) UpdateNamespace(ctx context.Context, request *UpdateNamespaceRequest) (*UpdateNamespaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateNamespaceRequest{
				UpdateNamespaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateNamespace(ctx, request)
}
func (s *EventProducerService) DeleteNamespace(ctx context.Context, request *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteNamespaceRequest{
				DeleteNamespaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNamespace(ctx, request)
}

func (s *EventProducerService) CreateNamespaceTagRef(ctx context.Context, request *CreateNamespaceTagRefRequest) (*CreateNamespaceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateNamespaceTagRefRequest{
			CreateNamespaceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNamespaceTagRef(ctx, request)
}

func (s *EventProducerService) DeleteNamespaceTagRef(ctx context.Context, request *DeleteNamespaceTagRefRequest) (*DeleteNamespaceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteNamespaceTagRefRequest{
			DeleteNamespaceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNamespaceTagRef(ctx, request)
}

func (e *Event_CreateNamespaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNamespaceRequest
	model := request.Namespace
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetNamespace(ctx,
			&GetNamespaceRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateNamespace(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateNamespaceRequest{
			CreateNamespaceRequest: &CreateNamespaceRequest{
				Namespace: response.GetNamespace(),
			},
		},
	}, nil
}

func (e *Event_CreateNamespaceRequest) ToUpdateEvent() *Event {
	request := e.CreateNamespaceRequest
	model := request.Namespace
	return &Event{
		Request: &Event_UpdateNamespaceRequest{
			UpdateNamespaceRequest: &UpdateNamespaceRequest{
				Namespace: model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateNamespaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateNamespaceRequest
	response, err := service.UpdateNamespace(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateNamespaceRequest{
			UpdateNamespaceRequest: &UpdateNamespaceRequest{
				Namespace: response.GetNamespace(),
			},
		},
	}, nil
}

func (e *Event_UpdateNamespaceRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteNamespaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNamespaceRequest
	_, err := service.DeleteNamespace(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteNamespaceRequest{
			DeleteNamespaceRequest: &DeleteNamespaceRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateNamespaceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNamespaceTagRefRequest
	if _, err := service.CreateNamespaceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateNamespaceTagRefRequest{
		CreateNamespaceTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteNamespaceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNamespaceTagRefRequest
	if _, err := service.DeleteNamespaceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteNamespaceTagRefRequest{
		DeleteNamespaceTagRefRequest: request,
	}}, nil
}

type NetworkDeviceConfig = models.NetworkDeviceConfig

func (s *BaseService) CreateNetworkDeviceConfig(ctx context.Context, request *CreateNetworkDeviceConfigRequest) (*CreateNetworkDeviceConfigResponse, error) {
	if s.next == nil {
		return &CreateNetworkDeviceConfigResponse{
			NetworkDeviceConfig: request.GetNetworkDeviceConfig(),
		}, nil
	}
	return s.Next().CreateNetworkDeviceConfig(ctx, request)
}
func (s *BaseService) UpdateNetworkDeviceConfig(ctx context.Context, request *UpdateNetworkDeviceConfigRequest) (*UpdateNetworkDeviceConfigResponse, error) {
	if s.next == nil {
		return &UpdateNetworkDeviceConfigResponse{
			NetworkDeviceConfig: request.GetNetworkDeviceConfig(),
		}, nil
	}
	return s.Next().UpdateNetworkDeviceConfig(ctx, request)
}
func (s *BaseService) DeleteNetworkDeviceConfig(ctx context.Context, request *DeleteNetworkDeviceConfigRequest) (*DeleteNetworkDeviceConfigResponse, error) {
	if s.next == nil {
		return &DeleteNetworkDeviceConfigResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteNetworkDeviceConfig(ctx, request)
}
func (s *BaseService) GetNetworkDeviceConfig(ctx context.Context, request *GetNetworkDeviceConfigRequest) (*GetNetworkDeviceConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetNetworkDeviceConfig(ctx, request)
}
func (s *BaseService) ListNetworkDeviceConfig(ctx context.Context, request *ListNetworkDeviceConfigRequest) (*ListNetworkDeviceConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListNetworkDeviceConfig(ctx, request)
}

func (s *BaseService) CreateNetworkDeviceConfigTagRef(ctx context.Context, request *CreateNetworkDeviceConfigTagRefRequest) (*CreateNetworkDeviceConfigTagRefResponse, error) {
	if s.next == nil {
		return &CreateNetworkDeviceConfigTagRefResponse{
			ID:                        request.ID,
			NetworkDeviceConfigTagRef: request.GetNetworkDeviceConfigTagRef(),
		}, nil
	}
	return s.Next().CreateNetworkDeviceConfigTagRef(ctx, request)
}

func (s *BaseService) DeleteNetworkDeviceConfigTagRef(ctx context.Context, request *DeleteNetworkDeviceConfigTagRefRequest) (*DeleteNetworkDeviceConfigTagRefResponse, error) {
	if s.next == nil {
		return &DeleteNetworkDeviceConfigTagRefResponse{
			ID:                        request.ID,
			NetworkDeviceConfigTagRef: request.GetNetworkDeviceConfigTagRef(),
		}, nil
	}
	return s.Next().DeleteNetworkDeviceConfigTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateNetworkDeviceConfigTagRef(ctx context.Context, request *CreateNetworkDeviceConfigTagRefRequest) (*CreateNetworkDeviceConfigTagRefResponse, error) {
	refField := models.NetworkDeviceConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNetworkDeviceConfig(ctx, &GetNetworkDeviceConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NetworkDeviceConfig
		obj.AddTagRef(request.NetworkDeviceConfigTagRef)

		_, err = s.BaseService.UpdateNetworkDeviceConfig(ctx, &UpdateNetworkDeviceConfigRequest{
			NetworkDeviceConfig: obj,
			FieldMask:           types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateNetworkDeviceConfigTagRefResponse{
		ID:                        request.ID,
		NetworkDeviceConfigTagRef: request.GetNetworkDeviceConfigTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteNetworkDeviceConfigTagRef(ctx context.Context, request *DeleteNetworkDeviceConfigTagRefRequest) (*DeleteNetworkDeviceConfigTagRefResponse, error) {
	refField := models.NetworkDeviceConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNetworkDeviceConfig(ctx, &GetNetworkDeviceConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NetworkDeviceConfig
		obj.RemoveTagRef(request.NetworkDeviceConfigTagRef)

		_, err = s.BaseService.UpdateNetworkDeviceConfig(ctx, &UpdateNetworkDeviceConfigRequest{
			NetworkDeviceConfig: obj,
			FieldMask:           types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteNetworkDeviceConfigTagRefResponse{
		ID:                        request.ID,
		NetworkDeviceConfigTagRef: request.GetNetworkDeviceConfigTagRef(),
	}, nil
}

func (s *BaseService) CreateNetworkDeviceConfigPhysicalRouterRef(ctx context.Context, request *CreateNetworkDeviceConfigPhysicalRouterRefRequest) (*CreateNetworkDeviceConfigPhysicalRouterRefResponse, error) {
	if s.next == nil {
		return &CreateNetworkDeviceConfigPhysicalRouterRefResponse{
			ID:                                   request.ID,
			NetworkDeviceConfigPhysicalRouterRef: request.GetNetworkDeviceConfigPhysicalRouterRef(),
		}, nil
	}
	return s.Next().CreateNetworkDeviceConfigPhysicalRouterRef(ctx, request)
}

func (s *BaseService) DeleteNetworkDeviceConfigPhysicalRouterRef(ctx context.Context, request *DeleteNetworkDeviceConfigPhysicalRouterRefRequest) (*DeleteNetworkDeviceConfigPhysicalRouterRefResponse, error) {
	if s.next == nil {
		return &DeleteNetworkDeviceConfigPhysicalRouterRefResponse{
			ID:                                   request.ID,
			NetworkDeviceConfigPhysicalRouterRef: request.GetNetworkDeviceConfigPhysicalRouterRef(),
		}, nil
	}
	return s.Next().DeleteNetworkDeviceConfigPhysicalRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateNetworkDeviceConfigPhysicalRouterRef(ctx context.Context, request *CreateNetworkDeviceConfigPhysicalRouterRefRequest) (*CreateNetworkDeviceConfigPhysicalRouterRefResponse, error) {
	refField := models.NetworkDeviceConfigFieldPhysicalRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNetworkDeviceConfig(ctx, &GetNetworkDeviceConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NetworkDeviceConfig
		obj.AddPhysicalRouterRef(request.NetworkDeviceConfigPhysicalRouterRef)

		_, err = s.BaseService.UpdateNetworkDeviceConfig(ctx, &UpdateNetworkDeviceConfigRequest{
			NetworkDeviceConfig: obj,
			FieldMask:           types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateNetworkDeviceConfigPhysicalRouterRefResponse{
		ID:                                   request.ID,
		NetworkDeviceConfigPhysicalRouterRef: request.GetNetworkDeviceConfigPhysicalRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteNetworkDeviceConfigPhysicalRouterRef(ctx context.Context, request *DeleteNetworkDeviceConfigPhysicalRouterRefRequest) (*DeleteNetworkDeviceConfigPhysicalRouterRefResponse, error) {
	refField := models.NetworkDeviceConfigFieldPhysicalRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNetworkDeviceConfig(ctx, &GetNetworkDeviceConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NetworkDeviceConfig
		obj.RemovePhysicalRouterRef(request.NetworkDeviceConfigPhysicalRouterRef)

		_, err = s.BaseService.UpdateNetworkDeviceConfig(ctx, &UpdateNetworkDeviceConfigRequest{
			NetworkDeviceConfig: obj,
			FieldMask:           types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteNetworkDeviceConfigPhysicalRouterRefResponse{
		ID:                                   request.ID,
		NetworkDeviceConfigPhysicalRouterRef: request.GetNetworkDeviceConfigPhysicalRouterRef(),
	}, nil
}

func (s *EventProducerService) CreateNetworkDeviceConfig(ctx context.Context, request *CreateNetworkDeviceConfigRequest) (*CreateNetworkDeviceConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateNetworkDeviceConfigRequest{
				CreateNetworkDeviceConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNetworkDeviceConfig(ctx, request)
}
func (s *EventProducerService) UpdateNetworkDeviceConfig(ctx context.Context, request *UpdateNetworkDeviceConfigRequest) (*UpdateNetworkDeviceConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateNetworkDeviceConfigRequest{
				UpdateNetworkDeviceConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateNetworkDeviceConfig(ctx, request)
}
func (s *EventProducerService) DeleteNetworkDeviceConfig(ctx context.Context, request *DeleteNetworkDeviceConfigRequest) (*DeleteNetworkDeviceConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteNetworkDeviceConfigRequest{
				DeleteNetworkDeviceConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNetworkDeviceConfig(ctx, request)
}

func (s *EventProducerService) CreateNetworkDeviceConfigPhysicalRouterRef(ctx context.Context, request *CreateNetworkDeviceConfigPhysicalRouterRefRequest) (*CreateNetworkDeviceConfigPhysicalRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateNetworkDeviceConfigPhysicalRouterRefRequest{
			CreateNetworkDeviceConfigPhysicalRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNetworkDeviceConfigPhysicalRouterRef(ctx, request)
}

func (s *EventProducerService) DeleteNetworkDeviceConfigPhysicalRouterRef(ctx context.Context, request *DeleteNetworkDeviceConfigPhysicalRouterRefRequest) (*DeleteNetworkDeviceConfigPhysicalRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteNetworkDeviceConfigPhysicalRouterRefRequest{
			DeleteNetworkDeviceConfigPhysicalRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNetworkDeviceConfigPhysicalRouterRef(ctx, request)
}

func (s *EventProducerService) CreateNetworkDeviceConfigTagRef(ctx context.Context, request *CreateNetworkDeviceConfigTagRefRequest) (*CreateNetworkDeviceConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateNetworkDeviceConfigTagRefRequest{
			CreateNetworkDeviceConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNetworkDeviceConfigTagRef(ctx, request)
}

func (s *EventProducerService) DeleteNetworkDeviceConfigTagRef(ctx context.Context, request *DeleteNetworkDeviceConfigTagRefRequest) (*DeleteNetworkDeviceConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteNetworkDeviceConfigTagRefRequest{
			DeleteNetworkDeviceConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNetworkDeviceConfigTagRef(ctx, request)
}

func (e *Event_CreateNetworkDeviceConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNetworkDeviceConfigRequest
	model := request.NetworkDeviceConfig
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetNetworkDeviceConfig(ctx,
			&GetNetworkDeviceConfigRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateNetworkDeviceConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateNetworkDeviceConfigRequest{
			CreateNetworkDeviceConfigRequest: &CreateNetworkDeviceConfigRequest{
				NetworkDeviceConfig: response.GetNetworkDeviceConfig(),
			},
		},
	}, nil
}

func (e *Event_CreateNetworkDeviceConfigRequest) ToUpdateEvent() *Event {
	request := e.CreateNetworkDeviceConfigRequest
	model := request.NetworkDeviceConfig
	return &Event{
		Request: &Event_UpdateNetworkDeviceConfigRequest{
			UpdateNetworkDeviceConfigRequest: &UpdateNetworkDeviceConfigRequest{
				NetworkDeviceConfig: model,
				FieldMask:           request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateNetworkDeviceConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateNetworkDeviceConfigRequest
	response, err := service.UpdateNetworkDeviceConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateNetworkDeviceConfigRequest{
			UpdateNetworkDeviceConfigRequest: &UpdateNetworkDeviceConfigRequest{
				NetworkDeviceConfig: response.GetNetworkDeviceConfig(),
			},
		},
	}, nil
}

func (e *Event_UpdateNetworkDeviceConfigRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteNetworkDeviceConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNetworkDeviceConfigRequest
	_, err := service.DeleteNetworkDeviceConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteNetworkDeviceConfigRequest{
			DeleteNetworkDeviceConfigRequest: &DeleteNetworkDeviceConfigRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateNetworkDeviceConfigPhysicalRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNetworkDeviceConfigPhysicalRouterRefRequest
	if _, err := service.CreateNetworkDeviceConfigPhysicalRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateNetworkDeviceConfigPhysicalRouterRefRequest{
		CreateNetworkDeviceConfigPhysicalRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeleteNetworkDeviceConfigPhysicalRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNetworkDeviceConfigPhysicalRouterRefRequest
	if _, err := service.DeleteNetworkDeviceConfigPhysicalRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteNetworkDeviceConfigPhysicalRouterRefRequest{
		DeleteNetworkDeviceConfigPhysicalRouterRefRequest: request,
	}}, nil
}

func (e *Event_CreateNetworkDeviceConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNetworkDeviceConfigTagRefRequest
	if _, err := service.CreateNetworkDeviceConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateNetworkDeviceConfigTagRefRequest{
		CreateNetworkDeviceConfigTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteNetworkDeviceConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNetworkDeviceConfigTagRefRequest
	if _, err := service.DeleteNetworkDeviceConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteNetworkDeviceConfigTagRefRequest{
		DeleteNetworkDeviceConfigTagRefRequest: request,
	}}, nil
}

type NetworkIpam = models.NetworkIpam

func (s *BaseService) CreateNetworkIpam(ctx context.Context, request *CreateNetworkIpamRequest) (*CreateNetworkIpamResponse, error) {
	if s.next == nil {
		return &CreateNetworkIpamResponse{
			NetworkIpam: request.GetNetworkIpam(),
		}, nil
	}
	return s.Next().CreateNetworkIpam(ctx, request)
}
func (s *BaseService) UpdateNetworkIpam(ctx context.Context, request *UpdateNetworkIpamRequest) (*UpdateNetworkIpamResponse, error) {
	if s.next == nil {
		return &UpdateNetworkIpamResponse{
			NetworkIpam: request.GetNetworkIpam(),
		}, nil
	}
	return s.Next().UpdateNetworkIpam(ctx, request)
}
func (s *BaseService) DeleteNetworkIpam(ctx context.Context, request *DeleteNetworkIpamRequest) (*DeleteNetworkIpamResponse, error) {
	if s.next == nil {
		return &DeleteNetworkIpamResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteNetworkIpam(ctx, request)
}
func (s *BaseService) GetNetworkIpam(ctx context.Context, request *GetNetworkIpamRequest) (*GetNetworkIpamResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetNetworkIpam(ctx, request)
}
func (s *BaseService) ListNetworkIpam(ctx context.Context, request *ListNetworkIpamRequest) (*ListNetworkIpamResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListNetworkIpam(ctx, request)
}

func (s *BaseService) CreateNetworkIpamTagRef(ctx context.Context, request *CreateNetworkIpamTagRefRequest) (*CreateNetworkIpamTagRefResponse, error) {
	if s.next == nil {
		return &CreateNetworkIpamTagRefResponse{
			ID:                request.ID,
			NetworkIpamTagRef: request.GetNetworkIpamTagRef(),
		}, nil
	}
	return s.Next().CreateNetworkIpamTagRef(ctx, request)
}

func (s *BaseService) DeleteNetworkIpamTagRef(ctx context.Context, request *DeleteNetworkIpamTagRefRequest) (*DeleteNetworkIpamTagRefResponse, error) {
	if s.next == nil {
		return &DeleteNetworkIpamTagRefResponse{
			ID:                request.ID,
			NetworkIpamTagRef: request.GetNetworkIpamTagRef(),
		}, nil
	}
	return s.Next().DeleteNetworkIpamTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateNetworkIpamTagRef(ctx context.Context, request *CreateNetworkIpamTagRefRequest) (*CreateNetworkIpamTagRefResponse, error) {
	refField := models.NetworkIpamFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNetworkIpam(ctx, &GetNetworkIpamRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NetworkIpam
		obj.AddTagRef(request.NetworkIpamTagRef)

		_, err = s.BaseService.UpdateNetworkIpam(ctx, &UpdateNetworkIpamRequest{
			NetworkIpam: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateNetworkIpamTagRefResponse{
		ID:                request.ID,
		NetworkIpamTagRef: request.GetNetworkIpamTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteNetworkIpamTagRef(ctx context.Context, request *DeleteNetworkIpamTagRefRequest) (*DeleteNetworkIpamTagRefResponse, error) {
	refField := models.NetworkIpamFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNetworkIpam(ctx, &GetNetworkIpamRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NetworkIpam
		obj.RemoveTagRef(request.NetworkIpamTagRef)

		_, err = s.BaseService.UpdateNetworkIpam(ctx, &UpdateNetworkIpamRequest{
			NetworkIpam: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteNetworkIpamTagRefResponse{
		ID:                request.ID,
		NetworkIpamTagRef: request.GetNetworkIpamTagRef(),
	}, nil
}

func (s *BaseService) CreateNetworkIpamVirtualDNSRef(ctx context.Context, request *CreateNetworkIpamVirtualDNSRefRequest) (*CreateNetworkIpamVirtualDNSRefResponse, error) {
	if s.next == nil {
		return &CreateNetworkIpamVirtualDNSRefResponse{
			ID:                       request.ID,
			NetworkIpamVirtualDNSRef: request.GetNetworkIpamVirtualDNSRef(),
		}, nil
	}
	return s.Next().CreateNetworkIpamVirtualDNSRef(ctx, request)
}

func (s *BaseService) DeleteNetworkIpamVirtualDNSRef(ctx context.Context, request *DeleteNetworkIpamVirtualDNSRefRequest) (*DeleteNetworkIpamVirtualDNSRefResponse, error) {
	if s.next == nil {
		return &DeleteNetworkIpamVirtualDNSRefResponse{
			ID:                       request.ID,
			NetworkIpamVirtualDNSRef: request.GetNetworkIpamVirtualDNSRef(),
		}, nil
	}
	return s.Next().DeleteNetworkIpamVirtualDNSRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateNetworkIpamVirtualDNSRef(ctx context.Context, request *CreateNetworkIpamVirtualDNSRefRequest) (*CreateNetworkIpamVirtualDNSRefResponse, error) {
	refField := models.NetworkIpamFieldVirtualDNSRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNetworkIpam(ctx, &GetNetworkIpamRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NetworkIpam
		obj.AddVirtualDNSRef(request.NetworkIpamVirtualDNSRef)

		_, err = s.BaseService.UpdateNetworkIpam(ctx, &UpdateNetworkIpamRequest{
			NetworkIpam: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateNetworkIpamVirtualDNSRefResponse{
		ID:                       request.ID,
		NetworkIpamVirtualDNSRef: request.GetNetworkIpamVirtualDNSRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteNetworkIpamVirtualDNSRef(ctx context.Context, request *DeleteNetworkIpamVirtualDNSRefRequest) (*DeleteNetworkIpamVirtualDNSRefResponse, error) {
	refField := models.NetworkIpamFieldVirtualDNSRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNetworkIpam(ctx, &GetNetworkIpamRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NetworkIpam
		obj.RemoveVirtualDNSRef(request.NetworkIpamVirtualDNSRef)

		_, err = s.BaseService.UpdateNetworkIpam(ctx, &UpdateNetworkIpamRequest{
			NetworkIpam: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteNetworkIpamVirtualDNSRefResponse{
		ID:                       request.ID,
		NetworkIpamVirtualDNSRef: request.GetNetworkIpamVirtualDNSRef(),
	}, nil
}

func (s *EventProducerService) CreateNetworkIpam(ctx context.Context, request *CreateNetworkIpamRequest) (*CreateNetworkIpamResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateNetworkIpamRequest{
				CreateNetworkIpamRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNetworkIpam(ctx, request)
}
func (s *EventProducerService) UpdateNetworkIpam(ctx context.Context, request *UpdateNetworkIpamRequest) (*UpdateNetworkIpamResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateNetworkIpamRequest{
				UpdateNetworkIpamRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateNetworkIpam(ctx, request)
}
func (s *EventProducerService) DeleteNetworkIpam(ctx context.Context, request *DeleteNetworkIpamRequest) (*DeleteNetworkIpamResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteNetworkIpamRequest{
				DeleteNetworkIpamRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNetworkIpam(ctx, request)
}

func (s *EventProducerService) CreateNetworkIpamVirtualDNSRef(ctx context.Context, request *CreateNetworkIpamVirtualDNSRefRequest) (*CreateNetworkIpamVirtualDNSRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateNetworkIpamVirtualDNSRefRequest{
			CreateNetworkIpamVirtualDNSRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNetworkIpamVirtualDNSRef(ctx, request)
}

func (s *EventProducerService) DeleteNetworkIpamVirtualDNSRef(ctx context.Context, request *DeleteNetworkIpamVirtualDNSRefRequest) (*DeleteNetworkIpamVirtualDNSRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteNetworkIpamVirtualDNSRefRequest{
			DeleteNetworkIpamVirtualDNSRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNetworkIpamVirtualDNSRef(ctx, request)
}

func (s *EventProducerService) CreateNetworkIpamTagRef(ctx context.Context, request *CreateNetworkIpamTagRefRequest) (*CreateNetworkIpamTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateNetworkIpamTagRefRequest{
			CreateNetworkIpamTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNetworkIpamTagRef(ctx, request)
}

func (s *EventProducerService) DeleteNetworkIpamTagRef(ctx context.Context, request *DeleteNetworkIpamTagRefRequest) (*DeleteNetworkIpamTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteNetworkIpamTagRefRequest{
			DeleteNetworkIpamTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNetworkIpamTagRef(ctx, request)
}

func (e *Event_CreateNetworkIpamRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNetworkIpamRequest
	model := request.NetworkIpam
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetNetworkIpam(ctx,
			&GetNetworkIpamRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateNetworkIpam(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateNetworkIpamRequest{
			CreateNetworkIpamRequest: &CreateNetworkIpamRequest{
				NetworkIpam: response.GetNetworkIpam(),
			},
		},
	}, nil
}

func (e *Event_CreateNetworkIpamRequest) ToUpdateEvent() *Event {
	request := e.CreateNetworkIpamRequest
	model := request.NetworkIpam
	return &Event{
		Request: &Event_UpdateNetworkIpamRequest{
			UpdateNetworkIpamRequest: &UpdateNetworkIpamRequest{
				NetworkIpam: model,
				FieldMask:   request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateNetworkIpamRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateNetworkIpamRequest
	response, err := service.UpdateNetworkIpam(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateNetworkIpamRequest{
			UpdateNetworkIpamRequest: &UpdateNetworkIpamRequest{
				NetworkIpam: response.GetNetworkIpam(),
			},
		},
	}, nil
}

func (e *Event_UpdateNetworkIpamRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteNetworkIpamRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNetworkIpamRequest
	_, err := service.DeleteNetworkIpam(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteNetworkIpamRequest{
			DeleteNetworkIpamRequest: &DeleteNetworkIpamRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateNetworkIpamVirtualDNSRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNetworkIpamVirtualDNSRefRequest
	if _, err := service.CreateNetworkIpamVirtualDNSRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateNetworkIpamVirtualDNSRefRequest{
		CreateNetworkIpamVirtualDNSRefRequest: request,
	}}, nil
}

func (e *Event_DeleteNetworkIpamVirtualDNSRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNetworkIpamVirtualDNSRefRequest
	if _, err := service.DeleteNetworkIpamVirtualDNSRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteNetworkIpamVirtualDNSRefRequest{
		DeleteNetworkIpamVirtualDNSRefRequest: request,
	}}, nil
}

func (e *Event_CreateNetworkIpamTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNetworkIpamTagRefRequest
	if _, err := service.CreateNetworkIpamTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateNetworkIpamTagRefRequest{
		CreateNetworkIpamTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteNetworkIpamTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNetworkIpamTagRefRequest
	if _, err := service.DeleteNetworkIpamTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteNetworkIpamTagRefRequest{
		DeleteNetworkIpamTagRefRequest: request,
	}}, nil
}

type NetworkPolicy = models.NetworkPolicy

func (s *BaseService) CreateNetworkPolicy(ctx context.Context, request *CreateNetworkPolicyRequest) (*CreateNetworkPolicyResponse, error) {
	if s.next == nil {
		return &CreateNetworkPolicyResponse{
			NetworkPolicy: request.GetNetworkPolicy(),
		}, nil
	}
	return s.Next().CreateNetworkPolicy(ctx, request)
}
func (s *BaseService) UpdateNetworkPolicy(ctx context.Context, request *UpdateNetworkPolicyRequest) (*UpdateNetworkPolicyResponse, error) {
	if s.next == nil {
		return &UpdateNetworkPolicyResponse{
			NetworkPolicy: request.GetNetworkPolicy(),
		}, nil
	}
	return s.Next().UpdateNetworkPolicy(ctx, request)
}
func (s *BaseService) DeleteNetworkPolicy(ctx context.Context, request *DeleteNetworkPolicyRequest) (*DeleteNetworkPolicyResponse, error) {
	if s.next == nil {
		return &DeleteNetworkPolicyResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteNetworkPolicy(ctx, request)
}
func (s *BaseService) GetNetworkPolicy(ctx context.Context, request *GetNetworkPolicyRequest) (*GetNetworkPolicyResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetNetworkPolicy(ctx, request)
}
func (s *BaseService) ListNetworkPolicy(ctx context.Context, request *ListNetworkPolicyRequest) (*ListNetworkPolicyResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListNetworkPolicy(ctx, request)
}

func (s *BaseService) CreateNetworkPolicyTagRef(ctx context.Context, request *CreateNetworkPolicyTagRefRequest) (*CreateNetworkPolicyTagRefResponse, error) {
	if s.next == nil {
		return &CreateNetworkPolicyTagRefResponse{
			ID:                  request.ID,
			NetworkPolicyTagRef: request.GetNetworkPolicyTagRef(),
		}, nil
	}
	return s.Next().CreateNetworkPolicyTagRef(ctx, request)
}

func (s *BaseService) DeleteNetworkPolicyTagRef(ctx context.Context, request *DeleteNetworkPolicyTagRefRequest) (*DeleteNetworkPolicyTagRefResponse, error) {
	if s.next == nil {
		return &DeleteNetworkPolicyTagRefResponse{
			ID:                  request.ID,
			NetworkPolicyTagRef: request.GetNetworkPolicyTagRef(),
		}, nil
	}
	return s.Next().DeleteNetworkPolicyTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateNetworkPolicyTagRef(ctx context.Context, request *CreateNetworkPolicyTagRefRequest) (*CreateNetworkPolicyTagRefResponse, error) {
	refField := models.NetworkPolicyFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNetworkPolicy(ctx, &GetNetworkPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NetworkPolicy
		obj.AddTagRef(request.NetworkPolicyTagRef)

		_, err = s.BaseService.UpdateNetworkPolicy(ctx, &UpdateNetworkPolicyRequest{
			NetworkPolicy: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateNetworkPolicyTagRefResponse{
		ID:                  request.ID,
		NetworkPolicyTagRef: request.GetNetworkPolicyTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteNetworkPolicyTagRef(ctx context.Context, request *DeleteNetworkPolicyTagRefRequest) (*DeleteNetworkPolicyTagRefResponse, error) {
	refField := models.NetworkPolicyFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNetworkPolicy(ctx, &GetNetworkPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NetworkPolicy
		obj.RemoveTagRef(request.NetworkPolicyTagRef)

		_, err = s.BaseService.UpdateNetworkPolicy(ctx, &UpdateNetworkPolicyRequest{
			NetworkPolicy: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteNetworkPolicyTagRefResponse{
		ID:                  request.ID,
		NetworkPolicyTagRef: request.GetNetworkPolicyTagRef(),
	}, nil
}

func (s *EventProducerService) CreateNetworkPolicy(ctx context.Context, request *CreateNetworkPolicyRequest) (*CreateNetworkPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateNetworkPolicyRequest{
				CreateNetworkPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNetworkPolicy(ctx, request)
}
func (s *EventProducerService) UpdateNetworkPolicy(ctx context.Context, request *UpdateNetworkPolicyRequest) (*UpdateNetworkPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateNetworkPolicyRequest{
				UpdateNetworkPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateNetworkPolicy(ctx, request)
}
func (s *EventProducerService) DeleteNetworkPolicy(ctx context.Context, request *DeleteNetworkPolicyRequest) (*DeleteNetworkPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteNetworkPolicyRequest{
				DeleteNetworkPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNetworkPolicy(ctx, request)
}

func (s *EventProducerService) CreateNetworkPolicyTagRef(ctx context.Context, request *CreateNetworkPolicyTagRefRequest) (*CreateNetworkPolicyTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateNetworkPolicyTagRefRequest{
			CreateNetworkPolicyTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNetworkPolicyTagRef(ctx, request)
}

func (s *EventProducerService) DeleteNetworkPolicyTagRef(ctx context.Context, request *DeleteNetworkPolicyTagRefRequest) (*DeleteNetworkPolicyTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteNetworkPolicyTagRefRequest{
			DeleteNetworkPolicyTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNetworkPolicyTagRef(ctx, request)
}

func (e *Event_CreateNetworkPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNetworkPolicyRequest
	model := request.NetworkPolicy
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetNetworkPolicy(ctx,
			&GetNetworkPolicyRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateNetworkPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateNetworkPolicyRequest{
			CreateNetworkPolicyRequest: &CreateNetworkPolicyRequest{
				NetworkPolicy: response.GetNetworkPolicy(),
			},
		},
	}, nil
}

func (e *Event_CreateNetworkPolicyRequest) ToUpdateEvent() *Event {
	request := e.CreateNetworkPolicyRequest
	model := request.NetworkPolicy
	return &Event{
		Request: &Event_UpdateNetworkPolicyRequest{
			UpdateNetworkPolicyRequest: &UpdateNetworkPolicyRequest{
				NetworkPolicy: model,
				FieldMask:     request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateNetworkPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateNetworkPolicyRequest
	response, err := service.UpdateNetworkPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateNetworkPolicyRequest{
			UpdateNetworkPolicyRequest: &UpdateNetworkPolicyRequest{
				NetworkPolicy: response.GetNetworkPolicy(),
			},
		},
	}, nil
}

func (e *Event_UpdateNetworkPolicyRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteNetworkPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNetworkPolicyRequest
	_, err := service.DeleteNetworkPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteNetworkPolicyRequest{
			DeleteNetworkPolicyRequest: &DeleteNetworkPolicyRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateNetworkPolicyTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNetworkPolicyTagRefRequest
	if _, err := service.CreateNetworkPolicyTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateNetworkPolicyTagRefRequest{
		CreateNetworkPolicyTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteNetworkPolicyTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNetworkPolicyTagRefRequest
	if _, err := service.DeleteNetworkPolicyTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteNetworkPolicyTagRefRequest{
		DeleteNetworkPolicyTagRefRequest: request,
	}}, nil
}

type NodeProfile = models.NodeProfile

func (s *BaseService) CreateNodeProfile(ctx context.Context, request *CreateNodeProfileRequest) (*CreateNodeProfileResponse, error) {
	if s.next == nil {
		return &CreateNodeProfileResponse{
			NodeProfile: request.GetNodeProfile(),
		}, nil
	}
	return s.Next().CreateNodeProfile(ctx, request)
}
func (s *BaseService) UpdateNodeProfile(ctx context.Context, request *UpdateNodeProfileRequest) (*UpdateNodeProfileResponse, error) {
	if s.next == nil {
		return &UpdateNodeProfileResponse{
			NodeProfile: request.GetNodeProfile(),
		}, nil
	}
	return s.Next().UpdateNodeProfile(ctx, request)
}
func (s *BaseService) DeleteNodeProfile(ctx context.Context, request *DeleteNodeProfileRequest) (*DeleteNodeProfileResponse, error) {
	if s.next == nil {
		return &DeleteNodeProfileResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteNodeProfile(ctx, request)
}
func (s *BaseService) GetNodeProfile(ctx context.Context, request *GetNodeProfileRequest) (*GetNodeProfileResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetNodeProfile(ctx, request)
}
func (s *BaseService) ListNodeProfile(ctx context.Context, request *ListNodeProfileRequest) (*ListNodeProfileResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListNodeProfile(ctx, request)
}

func (s *BaseService) CreateNodeProfileHardwareRef(ctx context.Context, request *CreateNodeProfileHardwareRefRequest) (*CreateNodeProfileHardwareRefResponse, error) {
	if s.next == nil {
		return &CreateNodeProfileHardwareRefResponse{
			ID:                     request.ID,
			NodeProfileHardwareRef: request.GetNodeProfileHardwareRef(),
		}, nil
	}
	return s.Next().CreateNodeProfileHardwareRef(ctx, request)
}

func (s *BaseService) DeleteNodeProfileHardwareRef(ctx context.Context, request *DeleteNodeProfileHardwareRefRequest) (*DeleteNodeProfileHardwareRefResponse, error) {
	if s.next == nil {
		return &DeleteNodeProfileHardwareRefResponse{
			ID:                     request.ID,
			NodeProfileHardwareRef: request.GetNodeProfileHardwareRef(),
		}, nil
	}
	return s.Next().DeleteNodeProfileHardwareRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateNodeProfileHardwareRef(ctx context.Context, request *CreateNodeProfileHardwareRefRequest) (*CreateNodeProfileHardwareRefResponse, error) {
	refField := models.NodeProfileFieldHardwareRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNodeProfile(ctx, &GetNodeProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NodeProfile
		obj.AddHardwareRef(request.NodeProfileHardwareRef)

		_, err = s.BaseService.UpdateNodeProfile(ctx, &UpdateNodeProfileRequest{
			NodeProfile: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateNodeProfileHardwareRefResponse{
		ID:                     request.ID,
		NodeProfileHardwareRef: request.GetNodeProfileHardwareRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteNodeProfileHardwareRef(ctx context.Context, request *DeleteNodeProfileHardwareRefRequest) (*DeleteNodeProfileHardwareRefResponse, error) {
	refField := models.NodeProfileFieldHardwareRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNodeProfile(ctx, &GetNodeProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NodeProfile
		obj.RemoveHardwareRef(request.NodeProfileHardwareRef)

		_, err = s.BaseService.UpdateNodeProfile(ctx, &UpdateNodeProfileRequest{
			NodeProfile: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteNodeProfileHardwareRefResponse{
		ID:                     request.ID,
		NodeProfileHardwareRef: request.GetNodeProfileHardwareRef(),
	}, nil
}

func (s *BaseService) CreateNodeProfileJobTemplateRef(ctx context.Context, request *CreateNodeProfileJobTemplateRefRequest) (*CreateNodeProfileJobTemplateRefResponse, error) {
	if s.next == nil {
		return &CreateNodeProfileJobTemplateRefResponse{
			ID:                        request.ID,
			NodeProfileJobTemplateRef: request.GetNodeProfileJobTemplateRef(),
		}, nil
	}
	return s.Next().CreateNodeProfileJobTemplateRef(ctx, request)
}

func (s *BaseService) DeleteNodeProfileJobTemplateRef(ctx context.Context, request *DeleteNodeProfileJobTemplateRefRequest) (*DeleteNodeProfileJobTemplateRefResponse, error) {
	if s.next == nil {
		return &DeleteNodeProfileJobTemplateRefResponse{
			ID:                        request.ID,
			NodeProfileJobTemplateRef: request.GetNodeProfileJobTemplateRef(),
		}, nil
	}
	return s.Next().DeleteNodeProfileJobTemplateRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateNodeProfileJobTemplateRef(ctx context.Context, request *CreateNodeProfileJobTemplateRefRequest) (*CreateNodeProfileJobTemplateRefResponse, error) {
	refField := models.NodeProfileFieldJobTemplateRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNodeProfile(ctx, &GetNodeProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NodeProfile
		obj.AddJobTemplateRef(request.NodeProfileJobTemplateRef)

		_, err = s.BaseService.UpdateNodeProfile(ctx, &UpdateNodeProfileRequest{
			NodeProfile: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateNodeProfileJobTemplateRefResponse{
		ID:                        request.ID,
		NodeProfileJobTemplateRef: request.GetNodeProfileJobTemplateRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteNodeProfileJobTemplateRef(ctx context.Context, request *DeleteNodeProfileJobTemplateRefRequest) (*DeleteNodeProfileJobTemplateRefResponse, error) {
	refField := models.NodeProfileFieldJobTemplateRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNodeProfile(ctx, &GetNodeProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NodeProfile
		obj.RemoveJobTemplateRef(request.NodeProfileJobTemplateRef)

		_, err = s.BaseService.UpdateNodeProfile(ctx, &UpdateNodeProfileRequest{
			NodeProfile: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteNodeProfileJobTemplateRefResponse{
		ID:                        request.ID,
		NodeProfileJobTemplateRef: request.GetNodeProfileJobTemplateRef(),
	}, nil
}

func (s *BaseService) CreateNodeProfileRoleDefinitionRef(ctx context.Context, request *CreateNodeProfileRoleDefinitionRefRequest) (*CreateNodeProfileRoleDefinitionRefResponse, error) {
	if s.next == nil {
		return &CreateNodeProfileRoleDefinitionRefResponse{
			ID:                           request.ID,
			NodeProfileRoleDefinitionRef: request.GetNodeProfileRoleDefinitionRef(),
		}, nil
	}
	return s.Next().CreateNodeProfileRoleDefinitionRef(ctx, request)
}

func (s *BaseService) DeleteNodeProfileRoleDefinitionRef(ctx context.Context, request *DeleteNodeProfileRoleDefinitionRefRequest) (*DeleteNodeProfileRoleDefinitionRefResponse, error) {
	if s.next == nil {
		return &DeleteNodeProfileRoleDefinitionRefResponse{
			ID:                           request.ID,
			NodeProfileRoleDefinitionRef: request.GetNodeProfileRoleDefinitionRef(),
		}, nil
	}
	return s.Next().DeleteNodeProfileRoleDefinitionRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateNodeProfileRoleDefinitionRef(ctx context.Context, request *CreateNodeProfileRoleDefinitionRefRequest) (*CreateNodeProfileRoleDefinitionRefResponse, error) {
	refField := models.NodeProfileFieldRoleDefinitionRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNodeProfile(ctx, &GetNodeProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NodeProfile
		obj.AddRoleDefinitionRef(request.NodeProfileRoleDefinitionRef)

		_, err = s.BaseService.UpdateNodeProfile(ctx, &UpdateNodeProfileRequest{
			NodeProfile: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateNodeProfileRoleDefinitionRefResponse{
		ID:                           request.ID,
		NodeProfileRoleDefinitionRef: request.GetNodeProfileRoleDefinitionRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteNodeProfileRoleDefinitionRef(ctx context.Context, request *DeleteNodeProfileRoleDefinitionRefRequest) (*DeleteNodeProfileRoleDefinitionRefResponse, error) {
	refField := models.NodeProfileFieldRoleDefinitionRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNodeProfile(ctx, &GetNodeProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NodeProfile
		obj.RemoveRoleDefinitionRef(request.NodeProfileRoleDefinitionRef)

		_, err = s.BaseService.UpdateNodeProfile(ctx, &UpdateNodeProfileRequest{
			NodeProfile: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteNodeProfileRoleDefinitionRefResponse{
		ID:                           request.ID,
		NodeProfileRoleDefinitionRef: request.GetNodeProfileRoleDefinitionRef(),
	}, nil
}

func (s *BaseService) CreateNodeProfileTagRef(ctx context.Context, request *CreateNodeProfileTagRefRequest) (*CreateNodeProfileTagRefResponse, error) {
	if s.next == nil {
		return &CreateNodeProfileTagRefResponse{
			ID:                request.ID,
			NodeProfileTagRef: request.GetNodeProfileTagRef(),
		}, nil
	}
	return s.Next().CreateNodeProfileTagRef(ctx, request)
}

func (s *BaseService) DeleteNodeProfileTagRef(ctx context.Context, request *DeleteNodeProfileTagRefRequest) (*DeleteNodeProfileTagRefResponse, error) {
	if s.next == nil {
		return &DeleteNodeProfileTagRefResponse{
			ID:                request.ID,
			NodeProfileTagRef: request.GetNodeProfileTagRef(),
		}, nil
	}
	return s.Next().DeleteNodeProfileTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateNodeProfileTagRef(ctx context.Context, request *CreateNodeProfileTagRefRequest) (*CreateNodeProfileTagRefResponse, error) {
	refField := models.NodeProfileFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNodeProfile(ctx, &GetNodeProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NodeProfile
		obj.AddTagRef(request.NodeProfileTagRef)

		_, err = s.BaseService.UpdateNodeProfile(ctx, &UpdateNodeProfileRequest{
			NodeProfile: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateNodeProfileTagRefResponse{
		ID:                request.ID,
		NodeProfileTagRef: request.GetNodeProfileTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteNodeProfileTagRef(ctx context.Context, request *DeleteNodeProfileTagRefRequest) (*DeleteNodeProfileTagRefResponse, error) {
	refField := models.NodeProfileFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNodeProfile(ctx, &GetNodeProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.NodeProfile
		obj.RemoveTagRef(request.NodeProfileTagRef)

		_, err = s.BaseService.UpdateNodeProfile(ctx, &UpdateNodeProfileRequest{
			NodeProfile: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteNodeProfileTagRefResponse{
		ID:                request.ID,
		NodeProfileTagRef: request.GetNodeProfileTagRef(),
	}, nil
}

func (s *EventProducerService) CreateNodeProfile(ctx context.Context, request *CreateNodeProfileRequest) (*CreateNodeProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateNodeProfileRequest{
				CreateNodeProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNodeProfile(ctx, request)
}
func (s *EventProducerService) UpdateNodeProfile(ctx context.Context, request *UpdateNodeProfileRequest) (*UpdateNodeProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateNodeProfileRequest{
				UpdateNodeProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateNodeProfile(ctx, request)
}
func (s *EventProducerService) DeleteNodeProfile(ctx context.Context, request *DeleteNodeProfileRequest) (*DeleteNodeProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteNodeProfileRequest{
				DeleteNodeProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNodeProfile(ctx, request)
}

func (s *EventProducerService) CreateNodeProfileHardwareRef(ctx context.Context, request *CreateNodeProfileHardwareRefRequest) (*CreateNodeProfileHardwareRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateNodeProfileHardwareRefRequest{
			CreateNodeProfileHardwareRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNodeProfileHardwareRef(ctx, request)
}

func (s *EventProducerService) DeleteNodeProfileHardwareRef(ctx context.Context, request *DeleteNodeProfileHardwareRefRequest) (*DeleteNodeProfileHardwareRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteNodeProfileHardwareRefRequest{
			DeleteNodeProfileHardwareRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNodeProfileHardwareRef(ctx, request)
}

func (s *EventProducerService) CreateNodeProfileJobTemplateRef(ctx context.Context, request *CreateNodeProfileJobTemplateRefRequest) (*CreateNodeProfileJobTemplateRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateNodeProfileJobTemplateRefRequest{
			CreateNodeProfileJobTemplateRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNodeProfileJobTemplateRef(ctx, request)
}

func (s *EventProducerService) DeleteNodeProfileJobTemplateRef(ctx context.Context, request *DeleteNodeProfileJobTemplateRefRequest) (*DeleteNodeProfileJobTemplateRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteNodeProfileJobTemplateRefRequest{
			DeleteNodeProfileJobTemplateRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNodeProfileJobTemplateRef(ctx, request)
}

func (s *EventProducerService) CreateNodeProfileRoleDefinitionRef(ctx context.Context, request *CreateNodeProfileRoleDefinitionRefRequest) (*CreateNodeProfileRoleDefinitionRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateNodeProfileRoleDefinitionRefRequest{
			CreateNodeProfileRoleDefinitionRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNodeProfileRoleDefinitionRef(ctx, request)
}

func (s *EventProducerService) DeleteNodeProfileRoleDefinitionRef(ctx context.Context, request *DeleteNodeProfileRoleDefinitionRefRequest) (*DeleteNodeProfileRoleDefinitionRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteNodeProfileRoleDefinitionRefRequest{
			DeleteNodeProfileRoleDefinitionRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNodeProfileRoleDefinitionRef(ctx, request)
}

func (s *EventProducerService) CreateNodeProfileTagRef(ctx context.Context, request *CreateNodeProfileTagRefRequest) (*CreateNodeProfileTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateNodeProfileTagRefRequest{
			CreateNodeProfileTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNodeProfileTagRef(ctx, request)
}

func (s *EventProducerService) DeleteNodeProfileTagRef(ctx context.Context, request *DeleteNodeProfileTagRefRequest) (*DeleteNodeProfileTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteNodeProfileTagRefRequest{
			DeleteNodeProfileTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNodeProfileTagRef(ctx, request)
}

func (e *Event_CreateNodeProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNodeProfileRequest
	model := request.NodeProfile
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetNodeProfile(ctx,
			&GetNodeProfileRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateNodeProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateNodeProfileRequest{
			CreateNodeProfileRequest: &CreateNodeProfileRequest{
				NodeProfile: response.GetNodeProfile(),
			},
		},
	}, nil
}

func (e *Event_CreateNodeProfileRequest) ToUpdateEvent() *Event {
	request := e.CreateNodeProfileRequest
	model := request.NodeProfile
	return &Event{
		Request: &Event_UpdateNodeProfileRequest{
			UpdateNodeProfileRequest: &UpdateNodeProfileRequest{
				NodeProfile: model,
				FieldMask:   request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateNodeProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateNodeProfileRequest
	response, err := service.UpdateNodeProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateNodeProfileRequest{
			UpdateNodeProfileRequest: &UpdateNodeProfileRequest{
				NodeProfile: response.GetNodeProfile(),
			},
		},
	}, nil
}

func (e *Event_UpdateNodeProfileRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteNodeProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNodeProfileRequest
	_, err := service.DeleteNodeProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteNodeProfileRequest{
			DeleteNodeProfileRequest: &DeleteNodeProfileRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateNodeProfileRoleDefinitionRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNodeProfileRoleDefinitionRefRequest
	if _, err := service.CreateNodeProfileRoleDefinitionRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateNodeProfileRoleDefinitionRefRequest{
		CreateNodeProfileRoleDefinitionRefRequest: request,
	}}, nil
}

func (e *Event_DeleteNodeProfileRoleDefinitionRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNodeProfileRoleDefinitionRefRequest
	if _, err := service.DeleteNodeProfileRoleDefinitionRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteNodeProfileRoleDefinitionRefRequest{
		DeleteNodeProfileRoleDefinitionRefRequest: request,
	}}, nil
}

func (e *Event_CreateNodeProfileTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNodeProfileTagRefRequest
	if _, err := service.CreateNodeProfileTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateNodeProfileTagRefRequest{
		CreateNodeProfileTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteNodeProfileTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNodeProfileTagRefRequest
	if _, err := service.DeleteNodeProfileTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteNodeProfileTagRefRequest{
		DeleteNodeProfileTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateNodeProfileHardwareRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNodeProfileHardwareRefRequest
	if _, err := service.CreateNodeProfileHardwareRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateNodeProfileHardwareRefRequest{
		CreateNodeProfileHardwareRefRequest: request,
	}}, nil
}

func (e *Event_DeleteNodeProfileHardwareRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNodeProfileHardwareRefRequest
	if _, err := service.DeleteNodeProfileHardwareRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteNodeProfileHardwareRefRequest{
		DeleteNodeProfileHardwareRefRequest: request,
	}}, nil
}

func (e *Event_CreateNodeProfileJobTemplateRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNodeProfileJobTemplateRefRequest
	if _, err := service.CreateNodeProfileJobTemplateRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateNodeProfileJobTemplateRefRequest{
		CreateNodeProfileJobTemplateRefRequest: request,
	}}, nil
}

func (e *Event_DeleteNodeProfileJobTemplateRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNodeProfileJobTemplateRefRequest
	if _, err := service.DeleteNodeProfileJobTemplateRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteNodeProfileJobTemplateRefRequest{
		DeleteNodeProfileJobTemplateRefRequest: request,
	}}, nil
}

type Node = models.Node

func (s *BaseService) CreateNode(ctx context.Context, request *CreateNodeRequest) (*CreateNodeResponse, error) {
	if s.next == nil {
		return &CreateNodeResponse{
			Node: request.GetNode(),
		}, nil
	}
	return s.Next().CreateNode(ctx, request)
}
func (s *BaseService) UpdateNode(ctx context.Context, request *UpdateNodeRequest) (*UpdateNodeResponse, error) {
	if s.next == nil {
		return &UpdateNodeResponse{
			Node: request.GetNode(),
		}, nil
	}
	return s.Next().UpdateNode(ctx, request)
}
func (s *BaseService) DeleteNode(ctx context.Context, request *DeleteNodeRequest) (*DeleteNodeResponse, error) {
	if s.next == nil {
		return &DeleteNodeResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteNode(ctx, request)
}
func (s *BaseService) GetNode(ctx context.Context, request *GetNodeRequest) (*GetNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetNode(ctx, request)
}
func (s *BaseService) ListNode(ctx context.Context, request *ListNodeRequest) (*ListNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListNode(ctx, request)
}

func (s *BaseService) CreateNodeNodeProfileRef(ctx context.Context, request *CreateNodeNodeProfileRefRequest) (*CreateNodeNodeProfileRefResponse, error) {
	if s.next == nil {
		return &CreateNodeNodeProfileRefResponse{
			ID:                 request.ID,
			NodeNodeProfileRef: request.GetNodeNodeProfileRef(),
		}, nil
	}
	return s.Next().CreateNodeNodeProfileRef(ctx, request)
}

func (s *BaseService) DeleteNodeNodeProfileRef(ctx context.Context, request *DeleteNodeNodeProfileRefRequest) (*DeleteNodeNodeProfileRefResponse, error) {
	if s.next == nil {
		return &DeleteNodeNodeProfileRefResponse{
			ID:                 request.ID,
			NodeNodeProfileRef: request.GetNodeNodeProfileRef(),
		}, nil
	}
	return s.Next().DeleteNodeNodeProfileRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateNodeNodeProfileRef(ctx context.Context, request *CreateNodeNodeProfileRefRequest) (*CreateNodeNodeProfileRefResponse, error) {
	refField := models.NodeFieldNodeProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNode(ctx, &GetNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Node
		obj.AddNodeProfileRef(request.NodeNodeProfileRef)

		_, err = s.BaseService.UpdateNode(ctx, &UpdateNodeRequest{
			Node:      obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateNodeNodeProfileRefResponse{
		ID:                 request.ID,
		NodeNodeProfileRef: request.GetNodeNodeProfileRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteNodeNodeProfileRef(ctx context.Context, request *DeleteNodeNodeProfileRefRequest) (*DeleteNodeNodeProfileRefResponse, error) {
	refField := models.NodeFieldNodeProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNode(ctx, &GetNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Node
		obj.RemoveNodeProfileRef(request.NodeNodeProfileRef)

		_, err = s.BaseService.UpdateNode(ctx, &UpdateNodeRequest{
			Node:      obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteNodeNodeProfileRefResponse{
		ID:                 request.ID,
		NodeNodeProfileRef: request.GetNodeNodeProfileRef(),
	}, nil
}

func (s *BaseService) CreateNodeTagRef(ctx context.Context, request *CreateNodeTagRefRequest) (*CreateNodeTagRefResponse, error) {
	if s.next == nil {
		return &CreateNodeTagRefResponse{
			ID:         request.ID,
			NodeTagRef: request.GetNodeTagRef(),
		}, nil
	}
	return s.Next().CreateNodeTagRef(ctx, request)
}

func (s *BaseService) DeleteNodeTagRef(ctx context.Context, request *DeleteNodeTagRefRequest) (*DeleteNodeTagRefResponse, error) {
	if s.next == nil {
		return &DeleteNodeTagRefResponse{
			ID:         request.ID,
			NodeTagRef: request.GetNodeTagRef(),
		}, nil
	}
	return s.Next().DeleteNodeTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateNodeTagRef(ctx context.Context, request *CreateNodeTagRefRequest) (*CreateNodeTagRefResponse, error) {
	refField := models.NodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNode(ctx, &GetNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Node
		obj.AddTagRef(request.NodeTagRef)

		_, err = s.BaseService.UpdateNode(ctx, &UpdateNodeRequest{
			Node:      obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateNodeTagRefResponse{
		ID:         request.ID,
		NodeTagRef: request.GetNodeTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteNodeTagRef(ctx context.Context, request *DeleteNodeTagRefRequest) (*DeleteNodeTagRefResponse, error) {
	refField := models.NodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetNode(ctx, &GetNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Node
		obj.RemoveTagRef(request.NodeTagRef)

		_, err = s.BaseService.UpdateNode(ctx, &UpdateNodeRequest{
			Node:      obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteNodeTagRefResponse{
		ID:         request.ID,
		NodeTagRef: request.GetNodeTagRef(),
	}, nil
}

func (s *EventProducerService) CreateNode(ctx context.Context, request *CreateNodeRequest) (*CreateNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateNodeRequest{
				CreateNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNode(ctx, request)
}
func (s *EventProducerService) UpdateNode(ctx context.Context, request *UpdateNodeRequest) (*UpdateNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateNodeRequest{
				UpdateNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateNode(ctx, request)
}
func (s *EventProducerService) DeleteNode(ctx context.Context, request *DeleteNodeRequest) (*DeleteNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteNodeRequest{
				DeleteNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNode(ctx, request)
}

func (s *EventProducerService) CreateNodeNodeProfileRef(ctx context.Context, request *CreateNodeNodeProfileRefRequest) (*CreateNodeNodeProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateNodeNodeProfileRefRequest{
			CreateNodeNodeProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNodeNodeProfileRef(ctx, request)
}

func (s *EventProducerService) DeleteNodeNodeProfileRef(ctx context.Context, request *DeleteNodeNodeProfileRefRequest) (*DeleteNodeNodeProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteNodeNodeProfileRefRequest{
			DeleteNodeNodeProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNodeNodeProfileRef(ctx, request)
}

func (s *EventProducerService) CreateNodeTagRef(ctx context.Context, request *CreateNodeTagRefRequest) (*CreateNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateNodeTagRefRequest{
			CreateNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateNodeTagRef(ctx, request)
}

func (s *EventProducerService) DeleteNodeTagRef(ctx context.Context, request *DeleteNodeTagRefRequest) (*DeleteNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteNodeTagRefRequest{
			DeleteNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteNodeTagRef(ctx, request)
}

func (e *Event_CreateNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNodeRequest
	model := request.Node
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetNode(ctx,
			&GetNodeRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateNodeRequest{
			CreateNodeRequest: &CreateNodeRequest{
				Node: response.GetNode(),
			},
		},
	}, nil
}

func (e *Event_CreateNodeRequest) ToUpdateEvent() *Event {
	request := e.CreateNodeRequest
	model := request.Node
	return &Event{
		Request: &Event_UpdateNodeRequest{
			UpdateNodeRequest: &UpdateNodeRequest{
				Node:      model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateNodeRequest
	response, err := service.UpdateNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateNodeRequest{
			UpdateNodeRequest: &UpdateNodeRequest{
				Node: response.GetNode(),
			},
		},
	}, nil
}

func (e *Event_UpdateNodeRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNodeRequest
	_, err := service.DeleteNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteNodeRequest{
			DeleteNodeRequest: &DeleteNodeRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateNodeNodeProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNodeNodeProfileRefRequest
	if _, err := service.CreateNodeNodeProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateNodeNodeProfileRefRequest{
		CreateNodeNodeProfileRefRequest: request,
	}}, nil
}

func (e *Event_DeleteNodeNodeProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNodeNodeProfileRefRequest
	if _, err := service.DeleteNodeNodeProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteNodeNodeProfileRefRequest{
		DeleteNodeNodeProfileRefRequest: request,
	}}, nil
}

func (e *Event_CreateNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateNodeTagRefRequest
	if _, err := service.CreateNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateNodeTagRefRequest{
		CreateNodeTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteNodeTagRefRequest
	if _, err := service.DeleteNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteNodeTagRefRequest{
		DeleteNodeTagRefRequest: request,
	}}, nil
}

type OverlayRole = models.OverlayRole

func (s *BaseService) CreateOverlayRole(ctx context.Context, request *CreateOverlayRoleRequest) (*CreateOverlayRoleResponse, error) {
	if s.next == nil {
		return &CreateOverlayRoleResponse{
			OverlayRole: request.GetOverlayRole(),
		}, nil
	}
	return s.Next().CreateOverlayRole(ctx, request)
}
func (s *BaseService) UpdateOverlayRole(ctx context.Context, request *UpdateOverlayRoleRequest) (*UpdateOverlayRoleResponse, error) {
	if s.next == nil {
		return &UpdateOverlayRoleResponse{
			OverlayRole: request.GetOverlayRole(),
		}, nil
	}
	return s.Next().UpdateOverlayRole(ctx, request)
}
func (s *BaseService) DeleteOverlayRole(ctx context.Context, request *DeleteOverlayRoleRequest) (*DeleteOverlayRoleResponse, error) {
	if s.next == nil {
		return &DeleteOverlayRoleResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteOverlayRole(ctx, request)
}
func (s *BaseService) GetOverlayRole(ctx context.Context, request *GetOverlayRoleRequest) (*GetOverlayRoleResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetOverlayRole(ctx, request)
}
func (s *BaseService) ListOverlayRole(ctx context.Context, request *ListOverlayRoleRequest) (*ListOverlayRoleResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListOverlayRole(ctx, request)
}

func (s *BaseService) CreateOverlayRoleTagRef(ctx context.Context, request *CreateOverlayRoleTagRefRequest) (*CreateOverlayRoleTagRefResponse, error) {
	if s.next == nil {
		return &CreateOverlayRoleTagRefResponse{
			ID:                request.ID,
			OverlayRoleTagRef: request.GetOverlayRoleTagRef(),
		}, nil
	}
	return s.Next().CreateOverlayRoleTagRef(ctx, request)
}

func (s *BaseService) DeleteOverlayRoleTagRef(ctx context.Context, request *DeleteOverlayRoleTagRefRequest) (*DeleteOverlayRoleTagRefResponse, error) {
	if s.next == nil {
		return &DeleteOverlayRoleTagRefResponse{
			ID:                request.ID,
			OverlayRoleTagRef: request.GetOverlayRoleTagRef(),
		}, nil
	}
	return s.Next().DeleteOverlayRoleTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateOverlayRoleTagRef(ctx context.Context, request *CreateOverlayRoleTagRefRequest) (*CreateOverlayRoleTagRefResponse, error) {
	refField := models.OverlayRoleFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetOverlayRole(ctx, &GetOverlayRoleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.OverlayRole
		obj.AddTagRef(request.OverlayRoleTagRef)

		_, err = s.BaseService.UpdateOverlayRole(ctx, &UpdateOverlayRoleRequest{
			OverlayRole: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateOverlayRoleTagRefResponse{
		ID:                request.ID,
		OverlayRoleTagRef: request.GetOverlayRoleTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteOverlayRoleTagRef(ctx context.Context, request *DeleteOverlayRoleTagRefRequest) (*DeleteOverlayRoleTagRefResponse, error) {
	refField := models.OverlayRoleFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetOverlayRole(ctx, &GetOverlayRoleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.OverlayRole
		obj.RemoveTagRef(request.OverlayRoleTagRef)

		_, err = s.BaseService.UpdateOverlayRole(ctx, &UpdateOverlayRoleRequest{
			OverlayRole: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteOverlayRoleTagRefResponse{
		ID:                request.ID,
		OverlayRoleTagRef: request.GetOverlayRoleTagRef(),
	}, nil
}

func (s *EventProducerService) CreateOverlayRole(ctx context.Context, request *CreateOverlayRoleRequest) (*CreateOverlayRoleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateOverlayRoleRequest{
				CreateOverlayRoleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateOverlayRole(ctx, request)
}
func (s *EventProducerService) UpdateOverlayRole(ctx context.Context, request *UpdateOverlayRoleRequest) (*UpdateOverlayRoleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateOverlayRoleRequest{
				UpdateOverlayRoleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateOverlayRole(ctx, request)
}
func (s *EventProducerService) DeleteOverlayRole(ctx context.Context, request *DeleteOverlayRoleRequest) (*DeleteOverlayRoleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteOverlayRoleRequest{
				DeleteOverlayRoleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteOverlayRole(ctx, request)
}

func (s *EventProducerService) CreateOverlayRoleTagRef(ctx context.Context, request *CreateOverlayRoleTagRefRequest) (*CreateOverlayRoleTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateOverlayRoleTagRefRequest{
			CreateOverlayRoleTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateOverlayRoleTagRef(ctx, request)
}

func (s *EventProducerService) DeleteOverlayRoleTagRef(ctx context.Context, request *DeleteOverlayRoleTagRefRequest) (*DeleteOverlayRoleTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteOverlayRoleTagRefRequest{
			DeleteOverlayRoleTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteOverlayRoleTagRef(ctx, request)
}

func (e *Event_CreateOverlayRoleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateOverlayRoleRequest
	model := request.OverlayRole
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetOverlayRole(ctx,
			&GetOverlayRoleRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateOverlayRole(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateOverlayRoleRequest{
			CreateOverlayRoleRequest: &CreateOverlayRoleRequest{
				OverlayRole: response.GetOverlayRole(),
			},
		},
	}, nil
}

func (e *Event_CreateOverlayRoleRequest) ToUpdateEvent() *Event {
	request := e.CreateOverlayRoleRequest
	model := request.OverlayRole
	return &Event{
		Request: &Event_UpdateOverlayRoleRequest{
			UpdateOverlayRoleRequest: &UpdateOverlayRoleRequest{
				OverlayRole: model,
				FieldMask:   request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateOverlayRoleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateOverlayRoleRequest
	response, err := service.UpdateOverlayRole(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateOverlayRoleRequest{
			UpdateOverlayRoleRequest: &UpdateOverlayRoleRequest{
				OverlayRole: response.GetOverlayRole(),
			},
		},
	}, nil
}

func (e *Event_UpdateOverlayRoleRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteOverlayRoleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteOverlayRoleRequest
	_, err := service.DeleteOverlayRole(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteOverlayRoleRequest{
			DeleteOverlayRoleRequest: &DeleteOverlayRoleRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateOverlayRoleTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateOverlayRoleTagRefRequest
	if _, err := service.CreateOverlayRoleTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateOverlayRoleTagRefRequest{
		CreateOverlayRoleTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteOverlayRoleTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteOverlayRoleTagRefRequest
	if _, err := service.DeleteOverlayRoleTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteOverlayRoleTagRefRequest{
		DeleteOverlayRoleTagRefRequest: request,
	}}, nil
}

type PeeringPolicy = models.PeeringPolicy

func (s *BaseService) CreatePeeringPolicy(ctx context.Context, request *CreatePeeringPolicyRequest) (*CreatePeeringPolicyResponse, error) {
	if s.next == nil {
		return &CreatePeeringPolicyResponse{
			PeeringPolicy: request.GetPeeringPolicy(),
		}, nil
	}
	return s.Next().CreatePeeringPolicy(ctx, request)
}
func (s *BaseService) UpdatePeeringPolicy(ctx context.Context, request *UpdatePeeringPolicyRequest) (*UpdatePeeringPolicyResponse, error) {
	if s.next == nil {
		return &UpdatePeeringPolicyResponse{
			PeeringPolicy: request.GetPeeringPolicy(),
		}, nil
	}
	return s.Next().UpdatePeeringPolicy(ctx, request)
}
func (s *BaseService) DeletePeeringPolicy(ctx context.Context, request *DeletePeeringPolicyRequest) (*DeletePeeringPolicyResponse, error) {
	if s.next == nil {
		return &DeletePeeringPolicyResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeletePeeringPolicy(ctx, request)
}
func (s *BaseService) GetPeeringPolicy(ctx context.Context, request *GetPeeringPolicyRequest) (*GetPeeringPolicyResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetPeeringPolicy(ctx, request)
}
func (s *BaseService) ListPeeringPolicy(ctx context.Context, request *ListPeeringPolicyRequest) (*ListPeeringPolicyResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListPeeringPolicy(ctx, request)
}

func (s *BaseService) CreatePeeringPolicyTagRef(ctx context.Context, request *CreatePeeringPolicyTagRefRequest) (*CreatePeeringPolicyTagRefResponse, error) {
	if s.next == nil {
		return &CreatePeeringPolicyTagRefResponse{
			ID:                  request.ID,
			PeeringPolicyTagRef: request.GetPeeringPolicyTagRef(),
		}, nil
	}
	return s.Next().CreatePeeringPolicyTagRef(ctx, request)
}

func (s *BaseService) DeletePeeringPolicyTagRef(ctx context.Context, request *DeletePeeringPolicyTagRefRequest) (*DeletePeeringPolicyTagRefResponse, error) {
	if s.next == nil {
		return &DeletePeeringPolicyTagRefResponse{
			ID:                  request.ID,
			PeeringPolicyTagRef: request.GetPeeringPolicyTagRef(),
		}, nil
	}
	return s.Next().DeletePeeringPolicyTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePeeringPolicyTagRef(ctx context.Context, request *CreatePeeringPolicyTagRefRequest) (*CreatePeeringPolicyTagRefResponse, error) {
	refField := models.PeeringPolicyFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPeeringPolicy(ctx, &GetPeeringPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PeeringPolicy
		obj.AddTagRef(request.PeeringPolicyTagRef)

		_, err = s.BaseService.UpdatePeeringPolicy(ctx, &UpdatePeeringPolicyRequest{
			PeeringPolicy: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePeeringPolicyTagRefResponse{
		ID:                  request.ID,
		PeeringPolicyTagRef: request.GetPeeringPolicyTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePeeringPolicyTagRef(ctx context.Context, request *DeletePeeringPolicyTagRefRequest) (*DeletePeeringPolicyTagRefResponse, error) {
	refField := models.PeeringPolicyFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPeeringPolicy(ctx, &GetPeeringPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PeeringPolicy
		obj.RemoveTagRef(request.PeeringPolicyTagRef)

		_, err = s.BaseService.UpdatePeeringPolicy(ctx, &UpdatePeeringPolicyRequest{
			PeeringPolicy: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePeeringPolicyTagRefResponse{
		ID:                  request.ID,
		PeeringPolicyTagRef: request.GetPeeringPolicyTagRef(),
	}, nil
}

func (s *EventProducerService) CreatePeeringPolicy(ctx context.Context, request *CreatePeeringPolicyRequest) (*CreatePeeringPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreatePeeringPolicyRequest{
				CreatePeeringPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePeeringPolicy(ctx, request)
}
func (s *EventProducerService) UpdatePeeringPolicy(ctx context.Context, request *UpdatePeeringPolicyRequest) (*UpdatePeeringPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdatePeeringPolicyRequest{
				UpdatePeeringPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdatePeeringPolicy(ctx, request)
}
func (s *EventProducerService) DeletePeeringPolicy(ctx context.Context, request *DeletePeeringPolicyRequest) (*DeletePeeringPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeletePeeringPolicyRequest{
				DeletePeeringPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePeeringPolicy(ctx, request)
}

func (s *EventProducerService) CreatePeeringPolicyTagRef(ctx context.Context, request *CreatePeeringPolicyTagRefRequest) (*CreatePeeringPolicyTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePeeringPolicyTagRefRequest{
			CreatePeeringPolicyTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePeeringPolicyTagRef(ctx, request)
}

func (s *EventProducerService) DeletePeeringPolicyTagRef(ctx context.Context, request *DeletePeeringPolicyTagRefRequest) (*DeletePeeringPolicyTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePeeringPolicyTagRefRequest{
			DeletePeeringPolicyTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePeeringPolicyTagRef(ctx, request)
}

func (e *Event_CreatePeeringPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePeeringPolicyRequest
	model := request.PeeringPolicy
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetPeeringPolicy(ctx,
			&GetPeeringPolicyRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreatePeeringPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreatePeeringPolicyRequest{
			CreatePeeringPolicyRequest: &CreatePeeringPolicyRequest{
				PeeringPolicy: response.GetPeeringPolicy(),
			},
		},
	}, nil
}

func (e *Event_CreatePeeringPolicyRequest) ToUpdateEvent() *Event {
	request := e.CreatePeeringPolicyRequest
	model := request.PeeringPolicy
	return &Event{
		Request: &Event_UpdatePeeringPolicyRequest{
			UpdatePeeringPolicyRequest: &UpdatePeeringPolicyRequest{
				PeeringPolicy: model,
				FieldMask:     request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdatePeeringPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdatePeeringPolicyRequest
	response, err := service.UpdatePeeringPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdatePeeringPolicyRequest{
			UpdatePeeringPolicyRequest: &UpdatePeeringPolicyRequest{
				PeeringPolicy: response.GetPeeringPolicy(),
			},
		},
	}, nil
}

func (e *Event_UpdatePeeringPolicyRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeletePeeringPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePeeringPolicyRequest
	_, err := service.DeletePeeringPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeletePeeringPolicyRequest{
			DeletePeeringPolicyRequest: &DeletePeeringPolicyRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreatePeeringPolicyTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePeeringPolicyTagRefRequest
	if _, err := service.CreatePeeringPolicyTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePeeringPolicyTagRefRequest{
		CreatePeeringPolicyTagRefRequest: request,
	}}, nil
}

func (e *Event_DeletePeeringPolicyTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePeeringPolicyTagRefRequest
	if _, err := service.DeletePeeringPolicyTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePeeringPolicyTagRefRequest{
		DeletePeeringPolicyTagRefRequest: request,
	}}, nil
}

type PhysicalInterface = models.PhysicalInterface

func (s *BaseService) CreatePhysicalInterface(ctx context.Context, request *CreatePhysicalInterfaceRequest) (*CreatePhysicalInterfaceResponse, error) {
	if s.next == nil {
		return &CreatePhysicalInterfaceResponse{
			PhysicalInterface: request.GetPhysicalInterface(),
		}, nil
	}
	return s.Next().CreatePhysicalInterface(ctx, request)
}
func (s *BaseService) UpdatePhysicalInterface(ctx context.Context, request *UpdatePhysicalInterfaceRequest) (*UpdatePhysicalInterfaceResponse, error) {
	if s.next == nil {
		return &UpdatePhysicalInterfaceResponse{
			PhysicalInterface: request.GetPhysicalInterface(),
		}, nil
	}
	return s.Next().UpdatePhysicalInterface(ctx, request)
}
func (s *BaseService) DeletePhysicalInterface(ctx context.Context, request *DeletePhysicalInterfaceRequest) (*DeletePhysicalInterfaceResponse, error) {
	if s.next == nil {
		return &DeletePhysicalInterfaceResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeletePhysicalInterface(ctx, request)
}
func (s *BaseService) GetPhysicalInterface(ctx context.Context, request *GetPhysicalInterfaceRequest) (*GetPhysicalInterfaceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetPhysicalInterface(ctx, request)
}
func (s *BaseService) ListPhysicalInterface(ctx context.Context, request *ListPhysicalInterfaceRequest) (*ListPhysicalInterfaceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListPhysicalInterface(ctx, request)
}

func (s *BaseService) CreatePhysicalInterfacePhysicalInterfaceRef(ctx context.Context, request *CreatePhysicalInterfacePhysicalInterfaceRefRequest) (*CreatePhysicalInterfacePhysicalInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalInterfacePhysicalInterfaceRefResponse{
			ID:                                    request.ID,
			PhysicalInterfacePhysicalInterfaceRef: request.GetPhysicalInterfacePhysicalInterfaceRef(),
		}, nil
	}
	return s.Next().CreatePhysicalInterfacePhysicalInterfaceRef(ctx, request)
}

func (s *BaseService) DeletePhysicalInterfacePhysicalInterfaceRef(ctx context.Context, request *DeletePhysicalInterfacePhysicalInterfaceRefRequest) (*DeletePhysicalInterfacePhysicalInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalInterfacePhysicalInterfaceRefResponse{
			ID:                                    request.ID,
			PhysicalInterfacePhysicalInterfaceRef: request.GetPhysicalInterfacePhysicalInterfaceRef(),
		}, nil
	}
	return s.Next().DeletePhysicalInterfacePhysicalInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalInterfacePhysicalInterfaceRef(ctx context.Context, request *CreatePhysicalInterfacePhysicalInterfaceRefRequest) (*CreatePhysicalInterfacePhysicalInterfaceRefResponse, error) {
	refField := models.PhysicalInterfaceFieldPhysicalInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalInterface(ctx, &GetPhysicalInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalInterface
		obj.AddPhysicalInterfaceRef(request.PhysicalInterfacePhysicalInterfaceRef)

		_, err = s.BaseService.UpdatePhysicalInterface(ctx, &UpdatePhysicalInterfaceRequest{
			PhysicalInterface: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalInterfacePhysicalInterfaceRefResponse{
		ID:                                    request.ID,
		PhysicalInterfacePhysicalInterfaceRef: request.GetPhysicalInterfacePhysicalInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalInterfacePhysicalInterfaceRef(ctx context.Context, request *DeletePhysicalInterfacePhysicalInterfaceRefRequest) (*DeletePhysicalInterfacePhysicalInterfaceRefResponse, error) {
	refField := models.PhysicalInterfaceFieldPhysicalInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalInterface(ctx, &GetPhysicalInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalInterface
		obj.RemovePhysicalInterfaceRef(request.PhysicalInterfacePhysicalInterfaceRef)

		_, err = s.BaseService.UpdatePhysicalInterface(ctx, &UpdatePhysicalInterfaceRequest{
			PhysicalInterface: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalInterfacePhysicalInterfaceRefResponse{
		ID:                                    request.ID,
		PhysicalInterfacePhysicalInterfaceRef: request.GetPhysicalInterfacePhysicalInterfaceRef(),
	}, nil
}

func (s *BaseService) CreatePhysicalInterfacePortRef(ctx context.Context, request *CreatePhysicalInterfacePortRefRequest) (*CreatePhysicalInterfacePortRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalInterfacePortRefResponse{
			ID:                       request.ID,
			PhysicalInterfacePortRef: request.GetPhysicalInterfacePortRef(),
		}, nil
	}
	return s.Next().CreatePhysicalInterfacePortRef(ctx, request)
}

func (s *BaseService) DeletePhysicalInterfacePortRef(ctx context.Context, request *DeletePhysicalInterfacePortRefRequest) (*DeletePhysicalInterfacePortRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalInterfacePortRefResponse{
			ID:                       request.ID,
			PhysicalInterfacePortRef: request.GetPhysicalInterfacePortRef(),
		}, nil
	}
	return s.Next().DeletePhysicalInterfacePortRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalInterfacePortRef(ctx context.Context, request *CreatePhysicalInterfacePortRefRequest) (*CreatePhysicalInterfacePortRefResponse, error) {
	refField := models.PhysicalInterfaceFieldPortRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalInterface(ctx, &GetPhysicalInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalInterface
		obj.AddPortRef(request.PhysicalInterfacePortRef)

		_, err = s.BaseService.UpdatePhysicalInterface(ctx, &UpdatePhysicalInterfaceRequest{
			PhysicalInterface: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalInterfacePortRefResponse{
		ID:                       request.ID,
		PhysicalInterfacePortRef: request.GetPhysicalInterfacePortRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalInterfacePortRef(ctx context.Context, request *DeletePhysicalInterfacePortRefRequest) (*DeletePhysicalInterfacePortRefResponse, error) {
	refField := models.PhysicalInterfaceFieldPortRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalInterface(ctx, &GetPhysicalInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalInterface
		obj.RemovePortRef(request.PhysicalInterfacePortRef)

		_, err = s.BaseService.UpdatePhysicalInterface(ctx, &UpdatePhysicalInterfaceRequest{
			PhysicalInterface: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalInterfacePortRefResponse{
		ID:                       request.ID,
		PhysicalInterfacePortRef: request.GetPhysicalInterfacePortRef(),
	}, nil
}

func (s *BaseService) CreatePhysicalInterfaceTagRef(ctx context.Context, request *CreatePhysicalInterfaceTagRefRequest) (*CreatePhysicalInterfaceTagRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalInterfaceTagRefResponse{
			ID:                      request.ID,
			PhysicalInterfaceTagRef: request.GetPhysicalInterfaceTagRef(),
		}, nil
	}
	return s.Next().CreatePhysicalInterfaceTagRef(ctx, request)
}

func (s *BaseService) DeletePhysicalInterfaceTagRef(ctx context.Context, request *DeletePhysicalInterfaceTagRefRequest) (*DeletePhysicalInterfaceTagRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalInterfaceTagRefResponse{
			ID:                      request.ID,
			PhysicalInterfaceTagRef: request.GetPhysicalInterfaceTagRef(),
		}, nil
	}
	return s.Next().DeletePhysicalInterfaceTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalInterfaceTagRef(ctx context.Context, request *CreatePhysicalInterfaceTagRefRequest) (*CreatePhysicalInterfaceTagRefResponse, error) {
	refField := models.PhysicalInterfaceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalInterface(ctx, &GetPhysicalInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalInterface
		obj.AddTagRef(request.PhysicalInterfaceTagRef)

		_, err = s.BaseService.UpdatePhysicalInterface(ctx, &UpdatePhysicalInterfaceRequest{
			PhysicalInterface: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalInterfaceTagRefResponse{
		ID:                      request.ID,
		PhysicalInterfaceTagRef: request.GetPhysicalInterfaceTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalInterfaceTagRef(ctx context.Context, request *DeletePhysicalInterfaceTagRefRequest) (*DeletePhysicalInterfaceTagRefResponse, error) {
	refField := models.PhysicalInterfaceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalInterface(ctx, &GetPhysicalInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalInterface
		obj.RemoveTagRef(request.PhysicalInterfaceTagRef)

		_, err = s.BaseService.UpdatePhysicalInterface(ctx, &UpdatePhysicalInterfaceRequest{
			PhysicalInterface: obj,
			FieldMask:         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalInterfaceTagRefResponse{
		ID:                      request.ID,
		PhysicalInterfaceTagRef: request.GetPhysicalInterfaceTagRef(),
	}, nil
}

func (s *EventProducerService) CreatePhysicalInterface(ctx context.Context, request *CreatePhysicalInterfaceRequest) (*CreatePhysicalInterfaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreatePhysicalInterfaceRequest{
				CreatePhysicalInterfaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalInterface(ctx, request)
}
func (s *EventProducerService) UpdatePhysicalInterface(ctx context.Context, request *UpdatePhysicalInterfaceRequest) (*UpdatePhysicalInterfaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdatePhysicalInterfaceRequest{
				UpdatePhysicalInterfaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdatePhysicalInterface(ctx, request)
}
func (s *EventProducerService) DeletePhysicalInterface(ctx context.Context, request *DeletePhysicalInterfaceRequest) (*DeletePhysicalInterfaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeletePhysicalInterfaceRequest{
				DeletePhysicalInterfaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalInterface(ctx, request)
}

func (s *EventProducerService) CreatePhysicalInterfacePhysicalInterfaceRef(ctx context.Context, request *CreatePhysicalInterfacePhysicalInterfaceRefRequest) (*CreatePhysicalInterfacePhysicalInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalInterfacePhysicalInterfaceRefRequest{
			CreatePhysicalInterfacePhysicalInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalInterfacePhysicalInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalInterfacePhysicalInterfaceRef(ctx context.Context, request *DeletePhysicalInterfacePhysicalInterfaceRefRequest) (*DeletePhysicalInterfacePhysicalInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalInterfacePhysicalInterfaceRefRequest{
			DeletePhysicalInterfacePhysicalInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalInterfacePhysicalInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreatePhysicalInterfacePortRef(ctx context.Context, request *CreatePhysicalInterfacePortRefRequest) (*CreatePhysicalInterfacePortRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalInterfacePortRefRequest{
			CreatePhysicalInterfacePortRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalInterfacePortRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalInterfacePortRef(ctx context.Context, request *DeletePhysicalInterfacePortRefRequest) (*DeletePhysicalInterfacePortRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalInterfacePortRefRequest{
			DeletePhysicalInterfacePortRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalInterfacePortRef(ctx, request)
}

func (s *EventProducerService) CreatePhysicalInterfaceTagRef(ctx context.Context, request *CreatePhysicalInterfaceTagRefRequest) (*CreatePhysicalInterfaceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalInterfaceTagRefRequest{
			CreatePhysicalInterfaceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalInterfaceTagRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalInterfaceTagRef(ctx context.Context, request *DeletePhysicalInterfaceTagRefRequest) (*DeletePhysicalInterfaceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalInterfaceTagRefRequest{
			DeletePhysicalInterfaceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalInterfaceTagRef(ctx, request)
}

func (e *Event_CreatePhysicalInterfaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalInterfaceRequest
	model := request.PhysicalInterface
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetPhysicalInterface(ctx,
			&GetPhysicalInterfaceRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreatePhysicalInterface(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreatePhysicalInterfaceRequest{
			CreatePhysicalInterfaceRequest: &CreatePhysicalInterfaceRequest{
				PhysicalInterface: response.GetPhysicalInterface(),
			},
		},
	}, nil
}

func (e *Event_CreatePhysicalInterfaceRequest) ToUpdateEvent() *Event {
	request := e.CreatePhysicalInterfaceRequest
	model := request.PhysicalInterface
	return &Event{
		Request: &Event_UpdatePhysicalInterfaceRequest{
			UpdatePhysicalInterfaceRequest: &UpdatePhysicalInterfaceRequest{
				PhysicalInterface: model,
				FieldMask:         request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdatePhysicalInterfaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdatePhysicalInterfaceRequest
	response, err := service.UpdatePhysicalInterface(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdatePhysicalInterfaceRequest{
			UpdatePhysicalInterfaceRequest: &UpdatePhysicalInterfaceRequest{
				PhysicalInterface: response.GetPhysicalInterface(),
			},
		},
	}, nil
}

func (e *Event_UpdatePhysicalInterfaceRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeletePhysicalInterfaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalInterfaceRequest
	_, err := service.DeletePhysicalInterface(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeletePhysicalInterfaceRequest{
			DeletePhysicalInterfaceRequest: &DeletePhysicalInterfaceRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreatePhysicalInterfacePhysicalInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalInterfacePhysicalInterfaceRefRequest
	if _, err := service.CreatePhysicalInterfacePhysicalInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalInterfacePhysicalInterfaceRefRequest{
		CreatePhysicalInterfacePhysicalInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalInterfacePhysicalInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalInterfacePhysicalInterfaceRefRequest
	if _, err := service.DeletePhysicalInterfacePhysicalInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalInterfacePhysicalInterfaceRefRequest{
		DeletePhysicalInterfacePhysicalInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreatePhysicalInterfacePortRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalInterfacePortRefRequest
	if _, err := service.CreatePhysicalInterfacePortRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalInterfacePortRefRequest{
		CreatePhysicalInterfacePortRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalInterfacePortRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalInterfacePortRefRequest
	if _, err := service.DeletePhysicalInterfacePortRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalInterfacePortRefRequest{
		DeletePhysicalInterfacePortRefRequest: request,
	}}, nil
}

func (e *Event_CreatePhysicalInterfaceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalInterfaceTagRefRequest
	if _, err := service.CreatePhysicalInterfaceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalInterfaceTagRefRequest{
		CreatePhysicalInterfaceTagRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalInterfaceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalInterfaceTagRefRequest
	if _, err := service.DeletePhysicalInterfaceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalInterfaceTagRefRequest{
		DeletePhysicalInterfaceTagRefRequest: request,
	}}, nil
}

type PhysicalRole = models.PhysicalRole

func (s *BaseService) CreatePhysicalRole(ctx context.Context, request *CreatePhysicalRoleRequest) (*CreatePhysicalRoleResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRoleResponse{
			PhysicalRole: request.GetPhysicalRole(),
		}, nil
	}
	return s.Next().CreatePhysicalRole(ctx, request)
}
func (s *BaseService) UpdatePhysicalRole(ctx context.Context, request *UpdatePhysicalRoleRequest) (*UpdatePhysicalRoleResponse, error) {
	if s.next == nil {
		return &UpdatePhysicalRoleResponse{
			PhysicalRole: request.GetPhysicalRole(),
		}, nil
	}
	return s.Next().UpdatePhysicalRole(ctx, request)
}
func (s *BaseService) DeletePhysicalRole(ctx context.Context, request *DeletePhysicalRoleRequest) (*DeletePhysicalRoleResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRoleResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeletePhysicalRole(ctx, request)
}
func (s *BaseService) GetPhysicalRole(ctx context.Context, request *GetPhysicalRoleRequest) (*GetPhysicalRoleResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetPhysicalRole(ctx, request)
}
func (s *BaseService) ListPhysicalRole(ctx context.Context, request *ListPhysicalRoleRequest) (*ListPhysicalRoleResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListPhysicalRole(ctx, request)
}

func (s *BaseService) CreatePhysicalRoleTagRef(ctx context.Context, request *CreatePhysicalRoleTagRefRequest) (*CreatePhysicalRoleTagRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRoleTagRefResponse{
			ID:                 request.ID,
			PhysicalRoleTagRef: request.GetPhysicalRoleTagRef(),
		}, nil
	}
	return s.Next().CreatePhysicalRoleTagRef(ctx, request)
}

func (s *BaseService) DeletePhysicalRoleTagRef(ctx context.Context, request *DeletePhysicalRoleTagRefRequest) (*DeletePhysicalRoleTagRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRoleTagRefResponse{
			ID:                 request.ID,
			PhysicalRoleTagRef: request.GetPhysicalRoleTagRef(),
		}, nil
	}
	return s.Next().DeletePhysicalRoleTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalRoleTagRef(ctx context.Context, request *CreatePhysicalRoleTagRefRequest) (*CreatePhysicalRoleTagRefResponse, error) {
	refField := models.PhysicalRoleFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRole(ctx, &GetPhysicalRoleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRole
		obj.AddTagRef(request.PhysicalRoleTagRef)

		_, err = s.BaseService.UpdatePhysicalRole(ctx, &UpdatePhysicalRoleRequest{
			PhysicalRole: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalRoleTagRefResponse{
		ID:                 request.ID,
		PhysicalRoleTagRef: request.GetPhysicalRoleTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalRoleTagRef(ctx context.Context, request *DeletePhysicalRoleTagRefRequest) (*DeletePhysicalRoleTagRefResponse, error) {
	refField := models.PhysicalRoleFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRole(ctx, &GetPhysicalRoleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRole
		obj.RemoveTagRef(request.PhysicalRoleTagRef)

		_, err = s.BaseService.UpdatePhysicalRole(ctx, &UpdatePhysicalRoleRequest{
			PhysicalRole: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalRoleTagRefResponse{
		ID:                 request.ID,
		PhysicalRoleTagRef: request.GetPhysicalRoleTagRef(),
	}, nil
}

func (s *EventProducerService) CreatePhysicalRole(ctx context.Context, request *CreatePhysicalRoleRequest) (*CreatePhysicalRoleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreatePhysicalRoleRequest{
				CreatePhysicalRoleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRole(ctx, request)
}
func (s *EventProducerService) UpdatePhysicalRole(ctx context.Context, request *UpdatePhysicalRoleRequest) (*UpdatePhysicalRoleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdatePhysicalRoleRequest{
				UpdatePhysicalRoleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdatePhysicalRole(ctx, request)
}
func (s *EventProducerService) DeletePhysicalRole(ctx context.Context, request *DeletePhysicalRoleRequest) (*DeletePhysicalRoleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeletePhysicalRoleRequest{
				DeletePhysicalRoleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRole(ctx, request)
}

func (s *EventProducerService) CreatePhysicalRoleTagRef(ctx context.Context, request *CreatePhysicalRoleTagRefRequest) (*CreatePhysicalRoleTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalRoleTagRefRequest{
			CreatePhysicalRoleTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRoleTagRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalRoleTagRef(ctx context.Context, request *DeletePhysicalRoleTagRefRequest) (*DeletePhysicalRoleTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalRoleTagRefRequest{
			DeletePhysicalRoleTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRoleTagRef(ctx, request)
}

func (e *Event_CreatePhysicalRoleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRoleRequest
	model := request.PhysicalRole
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetPhysicalRole(ctx,
			&GetPhysicalRoleRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreatePhysicalRole(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreatePhysicalRoleRequest{
			CreatePhysicalRoleRequest: &CreatePhysicalRoleRequest{
				PhysicalRole: response.GetPhysicalRole(),
			},
		},
	}, nil
}

func (e *Event_CreatePhysicalRoleRequest) ToUpdateEvent() *Event {
	request := e.CreatePhysicalRoleRequest
	model := request.PhysicalRole
	return &Event{
		Request: &Event_UpdatePhysicalRoleRequest{
			UpdatePhysicalRoleRequest: &UpdatePhysicalRoleRequest{
				PhysicalRole: model,
				FieldMask:    request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdatePhysicalRoleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdatePhysicalRoleRequest
	response, err := service.UpdatePhysicalRole(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdatePhysicalRoleRequest{
			UpdatePhysicalRoleRequest: &UpdatePhysicalRoleRequest{
				PhysicalRole: response.GetPhysicalRole(),
			},
		},
	}, nil
}

func (e *Event_UpdatePhysicalRoleRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeletePhysicalRoleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRoleRequest
	_, err := service.DeletePhysicalRole(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeletePhysicalRoleRequest{
			DeletePhysicalRoleRequest: &DeletePhysicalRoleRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreatePhysicalRoleTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRoleTagRefRequest
	if _, err := service.CreatePhysicalRoleTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalRoleTagRefRequest{
		CreatePhysicalRoleTagRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalRoleTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRoleTagRefRequest
	if _, err := service.DeletePhysicalRoleTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalRoleTagRefRequest{
		DeletePhysicalRoleTagRefRequest: request,
	}}, nil
}

type PhysicalRouter = models.PhysicalRouter

func (s *BaseService) CreatePhysicalRouter(ctx context.Context, request *CreatePhysicalRouterRequest) (*CreatePhysicalRouterResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRouterResponse{
			PhysicalRouter: request.GetPhysicalRouter(),
		}, nil
	}
	return s.Next().CreatePhysicalRouter(ctx, request)
}
func (s *BaseService) UpdatePhysicalRouter(ctx context.Context, request *UpdatePhysicalRouterRequest) (*UpdatePhysicalRouterResponse, error) {
	if s.next == nil {
		return &UpdatePhysicalRouterResponse{
			PhysicalRouter: request.GetPhysicalRouter(),
		}, nil
	}
	return s.Next().UpdatePhysicalRouter(ctx, request)
}
func (s *BaseService) DeletePhysicalRouter(ctx context.Context, request *DeletePhysicalRouterRequest) (*DeletePhysicalRouterResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRouterResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeletePhysicalRouter(ctx, request)
}
func (s *BaseService) GetPhysicalRouter(ctx context.Context, request *GetPhysicalRouterRequest) (*GetPhysicalRouterResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetPhysicalRouter(ctx, request)
}
func (s *BaseService) ListPhysicalRouter(ctx context.Context, request *ListPhysicalRouterRequest) (*ListPhysicalRouterResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListPhysicalRouter(ctx, request)
}

func (s *BaseService) CreatePhysicalRouterTelemetryProfileRef(ctx context.Context, request *CreatePhysicalRouterTelemetryProfileRefRequest) (*CreatePhysicalRouterTelemetryProfileRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRouterTelemetryProfileRefResponse{
			ID:                                request.ID,
			PhysicalRouterTelemetryProfileRef: request.GetPhysicalRouterTelemetryProfileRef(),
		}, nil
	}
	return s.Next().CreatePhysicalRouterTelemetryProfileRef(ctx, request)
}

func (s *BaseService) DeletePhysicalRouterTelemetryProfileRef(ctx context.Context, request *DeletePhysicalRouterTelemetryProfileRefRequest) (*DeletePhysicalRouterTelemetryProfileRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRouterTelemetryProfileRefResponse{
			ID:                                request.ID,
			PhysicalRouterTelemetryProfileRef: request.GetPhysicalRouterTelemetryProfileRef(),
		}, nil
	}
	return s.Next().DeletePhysicalRouterTelemetryProfileRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalRouterTelemetryProfileRef(ctx context.Context, request *CreatePhysicalRouterTelemetryProfileRefRequest) (*CreatePhysicalRouterTelemetryProfileRefResponse, error) {
	refField := models.PhysicalRouterFieldTelemetryProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.AddTelemetryProfileRef(request.PhysicalRouterTelemetryProfileRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalRouterTelemetryProfileRefResponse{
		ID:                                request.ID,
		PhysicalRouterTelemetryProfileRef: request.GetPhysicalRouterTelemetryProfileRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalRouterTelemetryProfileRef(ctx context.Context, request *DeletePhysicalRouterTelemetryProfileRefRequest) (*DeletePhysicalRouterTelemetryProfileRefResponse, error) {
	refField := models.PhysicalRouterFieldTelemetryProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.RemoveTelemetryProfileRef(request.PhysicalRouterTelemetryProfileRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalRouterTelemetryProfileRefResponse{
		ID:                                request.ID,
		PhysicalRouterTelemetryProfileRef: request.GetPhysicalRouterTelemetryProfileRef(),
	}, nil
}

func (s *BaseService) CreatePhysicalRouterVirtualNetworkRef(ctx context.Context, request *CreatePhysicalRouterVirtualNetworkRefRequest) (*CreatePhysicalRouterVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRouterVirtualNetworkRefResponse{
			ID:                              request.ID,
			PhysicalRouterVirtualNetworkRef: request.GetPhysicalRouterVirtualNetworkRef(),
		}, nil
	}
	return s.Next().CreatePhysicalRouterVirtualNetworkRef(ctx, request)
}

func (s *BaseService) DeletePhysicalRouterVirtualNetworkRef(ctx context.Context, request *DeletePhysicalRouterVirtualNetworkRefRequest) (*DeletePhysicalRouterVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRouterVirtualNetworkRefResponse{
			ID:                              request.ID,
			PhysicalRouterVirtualNetworkRef: request.GetPhysicalRouterVirtualNetworkRef(),
		}, nil
	}
	return s.Next().DeletePhysicalRouterVirtualNetworkRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalRouterVirtualNetworkRef(ctx context.Context, request *CreatePhysicalRouterVirtualNetworkRefRequest) (*CreatePhysicalRouterVirtualNetworkRefResponse, error) {
	refField := models.PhysicalRouterFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.AddVirtualNetworkRef(request.PhysicalRouterVirtualNetworkRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalRouterVirtualNetworkRefResponse{
		ID:                              request.ID,
		PhysicalRouterVirtualNetworkRef: request.GetPhysicalRouterVirtualNetworkRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalRouterVirtualNetworkRef(ctx context.Context, request *DeletePhysicalRouterVirtualNetworkRefRequest) (*DeletePhysicalRouterVirtualNetworkRefResponse, error) {
	refField := models.PhysicalRouterFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.RemoveVirtualNetworkRef(request.PhysicalRouterVirtualNetworkRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalRouterVirtualNetworkRefResponse{
		ID:                              request.ID,
		PhysicalRouterVirtualNetworkRef: request.GetPhysicalRouterVirtualNetworkRef(),
	}, nil
}

func (s *BaseService) CreatePhysicalRouterVirtualRouterRef(ctx context.Context, request *CreatePhysicalRouterVirtualRouterRefRequest) (*CreatePhysicalRouterVirtualRouterRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRouterVirtualRouterRefResponse{
			ID:                             request.ID,
			PhysicalRouterVirtualRouterRef: request.GetPhysicalRouterVirtualRouterRef(),
		}, nil
	}
	return s.Next().CreatePhysicalRouterVirtualRouterRef(ctx, request)
}

func (s *BaseService) DeletePhysicalRouterVirtualRouterRef(ctx context.Context, request *DeletePhysicalRouterVirtualRouterRefRequest) (*DeletePhysicalRouterVirtualRouterRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRouterVirtualRouterRefResponse{
			ID:                             request.ID,
			PhysicalRouterVirtualRouterRef: request.GetPhysicalRouterVirtualRouterRef(),
		}, nil
	}
	return s.Next().DeletePhysicalRouterVirtualRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalRouterVirtualRouterRef(ctx context.Context, request *CreatePhysicalRouterVirtualRouterRefRequest) (*CreatePhysicalRouterVirtualRouterRefResponse, error) {
	refField := models.PhysicalRouterFieldVirtualRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.AddVirtualRouterRef(request.PhysicalRouterVirtualRouterRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalRouterVirtualRouterRefResponse{
		ID:                             request.ID,
		PhysicalRouterVirtualRouterRef: request.GetPhysicalRouterVirtualRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalRouterVirtualRouterRef(ctx context.Context, request *DeletePhysicalRouterVirtualRouterRefRequest) (*DeletePhysicalRouterVirtualRouterRefResponse, error) {
	refField := models.PhysicalRouterFieldVirtualRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.RemoveVirtualRouterRef(request.PhysicalRouterVirtualRouterRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalRouterVirtualRouterRefResponse{
		ID:                             request.ID,
		PhysicalRouterVirtualRouterRef: request.GetPhysicalRouterVirtualRouterRef(),
	}, nil
}

func (s *BaseService) CreatePhysicalRouterBGPRouterRef(ctx context.Context, request *CreatePhysicalRouterBGPRouterRefRequest) (*CreatePhysicalRouterBGPRouterRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRouterBGPRouterRefResponse{
			ID:                         request.ID,
			PhysicalRouterBGPRouterRef: request.GetPhysicalRouterBGPRouterRef(),
		}, nil
	}
	return s.Next().CreatePhysicalRouterBGPRouterRef(ctx, request)
}

func (s *BaseService) DeletePhysicalRouterBGPRouterRef(ctx context.Context, request *DeletePhysicalRouterBGPRouterRefRequest) (*DeletePhysicalRouterBGPRouterRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRouterBGPRouterRefResponse{
			ID:                         request.ID,
			PhysicalRouterBGPRouterRef: request.GetPhysicalRouterBGPRouterRef(),
		}, nil
	}
	return s.Next().DeletePhysicalRouterBGPRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalRouterBGPRouterRef(ctx context.Context, request *CreatePhysicalRouterBGPRouterRefRequest) (*CreatePhysicalRouterBGPRouterRefResponse, error) {
	refField := models.PhysicalRouterFieldBGPRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.AddBGPRouterRef(request.PhysicalRouterBGPRouterRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalRouterBGPRouterRefResponse{
		ID:                         request.ID,
		PhysicalRouterBGPRouterRef: request.GetPhysicalRouterBGPRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalRouterBGPRouterRef(ctx context.Context, request *DeletePhysicalRouterBGPRouterRefRequest) (*DeletePhysicalRouterBGPRouterRefResponse, error) {
	refField := models.PhysicalRouterFieldBGPRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.RemoveBGPRouterRef(request.PhysicalRouterBGPRouterRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalRouterBGPRouterRefResponse{
		ID:                         request.ID,
		PhysicalRouterBGPRouterRef: request.GetPhysicalRouterBGPRouterRef(),
	}, nil
}

func (s *BaseService) CreatePhysicalRouterDeviceChassisRef(ctx context.Context, request *CreatePhysicalRouterDeviceChassisRefRequest) (*CreatePhysicalRouterDeviceChassisRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRouterDeviceChassisRefResponse{
			ID:                             request.ID,
			PhysicalRouterDeviceChassisRef: request.GetPhysicalRouterDeviceChassisRef(),
		}, nil
	}
	return s.Next().CreatePhysicalRouterDeviceChassisRef(ctx, request)
}

func (s *BaseService) DeletePhysicalRouterDeviceChassisRef(ctx context.Context, request *DeletePhysicalRouterDeviceChassisRefRequest) (*DeletePhysicalRouterDeviceChassisRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRouterDeviceChassisRefResponse{
			ID:                             request.ID,
			PhysicalRouterDeviceChassisRef: request.GetPhysicalRouterDeviceChassisRef(),
		}, nil
	}
	return s.Next().DeletePhysicalRouterDeviceChassisRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalRouterDeviceChassisRef(ctx context.Context, request *CreatePhysicalRouterDeviceChassisRefRequest) (*CreatePhysicalRouterDeviceChassisRefResponse, error) {
	refField := models.PhysicalRouterFieldDeviceChassisRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.AddDeviceChassisRef(request.PhysicalRouterDeviceChassisRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalRouterDeviceChassisRefResponse{
		ID:                             request.ID,
		PhysicalRouterDeviceChassisRef: request.GetPhysicalRouterDeviceChassisRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalRouterDeviceChassisRef(ctx context.Context, request *DeletePhysicalRouterDeviceChassisRefRequest) (*DeletePhysicalRouterDeviceChassisRefResponse, error) {
	refField := models.PhysicalRouterFieldDeviceChassisRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.RemoveDeviceChassisRef(request.PhysicalRouterDeviceChassisRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalRouterDeviceChassisRefResponse{
		ID:                             request.ID,
		PhysicalRouterDeviceChassisRef: request.GetPhysicalRouterDeviceChassisRef(),
	}, nil
}

func (s *BaseService) CreatePhysicalRouterDeviceImageRef(ctx context.Context, request *CreatePhysicalRouterDeviceImageRefRequest) (*CreatePhysicalRouterDeviceImageRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRouterDeviceImageRefResponse{
			ID:                           request.ID,
			PhysicalRouterDeviceImageRef: request.GetPhysicalRouterDeviceImageRef(),
		}, nil
	}
	return s.Next().CreatePhysicalRouterDeviceImageRef(ctx, request)
}

func (s *BaseService) DeletePhysicalRouterDeviceImageRef(ctx context.Context, request *DeletePhysicalRouterDeviceImageRefRequest) (*DeletePhysicalRouterDeviceImageRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRouterDeviceImageRefResponse{
			ID:                           request.ID,
			PhysicalRouterDeviceImageRef: request.GetPhysicalRouterDeviceImageRef(),
		}, nil
	}
	return s.Next().DeletePhysicalRouterDeviceImageRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalRouterDeviceImageRef(ctx context.Context, request *CreatePhysicalRouterDeviceImageRefRequest) (*CreatePhysicalRouterDeviceImageRefResponse, error) {
	refField := models.PhysicalRouterFieldDeviceImageRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.AddDeviceImageRef(request.PhysicalRouterDeviceImageRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalRouterDeviceImageRefResponse{
		ID:                           request.ID,
		PhysicalRouterDeviceImageRef: request.GetPhysicalRouterDeviceImageRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalRouterDeviceImageRef(ctx context.Context, request *DeletePhysicalRouterDeviceImageRefRequest) (*DeletePhysicalRouterDeviceImageRefResponse, error) {
	refField := models.PhysicalRouterFieldDeviceImageRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.RemoveDeviceImageRef(request.PhysicalRouterDeviceImageRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalRouterDeviceImageRefResponse{
		ID:                           request.ID,
		PhysicalRouterDeviceImageRef: request.GetPhysicalRouterDeviceImageRef(),
	}, nil
}

func (s *BaseService) CreatePhysicalRouterIntentMapRef(ctx context.Context, request *CreatePhysicalRouterIntentMapRefRequest) (*CreatePhysicalRouterIntentMapRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRouterIntentMapRefResponse{
			ID:                         request.ID,
			PhysicalRouterIntentMapRef: request.GetPhysicalRouterIntentMapRef(),
		}, nil
	}
	return s.Next().CreatePhysicalRouterIntentMapRef(ctx, request)
}

func (s *BaseService) DeletePhysicalRouterIntentMapRef(ctx context.Context, request *DeletePhysicalRouterIntentMapRefRequest) (*DeletePhysicalRouterIntentMapRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRouterIntentMapRefResponse{
			ID:                         request.ID,
			PhysicalRouterIntentMapRef: request.GetPhysicalRouterIntentMapRef(),
		}, nil
	}
	return s.Next().DeletePhysicalRouterIntentMapRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalRouterIntentMapRef(ctx context.Context, request *CreatePhysicalRouterIntentMapRefRequest) (*CreatePhysicalRouterIntentMapRefResponse, error) {
	refField := models.PhysicalRouterFieldIntentMapRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.AddIntentMapRef(request.PhysicalRouterIntentMapRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalRouterIntentMapRefResponse{
		ID:                         request.ID,
		PhysicalRouterIntentMapRef: request.GetPhysicalRouterIntentMapRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalRouterIntentMapRef(ctx context.Context, request *DeletePhysicalRouterIntentMapRefRequest) (*DeletePhysicalRouterIntentMapRefResponse, error) {
	refField := models.PhysicalRouterFieldIntentMapRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.RemoveIntentMapRef(request.PhysicalRouterIntentMapRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalRouterIntentMapRefResponse{
		ID:                         request.ID,
		PhysicalRouterIntentMapRef: request.GetPhysicalRouterIntentMapRef(),
	}, nil
}

func (s *BaseService) CreatePhysicalRouterNodeProfileRef(ctx context.Context, request *CreatePhysicalRouterNodeProfileRefRequest) (*CreatePhysicalRouterNodeProfileRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRouterNodeProfileRefResponse{
			ID:                           request.ID,
			PhysicalRouterNodeProfileRef: request.GetPhysicalRouterNodeProfileRef(),
		}, nil
	}
	return s.Next().CreatePhysicalRouterNodeProfileRef(ctx, request)
}

func (s *BaseService) DeletePhysicalRouterNodeProfileRef(ctx context.Context, request *DeletePhysicalRouterNodeProfileRefRequest) (*DeletePhysicalRouterNodeProfileRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRouterNodeProfileRefResponse{
			ID:                           request.ID,
			PhysicalRouterNodeProfileRef: request.GetPhysicalRouterNodeProfileRef(),
		}, nil
	}
	return s.Next().DeletePhysicalRouterNodeProfileRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalRouterNodeProfileRef(ctx context.Context, request *CreatePhysicalRouterNodeProfileRefRequest) (*CreatePhysicalRouterNodeProfileRefResponse, error) {
	refField := models.PhysicalRouterFieldNodeProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.AddNodeProfileRef(request.PhysicalRouterNodeProfileRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalRouterNodeProfileRefResponse{
		ID:                           request.ID,
		PhysicalRouterNodeProfileRef: request.GetPhysicalRouterNodeProfileRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalRouterNodeProfileRef(ctx context.Context, request *DeletePhysicalRouterNodeProfileRefRequest) (*DeletePhysicalRouterNodeProfileRefResponse, error) {
	refField := models.PhysicalRouterFieldNodeProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.RemoveNodeProfileRef(request.PhysicalRouterNodeProfileRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalRouterNodeProfileRefResponse{
		ID:                           request.ID,
		PhysicalRouterNodeProfileRef: request.GetPhysicalRouterNodeProfileRef(),
	}, nil
}

func (s *BaseService) CreatePhysicalRouterOverlayRoleRef(ctx context.Context, request *CreatePhysicalRouterOverlayRoleRefRequest) (*CreatePhysicalRouterOverlayRoleRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRouterOverlayRoleRefResponse{
			ID:                           request.ID,
			PhysicalRouterOverlayRoleRef: request.GetPhysicalRouterOverlayRoleRef(),
		}, nil
	}
	return s.Next().CreatePhysicalRouterOverlayRoleRef(ctx, request)
}

func (s *BaseService) DeletePhysicalRouterOverlayRoleRef(ctx context.Context, request *DeletePhysicalRouterOverlayRoleRefRequest) (*DeletePhysicalRouterOverlayRoleRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRouterOverlayRoleRefResponse{
			ID:                           request.ID,
			PhysicalRouterOverlayRoleRef: request.GetPhysicalRouterOverlayRoleRef(),
		}, nil
	}
	return s.Next().DeletePhysicalRouterOverlayRoleRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalRouterOverlayRoleRef(ctx context.Context, request *CreatePhysicalRouterOverlayRoleRefRequest) (*CreatePhysicalRouterOverlayRoleRefResponse, error) {
	refField := models.PhysicalRouterFieldOverlayRoleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.AddOverlayRoleRef(request.PhysicalRouterOverlayRoleRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalRouterOverlayRoleRefResponse{
		ID:                           request.ID,
		PhysicalRouterOverlayRoleRef: request.GetPhysicalRouterOverlayRoleRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalRouterOverlayRoleRef(ctx context.Context, request *DeletePhysicalRouterOverlayRoleRefRequest) (*DeletePhysicalRouterOverlayRoleRefResponse, error) {
	refField := models.PhysicalRouterFieldOverlayRoleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.RemoveOverlayRoleRef(request.PhysicalRouterOverlayRoleRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalRouterOverlayRoleRefResponse{
		ID:                           request.ID,
		PhysicalRouterOverlayRoleRef: request.GetPhysicalRouterOverlayRoleRef(),
	}, nil
}

func (s *BaseService) CreatePhysicalRouterPhysicalRoleRef(ctx context.Context, request *CreatePhysicalRouterPhysicalRoleRefRequest) (*CreatePhysicalRouterPhysicalRoleRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRouterPhysicalRoleRefResponse{
			ID:                            request.ID,
			PhysicalRouterPhysicalRoleRef: request.GetPhysicalRouterPhysicalRoleRef(),
		}, nil
	}
	return s.Next().CreatePhysicalRouterPhysicalRoleRef(ctx, request)
}

func (s *BaseService) DeletePhysicalRouterPhysicalRoleRef(ctx context.Context, request *DeletePhysicalRouterPhysicalRoleRefRequest) (*DeletePhysicalRouterPhysicalRoleRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRouterPhysicalRoleRefResponse{
			ID:                            request.ID,
			PhysicalRouterPhysicalRoleRef: request.GetPhysicalRouterPhysicalRoleRef(),
		}, nil
	}
	return s.Next().DeletePhysicalRouterPhysicalRoleRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalRouterPhysicalRoleRef(ctx context.Context, request *CreatePhysicalRouterPhysicalRoleRefRequest) (*CreatePhysicalRouterPhysicalRoleRefResponse, error) {
	refField := models.PhysicalRouterFieldPhysicalRoleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.AddPhysicalRoleRef(request.PhysicalRouterPhysicalRoleRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalRouterPhysicalRoleRefResponse{
		ID:                            request.ID,
		PhysicalRouterPhysicalRoleRef: request.GetPhysicalRouterPhysicalRoleRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalRouterPhysicalRoleRef(ctx context.Context, request *DeletePhysicalRouterPhysicalRoleRefRequest) (*DeletePhysicalRouterPhysicalRoleRefResponse, error) {
	refField := models.PhysicalRouterFieldPhysicalRoleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.RemovePhysicalRoleRef(request.PhysicalRouterPhysicalRoleRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalRouterPhysicalRoleRefResponse{
		ID:                            request.ID,
		PhysicalRouterPhysicalRoleRef: request.GetPhysicalRouterPhysicalRoleRef(),
	}, nil
}

func (s *BaseService) CreatePhysicalRouterDeviceFunctionalGroupRef(ctx context.Context, request *CreatePhysicalRouterDeviceFunctionalGroupRefRequest) (*CreatePhysicalRouterDeviceFunctionalGroupRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRouterDeviceFunctionalGroupRefResponse{
			ID:                                     request.ID,
			PhysicalRouterDeviceFunctionalGroupRef: request.GetPhysicalRouterDeviceFunctionalGroupRef(),
		}, nil
	}
	return s.Next().CreatePhysicalRouterDeviceFunctionalGroupRef(ctx, request)
}

func (s *BaseService) DeletePhysicalRouterDeviceFunctionalGroupRef(ctx context.Context, request *DeletePhysicalRouterDeviceFunctionalGroupRefRequest) (*DeletePhysicalRouterDeviceFunctionalGroupRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRouterDeviceFunctionalGroupRefResponse{
			ID:                                     request.ID,
			PhysicalRouterDeviceFunctionalGroupRef: request.GetPhysicalRouterDeviceFunctionalGroupRef(),
		}, nil
	}
	return s.Next().DeletePhysicalRouterDeviceFunctionalGroupRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalRouterDeviceFunctionalGroupRef(ctx context.Context, request *CreatePhysicalRouterDeviceFunctionalGroupRefRequest) (*CreatePhysicalRouterDeviceFunctionalGroupRefResponse, error) {
	refField := models.PhysicalRouterFieldDeviceFunctionalGroupRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.AddDeviceFunctionalGroupRef(request.PhysicalRouterDeviceFunctionalGroupRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalRouterDeviceFunctionalGroupRefResponse{
		ID:                                     request.ID,
		PhysicalRouterDeviceFunctionalGroupRef: request.GetPhysicalRouterDeviceFunctionalGroupRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalRouterDeviceFunctionalGroupRef(ctx context.Context, request *DeletePhysicalRouterDeviceFunctionalGroupRefRequest) (*DeletePhysicalRouterDeviceFunctionalGroupRefResponse, error) {
	refField := models.PhysicalRouterFieldDeviceFunctionalGroupRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.RemoveDeviceFunctionalGroupRef(request.PhysicalRouterDeviceFunctionalGroupRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalRouterDeviceFunctionalGroupRefResponse{
		ID:                                     request.ID,
		PhysicalRouterDeviceFunctionalGroupRef: request.GetPhysicalRouterDeviceFunctionalGroupRef(),
	}, nil
}

func (s *BaseService) CreatePhysicalRouterTagRef(ctx context.Context, request *CreatePhysicalRouterTagRefRequest) (*CreatePhysicalRouterTagRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRouterTagRefResponse{
			ID:                   request.ID,
			PhysicalRouterTagRef: request.GetPhysicalRouterTagRef(),
		}, nil
	}
	return s.Next().CreatePhysicalRouterTagRef(ctx, request)
}

func (s *BaseService) DeletePhysicalRouterTagRef(ctx context.Context, request *DeletePhysicalRouterTagRefRequest) (*DeletePhysicalRouterTagRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRouterTagRefResponse{
			ID:                   request.ID,
			PhysicalRouterTagRef: request.GetPhysicalRouterTagRef(),
		}, nil
	}
	return s.Next().DeletePhysicalRouterTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalRouterTagRef(ctx context.Context, request *CreatePhysicalRouterTagRefRequest) (*CreatePhysicalRouterTagRefResponse, error) {
	refField := models.PhysicalRouterFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.AddTagRef(request.PhysicalRouterTagRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalRouterTagRefResponse{
		ID:                   request.ID,
		PhysicalRouterTagRef: request.GetPhysicalRouterTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalRouterTagRef(ctx context.Context, request *DeletePhysicalRouterTagRefRequest) (*DeletePhysicalRouterTagRefResponse, error) {
	refField := models.PhysicalRouterFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.RemoveTagRef(request.PhysicalRouterTagRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalRouterTagRefResponse{
		ID:                   request.ID,
		PhysicalRouterTagRef: request.GetPhysicalRouterTagRef(),
	}, nil
}

func (s *BaseService) CreatePhysicalRouterFabricRef(ctx context.Context, request *CreatePhysicalRouterFabricRefRequest) (*CreatePhysicalRouterFabricRefResponse, error) {
	if s.next == nil {
		return &CreatePhysicalRouterFabricRefResponse{
			ID:                      request.ID,
			PhysicalRouterFabricRef: request.GetPhysicalRouterFabricRef(),
		}, nil
	}
	return s.Next().CreatePhysicalRouterFabricRef(ctx, request)
}

func (s *BaseService) DeletePhysicalRouterFabricRef(ctx context.Context, request *DeletePhysicalRouterFabricRefRequest) (*DeletePhysicalRouterFabricRefResponse, error) {
	if s.next == nil {
		return &DeletePhysicalRouterFabricRefResponse{
			ID:                      request.ID,
			PhysicalRouterFabricRef: request.GetPhysicalRouterFabricRef(),
		}, nil
	}
	return s.Next().DeletePhysicalRouterFabricRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePhysicalRouterFabricRef(ctx context.Context, request *CreatePhysicalRouterFabricRefRequest) (*CreatePhysicalRouterFabricRefResponse, error) {
	refField := models.PhysicalRouterFieldFabricRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.AddFabricRef(request.PhysicalRouterFabricRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePhysicalRouterFabricRefResponse{
		ID:                      request.ID,
		PhysicalRouterFabricRef: request.GetPhysicalRouterFabricRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePhysicalRouterFabricRef(ctx context.Context, request *DeletePhysicalRouterFabricRefRequest) (*DeletePhysicalRouterFabricRefResponse, error) {
	refField := models.PhysicalRouterFieldFabricRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPhysicalRouter(ctx, &GetPhysicalRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PhysicalRouter
		obj.RemoveFabricRef(request.PhysicalRouterFabricRef)

		_, err = s.BaseService.UpdatePhysicalRouter(ctx, &UpdatePhysicalRouterRequest{
			PhysicalRouter: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePhysicalRouterFabricRefResponse{
		ID:                      request.ID,
		PhysicalRouterFabricRef: request.GetPhysicalRouterFabricRef(),
	}, nil
}

func (s *EventProducerService) CreatePhysicalRouter(ctx context.Context, request *CreatePhysicalRouterRequest) (*CreatePhysicalRouterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreatePhysicalRouterRequest{
				CreatePhysicalRouterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRouter(ctx, request)
}
func (s *EventProducerService) UpdatePhysicalRouter(ctx context.Context, request *UpdatePhysicalRouterRequest) (*UpdatePhysicalRouterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdatePhysicalRouterRequest{
				UpdatePhysicalRouterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdatePhysicalRouter(ctx, request)
}
func (s *EventProducerService) DeletePhysicalRouter(ctx context.Context, request *DeletePhysicalRouterRequest) (*DeletePhysicalRouterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeletePhysicalRouterRequest{
				DeletePhysicalRouterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRouter(ctx, request)
}

func (s *EventProducerService) CreatePhysicalRouterDeviceImageRef(ctx context.Context, request *CreatePhysicalRouterDeviceImageRefRequest) (*CreatePhysicalRouterDeviceImageRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalRouterDeviceImageRefRequest{
			CreatePhysicalRouterDeviceImageRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRouterDeviceImageRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalRouterDeviceImageRef(ctx context.Context, request *DeletePhysicalRouterDeviceImageRefRequest) (*DeletePhysicalRouterDeviceImageRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalRouterDeviceImageRefRequest{
			DeletePhysicalRouterDeviceImageRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRouterDeviceImageRef(ctx, request)
}

func (s *EventProducerService) CreatePhysicalRouterIntentMapRef(ctx context.Context, request *CreatePhysicalRouterIntentMapRefRequest) (*CreatePhysicalRouterIntentMapRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalRouterIntentMapRefRequest{
			CreatePhysicalRouterIntentMapRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRouterIntentMapRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalRouterIntentMapRef(ctx context.Context, request *DeletePhysicalRouterIntentMapRefRequest) (*DeletePhysicalRouterIntentMapRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalRouterIntentMapRefRequest{
			DeletePhysicalRouterIntentMapRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRouterIntentMapRef(ctx, request)
}

func (s *EventProducerService) CreatePhysicalRouterNodeProfileRef(ctx context.Context, request *CreatePhysicalRouterNodeProfileRefRequest) (*CreatePhysicalRouterNodeProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalRouterNodeProfileRefRequest{
			CreatePhysicalRouterNodeProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRouterNodeProfileRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalRouterNodeProfileRef(ctx context.Context, request *DeletePhysicalRouterNodeProfileRefRequest) (*DeletePhysicalRouterNodeProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalRouterNodeProfileRefRequest{
			DeletePhysicalRouterNodeProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRouterNodeProfileRef(ctx, request)
}

func (s *EventProducerService) CreatePhysicalRouterTelemetryProfileRef(ctx context.Context, request *CreatePhysicalRouterTelemetryProfileRefRequest) (*CreatePhysicalRouterTelemetryProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalRouterTelemetryProfileRefRequest{
			CreatePhysicalRouterTelemetryProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRouterTelemetryProfileRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalRouterTelemetryProfileRef(ctx context.Context, request *DeletePhysicalRouterTelemetryProfileRefRequest) (*DeletePhysicalRouterTelemetryProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalRouterTelemetryProfileRefRequest{
			DeletePhysicalRouterTelemetryProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRouterTelemetryProfileRef(ctx, request)
}

func (s *EventProducerService) CreatePhysicalRouterVirtualNetworkRef(ctx context.Context, request *CreatePhysicalRouterVirtualNetworkRefRequest) (*CreatePhysicalRouterVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalRouterVirtualNetworkRefRequest{
			CreatePhysicalRouterVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRouterVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalRouterVirtualNetworkRef(ctx context.Context, request *DeletePhysicalRouterVirtualNetworkRefRequest) (*DeletePhysicalRouterVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalRouterVirtualNetworkRefRequest{
			DeletePhysicalRouterVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRouterVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) CreatePhysicalRouterVirtualRouterRef(ctx context.Context, request *CreatePhysicalRouterVirtualRouterRefRequest) (*CreatePhysicalRouterVirtualRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalRouterVirtualRouterRefRequest{
			CreatePhysicalRouterVirtualRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRouterVirtualRouterRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalRouterVirtualRouterRef(ctx context.Context, request *DeletePhysicalRouterVirtualRouterRefRequest) (*DeletePhysicalRouterVirtualRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalRouterVirtualRouterRefRequest{
			DeletePhysicalRouterVirtualRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRouterVirtualRouterRef(ctx, request)
}

func (s *EventProducerService) CreatePhysicalRouterBGPRouterRef(ctx context.Context, request *CreatePhysicalRouterBGPRouterRefRequest) (*CreatePhysicalRouterBGPRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalRouterBGPRouterRefRequest{
			CreatePhysicalRouterBGPRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRouterBGPRouterRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalRouterBGPRouterRef(ctx context.Context, request *DeletePhysicalRouterBGPRouterRefRequest) (*DeletePhysicalRouterBGPRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalRouterBGPRouterRefRequest{
			DeletePhysicalRouterBGPRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRouterBGPRouterRef(ctx, request)
}

func (s *EventProducerService) CreatePhysicalRouterDeviceChassisRef(ctx context.Context, request *CreatePhysicalRouterDeviceChassisRefRequest) (*CreatePhysicalRouterDeviceChassisRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalRouterDeviceChassisRefRequest{
			CreatePhysicalRouterDeviceChassisRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRouterDeviceChassisRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalRouterDeviceChassisRef(ctx context.Context, request *DeletePhysicalRouterDeviceChassisRefRequest) (*DeletePhysicalRouterDeviceChassisRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalRouterDeviceChassisRefRequest{
			DeletePhysicalRouterDeviceChassisRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRouterDeviceChassisRef(ctx, request)
}

func (s *EventProducerService) CreatePhysicalRouterOverlayRoleRef(ctx context.Context, request *CreatePhysicalRouterOverlayRoleRefRequest) (*CreatePhysicalRouterOverlayRoleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalRouterOverlayRoleRefRequest{
			CreatePhysicalRouterOverlayRoleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRouterOverlayRoleRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalRouterOverlayRoleRef(ctx context.Context, request *DeletePhysicalRouterOverlayRoleRefRequest) (*DeletePhysicalRouterOverlayRoleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalRouterOverlayRoleRefRequest{
			DeletePhysicalRouterOverlayRoleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRouterOverlayRoleRef(ctx, request)
}

func (s *EventProducerService) CreatePhysicalRouterPhysicalRoleRef(ctx context.Context, request *CreatePhysicalRouterPhysicalRoleRefRequest) (*CreatePhysicalRouterPhysicalRoleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalRouterPhysicalRoleRefRequest{
			CreatePhysicalRouterPhysicalRoleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRouterPhysicalRoleRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalRouterPhysicalRoleRef(ctx context.Context, request *DeletePhysicalRouterPhysicalRoleRefRequest) (*DeletePhysicalRouterPhysicalRoleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalRouterPhysicalRoleRefRequest{
			DeletePhysicalRouterPhysicalRoleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRouterPhysicalRoleRef(ctx, request)
}

func (s *EventProducerService) CreatePhysicalRouterDeviceFunctionalGroupRef(ctx context.Context, request *CreatePhysicalRouterDeviceFunctionalGroupRefRequest) (*CreatePhysicalRouterDeviceFunctionalGroupRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalRouterDeviceFunctionalGroupRefRequest{
			CreatePhysicalRouterDeviceFunctionalGroupRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRouterDeviceFunctionalGroupRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalRouterDeviceFunctionalGroupRef(ctx context.Context, request *DeletePhysicalRouterDeviceFunctionalGroupRefRequest) (*DeletePhysicalRouterDeviceFunctionalGroupRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalRouterDeviceFunctionalGroupRefRequest{
			DeletePhysicalRouterDeviceFunctionalGroupRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRouterDeviceFunctionalGroupRef(ctx, request)
}

func (s *EventProducerService) CreatePhysicalRouterTagRef(ctx context.Context, request *CreatePhysicalRouterTagRefRequest) (*CreatePhysicalRouterTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalRouterTagRefRequest{
			CreatePhysicalRouterTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRouterTagRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalRouterTagRef(ctx context.Context, request *DeletePhysicalRouterTagRefRequest) (*DeletePhysicalRouterTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalRouterTagRefRequest{
			DeletePhysicalRouterTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRouterTagRef(ctx, request)
}

func (s *EventProducerService) CreatePhysicalRouterFabricRef(ctx context.Context, request *CreatePhysicalRouterFabricRefRequest) (*CreatePhysicalRouterFabricRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePhysicalRouterFabricRefRequest{
			CreatePhysicalRouterFabricRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePhysicalRouterFabricRef(ctx, request)
}

func (s *EventProducerService) DeletePhysicalRouterFabricRef(ctx context.Context, request *DeletePhysicalRouterFabricRefRequest) (*DeletePhysicalRouterFabricRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePhysicalRouterFabricRefRequest{
			DeletePhysicalRouterFabricRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePhysicalRouterFabricRef(ctx, request)
}

func (e *Event_CreatePhysicalRouterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRouterRequest
	model := request.PhysicalRouter
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetPhysicalRouter(ctx,
			&GetPhysicalRouterRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreatePhysicalRouter(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreatePhysicalRouterRequest{
			CreatePhysicalRouterRequest: &CreatePhysicalRouterRequest{
				PhysicalRouter: response.GetPhysicalRouter(),
			},
		},
	}, nil
}

func (e *Event_CreatePhysicalRouterRequest) ToUpdateEvent() *Event {
	request := e.CreatePhysicalRouterRequest
	model := request.PhysicalRouter
	return &Event{
		Request: &Event_UpdatePhysicalRouterRequest{
			UpdatePhysicalRouterRequest: &UpdatePhysicalRouterRequest{
				PhysicalRouter: model,
				FieldMask:      request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdatePhysicalRouterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdatePhysicalRouterRequest
	response, err := service.UpdatePhysicalRouter(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdatePhysicalRouterRequest{
			UpdatePhysicalRouterRequest: &UpdatePhysicalRouterRequest{
				PhysicalRouter: response.GetPhysicalRouter(),
			},
		},
	}, nil
}

func (e *Event_UpdatePhysicalRouterRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeletePhysicalRouterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRouterRequest
	_, err := service.DeletePhysicalRouter(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeletePhysicalRouterRequest{
			DeletePhysicalRouterRequest: &DeletePhysicalRouterRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreatePhysicalRouterNodeProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRouterNodeProfileRefRequest
	if _, err := service.CreatePhysicalRouterNodeProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalRouterNodeProfileRefRequest{
		CreatePhysicalRouterNodeProfileRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalRouterNodeProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRouterNodeProfileRefRequest
	if _, err := service.DeletePhysicalRouterNodeProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalRouterNodeProfileRefRequest{
		DeletePhysicalRouterNodeProfileRefRequest: request,
	}}, nil
}

func (e *Event_CreatePhysicalRouterTelemetryProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRouterTelemetryProfileRefRequest
	if _, err := service.CreatePhysicalRouterTelemetryProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalRouterTelemetryProfileRefRequest{
		CreatePhysicalRouterTelemetryProfileRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalRouterTelemetryProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRouterTelemetryProfileRefRequest
	if _, err := service.DeletePhysicalRouterTelemetryProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalRouterTelemetryProfileRefRequest{
		DeletePhysicalRouterTelemetryProfileRefRequest: request,
	}}, nil
}

func (e *Event_CreatePhysicalRouterVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRouterVirtualNetworkRefRequest
	if _, err := service.CreatePhysicalRouterVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalRouterVirtualNetworkRefRequest{
		CreatePhysicalRouterVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalRouterVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRouterVirtualNetworkRefRequest
	if _, err := service.DeletePhysicalRouterVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalRouterVirtualNetworkRefRequest{
		DeletePhysicalRouterVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_CreatePhysicalRouterVirtualRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRouterVirtualRouterRefRequest
	if _, err := service.CreatePhysicalRouterVirtualRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalRouterVirtualRouterRefRequest{
		CreatePhysicalRouterVirtualRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalRouterVirtualRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRouterVirtualRouterRefRequest
	if _, err := service.DeletePhysicalRouterVirtualRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalRouterVirtualRouterRefRequest{
		DeletePhysicalRouterVirtualRouterRefRequest: request,
	}}, nil
}

func (e *Event_CreatePhysicalRouterBGPRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRouterBGPRouterRefRequest
	if _, err := service.CreatePhysicalRouterBGPRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalRouterBGPRouterRefRequest{
		CreatePhysicalRouterBGPRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalRouterBGPRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRouterBGPRouterRefRequest
	if _, err := service.DeletePhysicalRouterBGPRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalRouterBGPRouterRefRequest{
		DeletePhysicalRouterBGPRouterRefRequest: request,
	}}, nil
}

func (e *Event_CreatePhysicalRouterDeviceChassisRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRouterDeviceChassisRefRequest
	if _, err := service.CreatePhysicalRouterDeviceChassisRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalRouterDeviceChassisRefRequest{
		CreatePhysicalRouterDeviceChassisRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalRouterDeviceChassisRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRouterDeviceChassisRefRequest
	if _, err := service.DeletePhysicalRouterDeviceChassisRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalRouterDeviceChassisRefRequest{
		DeletePhysicalRouterDeviceChassisRefRequest: request,
	}}, nil
}

func (e *Event_CreatePhysicalRouterDeviceImageRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRouterDeviceImageRefRequest
	if _, err := service.CreatePhysicalRouterDeviceImageRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalRouterDeviceImageRefRequest{
		CreatePhysicalRouterDeviceImageRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalRouterDeviceImageRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRouterDeviceImageRefRequest
	if _, err := service.DeletePhysicalRouterDeviceImageRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalRouterDeviceImageRefRequest{
		DeletePhysicalRouterDeviceImageRefRequest: request,
	}}, nil
}

func (e *Event_CreatePhysicalRouterIntentMapRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRouterIntentMapRefRequest
	if _, err := service.CreatePhysicalRouterIntentMapRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalRouterIntentMapRefRequest{
		CreatePhysicalRouterIntentMapRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalRouterIntentMapRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRouterIntentMapRefRequest
	if _, err := service.DeletePhysicalRouterIntentMapRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalRouterIntentMapRefRequest{
		DeletePhysicalRouterIntentMapRefRequest: request,
	}}, nil
}

func (e *Event_CreatePhysicalRouterOverlayRoleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRouterOverlayRoleRefRequest
	if _, err := service.CreatePhysicalRouterOverlayRoleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalRouterOverlayRoleRefRequest{
		CreatePhysicalRouterOverlayRoleRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalRouterOverlayRoleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRouterOverlayRoleRefRequest
	if _, err := service.DeletePhysicalRouterOverlayRoleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalRouterOverlayRoleRefRequest{
		DeletePhysicalRouterOverlayRoleRefRequest: request,
	}}, nil
}

func (e *Event_CreatePhysicalRouterPhysicalRoleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRouterPhysicalRoleRefRequest
	if _, err := service.CreatePhysicalRouterPhysicalRoleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalRouterPhysicalRoleRefRequest{
		CreatePhysicalRouterPhysicalRoleRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalRouterPhysicalRoleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRouterPhysicalRoleRefRequest
	if _, err := service.DeletePhysicalRouterPhysicalRoleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalRouterPhysicalRoleRefRequest{
		DeletePhysicalRouterPhysicalRoleRefRequest: request,
	}}, nil
}

func (e *Event_CreatePhysicalRouterFabricRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRouterFabricRefRequest
	if _, err := service.CreatePhysicalRouterFabricRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalRouterFabricRefRequest{
		CreatePhysicalRouterFabricRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalRouterFabricRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRouterFabricRefRequest
	if _, err := service.DeletePhysicalRouterFabricRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalRouterFabricRefRequest{
		DeletePhysicalRouterFabricRefRequest: request,
	}}, nil
}

func (e *Event_CreatePhysicalRouterDeviceFunctionalGroupRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRouterDeviceFunctionalGroupRefRequest
	if _, err := service.CreatePhysicalRouterDeviceFunctionalGroupRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalRouterDeviceFunctionalGroupRefRequest{
		CreatePhysicalRouterDeviceFunctionalGroupRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalRouterDeviceFunctionalGroupRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRouterDeviceFunctionalGroupRefRequest
	if _, err := service.DeletePhysicalRouterDeviceFunctionalGroupRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalRouterDeviceFunctionalGroupRefRequest{
		DeletePhysicalRouterDeviceFunctionalGroupRefRequest: request,
	}}, nil
}

func (e *Event_CreatePhysicalRouterTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePhysicalRouterTagRefRequest
	if _, err := service.CreatePhysicalRouterTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePhysicalRouterTagRefRequest{
		CreatePhysicalRouterTagRefRequest: request,
	}}, nil
}

func (e *Event_DeletePhysicalRouterTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePhysicalRouterTagRefRequest
	if _, err := service.DeletePhysicalRouterTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePhysicalRouterTagRefRequest{
		DeletePhysicalRouterTagRefRequest: request,
	}}, nil
}

type PolicyManagement = models.PolicyManagement

func (s *BaseService) CreatePolicyManagement(ctx context.Context, request *CreatePolicyManagementRequest) (*CreatePolicyManagementResponse, error) {
	if s.next == nil {
		return &CreatePolicyManagementResponse{
			PolicyManagement: request.GetPolicyManagement(),
		}, nil
	}
	return s.Next().CreatePolicyManagement(ctx, request)
}
func (s *BaseService) UpdatePolicyManagement(ctx context.Context, request *UpdatePolicyManagementRequest) (*UpdatePolicyManagementResponse, error) {
	if s.next == nil {
		return &UpdatePolicyManagementResponse{
			PolicyManagement: request.GetPolicyManagement(),
		}, nil
	}
	return s.Next().UpdatePolicyManagement(ctx, request)
}
func (s *BaseService) DeletePolicyManagement(ctx context.Context, request *DeletePolicyManagementRequest) (*DeletePolicyManagementResponse, error) {
	if s.next == nil {
		return &DeletePolicyManagementResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeletePolicyManagement(ctx, request)
}
func (s *BaseService) GetPolicyManagement(ctx context.Context, request *GetPolicyManagementRequest) (*GetPolicyManagementResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetPolicyManagement(ctx, request)
}
func (s *BaseService) ListPolicyManagement(ctx context.Context, request *ListPolicyManagementRequest) (*ListPolicyManagementResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListPolicyManagement(ctx, request)
}

func (s *BaseService) CreatePolicyManagementTagRef(ctx context.Context, request *CreatePolicyManagementTagRefRequest) (*CreatePolicyManagementTagRefResponse, error) {
	if s.next == nil {
		return &CreatePolicyManagementTagRefResponse{
			ID:                     request.ID,
			PolicyManagementTagRef: request.GetPolicyManagementTagRef(),
		}, nil
	}
	return s.Next().CreatePolicyManagementTagRef(ctx, request)
}

func (s *BaseService) DeletePolicyManagementTagRef(ctx context.Context, request *DeletePolicyManagementTagRefRequest) (*DeletePolicyManagementTagRefResponse, error) {
	if s.next == nil {
		return &DeletePolicyManagementTagRefResponse{
			ID:                     request.ID,
			PolicyManagementTagRef: request.GetPolicyManagementTagRef(),
		}, nil
	}
	return s.Next().DeletePolicyManagementTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePolicyManagementTagRef(ctx context.Context, request *CreatePolicyManagementTagRefRequest) (*CreatePolicyManagementTagRefResponse, error) {
	refField := models.PolicyManagementFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPolicyManagement(ctx, &GetPolicyManagementRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PolicyManagement
		obj.AddTagRef(request.PolicyManagementTagRef)

		_, err = s.BaseService.UpdatePolicyManagement(ctx, &UpdatePolicyManagementRequest{
			PolicyManagement: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePolicyManagementTagRefResponse{
		ID:                     request.ID,
		PolicyManagementTagRef: request.GetPolicyManagementTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePolicyManagementTagRef(ctx context.Context, request *DeletePolicyManagementTagRefRequest) (*DeletePolicyManagementTagRefResponse, error) {
	refField := models.PolicyManagementFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPolicyManagement(ctx, &GetPolicyManagementRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PolicyManagement
		obj.RemoveTagRef(request.PolicyManagementTagRef)

		_, err = s.BaseService.UpdatePolicyManagement(ctx, &UpdatePolicyManagementRequest{
			PolicyManagement: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePolicyManagementTagRefResponse{
		ID:                     request.ID,
		PolicyManagementTagRef: request.GetPolicyManagementTagRef(),
	}, nil
}

func (s *EventProducerService) CreatePolicyManagement(ctx context.Context, request *CreatePolicyManagementRequest) (*CreatePolicyManagementResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreatePolicyManagementRequest{
				CreatePolicyManagementRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePolicyManagement(ctx, request)
}
func (s *EventProducerService) UpdatePolicyManagement(ctx context.Context, request *UpdatePolicyManagementRequest) (*UpdatePolicyManagementResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdatePolicyManagementRequest{
				UpdatePolicyManagementRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdatePolicyManagement(ctx, request)
}
func (s *EventProducerService) DeletePolicyManagement(ctx context.Context, request *DeletePolicyManagementRequest) (*DeletePolicyManagementResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeletePolicyManagementRequest{
				DeletePolicyManagementRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePolicyManagement(ctx, request)
}

func (s *EventProducerService) CreatePolicyManagementTagRef(ctx context.Context, request *CreatePolicyManagementTagRefRequest) (*CreatePolicyManagementTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePolicyManagementTagRefRequest{
			CreatePolicyManagementTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePolicyManagementTagRef(ctx, request)
}

func (s *EventProducerService) DeletePolicyManagementTagRef(ctx context.Context, request *DeletePolicyManagementTagRefRequest) (*DeletePolicyManagementTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePolicyManagementTagRefRequest{
			DeletePolicyManagementTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePolicyManagementTagRef(ctx, request)
}

func (e *Event_CreatePolicyManagementRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePolicyManagementRequest
	model := request.PolicyManagement
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetPolicyManagement(ctx,
			&GetPolicyManagementRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreatePolicyManagement(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreatePolicyManagementRequest{
			CreatePolicyManagementRequest: &CreatePolicyManagementRequest{
				PolicyManagement: response.GetPolicyManagement(),
			},
		},
	}, nil
}

func (e *Event_CreatePolicyManagementRequest) ToUpdateEvent() *Event {
	request := e.CreatePolicyManagementRequest
	model := request.PolicyManagement
	return &Event{
		Request: &Event_UpdatePolicyManagementRequest{
			UpdatePolicyManagementRequest: &UpdatePolicyManagementRequest{
				PolicyManagement: model,
				FieldMask:        request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdatePolicyManagementRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdatePolicyManagementRequest
	response, err := service.UpdatePolicyManagement(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdatePolicyManagementRequest{
			UpdatePolicyManagementRequest: &UpdatePolicyManagementRequest{
				PolicyManagement: response.GetPolicyManagement(),
			},
		},
	}, nil
}

func (e *Event_UpdatePolicyManagementRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeletePolicyManagementRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePolicyManagementRequest
	_, err := service.DeletePolicyManagement(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeletePolicyManagementRequest{
			DeletePolicyManagementRequest: &DeletePolicyManagementRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreatePolicyManagementTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePolicyManagementTagRefRequest
	if _, err := service.CreatePolicyManagementTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePolicyManagementTagRefRequest{
		CreatePolicyManagementTagRefRequest: request,
	}}, nil
}

func (e *Event_DeletePolicyManagementTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePolicyManagementTagRefRequest
	if _, err := service.DeletePolicyManagementTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePolicyManagementTagRefRequest{
		DeletePolicyManagementTagRefRequest: request,
	}}, nil
}

type PortGroup = models.PortGroup

func (s *BaseService) CreatePortGroup(ctx context.Context, request *CreatePortGroupRequest) (*CreatePortGroupResponse, error) {
	if s.next == nil {
		return &CreatePortGroupResponse{
			PortGroup: request.GetPortGroup(),
		}, nil
	}
	return s.Next().CreatePortGroup(ctx, request)
}
func (s *BaseService) UpdatePortGroup(ctx context.Context, request *UpdatePortGroupRequest) (*UpdatePortGroupResponse, error) {
	if s.next == nil {
		return &UpdatePortGroupResponse{
			PortGroup: request.GetPortGroup(),
		}, nil
	}
	return s.Next().UpdatePortGroup(ctx, request)
}
func (s *BaseService) DeletePortGroup(ctx context.Context, request *DeletePortGroupRequest) (*DeletePortGroupResponse, error) {
	if s.next == nil {
		return &DeletePortGroupResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeletePortGroup(ctx, request)
}
func (s *BaseService) GetPortGroup(ctx context.Context, request *GetPortGroupRequest) (*GetPortGroupResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetPortGroup(ctx, request)
}
func (s *BaseService) ListPortGroup(ctx context.Context, request *ListPortGroupRequest) (*ListPortGroupResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListPortGroup(ctx, request)
}

func (s *BaseService) CreatePortGroupPortRef(ctx context.Context, request *CreatePortGroupPortRefRequest) (*CreatePortGroupPortRefResponse, error) {
	if s.next == nil {
		return &CreatePortGroupPortRefResponse{
			ID:               request.ID,
			PortGroupPortRef: request.GetPortGroupPortRef(),
		}, nil
	}
	return s.Next().CreatePortGroupPortRef(ctx, request)
}

func (s *BaseService) DeletePortGroupPortRef(ctx context.Context, request *DeletePortGroupPortRefRequest) (*DeletePortGroupPortRefResponse, error) {
	if s.next == nil {
		return &DeletePortGroupPortRefResponse{
			ID:               request.ID,
			PortGroupPortRef: request.GetPortGroupPortRef(),
		}, nil
	}
	return s.Next().DeletePortGroupPortRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePortGroupPortRef(ctx context.Context, request *CreatePortGroupPortRefRequest) (*CreatePortGroupPortRefResponse, error) {
	refField := models.PortGroupFieldPortRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPortGroup(ctx, &GetPortGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PortGroup
		obj.AddPortRef(request.PortGroupPortRef)

		_, err = s.BaseService.UpdatePortGroup(ctx, &UpdatePortGroupRequest{
			PortGroup: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePortGroupPortRefResponse{
		ID:               request.ID,
		PortGroupPortRef: request.GetPortGroupPortRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePortGroupPortRef(ctx context.Context, request *DeletePortGroupPortRefRequest) (*DeletePortGroupPortRefResponse, error) {
	refField := models.PortGroupFieldPortRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPortGroup(ctx, &GetPortGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PortGroup
		obj.RemovePortRef(request.PortGroupPortRef)

		_, err = s.BaseService.UpdatePortGroup(ctx, &UpdatePortGroupRequest{
			PortGroup: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePortGroupPortRefResponse{
		ID:               request.ID,
		PortGroupPortRef: request.GetPortGroupPortRef(),
	}, nil
}

func (s *BaseService) CreatePortGroupTagRef(ctx context.Context, request *CreatePortGroupTagRefRequest) (*CreatePortGroupTagRefResponse, error) {
	if s.next == nil {
		return &CreatePortGroupTagRefResponse{
			ID:              request.ID,
			PortGroupTagRef: request.GetPortGroupTagRef(),
		}, nil
	}
	return s.Next().CreatePortGroupTagRef(ctx, request)
}

func (s *BaseService) DeletePortGroupTagRef(ctx context.Context, request *DeletePortGroupTagRefRequest) (*DeletePortGroupTagRefResponse, error) {
	if s.next == nil {
		return &DeletePortGroupTagRefResponse{
			ID:              request.ID,
			PortGroupTagRef: request.GetPortGroupTagRef(),
		}, nil
	}
	return s.Next().DeletePortGroupTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePortGroupTagRef(ctx context.Context, request *CreatePortGroupTagRefRequest) (*CreatePortGroupTagRefResponse, error) {
	refField := models.PortGroupFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPortGroup(ctx, &GetPortGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PortGroup
		obj.AddTagRef(request.PortGroupTagRef)

		_, err = s.BaseService.UpdatePortGroup(ctx, &UpdatePortGroupRequest{
			PortGroup: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePortGroupTagRefResponse{
		ID:              request.ID,
		PortGroupTagRef: request.GetPortGroupTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePortGroupTagRef(ctx context.Context, request *DeletePortGroupTagRefRequest) (*DeletePortGroupTagRefResponse, error) {
	refField := models.PortGroupFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPortGroup(ctx, &GetPortGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PortGroup
		obj.RemoveTagRef(request.PortGroupTagRef)

		_, err = s.BaseService.UpdatePortGroup(ctx, &UpdatePortGroupRequest{
			PortGroup: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePortGroupTagRefResponse{
		ID:              request.ID,
		PortGroupTagRef: request.GetPortGroupTagRef(),
	}, nil
}

func (s *EventProducerService) CreatePortGroup(ctx context.Context, request *CreatePortGroupRequest) (*CreatePortGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreatePortGroupRequest{
				CreatePortGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePortGroup(ctx, request)
}
func (s *EventProducerService) UpdatePortGroup(ctx context.Context, request *UpdatePortGroupRequest) (*UpdatePortGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdatePortGroupRequest{
				UpdatePortGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdatePortGroup(ctx, request)
}
func (s *EventProducerService) DeletePortGroup(ctx context.Context, request *DeletePortGroupRequest) (*DeletePortGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeletePortGroupRequest{
				DeletePortGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePortGroup(ctx, request)
}

func (s *EventProducerService) CreatePortGroupPortRef(ctx context.Context, request *CreatePortGroupPortRefRequest) (*CreatePortGroupPortRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePortGroupPortRefRequest{
			CreatePortGroupPortRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePortGroupPortRef(ctx, request)
}

func (s *EventProducerService) DeletePortGroupPortRef(ctx context.Context, request *DeletePortGroupPortRefRequest) (*DeletePortGroupPortRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePortGroupPortRefRequest{
			DeletePortGroupPortRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePortGroupPortRef(ctx, request)
}

func (s *EventProducerService) CreatePortGroupTagRef(ctx context.Context, request *CreatePortGroupTagRefRequest) (*CreatePortGroupTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePortGroupTagRefRequest{
			CreatePortGroupTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePortGroupTagRef(ctx, request)
}

func (s *EventProducerService) DeletePortGroupTagRef(ctx context.Context, request *DeletePortGroupTagRefRequest) (*DeletePortGroupTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePortGroupTagRefRequest{
			DeletePortGroupTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePortGroupTagRef(ctx, request)
}

func (e *Event_CreatePortGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePortGroupRequest
	model := request.PortGroup
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetPortGroup(ctx,
			&GetPortGroupRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreatePortGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreatePortGroupRequest{
			CreatePortGroupRequest: &CreatePortGroupRequest{
				PortGroup: response.GetPortGroup(),
			},
		},
	}, nil
}

func (e *Event_CreatePortGroupRequest) ToUpdateEvent() *Event {
	request := e.CreatePortGroupRequest
	model := request.PortGroup
	return &Event{
		Request: &Event_UpdatePortGroupRequest{
			UpdatePortGroupRequest: &UpdatePortGroupRequest{
				PortGroup: model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdatePortGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdatePortGroupRequest
	response, err := service.UpdatePortGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdatePortGroupRequest{
			UpdatePortGroupRequest: &UpdatePortGroupRequest{
				PortGroup: response.GetPortGroup(),
			},
		},
	}, nil
}

func (e *Event_UpdatePortGroupRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeletePortGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePortGroupRequest
	_, err := service.DeletePortGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeletePortGroupRequest{
			DeletePortGroupRequest: &DeletePortGroupRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreatePortGroupPortRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePortGroupPortRefRequest
	if _, err := service.CreatePortGroupPortRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePortGroupPortRefRequest{
		CreatePortGroupPortRefRequest: request,
	}}, nil
}

func (e *Event_DeletePortGroupPortRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePortGroupPortRefRequest
	if _, err := service.DeletePortGroupPortRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePortGroupPortRefRequest{
		DeletePortGroupPortRefRequest: request,
	}}, nil
}

func (e *Event_CreatePortGroupTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePortGroupTagRefRequest
	if _, err := service.CreatePortGroupTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePortGroupTagRefRequest{
		CreatePortGroupTagRefRequest: request,
	}}, nil
}

func (e *Event_DeletePortGroupTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePortGroupTagRefRequest
	if _, err := service.DeletePortGroupTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePortGroupTagRefRequest{
		DeletePortGroupTagRefRequest: request,
	}}, nil
}

type PortProfile = models.PortProfile

func (s *BaseService) CreatePortProfile(ctx context.Context, request *CreatePortProfileRequest) (*CreatePortProfileResponse, error) {
	if s.next == nil {
		return &CreatePortProfileResponse{
			PortProfile: request.GetPortProfile(),
		}, nil
	}
	return s.Next().CreatePortProfile(ctx, request)
}
func (s *BaseService) UpdatePortProfile(ctx context.Context, request *UpdatePortProfileRequest) (*UpdatePortProfileResponse, error) {
	if s.next == nil {
		return &UpdatePortProfileResponse{
			PortProfile: request.GetPortProfile(),
		}, nil
	}
	return s.Next().UpdatePortProfile(ctx, request)
}
func (s *BaseService) DeletePortProfile(ctx context.Context, request *DeletePortProfileRequest) (*DeletePortProfileResponse, error) {
	if s.next == nil {
		return &DeletePortProfileResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeletePortProfile(ctx, request)
}
func (s *BaseService) GetPortProfile(ctx context.Context, request *GetPortProfileRequest) (*GetPortProfileResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetPortProfile(ctx, request)
}
func (s *BaseService) ListPortProfile(ctx context.Context, request *ListPortProfileRequest) (*ListPortProfileResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListPortProfile(ctx, request)
}

func (s *BaseService) CreatePortProfileTagRef(ctx context.Context, request *CreatePortProfileTagRefRequest) (*CreatePortProfileTagRefResponse, error) {
	if s.next == nil {
		return &CreatePortProfileTagRefResponse{
			ID:                request.ID,
			PortProfileTagRef: request.GetPortProfileTagRef(),
		}, nil
	}
	return s.Next().CreatePortProfileTagRef(ctx, request)
}

func (s *BaseService) DeletePortProfileTagRef(ctx context.Context, request *DeletePortProfileTagRefRequest) (*DeletePortProfileTagRefResponse, error) {
	if s.next == nil {
		return &DeletePortProfileTagRefResponse{
			ID:                request.ID,
			PortProfileTagRef: request.GetPortProfileTagRef(),
		}, nil
	}
	return s.Next().DeletePortProfileTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePortProfileTagRef(ctx context.Context, request *CreatePortProfileTagRefRequest) (*CreatePortProfileTagRefResponse, error) {
	refField := models.PortProfileFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPortProfile(ctx, &GetPortProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PortProfile
		obj.AddTagRef(request.PortProfileTagRef)

		_, err = s.BaseService.UpdatePortProfile(ctx, &UpdatePortProfileRequest{
			PortProfile: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePortProfileTagRefResponse{
		ID:                request.ID,
		PortProfileTagRef: request.GetPortProfileTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePortProfileTagRef(ctx context.Context, request *DeletePortProfileTagRefRequest) (*DeletePortProfileTagRefResponse, error) {
	refField := models.PortProfileFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPortProfile(ctx, &GetPortProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PortProfile
		obj.RemoveTagRef(request.PortProfileTagRef)

		_, err = s.BaseService.UpdatePortProfile(ctx, &UpdatePortProfileRequest{
			PortProfile: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePortProfileTagRefResponse{
		ID:                request.ID,
		PortProfileTagRef: request.GetPortProfileTagRef(),
	}, nil
}

func (s *BaseService) CreatePortProfileStormControlProfileRef(ctx context.Context, request *CreatePortProfileStormControlProfileRefRequest) (*CreatePortProfileStormControlProfileRefResponse, error) {
	if s.next == nil {
		return &CreatePortProfileStormControlProfileRefResponse{
			ID:                                request.ID,
			PortProfileStormControlProfileRef: request.GetPortProfileStormControlProfileRef(),
		}, nil
	}
	return s.Next().CreatePortProfileStormControlProfileRef(ctx, request)
}

func (s *BaseService) DeletePortProfileStormControlProfileRef(ctx context.Context, request *DeletePortProfileStormControlProfileRefRequest) (*DeletePortProfileStormControlProfileRefResponse, error) {
	if s.next == nil {
		return &DeletePortProfileStormControlProfileRefResponse{
			ID:                                request.ID,
			PortProfileStormControlProfileRef: request.GetPortProfileStormControlProfileRef(),
		}, nil
	}
	return s.Next().DeletePortProfileStormControlProfileRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePortProfileStormControlProfileRef(ctx context.Context, request *CreatePortProfileStormControlProfileRefRequest) (*CreatePortProfileStormControlProfileRefResponse, error) {
	refField := models.PortProfileFieldStormControlProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPortProfile(ctx, &GetPortProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PortProfile
		obj.AddStormControlProfileRef(request.PortProfileStormControlProfileRef)

		_, err = s.BaseService.UpdatePortProfile(ctx, &UpdatePortProfileRequest{
			PortProfile: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePortProfileStormControlProfileRefResponse{
		ID:                                request.ID,
		PortProfileStormControlProfileRef: request.GetPortProfileStormControlProfileRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePortProfileStormControlProfileRef(ctx context.Context, request *DeletePortProfileStormControlProfileRefRequest) (*DeletePortProfileStormControlProfileRefResponse, error) {
	refField := models.PortProfileFieldStormControlProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPortProfile(ctx, &GetPortProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PortProfile
		obj.RemoveStormControlProfileRef(request.PortProfileStormControlProfileRef)

		_, err = s.BaseService.UpdatePortProfile(ctx, &UpdatePortProfileRequest{
			PortProfile: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePortProfileStormControlProfileRefResponse{
		ID:                                request.ID,
		PortProfileStormControlProfileRef: request.GetPortProfileStormControlProfileRef(),
	}, nil
}

func (s *EventProducerService) CreatePortProfile(ctx context.Context, request *CreatePortProfileRequest) (*CreatePortProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreatePortProfileRequest{
				CreatePortProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePortProfile(ctx, request)
}
func (s *EventProducerService) UpdatePortProfile(ctx context.Context, request *UpdatePortProfileRequest) (*UpdatePortProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdatePortProfileRequest{
				UpdatePortProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdatePortProfile(ctx, request)
}
func (s *EventProducerService) DeletePortProfile(ctx context.Context, request *DeletePortProfileRequest) (*DeletePortProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeletePortProfileRequest{
				DeletePortProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePortProfile(ctx, request)
}

func (s *EventProducerService) CreatePortProfileStormControlProfileRef(ctx context.Context, request *CreatePortProfileStormControlProfileRefRequest) (*CreatePortProfileStormControlProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePortProfileStormControlProfileRefRequest{
			CreatePortProfileStormControlProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePortProfileStormControlProfileRef(ctx, request)
}

func (s *EventProducerService) DeletePortProfileStormControlProfileRef(ctx context.Context, request *DeletePortProfileStormControlProfileRefRequest) (*DeletePortProfileStormControlProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePortProfileStormControlProfileRefRequest{
			DeletePortProfileStormControlProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePortProfileStormControlProfileRef(ctx, request)
}

func (s *EventProducerService) CreatePortProfileTagRef(ctx context.Context, request *CreatePortProfileTagRefRequest) (*CreatePortProfileTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePortProfileTagRefRequest{
			CreatePortProfileTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePortProfileTagRef(ctx, request)
}

func (s *EventProducerService) DeletePortProfileTagRef(ctx context.Context, request *DeletePortProfileTagRefRequest) (*DeletePortProfileTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePortProfileTagRefRequest{
			DeletePortProfileTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePortProfileTagRef(ctx, request)
}

func (e *Event_CreatePortProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePortProfileRequest
	model := request.PortProfile
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetPortProfile(ctx,
			&GetPortProfileRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreatePortProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreatePortProfileRequest{
			CreatePortProfileRequest: &CreatePortProfileRequest{
				PortProfile: response.GetPortProfile(),
			},
		},
	}, nil
}

func (e *Event_CreatePortProfileRequest) ToUpdateEvent() *Event {
	request := e.CreatePortProfileRequest
	model := request.PortProfile
	return &Event{
		Request: &Event_UpdatePortProfileRequest{
			UpdatePortProfileRequest: &UpdatePortProfileRequest{
				PortProfile: model,
				FieldMask:   request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdatePortProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdatePortProfileRequest
	response, err := service.UpdatePortProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdatePortProfileRequest{
			UpdatePortProfileRequest: &UpdatePortProfileRequest{
				PortProfile: response.GetPortProfile(),
			},
		},
	}, nil
}

func (e *Event_UpdatePortProfileRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeletePortProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePortProfileRequest
	_, err := service.DeletePortProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeletePortProfileRequest{
			DeletePortProfileRequest: &DeletePortProfileRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreatePortProfileTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePortProfileTagRefRequest
	if _, err := service.CreatePortProfileTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePortProfileTagRefRequest{
		CreatePortProfileTagRefRequest: request,
	}}, nil
}

func (e *Event_DeletePortProfileTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePortProfileTagRefRequest
	if _, err := service.DeletePortProfileTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePortProfileTagRefRequest{
		DeletePortProfileTagRefRequest: request,
	}}, nil
}

func (e *Event_CreatePortProfileStormControlProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePortProfileStormControlProfileRefRequest
	if _, err := service.CreatePortProfileStormControlProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePortProfileStormControlProfileRefRequest{
		CreatePortProfileStormControlProfileRefRequest: request,
	}}, nil
}

func (e *Event_DeletePortProfileStormControlProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePortProfileStormControlProfileRefRequest
	if _, err := service.DeletePortProfileStormControlProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePortProfileStormControlProfileRefRequest{
		DeletePortProfileStormControlProfileRefRequest: request,
	}}, nil
}

type Port = models.Port

func (s *BaseService) CreatePort(ctx context.Context, request *CreatePortRequest) (*CreatePortResponse, error) {
	if s.next == nil {
		return &CreatePortResponse{
			Port: request.GetPort(),
		}, nil
	}
	return s.Next().CreatePort(ctx, request)
}
func (s *BaseService) UpdatePort(ctx context.Context, request *UpdatePortRequest) (*UpdatePortResponse, error) {
	if s.next == nil {
		return &UpdatePortResponse{
			Port: request.GetPort(),
		}, nil
	}
	return s.Next().UpdatePort(ctx, request)
}
func (s *BaseService) DeletePort(ctx context.Context, request *DeletePortRequest) (*DeletePortResponse, error) {
	if s.next == nil {
		return &DeletePortResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeletePort(ctx, request)
}
func (s *BaseService) GetPort(ctx context.Context, request *GetPortRequest) (*GetPortResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetPort(ctx, request)
}
func (s *BaseService) ListPort(ctx context.Context, request *ListPortRequest) (*ListPortResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListPort(ctx, request)
}

func (s *BaseService) CreatePortTagRef(ctx context.Context, request *CreatePortTagRefRequest) (*CreatePortTagRefResponse, error) {
	if s.next == nil {
		return &CreatePortTagRefResponse{
			ID:         request.ID,
			PortTagRef: request.GetPortTagRef(),
		}, nil
	}
	return s.Next().CreatePortTagRef(ctx, request)
}

func (s *BaseService) DeletePortTagRef(ctx context.Context, request *DeletePortTagRefRequest) (*DeletePortTagRefResponse, error) {
	if s.next == nil {
		return &DeletePortTagRefResponse{
			ID:         request.ID,
			PortTagRef: request.GetPortTagRef(),
		}, nil
	}
	return s.Next().DeletePortTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePortTagRef(ctx context.Context, request *CreatePortTagRefRequest) (*CreatePortTagRefResponse, error) {
	refField := models.PortFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPort(ctx, &GetPortRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Port
		obj.AddTagRef(request.PortTagRef)

		_, err = s.BaseService.UpdatePort(ctx, &UpdatePortRequest{
			Port:      obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePortTagRefResponse{
		ID:         request.ID,
		PortTagRef: request.GetPortTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePortTagRef(ctx context.Context, request *DeletePortTagRefRequest) (*DeletePortTagRefResponse, error) {
	refField := models.PortFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPort(ctx, &GetPortRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Port
		obj.RemoveTagRef(request.PortTagRef)

		_, err = s.BaseService.UpdatePort(ctx, &UpdatePortRequest{
			Port:      obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePortTagRefResponse{
		ID:         request.ID,
		PortTagRef: request.GetPortTagRef(),
	}, nil
}

func (s *EventProducerService) CreatePort(ctx context.Context, request *CreatePortRequest) (*CreatePortResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreatePortRequest{
				CreatePortRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePort(ctx, request)
}
func (s *EventProducerService) UpdatePort(ctx context.Context, request *UpdatePortRequest) (*UpdatePortResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdatePortRequest{
				UpdatePortRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdatePort(ctx, request)
}
func (s *EventProducerService) DeletePort(ctx context.Context, request *DeletePortRequest) (*DeletePortResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeletePortRequest{
				DeletePortRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePort(ctx, request)
}

func (s *EventProducerService) CreatePortTagRef(ctx context.Context, request *CreatePortTagRefRequest) (*CreatePortTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePortTagRefRequest{
			CreatePortTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePortTagRef(ctx, request)
}

func (s *EventProducerService) DeletePortTagRef(ctx context.Context, request *DeletePortTagRefRequest) (*DeletePortTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePortTagRefRequest{
			DeletePortTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePortTagRef(ctx, request)
}

func (e *Event_CreatePortRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePortRequest
	model := request.Port
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetPort(ctx,
			&GetPortRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreatePort(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreatePortRequest{
			CreatePortRequest: &CreatePortRequest{
				Port: response.GetPort(),
			},
		},
	}, nil
}

func (e *Event_CreatePortRequest) ToUpdateEvent() *Event {
	request := e.CreatePortRequest
	model := request.Port
	return &Event{
		Request: &Event_UpdatePortRequest{
			UpdatePortRequest: &UpdatePortRequest{
				Port:      model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdatePortRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdatePortRequest
	response, err := service.UpdatePort(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdatePortRequest{
			UpdatePortRequest: &UpdatePortRequest{
				Port: response.GetPort(),
			},
		},
	}, nil
}

func (e *Event_UpdatePortRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeletePortRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePortRequest
	_, err := service.DeletePort(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeletePortRequest{
			DeletePortRequest: &DeletePortRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreatePortTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePortTagRefRequest
	if _, err := service.CreatePortTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePortTagRefRequest{
		CreatePortTagRefRequest: request,
	}}, nil
}

func (e *Event_DeletePortTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePortTagRefRequest
	if _, err := service.DeletePortTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePortTagRefRequest{
		DeletePortTagRefRequest: request,
	}}, nil
}

type PortTuple = models.PortTuple

func (s *BaseService) CreatePortTuple(ctx context.Context, request *CreatePortTupleRequest) (*CreatePortTupleResponse, error) {
	if s.next == nil {
		return &CreatePortTupleResponse{
			PortTuple: request.GetPortTuple(),
		}, nil
	}
	return s.Next().CreatePortTuple(ctx, request)
}
func (s *BaseService) UpdatePortTuple(ctx context.Context, request *UpdatePortTupleRequest) (*UpdatePortTupleResponse, error) {
	if s.next == nil {
		return &UpdatePortTupleResponse{
			PortTuple: request.GetPortTuple(),
		}, nil
	}
	return s.Next().UpdatePortTuple(ctx, request)
}
func (s *BaseService) DeletePortTuple(ctx context.Context, request *DeletePortTupleRequest) (*DeletePortTupleResponse, error) {
	if s.next == nil {
		return &DeletePortTupleResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeletePortTuple(ctx, request)
}
func (s *BaseService) GetPortTuple(ctx context.Context, request *GetPortTupleRequest) (*GetPortTupleResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetPortTuple(ctx, request)
}
func (s *BaseService) ListPortTuple(ctx context.Context, request *ListPortTupleRequest) (*ListPortTupleResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListPortTuple(ctx, request)
}

func (s *BaseService) CreatePortTupleLogicalRouterRef(ctx context.Context, request *CreatePortTupleLogicalRouterRefRequest) (*CreatePortTupleLogicalRouterRefResponse, error) {
	if s.next == nil {
		return &CreatePortTupleLogicalRouterRefResponse{
			ID:                        request.ID,
			PortTupleLogicalRouterRef: request.GetPortTupleLogicalRouterRef(),
		}, nil
	}
	return s.Next().CreatePortTupleLogicalRouterRef(ctx, request)
}

func (s *BaseService) DeletePortTupleLogicalRouterRef(ctx context.Context, request *DeletePortTupleLogicalRouterRefRequest) (*DeletePortTupleLogicalRouterRefResponse, error) {
	if s.next == nil {
		return &DeletePortTupleLogicalRouterRefResponse{
			ID:                        request.ID,
			PortTupleLogicalRouterRef: request.GetPortTupleLogicalRouterRef(),
		}, nil
	}
	return s.Next().DeletePortTupleLogicalRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePortTupleLogicalRouterRef(ctx context.Context, request *CreatePortTupleLogicalRouterRefRequest) (*CreatePortTupleLogicalRouterRefResponse, error) {
	refField := models.PortTupleFieldLogicalRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPortTuple(ctx, &GetPortTupleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PortTuple
		obj.AddLogicalRouterRef(request.PortTupleLogicalRouterRef)

		_, err = s.BaseService.UpdatePortTuple(ctx, &UpdatePortTupleRequest{
			PortTuple: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePortTupleLogicalRouterRefResponse{
		ID:                        request.ID,
		PortTupleLogicalRouterRef: request.GetPortTupleLogicalRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePortTupleLogicalRouterRef(ctx context.Context, request *DeletePortTupleLogicalRouterRefRequest) (*DeletePortTupleLogicalRouterRefResponse, error) {
	refField := models.PortTupleFieldLogicalRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPortTuple(ctx, &GetPortTupleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PortTuple
		obj.RemoveLogicalRouterRef(request.PortTupleLogicalRouterRef)

		_, err = s.BaseService.UpdatePortTuple(ctx, &UpdatePortTupleRequest{
			PortTuple: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePortTupleLogicalRouterRefResponse{
		ID:                        request.ID,
		PortTupleLogicalRouterRef: request.GetPortTupleLogicalRouterRef(),
	}, nil
}

func (s *BaseService) CreatePortTupleVirtualNetworkRef(ctx context.Context, request *CreatePortTupleVirtualNetworkRefRequest) (*CreatePortTupleVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &CreatePortTupleVirtualNetworkRefResponse{
			ID:                         request.ID,
			PortTupleVirtualNetworkRef: request.GetPortTupleVirtualNetworkRef(),
		}, nil
	}
	return s.Next().CreatePortTupleVirtualNetworkRef(ctx, request)
}

func (s *BaseService) DeletePortTupleVirtualNetworkRef(ctx context.Context, request *DeletePortTupleVirtualNetworkRefRequest) (*DeletePortTupleVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &DeletePortTupleVirtualNetworkRefResponse{
			ID:                         request.ID,
			PortTupleVirtualNetworkRef: request.GetPortTupleVirtualNetworkRef(),
		}, nil
	}
	return s.Next().DeletePortTupleVirtualNetworkRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePortTupleVirtualNetworkRef(ctx context.Context, request *CreatePortTupleVirtualNetworkRefRequest) (*CreatePortTupleVirtualNetworkRefResponse, error) {
	refField := models.PortTupleFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPortTuple(ctx, &GetPortTupleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PortTuple
		obj.AddVirtualNetworkRef(request.PortTupleVirtualNetworkRef)

		_, err = s.BaseService.UpdatePortTuple(ctx, &UpdatePortTupleRequest{
			PortTuple: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePortTupleVirtualNetworkRefResponse{
		ID:                         request.ID,
		PortTupleVirtualNetworkRef: request.GetPortTupleVirtualNetworkRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePortTupleVirtualNetworkRef(ctx context.Context, request *DeletePortTupleVirtualNetworkRefRequest) (*DeletePortTupleVirtualNetworkRefResponse, error) {
	refField := models.PortTupleFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPortTuple(ctx, &GetPortTupleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PortTuple
		obj.RemoveVirtualNetworkRef(request.PortTupleVirtualNetworkRef)

		_, err = s.BaseService.UpdatePortTuple(ctx, &UpdatePortTupleRequest{
			PortTuple: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePortTupleVirtualNetworkRefResponse{
		ID:                         request.ID,
		PortTupleVirtualNetworkRef: request.GetPortTupleVirtualNetworkRef(),
	}, nil
}

func (s *BaseService) CreatePortTupleTagRef(ctx context.Context, request *CreatePortTupleTagRefRequest) (*CreatePortTupleTagRefResponse, error) {
	if s.next == nil {
		return &CreatePortTupleTagRefResponse{
			ID:              request.ID,
			PortTupleTagRef: request.GetPortTupleTagRef(),
		}, nil
	}
	return s.Next().CreatePortTupleTagRef(ctx, request)
}

func (s *BaseService) DeletePortTupleTagRef(ctx context.Context, request *DeletePortTupleTagRefRequest) (*DeletePortTupleTagRefResponse, error) {
	if s.next == nil {
		return &DeletePortTupleTagRefResponse{
			ID:              request.ID,
			PortTupleTagRef: request.GetPortTupleTagRef(),
		}, nil
	}
	return s.Next().DeletePortTupleTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreatePortTupleTagRef(ctx context.Context, request *CreatePortTupleTagRefRequest) (*CreatePortTupleTagRefResponse, error) {
	refField := models.PortTupleFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPortTuple(ctx, &GetPortTupleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PortTuple
		obj.AddTagRef(request.PortTupleTagRef)

		_, err = s.BaseService.UpdatePortTuple(ctx, &UpdatePortTupleRequest{
			PortTuple: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreatePortTupleTagRefResponse{
		ID:              request.ID,
		PortTupleTagRef: request.GetPortTupleTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeletePortTupleTagRef(ctx context.Context, request *DeletePortTupleTagRefRequest) (*DeletePortTupleTagRefResponse, error) {
	refField := models.PortTupleFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetPortTuple(ctx, &GetPortTupleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.PortTuple
		obj.RemoveTagRef(request.PortTupleTagRef)

		_, err = s.BaseService.UpdatePortTuple(ctx, &UpdatePortTupleRequest{
			PortTuple: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeletePortTupleTagRefResponse{
		ID:              request.ID,
		PortTupleTagRef: request.GetPortTupleTagRef(),
	}, nil
}

func (s *EventProducerService) CreatePortTuple(ctx context.Context, request *CreatePortTupleRequest) (*CreatePortTupleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreatePortTupleRequest{
				CreatePortTupleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePortTuple(ctx, request)
}
func (s *EventProducerService) UpdatePortTuple(ctx context.Context, request *UpdatePortTupleRequest) (*UpdatePortTupleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdatePortTupleRequest{
				UpdatePortTupleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdatePortTuple(ctx, request)
}
func (s *EventProducerService) DeletePortTuple(ctx context.Context, request *DeletePortTupleRequest) (*DeletePortTupleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeletePortTupleRequest{
				DeletePortTupleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePortTuple(ctx, request)
}

func (s *EventProducerService) CreatePortTupleLogicalRouterRef(ctx context.Context, request *CreatePortTupleLogicalRouterRefRequest) (*CreatePortTupleLogicalRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePortTupleLogicalRouterRefRequest{
			CreatePortTupleLogicalRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePortTupleLogicalRouterRef(ctx, request)
}

func (s *EventProducerService) DeletePortTupleLogicalRouterRef(ctx context.Context, request *DeletePortTupleLogicalRouterRefRequest) (*DeletePortTupleLogicalRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePortTupleLogicalRouterRefRequest{
			DeletePortTupleLogicalRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePortTupleLogicalRouterRef(ctx, request)
}

func (s *EventProducerService) CreatePortTupleVirtualNetworkRef(ctx context.Context, request *CreatePortTupleVirtualNetworkRefRequest) (*CreatePortTupleVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePortTupleVirtualNetworkRefRequest{
			CreatePortTupleVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePortTupleVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) DeletePortTupleVirtualNetworkRef(ctx context.Context, request *DeletePortTupleVirtualNetworkRefRequest) (*DeletePortTupleVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePortTupleVirtualNetworkRefRequest{
			DeletePortTupleVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePortTupleVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) CreatePortTupleTagRef(ctx context.Context, request *CreatePortTupleTagRefRequest) (*CreatePortTupleTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreatePortTupleTagRefRequest{
			CreatePortTupleTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreatePortTupleTagRef(ctx, request)
}

func (s *EventProducerService) DeletePortTupleTagRef(ctx context.Context, request *DeletePortTupleTagRefRequest) (*DeletePortTupleTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeletePortTupleTagRefRequest{
			DeletePortTupleTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeletePortTupleTagRef(ctx, request)
}

func (e *Event_CreatePortTupleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePortTupleRequest
	model := request.PortTuple
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetPortTuple(ctx,
			&GetPortTupleRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreatePortTuple(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreatePortTupleRequest{
			CreatePortTupleRequest: &CreatePortTupleRequest{
				PortTuple: response.GetPortTuple(),
			},
		},
	}, nil
}

func (e *Event_CreatePortTupleRequest) ToUpdateEvent() *Event {
	request := e.CreatePortTupleRequest
	model := request.PortTuple
	return &Event{
		Request: &Event_UpdatePortTupleRequest{
			UpdatePortTupleRequest: &UpdatePortTupleRequest{
				PortTuple: model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdatePortTupleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdatePortTupleRequest
	response, err := service.UpdatePortTuple(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdatePortTupleRequest{
			UpdatePortTupleRequest: &UpdatePortTupleRequest{
				PortTuple: response.GetPortTuple(),
			},
		},
	}, nil
}

func (e *Event_UpdatePortTupleRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeletePortTupleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePortTupleRequest
	_, err := service.DeletePortTuple(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeletePortTupleRequest{
			DeletePortTupleRequest: &DeletePortTupleRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreatePortTupleLogicalRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePortTupleLogicalRouterRefRequest
	if _, err := service.CreatePortTupleLogicalRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePortTupleLogicalRouterRefRequest{
		CreatePortTupleLogicalRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeletePortTupleLogicalRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePortTupleLogicalRouterRefRequest
	if _, err := service.DeletePortTupleLogicalRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePortTupleLogicalRouterRefRequest{
		DeletePortTupleLogicalRouterRefRequest: request,
	}}, nil
}

func (e *Event_CreatePortTupleVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePortTupleVirtualNetworkRefRequest
	if _, err := service.CreatePortTupleVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePortTupleVirtualNetworkRefRequest{
		CreatePortTupleVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_DeletePortTupleVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePortTupleVirtualNetworkRefRequest
	if _, err := service.DeletePortTupleVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePortTupleVirtualNetworkRefRequest{
		DeletePortTupleVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_CreatePortTupleTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreatePortTupleTagRefRequest
	if _, err := service.CreatePortTupleTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreatePortTupleTagRefRequest{
		CreatePortTupleTagRefRequest: request,
	}}, nil
}

func (e *Event_DeletePortTupleTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeletePortTupleTagRefRequest
	if _, err := service.DeletePortTupleTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeletePortTupleTagRefRequest{
		DeletePortTupleTagRefRequest: request,
	}}, nil
}

type Project = models.Project

func (s *BaseService) CreateProject(ctx context.Context, request *CreateProjectRequest) (*CreateProjectResponse, error) {
	if s.next == nil {
		return &CreateProjectResponse{
			Project: request.GetProject(),
		}, nil
	}
	return s.Next().CreateProject(ctx, request)
}
func (s *BaseService) UpdateProject(ctx context.Context, request *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	if s.next == nil {
		return &UpdateProjectResponse{
			Project: request.GetProject(),
		}, nil
	}
	return s.Next().UpdateProject(ctx, request)
}
func (s *BaseService) DeleteProject(ctx context.Context, request *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	if s.next == nil {
		return &DeleteProjectResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteProject(ctx, request)
}
func (s *BaseService) GetProject(ctx context.Context, request *GetProjectRequest) (*GetProjectResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetProject(ctx, request)
}
func (s *BaseService) ListProject(ctx context.Context, request *ListProjectRequest) (*ListProjectResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListProject(ctx, request)
}

func (s *BaseService) CreateProjectFloatingIPPoolRef(ctx context.Context, request *CreateProjectFloatingIPPoolRefRequest) (*CreateProjectFloatingIPPoolRefResponse, error) {
	if s.next == nil {
		return &CreateProjectFloatingIPPoolRefResponse{
			ID:                       request.ID,
			ProjectFloatingIPPoolRef: request.GetProjectFloatingIPPoolRef(),
		}, nil
	}
	return s.Next().CreateProjectFloatingIPPoolRef(ctx, request)
}

func (s *BaseService) DeleteProjectFloatingIPPoolRef(ctx context.Context, request *DeleteProjectFloatingIPPoolRefRequest) (*DeleteProjectFloatingIPPoolRefResponse, error) {
	if s.next == nil {
		return &DeleteProjectFloatingIPPoolRefResponse{
			ID:                       request.ID,
			ProjectFloatingIPPoolRef: request.GetProjectFloatingIPPoolRef(),
		}, nil
	}
	return s.Next().DeleteProjectFloatingIPPoolRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateProjectFloatingIPPoolRef(ctx context.Context, request *CreateProjectFloatingIPPoolRefRequest) (*CreateProjectFloatingIPPoolRefResponse, error) {
	refField := models.ProjectFieldFloatingIPPoolRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetProject(ctx, &GetProjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Project
		obj.AddFloatingIPPoolRef(request.ProjectFloatingIPPoolRef)

		_, err = s.BaseService.UpdateProject(ctx, &UpdateProjectRequest{
			Project:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateProjectFloatingIPPoolRefResponse{
		ID:                       request.ID,
		ProjectFloatingIPPoolRef: request.GetProjectFloatingIPPoolRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteProjectFloatingIPPoolRef(ctx context.Context, request *DeleteProjectFloatingIPPoolRefRequest) (*DeleteProjectFloatingIPPoolRefResponse, error) {
	refField := models.ProjectFieldFloatingIPPoolRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetProject(ctx, &GetProjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Project
		obj.RemoveFloatingIPPoolRef(request.ProjectFloatingIPPoolRef)

		_, err = s.BaseService.UpdateProject(ctx, &UpdateProjectRequest{
			Project:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteProjectFloatingIPPoolRefResponse{
		ID:                       request.ID,
		ProjectFloatingIPPoolRef: request.GetProjectFloatingIPPoolRef(),
	}, nil
}

func (s *BaseService) CreateProjectNamespaceRef(ctx context.Context, request *CreateProjectNamespaceRefRequest) (*CreateProjectNamespaceRefResponse, error) {
	if s.next == nil {
		return &CreateProjectNamespaceRefResponse{
			ID:                  request.ID,
			ProjectNamespaceRef: request.GetProjectNamespaceRef(),
		}, nil
	}
	return s.Next().CreateProjectNamespaceRef(ctx, request)
}

func (s *BaseService) DeleteProjectNamespaceRef(ctx context.Context, request *DeleteProjectNamespaceRefRequest) (*DeleteProjectNamespaceRefResponse, error) {
	if s.next == nil {
		return &DeleteProjectNamespaceRefResponse{
			ID:                  request.ID,
			ProjectNamespaceRef: request.GetProjectNamespaceRef(),
		}, nil
	}
	return s.Next().DeleteProjectNamespaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateProjectNamespaceRef(ctx context.Context, request *CreateProjectNamespaceRefRequest) (*CreateProjectNamespaceRefResponse, error) {
	refField := models.ProjectFieldNamespaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetProject(ctx, &GetProjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Project
		obj.AddNamespaceRef(request.ProjectNamespaceRef)

		_, err = s.BaseService.UpdateProject(ctx, &UpdateProjectRequest{
			Project:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateProjectNamespaceRefResponse{
		ID:                  request.ID,
		ProjectNamespaceRef: request.GetProjectNamespaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteProjectNamespaceRef(ctx context.Context, request *DeleteProjectNamespaceRefRequest) (*DeleteProjectNamespaceRefResponse, error) {
	refField := models.ProjectFieldNamespaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetProject(ctx, &GetProjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Project
		obj.RemoveNamespaceRef(request.ProjectNamespaceRef)

		_, err = s.BaseService.UpdateProject(ctx, &UpdateProjectRequest{
			Project:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteProjectNamespaceRefResponse{
		ID:                  request.ID,
		ProjectNamespaceRef: request.GetProjectNamespaceRef(),
	}, nil
}

func (s *BaseService) CreateProjectTagRef(ctx context.Context, request *CreateProjectTagRefRequest) (*CreateProjectTagRefResponse, error) {
	if s.next == nil {
		return &CreateProjectTagRefResponse{
			ID:            request.ID,
			ProjectTagRef: request.GetProjectTagRef(),
		}, nil
	}
	return s.Next().CreateProjectTagRef(ctx, request)
}

func (s *BaseService) DeleteProjectTagRef(ctx context.Context, request *DeleteProjectTagRefRequest) (*DeleteProjectTagRefResponse, error) {
	if s.next == nil {
		return &DeleteProjectTagRefResponse{
			ID:            request.ID,
			ProjectTagRef: request.GetProjectTagRef(),
		}, nil
	}
	return s.Next().DeleteProjectTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateProjectTagRef(ctx context.Context, request *CreateProjectTagRefRequest) (*CreateProjectTagRefResponse, error) {
	refField := models.ProjectFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetProject(ctx, &GetProjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Project
		obj.AddTagRef(request.ProjectTagRef)

		_, err = s.BaseService.UpdateProject(ctx, &UpdateProjectRequest{
			Project:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateProjectTagRefResponse{
		ID:            request.ID,
		ProjectTagRef: request.GetProjectTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteProjectTagRef(ctx context.Context, request *DeleteProjectTagRefRequest) (*DeleteProjectTagRefResponse, error) {
	refField := models.ProjectFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetProject(ctx, &GetProjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Project
		obj.RemoveTagRef(request.ProjectTagRef)

		_, err = s.BaseService.UpdateProject(ctx, &UpdateProjectRequest{
			Project:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteProjectTagRefResponse{
		ID:            request.ID,
		ProjectTagRef: request.GetProjectTagRef(),
	}, nil
}

func (s *BaseService) CreateProjectAliasIPPoolRef(ctx context.Context, request *CreateProjectAliasIPPoolRefRequest) (*CreateProjectAliasIPPoolRefResponse, error) {
	if s.next == nil {
		return &CreateProjectAliasIPPoolRefResponse{
			ID:                    request.ID,
			ProjectAliasIPPoolRef: request.GetProjectAliasIPPoolRef(),
		}, nil
	}
	return s.Next().CreateProjectAliasIPPoolRef(ctx, request)
}

func (s *BaseService) DeleteProjectAliasIPPoolRef(ctx context.Context, request *DeleteProjectAliasIPPoolRefRequest) (*DeleteProjectAliasIPPoolRefResponse, error) {
	if s.next == nil {
		return &DeleteProjectAliasIPPoolRefResponse{
			ID:                    request.ID,
			ProjectAliasIPPoolRef: request.GetProjectAliasIPPoolRef(),
		}, nil
	}
	return s.Next().DeleteProjectAliasIPPoolRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateProjectAliasIPPoolRef(ctx context.Context, request *CreateProjectAliasIPPoolRefRequest) (*CreateProjectAliasIPPoolRefResponse, error) {
	refField := models.ProjectFieldAliasIPPoolRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetProject(ctx, &GetProjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Project
		obj.AddAliasIPPoolRef(request.ProjectAliasIPPoolRef)

		_, err = s.BaseService.UpdateProject(ctx, &UpdateProjectRequest{
			Project:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateProjectAliasIPPoolRefResponse{
		ID:                    request.ID,
		ProjectAliasIPPoolRef: request.GetProjectAliasIPPoolRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteProjectAliasIPPoolRef(ctx context.Context, request *DeleteProjectAliasIPPoolRefRequest) (*DeleteProjectAliasIPPoolRefResponse, error) {
	refField := models.ProjectFieldAliasIPPoolRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetProject(ctx, &GetProjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Project
		obj.RemoveAliasIPPoolRef(request.ProjectAliasIPPoolRef)

		_, err = s.BaseService.UpdateProject(ctx, &UpdateProjectRequest{
			Project:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteProjectAliasIPPoolRefResponse{
		ID:                    request.ID,
		ProjectAliasIPPoolRef: request.GetProjectAliasIPPoolRef(),
	}, nil
}

func (s *BaseService) CreateProjectApplicationPolicySetRef(ctx context.Context, request *CreateProjectApplicationPolicySetRefRequest) (*CreateProjectApplicationPolicySetRefResponse, error) {
	if s.next == nil {
		return &CreateProjectApplicationPolicySetRefResponse{
			ID:                             request.ID,
			ProjectApplicationPolicySetRef: request.GetProjectApplicationPolicySetRef(),
		}, nil
	}
	return s.Next().CreateProjectApplicationPolicySetRef(ctx, request)
}

func (s *BaseService) DeleteProjectApplicationPolicySetRef(ctx context.Context, request *DeleteProjectApplicationPolicySetRefRequest) (*DeleteProjectApplicationPolicySetRefResponse, error) {
	if s.next == nil {
		return &DeleteProjectApplicationPolicySetRefResponse{
			ID:                             request.ID,
			ProjectApplicationPolicySetRef: request.GetProjectApplicationPolicySetRef(),
		}, nil
	}
	return s.Next().DeleteProjectApplicationPolicySetRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateProjectApplicationPolicySetRef(ctx context.Context, request *CreateProjectApplicationPolicySetRefRequest) (*CreateProjectApplicationPolicySetRefResponse, error) {
	refField := models.ProjectFieldApplicationPolicySetRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetProject(ctx, &GetProjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Project
		obj.AddApplicationPolicySetRef(request.ProjectApplicationPolicySetRef)

		_, err = s.BaseService.UpdateProject(ctx, &UpdateProjectRequest{
			Project:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateProjectApplicationPolicySetRefResponse{
		ID:                             request.ID,
		ProjectApplicationPolicySetRef: request.GetProjectApplicationPolicySetRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteProjectApplicationPolicySetRef(ctx context.Context, request *DeleteProjectApplicationPolicySetRefRequest) (*DeleteProjectApplicationPolicySetRefResponse, error) {
	refField := models.ProjectFieldApplicationPolicySetRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetProject(ctx, &GetProjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Project
		obj.RemoveApplicationPolicySetRef(request.ProjectApplicationPolicySetRef)

		_, err = s.BaseService.UpdateProject(ctx, &UpdateProjectRequest{
			Project:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteProjectApplicationPolicySetRefResponse{
		ID:                             request.ID,
		ProjectApplicationPolicySetRef: request.GetProjectApplicationPolicySetRef(),
	}, nil
}

func (s *EventProducerService) CreateProject(ctx context.Context, request *CreateProjectRequest) (*CreateProjectResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateProjectRequest{
				CreateProjectRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateProject(ctx, request)
}
func (s *EventProducerService) UpdateProject(ctx context.Context, request *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateProjectRequest{
				UpdateProjectRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateProject(ctx, request)
}
func (s *EventProducerService) DeleteProject(ctx context.Context, request *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteProjectRequest{
				DeleteProjectRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteProject(ctx, request)
}

func (s *EventProducerService) CreateProjectFloatingIPPoolRef(ctx context.Context, request *CreateProjectFloatingIPPoolRefRequest) (*CreateProjectFloatingIPPoolRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateProjectFloatingIPPoolRefRequest{
			CreateProjectFloatingIPPoolRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateProjectFloatingIPPoolRef(ctx, request)
}

func (s *EventProducerService) DeleteProjectFloatingIPPoolRef(ctx context.Context, request *DeleteProjectFloatingIPPoolRefRequest) (*DeleteProjectFloatingIPPoolRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteProjectFloatingIPPoolRefRequest{
			DeleteProjectFloatingIPPoolRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteProjectFloatingIPPoolRef(ctx, request)
}

func (s *EventProducerService) CreateProjectNamespaceRef(ctx context.Context, request *CreateProjectNamespaceRefRequest) (*CreateProjectNamespaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateProjectNamespaceRefRequest{
			CreateProjectNamespaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateProjectNamespaceRef(ctx, request)
}

func (s *EventProducerService) DeleteProjectNamespaceRef(ctx context.Context, request *DeleteProjectNamespaceRefRequest) (*DeleteProjectNamespaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteProjectNamespaceRefRequest{
			DeleteProjectNamespaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteProjectNamespaceRef(ctx, request)
}

func (s *EventProducerService) CreateProjectTagRef(ctx context.Context, request *CreateProjectTagRefRequest) (*CreateProjectTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateProjectTagRefRequest{
			CreateProjectTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateProjectTagRef(ctx, request)
}

func (s *EventProducerService) DeleteProjectTagRef(ctx context.Context, request *DeleteProjectTagRefRequest) (*DeleteProjectTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteProjectTagRefRequest{
			DeleteProjectTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteProjectTagRef(ctx, request)
}

func (s *EventProducerService) CreateProjectAliasIPPoolRef(ctx context.Context, request *CreateProjectAliasIPPoolRefRequest) (*CreateProjectAliasIPPoolRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateProjectAliasIPPoolRefRequest{
			CreateProjectAliasIPPoolRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateProjectAliasIPPoolRef(ctx, request)
}

func (s *EventProducerService) DeleteProjectAliasIPPoolRef(ctx context.Context, request *DeleteProjectAliasIPPoolRefRequest) (*DeleteProjectAliasIPPoolRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteProjectAliasIPPoolRefRequest{
			DeleteProjectAliasIPPoolRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteProjectAliasIPPoolRef(ctx, request)
}

func (s *EventProducerService) CreateProjectApplicationPolicySetRef(ctx context.Context, request *CreateProjectApplicationPolicySetRefRequest) (*CreateProjectApplicationPolicySetRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateProjectApplicationPolicySetRefRequest{
			CreateProjectApplicationPolicySetRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateProjectApplicationPolicySetRef(ctx, request)
}

func (s *EventProducerService) DeleteProjectApplicationPolicySetRef(ctx context.Context, request *DeleteProjectApplicationPolicySetRefRequest) (*DeleteProjectApplicationPolicySetRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteProjectApplicationPolicySetRefRequest{
			DeleteProjectApplicationPolicySetRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteProjectApplicationPolicySetRef(ctx, request)
}

func (e *Event_CreateProjectRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateProjectRequest
	model := request.Project
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetProject(ctx,
			&GetProjectRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateProject(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateProjectRequest{
			CreateProjectRequest: &CreateProjectRequest{
				Project: response.GetProject(),
			},
		},
	}, nil
}

func (e *Event_CreateProjectRequest) ToUpdateEvent() *Event {
	request := e.CreateProjectRequest
	model := request.Project
	return &Event{
		Request: &Event_UpdateProjectRequest{
			UpdateProjectRequest: &UpdateProjectRequest{
				Project:   model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateProjectRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateProjectRequest
	response, err := service.UpdateProject(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateProjectRequest{
			UpdateProjectRequest: &UpdateProjectRequest{
				Project: response.GetProject(),
			},
		},
	}, nil
}

func (e *Event_UpdateProjectRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteProjectRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteProjectRequest
	_, err := service.DeleteProject(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteProjectRequest{
			DeleteProjectRequest: &DeleteProjectRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateProjectApplicationPolicySetRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateProjectApplicationPolicySetRefRequest
	if _, err := service.CreateProjectApplicationPolicySetRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateProjectApplicationPolicySetRefRequest{
		CreateProjectApplicationPolicySetRefRequest: request,
	}}, nil
}

func (e *Event_DeleteProjectApplicationPolicySetRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteProjectApplicationPolicySetRefRequest
	if _, err := service.DeleteProjectApplicationPolicySetRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteProjectApplicationPolicySetRefRequest{
		DeleteProjectApplicationPolicySetRefRequest: request,
	}}, nil
}

func (e *Event_CreateProjectFloatingIPPoolRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateProjectFloatingIPPoolRefRequest
	if _, err := service.CreateProjectFloatingIPPoolRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateProjectFloatingIPPoolRefRequest{
		CreateProjectFloatingIPPoolRefRequest: request,
	}}, nil
}

func (e *Event_DeleteProjectFloatingIPPoolRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteProjectFloatingIPPoolRefRequest
	if _, err := service.DeleteProjectFloatingIPPoolRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteProjectFloatingIPPoolRefRequest{
		DeleteProjectFloatingIPPoolRefRequest: request,
	}}, nil
}

func (e *Event_CreateProjectNamespaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateProjectNamespaceRefRequest
	if _, err := service.CreateProjectNamespaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateProjectNamespaceRefRequest{
		CreateProjectNamespaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteProjectNamespaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteProjectNamespaceRefRequest
	if _, err := service.DeleteProjectNamespaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteProjectNamespaceRefRequest{
		DeleteProjectNamespaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateProjectTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateProjectTagRefRequest
	if _, err := service.CreateProjectTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateProjectTagRefRequest{
		CreateProjectTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteProjectTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteProjectTagRefRequest
	if _, err := service.DeleteProjectTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteProjectTagRefRequest{
		DeleteProjectTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateProjectAliasIPPoolRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateProjectAliasIPPoolRefRequest
	if _, err := service.CreateProjectAliasIPPoolRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateProjectAliasIPPoolRefRequest{
		CreateProjectAliasIPPoolRefRequest: request,
	}}, nil
}

func (e *Event_DeleteProjectAliasIPPoolRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteProjectAliasIPPoolRefRequest
	if _, err := service.DeleteProjectAliasIPPoolRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteProjectAliasIPPoolRefRequest{
		DeleteProjectAliasIPPoolRefRequest: request,
	}}, nil
}

type ProviderAttachment = models.ProviderAttachment

func (s *BaseService) CreateProviderAttachment(ctx context.Context, request *CreateProviderAttachmentRequest) (*CreateProviderAttachmentResponse, error) {
	if s.next == nil {
		return &CreateProviderAttachmentResponse{
			ProviderAttachment: request.GetProviderAttachment(),
		}, nil
	}
	return s.Next().CreateProviderAttachment(ctx, request)
}
func (s *BaseService) UpdateProviderAttachment(ctx context.Context, request *UpdateProviderAttachmentRequest) (*UpdateProviderAttachmentResponse, error) {
	if s.next == nil {
		return &UpdateProviderAttachmentResponse{
			ProviderAttachment: request.GetProviderAttachment(),
		}, nil
	}
	return s.Next().UpdateProviderAttachment(ctx, request)
}
func (s *BaseService) DeleteProviderAttachment(ctx context.Context, request *DeleteProviderAttachmentRequest) (*DeleteProviderAttachmentResponse, error) {
	if s.next == nil {
		return &DeleteProviderAttachmentResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteProviderAttachment(ctx, request)
}
func (s *BaseService) GetProviderAttachment(ctx context.Context, request *GetProviderAttachmentRequest) (*GetProviderAttachmentResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetProviderAttachment(ctx, request)
}
func (s *BaseService) ListProviderAttachment(ctx context.Context, request *ListProviderAttachmentRequest) (*ListProviderAttachmentResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListProviderAttachment(ctx, request)
}

func (s *BaseService) CreateProviderAttachmentVirtualRouterRef(ctx context.Context, request *CreateProviderAttachmentVirtualRouterRefRequest) (*CreateProviderAttachmentVirtualRouterRefResponse, error) {
	if s.next == nil {
		return &CreateProviderAttachmentVirtualRouterRefResponse{
			ID:                                 request.ID,
			ProviderAttachmentVirtualRouterRef: request.GetProviderAttachmentVirtualRouterRef(),
		}, nil
	}
	return s.Next().CreateProviderAttachmentVirtualRouterRef(ctx, request)
}

func (s *BaseService) DeleteProviderAttachmentVirtualRouterRef(ctx context.Context, request *DeleteProviderAttachmentVirtualRouterRefRequest) (*DeleteProviderAttachmentVirtualRouterRefResponse, error) {
	if s.next == nil {
		return &DeleteProviderAttachmentVirtualRouterRefResponse{
			ID:                                 request.ID,
			ProviderAttachmentVirtualRouterRef: request.GetProviderAttachmentVirtualRouterRef(),
		}, nil
	}
	return s.Next().DeleteProviderAttachmentVirtualRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateProviderAttachmentVirtualRouterRef(ctx context.Context, request *CreateProviderAttachmentVirtualRouterRefRequest) (*CreateProviderAttachmentVirtualRouterRefResponse, error) {
	refField := models.ProviderAttachmentFieldVirtualRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetProviderAttachment(ctx, &GetProviderAttachmentRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ProviderAttachment
		obj.AddVirtualRouterRef(request.ProviderAttachmentVirtualRouterRef)

		_, err = s.BaseService.UpdateProviderAttachment(ctx, &UpdateProviderAttachmentRequest{
			ProviderAttachment: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateProviderAttachmentVirtualRouterRefResponse{
		ID:                                 request.ID,
		ProviderAttachmentVirtualRouterRef: request.GetProviderAttachmentVirtualRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteProviderAttachmentVirtualRouterRef(ctx context.Context, request *DeleteProviderAttachmentVirtualRouterRefRequest) (*DeleteProviderAttachmentVirtualRouterRefResponse, error) {
	refField := models.ProviderAttachmentFieldVirtualRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetProviderAttachment(ctx, &GetProviderAttachmentRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ProviderAttachment
		obj.RemoveVirtualRouterRef(request.ProviderAttachmentVirtualRouterRef)

		_, err = s.BaseService.UpdateProviderAttachment(ctx, &UpdateProviderAttachmentRequest{
			ProviderAttachment: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteProviderAttachmentVirtualRouterRefResponse{
		ID:                                 request.ID,
		ProviderAttachmentVirtualRouterRef: request.GetProviderAttachmentVirtualRouterRef(),
	}, nil
}

func (s *BaseService) CreateProviderAttachmentTagRef(ctx context.Context, request *CreateProviderAttachmentTagRefRequest) (*CreateProviderAttachmentTagRefResponse, error) {
	if s.next == nil {
		return &CreateProviderAttachmentTagRefResponse{
			ID:                       request.ID,
			ProviderAttachmentTagRef: request.GetProviderAttachmentTagRef(),
		}, nil
	}
	return s.Next().CreateProviderAttachmentTagRef(ctx, request)
}

func (s *BaseService) DeleteProviderAttachmentTagRef(ctx context.Context, request *DeleteProviderAttachmentTagRefRequest) (*DeleteProviderAttachmentTagRefResponse, error) {
	if s.next == nil {
		return &DeleteProviderAttachmentTagRefResponse{
			ID:                       request.ID,
			ProviderAttachmentTagRef: request.GetProviderAttachmentTagRef(),
		}, nil
	}
	return s.Next().DeleteProviderAttachmentTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateProviderAttachmentTagRef(ctx context.Context, request *CreateProviderAttachmentTagRefRequest) (*CreateProviderAttachmentTagRefResponse, error) {
	refField := models.ProviderAttachmentFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetProviderAttachment(ctx, &GetProviderAttachmentRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ProviderAttachment
		obj.AddTagRef(request.ProviderAttachmentTagRef)

		_, err = s.BaseService.UpdateProviderAttachment(ctx, &UpdateProviderAttachmentRequest{
			ProviderAttachment: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateProviderAttachmentTagRefResponse{
		ID:                       request.ID,
		ProviderAttachmentTagRef: request.GetProviderAttachmentTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteProviderAttachmentTagRef(ctx context.Context, request *DeleteProviderAttachmentTagRefRequest) (*DeleteProviderAttachmentTagRefResponse, error) {
	refField := models.ProviderAttachmentFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetProviderAttachment(ctx, &GetProviderAttachmentRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ProviderAttachment
		obj.RemoveTagRef(request.ProviderAttachmentTagRef)

		_, err = s.BaseService.UpdateProviderAttachment(ctx, &UpdateProviderAttachmentRequest{
			ProviderAttachment: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteProviderAttachmentTagRefResponse{
		ID:                       request.ID,
		ProviderAttachmentTagRef: request.GetProviderAttachmentTagRef(),
	}, nil
}

func (s *EventProducerService) CreateProviderAttachment(ctx context.Context, request *CreateProviderAttachmentRequest) (*CreateProviderAttachmentResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateProviderAttachmentRequest{
				CreateProviderAttachmentRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateProviderAttachment(ctx, request)
}
func (s *EventProducerService) UpdateProviderAttachment(ctx context.Context, request *UpdateProviderAttachmentRequest) (*UpdateProviderAttachmentResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateProviderAttachmentRequest{
				UpdateProviderAttachmentRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateProviderAttachment(ctx, request)
}
func (s *EventProducerService) DeleteProviderAttachment(ctx context.Context, request *DeleteProviderAttachmentRequest) (*DeleteProviderAttachmentResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteProviderAttachmentRequest{
				DeleteProviderAttachmentRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteProviderAttachment(ctx, request)
}

func (s *EventProducerService) CreateProviderAttachmentVirtualRouterRef(ctx context.Context, request *CreateProviderAttachmentVirtualRouterRefRequest) (*CreateProviderAttachmentVirtualRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateProviderAttachmentVirtualRouterRefRequest{
			CreateProviderAttachmentVirtualRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateProviderAttachmentVirtualRouterRef(ctx, request)
}

func (s *EventProducerService) DeleteProviderAttachmentVirtualRouterRef(ctx context.Context, request *DeleteProviderAttachmentVirtualRouterRefRequest) (*DeleteProviderAttachmentVirtualRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteProviderAttachmentVirtualRouterRefRequest{
			DeleteProviderAttachmentVirtualRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteProviderAttachmentVirtualRouterRef(ctx, request)
}

func (s *EventProducerService) CreateProviderAttachmentTagRef(ctx context.Context, request *CreateProviderAttachmentTagRefRequest) (*CreateProviderAttachmentTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateProviderAttachmentTagRefRequest{
			CreateProviderAttachmentTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateProviderAttachmentTagRef(ctx, request)
}

func (s *EventProducerService) DeleteProviderAttachmentTagRef(ctx context.Context, request *DeleteProviderAttachmentTagRefRequest) (*DeleteProviderAttachmentTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteProviderAttachmentTagRefRequest{
			DeleteProviderAttachmentTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteProviderAttachmentTagRef(ctx, request)
}

func (e *Event_CreateProviderAttachmentRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateProviderAttachmentRequest
	model := request.ProviderAttachment
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetProviderAttachment(ctx,
			&GetProviderAttachmentRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateProviderAttachment(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateProviderAttachmentRequest{
			CreateProviderAttachmentRequest: &CreateProviderAttachmentRequest{
				ProviderAttachment: response.GetProviderAttachment(),
			},
		},
	}, nil
}

func (e *Event_CreateProviderAttachmentRequest) ToUpdateEvent() *Event {
	request := e.CreateProviderAttachmentRequest
	model := request.ProviderAttachment
	return &Event{
		Request: &Event_UpdateProviderAttachmentRequest{
			UpdateProviderAttachmentRequest: &UpdateProviderAttachmentRequest{
				ProviderAttachment: model,
				FieldMask:          request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateProviderAttachmentRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateProviderAttachmentRequest
	response, err := service.UpdateProviderAttachment(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateProviderAttachmentRequest{
			UpdateProviderAttachmentRequest: &UpdateProviderAttachmentRequest{
				ProviderAttachment: response.GetProviderAttachment(),
			},
		},
	}, nil
}

func (e *Event_UpdateProviderAttachmentRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteProviderAttachmentRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteProviderAttachmentRequest
	_, err := service.DeleteProviderAttachment(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteProviderAttachmentRequest{
			DeleteProviderAttachmentRequest: &DeleteProviderAttachmentRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateProviderAttachmentTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateProviderAttachmentTagRefRequest
	if _, err := service.CreateProviderAttachmentTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateProviderAttachmentTagRefRequest{
		CreateProviderAttachmentTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteProviderAttachmentTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteProviderAttachmentTagRefRequest
	if _, err := service.DeleteProviderAttachmentTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteProviderAttachmentTagRefRequest{
		DeleteProviderAttachmentTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateProviderAttachmentVirtualRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateProviderAttachmentVirtualRouterRefRequest
	if _, err := service.CreateProviderAttachmentVirtualRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateProviderAttachmentVirtualRouterRefRequest{
		CreateProviderAttachmentVirtualRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeleteProviderAttachmentVirtualRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteProviderAttachmentVirtualRouterRefRequest
	if _, err := service.DeleteProviderAttachmentVirtualRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteProviderAttachmentVirtualRouterRefRequest{
		DeleteProviderAttachmentVirtualRouterRefRequest: request,
	}}, nil
}

type QosConfig = models.QosConfig

func (s *BaseService) CreateQosConfig(ctx context.Context, request *CreateQosConfigRequest) (*CreateQosConfigResponse, error) {
	if s.next == nil {
		return &CreateQosConfigResponse{
			QosConfig: request.GetQosConfig(),
		}, nil
	}
	return s.Next().CreateQosConfig(ctx, request)
}
func (s *BaseService) UpdateQosConfig(ctx context.Context, request *UpdateQosConfigRequest) (*UpdateQosConfigResponse, error) {
	if s.next == nil {
		return &UpdateQosConfigResponse{
			QosConfig: request.GetQosConfig(),
		}, nil
	}
	return s.Next().UpdateQosConfig(ctx, request)
}
func (s *BaseService) DeleteQosConfig(ctx context.Context, request *DeleteQosConfigRequest) (*DeleteQosConfigResponse, error) {
	if s.next == nil {
		return &DeleteQosConfigResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteQosConfig(ctx, request)
}
func (s *BaseService) GetQosConfig(ctx context.Context, request *GetQosConfigRequest) (*GetQosConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetQosConfig(ctx, request)
}
func (s *BaseService) ListQosConfig(ctx context.Context, request *ListQosConfigRequest) (*ListQosConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListQosConfig(ctx, request)
}

func (s *BaseService) CreateQosConfigTagRef(ctx context.Context, request *CreateQosConfigTagRefRequest) (*CreateQosConfigTagRefResponse, error) {
	if s.next == nil {
		return &CreateQosConfigTagRefResponse{
			ID:              request.ID,
			QosConfigTagRef: request.GetQosConfigTagRef(),
		}, nil
	}
	return s.Next().CreateQosConfigTagRef(ctx, request)
}

func (s *BaseService) DeleteQosConfigTagRef(ctx context.Context, request *DeleteQosConfigTagRefRequest) (*DeleteQosConfigTagRefResponse, error) {
	if s.next == nil {
		return &DeleteQosConfigTagRefResponse{
			ID:              request.ID,
			QosConfigTagRef: request.GetQosConfigTagRef(),
		}, nil
	}
	return s.Next().DeleteQosConfigTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateQosConfigTagRef(ctx context.Context, request *CreateQosConfigTagRefRequest) (*CreateQosConfigTagRefResponse, error) {
	refField := models.QosConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetQosConfig(ctx, &GetQosConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.QosConfig
		obj.AddTagRef(request.QosConfigTagRef)

		_, err = s.BaseService.UpdateQosConfig(ctx, &UpdateQosConfigRequest{
			QosConfig: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateQosConfigTagRefResponse{
		ID:              request.ID,
		QosConfigTagRef: request.GetQosConfigTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteQosConfigTagRef(ctx context.Context, request *DeleteQosConfigTagRefRequest) (*DeleteQosConfigTagRefResponse, error) {
	refField := models.QosConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetQosConfig(ctx, &GetQosConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.QosConfig
		obj.RemoveTagRef(request.QosConfigTagRef)

		_, err = s.BaseService.UpdateQosConfig(ctx, &UpdateQosConfigRequest{
			QosConfig: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteQosConfigTagRefResponse{
		ID:              request.ID,
		QosConfigTagRef: request.GetQosConfigTagRef(),
	}, nil
}

func (s *BaseService) CreateQosConfigGlobalSystemConfigRef(ctx context.Context, request *CreateQosConfigGlobalSystemConfigRefRequest) (*CreateQosConfigGlobalSystemConfigRefResponse, error) {
	if s.next == nil {
		return &CreateQosConfigGlobalSystemConfigRefResponse{
			ID:                             request.ID,
			QosConfigGlobalSystemConfigRef: request.GetQosConfigGlobalSystemConfigRef(),
		}, nil
	}
	return s.Next().CreateQosConfigGlobalSystemConfigRef(ctx, request)
}

func (s *BaseService) DeleteQosConfigGlobalSystemConfigRef(ctx context.Context, request *DeleteQosConfigGlobalSystemConfigRefRequest) (*DeleteQosConfigGlobalSystemConfigRefResponse, error) {
	if s.next == nil {
		return &DeleteQosConfigGlobalSystemConfigRefResponse{
			ID:                             request.ID,
			QosConfigGlobalSystemConfigRef: request.GetQosConfigGlobalSystemConfigRef(),
		}, nil
	}
	return s.Next().DeleteQosConfigGlobalSystemConfigRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateQosConfigGlobalSystemConfigRef(ctx context.Context, request *CreateQosConfigGlobalSystemConfigRefRequest) (*CreateQosConfigGlobalSystemConfigRefResponse, error) {
	refField := models.QosConfigFieldGlobalSystemConfigRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetQosConfig(ctx, &GetQosConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.QosConfig
		obj.AddGlobalSystemConfigRef(request.QosConfigGlobalSystemConfigRef)

		_, err = s.BaseService.UpdateQosConfig(ctx, &UpdateQosConfigRequest{
			QosConfig: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateQosConfigGlobalSystemConfigRefResponse{
		ID:                             request.ID,
		QosConfigGlobalSystemConfigRef: request.GetQosConfigGlobalSystemConfigRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteQosConfigGlobalSystemConfigRef(ctx context.Context, request *DeleteQosConfigGlobalSystemConfigRefRequest) (*DeleteQosConfigGlobalSystemConfigRefResponse, error) {
	refField := models.QosConfigFieldGlobalSystemConfigRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetQosConfig(ctx, &GetQosConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.QosConfig
		obj.RemoveGlobalSystemConfigRef(request.QosConfigGlobalSystemConfigRef)

		_, err = s.BaseService.UpdateQosConfig(ctx, &UpdateQosConfigRequest{
			QosConfig: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteQosConfigGlobalSystemConfigRefResponse{
		ID:                             request.ID,
		QosConfigGlobalSystemConfigRef: request.GetQosConfigGlobalSystemConfigRef(),
	}, nil
}

func (s *EventProducerService) CreateQosConfig(ctx context.Context, request *CreateQosConfigRequest) (*CreateQosConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateQosConfigRequest{
				CreateQosConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateQosConfig(ctx, request)
}
func (s *EventProducerService) UpdateQosConfig(ctx context.Context, request *UpdateQosConfigRequest) (*UpdateQosConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateQosConfigRequest{
				UpdateQosConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateQosConfig(ctx, request)
}
func (s *EventProducerService) DeleteQosConfig(ctx context.Context, request *DeleteQosConfigRequest) (*DeleteQosConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteQosConfigRequest{
				DeleteQosConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteQosConfig(ctx, request)
}

func (s *EventProducerService) CreateQosConfigGlobalSystemConfigRef(ctx context.Context, request *CreateQosConfigGlobalSystemConfigRefRequest) (*CreateQosConfigGlobalSystemConfigRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateQosConfigGlobalSystemConfigRefRequest{
			CreateQosConfigGlobalSystemConfigRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateQosConfigGlobalSystemConfigRef(ctx, request)
}

func (s *EventProducerService) DeleteQosConfigGlobalSystemConfigRef(ctx context.Context, request *DeleteQosConfigGlobalSystemConfigRefRequest) (*DeleteQosConfigGlobalSystemConfigRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteQosConfigGlobalSystemConfigRefRequest{
			DeleteQosConfigGlobalSystemConfigRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteQosConfigGlobalSystemConfigRef(ctx, request)
}

func (s *EventProducerService) CreateQosConfigTagRef(ctx context.Context, request *CreateQosConfigTagRefRequest) (*CreateQosConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateQosConfigTagRefRequest{
			CreateQosConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateQosConfigTagRef(ctx, request)
}

func (s *EventProducerService) DeleteQosConfigTagRef(ctx context.Context, request *DeleteQosConfigTagRefRequest) (*DeleteQosConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteQosConfigTagRefRequest{
			DeleteQosConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteQosConfigTagRef(ctx, request)
}

func (e *Event_CreateQosConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateQosConfigRequest
	model := request.QosConfig
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetQosConfig(ctx,
			&GetQosConfigRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateQosConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateQosConfigRequest{
			CreateQosConfigRequest: &CreateQosConfigRequest{
				QosConfig: response.GetQosConfig(),
			},
		},
	}, nil
}

func (e *Event_CreateQosConfigRequest) ToUpdateEvent() *Event {
	request := e.CreateQosConfigRequest
	model := request.QosConfig
	return &Event{
		Request: &Event_UpdateQosConfigRequest{
			UpdateQosConfigRequest: &UpdateQosConfigRequest{
				QosConfig: model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateQosConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateQosConfigRequest
	response, err := service.UpdateQosConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateQosConfigRequest{
			UpdateQosConfigRequest: &UpdateQosConfigRequest{
				QosConfig: response.GetQosConfig(),
			},
		},
	}, nil
}

func (e *Event_UpdateQosConfigRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteQosConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteQosConfigRequest
	_, err := service.DeleteQosConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteQosConfigRequest{
			DeleteQosConfigRequest: &DeleteQosConfigRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateQosConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateQosConfigTagRefRequest
	if _, err := service.CreateQosConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateQosConfigTagRefRequest{
		CreateQosConfigTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteQosConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteQosConfigTagRefRequest
	if _, err := service.DeleteQosConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteQosConfigTagRefRequest{
		DeleteQosConfigTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateQosConfigGlobalSystemConfigRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateQosConfigGlobalSystemConfigRefRequest
	if _, err := service.CreateQosConfigGlobalSystemConfigRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateQosConfigGlobalSystemConfigRefRequest{
		CreateQosConfigGlobalSystemConfigRefRequest: request,
	}}, nil
}

func (e *Event_DeleteQosConfigGlobalSystemConfigRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteQosConfigGlobalSystemConfigRefRequest
	if _, err := service.DeleteQosConfigGlobalSystemConfigRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteQosConfigGlobalSystemConfigRefRequest{
		DeleteQosConfigGlobalSystemConfigRefRequest: request,
	}}, nil
}

type QosQueue = models.QosQueue

func (s *BaseService) CreateQosQueue(ctx context.Context, request *CreateQosQueueRequest) (*CreateQosQueueResponse, error) {
	if s.next == nil {
		return &CreateQosQueueResponse{
			QosQueue: request.GetQosQueue(),
		}, nil
	}
	return s.Next().CreateQosQueue(ctx, request)
}
func (s *BaseService) UpdateQosQueue(ctx context.Context, request *UpdateQosQueueRequest) (*UpdateQosQueueResponse, error) {
	if s.next == nil {
		return &UpdateQosQueueResponse{
			QosQueue: request.GetQosQueue(),
		}, nil
	}
	return s.Next().UpdateQosQueue(ctx, request)
}
func (s *BaseService) DeleteQosQueue(ctx context.Context, request *DeleteQosQueueRequest) (*DeleteQosQueueResponse, error) {
	if s.next == nil {
		return &DeleteQosQueueResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteQosQueue(ctx, request)
}
func (s *BaseService) GetQosQueue(ctx context.Context, request *GetQosQueueRequest) (*GetQosQueueResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetQosQueue(ctx, request)
}
func (s *BaseService) ListQosQueue(ctx context.Context, request *ListQosQueueRequest) (*ListQosQueueResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListQosQueue(ctx, request)
}

func (s *BaseService) CreateQosQueueTagRef(ctx context.Context, request *CreateQosQueueTagRefRequest) (*CreateQosQueueTagRefResponse, error) {
	if s.next == nil {
		return &CreateQosQueueTagRefResponse{
			ID:             request.ID,
			QosQueueTagRef: request.GetQosQueueTagRef(),
		}, nil
	}
	return s.Next().CreateQosQueueTagRef(ctx, request)
}

func (s *BaseService) DeleteQosQueueTagRef(ctx context.Context, request *DeleteQosQueueTagRefRequest) (*DeleteQosQueueTagRefResponse, error) {
	if s.next == nil {
		return &DeleteQosQueueTagRefResponse{
			ID:             request.ID,
			QosQueueTagRef: request.GetQosQueueTagRef(),
		}, nil
	}
	return s.Next().DeleteQosQueueTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateQosQueueTagRef(ctx context.Context, request *CreateQosQueueTagRefRequest) (*CreateQosQueueTagRefResponse, error) {
	refField := models.QosQueueFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetQosQueue(ctx, &GetQosQueueRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.QosQueue
		obj.AddTagRef(request.QosQueueTagRef)

		_, err = s.BaseService.UpdateQosQueue(ctx, &UpdateQosQueueRequest{
			QosQueue:  obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateQosQueueTagRefResponse{
		ID:             request.ID,
		QosQueueTagRef: request.GetQosQueueTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteQosQueueTagRef(ctx context.Context, request *DeleteQosQueueTagRefRequest) (*DeleteQosQueueTagRefResponse, error) {
	refField := models.QosQueueFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetQosQueue(ctx, &GetQosQueueRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.QosQueue
		obj.RemoveTagRef(request.QosQueueTagRef)

		_, err = s.BaseService.UpdateQosQueue(ctx, &UpdateQosQueueRequest{
			QosQueue:  obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteQosQueueTagRefResponse{
		ID:             request.ID,
		QosQueueTagRef: request.GetQosQueueTagRef(),
	}, nil
}

func (s *EventProducerService) CreateQosQueue(ctx context.Context, request *CreateQosQueueRequest) (*CreateQosQueueResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateQosQueueRequest{
				CreateQosQueueRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateQosQueue(ctx, request)
}
func (s *EventProducerService) UpdateQosQueue(ctx context.Context, request *UpdateQosQueueRequest) (*UpdateQosQueueResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateQosQueueRequest{
				UpdateQosQueueRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateQosQueue(ctx, request)
}
func (s *EventProducerService) DeleteQosQueue(ctx context.Context, request *DeleteQosQueueRequest) (*DeleteQosQueueResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteQosQueueRequest{
				DeleteQosQueueRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteQosQueue(ctx, request)
}

func (s *EventProducerService) CreateQosQueueTagRef(ctx context.Context, request *CreateQosQueueTagRefRequest) (*CreateQosQueueTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateQosQueueTagRefRequest{
			CreateQosQueueTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateQosQueueTagRef(ctx, request)
}

func (s *EventProducerService) DeleteQosQueueTagRef(ctx context.Context, request *DeleteQosQueueTagRefRequest) (*DeleteQosQueueTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteQosQueueTagRefRequest{
			DeleteQosQueueTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteQosQueueTagRef(ctx, request)
}

func (e *Event_CreateQosQueueRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateQosQueueRequest
	model := request.QosQueue
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetQosQueue(ctx,
			&GetQosQueueRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateQosQueue(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateQosQueueRequest{
			CreateQosQueueRequest: &CreateQosQueueRequest{
				QosQueue: response.GetQosQueue(),
			},
		},
	}, nil
}

func (e *Event_CreateQosQueueRequest) ToUpdateEvent() *Event {
	request := e.CreateQosQueueRequest
	model := request.QosQueue
	return &Event{
		Request: &Event_UpdateQosQueueRequest{
			UpdateQosQueueRequest: &UpdateQosQueueRequest{
				QosQueue:  model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateQosQueueRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateQosQueueRequest
	response, err := service.UpdateQosQueue(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateQosQueueRequest{
			UpdateQosQueueRequest: &UpdateQosQueueRequest{
				QosQueue: response.GetQosQueue(),
			},
		},
	}, nil
}

func (e *Event_UpdateQosQueueRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteQosQueueRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteQosQueueRequest
	_, err := service.DeleteQosQueue(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteQosQueueRequest{
			DeleteQosQueueRequest: &DeleteQosQueueRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateQosQueueTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateQosQueueTagRefRequest
	if _, err := service.CreateQosQueueTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateQosQueueTagRefRequest{
		CreateQosQueueTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteQosQueueTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteQosQueueTagRefRequest
	if _, err := service.DeleteQosQueueTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteQosQueueTagRefRequest{
		DeleteQosQueueTagRefRequest: request,
	}}, nil
}

type RoleConfig = models.RoleConfig

func (s *BaseService) CreateRoleConfig(ctx context.Context, request *CreateRoleConfigRequest) (*CreateRoleConfigResponse, error) {
	if s.next == nil {
		return &CreateRoleConfigResponse{
			RoleConfig: request.GetRoleConfig(),
		}, nil
	}
	return s.Next().CreateRoleConfig(ctx, request)
}
func (s *BaseService) UpdateRoleConfig(ctx context.Context, request *UpdateRoleConfigRequest) (*UpdateRoleConfigResponse, error) {
	if s.next == nil {
		return &UpdateRoleConfigResponse{
			RoleConfig: request.GetRoleConfig(),
		}, nil
	}
	return s.Next().UpdateRoleConfig(ctx, request)
}
func (s *BaseService) DeleteRoleConfig(ctx context.Context, request *DeleteRoleConfigRequest) (*DeleteRoleConfigResponse, error) {
	if s.next == nil {
		return &DeleteRoleConfigResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteRoleConfig(ctx, request)
}
func (s *BaseService) GetRoleConfig(ctx context.Context, request *GetRoleConfigRequest) (*GetRoleConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetRoleConfig(ctx, request)
}
func (s *BaseService) ListRoleConfig(ctx context.Context, request *ListRoleConfigRequest) (*ListRoleConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListRoleConfig(ctx, request)
}

func (s *BaseService) CreateRoleConfigTagRef(ctx context.Context, request *CreateRoleConfigTagRefRequest) (*CreateRoleConfigTagRefResponse, error) {
	if s.next == nil {
		return &CreateRoleConfigTagRefResponse{
			ID:               request.ID,
			RoleConfigTagRef: request.GetRoleConfigTagRef(),
		}, nil
	}
	return s.Next().CreateRoleConfigTagRef(ctx, request)
}

func (s *BaseService) DeleteRoleConfigTagRef(ctx context.Context, request *DeleteRoleConfigTagRefRequest) (*DeleteRoleConfigTagRefResponse, error) {
	if s.next == nil {
		return &DeleteRoleConfigTagRefResponse{
			ID:               request.ID,
			RoleConfigTagRef: request.GetRoleConfigTagRef(),
		}, nil
	}
	return s.Next().DeleteRoleConfigTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRoleConfigTagRef(ctx context.Context, request *CreateRoleConfigTagRefRequest) (*CreateRoleConfigTagRefResponse, error) {
	refField := models.RoleConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoleConfig(ctx, &GetRoleConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoleConfig
		obj.AddTagRef(request.RoleConfigTagRef)

		_, err = s.BaseService.UpdateRoleConfig(ctx, &UpdateRoleConfigRequest{
			RoleConfig: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRoleConfigTagRefResponse{
		ID:               request.ID,
		RoleConfigTagRef: request.GetRoleConfigTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRoleConfigTagRef(ctx context.Context, request *DeleteRoleConfigTagRefRequest) (*DeleteRoleConfigTagRefResponse, error) {
	refField := models.RoleConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoleConfig(ctx, &GetRoleConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoleConfig
		obj.RemoveTagRef(request.RoleConfigTagRef)

		_, err = s.BaseService.UpdateRoleConfig(ctx, &UpdateRoleConfigRequest{
			RoleConfig: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRoleConfigTagRefResponse{
		ID:               request.ID,
		RoleConfigTagRef: request.GetRoleConfigTagRef(),
	}, nil
}

func (s *EventProducerService) CreateRoleConfig(ctx context.Context, request *CreateRoleConfigRequest) (*CreateRoleConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateRoleConfigRequest{
				CreateRoleConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoleConfig(ctx, request)
}
func (s *EventProducerService) UpdateRoleConfig(ctx context.Context, request *UpdateRoleConfigRequest) (*UpdateRoleConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateRoleConfigRequest{
				UpdateRoleConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateRoleConfig(ctx, request)
}
func (s *EventProducerService) DeleteRoleConfig(ctx context.Context, request *DeleteRoleConfigRequest) (*DeleteRoleConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteRoleConfigRequest{
				DeleteRoleConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoleConfig(ctx, request)
}

func (s *EventProducerService) CreateRoleConfigTagRef(ctx context.Context, request *CreateRoleConfigTagRefRequest) (*CreateRoleConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRoleConfigTagRefRequest{
			CreateRoleConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoleConfigTagRef(ctx, request)
}

func (s *EventProducerService) DeleteRoleConfigTagRef(ctx context.Context, request *DeleteRoleConfigTagRefRequest) (*DeleteRoleConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRoleConfigTagRefRequest{
			DeleteRoleConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoleConfigTagRef(ctx, request)
}

func (e *Event_CreateRoleConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoleConfigRequest
	model := request.RoleConfig
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetRoleConfig(ctx,
			&GetRoleConfigRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateRoleConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateRoleConfigRequest{
			CreateRoleConfigRequest: &CreateRoleConfigRequest{
				RoleConfig: response.GetRoleConfig(),
			},
		},
	}, nil
}

func (e *Event_CreateRoleConfigRequest) ToUpdateEvent() *Event {
	request := e.CreateRoleConfigRequest
	model := request.RoleConfig
	return &Event{
		Request: &Event_UpdateRoleConfigRequest{
			UpdateRoleConfigRequest: &UpdateRoleConfigRequest{
				RoleConfig: model,
				FieldMask:  request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateRoleConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateRoleConfigRequest
	response, err := service.UpdateRoleConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateRoleConfigRequest{
			UpdateRoleConfigRequest: &UpdateRoleConfigRequest{
				RoleConfig: response.GetRoleConfig(),
			},
		},
	}, nil
}

func (e *Event_UpdateRoleConfigRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteRoleConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoleConfigRequest
	_, err := service.DeleteRoleConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteRoleConfigRequest{
			DeleteRoleConfigRequest: &DeleteRoleConfigRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateRoleConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoleConfigTagRefRequest
	if _, err := service.CreateRoleConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRoleConfigTagRefRequest{
		CreateRoleConfigTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRoleConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoleConfigTagRefRequest
	if _, err := service.DeleteRoleConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRoleConfigTagRefRequest{
		DeleteRoleConfigTagRefRequest: request,
	}}, nil
}

type RoleDefinition = models.RoleDefinition

func (s *BaseService) CreateRoleDefinition(ctx context.Context, request *CreateRoleDefinitionRequest) (*CreateRoleDefinitionResponse, error) {
	if s.next == nil {
		return &CreateRoleDefinitionResponse{
			RoleDefinition: request.GetRoleDefinition(),
		}, nil
	}
	return s.Next().CreateRoleDefinition(ctx, request)
}
func (s *BaseService) UpdateRoleDefinition(ctx context.Context, request *UpdateRoleDefinitionRequest) (*UpdateRoleDefinitionResponse, error) {
	if s.next == nil {
		return &UpdateRoleDefinitionResponse{
			RoleDefinition: request.GetRoleDefinition(),
		}, nil
	}
	return s.Next().UpdateRoleDefinition(ctx, request)
}
func (s *BaseService) DeleteRoleDefinition(ctx context.Context, request *DeleteRoleDefinitionRequest) (*DeleteRoleDefinitionResponse, error) {
	if s.next == nil {
		return &DeleteRoleDefinitionResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteRoleDefinition(ctx, request)
}
func (s *BaseService) GetRoleDefinition(ctx context.Context, request *GetRoleDefinitionRequest) (*GetRoleDefinitionResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetRoleDefinition(ctx, request)
}
func (s *BaseService) ListRoleDefinition(ctx context.Context, request *ListRoleDefinitionRequest) (*ListRoleDefinitionResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListRoleDefinition(ctx, request)
}

func (s *BaseService) CreateRoleDefinitionTagRef(ctx context.Context, request *CreateRoleDefinitionTagRefRequest) (*CreateRoleDefinitionTagRefResponse, error) {
	if s.next == nil {
		return &CreateRoleDefinitionTagRefResponse{
			ID:                   request.ID,
			RoleDefinitionTagRef: request.GetRoleDefinitionTagRef(),
		}, nil
	}
	return s.Next().CreateRoleDefinitionTagRef(ctx, request)
}

func (s *BaseService) DeleteRoleDefinitionTagRef(ctx context.Context, request *DeleteRoleDefinitionTagRefRequest) (*DeleteRoleDefinitionTagRefResponse, error) {
	if s.next == nil {
		return &DeleteRoleDefinitionTagRefResponse{
			ID:                   request.ID,
			RoleDefinitionTagRef: request.GetRoleDefinitionTagRef(),
		}, nil
	}
	return s.Next().DeleteRoleDefinitionTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRoleDefinitionTagRef(ctx context.Context, request *CreateRoleDefinitionTagRefRequest) (*CreateRoleDefinitionTagRefResponse, error) {
	refField := models.RoleDefinitionFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoleDefinition(ctx, &GetRoleDefinitionRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoleDefinition
		obj.AddTagRef(request.RoleDefinitionTagRef)

		_, err = s.BaseService.UpdateRoleDefinition(ctx, &UpdateRoleDefinitionRequest{
			RoleDefinition: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRoleDefinitionTagRefResponse{
		ID:                   request.ID,
		RoleDefinitionTagRef: request.GetRoleDefinitionTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRoleDefinitionTagRef(ctx context.Context, request *DeleteRoleDefinitionTagRefRequest) (*DeleteRoleDefinitionTagRefResponse, error) {
	refField := models.RoleDefinitionFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoleDefinition(ctx, &GetRoleDefinitionRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoleDefinition
		obj.RemoveTagRef(request.RoleDefinitionTagRef)

		_, err = s.BaseService.UpdateRoleDefinition(ctx, &UpdateRoleDefinitionRequest{
			RoleDefinition: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRoleDefinitionTagRefResponse{
		ID:                   request.ID,
		RoleDefinitionTagRef: request.GetRoleDefinitionTagRef(),
	}, nil
}

func (s *BaseService) CreateRoleDefinitionFeatureRef(ctx context.Context, request *CreateRoleDefinitionFeatureRefRequest) (*CreateRoleDefinitionFeatureRefResponse, error) {
	if s.next == nil {
		return &CreateRoleDefinitionFeatureRefResponse{
			ID:                       request.ID,
			RoleDefinitionFeatureRef: request.GetRoleDefinitionFeatureRef(),
		}, nil
	}
	return s.Next().CreateRoleDefinitionFeatureRef(ctx, request)
}

func (s *BaseService) DeleteRoleDefinitionFeatureRef(ctx context.Context, request *DeleteRoleDefinitionFeatureRefRequest) (*DeleteRoleDefinitionFeatureRefResponse, error) {
	if s.next == nil {
		return &DeleteRoleDefinitionFeatureRefResponse{
			ID:                       request.ID,
			RoleDefinitionFeatureRef: request.GetRoleDefinitionFeatureRef(),
		}, nil
	}
	return s.Next().DeleteRoleDefinitionFeatureRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRoleDefinitionFeatureRef(ctx context.Context, request *CreateRoleDefinitionFeatureRefRequest) (*CreateRoleDefinitionFeatureRefResponse, error) {
	refField := models.RoleDefinitionFieldFeatureRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoleDefinition(ctx, &GetRoleDefinitionRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoleDefinition
		obj.AddFeatureRef(request.RoleDefinitionFeatureRef)

		_, err = s.BaseService.UpdateRoleDefinition(ctx, &UpdateRoleDefinitionRequest{
			RoleDefinition: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRoleDefinitionFeatureRefResponse{
		ID:                       request.ID,
		RoleDefinitionFeatureRef: request.GetRoleDefinitionFeatureRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRoleDefinitionFeatureRef(ctx context.Context, request *DeleteRoleDefinitionFeatureRefRequest) (*DeleteRoleDefinitionFeatureRefResponse, error) {
	refField := models.RoleDefinitionFieldFeatureRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoleDefinition(ctx, &GetRoleDefinitionRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoleDefinition
		obj.RemoveFeatureRef(request.RoleDefinitionFeatureRef)

		_, err = s.BaseService.UpdateRoleDefinition(ctx, &UpdateRoleDefinitionRequest{
			RoleDefinition: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRoleDefinitionFeatureRefResponse{
		ID:                       request.ID,
		RoleDefinitionFeatureRef: request.GetRoleDefinitionFeatureRef(),
	}, nil
}

func (s *BaseService) CreateRoleDefinitionOverlayRoleRef(ctx context.Context, request *CreateRoleDefinitionOverlayRoleRefRequest) (*CreateRoleDefinitionOverlayRoleRefResponse, error) {
	if s.next == nil {
		return &CreateRoleDefinitionOverlayRoleRefResponse{
			ID:                           request.ID,
			RoleDefinitionOverlayRoleRef: request.GetRoleDefinitionOverlayRoleRef(),
		}, nil
	}
	return s.Next().CreateRoleDefinitionOverlayRoleRef(ctx, request)
}

func (s *BaseService) DeleteRoleDefinitionOverlayRoleRef(ctx context.Context, request *DeleteRoleDefinitionOverlayRoleRefRequest) (*DeleteRoleDefinitionOverlayRoleRefResponse, error) {
	if s.next == nil {
		return &DeleteRoleDefinitionOverlayRoleRefResponse{
			ID:                           request.ID,
			RoleDefinitionOverlayRoleRef: request.GetRoleDefinitionOverlayRoleRef(),
		}, nil
	}
	return s.Next().DeleteRoleDefinitionOverlayRoleRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRoleDefinitionOverlayRoleRef(ctx context.Context, request *CreateRoleDefinitionOverlayRoleRefRequest) (*CreateRoleDefinitionOverlayRoleRefResponse, error) {
	refField := models.RoleDefinitionFieldOverlayRoleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoleDefinition(ctx, &GetRoleDefinitionRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoleDefinition
		obj.AddOverlayRoleRef(request.RoleDefinitionOverlayRoleRef)

		_, err = s.BaseService.UpdateRoleDefinition(ctx, &UpdateRoleDefinitionRequest{
			RoleDefinition: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRoleDefinitionOverlayRoleRefResponse{
		ID:                           request.ID,
		RoleDefinitionOverlayRoleRef: request.GetRoleDefinitionOverlayRoleRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRoleDefinitionOverlayRoleRef(ctx context.Context, request *DeleteRoleDefinitionOverlayRoleRefRequest) (*DeleteRoleDefinitionOverlayRoleRefResponse, error) {
	refField := models.RoleDefinitionFieldOverlayRoleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoleDefinition(ctx, &GetRoleDefinitionRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoleDefinition
		obj.RemoveOverlayRoleRef(request.RoleDefinitionOverlayRoleRef)

		_, err = s.BaseService.UpdateRoleDefinition(ctx, &UpdateRoleDefinitionRequest{
			RoleDefinition: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRoleDefinitionOverlayRoleRefResponse{
		ID:                           request.ID,
		RoleDefinitionOverlayRoleRef: request.GetRoleDefinitionOverlayRoleRef(),
	}, nil
}

func (s *BaseService) CreateRoleDefinitionPhysicalRoleRef(ctx context.Context, request *CreateRoleDefinitionPhysicalRoleRefRequest) (*CreateRoleDefinitionPhysicalRoleRefResponse, error) {
	if s.next == nil {
		return &CreateRoleDefinitionPhysicalRoleRefResponse{
			ID:                            request.ID,
			RoleDefinitionPhysicalRoleRef: request.GetRoleDefinitionPhysicalRoleRef(),
		}, nil
	}
	return s.Next().CreateRoleDefinitionPhysicalRoleRef(ctx, request)
}

func (s *BaseService) DeleteRoleDefinitionPhysicalRoleRef(ctx context.Context, request *DeleteRoleDefinitionPhysicalRoleRefRequest) (*DeleteRoleDefinitionPhysicalRoleRefResponse, error) {
	if s.next == nil {
		return &DeleteRoleDefinitionPhysicalRoleRefResponse{
			ID:                            request.ID,
			RoleDefinitionPhysicalRoleRef: request.GetRoleDefinitionPhysicalRoleRef(),
		}, nil
	}
	return s.Next().DeleteRoleDefinitionPhysicalRoleRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRoleDefinitionPhysicalRoleRef(ctx context.Context, request *CreateRoleDefinitionPhysicalRoleRefRequest) (*CreateRoleDefinitionPhysicalRoleRefResponse, error) {
	refField := models.RoleDefinitionFieldPhysicalRoleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoleDefinition(ctx, &GetRoleDefinitionRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoleDefinition
		obj.AddPhysicalRoleRef(request.RoleDefinitionPhysicalRoleRef)

		_, err = s.BaseService.UpdateRoleDefinition(ctx, &UpdateRoleDefinitionRequest{
			RoleDefinition: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRoleDefinitionPhysicalRoleRefResponse{
		ID:                            request.ID,
		RoleDefinitionPhysicalRoleRef: request.GetRoleDefinitionPhysicalRoleRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRoleDefinitionPhysicalRoleRef(ctx context.Context, request *DeleteRoleDefinitionPhysicalRoleRefRequest) (*DeleteRoleDefinitionPhysicalRoleRefResponse, error) {
	refField := models.RoleDefinitionFieldPhysicalRoleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoleDefinition(ctx, &GetRoleDefinitionRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoleDefinition
		obj.RemovePhysicalRoleRef(request.RoleDefinitionPhysicalRoleRef)

		_, err = s.BaseService.UpdateRoleDefinition(ctx, &UpdateRoleDefinitionRequest{
			RoleDefinition: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRoleDefinitionPhysicalRoleRefResponse{
		ID:                            request.ID,
		RoleDefinitionPhysicalRoleRef: request.GetRoleDefinitionPhysicalRoleRef(),
	}, nil
}

func (s *EventProducerService) CreateRoleDefinition(ctx context.Context, request *CreateRoleDefinitionRequest) (*CreateRoleDefinitionResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateRoleDefinitionRequest{
				CreateRoleDefinitionRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoleDefinition(ctx, request)
}
func (s *EventProducerService) UpdateRoleDefinition(ctx context.Context, request *UpdateRoleDefinitionRequest) (*UpdateRoleDefinitionResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateRoleDefinitionRequest{
				UpdateRoleDefinitionRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateRoleDefinition(ctx, request)
}
func (s *EventProducerService) DeleteRoleDefinition(ctx context.Context, request *DeleteRoleDefinitionRequest) (*DeleteRoleDefinitionResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteRoleDefinitionRequest{
				DeleteRoleDefinitionRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoleDefinition(ctx, request)
}

func (s *EventProducerService) CreateRoleDefinitionTagRef(ctx context.Context, request *CreateRoleDefinitionTagRefRequest) (*CreateRoleDefinitionTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRoleDefinitionTagRefRequest{
			CreateRoleDefinitionTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoleDefinitionTagRef(ctx, request)
}

func (s *EventProducerService) DeleteRoleDefinitionTagRef(ctx context.Context, request *DeleteRoleDefinitionTagRefRequest) (*DeleteRoleDefinitionTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRoleDefinitionTagRefRequest{
			DeleteRoleDefinitionTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoleDefinitionTagRef(ctx, request)
}

func (s *EventProducerService) CreateRoleDefinitionFeatureRef(ctx context.Context, request *CreateRoleDefinitionFeatureRefRequest) (*CreateRoleDefinitionFeatureRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRoleDefinitionFeatureRefRequest{
			CreateRoleDefinitionFeatureRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoleDefinitionFeatureRef(ctx, request)
}

func (s *EventProducerService) DeleteRoleDefinitionFeatureRef(ctx context.Context, request *DeleteRoleDefinitionFeatureRefRequest) (*DeleteRoleDefinitionFeatureRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRoleDefinitionFeatureRefRequest{
			DeleteRoleDefinitionFeatureRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoleDefinitionFeatureRef(ctx, request)
}

func (s *EventProducerService) CreateRoleDefinitionOverlayRoleRef(ctx context.Context, request *CreateRoleDefinitionOverlayRoleRefRequest) (*CreateRoleDefinitionOverlayRoleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRoleDefinitionOverlayRoleRefRequest{
			CreateRoleDefinitionOverlayRoleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoleDefinitionOverlayRoleRef(ctx, request)
}

func (s *EventProducerService) DeleteRoleDefinitionOverlayRoleRef(ctx context.Context, request *DeleteRoleDefinitionOverlayRoleRefRequest) (*DeleteRoleDefinitionOverlayRoleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRoleDefinitionOverlayRoleRefRequest{
			DeleteRoleDefinitionOverlayRoleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoleDefinitionOverlayRoleRef(ctx, request)
}

func (s *EventProducerService) CreateRoleDefinitionPhysicalRoleRef(ctx context.Context, request *CreateRoleDefinitionPhysicalRoleRefRequest) (*CreateRoleDefinitionPhysicalRoleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRoleDefinitionPhysicalRoleRefRequest{
			CreateRoleDefinitionPhysicalRoleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoleDefinitionPhysicalRoleRef(ctx, request)
}

func (s *EventProducerService) DeleteRoleDefinitionPhysicalRoleRef(ctx context.Context, request *DeleteRoleDefinitionPhysicalRoleRefRequest) (*DeleteRoleDefinitionPhysicalRoleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRoleDefinitionPhysicalRoleRefRequest{
			DeleteRoleDefinitionPhysicalRoleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoleDefinitionPhysicalRoleRef(ctx, request)
}

func (e *Event_CreateRoleDefinitionRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoleDefinitionRequest
	model := request.RoleDefinition
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetRoleDefinition(ctx,
			&GetRoleDefinitionRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateRoleDefinition(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateRoleDefinitionRequest{
			CreateRoleDefinitionRequest: &CreateRoleDefinitionRequest{
				RoleDefinition: response.GetRoleDefinition(),
			},
		},
	}, nil
}

func (e *Event_CreateRoleDefinitionRequest) ToUpdateEvent() *Event {
	request := e.CreateRoleDefinitionRequest
	model := request.RoleDefinition
	return &Event{
		Request: &Event_UpdateRoleDefinitionRequest{
			UpdateRoleDefinitionRequest: &UpdateRoleDefinitionRequest{
				RoleDefinition: model,
				FieldMask:      request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateRoleDefinitionRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateRoleDefinitionRequest
	response, err := service.UpdateRoleDefinition(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateRoleDefinitionRequest{
			UpdateRoleDefinitionRequest: &UpdateRoleDefinitionRequest{
				RoleDefinition: response.GetRoleDefinition(),
			},
		},
	}, nil
}

func (e *Event_UpdateRoleDefinitionRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteRoleDefinitionRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoleDefinitionRequest
	_, err := service.DeleteRoleDefinition(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteRoleDefinitionRequest{
			DeleteRoleDefinitionRequest: &DeleteRoleDefinitionRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateRoleDefinitionFeatureRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoleDefinitionFeatureRefRequest
	if _, err := service.CreateRoleDefinitionFeatureRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRoleDefinitionFeatureRefRequest{
		CreateRoleDefinitionFeatureRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRoleDefinitionFeatureRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoleDefinitionFeatureRefRequest
	if _, err := service.DeleteRoleDefinitionFeatureRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRoleDefinitionFeatureRefRequest{
		DeleteRoleDefinitionFeatureRefRequest: request,
	}}, nil
}

func (e *Event_CreateRoleDefinitionOverlayRoleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoleDefinitionOverlayRoleRefRequest
	if _, err := service.CreateRoleDefinitionOverlayRoleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRoleDefinitionOverlayRoleRefRequest{
		CreateRoleDefinitionOverlayRoleRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRoleDefinitionOverlayRoleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoleDefinitionOverlayRoleRefRequest
	if _, err := service.DeleteRoleDefinitionOverlayRoleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRoleDefinitionOverlayRoleRefRequest{
		DeleteRoleDefinitionOverlayRoleRefRequest: request,
	}}, nil
}

func (e *Event_CreateRoleDefinitionPhysicalRoleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoleDefinitionPhysicalRoleRefRequest
	if _, err := service.CreateRoleDefinitionPhysicalRoleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRoleDefinitionPhysicalRoleRefRequest{
		CreateRoleDefinitionPhysicalRoleRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRoleDefinitionPhysicalRoleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoleDefinitionPhysicalRoleRefRequest
	if _, err := service.DeleteRoleDefinitionPhysicalRoleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRoleDefinitionPhysicalRoleRefRequest{
		DeleteRoleDefinitionPhysicalRoleRefRequest: request,
	}}, nil
}

func (e *Event_CreateRoleDefinitionTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoleDefinitionTagRefRequest
	if _, err := service.CreateRoleDefinitionTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRoleDefinitionTagRefRequest{
		CreateRoleDefinitionTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRoleDefinitionTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoleDefinitionTagRefRequest
	if _, err := service.DeleteRoleDefinitionTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRoleDefinitionTagRefRequest{
		DeleteRoleDefinitionTagRefRequest: request,
	}}, nil
}

type RouteAggregate = models.RouteAggregate

func (s *BaseService) CreateRouteAggregate(ctx context.Context, request *CreateRouteAggregateRequest) (*CreateRouteAggregateResponse, error) {
	if s.next == nil {
		return &CreateRouteAggregateResponse{
			RouteAggregate: request.GetRouteAggregate(),
		}, nil
	}
	return s.Next().CreateRouteAggregate(ctx, request)
}
func (s *BaseService) UpdateRouteAggregate(ctx context.Context, request *UpdateRouteAggregateRequest) (*UpdateRouteAggregateResponse, error) {
	if s.next == nil {
		return &UpdateRouteAggregateResponse{
			RouteAggregate: request.GetRouteAggregate(),
		}, nil
	}
	return s.Next().UpdateRouteAggregate(ctx, request)
}
func (s *BaseService) DeleteRouteAggregate(ctx context.Context, request *DeleteRouteAggregateRequest) (*DeleteRouteAggregateResponse, error) {
	if s.next == nil {
		return &DeleteRouteAggregateResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteRouteAggregate(ctx, request)
}
func (s *BaseService) GetRouteAggregate(ctx context.Context, request *GetRouteAggregateRequest) (*GetRouteAggregateResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetRouteAggregate(ctx, request)
}
func (s *BaseService) ListRouteAggregate(ctx context.Context, request *ListRouteAggregateRequest) (*ListRouteAggregateResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListRouteAggregate(ctx, request)
}

func (s *BaseService) CreateRouteAggregateRoutingInstanceRef(ctx context.Context, request *CreateRouteAggregateRoutingInstanceRefRequest) (*CreateRouteAggregateRoutingInstanceRefResponse, error) {
	if s.next == nil {
		return &CreateRouteAggregateRoutingInstanceRefResponse{
			ID:                               request.ID,
			RouteAggregateRoutingInstanceRef: request.GetRouteAggregateRoutingInstanceRef(),
		}, nil
	}
	return s.Next().CreateRouteAggregateRoutingInstanceRef(ctx, request)
}

func (s *BaseService) DeleteRouteAggregateRoutingInstanceRef(ctx context.Context, request *DeleteRouteAggregateRoutingInstanceRefRequest) (*DeleteRouteAggregateRoutingInstanceRefResponse, error) {
	if s.next == nil {
		return &DeleteRouteAggregateRoutingInstanceRefResponse{
			ID:                               request.ID,
			RouteAggregateRoutingInstanceRef: request.GetRouteAggregateRoutingInstanceRef(),
		}, nil
	}
	return s.Next().DeleteRouteAggregateRoutingInstanceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRouteAggregateRoutingInstanceRef(ctx context.Context, request *CreateRouteAggregateRoutingInstanceRefRequest) (*CreateRouteAggregateRoutingInstanceRefResponse, error) {
	refField := models.RouteAggregateFieldRoutingInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRouteAggregate(ctx, &GetRouteAggregateRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RouteAggregate
		obj.AddRoutingInstanceRef(request.RouteAggregateRoutingInstanceRef)

		_, err = s.BaseService.UpdateRouteAggregate(ctx, &UpdateRouteAggregateRequest{
			RouteAggregate: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRouteAggregateRoutingInstanceRefResponse{
		ID:                               request.ID,
		RouteAggregateRoutingInstanceRef: request.GetRouteAggregateRoutingInstanceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRouteAggregateRoutingInstanceRef(ctx context.Context, request *DeleteRouteAggregateRoutingInstanceRefRequest) (*DeleteRouteAggregateRoutingInstanceRefResponse, error) {
	refField := models.RouteAggregateFieldRoutingInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRouteAggregate(ctx, &GetRouteAggregateRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RouteAggregate
		obj.RemoveRoutingInstanceRef(request.RouteAggregateRoutingInstanceRef)

		_, err = s.BaseService.UpdateRouteAggregate(ctx, &UpdateRouteAggregateRequest{
			RouteAggregate: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRouteAggregateRoutingInstanceRefResponse{
		ID:                               request.ID,
		RouteAggregateRoutingInstanceRef: request.GetRouteAggregateRoutingInstanceRef(),
	}, nil
}

func (s *BaseService) CreateRouteAggregateServiceInstanceRef(ctx context.Context, request *CreateRouteAggregateServiceInstanceRefRequest) (*CreateRouteAggregateServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &CreateRouteAggregateServiceInstanceRefResponse{
			ID:                               request.ID,
			RouteAggregateServiceInstanceRef: request.GetRouteAggregateServiceInstanceRef(),
		}, nil
	}
	return s.Next().CreateRouteAggregateServiceInstanceRef(ctx, request)
}

func (s *BaseService) DeleteRouteAggregateServiceInstanceRef(ctx context.Context, request *DeleteRouteAggregateServiceInstanceRefRequest) (*DeleteRouteAggregateServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &DeleteRouteAggregateServiceInstanceRefResponse{
			ID:                               request.ID,
			RouteAggregateServiceInstanceRef: request.GetRouteAggregateServiceInstanceRef(),
		}, nil
	}
	return s.Next().DeleteRouteAggregateServiceInstanceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRouteAggregateServiceInstanceRef(ctx context.Context, request *CreateRouteAggregateServiceInstanceRefRequest) (*CreateRouteAggregateServiceInstanceRefResponse, error) {
	refField := models.RouteAggregateFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRouteAggregate(ctx, &GetRouteAggregateRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RouteAggregate
		obj.AddServiceInstanceRef(request.RouteAggregateServiceInstanceRef)

		_, err = s.BaseService.UpdateRouteAggregate(ctx, &UpdateRouteAggregateRequest{
			RouteAggregate: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRouteAggregateServiceInstanceRefResponse{
		ID:                               request.ID,
		RouteAggregateServiceInstanceRef: request.GetRouteAggregateServiceInstanceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRouteAggregateServiceInstanceRef(ctx context.Context, request *DeleteRouteAggregateServiceInstanceRefRequest) (*DeleteRouteAggregateServiceInstanceRefResponse, error) {
	refField := models.RouteAggregateFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRouteAggregate(ctx, &GetRouteAggregateRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RouteAggregate
		obj.RemoveServiceInstanceRef(request.RouteAggregateServiceInstanceRef)

		_, err = s.BaseService.UpdateRouteAggregate(ctx, &UpdateRouteAggregateRequest{
			RouteAggregate: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRouteAggregateServiceInstanceRefResponse{
		ID:                               request.ID,
		RouteAggregateServiceInstanceRef: request.GetRouteAggregateServiceInstanceRef(),
	}, nil
}

func (s *BaseService) CreateRouteAggregateTagRef(ctx context.Context, request *CreateRouteAggregateTagRefRequest) (*CreateRouteAggregateTagRefResponse, error) {
	if s.next == nil {
		return &CreateRouteAggregateTagRefResponse{
			ID:                   request.ID,
			RouteAggregateTagRef: request.GetRouteAggregateTagRef(),
		}, nil
	}
	return s.Next().CreateRouteAggregateTagRef(ctx, request)
}

func (s *BaseService) DeleteRouteAggregateTagRef(ctx context.Context, request *DeleteRouteAggregateTagRefRequest) (*DeleteRouteAggregateTagRefResponse, error) {
	if s.next == nil {
		return &DeleteRouteAggregateTagRefResponse{
			ID:                   request.ID,
			RouteAggregateTagRef: request.GetRouteAggregateTagRef(),
		}, nil
	}
	return s.Next().DeleteRouteAggregateTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRouteAggregateTagRef(ctx context.Context, request *CreateRouteAggregateTagRefRequest) (*CreateRouteAggregateTagRefResponse, error) {
	refField := models.RouteAggregateFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRouteAggregate(ctx, &GetRouteAggregateRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RouteAggregate
		obj.AddTagRef(request.RouteAggregateTagRef)

		_, err = s.BaseService.UpdateRouteAggregate(ctx, &UpdateRouteAggregateRequest{
			RouteAggregate: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRouteAggregateTagRefResponse{
		ID:                   request.ID,
		RouteAggregateTagRef: request.GetRouteAggregateTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRouteAggregateTagRef(ctx context.Context, request *DeleteRouteAggregateTagRefRequest) (*DeleteRouteAggregateTagRefResponse, error) {
	refField := models.RouteAggregateFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRouteAggregate(ctx, &GetRouteAggregateRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RouteAggregate
		obj.RemoveTagRef(request.RouteAggregateTagRef)

		_, err = s.BaseService.UpdateRouteAggregate(ctx, &UpdateRouteAggregateRequest{
			RouteAggregate: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRouteAggregateTagRefResponse{
		ID:                   request.ID,
		RouteAggregateTagRef: request.GetRouteAggregateTagRef(),
	}, nil
}

func (s *EventProducerService) CreateRouteAggregate(ctx context.Context, request *CreateRouteAggregateRequest) (*CreateRouteAggregateResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateRouteAggregateRequest{
				CreateRouteAggregateRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRouteAggregate(ctx, request)
}
func (s *EventProducerService) UpdateRouteAggregate(ctx context.Context, request *UpdateRouteAggregateRequest) (*UpdateRouteAggregateResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateRouteAggregateRequest{
				UpdateRouteAggregateRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateRouteAggregate(ctx, request)
}
func (s *EventProducerService) DeleteRouteAggregate(ctx context.Context, request *DeleteRouteAggregateRequest) (*DeleteRouteAggregateResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteRouteAggregateRequest{
				DeleteRouteAggregateRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRouteAggregate(ctx, request)
}

func (s *EventProducerService) CreateRouteAggregateRoutingInstanceRef(ctx context.Context, request *CreateRouteAggregateRoutingInstanceRefRequest) (*CreateRouteAggregateRoutingInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRouteAggregateRoutingInstanceRefRequest{
			CreateRouteAggregateRoutingInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRouteAggregateRoutingInstanceRef(ctx, request)
}

func (s *EventProducerService) DeleteRouteAggregateRoutingInstanceRef(ctx context.Context, request *DeleteRouteAggregateRoutingInstanceRefRequest) (*DeleteRouteAggregateRoutingInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRouteAggregateRoutingInstanceRefRequest{
			DeleteRouteAggregateRoutingInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRouteAggregateRoutingInstanceRef(ctx, request)
}

func (s *EventProducerService) CreateRouteAggregateServiceInstanceRef(ctx context.Context, request *CreateRouteAggregateServiceInstanceRefRequest) (*CreateRouteAggregateServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRouteAggregateServiceInstanceRefRequest{
			CreateRouteAggregateServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRouteAggregateServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) DeleteRouteAggregateServiceInstanceRef(ctx context.Context, request *DeleteRouteAggregateServiceInstanceRefRequest) (*DeleteRouteAggregateServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRouteAggregateServiceInstanceRefRequest{
			DeleteRouteAggregateServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRouteAggregateServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) CreateRouteAggregateTagRef(ctx context.Context, request *CreateRouteAggregateTagRefRequest) (*CreateRouteAggregateTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRouteAggregateTagRefRequest{
			CreateRouteAggregateTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRouteAggregateTagRef(ctx, request)
}

func (s *EventProducerService) DeleteRouteAggregateTagRef(ctx context.Context, request *DeleteRouteAggregateTagRefRequest) (*DeleteRouteAggregateTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRouteAggregateTagRefRequest{
			DeleteRouteAggregateTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRouteAggregateTagRef(ctx, request)
}

func (e *Event_CreateRouteAggregateRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRouteAggregateRequest
	model := request.RouteAggregate
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetRouteAggregate(ctx,
			&GetRouteAggregateRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateRouteAggregate(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateRouteAggregateRequest{
			CreateRouteAggregateRequest: &CreateRouteAggregateRequest{
				RouteAggregate: response.GetRouteAggregate(),
			},
		},
	}, nil
}

func (e *Event_CreateRouteAggregateRequest) ToUpdateEvent() *Event {
	request := e.CreateRouteAggregateRequest
	model := request.RouteAggregate
	return &Event{
		Request: &Event_UpdateRouteAggregateRequest{
			UpdateRouteAggregateRequest: &UpdateRouteAggregateRequest{
				RouteAggregate: model,
				FieldMask:      request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateRouteAggregateRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateRouteAggregateRequest
	response, err := service.UpdateRouteAggregate(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateRouteAggregateRequest{
			UpdateRouteAggregateRequest: &UpdateRouteAggregateRequest{
				RouteAggregate: response.GetRouteAggregate(),
			},
		},
	}, nil
}

func (e *Event_UpdateRouteAggregateRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteRouteAggregateRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRouteAggregateRequest
	_, err := service.DeleteRouteAggregate(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteRouteAggregateRequest{
			DeleteRouteAggregateRequest: &DeleteRouteAggregateRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateRouteAggregateTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRouteAggregateTagRefRequest
	if _, err := service.CreateRouteAggregateTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRouteAggregateTagRefRequest{
		CreateRouteAggregateTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRouteAggregateTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRouteAggregateTagRefRequest
	if _, err := service.DeleteRouteAggregateTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRouteAggregateTagRefRequest{
		DeleteRouteAggregateTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateRouteAggregateRoutingInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRouteAggregateRoutingInstanceRefRequest
	if _, err := service.CreateRouteAggregateRoutingInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRouteAggregateRoutingInstanceRefRequest{
		CreateRouteAggregateRoutingInstanceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRouteAggregateRoutingInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRouteAggregateRoutingInstanceRefRequest
	if _, err := service.DeleteRouteAggregateRoutingInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRouteAggregateRoutingInstanceRefRequest{
		DeleteRouteAggregateRoutingInstanceRefRequest: request,
	}}, nil
}

func (e *Event_CreateRouteAggregateServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRouteAggregateServiceInstanceRefRequest
	if _, err := service.CreateRouteAggregateServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRouteAggregateServiceInstanceRefRequest{
		CreateRouteAggregateServiceInstanceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRouteAggregateServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRouteAggregateServiceInstanceRefRequest
	if _, err := service.DeleteRouteAggregateServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRouteAggregateServiceInstanceRefRequest{
		DeleteRouteAggregateServiceInstanceRefRequest: request,
	}}, nil
}

type RouteTable = models.RouteTable

func (s *BaseService) CreateRouteTable(ctx context.Context, request *CreateRouteTableRequest) (*CreateRouteTableResponse, error) {
	if s.next == nil {
		return &CreateRouteTableResponse{
			RouteTable: request.GetRouteTable(),
		}, nil
	}
	return s.Next().CreateRouteTable(ctx, request)
}
func (s *BaseService) UpdateRouteTable(ctx context.Context, request *UpdateRouteTableRequest) (*UpdateRouteTableResponse, error) {
	if s.next == nil {
		return &UpdateRouteTableResponse{
			RouteTable: request.GetRouteTable(),
		}, nil
	}
	return s.Next().UpdateRouteTable(ctx, request)
}
func (s *BaseService) DeleteRouteTable(ctx context.Context, request *DeleteRouteTableRequest) (*DeleteRouteTableResponse, error) {
	if s.next == nil {
		return &DeleteRouteTableResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteRouteTable(ctx, request)
}
func (s *BaseService) GetRouteTable(ctx context.Context, request *GetRouteTableRequest) (*GetRouteTableResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetRouteTable(ctx, request)
}
func (s *BaseService) ListRouteTable(ctx context.Context, request *ListRouteTableRequest) (*ListRouteTableResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListRouteTable(ctx, request)
}

func (s *BaseService) CreateRouteTableTagRef(ctx context.Context, request *CreateRouteTableTagRefRequest) (*CreateRouteTableTagRefResponse, error) {
	if s.next == nil {
		return &CreateRouteTableTagRefResponse{
			ID:               request.ID,
			RouteTableTagRef: request.GetRouteTableTagRef(),
		}, nil
	}
	return s.Next().CreateRouteTableTagRef(ctx, request)
}

func (s *BaseService) DeleteRouteTableTagRef(ctx context.Context, request *DeleteRouteTableTagRefRequest) (*DeleteRouteTableTagRefResponse, error) {
	if s.next == nil {
		return &DeleteRouteTableTagRefResponse{
			ID:               request.ID,
			RouteTableTagRef: request.GetRouteTableTagRef(),
		}, nil
	}
	return s.Next().DeleteRouteTableTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRouteTableTagRef(ctx context.Context, request *CreateRouteTableTagRefRequest) (*CreateRouteTableTagRefResponse, error) {
	refField := models.RouteTableFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRouteTable(ctx, &GetRouteTableRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RouteTable
		obj.AddTagRef(request.RouteTableTagRef)

		_, err = s.BaseService.UpdateRouteTable(ctx, &UpdateRouteTableRequest{
			RouteTable: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRouteTableTagRefResponse{
		ID:               request.ID,
		RouteTableTagRef: request.GetRouteTableTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRouteTableTagRef(ctx context.Context, request *DeleteRouteTableTagRefRequest) (*DeleteRouteTableTagRefResponse, error) {
	refField := models.RouteTableFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRouteTable(ctx, &GetRouteTableRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RouteTable
		obj.RemoveTagRef(request.RouteTableTagRef)

		_, err = s.BaseService.UpdateRouteTable(ctx, &UpdateRouteTableRequest{
			RouteTable: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRouteTableTagRefResponse{
		ID:               request.ID,
		RouteTableTagRef: request.GetRouteTableTagRef(),
	}, nil
}

func (s *EventProducerService) CreateRouteTable(ctx context.Context, request *CreateRouteTableRequest) (*CreateRouteTableResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateRouteTableRequest{
				CreateRouteTableRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRouteTable(ctx, request)
}
func (s *EventProducerService) UpdateRouteTable(ctx context.Context, request *UpdateRouteTableRequest) (*UpdateRouteTableResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateRouteTableRequest{
				UpdateRouteTableRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateRouteTable(ctx, request)
}
func (s *EventProducerService) DeleteRouteTable(ctx context.Context, request *DeleteRouteTableRequest) (*DeleteRouteTableResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteRouteTableRequest{
				DeleteRouteTableRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRouteTable(ctx, request)
}

func (s *EventProducerService) CreateRouteTableTagRef(ctx context.Context, request *CreateRouteTableTagRefRequest) (*CreateRouteTableTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRouteTableTagRefRequest{
			CreateRouteTableTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRouteTableTagRef(ctx, request)
}

func (s *EventProducerService) DeleteRouteTableTagRef(ctx context.Context, request *DeleteRouteTableTagRefRequest) (*DeleteRouteTableTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRouteTableTagRefRequest{
			DeleteRouteTableTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRouteTableTagRef(ctx, request)
}

func (e *Event_CreateRouteTableRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRouteTableRequest
	model := request.RouteTable
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetRouteTable(ctx,
			&GetRouteTableRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateRouteTable(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateRouteTableRequest{
			CreateRouteTableRequest: &CreateRouteTableRequest{
				RouteTable: response.GetRouteTable(),
			},
		},
	}, nil
}

func (e *Event_CreateRouteTableRequest) ToUpdateEvent() *Event {
	request := e.CreateRouteTableRequest
	model := request.RouteTable
	return &Event{
		Request: &Event_UpdateRouteTableRequest{
			UpdateRouteTableRequest: &UpdateRouteTableRequest{
				RouteTable: model,
				FieldMask:  request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateRouteTableRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateRouteTableRequest
	response, err := service.UpdateRouteTable(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateRouteTableRequest{
			UpdateRouteTableRequest: &UpdateRouteTableRequest{
				RouteTable: response.GetRouteTable(),
			},
		},
	}, nil
}

func (e *Event_UpdateRouteTableRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteRouteTableRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRouteTableRequest
	_, err := service.DeleteRouteTable(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteRouteTableRequest{
			DeleteRouteTableRequest: &DeleteRouteTableRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateRouteTableTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRouteTableTagRefRequest
	if _, err := service.CreateRouteTableTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRouteTableTagRefRequest{
		CreateRouteTableTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRouteTableTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRouteTableTagRefRequest
	if _, err := service.DeleteRouteTableTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRouteTableTagRefRequest{
		DeleteRouteTableTagRefRequest: request,
	}}, nil
}

type RouteTarget = models.RouteTarget

func (s *BaseService) CreateRouteTarget(ctx context.Context, request *CreateRouteTargetRequest) (*CreateRouteTargetResponse, error) {
	if s.next == nil {
		return &CreateRouteTargetResponse{
			RouteTarget: request.GetRouteTarget(),
		}, nil
	}
	return s.Next().CreateRouteTarget(ctx, request)
}
func (s *BaseService) UpdateRouteTarget(ctx context.Context, request *UpdateRouteTargetRequest) (*UpdateRouteTargetResponse, error) {
	if s.next == nil {
		return &UpdateRouteTargetResponse{
			RouteTarget: request.GetRouteTarget(),
		}, nil
	}
	return s.Next().UpdateRouteTarget(ctx, request)
}
func (s *BaseService) DeleteRouteTarget(ctx context.Context, request *DeleteRouteTargetRequest) (*DeleteRouteTargetResponse, error) {
	if s.next == nil {
		return &DeleteRouteTargetResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteRouteTarget(ctx, request)
}
func (s *BaseService) GetRouteTarget(ctx context.Context, request *GetRouteTargetRequest) (*GetRouteTargetResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetRouteTarget(ctx, request)
}
func (s *BaseService) ListRouteTarget(ctx context.Context, request *ListRouteTargetRequest) (*ListRouteTargetResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListRouteTarget(ctx, request)
}

func (s *BaseService) CreateRouteTargetTagRef(ctx context.Context, request *CreateRouteTargetTagRefRequest) (*CreateRouteTargetTagRefResponse, error) {
	if s.next == nil {
		return &CreateRouteTargetTagRefResponse{
			ID:                request.ID,
			RouteTargetTagRef: request.GetRouteTargetTagRef(),
		}, nil
	}
	return s.Next().CreateRouteTargetTagRef(ctx, request)
}

func (s *BaseService) DeleteRouteTargetTagRef(ctx context.Context, request *DeleteRouteTargetTagRefRequest) (*DeleteRouteTargetTagRefResponse, error) {
	if s.next == nil {
		return &DeleteRouteTargetTagRefResponse{
			ID:                request.ID,
			RouteTargetTagRef: request.GetRouteTargetTagRef(),
		}, nil
	}
	return s.Next().DeleteRouteTargetTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRouteTargetTagRef(ctx context.Context, request *CreateRouteTargetTagRefRequest) (*CreateRouteTargetTagRefResponse, error) {
	refField := models.RouteTargetFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRouteTarget(ctx, &GetRouteTargetRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RouteTarget
		obj.AddTagRef(request.RouteTargetTagRef)

		_, err = s.BaseService.UpdateRouteTarget(ctx, &UpdateRouteTargetRequest{
			RouteTarget: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRouteTargetTagRefResponse{
		ID:                request.ID,
		RouteTargetTagRef: request.GetRouteTargetTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRouteTargetTagRef(ctx context.Context, request *DeleteRouteTargetTagRefRequest) (*DeleteRouteTargetTagRefResponse, error) {
	refField := models.RouteTargetFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRouteTarget(ctx, &GetRouteTargetRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RouteTarget
		obj.RemoveTagRef(request.RouteTargetTagRef)

		_, err = s.BaseService.UpdateRouteTarget(ctx, &UpdateRouteTargetRequest{
			RouteTarget: obj,
			FieldMask:   types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRouteTargetTagRefResponse{
		ID:                request.ID,
		RouteTargetTagRef: request.GetRouteTargetTagRef(),
	}, nil
}

func (s *EventProducerService) CreateRouteTarget(ctx context.Context, request *CreateRouteTargetRequest) (*CreateRouteTargetResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateRouteTargetRequest{
				CreateRouteTargetRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRouteTarget(ctx, request)
}
func (s *EventProducerService) UpdateRouteTarget(ctx context.Context, request *UpdateRouteTargetRequest) (*UpdateRouteTargetResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateRouteTargetRequest{
				UpdateRouteTargetRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateRouteTarget(ctx, request)
}
func (s *EventProducerService) DeleteRouteTarget(ctx context.Context, request *DeleteRouteTargetRequest) (*DeleteRouteTargetResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteRouteTargetRequest{
				DeleteRouteTargetRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRouteTarget(ctx, request)
}

func (s *EventProducerService) CreateRouteTargetTagRef(ctx context.Context, request *CreateRouteTargetTagRefRequest) (*CreateRouteTargetTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRouteTargetTagRefRequest{
			CreateRouteTargetTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRouteTargetTagRef(ctx, request)
}

func (s *EventProducerService) DeleteRouteTargetTagRef(ctx context.Context, request *DeleteRouteTargetTagRefRequest) (*DeleteRouteTargetTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRouteTargetTagRefRequest{
			DeleteRouteTargetTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRouteTargetTagRef(ctx, request)
}

func (e *Event_CreateRouteTargetRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRouteTargetRequest
	model := request.RouteTarget
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetRouteTarget(ctx,
			&GetRouteTargetRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateRouteTarget(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateRouteTargetRequest{
			CreateRouteTargetRequest: &CreateRouteTargetRequest{
				RouteTarget: response.GetRouteTarget(),
			},
		},
	}, nil
}

func (e *Event_CreateRouteTargetRequest) ToUpdateEvent() *Event {
	request := e.CreateRouteTargetRequest
	model := request.RouteTarget
	return &Event{
		Request: &Event_UpdateRouteTargetRequest{
			UpdateRouteTargetRequest: &UpdateRouteTargetRequest{
				RouteTarget: model,
				FieldMask:   request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateRouteTargetRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateRouteTargetRequest
	response, err := service.UpdateRouteTarget(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateRouteTargetRequest{
			UpdateRouteTargetRequest: &UpdateRouteTargetRequest{
				RouteTarget: response.GetRouteTarget(),
			},
		},
	}, nil
}

func (e *Event_UpdateRouteTargetRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteRouteTargetRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRouteTargetRequest
	_, err := service.DeleteRouteTarget(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteRouteTargetRequest{
			DeleteRouteTargetRequest: &DeleteRouteTargetRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateRouteTargetTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRouteTargetTagRefRequest
	if _, err := service.CreateRouteTargetTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRouteTargetTagRefRequest{
		CreateRouteTargetTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRouteTargetTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRouteTargetTagRefRequest
	if _, err := service.DeleteRouteTargetTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRouteTargetTagRefRequest{
		DeleteRouteTargetTagRefRequest: request,
	}}, nil
}

type RoutingInstance = models.RoutingInstance

func (s *BaseService) CreateRoutingInstance(ctx context.Context, request *CreateRoutingInstanceRequest) (*CreateRoutingInstanceResponse, error) {
	if s.next == nil {
		return &CreateRoutingInstanceResponse{
			RoutingInstance: request.GetRoutingInstance(),
		}, nil
	}
	return s.Next().CreateRoutingInstance(ctx, request)
}
func (s *BaseService) UpdateRoutingInstance(ctx context.Context, request *UpdateRoutingInstanceRequest) (*UpdateRoutingInstanceResponse, error) {
	if s.next == nil {
		return &UpdateRoutingInstanceResponse{
			RoutingInstance: request.GetRoutingInstance(),
		}, nil
	}
	return s.Next().UpdateRoutingInstance(ctx, request)
}
func (s *BaseService) DeleteRoutingInstance(ctx context.Context, request *DeleteRoutingInstanceRequest) (*DeleteRoutingInstanceResponse, error) {
	if s.next == nil {
		return &DeleteRoutingInstanceResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteRoutingInstance(ctx, request)
}
func (s *BaseService) GetRoutingInstance(ctx context.Context, request *GetRoutingInstanceRequest) (*GetRoutingInstanceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetRoutingInstance(ctx, request)
}
func (s *BaseService) ListRoutingInstance(ctx context.Context, request *ListRoutingInstanceRequest) (*ListRoutingInstanceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListRoutingInstance(ctx, request)
}

func (s *BaseService) CreateRoutingInstanceRouteTargetRef(ctx context.Context, request *CreateRoutingInstanceRouteTargetRefRequest) (*CreateRoutingInstanceRouteTargetRefResponse, error) {
	if s.next == nil {
		return &CreateRoutingInstanceRouteTargetRefResponse{
			ID:                            request.ID,
			RoutingInstanceRouteTargetRef: request.GetRoutingInstanceRouteTargetRef(),
		}, nil
	}
	return s.Next().CreateRoutingInstanceRouteTargetRef(ctx, request)
}

func (s *BaseService) DeleteRoutingInstanceRouteTargetRef(ctx context.Context, request *DeleteRoutingInstanceRouteTargetRefRequest) (*DeleteRoutingInstanceRouteTargetRefResponse, error) {
	if s.next == nil {
		return &DeleteRoutingInstanceRouteTargetRefResponse{
			ID:                            request.ID,
			RoutingInstanceRouteTargetRef: request.GetRoutingInstanceRouteTargetRef(),
		}, nil
	}
	return s.Next().DeleteRoutingInstanceRouteTargetRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRoutingInstanceRouteTargetRef(ctx context.Context, request *CreateRoutingInstanceRouteTargetRefRequest) (*CreateRoutingInstanceRouteTargetRefResponse, error) {
	refField := models.RoutingInstanceFieldRouteTargetRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoutingInstance(ctx, &GetRoutingInstanceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoutingInstance
		obj.AddRouteTargetRef(request.RoutingInstanceRouteTargetRef)

		_, err = s.BaseService.UpdateRoutingInstance(ctx, &UpdateRoutingInstanceRequest{
			RoutingInstance: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRoutingInstanceRouteTargetRefResponse{
		ID:                            request.ID,
		RoutingInstanceRouteTargetRef: request.GetRoutingInstanceRouteTargetRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRoutingInstanceRouteTargetRef(ctx context.Context, request *DeleteRoutingInstanceRouteTargetRefRequest) (*DeleteRoutingInstanceRouteTargetRefResponse, error) {
	refField := models.RoutingInstanceFieldRouteTargetRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoutingInstance(ctx, &GetRoutingInstanceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoutingInstance
		obj.RemoveRouteTargetRef(request.RoutingInstanceRouteTargetRef)

		_, err = s.BaseService.UpdateRoutingInstance(ctx, &UpdateRoutingInstanceRequest{
			RoutingInstance: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRoutingInstanceRouteTargetRefResponse{
		ID:                            request.ID,
		RoutingInstanceRouteTargetRef: request.GetRoutingInstanceRouteTargetRef(),
	}, nil
}

func (s *BaseService) CreateRoutingInstanceRoutingInstanceRef(ctx context.Context, request *CreateRoutingInstanceRoutingInstanceRefRequest) (*CreateRoutingInstanceRoutingInstanceRefResponse, error) {
	if s.next == nil {
		return &CreateRoutingInstanceRoutingInstanceRefResponse{
			ID:                                request.ID,
			RoutingInstanceRoutingInstanceRef: request.GetRoutingInstanceRoutingInstanceRef(),
		}, nil
	}
	return s.Next().CreateRoutingInstanceRoutingInstanceRef(ctx, request)
}

func (s *BaseService) DeleteRoutingInstanceRoutingInstanceRef(ctx context.Context, request *DeleteRoutingInstanceRoutingInstanceRefRequest) (*DeleteRoutingInstanceRoutingInstanceRefResponse, error) {
	if s.next == nil {
		return &DeleteRoutingInstanceRoutingInstanceRefResponse{
			ID:                                request.ID,
			RoutingInstanceRoutingInstanceRef: request.GetRoutingInstanceRoutingInstanceRef(),
		}, nil
	}
	return s.Next().DeleteRoutingInstanceRoutingInstanceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRoutingInstanceRoutingInstanceRef(ctx context.Context, request *CreateRoutingInstanceRoutingInstanceRefRequest) (*CreateRoutingInstanceRoutingInstanceRefResponse, error) {
	refField := models.RoutingInstanceFieldRoutingInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoutingInstance(ctx, &GetRoutingInstanceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoutingInstance
		obj.AddRoutingInstanceRef(request.RoutingInstanceRoutingInstanceRef)

		_, err = s.BaseService.UpdateRoutingInstance(ctx, &UpdateRoutingInstanceRequest{
			RoutingInstance: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRoutingInstanceRoutingInstanceRefResponse{
		ID:                                request.ID,
		RoutingInstanceRoutingInstanceRef: request.GetRoutingInstanceRoutingInstanceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRoutingInstanceRoutingInstanceRef(ctx context.Context, request *DeleteRoutingInstanceRoutingInstanceRefRequest) (*DeleteRoutingInstanceRoutingInstanceRefResponse, error) {
	refField := models.RoutingInstanceFieldRoutingInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoutingInstance(ctx, &GetRoutingInstanceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoutingInstance
		obj.RemoveRoutingInstanceRef(request.RoutingInstanceRoutingInstanceRef)

		_, err = s.BaseService.UpdateRoutingInstance(ctx, &UpdateRoutingInstanceRequest{
			RoutingInstance: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRoutingInstanceRoutingInstanceRefResponse{
		ID:                                request.ID,
		RoutingInstanceRoutingInstanceRef: request.GetRoutingInstanceRoutingInstanceRef(),
	}, nil
}

func (s *BaseService) CreateRoutingInstanceTagRef(ctx context.Context, request *CreateRoutingInstanceTagRefRequest) (*CreateRoutingInstanceTagRefResponse, error) {
	if s.next == nil {
		return &CreateRoutingInstanceTagRefResponse{
			ID:                    request.ID,
			RoutingInstanceTagRef: request.GetRoutingInstanceTagRef(),
		}, nil
	}
	return s.Next().CreateRoutingInstanceTagRef(ctx, request)
}

func (s *BaseService) DeleteRoutingInstanceTagRef(ctx context.Context, request *DeleteRoutingInstanceTagRefRequest) (*DeleteRoutingInstanceTagRefResponse, error) {
	if s.next == nil {
		return &DeleteRoutingInstanceTagRefResponse{
			ID:                    request.ID,
			RoutingInstanceTagRef: request.GetRoutingInstanceTagRef(),
		}, nil
	}
	return s.Next().DeleteRoutingInstanceTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRoutingInstanceTagRef(ctx context.Context, request *CreateRoutingInstanceTagRefRequest) (*CreateRoutingInstanceTagRefResponse, error) {
	refField := models.RoutingInstanceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoutingInstance(ctx, &GetRoutingInstanceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoutingInstance
		obj.AddTagRef(request.RoutingInstanceTagRef)

		_, err = s.BaseService.UpdateRoutingInstance(ctx, &UpdateRoutingInstanceRequest{
			RoutingInstance: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRoutingInstanceTagRefResponse{
		ID:                    request.ID,
		RoutingInstanceTagRef: request.GetRoutingInstanceTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRoutingInstanceTagRef(ctx context.Context, request *DeleteRoutingInstanceTagRefRequest) (*DeleteRoutingInstanceTagRefResponse, error) {
	refField := models.RoutingInstanceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoutingInstance(ctx, &GetRoutingInstanceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoutingInstance
		obj.RemoveTagRef(request.RoutingInstanceTagRef)

		_, err = s.BaseService.UpdateRoutingInstance(ctx, &UpdateRoutingInstanceRequest{
			RoutingInstance: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRoutingInstanceTagRefResponse{
		ID:                    request.ID,
		RoutingInstanceTagRef: request.GetRoutingInstanceTagRef(),
	}, nil
}

func (s *EventProducerService) CreateRoutingInstance(ctx context.Context, request *CreateRoutingInstanceRequest) (*CreateRoutingInstanceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateRoutingInstanceRequest{
				CreateRoutingInstanceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoutingInstance(ctx, request)
}
func (s *EventProducerService) UpdateRoutingInstance(ctx context.Context, request *UpdateRoutingInstanceRequest) (*UpdateRoutingInstanceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateRoutingInstanceRequest{
				UpdateRoutingInstanceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateRoutingInstance(ctx, request)
}
func (s *EventProducerService) DeleteRoutingInstance(ctx context.Context, request *DeleteRoutingInstanceRequest) (*DeleteRoutingInstanceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteRoutingInstanceRequest{
				DeleteRoutingInstanceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoutingInstance(ctx, request)
}

func (s *EventProducerService) CreateRoutingInstanceRouteTargetRef(ctx context.Context, request *CreateRoutingInstanceRouteTargetRefRequest) (*CreateRoutingInstanceRouteTargetRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRoutingInstanceRouteTargetRefRequest{
			CreateRoutingInstanceRouteTargetRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoutingInstanceRouteTargetRef(ctx, request)
}

func (s *EventProducerService) DeleteRoutingInstanceRouteTargetRef(ctx context.Context, request *DeleteRoutingInstanceRouteTargetRefRequest) (*DeleteRoutingInstanceRouteTargetRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRoutingInstanceRouteTargetRefRequest{
			DeleteRoutingInstanceRouteTargetRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoutingInstanceRouteTargetRef(ctx, request)
}

func (s *EventProducerService) CreateRoutingInstanceRoutingInstanceRef(ctx context.Context, request *CreateRoutingInstanceRoutingInstanceRefRequest) (*CreateRoutingInstanceRoutingInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRoutingInstanceRoutingInstanceRefRequest{
			CreateRoutingInstanceRoutingInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoutingInstanceRoutingInstanceRef(ctx, request)
}

func (s *EventProducerService) DeleteRoutingInstanceRoutingInstanceRef(ctx context.Context, request *DeleteRoutingInstanceRoutingInstanceRefRequest) (*DeleteRoutingInstanceRoutingInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRoutingInstanceRoutingInstanceRefRequest{
			DeleteRoutingInstanceRoutingInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoutingInstanceRoutingInstanceRef(ctx, request)
}

func (s *EventProducerService) CreateRoutingInstanceTagRef(ctx context.Context, request *CreateRoutingInstanceTagRefRequest) (*CreateRoutingInstanceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRoutingInstanceTagRefRequest{
			CreateRoutingInstanceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoutingInstanceTagRef(ctx, request)
}

func (s *EventProducerService) DeleteRoutingInstanceTagRef(ctx context.Context, request *DeleteRoutingInstanceTagRefRequest) (*DeleteRoutingInstanceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRoutingInstanceTagRefRequest{
			DeleteRoutingInstanceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoutingInstanceTagRef(ctx, request)
}

func (e *Event_CreateRoutingInstanceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoutingInstanceRequest
	model := request.RoutingInstance
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetRoutingInstance(ctx,
			&GetRoutingInstanceRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateRoutingInstance(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateRoutingInstanceRequest{
			CreateRoutingInstanceRequest: &CreateRoutingInstanceRequest{
				RoutingInstance: response.GetRoutingInstance(),
			},
		},
	}, nil
}

func (e *Event_CreateRoutingInstanceRequest) ToUpdateEvent() *Event {
	request := e.CreateRoutingInstanceRequest
	model := request.RoutingInstance
	return &Event{
		Request: &Event_UpdateRoutingInstanceRequest{
			UpdateRoutingInstanceRequest: &UpdateRoutingInstanceRequest{
				RoutingInstance: model,
				FieldMask:       request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateRoutingInstanceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateRoutingInstanceRequest
	response, err := service.UpdateRoutingInstance(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateRoutingInstanceRequest{
			UpdateRoutingInstanceRequest: &UpdateRoutingInstanceRequest{
				RoutingInstance: response.GetRoutingInstance(),
			},
		},
	}, nil
}

func (e *Event_UpdateRoutingInstanceRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteRoutingInstanceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoutingInstanceRequest
	_, err := service.DeleteRoutingInstance(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteRoutingInstanceRequest{
			DeleteRoutingInstanceRequest: &DeleteRoutingInstanceRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateRoutingInstanceRouteTargetRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoutingInstanceRouteTargetRefRequest
	if _, err := service.CreateRoutingInstanceRouteTargetRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRoutingInstanceRouteTargetRefRequest{
		CreateRoutingInstanceRouteTargetRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRoutingInstanceRouteTargetRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoutingInstanceRouteTargetRefRequest
	if _, err := service.DeleteRoutingInstanceRouteTargetRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRoutingInstanceRouteTargetRefRequest{
		DeleteRoutingInstanceRouteTargetRefRequest: request,
	}}, nil
}

func (e *Event_CreateRoutingInstanceRoutingInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoutingInstanceRoutingInstanceRefRequest
	if _, err := service.CreateRoutingInstanceRoutingInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRoutingInstanceRoutingInstanceRefRequest{
		CreateRoutingInstanceRoutingInstanceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRoutingInstanceRoutingInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoutingInstanceRoutingInstanceRefRequest
	if _, err := service.DeleteRoutingInstanceRoutingInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRoutingInstanceRoutingInstanceRefRequest{
		DeleteRoutingInstanceRoutingInstanceRefRequest: request,
	}}, nil
}

func (e *Event_CreateRoutingInstanceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoutingInstanceTagRefRequest
	if _, err := service.CreateRoutingInstanceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRoutingInstanceTagRefRequest{
		CreateRoutingInstanceTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRoutingInstanceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoutingInstanceTagRefRequest
	if _, err := service.DeleteRoutingInstanceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRoutingInstanceTagRefRequest{
		DeleteRoutingInstanceTagRefRequest: request,
	}}, nil
}

type RoutingPolicy = models.RoutingPolicy

func (s *BaseService) CreateRoutingPolicy(ctx context.Context, request *CreateRoutingPolicyRequest) (*CreateRoutingPolicyResponse, error) {
	if s.next == nil {
		return &CreateRoutingPolicyResponse{
			RoutingPolicy: request.GetRoutingPolicy(),
		}, nil
	}
	return s.Next().CreateRoutingPolicy(ctx, request)
}
func (s *BaseService) UpdateRoutingPolicy(ctx context.Context, request *UpdateRoutingPolicyRequest) (*UpdateRoutingPolicyResponse, error) {
	if s.next == nil {
		return &UpdateRoutingPolicyResponse{
			RoutingPolicy: request.GetRoutingPolicy(),
		}, nil
	}
	return s.Next().UpdateRoutingPolicy(ctx, request)
}
func (s *BaseService) DeleteRoutingPolicy(ctx context.Context, request *DeleteRoutingPolicyRequest) (*DeleteRoutingPolicyResponse, error) {
	if s.next == nil {
		return &DeleteRoutingPolicyResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteRoutingPolicy(ctx, request)
}
func (s *BaseService) GetRoutingPolicy(ctx context.Context, request *GetRoutingPolicyRequest) (*GetRoutingPolicyResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetRoutingPolicy(ctx, request)
}
func (s *BaseService) ListRoutingPolicy(ctx context.Context, request *ListRoutingPolicyRequest) (*ListRoutingPolicyResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListRoutingPolicy(ctx, request)
}

func (s *BaseService) CreateRoutingPolicyServiceInstanceRef(ctx context.Context, request *CreateRoutingPolicyServiceInstanceRefRequest) (*CreateRoutingPolicyServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &CreateRoutingPolicyServiceInstanceRefResponse{
			ID:                              request.ID,
			RoutingPolicyServiceInstanceRef: request.GetRoutingPolicyServiceInstanceRef(),
		}, nil
	}
	return s.Next().CreateRoutingPolicyServiceInstanceRef(ctx, request)
}

func (s *BaseService) DeleteRoutingPolicyServiceInstanceRef(ctx context.Context, request *DeleteRoutingPolicyServiceInstanceRefRequest) (*DeleteRoutingPolicyServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &DeleteRoutingPolicyServiceInstanceRefResponse{
			ID:                              request.ID,
			RoutingPolicyServiceInstanceRef: request.GetRoutingPolicyServiceInstanceRef(),
		}, nil
	}
	return s.Next().DeleteRoutingPolicyServiceInstanceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRoutingPolicyServiceInstanceRef(ctx context.Context, request *CreateRoutingPolicyServiceInstanceRefRequest) (*CreateRoutingPolicyServiceInstanceRefResponse, error) {
	refField := models.RoutingPolicyFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoutingPolicy(ctx, &GetRoutingPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoutingPolicy
		obj.AddServiceInstanceRef(request.RoutingPolicyServiceInstanceRef)

		_, err = s.BaseService.UpdateRoutingPolicy(ctx, &UpdateRoutingPolicyRequest{
			RoutingPolicy: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRoutingPolicyServiceInstanceRefResponse{
		ID:                              request.ID,
		RoutingPolicyServiceInstanceRef: request.GetRoutingPolicyServiceInstanceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRoutingPolicyServiceInstanceRef(ctx context.Context, request *DeleteRoutingPolicyServiceInstanceRefRequest) (*DeleteRoutingPolicyServiceInstanceRefResponse, error) {
	refField := models.RoutingPolicyFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoutingPolicy(ctx, &GetRoutingPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoutingPolicy
		obj.RemoveServiceInstanceRef(request.RoutingPolicyServiceInstanceRef)

		_, err = s.BaseService.UpdateRoutingPolicy(ctx, &UpdateRoutingPolicyRequest{
			RoutingPolicy: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRoutingPolicyServiceInstanceRefResponse{
		ID:                              request.ID,
		RoutingPolicyServiceInstanceRef: request.GetRoutingPolicyServiceInstanceRef(),
	}, nil
}

func (s *BaseService) CreateRoutingPolicyTagRef(ctx context.Context, request *CreateRoutingPolicyTagRefRequest) (*CreateRoutingPolicyTagRefResponse, error) {
	if s.next == nil {
		return &CreateRoutingPolicyTagRefResponse{
			ID:                  request.ID,
			RoutingPolicyTagRef: request.GetRoutingPolicyTagRef(),
		}, nil
	}
	return s.Next().CreateRoutingPolicyTagRef(ctx, request)
}

func (s *BaseService) DeleteRoutingPolicyTagRef(ctx context.Context, request *DeleteRoutingPolicyTagRefRequest) (*DeleteRoutingPolicyTagRefResponse, error) {
	if s.next == nil {
		return &DeleteRoutingPolicyTagRefResponse{
			ID:                  request.ID,
			RoutingPolicyTagRef: request.GetRoutingPolicyTagRef(),
		}, nil
	}
	return s.Next().DeleteRoutingPolicyTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRoutingPolicyTagRef(ctx context.Context, request *CreateRoutingPolicyTagRefRequest) (*CreateRoutingPolicyTagRefResponse, error) {
	refField := models.RoutingPolicyFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoutingPolicy(ctx, &GetRoutingPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoutingPolicy
		obj.AddTagRef(request.RoutingPolicyTagRef)

		_, err = s.BaseService.UpdateRoutingPolicy(ctx, &UpdateRoutingPolicyRequest{
			RoutingPolicy: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRoutingPolicyTagRefResponse{
		ID:                  request.ID,
		RoutingPolicyTagRef: request.GetRoutingPolicyTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRoutingPolicyTagRef(ctx context.Context, request *DeleteRoutingPolicyTagRefRequest) (*DeleteRoutingPolicyTagRefResponse, error) {
	refField := models.RoutingPolicyFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoutingPolicy(ctx, &GetRoutingPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoutingPolicy
		obj.RemoveTagRef(request.RoutingPolicyTagRef)

		_, err = s.BaseService.UpdateRoutingPolicy(ctx, &UpdateRoutingPolicyRequest{
			RoutingPolicy: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRoutingPolicyTagRefResponse{
		ID:                  request.ID,
		RoutingPolicyTagRef: request.GetRoutingPolicyTagRef(),
	}, nil
}

func (s *BaseService) CreateRoutingPolicyRoutingInstanceRef(ctx context.Context, request *CreateRoutingPolicyRoutingInstanceRefRequest) (*CreateRoutingPolicyRoutingInstanceRefResponse, error) {
	if s.next == nil {
		return &CreateRoutingPolicyRoutingInstanceRefResponse{
			ID:                              request.ID,
			RoutingPolicyRoutingInstanceRef: request.GetRoutingPolicyRoutingInstanceRef(),
		}, nil
	}
	return s.Next().CreateRoutingPolicyRoutingInstanceRef(ctx, request)
}

func (s *BaseService) DeleteRoutingPolicyRoutingInstanceRef(ctx context.Context, request *DeleteRoutingPolicyRoutingInstanceRefRequest) (*DeleteRoutingPolicyRoutingInstanceRefResponse, error) {
	if s.next == nil {
		return &DeleteRoutingPolicyRoutingInstanceRefResponse{
			ID:                              request.ID,
			RoutingPolicyRoutingInstanceRef: request.GetRoutingPolicyRoutingInstanceRef(),
		}, nil
	}
	return s.Next().DeleteRoutingPolicyRoutingInstanceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateRoutingPolicyRoutingInstanceRef(ctx context.Context, request *CreateRoutingPolicyRoutingInstanceRefRequest) (*CreateRoutingPolicyRoutingInstanceRefResponse, error) {
	refField := models.RoutingPolicyFieldRoutingInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoutingPolicy(ctx, &GetRoutingPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoutingPolicy
		obj.AddRoutingInstanceRef(request.RoutingPolicyRoutingInstanceRef)

		_, err = s.BaseService.UpdateRoutingPolicy(ctx, &UpdateRoutingPolicyRequest{
			RoutingPolicy: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateRoutingPolicyRoutingInstanceRefResponse{
		ID:                              request.ID,
		RoutingPolicyRoutingInstanceRef: request.GetRoutingPolicyRoutingInstanceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteRoutingPolicyRoutingInstanceRef(ctx context.Context, request *DeleteRoutingPolicyRoutingInstanceRefRequest) (*DeleteRoutingPolicyRoutingInstanceRefResponse, error) {
	refField := models.RoutingPolicyFieldRoutingInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetRoutingPolicy(ctx, &GetRoutingPolicyRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.RoutingPolicy
		obj.RemoveRoutingInstanceRef(request.RoutingPolicyRoutingInstanceRef)

		_, err = s.BaseService.UpdateRoutingPolicy(ctx, &UpdateRoutingPolicyRequest{
			RoutingPolicy: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteRoutingPolicyRoutingInstanceRefResponse{
		ID:                              request.ID,
		RoutingPolicyRoutingInstanceRef: request.GetRoutingPolicyRoutingInstanceRef(),
	}, nil
}

func (s *EventProducerService) CreateRoutingPolicy(ctx context.Context, request *CreateRoutingPolicyRequest) (*CreateRoutingPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateRoutingPolicyRequest{
				CreateRoutingPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoutingPolicy(ctx, request)
}
func (s *EventProducerService) UpdateRoutingPolicy(ctx context.Context, request *UpdateRoutingPolicyRequest) (*UpdateRoutingPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateRoutingPolicyRequest{
				UpdateRoutingPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateRoutingPolicy(ctx, request)
}
func (s *EventProducerService) DeleteRoutingPolicy(ctx context.Context, request *DeleteRoutingPolicyRequest) (*DeleteRoutingPolicyResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteRoutingPolicyRequest{
				DeleteRoutingPolicyRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoutingPolicy(ctx, request)
}

func (s *EventProducerService) CreateRoutingPolicyRoutingInstanceRef(ctx context.Context, request *CreateRoutingPolicyRoutingInstanceRefRequest) (*CreateRoutingPolicyRoutingInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRoutingPolicyRoutingInstanceRefRequest{
			CreateRoutingPolicyRoutingInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoutingPolicyRoutingInstanceRef(ctx, request)
}

func (s *EventProducerService) DeleteRoutingPolicyRoutingInstanceRef(ctx context.Context, request *DeleteRoutingPolicyRoutingInstanceRefRequest) (*DeleteRoutingPolicyRoutingInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRoutingPolicyRoutingInstanceRefRequest{
			DeleteRoutingPolicyRoutingInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoutingPolicyRoutingInstanceRef(ctx, request)
}

func (s *EventProducerService) CreateRoutingPolicyServiceInstanceRef(ctx context.Context, request *CreateRoutingPolicyServiceInstanceRefRequest) (*CreateRoutingPolicyServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRoutingPolicyServiceInstanceRefRequest{
			CreateRoutingPolicyServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoutingPolicyServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) DeleteRoutingPolicyServiceInstanceRef(ctx context.Context, request *DeleteRoutingPolicyServiceInstanceRefRequest) (*DeleteRoutingPolicyServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRoutingPolicyServiceInstanceRefRequest{
			DeleteRoutingPolicyServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoutingPolicyServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) CreateRoutingPolicyTagRef(ctx context.Context, request *CreateRoutingPolicyTagRefRequest) (*CreateRoutingPolicyTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateRoutingPolicyTagRefRequest{
			CreateRoutingPolicyTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateRoutingPolicyTagRef(ctx, request)
}

func (s *EventProducerService) DeleteRoutingPolicyTagRef(ctx context.Context, request *DeleteRoutingPolicyTagRefRequest) (*DeleteRoutingPolicyTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteRoutingPolicyTagRefRequest{
			DeleteRoutingPolicyTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteRoutingPolicyTagRef(ctx, request)
}

func (e *Event_CreateRoutingPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoutingPolicyRequest
	model := request.RoutingPolicy
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetRoutingPolicy(ctx,
			&GetRoutingPolicyRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateRoutingPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateRoutingPolicyRequest{
			CreateRoutingPolicyRequest: &CreateRoutingPolicyRequest{
				RoutingPolicy: response.GetRoutingPolicy(),
			},
		},
	}, nil
}

func (e *Event_CreateRoutingPolicyRequest) ToUpdateEvent() *Event {
	request := e.CreateRoutingPolicyRequest
	model := request.RoutingPolicy
	return &Event{
		Request: &Event_UpdateRoutingPolicyRequest{
			UpdateRoutingPolicyRequest: &UpdateRoutingPolicyRequest{
				RoutingPolicy: model,
				FieldMask:     request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateRoutingPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateRoutingPolicyRequest
	response, err := service.UpdateRoutingPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateRoutingPolicyRequest{
			UpdateRoutingPolicyRequest: &UpdateRoutingPolicyRequest{
				RoutingPolicy: response.GetRoutingPolicy(),
			},
		},
	}, nil
}

func (e *Event_UpdateRoutingPolicyRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteRoutingPolicyRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoutingPolicyRequest
	_, err := service.DeleteRoutingPolicy(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteRoutingPolicyRequest{
			DeleteRoutingPolicyRequest: &DeleteRoutingPolicyRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateRoutingPolicyRoutingInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoutingPolicyRoutingInstanceRefRequest
	if _, err := service.CreateRoutingPolicyRoutingInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRoutingPolicyRoutingInstanceRefRequest{
		CreateRoutingPolicyRoutingInstanceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRoutingPolicyRoutingInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoutingPolicyRoutingInstanceRefRequest
	if _, err := service.DeleteRoutingPolicyRoutingInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRoutingPolicyRoutingInstanceRefRequest{
		DeleteRoutingPolicyRoutingInstanceRefRequest: request,
	}}, nil
}

func (e *Event_CreateRoutingPolicyServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoutingPolicyServiceInstanceRefRequest
	if _, err := service.CreateRoutingPolicyServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRoutingPolicyServiceInstanceRefRequest{
		CreateRoutingPolicyServiceInstanceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRoutingPolicyServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoutingPolicyServiceInstanceRefRequest
	if _, err := service.DeleteRoutingPolicyServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRoutingPolicyServiceInstanceRefRequest{
		DeleteRoutingPolicyServiceInstanceRefRequest: request,
	}}, nil
}

func (e *Event_CreateRoutingPolicyTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateRoutingPolicyTagRefRequest
	if _, err := service.CreateRoutingPolicyTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateRoutingPolicyTagRefRequest{
		CreateRoutingPolicyTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteRoutingPolicyTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteRoutingPolicyTagRefRequest
	if _, err := service.DeleteRoutingPolicyTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteRoutingPolicyTagRefRequest{
		DeleteRoutingPolicyTagRefRequest: request,
	}}, nil
}

type SecurityGroup = models.SecurityGroup

func (s *BaseService) CreateSecurityGroup(ctx context.Context, request *CreateSecurityGroupRequest) (*CreateSecurityGroupResponse, error) {
	if s.next == nil {
		return &CreateSecurityGroupResponse{
			SecurityGroup: request.GetSecurityGroup(),
		}, nil
	}
	return s.Next().CreateSecurityGroup(ctx, request)
}
func (s *BaseService) UpdateSecurityGroup(ctx context.Context, request *UpdateSecurityGroupRequest) (*UpdateSecurityGroupResponse, error) {
	if s.next == nil {
		return &UpdateSecurityGroupResponse{
			SecurityGroup: request.GetSecurityGroup(),
		}, nil
	}
	return s.Next().UpdateSecurityGroup(ctx, request)
}
func (s *BaseService) DeleteSecurityGroup(ctx context.Context, request *DeleteSecurityGroupRequest) (*DeleteSecurityGroupResponse, error) {
	if s.next == nil {
		return &DeleteSecurityGroupResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteSecurityGroup(ctx, request)
}
func (s *BaseService) GetSecurityGroup(ctx context.Context, request *GetSecurityGroupRequest) (*GetSecurityGroupResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetSecurityGroup(ctx, request)
}
func (s *BaseService) ListSecurityGroup(ctx context.Context, request *ListSecurityGroupRequest) (*ListSecurityGroupResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListSecurityGroup(ctx, request)
}

func (s *BaseService) CreateSecurityGroupTagRef(ctx context.Context, request *CreateSecurityGroupTagRefRequest) (*CreateSecurityGroupTagRefResponse, error) {
	if s.next == nil {
		return &CreateSecurityGroupTagRefResponse{
			ID:                  request.ID,
			SecurityGroupTagRef: request.GetSecurityGroupTagRef(),
		}, nil
	}
	return s.Next().CreateSecurityGroupTagRef(ctx, request)
}

func (s *BaseService) DeleteSecurityGroupTagRef(ctx context.Context, request *DeleteSecurityGroupTagRefRequest) (*DeleteSecurityGroupTagRefResponse, error) {
	if s.next == nil {
		return &DeleteSecurityGroupTagRefResponse{
			ID:                  request.ID,
			SecurityGroupTagRef: request.GetSecurityGroupTagRef(),
		}, nil
	}
	return s.Next().DeleteSecurityGroupTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateSecurityGroupTagRef(ctx context.Context, request *CreateSecurityGroupTagRefRequest) (*CreateSecurityGroupTagRefResponse, error) {
	refField := models.SecurityGroupFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSecurityGroup(ctx, &GetSecurityGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.SecurityGroup
		obj.AddTagRef(request.SecurityGroupTagRef)

		_, err = s.BaseService.UpdateSecurityGroup(ctx, &UpdateSecurityGroupRequest{
			SecurityGroup: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateSecurityGroupTagRefResponse{
		ID:                  request.ID,
		SecurityGroupTagRef: request.GetSecurityGroupTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteSecurityGroupTagRef(ctx context.Context, request *DeleteSecurityGroupTagRefRequest) (*DeleteSecurityGroupTagRefResponse, error) {
	refField := models.SecurityGroupFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSecurityGroup(ctx, &GetSecurityGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.SecurityGroup
		obj.RemoveTagRef(request.SecurityGroupTagRef)

		_, err = s.BaseService.UpdateSecurityGroup(ctx, &UpdateSecurityGroupRequest{
			SecurityGroup: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteSecurityGroupTagRefResponse{
		ID:                  request.ID,
		SecurityGroupTagRef: request.GetSecurityGroupTagRef(),
	}, nil
}

func (s *EventProducerService) CreateSecurityGroup(ctx context.Context, request *CreateSecurityGroupRequest) (*CreateSecurityGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateSecurityGroupRequest{
				CreateSecurityGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateSecurityGroup(ctx, request)
}
func (s *EventProducerService) UpdateSecurityGroup(ctx context.Context, request *UpdateSecurityGroupRequest) (*UpdateSecurityGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateSecurityGroupRequest{
				UpdateSecurityGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateSecurityGroup(ctx, request)
}
func (s *EventProducerService) DeleteSecurityGroup(ctx context.Context, request *DeleteSecurityGroupRequest) (*DeleteSecurityGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteSecurityGroupRequest{
				DeleteSecurityGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteSecurityGroup(ctx, request)
}

func (s *EventProducerService) CreateSecurityGroupTagRef(ctx context.Context, request *CreateSecurityGroupTagRefRequest) (*CreateSecurityGroupTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateSecurityGroupTagRefRequest{
			CreateSecurityGroupTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateSecurityGroupTagRef(ctx, request)
}

func (s *EventProducerService) DeleteSecurityGroupTagRef(ctx context.Context, request *DeleteSecurityGroupTagRefRequest) (*DeleteSecurityGroupTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteSecurityGroupTagRefRequest{
			DeleteSecurityGroupTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteSecurityGroupTagRef(ctx, request)
}

func (e *Event_CreateSecurityGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSecurityGroupRequest
	model := request.SecurityGroup
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetSecurityGroup(ctx,
			&GetSecurityGroupRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateSecurityGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateSecurityGroupRequest{
			CreateSecurityGroupRequest: &CreateSecurityGroupRequest{
				SecurityGroup: response.GetSecurityGroup(),
			},
		},
	}, nil
}

func (e *Event_CreateSecurityGroupRequest) ToUpdateEvent() *Event {
	request := e.CreateSecurityGroupRequest
	model := request.SecurityGroup
	return &Event{
		Request: &Event_UpdateSecurityGroupRequest{
			UpdateSecurityGroupRequest: &UpdateSecurityGroupRequest{
				SecurityGroup: model,
				FieldMask:     request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateSecurityGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateSecurityGroupRequest
	response, err := service.UpdateSecurityGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateSecurityGroupRequest{
			UpdateSecurityGroupRequest: &UpdateSecurityGroupRequest{
				SecurityGroup: response.GetSecurityGroup(),
			},
		},
	}, nil
}

func (e *Event_UpdateSecurityGroupRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteSecurityGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSecurityGroupRequest
	_, err := service.DeleteSecurityGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteSecurityGroupRequest{
			DeleteSecurityGroupRequest: &DeleteSecurityGroupRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateSecurityGroupTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSecurityGroupTagRefRequest
	if _, err := service.CreateSecurityGroupTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateSecurityGroupTagRefRequest{
		CreateSecurityGroupTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteSecurityGroupTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSecurityGroupTagRefRequest
	if _, err := service.DeleteSecurityGroupTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteSecurityGroupTagRefRequest{
		DeleteSecurityGroupTagRefRequest: request,
	}}, nil
}

type SecurityLoggingObject = models.SecurityLoggingObject

func (s *BaseService) CreateSecurityLoggingObject(ctx context.Context, request *CreateSecurityLoggingObjectRequest) (*CreateSecurityLoggingObjectResponse, error) {
	if s.next == nil {
		return &CreateSecurityLoggingObjectResponse{
			SecurityLoggingObject: request.GetSecurityLoggingObject(),
		}, nil
	}
	return s.Next().CreateSecurityLoggingObject(ctx, request)
}
func (s *BaseService) UpdateSecurityLoggingObject(ctx context.Context, request *UpdateSecurityLoggingObjectRequest) (*UpdateSecurityLoggingObjectResponse, error) {
	if s.next == nil {
		return &UpdateSecurityLoggingObjectResponse{
			SecurityLoggingObject: request.GetSecurityLoggingObject(),
		}, nil
	}
	return s.Next().UpdateSecurityLoggingObject(ctx, request)
}
func (s *BaseService) DeleteSecurityLoggingObject(ctx context.Context, request *DeleteSecurityLoggingObjectRequest) (*DeleteSecurityLoggingObjectResponse, error) {
	if s.next == nil {
		return &DeleteSecurityLoggingObjectResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteSecurityLoggingObject(ctx, request)
}
func (s *BaseService) GetSecurityLoggingObject(ctx context.Context, request *GetSecurityLoggingObjectRequest) (*GetSecurityLoggingObjectResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetSecurityLoggingObject(ctx, request)
}
func (s *BaseService) ListSecurityLoggingObject(ctx context.Context, request *ListSecurityLoggingObjectRequest) (*ListSecurityLoggingObjectResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListSecurityLoggingObject(ctx, request)
}

func (s *BaseService) CreateSecurityLoggingObjectSecurityGroupRef(ctx context.Context, request *CreateSecurityLoggingObjectSecurityGroupRefRequest) (*CreateSecurityLoggingObjectSecurityGroupRefResponse, error) {
	if s.next == nil {
		return &CreateSecurityLoggingObjectSecurityGroupRefResponse{
			ID:                                    request.ID,
			SecurityLoggingObjectSecurityGroupRef: request.GetSecurityLoggingObjectSecurityGroupRef(),
		}, nil
	}
	return s.Next().CreateSecurityLoggingObjectSecurityGroupRef(ctx, request)
}

func (s *BaseService) DeleteSecurityLoggingObjectSecurityGroupRef(ctx context.Context, request *DeleteSecurityLoggingObjectSecurityGroupRefRequest) (*DeleteSecurityLoggingObjectSecurityGroupRefResponse, error) {
	if s.next == nil {
		return &DeleteSecurityLoggingObjectSecurityGroupRefResponse{
			ID:                                    request.ID,
			SecurityLoggingObjectSecurityGroupRef: request.GetSecurityLoggingObjectSecurityGroupRef(),
		}, nil
	}
	return s.Next().DeleteSecurityLoggingObjectSecurityGroupRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateSecurityLoggingObjectSecurityGroupRef(ctx context.Context, request *CreateSecurityLoggingObjectSecurityGroupRefRequest) (*CreateSecurityLoggingObjectSecurityGroupRefResponse, error) {
	refField := models.SecurityLoggingObjectFieldSecurityGroupRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSecurityLoggingObject(ctx, &GetSecurityLoggingObjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.SecurityLoggingObject
		obj.AddSecurityGroupRef(request.SecurityLoggingObjectSecurityGroupRef)

		_, err = s.BaseService.UpdateSecurityLoggingObject(ctx, &UpdateSecurityLoggingObjectRequest{
			SecurityLoggingObject: obj,
			FieldMask:             types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateSecurityLoggingObjectSecurityGroupRefResponse{
		ID:                                    request.ID,
		SecurityLoggingObjectSecurityGroupRef: request.GetSecurityLoggingObjectSecurityGroupRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteSecurityLoggingObjectSecurityGroupRef(ctx context.Context, request *DeleteSecurityLoggingObjectSecurityGroupRefRequest) (*DeleteSecurityLoggingObjectSecurityGroupRefResponse, error) {
	refField := models.SecurityLoggingObjectFieldSecurityGroupRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSecurityLoggingObject(ctx, &GetSecurityLoggingObjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.SecurityLoggingObject
		obj.RemoveSecurityGroupRef(request.SecurityLoggingObjectSecurityGroupRef)

		_, err = s.BaseService.UpdateSecurityLoggingObject(ctx, &UpdateSecurityLoggingObjectRequest{
			SecurityLoggingObject: obj,
			FieldMask:             types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteSecurityLoggingObjectSecurityGroupRefResponse{
		ID:                                    request.ID,
		SecurityLoggingObjectSecurityGroupRef: request.GetSecurityLoggingObjectSecurityGroupRef(),
	}, nil
}

func (s *BaseService) CreateSecurityLoggingObjectTagRef(ctx context.Context, request *CreateSecurityLoggingObjectTagRefRequest) (*CreateSecurityLoggingObjectTagRefResponse, error) {
	if s.next == nil {
		return &CreateSecurityLoggingObjectTagRefResponse{
			ID:                          request.ID,
			SecurityLoggingObjectTagRef: request.GetSecurityLoggingObjectTagRef(),
		}, nil
	}
	return s.Next().CreateSecurityLoggingObjectTagRef(ctx, request)
}

func (s *BaseService) DeleteSecurityLoggingObjectTagRef(ctx context.Context, request *DeleteSecurityLoggingObjectTagRefRequest) (*DeleteSecurityLoggingObjectTagRefResponse, error) {
	if s.next == nil {
		return &DeleteSecurityLoggingObjectTagRefResponse{
			ID:                          request.ID,
			SecurityLoggingObjectTagRef: request.GetSecurityLoggingObjectTagRef(),
		}, nil
	}
	return s.Next().DeleteSecurityLoggingObjectTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateSecurityLoggingObjectTagRef(ctx context.Context, request *CreateSecurityLoggingObjectTagRefRequest) (*CreateSecurityLoggingObjectTagRefResponse, error) {
	refField := models.SecurityLoggingObjectFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSecurityLoggingObject(ctx, &GetSecurityLoggingObjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.SecurityLoggingObject
		obj.AddTagRef(request.SecurityLoggingObjectTagRef)

		_, err = s.BaseService.UpdateSecurityLoggingObject(ctx, &UpdateSecurityLoggingObjectRequest{
			SecurityLoggingObject: obj,
			FieldMask:             types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateSecurityLoggingObjectTagRefResponse{
		ID:                          request.ID,
		SecurityLoggingObjectTagRef: request.GetSecurityLoggingObjectTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteSecurityLoggingObjectTagRef(ctx context.Context, request *DeleteSecurityLoggingObjectTagRefRequest) (*DeleteSecurityLoggingObjectTagRefResponse, error) {
	refField := models.SecurityLoggingObjectFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSecurityLoggingObject(ctx, &GetSecurityLoggingObjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.SecurityLoggingObject
		obj.RemoveTagRef(request.SecurityLoggingObjectTagRef)

		_, err = s.BaseService.UpdateSecurityLoggingObject(ctx, &UpdateSecurityLoggingObjectRequest{
			SecurityLoggingObject: obj,
			FieldMask:             types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteSecurityLoggingObjectTagRefResponse{
		ID:                          request.ID,
		SecurityLoggingObjectTagRef: request.GetSecurityLoggingObjectTagRef(),
	}, nil
}

func (s *BaseService) CreateSecurityLoggingObjectNetworkPolicyRef(ctx context.Context, request *CreateSecurityLoggingObjectNetworkPolicyRefRequest) (*CreateSecurityLoggingObjectNetworkPolicyRefResponse, error) {
	if s.next == nil {
		return &CreateSecurityLoggingObjectNetworkPolicyRefResponse{
			ID:                                    request.ID,
			SecurityLoggingObjectNetworkPolicyRef: request.GetSecurityLoggingObjectNetworkPolicyRef(),
		}, nil
	}
	return s.Next().CreateSecurityLoggingObjectNetworkPolicyRef(ctx, request)
}

func (s *BaseService) DeleteSecurityLoggingObjectNetworkPolicyRef(ctx context.Context, request *DeleteSecurityLoggingObjectNetworkPolicyRefRequest) (*DeleteSecurityLoggingObjectNetworkPolicyRefResponse, error) {
	if s.next == nil {
		return &DeleteSecurityLoggingObjectNetworkPolicyRefResponse{
			ID:                                    request.ID,
			SecurityLoggingObjectNetworkPolicyRef: request.GetSecurityLoggingObjectNetworkPolicyRef(),
		}, nil
	}
	return s.Next().DeleteSecurityLoggingObjectNetworkPolicyRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateSecurityLoggingObjectNetworkPolicyRef(ctx context.Context, request *CreateSecurityLoggingObjectNetworkPolicyRefRequest) (*CreateSecurityLoggingObjectNetworkPolicyRefResponse, error) {
	refField := models.SecurityLoggingObjectFieldNetworkPolicyRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSecurityLoggingObject(ctx, &GetSecurityLoggingObjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.SecurityLoggingObject
		obj.AddNetworkPolicyRef(request.SecurityLoggingObjectNetworkPolicyRef)

		_, err = s.BaseService.UpdateSecurityLoggingObject(ctx, &UpdateSecurityLoggingObjectRequest{
			SecurityLoggingObject: obj,
			FieldMask:             types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateSecurityLoggingObjectNetworkPolicyRefResponse{
		ID:                                    request.ID,
		SecurityLoggingObjectNetworkPolicyRef: request.GetSecurityLoggingObjectNetworkPolicyRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteSecurityLoggingObjectNetworkPolicyRef(ctx context.Context, request *DeleteSecurityLoggingObjectNetworkPolicyRefRequest) (*DeleteSecurityLoggingObjectNetworkPolicyRefResponse, error) {
	refField := models.SecurityLoggingObjectFieldNetworkPolicyRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSecurityLoggingObject(ctx, &GetSecurityLoggingObjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.SecurityLoggingObject
		obj.RemoveNetworkPolicyRef(request.SecurityLoggingObjectNetworkPolicyRef)

		_, err = s.BaseService.UpdateSecurityLoggingObject(ctx, &UpdateSecurityLoggingObjectRequest{
			SecurityLoggingObject: obj,
			FieldMask:             types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteSecurityLoggingObjectNetworkPolicyRefResponse{
		ID:                                    request.ID,
		SecurityLoggingObjectNetworkPolicyRef: request.GetSecurityLoggingObjectNetworkPolicyRef(),
	}, nil
}

func (s *EventProducerService) CreateSecurityLoggingObject(ctx context.Context, request *CreateSecurityLoggingObjectRequest) (*CreateSecurityLoggingObjectResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateSecurityLoggingObjectRequest{
				CreateSecurityLoggingObjectRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateSecurityLoggingObject(ctx, request)
}
func (s *EventProducerService) UpdateSecurityLoggingObject(ctx context.Context, request *UpdateSecurityLoggingObjectRequest) (*UpdateSecurityLoggingObjectResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateSecurityLoggingObjectRequest{
				UpdateSecurityLoggingObjectRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateSecurityLoggingObject(ctx, request)
}
func (s *EventProducerService) DeleteSecurityLoggingObject(ctx context.Context, request *DeleteSecurityLoggingObjectRequest) (*DeleteSecurityLoggingObjectResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteSecurityLoggingObjectRequest{
				DeleteSecurityLoggingObjectRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteSecurityLoggingObject(ctx, request)
}

func (s *EventProducerService) CreateSecurityLoggingObjectNetworkPolicyRef(ctx context.Context, request *CreateSecurityLoggingObjectNetworkPolicyRefRequest) (*CreateSecurityLoggingObjectNetworkPolicyRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateSecurityLoggingObjectNetworkPolicyRefRequest{
			CreateSecurityLoggingObjectNetworkPolicyRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateSecurityLoggingObjectNetworkPolicyRef(ctx, request)
}

func (s *EventProducerService) DeleteSecurityLoggingObjectNetworkPolicyRef(ctx context.Context, request *DeleteSecurityLoggingObjectNetworkPolicyRefRequest) (*DeleteSecurityLoggingObjectNetworkPolicyRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteSecurityLoggingObjectNetworkPolicyRefRequest{
			DeleteSecurityLoggingObjectNetworkPolicyRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteSecurityLoggingObjectNetworkPolicyRef(ctx, request)
}

func (s *EventProducerService) CreateSecurityLoggingObjectSecurityGroupRef(ctx context.Context, request *CreateSecurityLoggingObjectSecurityGroupRefRequest) (*CreateSecurityLoggingObjectSecurityGroupRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateSecurityLoggingObjectSecurityGroupRefRequest{
			CreateSecurityLoggingObjectSecurityGroupRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateSecurityLoggingObjectSecurityGroupRef(ctx, request)
}

func (s *EventProducerService) DeleteSecurityLoggingObjectSecurityGroupRef(ctx context.Context, request *DeleteSecurityLoggingObjectSecurityGroupRefRequest) (*DeleteSecurityLoggingObjectSecurityGroupRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteSecurityLoggingObjectSecurityGroupRefRequest{
			DeleteSecurityLoggingObjectSecurityGroupRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteSecurityLoggingObjectSecurityGroupRef(ctx, request)
}

func (s *EventProducerService) CreateSecurityLoggingObjectTagRef(ctx context.Context, request *CreateSecurityLoggingObjectTagRefRequest) (*CreateSecurityLoggingObjectTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateSecurityLoggingObjectTagRefRequest{
			CreateSecurityLoggingObjectTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateSecurityLoggingObjectTagRef(ctx, request)
}

func (s *EventProducerService) DeleteSecurityLoggingObjectTagRef(ctx context.Context, request *DeleteSecurityLoggingObjectTagRefRequest) (*DeleteSecurityLoggingObjectTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteSecurityLoggingObjectTagRefRequest{
			DeleteSecurityLoggingObjectTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteSecurityLoggingObjectTagRef(ctx, request)
}

func (e *Event_CreateSecurityLoggingObjectRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSecurityLoggingObjectRequest
	model := request.SecurityLoggingObject
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetSecurityLoggingObject(ctx,
			&GetSecurityLoggingObjectRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateSecurityLoggingObject(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateSecurityLoggingObjectRequest{
			CreateSecurityLoggingObjectRequest: &CreateSecurityLoggingObjectRequest{
				SecurityLoggingObject: response.GetSecurityLoggingObject(),
			},
		},
	}, nil
}

func (e *Event_CreateSecurityLoggingObjectRequest) ToUpdateEvent() *Event {
	request := e.CreateSecurityLoggingObjectRequest
	model := request.SecurityLoggingObject
	return &Event{
		Request: &Event_UpdateSecurityLoggingObjectRequest{
			UpdateSecurityLoggingObjectRequest: &UpdateSecurityLoggingObjectRequest{
				SecurityLoggingObject: model,
				FieldMask:             request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateSecurityLoggingObjectRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateSecurityLoggingObjectRequest
	response, err := service.UpdateSecurityLoggingObject(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateSecurityLoggingObjectRequest{
			UpdateSecurityLoggingObjectRequest: &UpdateSecurityLoggingObjectRequest{
				SecurityLoggingObject: response.GetSecurityLoggingObject(),
			},
		},
	}, nil
}

func (e *Event_UpdateSecurityLoggingObjectRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteSecurityLoggingObjectRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSecurityLoggingObjectRequest
	_, err := service.DeleteSecurityLoggingObject(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteSecurityLoggingObjectRequest{
			DeleteSecurityLoggingObjectRequest: &DeleteSecurityLoggingObjectRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateSecurityLoggingObjectNetworkPolicyRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSecurityLoggingObjectNetworkPolicyRefRequest
	if _, err := service.CreateSecurityLoggingObjectNetworkPolicyRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateSecurityLoggingObjectNetworkPolicyRefRequest{
		CreateSecurityLoggingObjectNetworkPolicyRefRequest: request,
	}}, nil
}

func (e *Event_DeleteSecurityLoggingObjectNetworkPolicyRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSecurityLoggingObjectNetworkPolicyRefRequest
	if _, err := service.DeleteSecurityLoggingObjectNetworkPolicyRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteSecurityLoggingObjectNetworkPolicyRefRequest{
		DeleteSecurityLoggingObjectNetworkPolicyRefRequest: request,
	}}, nil
}

func (e *Event_CreateSecurityLoggingObjectSecurityGroupRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSecurityLoggingObjectSecurityGroupRefRequest
	if _, err := service.CreateSecurityLoggingObjectSecurityGroupRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateSecurityLoggingObjectSecurityGroupRefRequest{
		CreateSecurityLoggingObjectSecurityGroupRefRequest: request,
	}}, nil
}

func (e *Event_DeleteSecurityLoggingObjectSecurityGroupRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSecurityLoggingObjectSecurityGroupRefRequest
	if _, err := service.DeleteSecurityLoggingObjectSecurityGroupRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteSecurityLoggingObjectSecurityGroupRefRequest{
		DeleteSecurityLoggingObjectSecurityGroupRefRequest: request,
	}}, nil
}

func (e *Event_CreateSecurityLoggingObjectTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSecurityLoggingObjectTagRefRequest
	if _, err := service.CreateSecurityLoggingObjectTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateSecurityLoggingObjectTagRefRequest{
		CreateSecurityLoggingObjectTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteSecurityLoggingObjectTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSecurityLoggingObjectTagRefRequest
	if _, err := service.DeleteSecurityLoggingObjectTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteSecurityLoggingObjectTagRefRequest{
		DeleteSecurityLoggingObjectTagRefRequest: request,
	}}, nil
}

type ServiceAppliance = models.ServiceAppliance

func (s *BaseService) CreateServiceAppliance(ctx context.Context, request *CreateServiceApplianceRequest) (*CreateServiceApplianceResponse, error) {
	if s.next == nil {
		return &CreateServiceApplianceResponse{
			ServiceAppliance: request.GetServiceAppliance(),
		}, nil
	}
	return s.Next().CreateServiceAppliance(ctx, request)
}
func (s *BaseService) UpdateServiceAppliance(ctx context.Context, request *UpdateServiceApplianceRequest) (*UpdateServiceApplianceResponse, error) {
	if s.next == nil {
		return &UpdateServiceApplianceResponse{
			ServiceAppliance: request.GetServiceAppliance(),
		}, nil
	}
	return s.Next().UpdateServiceAppliance(ctx, request)
}
func (s *BaseService) DeleteServiceAppliance(ctx context.Context, request *DeleteServiceApplianceRequest) (*DeleteServiceApplianceResponse, error) {
	if s.next == nil {
		return &DeleteServiceApplianceResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteServiceAppliance(ctx, request)
}
func (s *BaseService) GetServiceAppliance(ctx context.Context, request *GetServiceApplianceRequest) (*GetServiceApplianceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetServiceAppliance(ctx, request)
}
func (s *BaseService) ListServiceAppliance(ctx context.Context, request *ListServiceApplianceRequest) (*ListServiceApplianceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListServiceAppliance(ctx, request)
}

func (s *BaseService) CreateServiceAppliancePhysicalInterfaceRef(ctx context.Context, request *CreateServiceAppliancePhysicalInterfaceRefRequest) (*CreateServiceAppliancePhysicalInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateServiceAppliancePhysicalInterfaceRefResponse{
			ID:                                   request.ID,
			ServiceAppliancePhysicalInterfaceRef: request.GetServiceAppliancePhysicalInterfaceRef(),
		}, nil
	}
	return s.Next().CreateServiceAppliancePhysicalInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteServiceAppliancePhysicalInterfaceRef(ctx context.Context, request *DeleteServiceAppliancePhysicalInterfaceRefRequest) (*DeleteServiceAppliancePhysicalInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceAppliancePhysicalInterfaceRefResponse{
			ID:                                   request.ID,
			ServiceAppliancePhysicalInterfaceRef: request.GetServiceAppliancePhysicalInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteServiceAppliancePhysicalInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceAppliancePhysicalInterfaceRef(ctx context.Context, request *CreateServiceAppliancePhysicalInterfaceRefRequest) (*CreateServiceAppliancePhysicalInterfaceRefResponse, error) {
	refField := models.ServiceApplianceFieldPhysicalInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceAppliance(ctx, &GetServiceApplianceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceAppliance
		obj.AddPhysicalInterfaceRef(request.ServiceAppliancePhysicalInterfaceRef)

		_, err = s.BaseService.UpdateServiceAppliance(ctx, &UpdateServiceApplianceRequest{
			ServiceAppliance: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceAppliancePhysicalInterfaceRefResponse{
		ID:                                   request.ID,
		ServiceAppliancePhysicalInterfaceRef: request.GetServiceAppliancePhysicalInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceAppliancePhysicalInterfaceRef(ctx context.Context, request *DeleteServiceAppliancePhysicalInterfaceRefRequest) (*DeleteServiceAppliancePhysicalInterfaceRefResponse, error) {
	refField := models.ServiceApplianceFieldPhysicalInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceAppliance(ctx, &GetServiceApplianceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceAppliance
		obj.RemovePhysicalInterfaceRef(request.ServiceAppliancePhysicalInterfaceRef)

		_, err = s.BaseService.UpdateServiceAppliance(ctx, &UpdateServiceApplianceRequest{
			ServiceAppliance: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceAppliancePhysicalInterfaceRefResponse{
		ID:                                   request.ID,
		ServiceAppliancePhysicalInterfaceRef: request.GetServiceAppliancePhysicalInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateServiceApplianceTagRef(ctx context.Context, request *CreateServiceApplianceTagRefRequest) (*CreateServiceApplianceTagRefResponse, error) {
	if s.next == nil {
		return &CreateServiceApplianceTagRefResponse{
			ID:                     request.ID,
			ServiceApplianceTagRef: request.GetServiceApplianceTagRef(),
		}, nil
	}
	return s.Next().CreateServiceApplianceTagRef(ctx, request)
}

func (s *BaseService) DeleteServiceApplianceTagRef(ctx context.Context, request *DeleteServiceApplianceTagRefRequest) (*DeleteServiceApplianceTagRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceApplianceTagRefResponse{
			ID:                     request.ID,
			ServiceApplianceTagRef: request.GetServiceApplianceTagRef(),
		}, nil
	}
	return s.Next().DeleteServiceApplianceTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceApplianceTagRef(ctx context.Context, request *CreateServiceApplianceTagRefRequest) (*CreateServiceApplianceTagRefResponse, error) {
	refField := models.ServiceApplianceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceAppliance(ctx, &GetServiceApplianceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceAppliance
		obj.AddTagRef(request.ServiceApplianceTagRef)

		_, err = s.BaseService.UpdateServiceAppliance(ctx, &UpdateServiceApplianceRequest{
			ServiceAppliance: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceApplianceTagRefResponse{
		ID:                     request.ID,
		ServiceApplianceTagRef: request.GetServiceApplianceTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceApplianceTagRef(ctx context.Context, request *DeleteServiceApplianceTagRefRequest) (*DeleteServiceApplianceTagRefResponse, error) {
	refField := models.ServiceApplianceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceAppliance(ctx, &GetServiceApplianceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceAppliance
		obj.RemoveTagRef(request.ServiceApplianceTagRef)

		_, err = s.BaseService.UpdateServiceAppliance(ctx, &UpdateServiceApplianceRequest{
			ServiceAppliance: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceApplianceTagRefResponse{
		ID:                     request.ID,
		ServiceApplianceTagRef: request.GetServiceApplianceTagRef(),
	}, nil
}

func (s *EventProducerService) CreateServiceAppliance(ctx context.Context, request *CreateServiceApplianceRequest) (*CreateServiceApplianceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateServiceApplianceRequest{
				CreateServiceApplianceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceAppliance(ctx, request)
}
func (s *EventProducerService) UpdateServiceAppliance(ctx context.Context, request *UpdateServiceApplianceRequest) (*UpdateServiceApplianceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateServiceApplianceRequest{
				UpdateServiceApplianceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateServiceAppliance(ctx, request)
}
func (s *EventProducerService) DeleteServiceAppliance(ctx context.Context, request *DeleteServiceApplianceRequest) (*DeleteServiceApplianceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteServiceApplianceRequest{
				DeleteServiceApplianceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceAppliance(ctx, request)
}

func (s *EventProducerService) CreateServiceAppliancePhysicalInterfaceRef(ctx context.Context, request *CreateServiceAppliancePhysicalInterfaceRefRequest) (*CreateServiceAppliancePhysicalInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceAppliancePhysicalInterfaceRefRequest{
			CreateServiceAppliancePhysicalInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceAppliancePhysicalInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceAppliancePhysicalInterfaceRef(ctx context.Context, request *DeleteServiceAppliancePhysicalInterfaceRefRequest) (*DeleteServiceAppliancePhysicalInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceAppliancePhysicalInterfaceRefRequest{
			DeleteServiceAppliancePhysicalInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceAppliancePhysicalInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateServiceApplianceTagRef(ctx context.Context, request *CreateServiceApplianceTagRefRequest) (*CreateServiceApplianceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceApplianceTagRefRequest{
			CreateServiceApplianceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceApplianceTagRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceApplianceTagRef(ctx context.Context, request *DeleteServiceApplianceTagRefRequest) (*DeleteServiceApplianceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceApplianceTagRefRequest{
			DeleteServiceApplianceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceApplianceTagRef(ctx, request)
}

func (e *Event_CreateServiceApplianceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceApplianceRequest
	model := request.ServiceAppliance
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetServiceAppliance(ctx,
			&GetServiceApplianceRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateServiceAppliance(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateServiceApplianceRequest{
			CreateServiceApplianceRequest: &CreateServiceApplianceRequest{
				ServiceAppliance: response.GetServiceAppliance(),
			},
		},
	}, nil
}

func (e *Event_CreateServiceApplianceRequest) ToUpdateEvent() *Event {
	request := e.CreateServiceApplianceRequest
	model := request.ServiceAppliance
	return &Event{
		Request: &Event_UpdateServiceApplianceRequest{
			UpdateServiceApplianceRequest: &UpdateServiceApplianceRequest{
				ServiceAppliance: model,
				FieldMask:        request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateServiceApplianceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateServiceApplianceRequest
	response, err := service.UpdateServiceAppliance(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateServiceApplianceRequest{
			UpdateServiceApplianceRequest: &UpdateServiceApplianceRequest{
				ServiceAppliance: response.GetServiceAppliance(),
			},
		},
	}, nil
}

func (e *Event_UpdateServiceApplianceRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteServiceApplianceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceApplianceRequest
	_, err := service.DeleteServiceAppliance(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteServiceApplianceRequest{
			DeleteServiceApplianceRequest: &DeleteServiceApplianceRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateServiceAppliancePhysicalInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceAppliancePhysicalInterfaceRefRequest
	if _, err := service.CreateServiceAppliancePhysicalInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceAppliancePhysicalInterfaceRefRequest{
		CreateServiceAppliancePhysicalInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceAppliancePhysicalInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceAppliancePhysicalInterfaceRefRequest
	if _, err := service.DeleteServiceAppliancePhysicalInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceAppliancePhysicalInterfaceRefRequest{
		DeleteServiceAppliancePhysicalInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateServiceApplianceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceApplianceTagRefRequest
	if _, err := service.CreateServiceApplianceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceApplianceTagRefRequest{
		CreateServiceApplianceTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceApplianceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceApplianceTagRefRequest
	if _, err := service.DeleteServiceApplianceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceApplianceTagRefRequest{
		DeleteServiceApplianceTagRefRequest: request,
	}}, nil
}

type ServiceApplianceSet = models.ServiceApplianceSet

func (s *BaseService) CreateServiceApplianceSet(ctx context.Context, request *CreateServiceApplianceSetRequest) (*CreateServiceApplianceSetResponse, error) {
	if s.next == nil {
		return &CreateServiceApplianceSetResponse{
			ServiceApplianceSet: request.GetServiceApplianceSet(),
		}, nil
	}
	return s.Next().CreateServiceApplianceSet(ctx, request)
}
func (s *BaseService) UpdateServiceApplianceSet(ctx context.Context, request *UpdateServiceApplianceSetRequest) (*UpdateServiceApplianceSetResponse, error) {
	if s.next == nil {
		return &UpdateServiceApplianceSetResponse{
			ServiceApplianceSet: request.GetServiceApplianceSet(),
		}, nil
	}
	return s.Next().UpdateServiceApplianceSet(ctx, request)
}
func (s *BaseService) DeleteServiceApplianceSet(ctx context.Context, request *DeleteServiceApplianceSetRequest) (*DeleteServiceApplianceSetResponse, error) {
	if s.next == nil {
		return &DeleteServiceApplianceSetResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteServiceApplianceSet(ctx, request)
}
func (s *BaseService) GetServiceApplianceSet(ctx context.Context, request *GetServiceApplianceSetRequest) (*GetServiceApplianceSetResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetServiceApplianceSet(ctx, request)
}
func (s *BaseService) ListServiceApplianceSet(ctx context.Context, request *ListServiceApplianceSetRequest) (*ListServiceApplianceSetResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListServiceApplianceSet(ctx, request)
}

func (s *BaseService) CreateServiceApplianceSetTagRef(ctx context.Context, request *CreateServiceApplianceSetTagRefRequest) (*CreateServiceApplianceSetTagRefResponse, error) {
	if s.next == nil {
		return &CreateServiceApplianceSetTagRefResponse{
			ID:                        request.ID,
			ServiceApplianceSetTagRef: request.GetServiceApplianceSetTagRef(),
		}, nil
	}
	return s.Next().CreateServiceApplianceSetTagRef(ctx, request)
}

func (s *BaseService) DeleteServiceApplianceSetTagRef(ctx context.Context, request *DeleteServiceApplianceSetTagRefRequest) (*DeleteServiceApplianceSetTagRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceApplianceSetTagRefResponse{
			ID:                        request.ID,
			ServiceApplianceSetTagRef: request.GetServiceApplianceSetTagRef(),
		}, nil
	}
	return s.Next().DeleteServiceApplianceSetTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceApplianceSetTagRef(ctx context.Context, request *CreateServiceApplianceSetTagRefRequest) (*CreateServiceApplianceSetTagRefResponse, error) {
	refField := models.ServiceApplianceSetFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceApplianceSet(ctx, &GetServiceApplianceSetRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceApplianceSet
		obj.AddTagRef(request.ServiceApplianceSetTagRef)

		_, err = s.BaseService.UpdateServiceApplianceSet(ctx, &UpdateServiceApplianceSetRequest{
			ServiceApplianceSet: obj,
			FieldMask:           types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceApplianceSetTagRefResponse{
		ID:                        request.ID,
		ServiceApplianceSetTagRef: request.GetServiceApplianceSetTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceApplianceSetTagRef(ctx context.Context, request *DeleteServiceApplianceSetTagRefRequest) (*DeleteServiceApplianceSetTagRefResponse, error) {
	refField := models.ServiceApplianceSetFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceApplianceSet(ctx, &GetServiceApplianceSetRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceApplianceSet
		obj.RemoveTagRef(request.ServiceApplianceSetTagRef)

		_, err = s.BaseService.UpdateServiceApplianceSet(ctx, &UpdateServiceApplianceSetRequest{
			ServiceApplianceSet: obj,
			FieldMask:           types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceApplianceSetTagRefResponse{
		ID:                        request.ID,
		ServiceApplianceSetTagRef: request.GetServiceApplianceSetTagRef(),
	}, nil
}

func (s *EventProducerService) CreateServiceApplianceSet(ctx context.Context, request *CreateServiceApplianceSetRequest) (*CreateServiceApplianceSetResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateServiceApplianceSetRequest{
				CreateServiceApplianceSetRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceApplianceSet(ctx, request)
}
func (s *EventProducerService) UpdateServiceApplianceSet(ctx context.Context, request *UpdateServiceApplianceSetRequest) (*UpdateServiceApplianceSetResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateServiceApplianceSetRequest{
				UpdateServiceApplianceSetRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateServiceApplianceSet(ctx, request)
}
func (s *EventProducerService) DeleteServiceApplianceSet(ctx context.Context, request *DeleteServiceApplianceSetRequest) (*DeleteServiceApplianceSetResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteServiceApplianceSetRequest{
				DeleteServiceApplianceSetRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceApplianceSet(ctx, request)
}

func (s *EventProducerService) CreateServiceApplianceSetTagRef(ctx context.Context, request *CreateServiceApplianceSetTagRefRequest) (*CreateServiceApplianceSetTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceApplianceSetTagRefRequest{
			CreateServiceApplianceSetTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceApplianceSetTagRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceApplianceSetTagRef(ctx context.Context, request *DeleteServiceApplianceSetTagRefRequest) (*DeleteServiceApplianceSetTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceApplianceSetTagRefRequest{
			DeleteServiceApplianceSetTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceApplianceSetTagRef(ctx, request)
}

func (e *Event_CreateServiceApplianceSetRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceApplianceSetRequest
	model := request.ServiceApplianceSet
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetServiceApplianceSet(ctx,
			&GetServiceApplianceSetRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateServiceApplianceSet(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateServiceApplianceSetRequest{
			CreateServiceApplianceSetRequest: &CreateServiceApplianceSetRequest{
				ServiceApplianceSet: response.GetServiceApplianceSet(),
			},
		},
	}, nil
}

func (e *Event_CreateServiceApplianceSetRequest) ToUpdateEvent() *Event {
	request := e.CreateServiceApplianceSetRequest
	model := request.ServiceApplianceSet
	return &Event{
		Request: &Event_UpdateServiceApplianceSetRequest{
			UpdateServiceApplianceSetRequest: &UpdateServiceApplianceSetRequest{
				ServiceApplianceSet: model,
				FieldMask:           request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateServiceApplianceSetRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateServiceApplianceSetRequest
	response, err := service.UpdateServiceApplianceSet(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateServiceApplianceSetRequest{
			UpdateServiceApplianceSetRequest: &UpdateServiceApplianceSetRequest{
				ServiceApplianceSet: response.GetServiceApplianceSet(),
			},
		},
	}, nil
}

func (e *Event_UpdateServiceApplianceSetRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteServiceApplianceSetRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceApplianceSetRequest
	_, err := service.DeleteServiceApplianceSet(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteServiceApplianceSetRequest{
			DeleteServiceApplianceSetRequest: &DeleteServiceApplianceSetRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateServiceApplianceSetTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceApplianceSetTagRefRequest
	if _, err := service.CreateServiceApplianceSetTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceApplianceSetTagRefRequest{
		CreateServiceApplianceSetTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceApplianceSetTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceApplianceSetTagRefRequest
	if _, err := service.DeleteServiceApplianceSetTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceApplianceSetTagRefRequest{
		DeleteServiceApplianceSetTagRefRequest: request,
	}}, nil
}

type ServiceConnectionModule = models.ServiceConnectionModule

func (s *BaseService) CreateServiceConnectionModule(ctx context.Context, request *CreateServiceConnectionModuleRequest) (*CreateServiceConnectionModuleResponse, error) {
	if s.next == nil {
		return &CreateServiceConnectionModuleResponse{
			ServiceConnectionModule: request.GetServiceConnectionModule(),
		}, nil
	}
	return s.Next().CreateServiceConnectionModule(ctx, request)
}
func (s *BaseService) UpdateServiceConnectionModule(ctx context.Context, request *UpdateServiceConnectionModuleRequest) (*UpdateServiceConnectionModuleResponse, error) {
	if s.next == nil {
		return &UpdateServiceConnectionModuleResponse{
			ServiceConnectionModule: request.GetServiceConnectionModule(),
		}, nil
	}
	return s.Next().UpdateServiceConnectionModule(ctx, request)
}
func (s *BaseService) DeleteServiceConnectionModule(ctx context.Context, request *DeleteServiceConnectionModuleRequest) (*DeleteServiceConnectionModuleResponse, error) {
	if s.next == nil {
		return &DeleteServiceConnectionModuleResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteServiceConnectionModule(ctx, request)
}
func (s *BaseService) GetServiceConnectionModule(ctx context.Context, request *GetServiceConnectionModuleRequest) (*GetServiceConnectionModuleResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetServiceConnectionModule(ctx, request)
}
func (s *BaseService) ListServiceConnectionModule(ctx context.Context, request *ListServiceConnectionModuleRequest) (*ListServiceConnectionModuleResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListServiceConnectionModule(ctx, request)
}

func (s *BaseService) CreateServiceConnectionModuleServiceObjectRef(ctx context.Context, request *CreateServiceConnectionModuleServiceObjectRefRequest) (*CreateServiceConnectionModuleServiceObjectRefResponse, error) {
	if s.next == nil {
		return &CreateServiceConnectionModuleServiceObjectRefResponse{
			ID:                                      request.ID,
			ServiceConnectionModuleServiceObjectRef: request.GetServiceConnectionModuleServiceObjectRef(),
		}, nil
	}
	return s.Next().CreateServiceConnectionModuleServiceObjectRef(ctx, request)
}

func (s *BaseService) DeleteServiceConnectionModuleServiceObjectRef(ctx context.Context, request *DeleteServiceConnectionModuleServiceObjectRefRequest) (*DeleteServiceConnectionModuleServiceObjectRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceConnectionModuleServiceObjectRefResponse{
			ID:                                      request.ID,
			ServiceConnectionModuleServiceObjectRef: request.GetServiceConnectionModuleServiceObjectRef(),
		}, nil
	}
	return s.Next().DeleteServiceConnectionModuleServiceObjectRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceConnectionModuleServiceObjectRef(ctx context.Context, request *CreateServiceConnectionModuleServiceObjectRefRequest) (*CreateServiceConnectionModuleServiceObjectRefResponse, error) {
	refField := models.ServiceConnectionModuleFieldServiceObjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceConnectionModule(ctx, &GetServiceConnectionModuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceConnectionModule
		obj.AddServiceObjectRef(request.ServiceConnectionModuleServiceObjectRef)

		_, err = s.BaseService.UpdateServiceConnectionModule(ctx, &UpdateServiceConnectionModuleRequest{
			ServiceConnectionModule: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceConnectionModuleServiceObjectRefResponse{
		ID:                                      request.ID,
		ServiceConnectionModuleServiceObjectRef: request.GetServiceConnectionModuleServiceObjectRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceConnectionModuleServiceObjectRef(ctx context.Context, request *DeleteServiceConnectionModuleServiceObjectRefRequest) (*DeleteServiceConnectionModuleServiceObjectRefResponse, error) {
	refField := models.ServiceConnectionModuleFieldServiceObjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceConnectionModule(ctx, &GetServiceConnectionModuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceConnectionModule
		obj.RemoveServiceObjectRef(request.ServiceConnectionModuleServiceObjectRef)

		_, err = s.BaseService.UpdateServiceConnectionModule(ctx, &UpdateServiceConnectionModuleRequest{
			ServiceConnectionModule: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceConnectionModuleServiceObjectRefResponse{
		ID:                                      request.ID,
		ServiceConnectionModuleServiceObjectRef: request.GetServiceConnectionModuleServiceObjectRef(),
	}, nil
}

func (s *BaseService) CreateServiceConnectionModuleTagRef(ctx context.Context, request *CreateServiceConnectionModuleTagRefRequest) (*CreateServiceConnectionModuleTagRefResponse, error) {
	if s.next == nil {
		return &CreateServiceConnectionModuleTagRefResponse{
			ID:                            request.ID,
			ServiceConnectionModuleTagRef: request.GetServiceConnectionModuleTagRef(),
		}, nil
	}
	return s.Next().CreateServiceConnectionModuleTagRef(ctx, request)
}

func (s *BaseService) DeleteServiceConnectionModuleTagRef(ctx context.Context, request *DeleteServiceConnectionModuleTagRefRequest) (*DeleteServiceConnectionModuleTagRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceConnectionModuleTagRefResponse{
			ID:                            request.ID,
			ServiceConnectionModuleTagRef: request.GetServiceConnectionModuleTagRef(),
		}, nil
	}
	return s.Next().DeleteServiceConnectionModuleTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceConnectionModuleTagRef(ctx context.Context, request *CreateServiceConnectionModuleTagRefRequest) (*CreateServiceConnectionModuleTagRefResponse, error) {
	refField := models.ServiceConnectionModuleFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceConnectionModule(ctx, &GetServiceConnectionModuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceConnectionModule
		obj.AddTagRef(request.ServiceConnectionModuleTagRef)

		_, err = s.BaseService.UpdateServiceConnectionModule(ctx, &UpdateServiceConnectionModuleRequest{
			ServiceConnectionModule: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceConnectionModuleTagRefResponse{
		ID:                            request.ID,
		ServiceConnectionModuleTagRef: request.GetServiceConnectionModuleTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceConnectionModuleTagRef(ctx context.Context, request *DeleteServiceConnectionModuleTagRefRequest) (*DeleteServiceConnectionModuleTagRefResponse, error) {
	refField := models.ServiceConnectionModuleFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceConnectionModule(ctx, &GetServiceConnectionModuleRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceConnectionModule
		obj.RemoveTagRef(request.ServiceConnectionModuleTagRef)

		_, err = s.BaseService.UpdateServiceConnectionModule(ctx, &UpdateServiceConnectionModuleRequest{
			ServiceConnectionModule: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceConnectionModuleTagRefResponse{
		ID:                            request.ID,
		ServiceConnectionModuleTagRef: request.GetServiceConnectionModuleTagRef(),
	}, nil
}

func (s *EventProducerService) CreateServiceConnectionModule(ctx context.Context, request *CreateServiceConnectionModuleRequest) (*CreateServiceConnectionModuleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateServiceConnectionModuleRequest{
				CreateServiceConnectionModuleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceConnectionModule(ctx, request)
}
func (s *EventProducerService) UpdateServiceConnectionModule(ctx context.Context, request *UpdateServiceConnectionModuleRequest) (*UpdateServiceConnectionModuleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateServiceConnectionModuleRequest{
				UpdateServiceConnectionModuleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateServiceConnectionModule(ctx, request)
}
func (s *EventProducerService) DeleteServiceConnectionModule(ctx context.Context, request *DeleteServiceConnectionModuleRequest) (*DeleteServiceConnectionModuleResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteServiceConnectionModuleRequest{
				DeleteServiceConnectionModuleRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceConnectionModule(ctx, request)
}

func (s *EventProducerService) CreateServiceConnectionModuleServiceObjectRef(ctx context.Context, request *CreateServiceConnectionModuleServiceObjectRefRequest) (*CreateServiceConnectionModuleServiceObjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceConnectionModuleServiceObjectRefRequest{
			CreateServiceConnectionModuleServiceObjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceConnectionModuleServiceObjectRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceConnectionModuleServiceObjectRef(ctx context.Context, request *DeleteServiceConnectionModuleServiceObjectRefRequest) (*DeleteServiceConnectionModuleServiceObjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceConnectionModuleServiceObjectRefRequest{
			DeleteServiceConnectionModuleServiceObjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceConnectionModuleServiceObjectRef(ctx, request)
}

func (s *EventProducerService) CreateServiceConnectionModuleTagRef(ctx context.Context, request *CreateServiceConnectionModuleTagRefRequest) (*CreateServiceConnectionModuleTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceConnectionModuleTagRefRequest{
			CreateServiceConnectionModuleTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceConnectionModuleTagRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceConnectionModuleTagRef(ctx context.Context, request *DeleteServiceConnectionModuleTagRefRequest) (*DeleteServiceConnectionModuleTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceConnectionModuleTagRefRequest{
			DeleteServiceConnectionModuleTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceConnectionModuleTagRef(ctx, request)
}

func (e *Event_CreateServiceConnectionModuleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceConnectionModuleRequest
	model := request.ServiceConnectionModule
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetServiceConnectionModule(ctx,
			&GetServiceConnectionModuleRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateServiceConnectionModule(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateServiceConnectionModuleRequest{
			CreateServiceConnectionModuleRequest: &CreateServiceConnectionModuleRequest{
				ServiceConnectionModule: response.GetServiceConnectionModule(),
			},
		},
	}, nil
}

func (e *Event_CreateServiceConnectionModuleRequest) ToUpdateEvent() *Event {
	request := e.CreateServiceConnectionModuleRequest
	model := request.ServiceConnectionModule
	return &Event{
		Request: &Event_UpdateServiceConnectionModuleRequest{
			UpdateServiceConnectionModuleRequest: &UpdateServiceConnectionModuleRequest{
				ServiceConnectionModule: model,
				FieldMask:               request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateServiceConnectionModuleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateServiceConnectionModuleRequest
	response, err := service.UpdateServiceConnectionModule(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateServiceConnectionModuleRequest{
			UpdateServiceConnectionModuleRequest: &UpdateServiceConnectionModuleRequest{
				ServiceConnectionModule: response.GetServiceConnectionModule(),
			},
		},
	}, nil
}

func (e *Event_UpdateServiceConnectionModuleRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteServiceConnectionModuleRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceConnectionModuleRequest
	_, err := service.DeleteServiceConnectionModule(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteServiceConnectionModuleRequest{
			DeleteServiceConnectionModuleRequest: &DeleteServiceConnectionModuleRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateServiceConnectionModuleServiceObjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceConnectionModuleServiceObjectRefRequest
	if _, err := service.CreateServiceConnectionModuleServiceObjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceConnectionModuleServiceObjectRefRequest{
		CreateServiceConnectionModuleServiceObjectRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceConnectionModuleServiceObjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceConnectionModuleServiceObjectRefRequest
	if _, err := service.DeleteServiceConnectionModuleServiceObjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceConnectionModuleServiceObjectRefRequest{
		DeleteServiceConnectionModuleServiceObjectRefRequest: request,
	}}, nil
}

func (e *Event_CreateServiceConnectionModuleTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceConnectionModuleTagRefRequest
	if _, err := service.CreateServiceConnectionModuleTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceConnectionModuleTagRefRequest{
		CreateServiceConnectionModuleTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceConnectionModuleTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceConnectionModuleTagRefRequest
	if _, err := service.DeleteServiceConnectionModuleTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceConnectionModuleTagRefRequest{
		DeleteServiceConnectionModuleTagRefRequest: request,
	}}, nil
}

type ServiceEndpoint = models.ServiceEndpoint

func (s *BaseService) CreateServiceEndpoint(ctx context.Context, request *CreateServiceEndpointRequest) (*CreateServiceEndpointResponse, error) {
	if s.next == nil {
		return &CreateServiceEndpointResponse{
			ServiceEndpoint: request.GetServiceEndpoint(),
		}, nil
	}
	return s.Next().CreateServiceEndpoint(ctx, request)
}
func (s *BaseService) UpdateServiceEndpoint(ctx context.Context, request *UpdateServiceEndpointRequest) (*UpdateServiceEndpointResponse, error) {
	if s.next == nil {
		return &UpdateServiceEndpointResponse{
			ServiceEndpoint: request.GetServiceEndpoint(),
		}, nil
	}
	return s.Next().UpdateServiceEndpoint(ctx, request)
}
func (s *BaseService) DeleteServiceEndpoint(ctx context.Context, request *DeleteServiceEndpointRequest) (*DeleteServiceEndpointResponse, error) {
	if s.next == nil {
		return &DeleteServiceEndpointResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteServiceEndpoint(ctx, request)
}
func (s *BaseService) GetServiceEndpoint(ctx context.Context, request *GetServiceEndpointRequest) (*GetServiceEndpointResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetServiceEndpoint(ctx, request)
}
func (s *BaseService) ListServiceEndpoint(ctx context.Context, request *ListServiceEndpointRequest) (*ListServiceEndpointResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListServiceEndpoint(ctx, request)
}

func (s *BaseService) CreateServiceEndpointServiceConnectionModuleRef(ctx context.Context, request *CreateServiceEndpointServiceConnectionModuleRefRequest) (*CreateServiceEndpointServiceConnectionModuleRefResponse, error) {
	if s.next == nil {
		return &CreateServiceEndpointServiceConnectionModuleRefResponse{
			ID: request.ID,
			ServiceEndpointServiceConnectionModuleRef: request.GetServiceEndpointServiceConnectionModuleRef(),
		}, nil
	}
	return s.Next().CreateServiceEndpointServiceConnectionModuleRef(ctx, request)
}

func (s *BaseService) DeleteServiceEndpointServiceConnectionModuleRef(ctx context.Context, request *DeleteServiceEndpointServiceConnectionModuleRefRequest) (*DeleteServiceEndpointServiceConnectionModuleRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceEndpointServiceConnectionModuleRefResponse{
			ID: request.ID,
			ServiceEndpointServiceConnectionModuleRef: request.GetServiceEndpointServiceConnectionModuleRef(),
		}, nil
	}
	return s.Next().DeleteServiceEndpointServiceConnectionModuleRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceEndpointServiceConnectionModuleRef(ctx context.Context, request *CreateServiceEndpointServiceConnectionModuleRefRequest) (*CreateServiceEndpointServiceConnectionModuleRefResponse, error) {
	refField := models.ServiceEndpointFieldServiceConnectionModuleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceEndpoint(ctx, &GetServiceEndpointRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceEndpoint
		obj.AddServiceConnectionModuleRef(request.ServiceEndpointServiceConnectionModuleRef)

		_, err = s.BaseService.UpdateServiceEndpoint(ctx, &UpdateServiceEndpointRequest{
			ServiceEndpoint: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceEndpointServiceConnectionModuleRefResponse{
		ID: request.ID,
		ServiceEndpointServiceConnectionModuleRef: request.GetServiceEndpointServiceConnectionModuleRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceEndpointServiceConnectionModuleRef(ctx context.Context, request *DeleteServiceEndpointServiceConnectionModuleRefRequest) (*DeleteServiceEndpointServiceConnectionModuleRefResponse, error) {
	refField := models.ServiceEndpointFieldServiceConnectionModuleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceEndpoint(ctx, &GetServiceEndpointRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceEndpoint
		obj.RemoveServiceConnectionModuleRef(request.ServiceEndpointServiceConnectionModuleRef)

		_, err = s.BaseService.UpdateServiceEndpoint(ctx, &UpdateServiceEndpointRequest{
			ServiceEndpoint: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceEndpointServiceConnectionModuleRefResponse{
		ID: request.ID,
		ServiceEndpointServiceConnectionModuleRef: request.GetServiceEndpointServiceConnectionModuleRef(),
	}, nil
}

func (s *BaseService) CreateServiceEndpointServiceObjectRef(ctx context.Context, request *CreateServiceEndpointServiceObjectRefRequest) (*CreateServiceEndpointServiceObjectRefResponse, error) {
	if s.next == nil {
		return &CreateServiceEndpointServiceObjectRefResponse{
			ID:                              request.ID,
			ServiceEndpointServiceObjectRef: request.GetServiceEndpointServiceObjectRef(),
		}, nil
	}
	return s.Next().CreateServiceEndpointServiceObjectRef(ctx, request)
}

func (s *BaseService) DeleteServiceEndpointServiceObjectRef(ctx context.Context, request *DeleteServiceEndpointServiceObjectRefRequest) (*DeleteServiceEndpointServiceObjectRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceEndpointServiceObjectRefResponse{
			ID:                              request.ID,
			ServiceEndpointServiceObjectRef: request.GetServiceEndpointServiceObjectRef(),
		}, nil
	}
	return s.Next().DeleteServiceEndpointServiceObjectRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceEndpointServiceObjectRef(ctx context.Context, request *CreateServiceEndpointServiceObjectRefRequest) (*CreateServiceEndpointServiceObjectRefResponse, error) {
	refField := models.ServiceEndpointFieldServiceObjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceEndpoint(ctx, &GetServiceEndpointRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceEndpoint
		obj.AddServiceObjectRef(request.ServiceEndpointServiceObjectRef)

		_, err = s.BaseService.UpdateServiceEndpoint(ctx, &UpdateServiceEndpointRequest{
			ServiceEndpoint: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceEndpointServiceObjectRefResponse{
		ID:                              request.ID,
		ServiceEndpointServiceObjectRef: request.GetServiceEndpointServiceObjectRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceEndpointServiceObjectRef(ctx context.Context, request *DeleteServiceEndpointServiceObjectRefRequest) (*DeleteServiceEndpointServiceObjectRefResponse, error) {
	refField := models.ServiceEndpointFieldServiceObjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceEndpoint(ctx, &GetServiceEndpointRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceEndpoint
		obj.RemoveServiceObjectRef(request.ServiceEndpointServiceObjectRef)

		_, err = s.BaseService.UpdateServiceEndpoint(ctx, &UpdateServiceEndpointRequest{
			ServiceEndpoint: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceEndpointServiceObjectRefResponse{
		ID:                              request.ID,
		ServiceEndpointServiceObjectRef: request.GetServiceEndpointServiceObjectRef(),
	}, nil
}

func (s *BaseService) CreateServiceEndpointTagRef(ctx context.Context, request *CreateServiceEndpointTagRefRequest) (*CreateServiceEndpointTagRefResponse, error) {
	if s.next == nil {
		return &CreateServiceEndpointTagRefResponse{
			ID:                    request.ID,
			ServiceEndpointTagRef: request.GetServiceEndpointTagRef(),
		}, nil
	}
	return s.Next().CreateServiceEndpointTagRef(ctx, request)
}

func (s *BaseService) DeleteServiceEndpointTagRef(ctx context.Context, request *DeleteServiceEndpointTagRefRequest) (*DeleteServiceEndpointTagRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceEndpointTagRefResponse{
			ID:                    request.ID,
			ServiceEndpointTagRef: request.GetServiceEndpointTagRef(),
		}, nil
	}
	return s.Next().DeleteServiceEndpointTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceEndpointTagRef(ctx context.Context, request *CreateServiceEndpointTagRefRequest) (*CreateServiceEndpointTagRefResponse, error) {
	refField := models.ServiceEndpointFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceEndpoint(ctx, &GetServiceEndpointRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceEndpoint
		obj.AddTagRef(request.ServiceEndpointTagRef)

		_, err = s.BaseService.UpdateServiceEndpoint(ctx, &UpdateServiceEndpointRequest{
			ServiceEndpoint: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceEndpointTagRefResponse{
		ID:                    request.ID,
		ServiceEndpointTagRef: request.GetServiceEndpointTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceEndpointTagRef(ctx context.Context, request *DeleteServiceEndpointTagRefRequest) (*DeleteServiceEndpointTagRefResponse, error) {
	refField := models.ServiceEndpointFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceEndpoint(ctx, &GetServiceEndpointRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceEndpoint
		obj.RemoveTagRef(request.ServiceEndpointTagRef)

		_, err = s.BaseService.UpdateServiceEndpoint(ctx, &UpdateServiceEndpointRequest{
			ServiceEndpoint: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceEndpointTagRefResponse{
		ID:                    request.ID,
		ServiceEndpointTagRef: request.GetServiceEndpointTagRef(),
	}, nil
}

func (s *BaseService) CreateServiceEndpointPhysicalRouterRef(ctx context.Context, request *CreateServiceEndpointPhysicalRouterRefRequest) (*CreateServiceEndpointPhysicalRouterRefResponse, error) {
	if s.next == nil {
		return &CreateServiceEndpointPhysicalRouterRefResponse{
			ID:                               request.ID,
			ServiceEndpointPhysicalRouterRef: request.GetServiceEndpointPhysicalRouterRef(),
		}, nil
	}
	return s.Next().CreateServiceEndpointPhysicalRouterRef(ctx, request)
}

func (s *BaseService) DeleteServiceEndpointPhysicalRouterRef(ctx context.Context, request *DeleteServiceEndpointPhysicalRouterRefRequest) (*DeleteServiceEndpointPhysicalRouterRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceEndpointPhysicalRouterRefResponse{
			ID:                               request.ID,
			ServiceEndpointPhysicalRouterRef: request.GetServiceEndpointPhysicalRouterRef(),
		}, nil
	}
	return s.Next().DeleteServiceEndpointPhysicalRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceEndpointPhysicalRouterRef(ctx context.Context, request *CreateServiceEndpointPhysicalRouterRefRequest) (*CreateServiceEndpointPhysicalRouterRefResponse, error) {
	refField := models.ServiceEndpointFieldPhysicalRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceEndpoint(ctx, &GetServiceEndpointRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceEndpoint
		obj.AddPhysicalRouterRef(request.ServiceEndpointPhysicalRouterRef)

		_, err = s.BaseService.UpdateServiceEndpoint(ctx, &UpdateServiceEndpointRequest{
			ServiceEndpoint: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceEndpointPhysicalRouterRefResponse{
		ID:                               request.ID,
		ServiceEndpointPhysicalRouterRef: request.GetServiceEndpointPhysicalRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceEndpointPhysicalRouterRef(ctx context.Context, request *DeleteServiceEndpointPhysicalRouterRefRequest) (*DeleteServiceEndpointPhysicalRouterRefResponse, error) {
	refField := models.ServiceEndpointFieldPhysicalRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceEndpoint(ctx, &GetServiceEndpointRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceEndpoint
		obj.RemovePhysicalRouterRef(request.ServiceEndpointPhysicalRouterRef)

		_, err = s.BaseService.UpdateServiceEndpoint(ctx, &UpdateServiceEndpointRequest{
			ServiceEndpoint: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceEndpointPhysicalRouterRefResponse{
		ID:                               request.ID,
		ServiceEndpointPhysicalRouterRef: request.GetServiceEndpointPhysicalRouterRef(),
	}, nil
}

func (s *EventProducerService) CreateServiceEndpoint(ctx context.Context, request *CreateServiceEndpointRequest) (*CreateServiceEndpointResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateServiceEndpointRequest{
				CreateServiceEndpointRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceEndpoint(ctx, request)
}
func (s *EventProducerService) UpdateServiceEndpoint(ctx context.Context, request *UpdateServiceEndpointRequest) (*UpdateServiceEndpointResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateServiceEndpointRequest{
				UpdateServiceEndpointRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateServiceEndpoint(ctx, request)
}
func (s *EventProducerService) DeleteServiceEndpoint(ctx context.Context, request *DeleteServiceEndpointRequest) (*DeleteServiceEndpointResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteServiceEndpointRequest{
				DeleteServiceEndpointRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceEndpoint(ctx, request)
}

func (s *EventProducerService) CreateServiceEndpointTagRef(ctx context.Context, request *CreateServiceEndpointTagRefRequest) (*CreateServiceEndpointTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceEndpointTagRefRequest{
			CreateServiceEndpointTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceEndpointTagRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceEndpointTagRef(ctx context.Context, request *DeleteServiceEndpointTagRefRequest) (*DeleteServiceEndpointTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceEndpointTagRefRequest{
			DeleteServiceEndpointTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceEndpointTagRef(ctx, request)
}

func (s *EventProducerService) CreateServiceEndpointPhysicalRouterRef(ctx context.Context, request *CreateServiceEndpointPhysicalRouterRefRequest) (*CreateServiceEndpointPhysicalRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceEndpointPhysicalRouterRefRequest{
			CreateServiceEndpointPhysicalRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceEndpointPhysicalRouterRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceEndpointPhysicalRouterRef(ctx context.Context, request *DeleteServiceEndpointPhysicalRouterRefRequest) (*DeleteServiceEndpointPhysicalRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceEndpointPhysicalRouterRefRequest{
			DeleteServiceEndpointPhysicalRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceEndpointPhysicalRouterRef(ctx, request)
}

func (s *EventProducerService) CreateServiceEndpointServiceConnectionModuleRef(ctx context.Context, request *CreateServiceEndpointServiceConnectionModuleRefRequest) (*CreateServiceEndpointServiceConnectionModuleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceEndpointServiceConnectionModuleRefRequest{
			CreateServiceEndpointServiceConnectionModuleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceEndpointServiceConnectionModuleRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceEndpointServiceConnectionModuleRef(ctx context.Context, request *DeleteServiceEndpointServiceConnectionModuleRefRequest) (*DeleteServiceEndpointServiceConnectionModuleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceEndpointServiceConnectionModuleRefRequest{
			DeleteServiceEndpointServiceConnectionModuleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceEndpointServiceConnectionModuleRef(ctx, request)
}

func (s *EventProducerService) CreateServiceEndpointServiceObjectRef(ctx context.Context, request *CreateServiceEndpointServiceObjectRefRequest) (*CreateServiceEndpointServiceObjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceEndpointServiceObjectRefRequest{
			CreateServiceEndpointServiceObjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceEndpointServiceObjectRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceEndpointServiceObjectRef(ctx context.Context, request *DeleteServiceEndpointServiceObjectRefRequest) (*DeleteServiceEndpointServiceObjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceEndpointServiceObjectRefRequest{
			DeleteServiceEndpointServiceObjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceEndpointServiceObjectRef(ctx, request)
}

func (e *Event_CreateServiceEndpointRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceEndpointRequest
	model := request.ServiceEndpoint
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetServiceEndpoint(ctx,
			&GetServiceEndpointRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateServiceEndpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateServiceEndpointRequest{
			CreateServiceEndpointRequest: &CreateServiceEndpointRequest{
				ServiceEndpoint: response.GetServiceEndpoint(),
			},
		},
	}, nil
}

func (e *Event_CreateServiceEndpointRequest) ToUpdateEvent() *Event {
	request := e.CreateServiceEndpointRequest
	model := request.ServiceEndpoint
	return &Event{
		Request: &Event_UpdateServiceEndpointRequest{
			UpdateServiceEndpointRequest: &UpdateServiceEndpointRequest{
				ServiceEndpoint: model,
				FieldMask:       request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateServiceEndpointRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateServiceEndpointRequest
	response, err := service.UpdateServiceEndpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateServiceEndpointRequest{
			UpdateServiceEndpointRequest: &UpdateServiceEndpointRequest{
				ServiceEndpoint: response.GetServiceEndpoint(),
			},
		},
	}, nil
}

func (e *Event_UpdateServiceEndpointRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteServiceEndpointRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceEndpointRequest
	_, err := service.DeleteServiceEndpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteServiceEndpointRequest{
			DeleteServiceEndpointRequest: &DeleteServiceEndpointRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateServiceEndpointServiceConnectionModuleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceEndpointServiceConnectionModuleRefRequest
	if _, err := service.CreateServiceEndpointServiceConnectionModuleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceEndpointServiceConnectionModuleRefRequest{
		CreateServiceEndpointServiceConnectionModuleRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceEndpointServiceConnectionModuleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceEndpointServiceConnectionModuleRefRequest
	if _, err := service.DeleteServiceEndpointServiceConnectionModuleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceEndpointServiceConnectionModuleRefRequest{
		DeleteServiceEndpointServiceConnectionModuleRefRequest: request,
	}}, nil
}

func (e *Event_CreateServiceEndpointServiceObjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceEndpointServiceObjectRefRequest
	if _, err := service.CreateServiceEndpointServiceObjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceEndpointServiceObjectRefRequest{
		CreateServiceEndpointServiceObjectRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceEndpointServiceObjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceEndpointServiceObjectRefRequest
	if _, err := service.DeleteServiceEndpointServiceObjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceEndpointServiceObjectRefRequest{
		DeleteServiceEndpointServiceObjectRefRequest: request,
	}}, nil
}

func (e *Event_CreateServiceEndpointTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceEndpointTagRefRequest
	if _, err := service.CreateServiceEndpointTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceEndpointTagRefRequest{
		CreateServiceEndpointTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceEndpointTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceEndpointTagRefRequest
	if _, err := service.DeleteServiceEndpointTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceEndpointTagRefRequest{
		DeleteServiceEndpointTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateServiceEndpointPhysicalRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceEndpointPhysicalRouterRefRequest
	if _, err := service.CreateServiceEndpointPhysicalRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceEndpointPhysicalRouterRefRequest{
		CreateServiceEndpointPhysicalRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceEndpointPhysicalRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceEndpointPhysicalRouterRefRequest
	if _, err := service.DeleteServiceEndpointPhysicalRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceEndpointPhysicalRouterRefRequest{
		DeleteServiceEndpointPhysicalRouterRefRequest: request,
	}}, nil
}

type ServiceGroup = models.ServiceGroup

func (s *BaseService) CreateServiceGroup(ctx context.Context, request *CreateServiceGroupRequest) (*CreateServiceGroupResponse, error) {
	if s.next == nil {
		return &CreateServiceGroupResponse{
			ServiceGroup: request.GetServiceGroup(),
		}, nil
	}
	return s.Next().CreateServiceGroup(ctx, request)
}
func (s *BaseService) UpdateServiceGroup(ctx context.Context, request *UpdateServiceGroupRequest) (*UpdateServiceGroupResponse, error) {
	if s.next == nil {
		return &UpdateServiceGroupResponse{
			ServiceGroup: request.GetServiceGroup(),
		}, nil
	}
	return s.Next().UpdateServiceGroup(ctx, request)
}
func (s *BaseService) DeleteServiceGroup(ctx context.Context, request *DeleteServiceGroupRequest) (*DeleteServiceGroupResponse, error) {
	if s.next == nil {
		return &DeleteServiceGroupResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteServiceGroup(ctx, request)
}
func (s *BaseService) GetServiceGroup(ctx context.Context, request *GetServiceGroupRequest) (*GetServiceGroupResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetServiceGroup(ctx, request)
}
func (s *BaseService) ListServiceGroup(ctx context.Context, request *ListServiceGroupRequest) (*ListServiceGroupResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListServiceGroup(ctx, request)
}

func (s *BaseService) CreateServiceGroupTagRef(ctx context.Context, request *CreateServiceGroupTagRefRequest) (*CreateServiceGroupTagRefResponse, error) {
	if s.next == nil {
		return &CreateServiceGroupTagRefResponse{
			ID:                 request.ID,
			ServiceGroupTagRef: request.GetServiceGroupTagRef(),
		}, nil
	}
	return s.Next().CreateServiceGroupTagRef(ctx, request)
}

func (s *BaseService) DeleteServiceGroupTagRef(ctx context.Context, request *DeleteServiceGroupTagRefRequest) (*DeleteServiceGroupTagRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceGroupTagRefResponse{
			ID:                 request.ID,
			ServiceGroupTagRef: request.GetServiceGroupTagRef(),
		}, nil
	}
	return s.Next().DeleteServiceGroupTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceGroupTagRef(ctx context.Context, request *CreateServiceGroupTagRefRequest) (*CreateServiceGroupTagRefResponse, error) {
	refField := models.ServiceGroupFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceGroup(ctx, &GetServiceGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceGroup
		obj.AddTagRef(request.ServiceGroupTagRef)

		_, err = s.BaseService.UpdateServiceGroup(ctx, &UpdateServiceGroupRequest{
			ServiceGroup: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceGroupTagRefResponse{
		ID:                 request.ID,
		ServiceGroupTagRef: request.GetServiceGroupTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceGroupTagRef(ctx context.Context, request *DeleteServiceGroupTagRefRequest) (*DeleteServiceGroupTagRefResponse, error) {
	refField := models.ServiceGroupFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceGroup(ctx, &GetServiceGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceGroup
		obj.RemoveTagRef(request.ServiceGroupTagRef)

		_, err = s.BaseService.UpdateServiceGroup(ctx, &UpdateServiceGroupRequest{
			ServiceGroup: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceGroupTagRefResponse{
		ID:                 request.ID,
		ServiceGroupTagRef: request.GetServiceGroupTagRef(),
	}, nil
}

func (s *EventProducerService) CreateServiceGroup(ctx context.Context, request *CreateServiceGroupRequest) (*CreateServiceGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateServiceGroupRequest{
				CreateServiceGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceGroup(ctx, request)
}
func (s *EventProducerService) UpdateServiceGroup(ctx context.Context, request *UpdateServiceGroupRequest) (*UpdateServiceGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateServiceGroupRequest{
				UpdateServiceGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateServiceGroup(ctx, request)
}
func (s *EventProducerService) DeleteServiceGroup(ctx context.Context, request *DeleteServiceGroupRequest) (*DeleteServiceGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteServiceGroupRequest{
				DeleteServiceGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceGroup(ctx, request)
}

func (s *EventProducerService) CreateServiceGroupTagRef(ctx context.Context, request *CreateServiceGroupTagRefRequest) (*CreateServiceGroupTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceGroupTagRefRequest{
			CreateServiceGroupTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceGroupTagRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceGroupTagRef(ctx context.Context, request *DeleteServiceGroupTagRefRequest) (*DeleteServiceGroupTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceGroupTagRefRequest{
			DeleteServiceGroupTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceGroupTagRef(ctx, request)
}

func (e *Event_CreateServiceGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceGroupRequest
	model := request.ServiceGroup
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetServiceGroup(ctx,
			&GetServiceGroupRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateServiceGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateServiceGroupRequest{
			CreateServiceGroupRequest: &CreateServiceGroupRequest{
				ServiceGroup: response.GetServiceGroup(),
			},
		},
	}, nil
}

func (e *Event_CreateServiceGroupRequest) ToUpdateEvent() *Event {
	request := e.CreateServiceGroupRequest
	model := request.ServiceGroup
	return &Event{
		Request: &Event_UpdateServiceGroupRequest{
			UpdateServiceGroupRequest: &UpdateServiceGroupRequest{
				ServiceGroup: model,
				FieldMask:    request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateServiceGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateServiceGroupRequest
	response, err := service.UpdateServiceGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateServiceGroupRequest{
			UpdateServiceGroupRequest: &UpdateServiceGroupRequest{
				ServiceGroup: response.GetServiceGroup(),
			},
		},
	}, nil
}

func (e *Event_UpdateServiceGroupRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteServiceGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceGroupRequest
	_, err := service.DeleteServiceGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteServiceGroupRequest{
			DeleteServiceGroupRequest: &DeleteServiceGroupRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateServiceGroupTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceGroupTagRefRequest
	if _, err := service.CreateServiceGroupTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceGroupTagRefRequest{
		CreateServiceGroupTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceGroupTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceGroupTagRefRequest
	if _, err := service.DeleteServiceGroupTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceGroupTagRefRequest{
		DeleteServiceGroupTagRefRequest: request,
	}}, nil
}

type ServiceHealthCheck = models.ServiceHealthCheck

func (s *BaseService) CreateServiceHealthCheck(ctx context.Context, request *CreateServiceHealthCheckRequest) (*CreateServiceHealthCheckResponse, error) {
	if s.next == nil {
		return &CreateServiceHealthCheckResponse{
			ServiceHealthCheck: request.GetServiceHealthCheck(),
		}, nil
	}
	return s.Next().CreateServiceHealthCheck(ctx, request)
}
func (s *BaseService) UpdateServiceHealthCheck(ctx context.Context, request *UpdateServiceHealthCheckRequest) (*UpdateServiceHealthCheckResponse, error) {
	if s.next == nil {
		return &UpdateServiceHealthCheckResponse{
			ServiceHealthCheck: request.GetServiceHealthCheck(),
		}, nil
	}
	return s.Next().UpdateServiceHealthCheck(ctx, request)
}
func (s *BaseService) DeleteServiceHealthCheck(ctx context.Context, request *DeleteServiceHealthCheckRequest) (*DeleteServiceHealthCheckResponse, error) {
	if s.next == nil {
		return &DeleteServiceHealthCheckResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteServiceHealthCheck(ctx, request)
}
func (s *BaseService) GetServiceHealthCheck(ctx context.Context, request *GetServiceHealthCheckRequest) (*GetServiceHealthCheckResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetServiceHealthCheck(ctx, request)
}
func (s *BaseService) ListServiceHealthCheck(ctx context.Context, request *ListServiceHealthCheckRequest) (*ListServiceHealthCheckResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListServiceHealthCheck(ctx, request)
}

func (s *BaseService) CreateServiceHealthCheckServiceInstanceRef(ctx context.Context, request *CreateServiceHealthCheckServiceInstanceRefRequest) (*CreateServiceHealthCheckServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &CreateServiceHealthCheckServiceInstanceRefResponse{
			ID:                                   request.ID,
			ServiceHealthCheckServiceInstanceRef: request.GetServiceHealthCheckServiceInstanceRef(),
		}, nil
	}
	return s.Next().CreateServiceHealthCheckServiceInstanceRef(ctx, request)
}

func (s *BaseService) DeleteServiceHealthCheckServiceInstanceRef(ctx context.Context, request *DeleteServiceHealthCheckServiceInstanceRefRequest) (*DeleteServiceHealthCheckServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceHealthCheckServiceInstanceRefResponse{
			ID:                                   request.ID,
			ServiceHealthCheckServiceInstanceRef: request.GetServiceHealthCheckServiceInstanceRef(),
		}, nil
	}
	return s.Next().DeleteServiceHealthCheckServiceInstanceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceHealthCheckServiceInstanceRef(ctx context.Context, request *CreateServiceHealthCheckServiceInstanceRefRequest) (*CreateServiceHealthCheckServiceInstanceRefResponse, error) {
	refField := models.ServiceHealthCheckFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceHealthCheck(ctx, &GetServiceHealthCheckRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceHealthCheck
		obj.AddServiceInstanceRef(request.ServiceHealthCheckServiceInstanceRef)

		_, err = s.BaseService.UpdateServiceHealthCheck(ctx, &UpdateServiceHealthCheckRequest{
			ServiceHealthCheck: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceHealthCheckServiceInstanceRefResponse{
		ID:                                   request.ID,
		ServiceHealthCheckServiceInstanceRef: request.GetServiceHealthCheckServiceInstanceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceHealthCheckServiceInstanceRef(ctx context.Context, request *DeleteServiceHealthCheckServiceInstanceRefRequest) (*DeleteServiceHealthCheckServiceInstanceRefResponse, error) {
	refField := models.ServiceHealthCheckFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceHealthCheck(ctx, &GetServiceHealthCheckRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceHealthCheck
		obj.RemoveServiceInstanceRef(request.ServiceHealthCheckServiceInstanceRef)

		_, err = s.BaseService.UpdateServiceHealthCheck(ctx, &UpdateServiceHealthCheckRequest{
			ServiceHealthCheck: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceHealthCheckServiceInstanceRefResponse{
		ID:                                   request.ID,
		ServiceHealthCheckServiceInstanceRef: request.GetServiceHealthCheckServiceInstanceRef(),
	}, nil
}

func (s *BaseService) CreateServiceHealthCheckTagRef(ctx context.Context, request *CreateServiceHealthCheckTagRefRequest) (*CreateServiceHealthCheckTagRefResponse, error) {
	if s.next == nil {
		return &CreateServiceHealthCheckTagRefResponse{
			ID:                       request.ID,
			ServiceHealthCheckTagRef: request.GetServiceHealthCheckTagRef(),
		}, nil
	}
	return s.Next().CreateServiceHealthCheckTagRef(ctx, request)
}

func (s *BaseService) DeleteServiceHealthCheckTagRef(ctx context.Context, request *DeleteServiceHealthCheckTagRefRequest) (*DeleteServiceHealthCheckTagRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceHealthCheckTagRefResponse{
			ID:                       request.ID,
			ServiceHealthCheckTagRef: request.GetServiceHealthCheckTagRef(),
		}, nil
	}
	return s.Next().DeleteServiceHealthCheckTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceHealthCheckTagRef(ctx context.Context, request *CreateServiceHealthCheckTagRefRequest) (*CreateServiceHealthCheckTagRefResponse, error) {
	refField := models.ServiceHealthCheckFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceHealthCheck(ctx, &GetServiceHealthCheckRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceHealthCheck
		obj.AddTagRef(request.ServiceHealthCheckTagRef)

		_, err = s.BaseService.UpdateServiceHealthCheck(ctx, &UpdateServiceHealthCheckRequest{
			ServiceHealthCheck: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceHealthCheckTagRefResponse{
		ID:                       request.ID,
		ServiceHealthCheckTagRef: request.GetServiceHealthCheckTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceHealthCheckTagRef(ctx context.Context, request *DeleteServiceHealthCheckTagRefRequest) (*DeleteServiceHealthCheckTagRefResponse, error) {
	refField := models.ServiceHealthCheckFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceHealthCheck(ctx, &GetServiceHealthCheckRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceHealthCheck
		obj.RemoveTagRef(request.ServiceHealthCheckTagRef)

		_, err = s.BaseService.UpdateServiceHealthCheck(ctx, &UpdateServiceHealthCheckRequest{
			ServiceHealthCheck: obj,
			FieldMask:          types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceHealthCheckTagRefResponse{
		ID:                       request.ID,
		ServiceHealthCheckTagRef: request.GetServiceHealthCheckTagRef(),
	}, nil
}

func (s *EventProducerService) CreateServiceHealthCheck(ctx context.Context, request *CreateServiceHealthCheckRequest) (*CreateServiceHealthCheckResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateServiceHealthCheckRequest{
				CreateServiceHealthCheckRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceHealthCheck(ctx, request)
}
func (s *EventProducerService) UpdateServiceHealthCheck(ctx context.Context, request *UpdateServiceHealthCheckRequest) (*UpdateServiceHealthCheckResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateServiceHealthCheckRequest{
				UpdateServiceHealthCheckRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateServiceHealthCheck(ctx, request)
}
func (s *EventProducerService) DeleteServiceHealthCheck(ctx context.Context, request *DeleteServiceHealthCheckRequest) (*DeleteServiceHealthCheckResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteServiceHealthCheckRequest{
				DeleteServiceHealthCheckRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceHealthCheck(ctx, request)
}

func (s *EventProducerService) CreateServiceHealthCheckServiceInstanceRef(ctx context.Context, request *CreateServiceHealthCheckServiceInstanceRefRequest) (*CreateServiceHealthCheckServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceHealthCheckServiceInstanceRefRequest{
			CreateServiceHealthCheckServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceHealthCheckServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceHealthCheckServiceInstanceRef(ctx context.Context, request *DeleteServiceHealthCheckServiceInstanceRefRequest) (*DeleteServiceHealthCheckServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceHealthCheckServiceInstanceRefRequest{
			DeleteServiceHealthCheckServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceHealthCheckServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) CreateServiceHealthCheckTagRef(ctx context.Context, request *CreateServiceHealthCheckTagRefRequest) (*CreateServiceHealthCheckTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceHealthCheckTagRefRequest{
			CreateServiceHealthCheckTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceHealthCheckTagRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceHealthCheckTagRef(ctx context.Context, request *DeleteServiceHealthCheckTagRefRequest) (*DeleteServiceHealthCheckTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceHealthCheckTagRefRequest{
			DeleteServiceHealthCheckTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceHealthCheckTagRef(ctx, request)
}

func (e *Event_CreateServiceHealthCheckRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceHealthCheckRequest
	model := request.ServiceHealthCheck
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetServiceHealthCheck(ctx,
			&GetServiceHealthCheckRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateServiceHealthCheck(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateServiceHealthCheckRequest{
			CreateServiceHealthCheckRequest: &CreateServiceHealthCheckRequest{
				ServiceHealthCheck: response.GetServiceHealthCheck(),
			},
		},
	}, nil
}

func (e *Event_CreateServiceHealthCheckRequest) ToUpdateEvent() *Event {
	request := e.CreateServiceHealthCheckRequest
	model := request.ServiceHealthCheck
	return &Event{
		Request: &Event_UpdateServiceHealthCheckRequest{
			UpdateServiceHealthCheckRequest: &UpdateServiceHealthCheckRequest{
				ServiceHealthCheck: model,
				FieldMask:          request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateServiceHealthCheckRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateServiceHealthCheckRequest
	response, err := service.UpdateServiceHealthCheck(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateServiceHealthCheckRequest{
			UpdateServiceHealthCheckRequest: &UpdateServiceHealthCheckRequest{
				ServiceHealthCheck: response.GetServiceHealthCheck(),
			},
		},
	}, nil
}

func (e *Event_UpdateServiceHealthCheckRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteServiceHealthCheckRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceHealthCheckRequest
	_, err := service.DeleteServiceHealthCheck(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteServiceHealthCheckRequest{
			DeleteServiceHealthCheckRequest: &DeleteServiceHealthCheckRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateServiceHealthCheckServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceHealthCheckServiceInstanceRefRequest
	if _, err := service.CreateServiceHealthCheckServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceHealthCheckServiceInstanceRefRequest{
		CreateServiceHealthCheckServiceInstanceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceHealthCheckServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceHealthCheckServiceInstanceRefRequest
	if _, err := service.DeleteServiceHealthCheckServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceHealthCheckServiceInstanceRefRequest{
		DeleteServiceHealthCheckServiceInstanceRefRequest: request,
	}}, nil
}

func (e *Event_CreateServiceHealthCheckTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceHealthCheckTagRefRequest
	if _, err := service.CreateServiceHealthCheckTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceHealthCheckTagRefRequest{
		CreateServiceHealthCheckTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceHealthCheckTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceHealthCheckTagRefRequest
	if _, err := service.DeleteServiceHealthCheckTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceHealthCheckTagRefRequest{
		DeleteServiceHealthCheckTagRefRequest: request,
	}}, nil
}

type ServiceInstance = models.ServiceInstance

func (s *BaseService) CreateServiceInstance(ctx context.Context, request *CreateServiceInstanceRequest) (*CreateServiceInstanceResponse, error) {
	if s.next == nil {
		return &CreateServiceInstanceResponse{
			ServiceInstance: request.GetServiceInstance(),
		}, nil
	}
	return s.Next().CreateServiceInstance(ctx, request)
}
func (s *BaseService) UpdateServiceInstance(ctx context.Context, request *UpdateServiceInstanceRequest) (*UpdateServiceInstanceResponse, error) {
	if s.next == nil {
		return &UpdateServiceInstanceResponse{
			ServiceInstance: request.GetServiceInstance(),
		}, nil
	}
	return s.Next().UpdateServiceInstance(ctx, request)
}
func (s *BaseService) DeleteServiceInstance(ctx context.Context, request *DeleteServiceInstanceRequest) (*DeleteServiceInstanceResponse, error) {
	if s.next == nil {
		return &DeleteServiceInstanceResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteServiceInstance(ctx, request)
}
func (s *BaseService) GetServiceInstance(ctx context.Context, request *GetServiceInstanceRequest) (*GetServiceInstanceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetServiceInstance(ctx, request)
}
func (s *BaseService) ListServiceInstance(ctx context.Context, request *ListServiceInstanceRequest) (*ListServiceInstanceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListServiceInstance(ctx, request)
}

func (s *BaseService) CreateServiceInstanceInstanceIPRef(ctx context.Context, request *CreateServiceInstanceInstanceIPRefRequest) (*CreateServiceInstanceInstanceIPRefResponse, error) {
	if s.next == nil {
		return &CreateServiceInstanceInstanceIPRefResponse{
			ID:                           request.ID,
			ServiceInstanceInstanceIPRef: request.GetServiceInstanceInstanceIPRef(),
		}, nil
	}
	return s.Next().CreateServiceInstanceInstanceIPRef(ctx, request)
}

func (s *BaseService) DeleteServiceInstanceInstanceIPRef(ctx context.Context, request *DeleteServiceInstanceInstanceIPRefRequest) (*DeleteServiceInstanceInstanceIPRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceInstanceInstanceIPRefResponse{
			ID:                           request.ID,
			ServiceInstanceInstanceIPRef: request.GetServiceInstanceInstanceIPRef(),
		}, nil
	}
	return s.Next().DeleteServiceInstanceInstanceIPRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceInstanceInstanceIPRef(ctx context.Context, request *CreateServiceInstanceInstanceIPRefRequest) (*CreateServiceInstanceInstanceIPRefResponse, error) {
	refField := models.ServiceInstanceFieldInstanceIPRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceInstance(ctx, &GetServiceInstanceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceInstance
		obj.AddInstanceIPRef(request.ServiceInstanceInstanceIPRef)

		_, err = s.BaseService.UpdateServiceInstance(ctx, &UpdateServiceInstanceRequest{
			ServiceInstance: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceInstanceInstanceIPRefResponse{
		ID:                           request.ID,
		ServiceInstanceInstanceIPRef: request.GetServiceInstanceInstanceIPRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceInstanceInstanceIPRef(ctx context.Context, request *DeleteServiceInstanceInstanceIPRefRequest) (*DeleteServiceInstanceInstanceIPRefResponse, error) {
	refField := models.ServiceInstanceFieldInstanceIPRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceInstance(ctx, &GetServiceInstanceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceInstance
		obj.RemoveInstanceIPRef(request.ServiceInstanceInstanceIPRef)

		_, err = s.BaseService.UpdateServiceInstance(ctx, &UpdateServiceInstanceRequest{
			ServiceInstance: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceInstanceInstanceIPRefResponse{
		ID:                           request.ID,
		ServiceInstanceInstanceIPRef: request.GetServiceInstanceInstanceIPRef(),
	}, nil
}

func (s *BaseService) CreateServiceInstanceServiceTemplateRef(ctx context.Context, request *CreateServiceInstanceServiceTemplateRefRequest) (*CreateServiceInstanceServiceTemplateRefResponse, error) {
	if s.next == nil {
		return &CreateServiceInstanceServiceTemplateRefResponse{
			ID:                                request.ID,
			ServiceInstanceServiceTemplateRef: request.GetServiceInstanceServiceTemplateRef(),
		}, nil
	}
	return s.Next().CreateServiceInstanceServiceTemplateRef(ctx, request)
}

func (s *BaseService) DeleteServiceInstanceServiceTemplateRef(ctx context.Context, request *DeleteServiceInstanceServiceTemplateRefRequest) (*DeleteServiceInstanceServiceTemplateRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceInstanceServiceTemplateRefResponse{
			ID:                                request.ID,
			ServiceInstanceServiceTemplateRef: request.GetServiceInstanceServiceTemplateRef(),
		}, nil
	}
	return s.Next().DeleteServiceInstanceServiceTemplateRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceInstanceServiceTemplateRef(ctx context.Context, request *CreateServiceInstanceServiceTemplateRefRequest) (*CreateServiceInstanceServiceTemplateRefResponse, error) {
	refField := models.ServiceInstanceFieldServiceTemplateRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceInstance(ctx, &GetServiceInstanceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceInstance
		obj.AddServiceTemplateRef(request.ServiceInstanceServiceTemplateRef)

		_, err = s.BaseService.UpdateServiceInstance(ctx, &UpdateServiceInstanceRequest{
			ServiceInstance: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceInstanceServiceTemplateRefResponse{
		ID:                                request.ID,
		ServiceInstanceServiceTemplateRef: request.GetServiceInstanceServiceTemplateRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceInstanceServiceTemplateRef(ctx context.Context, request *DeleteServiceInstanceServiceTemplateRefRequest) (*DeleteServiceInstanceServiceTemplateRefResponse, error) {
	refField := models.ServiceInstanceFieldServiceTemplateRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceInstance(ctx, &GetServiceInstanceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceInstance
		obj.RemoveServiceTemplateRef(request.ServiceInstanceServiceTemplateRef)

		_, err = s.BaseService.UpdateServiceInstance(ctx, &UpdateServiceInstanceRequest{
			ServiceInstance: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceInstanceServiceTemplateRefResponse{
		ID:                                request.ID,
		ServiceInstanceServiceTemplateRef: request.GetServiceInstanceServiceTemplateRef(),
	}, nil
}

func (s *BaseService) CreateServiceInstanceTagRef(ctx context.Context, request *CreateServiceInstanceTagRefRequest) (*CreateServiceInstanceTagRefResponse, error) {
	if s.next == nil {
		return &CreateServiceInstanceTagRefResponse{
			ID:                    request.ID,
			ServiceInstanceTagRef: request.GetServiceInstanceTagRef(),
		}, nil
	}
	return s.Next().CreateServiceInstanceTagRef(ctx, request)
}

func (s *BaseService) DeleteServiceInstanceTagRef(ctx context.Context, request *DeleteServiceInstanceTagRefRequest) (*DeleteServiceInstanceTagRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceInstanceTagRefResponse{
			ID:                    request.ID,
			ServiceInstanceTagRef: request.GetServiceInstanceTagRef(),
		}, nil
	}
	return s.Next().DeleteServiceInstanceTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceInstanceTagRef(ctx context.Context, request *CreateServiceInstanceTagRefRequest) (*CreateServiceInstanceTagRefResponse, error) {
	refField := models.ServiceInstanceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceInstance(ctx, &GetServiceInstanceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceInstance
		obj.AddTagRef(request.ServiceInstanceTagRef)

		_, err = s.BaseService.UpdateServiceInstance(ctx, &UpdateServiceInstanceRequest{
			ServiceInstance: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceInstanceTagRefResponse{
		ID:                    request.ID,
		ServiceInstanceTagRef: request.GetServiceInstanceTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceInstanceTagRef(ctx context.Context, request *DeleteServiceInstanceTagRefRequest) (*DeleteServiceInstanceTagRefResponse, error) {
	refField := models.ServiceInstanceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceInstance(ctx, &GetServiceInstanceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceInstance
		obj.RemoveTagRef(request.ServiceInstanceTagRef)

		_, err = s.BaseService.UpdateServiceInstance(ctx, &UpdateServiceInstanceRequest{
			ServiceInstance: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceInstanceTagRefResponse{
		ID:                    request.ID,
		ServiceInstanceTagRef: request.GetServiceInstanceTagRef(),
	}, nil
}

func (s *EventProducerService) CreateServiceInstance(ctx context.Context, request *CreateServiceInstanceRequest) (*CreateServiceInstanceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateServiceInstanceRequest{
				CreateServiceInstanceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceInstance(ctx, request)
}
func (s *EventProducerService) UpdateServiceInstance(ctx context.Context, request *UpdateServiceInstanceRequest) (*UpdateServiceInstanceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateServiceInstanceRequest{
				UpdateServiceInstanceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateServiceInstance(ctx, request)
}
func (s *EventProducerService) DeleteServiceInstance(ctx context.Context, request *DeleteServiceInstanceRequest) (*DeleteServiceInstanceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteServiceInstanceRequest{
				DeleteServiceInstanceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceInstance(ctx, request)
}

func (s *EventProducerService) CreateServiceInstanceTagRef(ctx context.Context, request *CreateServiceInstanceTagRefRequest) (*CreateServiceInstanceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceInstanceTagRefRequest{
			CreateServiceInstanceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceInstanceTagRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceInstanceTagRef(ctx context.Context, request *DeleteServiceInstanceTagRefRequest) (*DeleteServiceInstanceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceInstanceTagRefRequest{
			DeleteServiceInstanceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceInstanceTagRef(ctx, request)
}

func (s *EventProducerService) CreateServiceInstanceInstanceIPRef(ctx context.Context, request *CreateServiceInstanceInstanceIPRefRequest) (*CreateServiceInstanceInstanceIPRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceInstanceInstanceIPRefRequest{
			CreateServiceInstanceInstanceIPRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceInstanceInstanceIPRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceInstanceInstanceIPRef(ctx context.Context, request *DeleteServiceInstanceInstanceIPRefRequest) (*DeleteServiceInstanceInstanceIPRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceInstanceInstanceIPRefRequest{
			DeleteServiceInstanceInstanceIPRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceInstanceInstanceIPRef(ctx, request)
}

func (s *EventProducerService) CreateServiceInstanceServiceTemplateRef(ctx context.Context, request *CreateServiceInstanceServiceTemplateRefRequest) (*CreateServiceInstanceServiceTemplateRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceInstanceServiceTemplateRefRequest{
			CreateServiceInstanceServiceTemplateRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceInstanceServiceTemplateRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceInstanceServiceTemplateRef(ctx context.Context, request *DeleteServiceInstanceServiceTemplateRefRequest) (*DeleteServiceInstanceServiceTemplateRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceInstanceServiceTemplateRefRequest{
			DeleteServiceInstanceServiceTemplateRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceInstanceServiceTemplateRef(ctx, request)
}

func (e *Event_CreateServiceInstanceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceInstanceRequest
	model := request.ServiceInstance
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetServiceInstance(ctx,
			&GetServiceInstanceRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateServiceInstance(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateServiceInstanceRequest{
			CreateServiceInstanceRequest: &CreateServiceInstanceRequest{
				ServiceInstance: response.GetServiceInstance(),
			},
		},
	}, nil
}

func (e *Event_CreateServiceInstanceRequest) ToUpdateEvent() *Event {
	request := e.CreateServiceInstanceRequest
	model := request.ServiceInstance
	return &Event{
		Request: &Event_UpdateServiceInstanceRequest{
			UpdateServiceInstanceRequest: &UpdateServiceInstanceRequest{
				ServiceInstance: model,
				FieldMask:       request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateServiceInstanceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateServiceInstanceRequest
	response, err := service.UpdateServiceInstance(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateServiceInstanceRequest{
			UpdateServiceInstanceRequest: &UpdateServiceInstanceRequest{
				ServiceInstance: response.GetServiceInstance(),
			},
		},
	}, nil
}

func (e *Event_UpdateServiceInstanceRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteServiceInstanceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceInstanceRequest
	_, err := service.DeleteServiceInstance(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteServiceInstanceRequest{
			DeleteServiceInstanceRequest: &DeleteServiceInstanceRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateServiceInstanceInstanceIPRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceInstanceInstanceIPRefRequest
	if _, err := service.CreateServiceInstanceInstanceIPRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceInstanceInstanceIPRefRequest{
		CreateServiceInstanceInstanceIPRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceInstanceInstanceIPRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceInstanceInstanceIPRefRequest
	if _, err := service.DeleteServiceInstanceInstanceIPRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceInstanceInstanceIPRefRequest{
		DeleteServiceInstanceInstanceIPRefRequest: request,
	}}, nil
}

func (e *Event_CreateServiceInstanceServiceTemplateRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceInstanceServiceTemplateRefRequest
	if _, err := service.CreateServiceInstanceServiceTemplateRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceInstanceServiceTemplateRefRequest{
		CreateServiceInstanceServiceTemplateRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceInstanceServiceTemplateRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceInstanceServiceTemplateRefRequest
	if _, err := service.DeleteServiceInstanceServiceTemplateRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceInstanceServiceTemplateRefRequest{
		DeleteServiceInstanceServiceTemplateRefRequest: request,
	}}, nil
}

func (e *Event_CreateServiceInstanceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceInstanceTagRefRequest
	if _, err := service.CreateServiceInstanceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceInstanceTagRefRequest{
		CreateServiceInstanceTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceInstanceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceInstanceTagRefRequest
	if _, err := service.DeleteServiceInstanceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceInstanceTagRefRequest{
		DeleteServiceInstanceTagRefRequest: request,
	}}, nil
}

type ServiceObject = models.ServiceObject

func (s *BaseService) CreateServiceObject(ctx context.Context, request *CreateServiceObjectRequest) (*CreateServiceObjectResponse, error) {
	if s.next == nil {
		return &CreateServiceObjectResponse{
			ServiceObject: request.GetServiceObject(),
		}, nil
	}
	return s.Next().CreateServiceObject(ctx, request)
}
func (s *BaseService) UpdateServiceObject(ctx context.Context, request *UpdateServiceObjectRequest) (*UpdateServiceObjectResponse, error) {
	if s.next == nil {
		return &UpdateServiceObjectResponse{
			ServiceObject: request.GetServiceObject(),
		}, nil
	}
	return s.Next().UpdateServiceObject(ctx, request)
}
func (s *BaseService) DeleteServiceObject(ctx context.Context, request *DeleteServiceObjectRequest) (*DeleteServiceObjectResponse, error) {
	if s.next == nil {
		return &DeleteServiceObjectResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteServiceObject(ctx, request)
}
func (s *BaseService) GetServiceObject(ctx context.Context, request *GetServiceObjectRequest) (*GetServiceObjectResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetServiceObject(ctx, request)
}
func (s *BaseService) ListServiceObject(ctx context.Context, request *ListServiceObjectRequest) (*ListServiceObjectResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListServiceObject(ctx, request)
}

func (s *BaseService) CreateServiceObjectTagRef(ctx context.Context, request *CreateServiceObjectTagRefRequest) (*CreateServiceObjectTagRefResponse, error) {
	if s.next == nil {
		return &CreateServiceObjectTagRefResponse{
			ID:                  request.ID,
			ServiceObjectTagRef: request.GetServiceObjectTagRef(),
		}, nil
	}
	return s.Next().CreateServiceObjectTagRef(ctx, request)
}

func (s *BaseService) DeleteServiceObjectTagRef(ctx context.Context, request *DeleteServiceObjectTagRefRequest) (*DeleteServiceObjectTagRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceObjectTagRefResponse{
			ID:                  request.ID,
			ServiceObjectTagRef: request.GetServiceObjectTagRef(),
		}, nil
	}
	return s.Next().DeleteServiceObjectTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceObjectTagRef(ctx context.Context, request *CreateServiceObjectTagRefRequest) (*CreateServiceObjectTagRefResponse, error) {
	refField := models.ServiceObjectFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceObject(ctx, &GetServiceObjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceObject
		obj.AddTagRef(request.ServiceObjectTagRef)

		_, err = s.BaseService.UpdateServiceObject(ctx, &UpdateServiceObjectRequest{
			ServiceObject: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceObjectTagRefResponse{
		ID:                  request.ID,
		ServiceObjectTagRef: request.GetServiceObjectTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceObjectTagRef(ctx context.Context, request *DeleteServiceObjectTagRefRequest) (*DeleteServiceObjectTagRefResponse, error) {
	refField := models.ServiceObjectFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceObject(ctx, &GetServiceObjectRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceObject
		obj.RemoveTagRef(request.ServiceObjectTagRef)

		_, err = s.BaseService.UpdateServiceObject(ctx, &UpdateServiceObjectRequest{
			ServiceObject: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceObjectTagRefResponse{
		ID:                  request.ID,
		ServiceObjectTagRef: request.GetServiceObjectTagRef(),
	}, nil
}

func (s *EventProducerService) CreateServiceObject(ctx context.Context, request *CreateServiceObjectRequest) (*CreateServiceObjectResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateServiceObjectRequest{
				CreateServiceObjectRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceObject(ctx, request)
}
func (s *EventProducerService) UpdateServiceObject(ctx context.Context, request *UpdateServiceObjectRequest) (*UpdateServiceObjectResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateServiceObjectRequest{
				UpdateServiceObjectRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateServiceObject(ctx, request)
}
func (s *EventProducerService) DeleteServiceObject(ctx context.Context, request *DeleteServiceObjectRequest) (*DeleteServiceObjectResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteServiceObjectRequest{
				DeleteServiceObjectRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceObject(ctx, request)
}

func (s *EventProducerService) CreateServiceObjectTagRef(ctx context.Context, request *CreateServiceObjectTagRefRequest) (*CreateServiceObjectTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceObjectTagRefRequest{
			CreateServiceObjectTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceObjectTagRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceObjectTagRef(ctx context.Context, request *DeleteServiceObjectTagRefRequest) (*DeleteServiceObjectTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceObjectTagRefRequest{
			DeleteServiceObjectTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceObjectTagRef(ctx, request)
}

func (e *Event_CreateServiceObjectRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceObjectRequest
	model := request.ServiceObject
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetServiceObject(ctx,
			&GetServiceObjectRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateServiceObject(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateServiceObjectRequest{
			CreateServiceObjectRequest: &CreateServiceObjectRequest{
				ServiceObject: response.GetServiceObject(),
			},
		},
	}, nil
}

func (e *Event_CreateServiceObjectRequest) ToUpdateEvent() *Event {
	request := e.CreateServiceObjectRequest
	model := request.ServiceObject
	return &Event{
		Request: &Event_UpdateServiceObjectRequest{
			UpdateServiceObjectRequest: &UpdateServiceObjectRequest{
				ServiceObject: model,
				FieldMask:     request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateServiceObjectRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateServiceObjectRequest
	response, err := service.UpdateServiceObject(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateServiceObjectRequest{
			UpdateServiceObjectRequest: &UpdateServiceObjectRequest{
				ServiceObject: response.GetServiceObject(),
			},
		},
	}, nil
}

func (e *Event_UpdateServiceObjectRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteServiceObjectRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceObjectRequest
	_, err := service.DeleteServiceObject(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteServiceObjectRequest{
			DeleteServiceObjectRequest: &DeleteServiceObjectRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateServiceObjectTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceObjectTagRefRequest
	if _, err := service.CreateServiceObjectTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceObjectTagRefRequest{
		CreateServiceObjectTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceObjectTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceObjectTagRefRequest
	if _, err := service.DeleteServiceObjectTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceObjectTagRefRequest{
		DeleteServiceObjectTagRefRequest: request,
	}}, nil
}

type ServiceTemplate = models.ServiceTemplate

func (s *BaseService) CreateServiceTemplate(ctx context.Context, request *CreateServiceTemplateRequest) (*CreateServiceTemplateResponse, error) {
	if s.next == nil {
		return &CreateServiceTemplateResponse{
			ServiceTemplate: request.GetServiceTemplate(),
		}, nil
	}
	return s.Next().CreateServiceTemplate(ctx, request)
}
func (s *BaseService) UpdateServiceTemplate(ctx context.Context, request *UpdateServiceTemplateRequest) (*UpdateServiceTemplateResponse, error) {
	if s.next == nil {
		return &UpdateServiceTemplateResponse{
			ServiceTemplate: request.GetServiceTemplate(),
		}, nil
	}
	return s.Next().UpdateServiceTemplate(ctx, request)
}
func (s *BaseService) DeleteServiceTemplate(ctx context.Context, request *DeleteServiceTemplateRequest) (*DeleteServiceTemplateResponse, error) {
	if s.next == nil {
		return &DeleteServiceTemplateResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteServiceTemplate(ctx, request)
}
func (s *BaseService) GetServiceTemplate(ctx context.Context, request *GetServiceTemplateRequest) (*GetServiceTemplateResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetServiceTemplate(ctx, request)
}
func (s *BaseService) ListServiceTemplate(ctx context.Context, request *ListServiceTemplateRequest) (*ListServiceTemplateResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListServiceTemplate(ctx, request)
}

func (s *BaseService) CreateServiceTemplateTagRef(ctx context.Context, request *CreateServiceTemplateTagRefRequest) (*CreateServiceTemplateTagRefResponse, error) {
	if s.next == nil {
		return &CreateServiceTemplateTagRefResponse{
			ID:                    request.ID,
			ServiceTemplateTagRef: request.GetServiceTemplateTagRef(),
		}, nil
	}
	return s.Next().CreateServiceTemplateTagRef(ctx, request)
}

func (s *BaseService) DeleteServiceTemplateTagRef(ctx context.Context, request *DeleteServiceTemplateTagRefRequest) (*DeleteServiceTemplateTagRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceTemplateTagRefResponse{
			ID:                    request.ID,
			ServiceTemplateTagRef: request.GetServiceTemplateTagRef(),
		}, nil
	}
	return s.Next().DeleteServiceTemplateTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceTemplateTagRef(ctx context.Context, request *CreateServiceTemplateTagRefRequest) (*CreateServiceTemplateTagRefResponse, error) {
	refField := models.ServiceTemplateFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceTemplate(ctx, &GetServiceTemplateRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceTemplate
		obj.AddTagRef(request.ServiceTemplateTagRef)

		_, err = s.BaseService.UpdateServiceTemplate(ctx, &UpdateServiceTemplateRequest{
			ServiceTemplate: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceTemplateTagRefResponse{
		ID:                    request.ID,
		ServiceTemplateTagRef: request.GetServiceTemplateTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceTemplateTagRef(ctx context.Context, request *DeleteServiceTemplateTagRefRequest) (*DeleteServiceTemplateTagRefResponse, error) {
	refField := models.ServiceTemplateFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceTemplate(ctx, &GetServiceTemplateRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceTemplate
		obj.RemoveTagRef(request.ServiceTemplateTagRef)

		_, err = s.BaseService.UpdateServiceTemplate(ctx, &UpdateServiceTemplateRequest{
			ServiceTemplate: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceTemplateTagRefResponse{
		ID:                    request.ID,
		ServiceTemplateTagRef: request.GetServiceTemplateTagRef(),
	}, nil
}

func (s *BaseService) CreateServiceTemplateServiceApplianceSetRef(ctx context.Context, request *CreateServiceTemplateServiceApplianceSetRefRequest) (*CreateServiceTemplateServiceApplianceSetRefResponse, error) {
	if s.next == nil {
		return &CreateServiceTemplateServiceApplianceSetRefResponse{
			ID:                                    request.ID,
			ServiceTemplateServiceApplianceSetRef: request.GetServiceTemplateServiceApplianceSetRef(),
		}, nil
	}
	return s.Next().CreateServiceTemplateServiceApplianceSetRef(ctx, request)
}

func (s *BaseService) DeleteServiceTemplateServiceApplianceSetRef(ctx context.Context, request *DeleteServiceTemplateServiceApplianceSetRefRequest) (*DeleteServiceTemplateServiceApplianceSetRefResponse, error) {
	if s.next == nil {
		return &DeleteServiceTemplateServiceApplianceSetRefResponse{
			ID:                                    request.ID,
			ServiceTemplateServiceApplianceSetRef: request.GetServiceTemplateServiceApplianceSetRef(),
		}, nil
	}
	return s.Next().DeleteServiceTemplateServiceApplianceSetRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateServiceTemplateServiceApplianceSetRef(ctx context.Context, request *CreateServiceTemplateServiceApplianceSetRefRequest) (*CreateServiceTemplateServiceApplianceSetRefResponse, error) {
	refField := models.ServiceTemplateFieldServiceApplianceSetRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceTemplate(ctx, &GetServiceTemplateRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceTemplate
		obj.AddServiceApplianceSetRef(request.ServiceTemplateServiceApplianceSetRef)

		_, err = s.BaseService.UpdateServiceTemplate(ctx, &UpdateServiceTemplateRequest{
			ServiceTemplate: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateServiceTemplateServiceApplianceSetRefResponse{
		ID:                                    request.ID,
		ServiceTemplateServiceApplianceSetRef: request.GetServiceTemplateServiceApplianceSetRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteServiceTemplateServiceApplianceSetRef(ctx context.Context, request *DeleteServiceTemplateServiceApplianceSetRefRequest) (*DeleteServiceTemplateServiceApplianceSetRefResponse, error) {
	refField := models.ServiceTemplateFieldServiceApplianceSetRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetServiceTemplate(ctx, &GetServiceTemplateRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.ServiceTemplate
		obj.RemoveServiceApplianceSetRef(request.ServiceTemplateServiceApplianceSetRef)

		_, err = s.BaseService.UpdateServiceTemplate(ctx, &UpdateServiceTemplateRequest{
			ServiceTemplate: obj,
			FieldMask:       types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteServiceTemplateServiceApplianceSetRefResponse{
		ID:                                    request.ID,
		ServiceTemplateServiceApplianceSetRef: request.GetServiceTemplateServiceApplianceSetRef(),
	}, nil
}

func (s *EventProducerService) CreateServiceTemplate(ctx context.Context, request *CreateServiceTemplateRequest) (*CreateServiceTemplateResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateServiceTemplateRequest{
				CreateServiceTemplateRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceTemplate(ctx, request)
}
func (s *EventProducerService) UpdateServiceTemplate(ctx context.Context, request *UpdateServiceTemplateRequest) (*UpdateServiceTemplateResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateServiceTemplateRequest{
				UpdateServiceTemplateRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateServiceTemplate(ctx, request)
}
func (s *EventProducerService) DeleteServiceTemplate(ctx context.Context, request *DeleteServiceTemplateRequest) (*DeleteServiceTemplateResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteServiceTemplateRequest{
				DeleteServiceTemplateRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceTemplate(ctx, request)
}

func (s *EventProducerService) CreateServiceTemplateServiceApplianceSetRef(ctx context.Context, request *CreateServiceTemplateServiceApplianceSetRefRequest) (*CreateServiceTemplateServiceApplianceSetRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceTemplateServiceApplianceSetRefRequest{
			CreateServiceTemplateServiceApplianceSetRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceTemplateServiceApplianceSetRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceTemplateServiceApplianceSetRef(ctx context.Context, request *DeleteServiceTemplateServiceApplianceSetRefRequest) (*DeleteServiceTemplateServiceApplianceSetRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceTemplateServiceApplianceSetRefRequest{
			DeleteServiceTemplateServiceApplianceSetRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceTemplateServiceApplianceSetRef(ctx, request)
}

func (s *EventProducerService) CreateServiceTemplateTagRef(ctx context.Context, request *CreateServiceTemplateTagRefRequest) (*CreateServiceTemplateTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateServiceTemplateTagRefRequest{
			CreateServiceTemplateTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateServiceTemplateTagRef(ctx, request)
}

func (s *EventProducerService) DeleteServiceTemplateTagRef(ctx context.Context, request *DeleteServiceTemplateTagRefRequest) (*DeleteServiceTemplateTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteServiceTemplateTagRefRequest{
			DeleteServiceTemplateTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteServiceTemplateTagRef(ctx, request)
}

func (e *Event_CreateServiceTemplateRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceTemplateRequest
	model := request.ServiceTemplate
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetServiceTemplate(ctx,
			&GetServiceTemplateRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateServiceTemplate(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateServiceTemplateRequest{
			CreateServiceTemplateRequest: &CreateServiceTemplateRequest{
				ServiceTemplate: response.GetServiceTemplate(),
			},
		},
	}, nil
}

func (e *Event_CreateServiceTemplateRequest) ToUpdateEvent() *Event {
	request := e.CreateServiceTemplateRequest
	model := request.ServiceTemplate
	return &Event{
		Request: &Event_UpdateServiceTemplateRequest{
			UpdateServiceTemplateRequest: &UpdateServiceTemplateRequest{
				ServiceTemplate: model,
				FieldMask:       request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateServiceTemplateRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateServiceTemplateRequest
	response, err := service.UpdateServiceTemplate(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateServiceTemplateRequest{
			UpdateServiceTemplateRequest: &UpdateServiceTemplateRequest{
				ServiceTemplate: response.GetServiceTemplate(),
			},
		},
	}, nil
}

func (e *Event_UpdateServiceTemplateRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteServiceTemplateRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceTemplateRequest
	_, err := service.DeleteServiceTemplate(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteServiceTemplateRequest{
			DeleteServiceTemplateRequest: &DeleteServiceTemplateRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateServiceTemplateServiceApplianceSetRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceTemplateServiceApplianceSetRefRequest
	if _, err := service.CreateServiceTemplateServiceApplianceSetRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceTemplateServiceApplianceSetRefRequest{
		CreateServiceTemplateServiceApplianceSetRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceTemplateServiceApplianceSetRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceTemplateServiceApplianceSetRefRequest
	if _, err := service.DeleteServiceTemplateServiceApplianceSetRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceTemplateServiceApplianceSetRefRequest{
		DeleteServiceTemplateServiceApplianceSetRefRequest: request,
	}}, nil
}

func (e *Event_CreateServiceTemplateTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateServiceTemplateTagRefRequest
	if _, err := service.CreateServiceTemplateTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateServiceTemplateTagRefRequest{
		CreateServiceTemplateTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteServiceTemplateTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteServiceTemplateTagRefRequest
	if _, err := service.DeleteServiceTemplateTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteServiceTemplateTagRefRequest{
		DeleteServiceTemplateTagRefRequest: request,
	}}, nil
}

type SflowProfile = models.SflowProfile

func (s *BaseService) CreateSflowProfile(ctx context.Context, request *CreateSflowProfileRequest) (*CreateSflowProfileResponse, error) {
	if s.next == nil {
		return &CreateSflowProfileResponse{
			SflowProfile: request.GetSflowProfile(),
		}, nil
	}
	return s.Next().CreateSflowProfile(ctx, request)
}
func (s *BaseService) UpdateSflowProfile(ctx context.Context, request *UpdateSflowProfileRequest) (*UpdateSflowProfileResponse, error) {
	if s.next == nil {
		return &UpdateSflowProfileResponse{
			SflowProfile: request.GetSflowProfile(),
		}, nil
	}
	return s.Next().UpdateSflowProfile(ctx, request)
}
func (s *BaseService) DeleteSflowProfile(ctx context.Context, request *DeleteSflowProfileRequest) (*DeleteSflowProfileResponse, error) {
	if s.next == nil {
		return &DeleteSflowProfileResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteSflowProfile(ctx, request)
}
func (s *BaseService) GetSflowProfile(ctx context.Context, request *GetSflowProfileRequest) (*GetSflowProfileResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetSflowProfile(ctx, request)
}
func (s *BaseService) ListSflowProfile(ctx context.Context, request *ListSflowProfileRequest) (*ListSflowProfileResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListSflowProfile(ctx, request)
}

func (s *BaseService) CreateSflowProfileTagRef(ctx context.Context, request *CreateSflowProfileTagRefRequest) (*CreateSflowProfileTagRefResponse, error) {
	if s.next == nil {
		return &CreateSflowProfileTagRefResponse{
			ID:                 request.ID,
			SflowProfileTagRef: request.GetSflowProfileTagRef(),
		}, nil
	}
	return s.Next().CreateSflowProfileTagRef(ctx, request)
}

func (s *BaseService) DeleteSflowProfileTagRef(ctx context.Context, request *DeleteSflowProfileTagRefRequest) (*DeleteSflowProfileTagRefResponse, error) {
	if s.next == nil {
		return &DeleteSflowProfileTagRefResponse{
			ID:                 request.ID,
			SflowProfileTagRef: request.GetSflowProfileTagRef(),
		}, nil
	}
	return s.Next().DeleteSflowProfileTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateSflowProfileTagRef(ctx context.Context, request *CreateSflowProfileTagRefRequest) (*CreateSflowProfileTagRefResponse, error) {
	refField := models.SflowProfileFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSflowProfile(ctx, &GetSflowProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.SflowProfile
		obj.AddTagRef(request.SflowProfileTagRef)

		_, err = s.BaseService.UpdateSflowProfile(ctx, &UpdateSflowProfileRequest{
			SflowProfile: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateSflowProfileTagRefResponse{
		ID:                 request.ID,
		SflowProfileTagRef: request.GetSflowProfileTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteSflowProfileTagRef(ctx context.Context, request *DeleteSflowProfileTagRefRequest) (*DeleteSflowProfileTagRefResponse, error) {
	refField := models.SflowProfileFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSflowProfile(ctx, &GetSflowProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.SflowProfile
		obj.RemoveTagRef(request.SflowProfileTagRef)

		_, err = s.BaseService.UpdateSflowProfile(ctx, &UpdateSflowProfileRequest{
			SflowProfile: obj,
			FieldMask:    types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteSflowProfileTagRefResponse{
		ID:                 request.ID,
		SflowProfileTagRef: request.GetSflowProfileTagRef(),
	}, nil
}

func (s *EventProducerService) CreateSflowProfile(ctx context.Context, request *CreateSflowProfileRequest) (*CreateSflowProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateSflowProfileRequest{
				CreateSflowProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateSflowProfile(ctx, request)
}
func (s *EventProducerService) UpdateSflowProfile(ctx context.Context, request *UpdateSflowProfileRequest) (*UpdateSflowProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateSflowProfileRequest{
				UpdateSflowProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateSflowProfile(ctx, request)
}
func (s *EventProducerService) DeleteSflowProfile(ctx context.Context, request *DeleteSflowProfileRequest) (*DeleteSflowProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteSflowProfileRequest{
				DeleteSflowProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteSflowProfile(ctx, request)
}

func (s *EventProducerService) CreateSflowProfileTagRef(ctx context.Context, request *CreateSflowProfileTagRefRequest) (*CreateSflowProfileTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateSflowProfileTagRefRequest{
			CreateSflowProfileTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateSflowProfileTagRef(ctx, request)
}

func (s *EventProducerService) DeleteSflowProfileTagRef(ctx context.Context, request *DeleteSflowProfileTagRefRequest) (*DeleteSflowProfileTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteSflowProfileTagRefRequest{
			DeleteSflowProfileTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteSflowProfileTagRef(ctx, request)
}

func (e *Event_CreateSflowProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSflowProfileRequest
	model := request.SflowProfile
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetSflowProfile(ctx,
			&GetSflowProfileRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateSflowProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateSflowProfileRequest{
			CreateSflowProfileRequest: &CreateSflowProfileRequest{
				SflowProfile: response.GetSflowProfile(),
			},
		},
	}, nil
}

func (e *Event_CreateSflowProfileRequest) ToUpdateEvent() *Event {
	request := e.CreateSflowProfileRequest
	model := request.SflowProfile
	return &Event{
		Request: &Event_UpdateSflowProfileRequest{
			UpdateSflowProfileRequest: &UpdateSflowProfileRequest{
				SflowProfile: model,
				FieldMask:    request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateSflowProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateSflowProfileRequest
	response, err := service.UpdateSflowProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateSflowProfileRequest{
			UpdateSflowProfileRequest: &UpdateSflowProfileRequest{
				SflowProfile: response.GetSflowProfile(),
			},
		},
	}, nil
}

func (e *Event_UpdateSflowProfileRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteSflowProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSflowProfileRequest
	_, err := service.DeleteSflowProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteSflowProfileRequest{
			DeleteSflowProfileRequest: &DeleteSflowProfileRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateSflowProfileTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSflowProfileTagRefRequest
	if _, err := service.CreateSflowProfileTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateSflowProfileTagRefRequest{
		CreateSflowProfileTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteSflowProfileTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSflowProfileTagRefRequest
	if _, err := service.DeleteSflowProfileTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteSflowProfileTagRefRequest{
		DeleteSflowProfileTagRefRequest: request,
	}}, nil
}

type StormControlProfile = models.StormControlProfile

func (s *BaseService) CreateStormControlProfile(ctx context.Context, request *CreateStormControlProfileRequest) (*CreateStormControlProfileResponse, error) {
	if s.next == nil {
		return &CreateStormControlProfileResponse{
			StormControlProfile: request.GetStormControlProfile(),
		}, nil
	}
	return s.Next().CreateStormControlProfile(ctx, request)
}
func (s *BaseService) UpdateStormControlProfile(ctx context.Context, request *UpdateStormControlProfileRequest) (*UpdateStormControlProfileResponse, error) {
	if s.next == nil {
		return &UpdateStormControlProfileResponse{
			StormControlProfile: request.GetStormControlProfile(),
		}, nil
	}
	return s.Next().UpdateStormControlProfile(ctx, request)
}
func (s *BaseService) DeleteStormControlProfile(ctx context.Context, request *DeleteStormControlProfileRequest) (*DeleteStormControlProfileResponse, error) {
	if s.next == nil {
		return &DeleteStormControlProfileResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteStormControlProfile(ctx, request)
}
func (s *BaseService) GetStormControlProfile(ctx context.Context, request *GetStormControlProfileRequest) (*GetStormControlProfileResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetStormControlProfile(ctx, request)
}
func (s *BaseService) ListStormControlProfile(ctx context.Context, request *ListStormControlProfileRequest) (*ListStormControlProfileResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListStormControlProfile(ctx, request)
}

func (s *BaseService) CreateStormControlProfileTagRef(ctx context.Context, request *CreateStormControlProfileTagRefRequest) (*CreateStormControlProfileTagRefResponse, error) {
	if s.next == nil {
		return &CreateStormControlProfileTagRefResponse{
			ID:                        request.ID,
			StormControlProfileTagRef: request.GetStormControlProfileTagRef(),
		}, nil
	}
	return s.Next().CreateStormControlProfileTagRef(ctx, request)
}

func (s *BaseService) DeleteStormControlProfileTagRef(ctx context.Context, request *DeleteStormControlProfileTagRefRequest) (*DeleteStormControlProfileTagRefResponse, error) {
	if s.next == nil {
		return &DeleteStormControlProfileTagRefResponse{
			ID:                        request.ID,
			StormControlProfileTagRef: request.GetStormControlProfileTagRef(),
		}, nil
	}
	return s.Next().DeleteStormControlProfileTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateStormControlProfileTagRef(ctx context.Context, request *CreateStormControlProfileTagRefRequest) (*CreateStormControlProfileTagRefResponse, error) {
	refField := models.StormControlProfileFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetStormControlProfile(ctx, &GetStormControlProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.StormControlProfile
		obj.AddTagRef(request.StormControlProfileTagRef)

		_, err = s.BaseService.UpdateStormControlProfile(ctx, &UpdateStormControlProfileRequest{
			StormControlProfile: obj,
			FieldMask:           types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateStormControlProfileTagRefResponse{
		ID:                        request.ID,
		StormControlProfileTagRef: request.GetStormControlProfileTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteStormControlProfileTagRef(ctx context.Context, request *DeleteStormControlProfileTagRefRequest) (*DeleteStormControlProfileTagRefResponse, error) {
	refField := models.StormControlProfileFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetStormControlProfile(ctx, &GetStormControlProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.StormControlProfile
		obj.RemoveTagRef(request.StormControlProfileTagRef)

		_, err = s.BaseService.UpdateStormControlProfile(ctx, &UpdateStormControlProfileRequest{
			StormControlProfile: obj,
			FieldMask:           types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteStormControlProfileTagRefResponse{
		ID:                        request.ID,
		StormControlProfileTagRef: request.GetStormControlProfileTagRef(),
	}, nil
}

func (s *EventProducerService) CreateStormControlProfile(ctx context.Context, request *CreateStormControlProfileRequest) (*CreateStormControlProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateStormControlProfileRequest{
				CreateStormControlProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateStormControlProfile(ctx, request)
}
func (s *EventProducerService) UpdateStormControlProfile(ctx context.Context, request *UpdateStormControlProfileRequest) (*UpdateStormControlProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateStormControlProfileRequest{
				UpdateStormControlProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateStormControlProfile(ctx, request)
}
func (s *EventProducerService) DeleteStormControlProfile(ctx context.Context, request *DeleteStormControlProfileRequest) (*DeleteStormControlProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteStormControlProfileRequest{
				DeleteStormControlProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteStormControlProfile(ctx, request)
}

func (s *EventProducerService) CreateStormControlProfileTagRef(ctx context.Context, request *CreateStormControlProfileTagRefRequest) (*CreateStormControlProfileTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateStormControlProfileTagRefRequest{
			CreateStormControlProfileTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateStormControlProfileTagRef(ctx, request)
}

func (s *EventProducerService) DeleteStormControlProfileTagRef(ctx context.Context, request *DeleteStormControlProfileTagRefRequest) (*DeleteStormControlProfileTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteStormControlProfileTagRefRequest{
			DeleteStormControlProfileTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteStormControlProfileTagRef(ctx, request)
}

func (e *Event_CreateStormControlProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateStormControlProfileRequest
	model := request.StormControlProfile
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetStormControlProfile(ctx,
			&GetStormControlProfileRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateStormControlProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateStormControlProfileRequest{
			CreateStormControlProfileRequest: &CreateStormControlProfileRequest{
				StormControlProfile: response.GetStormControlProfile(),
			},
		},
	}, nil
}

func (e *Event_CreateStormControlProfileRequest) ToUpdateEvent() *Event {
	request := e.CreateStormControlProfileRequest
	model := request.StormControlProfile
	return &Event{
		Request: &Event_UpdateStormControlProfileRequest{
			UpdateStormControlProfileRequest: &UpdateStormControlProfileRequest{
				StormControlProfile: model,
				FieldMask:           request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateStormControlProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateStormControlProfileRequest
	response, err := service.UpdateStormControlProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateStormControlProfileRequest{
			UpdateStormControlProfileRequest: &UpdateStormControlProfileRequest{
				StormControlProfile: response.GetStormControlProfile(),
			},
		},
	}, nil
}

func (e *Event_UpdateStormControlProfileRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteStormControlProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteStormControlProfileRequest
	_, err := service.DeleteStormControlProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteStormControlProfileRequest{
			DeleteStormControlProfileRequest: &DeleteStormControlProfileRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateStormControlProfileTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateStormControlProfileTagRefRequest
	if _, err := service.CreateStormControlProfileTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateStormControlProfileTagRefRequest{
		CreateStormControlProfileTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteStormControlProfileTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteStormControlProfileTagRefRequest
	if _, err := service.DeleteStormControlProfileTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteStormControlProfileTagRefRequest{
		DeleteStormControlProfileTagRefRequest: request,
	}}, nil
}

type StructuredSyslogApplicationRecord = models.StructuredSyslogApplicationRecord

func (s *BaseService) CreateStructuredSyslogApplicationRecord(ctx context.Context, request *CreateStructuredSyslogApplicationRecordRequest) (*CreateStructuredSyslogApplicationRecordResponse, error) {
	if s.next == nil {
		return &CreateStructuredSyslogApplicationRecordResponse{
			StructuredSyslogApplicationRecord: request.GetStructuredSyslogApplicationRecord(),
		}, nil
	}
	return s.Next().CreateStructuredSyslogApplicationRecord(ctx, request)
}
func (s *BaseService) UpdateStructuredSyslogApplicationRecord(ctx context.Context, request *UpdateStructuredSyslogApplicationRecordRequest) (*UpdateStructuredSyslogApplicationRecordResponse, error) {
	if s.next == nil {
		return &UpdateStructuredSyslogApplicationRecordResponse{
			StructuredSyslogApplicationRecord: request.GetStructuredSyslogApplicationRecord(),
		}, nil
	}
	return s.Next().UpdateStructuredSyslogApplicationRecord(ctx, request)
}
func (s *BaseService) DeleteStructuredSyslogApplicationRecord(ctx context.Context, request *DeleteStructuredSyslogApplicationRecordRequest) (*DeleteStructuredSyslogApplicationRecordResponse, error) {
	if s.next == nil {
		return &DeleteStructuredSyslogApplicationRecordResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteStructuredSyslogApplicationRecord(ctx, request)
}
func (s *BaseService) GetStructuredSyslogApplicationRecord(ctx context.Context, request *GetStructuredSyslogApplicationRecordRequest) (*GetStructuredSyslogApplicationRecordResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetStructuredSyslogApplicationRecord(ctx, request)
}
func (s *BaseService) ListStructuredSyslogApplicationRecord(ctx context.Context, request *ListStructuredSyslogApplicationRecordRequest) (*ListStructuredSyslogApplicationRecordResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListStructuredSyslogApplicationRecord(ctx, request)
}

func (s *BaseService) CreateStructuredSyslogApplicationRecordTagRef(ctx context.Context, request *CreateStructuredSyslogApplicationRecordTagRefRequest) (*CreateStructuredSyslogApplicationRecordTagRefResponse, error) {
	if s.next == nil {
		return &CreateStructuredSyslogApplicationRecordTagRefResponse{
			ID:                                      request.ID,
			StructuredSyslogApplicationRecordTagRef: request.GetStructuredSyslogApplicationRecordTagRef(),
		}, nil
	}
	return s.Next().CreateStructuredSyslogApplicationRecordTagRef(ctx, request)
}

func (s *BaseService) DeleteStructuredSyslogApplicationRecordTagRef(ctx context.Context, request *DeleteStructuredSyslogApplicationRecordTagRefRequest) (*DeleteStructuredSyslogApplicationRecordTagRefResponse, error) {
	if s.next == nil {
		return &DeleteStructuredSyslogApplicationRecordTagRefResponse{
			ID:                                      request.ID,
			StructuredSyslogApplicationRecordTagRef: request.GetStructuredSyslogApplicationRecordTagRef(),
		}, nil
	}
	return s.Next().DeleteStructuredSyslogApplicationRecordTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateStructuredSyslogApplicationRecordTagRef(ctx context.Context, request *CreateStructuredSyslogApplicationRecordTagRefRequest) (*CreateStructuredSyslogApplicationRecordTagRefResponse, error) {
	refField := models.StructuredSyslogApplicationRecordFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetStructuredSyslogApplicationRecord(ctx, &GetStructuredSyslogApplicationRecordRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.StructuredSyslogApplicationRecord
		obj.AddTagRef(request.StructuredSyslogApplicationRecordTagRef)

		_, err = s.BaseService.UpdateStructuredSyslogApplicationRecord(ctx, &UpdateStructuredSyslogApplicationRecordRequest{
			StructuredSyslogApplicationRecord: obj,
			FieldMask:                         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateStructuredSyslogApplicationRecordTagRefResponse{
		ID:                                      request.ID,
		StructuredSyslogApplicationRecordTagRef: request.GetStructuredSyslogApplicationRecordTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteStructuredSyslogApplicationRecordTagRef(ctx context.Context, request *DeleteStructuredSyslogApplicationRecordTagRefRequest) (*DeleteStructuredSyslogApplicationRecordTagRefResponse, error) {
	refField := models.StructuredSyslogApplicationRecordFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetStructuredSyslogApplicationRecord(ctx, &GetStructuredSyslogApplicationRecordRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.StructuredSyslogApplicationRecord
		obj.RemoveTagRef(request.StructuredSyslogApplicationRecordTagRef)

		_, err = s.BaseService.UpdateStructuredSyslogApplicationRecord(ctx, &UpdateStructuredSyslogApplicationRecordRequest{
			StructuredSyslogApplicationRecord: obj,
			FieldMask:                         types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteStructuredSyslogApplicationRecordTagRefResponse{
		ID:                                      request.ID,
		StructuredSyslogApplicationRecordTagRef: request.GetStructuredSyslogApplicationRecordTagRef(),
	}, nil
}

func (s *EventProducerService) CreateStructuredSyslogApplicationRecord(ctx context.Context, request *CreateStructuredSyslogApplicationRecordRequest) (*CreateStructuredSyslogApplicationRecordResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateStructuredSyslogApplicationRecordRequest{
				CreateStructuredSyslogApplicationRecordRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateStructuredSyslogApplicationRecord(ctx, request)
}
func (s *EventProducerService) UpdateStructuredSyslogApplicationRecord(ctx context.Context, request *UpdateStructuredSyslogApplicationRecordRequest) (*UpdateStructuredSyslogApplicationRecordResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateStructuredSyslogApplicationRecordRequest{
				UpdateStructuredSyslogApplicationRecordRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateStructuredSyslogApplicationRecord(ctx, request)
}
func (s *EventProducerService) DeleteStructuredSyslogApplicationRecord(ctx context.Context, request *DeleteStructuredSyslogApplicationRecordRequest) (*DeleteStructuredSyslogApplicationRecordResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteStructuredSyslogApplicationRecordRequest{
				DeleteStructuredSyslogApplicationRecordRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteStructuredSyslogApplicationRecord(ctx, request)
}

func (s *EventProducerService) CreateStructuredSyslogApplicationRecordTagRef(ctx context.Context, request *CreateStructuredSyslogApplicationRecordTagRefRequest) (*CreateStructuredSyslogApplicationRecordTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateStructuredSyslogApplicationRecordTagRefRequest{
			CreateStructuredSyslogApplicationRecordTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateStructuredSyslogApplicationRecordTagRef(ctx, request)
}

func (s *EventProducerService) DeleteStructuredSyslogApplicationRecordTagRef(ctx context.Context, request *DeleteStructuredSyslogApplicationRecordTagRefRequest) (*DeleteStructuredSyslogApplicationRecordTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteStructuredSyslogApplicationRecordTagRefRequest{
			DeleteStructuredSyslogApplicationRecordTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteStructuredSyslogApplicationRecordTagRef(ctx, request)
}

func (e *Event_CreateStructuredSyslogApplicationRecordRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateStructuredSyslogApplicationRecordRequest
	model := request.StructuredSyslogApplicationRecord
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetStructuredSyslogApplicationRecord(ctx,
			&GetStructuredSyslogApplicationRecordRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateStructuredSyslogApplicationRecord(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateStructuredSyslogApplicationRecordRequest{
			CreateStructuredSyslogApplicationRecordRequest: &CreateStructuredSyslogApplicationRecordRequest{
				StructuredSyslogApplicationRecord: response.GetStructuredSyslogApplicationRecord(),
			},
		},
	}, nil
}

func (e *Event_CreateStructuredSyslogApplicationRecordRequest) ToUpdateEvent() *Event {
	request := e.CreateStructuredSyslogApplicationRecordRequest
	model := request.StructuredSyslogApplicationRecord
	return &Event{
		Request: &Event_UpdateStructuredSyslogApplicationRecordRequest{
			UpdateStructuredSyslogApplicationRecordRequest: &UpdateStructuredSyslogApplicationRecordRequest{
				StructuredSyslogApplicationRecord: model,
				FieldMask:                         request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateStructuredSyslogApplicationRecordRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateStructuredSyslogApplicationRecordRequest
	response, err := service.UpdateStructuredSyslogApplicationRecord(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateStructuredSyslogApplicationRecordRequest{
			UpdateStructuredSyslogApplicationRecordRequest: &UpdateStructuredSyslogApplicationRecordRequest{
				StructuredSyslogApplicationRecord: response.GetStructuredSyslogApplicationRecord(),
			},
		},
	}, nil
}

func (e *Event_UpdateStructuredSyslogApplicationRecordRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteStructuredSyslogApplicationRecordRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteStructuredSyslogApplicationRecordRequest
	_, err := service.DeleteStructuredSyslogApplicationRecord(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteStructuredSyslogApplicationRecordRequest{
			DeleteStructuredSyslogApplicationRecordRequest: &DeleteStructuredSyslogApplicationRecordRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateStructuredSyslogApplicationRecordTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateStructuredSyslogApplicationRecordTagRefRequest
	if _, err := service.CreateStructuredSyslogApplicationRecordTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateStructuredSyslogApplicationRecordTagRefRequest{
		CreateStructuredSyslogApplicationRecordTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteStructuredSyslogApplicationRecordTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteStructuredSyslogApplicationRecordTagRefRequest
	if _, err := service.DeleteStructuredSyslogApplicationRecordTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteStructuredSyslogApplicationRecordTagRefRequest{
		DeleteStructuredSyslogApplicationRecordTagRefRequest: request,
	}}, nil
}

type StructuredSyslogConfig = models.StructuredSyslogConfig

func (s *BaseService) CreateStructuredSyslogConfig(ctx context.Context, request *CreateStructuredSyslogConfigRequest) (*CreateStructuredSyslogConfigResponse, error) {
	if s.next == nil {
		return &CreateStructuredSyslogConfigResponse{
			StructuredSyslogConfig: request.GetStructuredSyslogConfig(),
		}, nil
	}
	return s.Next().CreateStructuredSyslogConfig(ctx, request)
}
func (s *BaseService) UpdateStructuredSyslogConfig(ctx context.Context, request *UpdateStructuredSyslogConfigRequest) (*UpdateStructuredSyslogConfigResponse, error) {
	if s.next == nil {
		return &UpdateStructuredSyslogConfigResponse{
			StructuredSyslogConfig: request.GetStructuredSyslogConfig(),
		}, nil
	}
	return s.Next().UpdateStructuredSyslogConfig(ctx, request)
}
func (s *BaseService) DeleteStructuredSyslogConfig(ctx context.Context, request *DeleteStructuredSyslogConfigRequest) (*DeleteStructuredSyslogConfigResponse, error) {
	if s.next == nil {
		return &DeleteStructuredSyslogConfigResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteStructuredSyslogConfig(ctx, request)
}
func (s *BaseService) GetStructuredSyslogConfig(ctx context.Context, request *GetStructuredSyslogConfigRequest) (*GetStructuredSyslogConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetStructuredSyslogConfig(ctx, request)
}
func (s *BaseService) ListStructuredSyslogConfig(ctx context.Context, request *ListStructuredSyslogConfigRequest) (*ListStructuredSyslogConfigResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListStructuredSyslogConfig(ctx, request)
}

func (s *BaseService) CreateStructuredSyslogConfigTagRef(ctx context.Context, request *CreateStructuredSyslogConfigTagRefRequest) (*CreateStructuredSyslogConfigTagRefResponse, error) {
	if s.next == nil {
		return &CreateStructuredSyslogConfigTagRefResponse{
			ID:                           request.ID,
			StructuredSyslogConfigTagRef: request.GetStructuredSyslogConfigTagRef(),
		}, nil
	}
	return s.Next().CreateStructuredSyslogConfigTagRef(ctx, request)
}

func (s *BaseService) DeleteStructuredSyslogConfigTagRef(ctx context.Context, request *DeleteStructuredSyslogConfigTagRefRequest) (*DeleteStructuredSyslogConfigTagRefResponse, error) {
	if s.next == nil {
		return &DeleteStructuredSyslogConfigTagRefResponse{
			ID:                           request.ID,
			StructuredSyslogConfigTagRef: request.GetStructuredSyslogConfigTagRef(),
		}, nil
	}
	return s.Next().DeleteStructuredSyslogConfigTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateStructuredSyslogConfigTagRef(ctx context.Context, request *CreateStructuredSyslogConfigTagRefRequest) (*CreateStructuredSyslogConfigTagRefResponse, error) {
	refField := models.StructuredSyslogConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetStructuredSyslogConfig(ctx, &GetStructuredSyslogConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.StructuredSyslogConfig
		obj.AddTagRef(request.StructuredSyslogConfigTagRef)

		_, err = s.BaseService.UpdateStructuredSyslogConfig(ctx, &UpdateStructuredSyslogConfigRequest{
			StructuredSyslogConfig: obj,
			FieldMask:              types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateStructuredSyslogConfigTagRefResponse{
		ID:                           request.ID,
		StructuredSyslogConfigTagRef: request.GetStructuredSyslogConfigTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteStructuredSyslogConfigTagRef(ctx context.Context, request *DeleteStructuredSyslogConfigTagRefRequest) (*DeleteStructuredSyslogConfigTagRefResponse, error) {
	refField := models.StructuredSyslogConfigFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetStructuredSyslogConfig(ctx, &GetStructuredSyslogConfigRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.StructuredSyslogConfig
		obj.RemoveTagRef(request.StructuredSyslogConfigTagRef)

		_, err = s.BaseService.UpdateStructuredSyslogConfig(ctx, &UpdateStructuredSyslogConfigRequest{
			StructuredSyslogConfig: obj,
			FieldMask:              types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteStructuredSyslogConfigTagRefResponse{
		ID:                           request.ID,
		StructuredSyslogConfigTagRef: request.GetStructuredSyslogConfigTagRef(),
	}, nil
}

func (s *EventProducerService) CreateStructuredSyslogConfig(ctx context.Context, request *CreateStructuredSyslogConfigRequest) (*CreateStructuredSyslogConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateStructuredSyslogConfigRequest{
				CreateStructuredSyslogConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateStructuredSyslogConfig(ctx, request)
}
func (s *EventProducerService) UpdateStructuredSyslogConfig(ctx context.Context, request *UpdateStructuredSyslogConfigRequest) (*UpdateStructuredSyslogConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateStructuredSyslogConfigRequest{
				UpdateStructuredSyslogConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateStructuredSyslogConfig(ctx, request)
}
func (s *EventProducerService) DeleteStructuredSyslogConfig(ctx context.Context, request *DeleteStructuredSyslogConfigRequest) (*DeleteStructuredSyslogConfigResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteStructuredSyslogConfigRequest{
				DeleteStructuredSyslogConfigRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteStructuredSyslogConfig(ctx, request)
}

func (s *EventProducerService) CreateStructuredSyslogConfigTagRef(ctx context.Context, request *CreateStructuredSyslogConfigTagRefRequest) (*CreateStructuredSyslogConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateStructuredSyslogConfigTagRefRequest{
			CreateStructuredSyslogConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateStructuredSyslogConfigTagRef(ctx, request)
}

func (s *EventProducerService) DeleteStructuredSyslogConfigTagRef(ctx context.Context, request *DeleteStructuredSyslogConfigTagRefRequest) (*DeleteStructuredSyslogConfigTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteStructuredSyslogConfigTagRefRequest{
			DeleteStructuredSyslogConfigTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteStructuredSyslogConfigTagRef(ctx, request)
}

func (e *Event_CreateStructuredSyslogConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateStructuredSyslogConfigRequest
	model := request.StructuredSyslogConfig
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetStructuredSyslogConfig(ctx,
			&GetStructuredSyslogConfigRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateStructuredSyslogConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateStructuredSyslogConfigRequest{
			CreateStructuredSyslogConfigRequest: &CreateStructuredSyslogConfigRequest{
				StructuredSyslogConfig: response.GetStructuredSyslogConfig(),
			},
		},
	}, nil
}

func (e *Event_CreateStructuredSyslogConfigRequest) ToUpdateEvent() *Event {
	request := e.CreateStructuredSyslogConfigRequest
	model := request.StructuredSyslogConfig
	return &Event{
		Request: &Event_UpdateStructuredSyslogConfigRequest{
			UpdateStructuredSyslogConfigRequest: &UpdateStructuredSyslogConfigRequest{
				StructuredSyslogConfig: model,
				FieldMask:              request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateStructuredSyslogConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateStructuredSyslogConfigRequest
	response, err := service.UpdateStructuredSyslogConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateStructuredSyslogConfigRequest{
			UpdateStructuredSyslogConfigRequest: &UpdateStructuredSyslogConfigRequest{
				StructuredSyslogConfig: response.GetStructuredSyslogConfig(),
			},
		},
	}, nil
}

func (e *Event_UpdateStructuredSyslogConfigRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteStructuredSyslogConfigRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteStructuredSyslogConfigRequest
	_, err := service.DeleteStructuredSyslogConfig(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteStructuredSyslogConfigRequest{
			DeleteStructuredSyslogConfigRequest: &DeleteStructuredSyslogConfigRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateStructuredSyslogConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateStructuredSyslogConfigTagRefRequest
	if _, err := service.CreateStructuredSyslogConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateStructuredSyslogConfigTagRefRequest{
		CreateStructuredSyslogConfigTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteStructuredSyslogConfigTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteStructuredSyslogConfigTagRefRequest
	if _, err := service.DeleteStructuredSyslogConfigTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteStructuredSyslogConfigTagRefRequest{
		DeleteStructuredSyslogConfigTagRefRequest: request,
	}}, nil
}

type StructuredSyslogHostnameRecord = models.StructuredSyslogHostnameRecord

func (s *BaseService) CreateStructuredSyslogHostnameRecord(ctx context.Context, request *CreateStructuredSyslogHostnameRecordRequest) (*CreateStructuredSyslogHostnameRecordResponse, error) {
	if s.next == nil {
		return &CreateStructuredSyslogHostnameRecordResponse{
			StructuredSyslogHostnameRecord: request.GetStructuredSyslogHostnameRecord(),
		}, nil
	}
	return s.Next().CreateStructuredSyslogHostnameRecord(ctx, request)
}
func (s *BaseService) UpdateStructuredSyslogHostnameRecord(ctx context.Context, request *UpdateStructuredSyslogHostnameRecordRequest) (*UpdateStructuredSyslogHostnameRecordResponse, error) {
	if s.next == nil {
		return &UpdateStructuredSyslogHostnameRecordResponse{
			StructuredSyslogHostnameRecord: request.GetStructuredSyslogHostnameRecord(),
		}, nil
	}
	return s.Next().UpdateStructuredSyslogHostnameRecord(ctx, request)
}
func (s *BaseService) DeleteStructuredSyslogHostnameRecord(ctx context.Context, request *DeleteStructuredSyslogHostnameRecordRequest) (*DeleteStructuredSyslogHostnameRecordResponse, error) {
	if s.next == nil {
		return &DeleteStructuredSyslogHostnameRecordResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteStructuredSyslogHostnameRecord(ctx, request)
}
func (s *BaseService) GetStructuredSyslogHostnameRecord(ctx context.Context, request *GetStructuredSyslogHostnameRecordRequest) (*GetStructuredSyslogHostnameRecordResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetStructuredSyslogHostnameRecord(ctx, request)
}
func (s *BaseService) ListStructuredSyslogHostnameRecord(ctx context.Context, request *ListStructuredSyslogHostnameRecordRequest) (*ListStructuredSyslogHostnameRecordResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListStructuredSyslogHostnameRecord(ctx, request)
}

func (s *BaseService) CreateStructuredSyslogHostnameRecordTagRef(ctx context.Context, request *CreateStructuredSyslogHostnameRecordTagRefRequest) (*CreateStructuredSyslogHostnameRecordTagRefResponse, error) {
	if s.next == nil {
		return &CreateStructuredSyslogHostnameRecordTagRefResponse{
			ID:                                   request.ID,
			StructuredSyslogHostnameRecordTagRef: request.GetStructuredSyslogHostnameRecordTagRef(),
		}, nil
	}
	return s.Next().CreateStructuredSyslogHostnameRecordTagRef(ctx, request)
}

func (s *BaseService) DeleteStructuredSyslogHostnameRecordTagRef(ctx context.Context, request *DeleteStructuredSyslogHostnameRecordTagRefRequest) (*DeleteStructuredSyslogHostnameRecordTagRefResponse, error) {
	if s.next == nil {
		return &DeleteStructuredSyslogHostnameRecordTagRefResponse{
			ID:                                   request.ID,
			StructuredSyslogHostnameRecordTagRef: request.GetStructuredSyslogHostnameRecordTagRef(),
		}, nil
	}
	return s.Next().DeleteStructuredSyslogHostnameRecordTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateStructuredSyslogHostnameRecordTagRef(ctx context.Context, request *CreateStructuredSyslogHostnameRecordTagRefRequest) (*CreateStructuredSyslogHostnameRecordTagRefResponse, error) {
	refField := models.StructuredSyslogHostnameRecordFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetStructuredSyslogHostnameRecord(ctx, &GetStructuredSyslogHostnameRecordRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.StructuredSyslogHostnameRecord
		obj.AddTagRef(request.StructuredSyslogHostnameRecordTagRef)

		_, err = s.BaseService.UpdateStructuredSyslogHostnameRecord(ctx, &UpdateStructuredSyslogHostnameRecordRequest{
			StructuredSyslogHostnameRecord: obj,
			FieldMask:                      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateStructuredSyslogHostnameRecordTagRefResponse{
		ID:                                   request.ID,
		StructuredSyslogHostnameRecordTagRef: request.GetStructuredSyslogHostnameRecordTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteStructuredSyslogHostnameRecordTagRef(ctx context.Context, request *DeleteStructuredSyslogHostnameRecordTagRefRequest) (*DeleteStructuredSyslogHostnameRecordTagRefResponse, error) {
	refField := models.StructuredSyslogHostnameRecordFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetStructuredSyslogHostnameRecord(ctx, &GetStructuredSyslogHostnameRecordRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.StructuredSyslogHostnameRecord
		obj.RemoveTagRef(request.StructuredSyslogHostnameRecordTagRef)

		_, err = s.BaseService.UpdateStructuredSyslogHostnameRecord(ctx, &UpdateStructuredSyslogHostnameRecordRequest{
			StructuredSyslogHostnameRecord: obj,
			FieldMask:                      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteStructuredSyslogHostnameRecordTagRefResponse{
		ID:                                   request.ID,
		StructuredSyslogHostnameRecordTagRef: request.GetStructuredSyslogHostnameRecordTagRef(),
	}, nil
}

func (s *EventProducerService) CreateStructuredSyslogHostnameRecord(ctx context.Context, request *CreateStructuredSyslogHostnameRecordRequest) (*CreateStructuredSyslogHostnameRecordResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateStructuredSyslogHostnameRecordRequest{
				CreateStructuredSyslogHostnameRecordRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateStructuredSyslogHostnameRecord(ctx, request)
}
func (s *EventProducerService) UpdateStructuredSyslogHostnameRecord(ctx context.Context, request *UpdateStructuredSyslogHostnameRecordRequest) (*UpdateStructuredSyslogHostnameRecordResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateStructuredSyslogHostnameRecordRequest{
				UpdateStructuredSyslogHostnameRecordRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateStructuredSyslogHostnameRecord(ctx, request)
}
func (s *EventProducerService) DeleteStructuredSyslogHostnameRecord(ctx context.Context, request *DeleteStructuredSyslogHostnameRecordRequest) (*DeleteStructuredSyslogHostnameRecordResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteStructuredSyslogHostnameRecordRequest{
				DeleteStructuredSyslogHostnameRecordRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteStructuredSyslogHostnameRecord(ctx, request)
}

func (s *EventProducerService) CreateStructuredSyslogHostnameRecordTagRef(ctx context.Context, request *CreateStructuredSyslogHostnameRecordTagRefRequest) (*CreateStructuredSyslogHostnameRecordTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateStructuredSyslogHostnameRecordTagRefRequest{
			CreateStructuredSyslogHostnameRecordTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateStructuredSyslogHostnameRecordTagRef(ctx, request)
}

func (s *EventProducerService) DeleteStructuredSyslogHostnameRecordTagRef(ctx context.Context, request *DeleteStructuredSyslogHostnameRecordTagRefRequest) (*DeleteStructuredSyslogHostnameRecordTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteStructuredSyslogHostnameRecordTagRefRequest{
			DeleteStructuredSyslogHostnameRecordTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteStructuredSyslogHostnameRecordTagRef(ctx, request)
}

func (e *Event_CreateStructuredSyslogHostnameRecordRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateStructuredSyslogHostnameRecordRequest
	model := request.StructuredSyslogHostnameRecord
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetStructuredSyslogHostnameRecord(ctx,
			&GetStructuredSyslogHostnameRecordRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateStructuredSyslogHostnameRecord(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateStructuredSyslogHostnameRecordRequest{
			CreateStructuredSyslogHostnameRecordRequest: &CreateStructuredSyslogHostnameRecordRequest{
				StructuredSyslogHostnameRecord: response.GetStructuredSyslogHostnameRecord(),
			},
		},
	}, nil
}

func (e *Event_CreateStructuredSyslogHostnameRecordRequest) ToUpdateEvent() *Event {
	request := e.CreateStructuredSyslogHostnameRecordRequest
	model := request.StructuredSyslogHostnameRecord
	return &Event{
		Request: &Event_UpdateStructuredSyslogHostnameRecordRequest{
			UpdateStructuredSyslogHostnameRecordRequest: &UpdateStructuredSyslogHostnameRecordRequest{
				StructuredSyslogHostnameRecord: model,
				FieldMask:                      request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateStructuredSyslogHostnameRecordRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateStructuredSyslogHostnameRecordRequest
	response, err := service.UpdateStructuredSyslogHostnameRecord(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateStructuredSyslogHostnameRecordRequest{
			UpdateStructuredSyslogHostnameRecordRequest: &UpdateStructuredSyslogHostnameRecordRequest{
				StructuredSyslogHostnameRecord: response.GetStructuredSyslogHostnameRecord(),
			},
		},
	}, nil
}

func (e *Event_UpdateStructuredSyslogHostnameRecordRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteStructuredSyslogHostnameRecordRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteStructuredSyslogHostnameRecordRequest
	_, err := service.DeleteStructuredSyslogHostnameRecord(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteStructuredSyslogHostnameRecordRequest{
			DeleteStructuredSyslogHostnameRecordRequest: &DeleteStructuredSyslogHostnameRecordRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateStructuredSyslogHostnameRecordTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateStructuredSyslogHostnameRecordTagRefRequest
	if _, err := service.CreateStructuredSyslogHostnameRecordTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateStructuredSyslogHostnameRecordTagRefRequest{
		CreateStructuredSyslogHostnameRecordTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteStructuredSyslogHostnameRecordTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteStructuredSyslogHostnameRecordTagRefRequest
	if _, err := service.DeleteStructuredSyslogHostnameRecordTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteStructuredSyslogHostnameRecordTagRefRequest{
		DeleteStructuredSyslogHostnameRecordTagRefRequest: request,
	}}, nil
}

type StructuredSyslogMessage = models.StructuredSyslogMessage

func (s *BaseService) CreateStructuredSyslogMessage(ctx context.Context, request *CreateStructuredSyslogMessageRequest) (*CreateStructuredSyslogMessageResponse, error) {
	if s.next == nil {
		return &CreateStructuredSyslogMessageResponse{
			StructuredSyslogMessage: request.GetStructuredSyslogMessage(),
		}, nil
	}
	return s.Next().CreateStructuredSyslogMessage(ctx, request)
}
func (s *BaseService) UpdateStructuredSyslogMessage(ctx context.Context, request *UpdateStructuredSyslogMessageRequest) (*UpdateStructuredSyslogMessageResponse, error) {
	if s.next == nil {
		return &UpdateStructuredSyslogMessageResponse{
			StructuredSyslogMessage: request.GetStructuredSyslogMessage(),
		}, nil
	}
	return s.Next().UpdateStructuredSyslogMessage(ctx, request)
}
func (s *BaseService) DeleteStructuredSyslogMessage(ctx context.Context, request *DeleteStructuredSyslogMessageRequest) (*DeleteStructuredSyslogMessageResponse, error) {
	if s.next == nil {
		return &DeleteStructuredSyslogMessageResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteStructuredSyslogMessage(ctx, request)
}
func (s *BaseService) GetStructuredSyslogMessage(ctx context.Context, request *GetStructuredSyslogMessageRequest) (*GetStructuredSyslogMessageResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetStructuredSyslogMessage(ctx, request)
}
func (s *BaseService) ListStructuredSyslogMessage(ctx context.Context, request *ListStructuredSyslogMessageRequest) (*ListStructuredSyslogMessageResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListStructuredSyslogMessage(ctx, request)
}

func (s *BaseService) CreateStructuredSyslogMessageTagRef(ctx context.Context, request *CreateStructuredSyslogMessageTagRefRequest) (*CreateStructuredSyslogMessageTagRefResponse, error) {
	if s.next == nil {
		return &CreateStructuredSyslogMessageTagRefResponse{
			ID:                            request.ID,
			StructuredSyslogMessageTagRef: request.GetStructuredSyslogMessageTagRef(),
		}, nil
	}
	return s.Next().CreateStructuredSyslogMessageTagRef(ctx, request)
}

func (s *BaseService) DeleteStructuredSyslogMessageTagRef(ctx context.Context, request *DeleteStructuredSyslogMessageTagRefRequest) (*DeleteStructuredSyslogMessageTagRefResponse, error) {
	if s.next == nil {
		return &DeleteStructuredSyslogMessageTagRefResponse{
			ID:                            request.ID,
			StructuredSyslogMessageTagRef: request.GetStructuredSyslogMessageTagRef(),
		}, nil
	}
	return s.Next().DeleteStructuredSyslogMessageTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateStructuredSyslogMessageTagRef(ctx context.Context, request *CreateStructuredSyslogMessageTagRefRequest) (*CreateStructuredSyslogMessageTagRefResponse, error) {
	refField := models.StructuredSyslogMessageFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetStructuredSyslogMessage(ctx, &GetStructuredSyslogMessageRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.StructuredSyslogMessage
		obj.AddTagRef(request.StructuredSyslogMessageTagRef)

		_, err = s.BaseService.UpdateStructuredSyslogMessage(ctx, &UpdateStructuredSyslogMessageRequest{
			StructuredSyslogMessage: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateStructuredSyslogMessageTagRefResponse{
		ID:                            request.ID,
		StructuredSyslogMessageTagRef: request.GetStructuredSyslogMessageTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteStructuredSyslogMessageTagRef(ctx context.Context, request *DeleteStructuredSyslogMessageTagRefRequest) (*DeleteStructuredSyslogMessageTagRefResponse, error) {
	refField := models.StructuredSyslogMessageFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetStructuredSyslogMessage(ctx, &GetStructuredSyslogMessageRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.StructuredSyslogMessage
		obj.RemoveTagRef(request.StructuredSyslogMessageTagRef)

		_, err = s.BaseService.UpdateStructuredSyslogMessage(ctx, &UpdateStructuredSyslogMessageRequest{
			StructuredSyslogMessage: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteStructuredSyslogMessageTagRefResponse{
		ID:                            request.ID,
		StructuredSyslogMessageTagRef: request.GetStructuredSyslogMessageTagRef(),
	}, nil
}

func (s *EventProducerService) CreateStructuredSyslogMessage(ctx context.Context, request *CreateStructuredSyslogMessageRequest) (*CreateStructuredSyslogMessageResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateStructuredSyslogMessageRequest{
				CreateStructuredSyslogMessageRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateStructuredSyslogMessage(ctx, request)
}
func (s *EventProducerService) UpdateStructuredSyslogMessage(ctx context.Context, request *UpdateStructuredSyslogMessageRequest) (*UpdateStructuredSyslogMessageResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateStructuredSyslogMessageRequest{
				UpdateStructuredSyslogMessageRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateStructuredSyslogMessage(ctx, request)
}
func (s *EventProducerService) DeleteStructuredSyslogMessage(ctx context.Context, request *DeleteStructuredSyslogMessageRequest) (*DeleteStructuredSyslogMessageResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteStructuredSyslogMessageRequest{
				DeleteStructuredSyslogMessageRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteStructuredSyslogMessage(ctx, request)
}

func (s *EventProducerService) CreateStructuredSyslogMessageTagRef(ctx context.Context, request *CreateStructuredSyslogMessageTagRefRequest) (*CreateStructuredSyslogMessageTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateStructuredSyslogMessageTagRefRequest{
			CreateStructuredSyslogMessageTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateStructuredSyslogMessageTagRef(ctx, request)
}

func (s *EventProducerService) DeleteStructuredSyslogMessageTagRef(ctx context.Context, request *DeleteStructuredSyslogMessageTagRefRequest) (*DeleteStructuredSyslogMessageTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteStructuredSyslogMessageTagRefRequest{
			DeleteStructuredSyslogMessageTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteStructuredSyslogMessageTagRef(ctx, request)
}

func (e *Event_CreateStructuredSyslogMessageRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateStructuredSyslogMessageRequest
	model := request.StructuredSyslogMessage
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetStructuredSyslogMessage(ctx,
			&GetStructuredSyslogMessageRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateStructuredSyslogMessage(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateStructuredSyslogMessageRequest{
			CreateStructuredSyslogMessageRequest: &CreateStructuredSyslogMessageRequest{
				StructuredSyslogMessage: response.GetStructuredSyslogMessage(),
			},
		},
	}, nil
}

func (e *Event_CreateStructuredSyslogMessageRequest) ToUpdateEvent() *Event {
	request := e.CreateStructuredSyslogMessageRequest
	model := request.StructuredSyslogMessage
	return &Event{
		Request: &Event_UpdateStructuredSyslogMessageRequest{
			UpdateStructuredSyslogMessageRequest: &UpdateStructuredSyslogMessageRequest{
				StructuredSyslogMessage: model,
				FieldMask:               request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateStructuredSyslogMessageRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateStructuredSyslogMessageRequest
	response, err := service.UpdateStructuredSyslogMessage(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateStructuredSyslogMessageRequest{
			UpdateStructuredSyslogMessageRequest: &UpdateStructuredSyslogMessageRequest{
				StructuredSyslogMessage: response.GetStructuredSyslogMessage(),
			},
		},
	}, nil
}

func (e *Event_UpdateStructuredSyslogMessageRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteStructuredSyslogMessageRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteStructuredSyslogMessageRequest
	_, err := service.DeleteStructuredSyslogMessage(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteStructuredSyslogMessageRequest{
			DeleteStructuredSyslogMessageRequest: &DeleteStructuredSyslogMessageRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateStructuredSyslogMessageTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateStructuredSyslogMessageTagRefRequest
	if _, err := service.CreateStructuredSyslogMessageTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateStructuredSyslogMessageTagRefRequest{
		CreateStructuredSyslogMessageTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteStructuredSyslogMessageTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteStructuredSyslogMessageTagRefRequest
	if _, err := service.DeleteStructuredSyslogMessageTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteStructuredSyslogMessageTagRefRequest{
		DeleteStructuredSyslogMessageTagRefRequest: request,
	}}, nil
}

type StructuredSyslogSLAProfile = models.StructuredSyslogSLAProfile

func (s *BaseService) CreateStructuredSyslogSLAProfile(ctx context.Context, request *CreateStructuredSyslogSLAProfileRequest) (*CreateStructuredSyslogSLAProfileResponse, error) {
	if s.next == nil {
		return &CreateStructuredSyslogSLAProfileResponse{
			StructuredSyslogSLAProfile: request.GetStructuredSyslogSLAProfile(),
		}, nil
	}
	return s.Next().CreateStructuredSyslogSLAProfile(ctx, request)
}
func (s *BaseService) UpdateStructuredSyslogSLAProfile(ctx context.Context, request *UpdateStructuredSyslogSLAProfileRequest) (*UpdateStructuredSyslogSLAProfileResponse, error) {
	if s.next == nil {
		return &UpdateStructuredSyslogSLAProfileResponse{
			StructuredSyslogSLAProfile: request.GetStructuredSyslogSLAProfile(),
		}, nil
	}
	return s.Next().UpdateStructuredSyslogSLAProfile(ctx, request)
}
func (s *BaseService) DeleteStructuredSyslogSLAProfile(ctx context.Context, request *DeleteStructuredSyslogSLAProfileRequest) (*DeleteStructuredSyslogSLAProfileResponse, error) {
	if s.next == nil {
		return &DeleteStructuredSyslogSLAProfileResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteStructuredSyslogSLAProfile(ctx, request)
}
func (s *BaseService) GetStructuredSyslogSLAProfile(ctx context.Context, request *GetStructuredSyslogSLAProfileRequest) (*GetStructuredSyslogSLAProfileResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetStructuredSyslogSLAProfile(ctx, request)
}
func (s *BaseService) ListStructuredSyslogSLAProfile(ctx context.Context, request *ListStructuredSyslogSLAProfileRequest) (*ListStructuredSyslogSLAProfileResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListStructuredSyslogSLAProfile(ctx, request)
}

func (s *BaseService) CreateStructuredSyslogSLAProfileTagRef(ctx context.Context, request *CreateStructuredSyslogSLAProfileTagRefRequest) (*CreateStructuredSyslogSLAProfileTagRefResponse, error) {
	if s.next == nil {
		return &CreateStructuredSyslogSLAProfileTagRefResponse{
			ID:                               request.ID,
			StructuredSyslogSLAProfileTagRef: request.GetStructuredSyslogSLAProfileTagRef(),
		}, nil
	}
	return s.Next().CreateStructuredSyslogSLAProfileTagRef(ctx, request)
}

func (s *BaseService) DeleteStructuredSyslogSLAProfileTagRef(ctx context.Context, request *DeleteStructuredSyslogSLAProfileTagRefRequest) (*DeleteStructuredSyslogSLAProfileTagRefResponse, error) {
	if s.next == nil {
		return &DeleteStructuredSyslogSLAProfileTagRefResponse{
			ID:                               request.ID,
			StructuredSyslogSLAProfileTagRef: request.GetStructuredSyslogSLAProfileTagRef(),
		}, nil
	}
	return s.Next().DeleteStructuredSyslogSLAProfileTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateStructuredSyslogSLAProfileTagRef(ctx context.Context, request *CreateStructuredSyslogSLAProfileTagRefRequest) (*CreateStructuredSyslogSLAProfileTagRefResponse, error) {
	refField := models.StructuredSyslogSLAProfileFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetStructuredSyslogSLAProfile(ctx, &GetStructuredSyslogSLAProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.StructuredSyslogSLAProfile
		obj.AddTagRef(request.StructuredSyslogSLAProfileTagRef)

		_, err = s.BaseService.UpdateStructuredSyslogSLAProfile(ctx, &UpdateStructuredSyslogSLAProfileRequest{
			StructuredSyslogSLAProfile: obj,
			FieldMask:                  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateStructuredSyslogSLAProfileTagRefResponse{
		ID:                               request.ID,
		StructuredSyslogSLAProfileTagRef: request.GetStructuredSyslogSLAProfileTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteStructuredSyslogSLAProfileTagRef(ctx context.Context, request *DeleteStructuredSyslogSLAProfileTagRefRequest) (*DeleteStructuredSyslogSLAProfileTagRefResponse, error) {
	refField := models.StructuredSyslogSLAProfileFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetStructuredSyslogSLAProfile(ctx, &GetStructuredSyslogSLAProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.StructuredSyslogSLAProfile
		obj.RemoveTagRef(request.StructuredSyslogSLAProfileTagRef)

		_, err = s.BaseService.UpdateStructuredSyslogSLAProfile(ctx, &UpdateStructuredSyslogSLAProfileRequest{
			StructuredSyslogSLAProfile: obj,
			FieldMask:                  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteStructuredSyslogSLAProfileTagRefResponse{
		ID:                               request.ID,
		StructuredSyslogSLAProfileTagRef: request.GetStructuredSyslogSLAProfileTagRef(),
	}, nil
}

func (s *EventProducerService) CreateStructuredSyslogSLAProfile(ctx context.Context, request *CreateStructuredSyslogSLAProfileRequest) (*CreateStructuredSyslogSLAProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateStructuredSyslogSLAProfileRequest{
				CreateStructuredSyslogSLAProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateStructuredSyslogSLAProfile(ctx, request)
}
func (s *EventProducerService) UpdateStructuredSyslogSLAProfile(ctx context.Context, request *UpdateStructuredSyslogSLAProfileRequest) (*UpdateStructuredSyslogSLAProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateStructuredSyslogSLAProfileRequest{
				UpdateStructuredSyslogSLAProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateStructuredSyslogSLAProfile(ctx, request)
}
func (s *EventProducerService) DeleteStructuredSyslogSLAProfile(ctx context.Context, request *DeleteStructuredSyslogSLAProfileRequest) (*DeleteStructuredSyslogSLAProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteStructuredSyslogSLAProfileRequest{
				DeleteStructuredSyslogSLAProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteStructuredSyslogSLAProfile(ctx, request)
}

func (s *EventProducerService) CreateStructuredSyslogSLAProfileTagRef(ctx context.Context, request *CreateStructuredSyslogSLAProfileTagRefRequest) (*CreateStructuredSyslogSLAProfileTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateStructuredSyslogSLAProfileTagRefRequest{
			CreateStructuredSyslogSLAProfileTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateStructuredSyslogSLAProfileTagRef(ctx, request)
}

func (s *EventProducerService) DeleteStructuredSyslogSLAProfileTagRef(ctx context.Context, request *DeleteStructuredSyslogSLAProfileTagRefRequest) (*DeleteStructuredSyslogSLAProfileTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteStructuredSyslogSLAProfileTagRefRequest{
			DeleteStructuredSyslogSLAProfileTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteStructuredSyslogSLAProfileTagRef(ctx, request)
}

func (e *Event_CreateStructuredSyslogSLAProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateStructuredSyslogSLAProfileRequest
	model := request.StructuredSyslogSLAProfile
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetStructuredSyslogSLAProfile(ctx,
			&GetStructuredSyslogSLAProfileRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateStructuredSyslogSLAProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateStructuredSyslogSLAProfileRequest{
			CreateStructuredSyslogSLAProfileRequest: &CreateStructuredSyslogSLAProfileRequest{
				StructuredSyslogSLAProfile: response.GetStructuredSyslogSLAProfile(),
			},
		},
	}, nil
}

func (e *Event_CreateStructuredSyslogSLAProfileRequest) ToUpdateEvent() *Event {
	request := e.CreateStructuredSyslogSLAProfileRequest
	model := request.StructuredSyslogSLAProfile
	return &Event{
		Request: &Event_UpdateStructuredSyslogSLAProfileRequest{
			UpdateStructuredSyslogSLAProfileRequest: &UpdateStructuredSyslogSLAProfileRequest{
				StructuredSyslogSLAProfile: model,
				FieldMask:                  request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateStructuredSyslogSLAProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateStructuredSyslogSLAProfileRequest
	response, err := service.UpdateStructuredSyslogSLAProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateStructuredSyslogSLAProfileRequest{
			UpdateStructuredSyslogSLAProfileRequest: &UpdateStructuredSyslogSLAProfileRequest{
				StructuredSyslogSLAProfile: response.GetStructuredSyslogSLAProfile(),
			},
		},
	}, nil
}

func (e *Event_UpdateStructuredSyslogSLAProfileRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteStructuredSyslogSLAProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteStructuredSyslogSLAProfileRequest
	_, err := service.DeleteStructuredSyslogSLAProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteStructuredSyslogSLAProfileRequest{
			DeleteStructuredSyslogSLAProfileRequest: &DeleteStructuredSyslogSLAProfileRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateStructuredSyslogSLAProfileTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateStructuredSyslogSLAProfileTagRefRequest
	if _, err := service.CreateStructuredSyslogSLAProfileTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateStructuredSyslogSLAProfileTagRefRequest{
		CreateStructuredSyslogSLAProfileTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteStructuredSyslogSLAProfileTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteStructuredSyslogSLAProfileTagRefRequest
	if _, err := service.DeleteStructuredSyslogSLAProfileTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteStructuredSyslogSLAProfileTagRefRequest{
		DeleteStructuredSyslogSLAProfileTagRefRequest: request,
	}}, nil
}

type SubCluster = models.SubCluster

func (s *BaseService) CreateSubCluster(ctx context.Context, request *CreateSubClusterRequest) (*CreateSubClusterResponse, error) {
	if s.next == nil {
		return &CreateSubClusterResponse{
			SubCluster: request.GetSubCluster(),
		}, nil
	}
	return s.Next().CreateSubCluster(ctx, request)
}
func (s *BaseService) UpdateSubCluster(ctx context.Context, request *UpdateSubClusterRequest) (*UpdateSubClusterResponse, error) {
	if s.next == nil {
		return &UpdateSubClusterResponse{
			SubCluster: request.GetSubCluster(),
		}, nil
	}
	return s.Next().UpdateSubCluster(ctx, request)
}
func (s *BaseService) DeleteSubCluster(ctx context.Context, request *DeleteSubClusterRequest) (*DeleteSubClusterResponse, error) {
	if s.next == nil {
		return &DeleteSubClusterResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteSubCluster(ctx, request)
}
func (s *BaseService) GetSubCluster(ctx context.Context, request *GetSubClusterRequest) (*GetSubClusterResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetSubCluster(ctx, request)
}
func (s *BaseService) ListSubCluster(ctx context.Context, request *ListSubClusterRequest) (*ListSubClusterResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListSubCluster(ctx, request)
}

func (s *BaseService) CreateSubClusterTagRef(ctx context.Context, request *CreateSubClusterTagRefRequest) (*CreateSubClusterTagRefResponse, error) {
	if s.next == nil {
		return &CreateSubClusterTagRefResponse{
			ID:               request.ID,
			SubClusterTagRef: request.GetSubClusterTagRef(),
		}, nil
	}
	return s.Next().CreateSubClusterTagRef(ctx, request)
}

func (s *BaseService) DeleteSubClusterTagRef(ctx context.Context, request *DeleteSubClusterTagRefRequest) (*DeleteSubClusterTagRefResponse, error) {
	if s.next == nil {
		return &DeleteSubClusterTagRefResponse{
			ID:               request.ID,
			SubClusterTagRef: request.GetSubClusterTagRef(),
		}, nil
	}
	return s.Next().DeleteSubClusterTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateSubClusterTagRef(ctx context.Context, request *CreateSubClusterTagRefRequest) (*CreateSubClusterTagRefResponse, error) {
	refField := models.SubClusterFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSubCluster(ctx, &GetSubClusterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.SubCluster
		obj.AddTagRef(request.SubClusterTagRef)

		_, err = s.BaseService.UpdateSubCluster(ctx, &UpdateSubClusterRequest{
			SubCluster: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateSubClusterTagRefResponse{
		ID:               request.ID,
		SubClusterTagRef: request.GetSubClusterTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteSubClusterTagRef(ctx context.Context, request *DeleteSubClusterTagRefRequest) (*DeleteSubClusterTagRefResponse, error) {
	refField := models.SubClusterFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSubCluster(ctx, &GetSubClusterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.SubCluster
		obj.RemoveTagRef(request.SubClusterTagRef)

		_, err = s.BaseService.UpdateSubCluster(ctx, &UpdateSubClusterRequest{
			SubCluster: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteSubClusterTagRefResponse{
		ID:               request.ID,
		SubClusterTagRef: request.GetSubClusterTagRef(),
	}, nil
}

func (s *EventProducerService) CreateSubCluster(ctx context.Context, request *CreateSubClusterRequest) (*CreateSubClusterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateSubClusterRequest{
				CreateSubClusterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateSubCluster(ctx, request)
}
func (s *EventProducerService) UpdateSubCluster(ctx context.Context, request *UpdateSubClusterRequest) (*UpdateSubClusterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateSubClusterRequest{
				UpdateSubClusterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateSubCluster(ctx, request)
}
func (s *EventProducerService) DeleteSubCluster(ctx context.Context, request *DeleteSubClusterRequest) (*DeleteSubClusterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteSubClusterRequest{
				DeleteSubClusterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteSubCluster(ctx, request)
}

func (s *EventProducerService) CreateSubClusterTagRef(ctx context.Context, request *CreateSubClusterTagRefRequest) (*CreateSubClusterTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateSubClusterTagRefRequest{
			CreateSubClusterTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateSubClusterTagRef(ctx, request)
}

func (s *EventProducerService) DeleteSubClusterTagRef(ctx context.Context, request *DeleteSubClusterTagRefRequest) (*DeleteSubClusterTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteSubClusterTagRefRequest{
			DeleteSubClusterTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteSubClusterTagRef(ctx, request)
}

func (e *Event_CreateSubClusterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSubClusterRequest
	model := request.SubCluster
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetSubCluster(ctx,
			&GetSubClusterRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateSubCluster(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateSubClusterRequest{
			CreateSubClusterRequest: &CreateSubClusterRequest{
				SubCluster: response.GetSubCluster(),
			},
		},
	}, nil
}

func (e *Event_CreateSubClusterRequest) ToUpdateEvent() *Event {
	request := e.CreateSubClusterRequest
	model := request.SubCluster
	return &Event{
		Request: &Event_UpdateSubClusterRequest{
			UpdateSubClusterRequest: &UpdateSubClusterRequest{
				SubCluster: model,
				FieldMask:  request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateSubClusterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateSubClusterRequest
	response, err := service.UpdateSubCluster(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateSubClusterRequest{
			UpdateSubClusterRequest: &UpdateSubClusterRequest{
				SubCluster: response.GetSubCluster(),
			},
		},
	}, nil
}

func (e *Event_UpdateSubClusterRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteSubClusterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSubClusterRequest
	_, err := service.DeleteSubCluster(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteSubClusterRequest{
			DeleteSubClusterRequest: &DeleteSubClusterRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateSubClusterTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSubClusterTagRefRequest
	if _, err := service.CreateSubClusterTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateSubClusterTagRefRequest{
		CreateSubClusterTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteSubClusterTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSubClusterTagRefRequest
	if _, err := service.DeleteSubClusterTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteSubClusterTagRefRequest{
		DeleteSubClusterTagRefRequest: request,
	}}, nil
}

type Subnet = models.Subnet

func (s *BaseService) CreateSubnet(ctx context.Context, request *CreateSubnetRequest) (*CreateSubnetResponse, error) {
	if s.next == nil {
		return &CreateSubnetResponse{
			Subnet: request.GetSubnet(),
		}, nil
	}
	return s.Next().CreateSubnet(ctx, request)
}
func (s *BaseService) UpdateSubnet(ctx context.Context, request *UpdateSubnetRequest) (*UpdateSubnetResponse, error) {
	if s.next == nil {
		return &UpdateSubnetResponse{
			Subnet: request.GetSubnet(),
		}, nil
	}
	return s.Next().UpdateSubnet(ctx, request)
}
func (s *BaseService) DeleteSubnet(ctx context.Context, request *DeleteSubnetRequest) (*DeleteSubnetResponse, error) {
	if s.next == nil {
		return &DeleteSubnetResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteSubnet(ctx, request)
}
func (s *BaseService) GetSubnet(ctx context.Context, request *GetSubnetRequest) (*GetSubnetResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetSubnet(ctx, request)
}
func (s *BaseService) ListSubnet(ctx context.Context, request *ListSubnetRequest) (*ListSubnetResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListSubnet(ctx, request)
}

func (s *BaseService) CreateSubnetVirtualMachineInterfaceRef(ctx context.Context, request *CreateSubnetVirtualMachineInterfaceRefRequest) (*CreateSubnetVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateSubnetVirtualMachineInterfaceRefResponse{
			ID:                               request.ID,
			SubnetVirtualMachineInterfaceRef: request.GetSubnetVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().CreateSubnetVirtualMachineInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteSubnetVirtualMachineInterfaceRef(ctx context.Context, request *DeleteSubnetVirtualMachineInterfaceRefRequest) (*DeleteSubnetVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteSubnetVirtualMachineInterfaceRefResponse{
			ID:                               request.ID,
			SubnetVirtualMachineInterfaceRef: request.GetSubnetVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteSubnetVirtualMachineInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateSubnetVirtualMachineInterfaceRef(ctx context.Context, request *CreateSubnetVirtualMachineInterfaceRefRequest) (*CreateSubnetVirtualMachineInterfaceRefResponse, error) {
	refField := models.SubnetFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSubnet(ctx, &GetSubnetRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Subnet
		obj.AddVirtualMachineInterfaceRef(request.SubnetVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateSubnet(ctx, &UpdateSubnetRequest{
			Subnet:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateSubnetVirtualMachineInterfaceRefResponse{
		ID:                               request.ID,
		SubnetVirtualMachineInterfaceRef: request.GetSubnetVirtualMachineInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteSubnetVirtualMachineInterfaceRef(ctx context.Context, request *DeleteSubnetVirtualMachineInterfaceRefRequest) (*DeleteSubnetVirtualMachineInterfaceRefResponse, error) {
	refField := models.SubnetFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSubnet(ctx, &GetSubnetRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Subnet
		obj.RemoveVirtualMachineInterfaceRef(request.SubnetVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateSubnet(ctx, &UpdateSubnetRequest{
			Subnet:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteSubnetVirtualMachineInterfaceRefResponse{
		ID:                               request.ID,
		SubnetVirtualMachineInterfaceRef: request.GetSubnetVirtualMachineInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateSubnetTagRef(ctx context.Context, request *CreateSubnetTagRefRequest) (*CreateSubnetTagRefResponse, error) {
	if s.next == nil {
		return &CreateSubnetTagRefResponse{
			ID:           request.ID,
			SubnetTagRef: request.GetSubnetTagRef(),
		}, nil
	}
	return s.Next().CreateSubnetTagRef(ctx, request)
}

func (s *BaseService) DeleteSubnetTagRef(ctx context.Context, request *DeleteSubnetTagRefRequest) (*DeleteSubnetTagRefResponse, error) {
	if s.next == nil {
		return &DeleteSubnetTagRefResponse{
			ID:           request.ID,
			SubnetTagRef: request.GetSubnetTagRef(),
		}, nil
	}
	return s.Next().DeleteSubnetTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateSubnetTagRef(ctx context.Context, request *CreateSubnetTagRefRequest) (*CreateSubnetTagRefResponse, error) {
	refField := models.SubnetFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSubnet(ctx, &GetSubnetRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Subnet
		obj.AddTagRef(request.SubnetTagRef)

		_, err = s.BaseService.UpdateSubnet(ctx, &UpdateSubnetRequest{
			Subnet:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateSubnetTagRefResponse{
		ID:           request.ID,
		SubnetTagRef: request.GetSubnetTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteSubnetTagRef(ctx context.Context, request *DeleteSubnetTagRefRequest) (*DeleteSubnetTagRefResponse, error) {
	refField := models.SubnetFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetSubnet(ctx, &GetSubnetRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Subnet
		obj.RemoveTagRef(request.SubnetTagRef)

		_, err = s.BaseService.UpdateSubnet(ctx, &UpdateSubnetRequest{
			Subnet:    obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteSubnetTagRefResponse{
		ID:           request.ID,
		SubnetTagRef: request.GetSubnetTagRef(),
	}, nil
}

func (s *EventProducerService) CreateSubnet(ctx context.Context, request *CreateSubnetRequest) (*CreateSubnetResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateSubnetRequest{
				CreateSubnetRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateSubnet(ctx, request)
}
func (s *EventProducerService) UpdateSubnet(ctx context.Context, request *UpdateSubnetRequest) (*UpdateSubnetResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateSubnetRequest{
				UpdateSubnetRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateSubnet(ctx, request)
}
func (s *EventProducerService) DeleteSubnet(ctx context.Context, request *DeleteSubnetRequest) (*DeleteSubnetResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteSubnetRequest{
				DeleteSubnetRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteSubnet(ctx, request)
}

func (s *EventProducerService) CreateSubnetVirtualMachineInterfaceRef(ctx context.Context, request *CreateSubnetVirtualMachineInterfaceRefRequest) (*CreateSubnetVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateSubnetVirtualMachineInterfaceRefRequest{
			CreateSubnetVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateSubnetVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteSubnetVirtualMachineInterfaceRef(ctx context.Context, request *DeleteSubnetVirtualMachineInterfaceRefRequest) (*DeleteSubnetVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteSubnetVirtualMachineInterfaceRefRequest{
			DeleteSubnetVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteSubnetVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateSubnetTagRef(ctx context.Context, request *CreateSubnetTagRefRequest) (*CreateSubnetTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateSubnetTagRefRequest{
			CreateSubnetTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateSubnetTagRef(ctx, request)
}

func (s *EventProducerService) DeleteSubnetTagRef(ctx context.Context, request *DeleteSubnetTagRefRequest) (*DeleteSubnetTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteSubnetTagRefRequest{
			DeleteSubnetTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteSubnetTagRef(ctx, request)
}

func (e *Event_CreateSubnetRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSubnetRequest
	model := request.Subnet
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetSubnet(ctx,
			&GetSubnetRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateSubnet(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateSubnetRequest{
			CreateSubnetRequest: &CreateSubnetRequest{
				Subnet: response.GetSubnet(),
			},
		},
	}, nil
}

func (e *Event_CreateSubnetRequest) ToUpdateEvent() *Event {
	request := e.CreateSubnetRequest
	model := request.Subnet
	return &Event{
		Request: &Event_UpdateSubnetRequest{
			UpdateSubnetRequest: &UpdateSubnetRequest{
				Subnet:    model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateSubnetRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateSubnetRequest
	response, err := service.UpdateSubnet(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateSubnetRequest{
			UpdateSubnetRequest: &UpdateSubnetRequest{
				Subnet: response.GetSubnet(),
			},
		},
	}, nil
}

func (e *Event_UpdateSubnetRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteSubnetRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSubnetRequest
	_, err := service.DeleteSubnet(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteSubnetRequest{
			DeleteSubnetRequest: &DeleteSubnetRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateSubnetVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSubnetVirtualMachineInterfaceRefRequest
	if _, err := service.CreateSubnetVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateSubnetVirtualMachineInterfaceRefRequest{
		CreateSubnetVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteSubnetVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSubnetVirtualMachineInterfaceRefRequest
	if _, err := service.DeleteSubnetVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteSubnetVirtualMachineInterfaceRefRequest{
		DeleteSubnetVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateSubnetTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateSubnetTagRefRequest
	if _, err := service.CreateSubnetTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateSubnetTagRefRequest{
		CreateSubnetTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteSubnetTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteSubnetTagRefRequest
	if _, err := service.DeleteSubnetTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteSubnetTagRefRequest{
		DeleteSubnetTagRefRequest: request,
	}}, nil
}

type Tag = models.Tag

func (s *BaseService) CreateTag(ctx context.Context, request *CreateTagRequest) (*CreateTagResponse, error) {
	if s.next == nil {
		return &CreateTagResponse{
			Tag: request.GetTag(),
		}, nil
	}
	return s.Next().CreateTag(ctx, request)
}
func (s *BaseService) UpdateTag(ctx context.Context, request *UpdateTagRequest) (*UpdateTagResponse, error) {
	if s.next == nil {
		return &UpdateTagResponse{
			Tag: request.GetTag(),
		}, nil
	}
	return s.Next().UpdateTag(ctx, request)
}
func (s *BaseService) DeleteTag(ctx context.Context, request *DeleteTagRequest) (*DeleteTagResponse, error) {
	if s.next == nil {
		return &DeleteTagResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteTag(ctx, request)
}
func (s *BaseService) GetTag(ctx context.Context, request *GetTagRequest) (*GetTagResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetTag(ctx, request)
}
func (s *BaseService) ListTag(ctx context.Context, request *ListTagRequest) (*ListTagResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListTag(ctx, request)
}

func (s *BaseService) CreateTagTagRef(ctx context.Context, request *CreateTagTagRefRequest) (*CreateTagTagRefResponse, error) {
	if s.next == nil {
		return &CreateTagTagRefResponse{
			ID:        request.ID,
			TagTagRef: request.GetTagTagRef(),
		}, nil
	}
	return s.Next().CreateTagTagRef(ctx, request)
}

func (s *BaseService) DeleteTagTagRef(ctx context.Context, request *DeleteTagTagRefRequest) (*DeleteTagTagRefResponse, error) {
	if s.next == nil {
		return &DeleteTagTagRefResponse{
			ID:        request.ID,
			TagTagRef: request.GetTagTagRef(),
		}, nil
	}
	return s.Next().DeleteTagTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateTagTagRef(ctx context.Context, request *CreateTagTagRefRequest) (*CreateTagTagRefResponse, error) {
	refField := models.TagFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetTag(ctx, &GetTagRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Tag
		obj.AddTagRef(request.TagTagRef)

		_, err = s.BaseService.UpdateTag(ctx, &UpdateTagRequest{
			Tag:       obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateTagTagRefResponse{
		ID:        request.ID,
		TagTagRef: request.GetTagTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteTagTagRef(ctx context.Context, request *DeleteTagTagRefRequest) (*DeleteTagTagRefResponse, error) {
	refField := models.TagFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetTag(ctx, &GetTagRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Tag
		obj.RemoveTagRef(request.TagTagRef)

		_, err = s.BaseService.UpdateTag(ctx, &UpdateTagRequest{
			Tag:       obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteTagTagRefResponse{
		ID:        request.ID,
		TagTagRef: request.GetTagTagRef(),
	}, nil
}

func (s *BaseService) CreateTagTagTypeRef(ctx context.Context, request *CreateTagTagTypeRefRequest) (*CreateTagTagTypeRefResponse, error) {
	if s.next == nil {
		return &CreateTagTagTypeRefResponse{
			ID:            request.ID,
			TagTagTypeRef: request.GetTagTagTypeRef(),
		}, nil
	}
	return s.Next().CreateTagTagTypeRef(ctx, request)
}

func (s *BaseService) DeleteTagTagTypeRef(ctx context.Context, request *DeleteTagTagTypeRefRequest) (*DeleteTagTagTypeRefResponse, error) {
	if s.next == nil {
		return &DeleteTagTagTypeRefResponse{
			ID:            request.ID,
			TagTagTypeRef: request.GetTagTagTypeRef(),
		}, nil
	}
	return s.Next().DeleteTagTagTypeRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateTagTagTypeRef(ctx context.Context, request *CreateTagTagTypeRefRequest) (*CreateTagTagTypeRefResponse, error) {
	refField := models.TagFieldTagTypeRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetTag(ctx, &GetTagRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Tag
		obj.AddTagTypeRef(request.TagTagTypeRef)

		_, err = s.BaseService.UpdateTag(ctx, &UpdateTagRequest{
			Tag:       obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateTagTagTypeRefResponse{
		ID:            request.ID,
		TagTagTypeRef: request.GetTagTagTypeRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteTagTagTypeRef(ctx context.Context, request *DeleteTagTagTypeRefRequest) (*DeleteTagTagTypeRefResponse, error) {
	refField := models.TagFieldTagTypeRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetTag(ctx, &GetTagRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.Tag
		obj.RemoveTagTypeRef(request.TagTagTypeRef)

		_, err = s.BaseService.UpdateTag(ctx, &UpdateTagRequest{
			Tag:       obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteTagTagTypeRefResponse{
		ID:            request.ID,
		TagTagTypeRef: request.GetTagTagTypeRef(),
	}, nil
}

func (s *EventProducerService) CreateTag(ctx context.Context, request *CreateTagRequest) (*CreateTagResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateTagRequest{
				CreateTagRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateTag(ctx, request)
}
func (s *EventProducerService) UpdateTag(ctx context.Context, request *UpdateTagRequest) (*UpdateTagResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateTagRequest{
				UpdateTagRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateTag(ctx, request)
}
func (s *EventProducerService) DeleteTag(ctx context.Context, request *DeleteTagRequest) (*DeleteTagResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteTagRequest{
				DeleteTagRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteTag(ctx, request)
}

func (s *EventProducerService) CreateTagTagRef(ctx context.Context, request *CreateTagTagRefRequest) (*CreateTagTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateTagTagRefRequest{
			CreateTagTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateTagTagRef(ctx, request)
}

func (s *EventProducerService) DeleteTagTagRef(ctx context.Context, request *DeleteTagTagRefRequest) (*DeleteTagTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteTagTagRefRequest{
			DeleteTagTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteTagTagRef(ctx, request)
}

func (s *EventProducerService) CreateTagTagTypeRef(ctx context.Context, request *CreateTagTagTypeRefRequest) (*CreateTagTagTypeRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateTagTagTypeRefRequest{
			CreateTagTagTypeRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateTagTagTypeRef(ctx, request)
}

func (s *EventProducerService) DeleteTagTagTypeRef(ctx context.Context, request *DeleteTagTagTypeRefRequest) (*DeleteTagTagTypeRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteTagTagTypeRefRequest{
			DeleteTagTagTypeRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteTagTagTypeRef(ctx, request)
}

func (e *Event_CreateTagRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateTagRequest
	model := request.Tag
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetTag(ctx,
			&GetTagRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateTag(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateTagRequest{
			CreateTagRequest: &CreateTagRequest{
				Tag: response.GetTag(),
			},
		},
	}, nil
}

func (e *Event_CreateTagRequest) ToUpdateEvent() *Event {
	request := e.CreateTagRequest
	model := request.Tag
	return &Event{
		Request: &Event_UpdateTagRequest{
			UpdateTagRequest: &UpdateTagRequest{
				Tag:       model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateTagRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateTagRequest
	response, err := service.UpdateTag(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateTagRequest{
			UpdateTagRequest: &UpdateTagRequest{
				Tag: response.GetTag(),
			},
		},
	}, nil
}

func (e *Event_UpdateTagRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteTagRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteTagRequest
	_, err := service.DeleteTag(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteTagRequest{
			DeleteTagRequest: &DeleteTagRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateTagTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateTagTagRefRequest
	if _, err := service.CreateTagTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateTagTagRefRequest{
		CreateTagTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteTagTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteTagTagRefRequest
	if _, err := service.DeleteTagTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteTagTagRefRequest{
		DeleteTagTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateTagTagTypeRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateTagTagTypeRefRequest
	if _, err := service.CreateTagTagTypeRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateTagTagTypeRefRequest{
		CreateTagTagTypeRefRequest: request,
	}}, nil
}

func (e *Event_DeleteTagTagTypeRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteTagTagTypeRefRequest
	if _, err := service.DeleteTagTagTypeRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteTagTagTypeRefRequest{
		DeleteTagTagTypeRefRequest: request,
	}}, nil
}

type TagType = models.TagType

func (s *BaseService) CreateTagType(ctx context.Context, request *CreateTagTypeRequest) (*CreateTagTypeResponse, error) {
	if s.next == nil {
		return &CreateTagTypeResponse{
			TagType: request.GetTagType(),
		}, nil
	}
	return s.Next().CreateTagType(ctx, request)
}
func (s *BaseService) UpdateTagType(ctx context.Context, request *UpdateTagTypeRequest) (*UpdateTagTypeResponse, error) {
	if s.next == nil {
		return &UpdateTagTypeResponse{
			TagType: request.GetTagType(),
		}, nil
	}
	return s.Next().UpdateTagType(ctx, request)
}
func (s *BaseService) DeleteTagType(ctx context.Context, request *DeleteTagTypeRequest) (*DeleteTagTypeResponse, error) {
	if s.next == nil {
		return &DeleteTagTypeResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteTagType(ctx, request)
}
func (s *BaseService) GetTagType(ctx context.Context, request *GetTagTypeRequest) (*GetTagTypeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetTagType(ctx, request)
}
func (s *BaseService) ListTagType(ctx context.Context, request *ListTagTypeRequest) (*ListTagTypeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListTagType(ctx, request)
}

func (s *BaseService) CreateTagTypeTagRef(ctx context.Context, request *CreateTagTypeTagRefRequest) (*CreateTagTypeTagRefResponse, error) {
	if s.next == nil {
		return &CreateTagTypeTagRefResponse{
			ID:            request.ID,
			TagTypeTagRef: request.GetTagTypeTagRef(),
		}, nil
	}
	return s.Next().CreateTagTypeTagRef(ctx, request)
}

func (s *BaseService) DeleteTagTypeTagRef(ctx context.Context, request *DeleteTagTypeTagRefRequest) (*DeleteTagTypeTagRefResponse, error) {
	if s.next == nil {
		return &DeleteTagTypeTagRefResponse{
			ID:            request.ID,
			TagTypeTagRef: request.GetTagTypeTagRef(),
		}, nil
	}
	return s.Next().DeleteTagTypeTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateTagTypeTagRef(ctx context.Context, request *CreateTagTypeTagRefRequest) (*CreateTagTypeTagRefResponse, error) {
	refField := models.TagTypeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetTagType(ctx, &GetTagTypeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.TagType
		obj.AddTagRef(request.TagTypeTagRef)

		_, err = s.BaseService.UpdateTagType(ctx, &UpdateTagTypeRequest{
			TagType:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateTagTypeTagRefResponse{
		ID:            request.ID,
		TagTypeTagRef: request.GetTagTypeTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteTagTypeTagRef(ctx context.Context, request *DeleteTagTypeTagRefRequest) (*DeleteTagTypeTagRefResponse, error) {
	refField := models.TagTypeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetTagType(ctx, &GetTagTypeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.TagType
		obj.RemoveTagRef(request.TagTypeTagRef)

		_, err = s.BaseService.UpdateTagType(ctx, &UpdateTagTypeRequest{
			TagType:   obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteTagTypeTagRefResponse{
		ID:            request.ID,
		TagTypeTagRef: request.GetTagTypeTagRef(),
	}, nil
}

func (s *EventProducerService) CreateTagType(ctx context.Context, request *CreateTagTypeRequest) (*CreateTagTypeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateTagTypeRequest{
				CreateTagTypeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateTagType(ctx, request)
}
func (s *EventProducerService) UpdateTagType(ctx context.Context, request *UpdateTagTypeRequest) (*UpdateTagTypeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateTagTypeRequest{
				UpdateTagTypeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateTagType(ctx, request)
}
func (s *EventProducerService) DeleteTagType(ctx context.Context, request *DeleteTagTypeRequest) (*DeleteTagTypeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteTagTypeRequest{
				DeleteTagTypeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteTagType(ctx, request)
}

func (s *EventProducerService) CreateTagTypeTagRef(ctx context.Context, request *CreateTagTypeTagRefRequest) (*CreateTagTypeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateTagTypeTagRefRequest{
			CreateTagTypeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateTagTypeTagRef(ctx, request)
}

func (s *EventProducerService) DeleteTagTypeTagRef(ctx context.Context, request *DeleteTagTypeTagRefRequest) (*DeleteTagTypeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteTagTypeTagRefRequest{
			DeleteTagTypeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteTagTypeTagRef(ctx, request)
}

func (e *Event_CreateTagTypeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateTagTypeRequest
	model := request.TagType
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetTagType(ctx,
			&GetTagTypeRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateTagType(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateTagTypeRequest{
			CreateTagTypeRequest: &CreateTagTypeRequest{
				TagType: response.GetTagType(),
			},
		},
	}, nil
}

func (e *Event_CreateTagTypeRequest) ToUpdateEvent() *Event {
	request := e.CreateTagTypeRequest
	model := request.TagType
	return &Event{
		Request: &Event_UpdateTagTypeRequest{
			UpdateTagTypeRequest: &UpdateTagTypeRequest{
				TagType:   model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateTagTypeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateTagTypeRequest
	response, err := service.UpdateTagType(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateTagTypeRequest{
			UpdateTagTypeRequest: &UpdateTagTypeRequest{
				TagType: response.GetTagType(),
			},
		},
	}, nil
}

func (e *Event_UpdateTagTypeRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteTagTypeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteTagTypeRequest
	_, err := service.DeleteTagType(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteTagTypeRequest{
			DeleteTagTypeRequest: &DeleteTagTypeRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateTagTypeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateTagTypeTagRefRequest
	if _, err := service.CreateTagTypeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateTagTypeTagRefRequest{
		CreateTagTypeTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteTagTypeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteTagTypeTagRefRequest
	if _, err := service.DeleteTagTypeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteTagTypeTagRefRequest{
		DeleteTagTypeTagRefRequest: request,
	}}, nil
}

type TelemetryProfile = models.TelemetryProfile

func (s *BaseService) CreateTelemetryProfile(ctx context.Context, request *CreateTelemetryProfileRequest) (*CreateTelemetryProfileResponse, error) {
	if s.next == nil {
		return &CreateTelemetryProfileResponse{
			TelemetryProfile: request.GetTelemetryProfile(),
		}, nil
	}
	return s.Next().CreateTelemetryProfile(ctx, request)
}
func (s *BaseService) UpdateTelemetryProfile(ctx context.Context, request *UpdateTelemetryProfileRequest) (*UpdateTelemetryProfileResponse, error) {
	if s.next == nil {
		return &UpdateTelemetryProfileResponse{
			TelemetryProfile: request.GetTelemetryProfile(),
		}, nil
	}
	return s.Next().UpdateTelemetryProfile(ctx, request)
}
func (s *BaseService) DeleteTelemetryProfile(ctx context.Context, request *DeleteTelemetryProfileRequest) (*DeleteTelemetryProfileResponse, error) {
	if s.next == nil {
		return &DeleteTelemetryProfileResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteTelemetryProfile(ctx, request)
}
func (s *BaseService) GetTelemetryProfile(ctx context.Context, request *GetTelemetryProfileRequest) (*GetTelemetryProfileResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetTelemetryProfile(ctx, request)
}
func (s *BaseService) ListTelemetryProfile(ctx context.Context, request *ListTelemetryProfileRequest) (*ListTelemetryProfileResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListTelemetryProfile(ctx, request)
}

func (s *BaseService) CreateTelemetryProfileTagRef(ctx context.Context, request *CreateTelemetryProfileTagRefRequest) (*CreateTelemetryProfileTagRefResponse, error) {
	if s.next == nil {
		return &CreateTelemetryProfileTagRefResponse{
			ID:                     request.ID,
			TelemetryProfileTagRef: request.GetTelemetryProfileTagRef(),
		}, nil
	}
	return s.Next().CreateTelemetryProfileTagRef(ctx, request)
}

func (s *BaseService) DeleteTelemetryProfileTagRef(ctx context.Context, request *DeleteTelemetryProfileTagRefRequest) (*DeleteTelemetryProfileTagRefResponse, error) {
	if s.next == nil {
		return &DeleteTelemetryProfileTagRefResponse{
			ID:                     request.ID,
			TelemetryProfileTagRef: request.GetTelemetryProfileTagRef(),
		}, nil
	}
	return s.Next().DeleteTelemetryProfileTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateTelemetryProfileTagRef(ctx context.Context, request *CreateTelemetryProfileTagRefRequest) (*CreateTelemetryProfileTagRefResponse, error) {
	refField := models.TelemetryProfileFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetTelemetryProfile(ctx, &GetTelemetryProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.TelemetryProfile
		obj.AddTagRef(request.TelemetryProfileTagRef)

		_, err = s.BaseService.UpdateTelemetryProfile(ctx, &UpdateTelemetryProfileRequest{
			TelemetryProfile: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateTelemetryProfileTagRefResponse{
		ID:                     request.ID,
		TelemetryProfileTagRef: request.GetTelemetryProfileTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteTelemetryProfileTagRef(ctx context.Context, request *DeleteTelemetryProfileTagRefRequest) (*DeleteTelemetryProfileTagRefResponse, error) {
	refField := models.TelemetryProfileFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetTelemetryProfile(ctx, &GetTelemetryProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.TelemetryProfile
		obj.RemoveTagRef(request.TelemetryProfileTagRef)

		_, err = s.BaseService.UpdateTelemetryProfile(ctx, &UpdateTelemetryProfileRequest{
			TelemetryProfile: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteTelemetryProfileTagRefResponse{
		ID:                     request.ID,
		TelemetryProfileTagRef: request.GetTelemetryProfileTagRef(),
	}, nil
}

func (s *BaseService) CreateTelemetryProfileSflowProfileRef(ctx context.Context, request *CreateTelemetryProfileSflowProfileRefRequest) (*CreateTelemetryProfileSflowProfileRefResponse, error) {
	if s.next == nil {
		return &CreateTelemetryProfileSflowProfileRefResponse{
			ID:                              request.ID,
			TelemetryProfileSflowProfileRef: request.GetTelemetryProfileSflowProfileRef(),
		}, nil
	}
	return s.Next().CreateTelemetryProfileSflowProfileRef(ctx, request)
}

func (s *BaseService) DeleteTelemetryProfileSflowProfileRef(ctx context.Context, request *DeleteTelemetryProfileSflowProfileRefRequest) (*DeleteTelemetryProfileSflowProfileRefResponse, error) {
	if s.next == nil {
		return &DeleteTelemetryProfileSflowProfileRefResponse{
			ID:                              request.ID,
			TelemetryProfileSflowProfileRef: request.GetTelemetryProfileSflowProfileRef(),
		}, nil
	}
	return s.Next().DeleteTelemetryProfileSflowProfileRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateTelemetryProfileSflowProfileRef(ctx context.Context, request *CreateTelemetryProfileSflowProfileRefRequest) (*CreateTelemetryProfileSflowProfileRefResponse, error) {
	refField := models.TelemetryProfileFieldSflowProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetTelemetryProfile(ctx, &GetTelemetryProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.TelemetryProfile
		obj.AddSflowProfileRef(request.TelemetryProfileSflowProfileRef)

		_, err = s.BaseService.UpdateTelemetryProfile(ctx, &UpdateTelemetryProfileRequest{
			TelemetryProfile: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateTelemetryProfileSflowProfileRefResponse{
		ID:                              request.ID,
		TelemetryProfileSflowProfileRef: request.GetTelemetryProfileSflowProfileRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteTelemetryProfileSflowProfileRef(ctx context.Context, request *DeleteTelemetryProfileSflowProfileRefRequest) (*DeleteTelemetryProfileSflowProfileRefResponse, error) {
	refField := models.TelemetryProfileFieldSflowProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetTelemetryProfile(ctx, &GetTelemetryProfileRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.TelemetryProfile
		obj.RemoveSflowProfileRef(request.TelemetryProfileSflowProfileRef)

		_, err = s.BaseService.UpdateTelemetryProfile(ctx, &UpdateTelemetryProfileRequest{
			TelemetryProfile: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteTelemetryProfileSflowProfileRefResponse{
		ID:                              request.ID,
		TelemetryProfileSflowProfileRef: request.GetTelemetryProfileSflowProfileRef(),
	}, nil
}

func (s *EventProducerService) CreateTelemetryProfile(ctx context.Context, request *CreateTelemetryProfileRequest) (*CreateTelemetryProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateTelemetryProfileRequest{
				CreateTelemetryProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateTelemetryProfile(ctx, request)
}
func (s *EventProducerService) UpdateTelemetryProfile(ctx context.Context, request *UpdateTelemetryProfileRequest) (*UpdateTelemetryProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateTelemetryProfileRequest{
				UpdateTelemetryProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateTelemetryProfile(ctx, request)
}
func (s *EventProducerService) DeleteTelemetryProfile(ctx context.Context, request *DeleteTelemetryProfileRequest) (*DeleteTelemetryProfileResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteTelemetryProfileRequest{
				DeleteTelemetryProfileRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteTelemetryProfile(ctx, request)
}

func (s *EventProducerService) CreateTelemetryProfileSflowProfileRef(ctx context.Context, request *CreateTelemetryProfileSflowProfileRefRequest) (*CreateTelemetryProfileSflowProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateTelemetryProfileSflowProfileRefRequest{
			CreateTelemetryProfileSflowProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateTelemetryProfileSflowProfileRef(ctx, request)
}

func (s *EventProducerService) DeleteTelemetryProfileSflowProfileRef(ctx context.Context, request *DeleteTelemetryProfileSflowProfileRefRequest) (*DeleteTelemetryProfileSflowProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteTelemetryProfileSflowProfileRefRequest{
			DeleteTelemetryProfileSflowProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteTelemetryProfileSflowProfileRef(ctx, request)
}

func (s *EventProducerService) CreateTelemetryProfileTagRef(ctx context.Context, request *CreateTelemetryProfileTagRefRequest) (*CreateTelemetryProfileTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateTelemetryProfileTagRefRequest{
			CreateTelemetryProfileTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateTelemetryProfileTagRef(ctx, request)
}

func (s *EventProducerService) DeleteTelemetryProfileTagRef(ctx context.Context, request *DeleteTelemetryProfileTagRefRequest) (*DeleteTelemetryProfileTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteTelemetryProfileTagRefRequest{
			DeleteTelemetryProfileTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteTelemetryProfileTagRef(ctx, request)
}

func (e *Event_CreateTelemetryProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateTelemetryProfileRequest
	model := request.TelemetryProfile
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetTelemetryProfile(ctx,
			&GetTelemetryProfileRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateTelemetryProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateTelemetryProfileRequest{
			CreateTelemetryProfileRequest: &CreateTelemetryProfileRequest{
				TelemetryProfile: response.GetTelemetryProfile(),
			},
		},
	}, nil
}

func (e *Event_CreateTelemetryProfileRequest) ToUpdateEvent() *Event {
	request := e.CreateTelemetryProfileRequest
	model := request.TelemetryProfile
	return &Event{
		Request: &Event_UpdateTelemetryProfileRequest{
			UpdateTelemetryProfileRequest: &UpdateTelemetryProfileRequest{
				TelemetryProfile: model,
				FieldMask:        request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateTelemetryProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateTelemetryProfileRequest
	response, err := service.UpdateTelemetryProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateTelemetryProfileRequest{
			UpdateTelemetryProfileRequest: &UpdateTelemetryProfileRequest{
				TelemetryProfile: response.GetTelemetryProfile(),
			},
		},
	}, nil
}

func (e *Event_UpdateTelemetryProfileRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteTelemetryProfileRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteTelemetryProfileRequest
	_, err := service.DeleteTelemetryProfile(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteTelemetryProfileRequest{
			DeleteTelemetryProfileRequest: &DeleteTelemetryProfileRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateTelemetryProfileTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateTelemetryProfileTagRefRequest
	if _, err := service.CreateTelemetryProfileTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateTelemetryProfileTagRefRequest{
		CreateTelemetryProfileTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteTelemetryProfileTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteTelemetryProfileTagRefRequest
	if _, err := service.DeleteTelemetryProfileTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteTelemetryProfileTagRefRequest{
		DeleteTelemetryProfileTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateTelemetryProfileSflowProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateTelemetryProfileSflowProfileRefRequest
	if _, err := service.CreateTelemetryProfileSflowProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateTelemetryProfileSflowProfileRefRequest{
		CreateTelemetryProfileSflowProfileRefRequest: request,
	}}, nil
}

func (e *Event_DeleteTelemetryProfileSflowProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteTelemetryProfileSflowProfileRefRequest
	if _, err := service.DeleteTelemetryProfileSflowProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteTelemetryProfileSflowProfileRefRequest{
		DeleteTelemetryProfileSflowProfileRefRequest: request,
	}}, nil
}

type VirtualDNSRecord = models.VirtualDNSRecord

func (s *BaseService) CreateVirtualDNSRecord(ctx context.Context, request *CreateVirtualDNSRecordRequest) (*CreateVirtualDNSRecordResponse, error) {
	if s.next == nil {
		return &CreateVirtualDNSRecordResponse{
			VirtualDNSRecord: request.GetVirtualDNSRecord(),
		}, nil
	}
	return s.Next().CreateVirtualDNSRecord(ctx, request)
}
func (s *BaseService) UpdateVirtualDNSRecord(ctx context.Context, request *UpdateVirtualDNSRecordRequest) (*UpdateVirtualDNSRecordResponse, error) {
	if s.next == nil {
		return &UpdateVirtualDNSRecordResponse{
			VirtualDNSRecord: request.GetVirtualDNSRecord(),
		}, nil
	}
	return s.Next().UpdateVirtualDNSRecord(ctx, request)
}
func (s *BaseService) DeleteVirtualDNSRecord(ctx context.Context, request *DeleteVirtualDNSRecordRequest) (*DeleteVirtualDNSRecordResponse, error) {
	if s.next == nil {
		return &DeleteVirtualDNSRecordResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteVirtualDNSRecord(ctx, request)
}
func (s *BaseService) GetVirtualDNSRecord(ctx context.Context, request *GetVirtualDNSRecordRequest) (*GetVirtualDNSRecordResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetVirtualDNSRecord(ctx, request)
}
func (s *BaseService) ListVirtualDNSRecord(ctx context.Context, request *ListVirtualDNSRecordRequest) (*ListVirtualDNSRecordResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListVirtualDNSRecord(ctx, request)
}

func (s *BaseService) CreateVirtualDNSRecordTagRef(ctx context.Context, request *CreateVirtualDNSRecordTagRefRequest) (*CreateVirtualDNSRecordTagRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualDNSRecordTagRefResponse{
			ID:                     request.ID,
			VirtualDNSRecordTagRef: request.GetVirtualDNSRecordTagRef(),
		}, nil
	}
	return s.Next().CreateVirtualDNSRecordTagRef(ctx, request)
}

func (s *BaseService) DeleteVirtualDNSRecordTagRef(ctx context.Context, request *DeleteVirtualDNSRecordTagRefRequest) (*DeleteVirtualDNSRecordTagRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualDNSRecordTagRefResponse{
			ID:                     request.ID,
			VirtualDNSRecordTagRef: request.GetVirtualDNSRecordTagRef(),
		}, nil
	}
	return s.Next().DeleteVirtualDNSRecordTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualDNSRecordTagRef(ctx context.Context, request *CreateVirtualDNSRecordTagRefRequest) (*CreateVirtualDNSRecordTagRefResponse, error) {
	refField := models.VirtualDNSRecordFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualDNSRecord(ctx, &GetVirtualDNSRecordRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualDNSRecord
		obj.AddTagRef(request.VirtualDNSRecordTagRef)

		_, err = s.BaseService.UpdateVirtualDNSRecord(ctx, &UpdateVirtualDNSRecordRequest{
			VirtualDNSRecord: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualDNSRecordTagRefResponse{
		ID:                     request.ID,
		VirtualDNSRecordTagRef: request.GetVirtualDNSRecordTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualDNSRecordTagRef(ctx context.Context, request *DeleteVirtualDNSRecordTagRefRequest) (*DeleteVirtualDNSRecordTagRefResponse, error) {
	refField := models.VirtualDNSRecordFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualDNSRecord(ctx, &GetVirtualDNSRecordRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualDNSRecord
		obj.RemoveTagRef(request.VirtualDNSRecordTagRef)

		_, err = s.BaseService.UpdateVirtualDNSRecord(ctx, &UpdateVirtualDNSRecordRequest{
			VirtualDNSRecord: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualDNSRecordTagRefResponse{
		ID:                     request.ID,
		VirtualDNSRecordTagRef: request.GetVirtualDNSRecordTagRef(),
	}, nil
}

func (s *EventProducerService) CreateVirtualDNSRecord(ctx context.Context, request *CreateVirtualDNSRecordRequest) (*CreateVirtualDNSRecordResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateVirtualDNSRecordRequest{
				CreateVirtualDNSRecordRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualDNSRecord(ctx, request)
}
func (s *EventProducerService) UpdateVirtualDNSRecord(ctx context.Context, request *UpdateVirtualDNSRecordRequest) (*UpdateVirtualDNSRecordResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateVirtualDNSRecordRequest{
				UpdateVirtualDNSRecordRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateVirtualDNSRecord(ctx, request)
}
func (s *EventProducerService) DeleteVirtualDNSRecord(ctx context.Context, request *DeleteVirtualDNSRecordRequest) (*DeleteVirtualDNSRecordResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteVirtualDNSRecordRequest{
				DeleteVirtualDNSRecordRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualDNSRecord(ctx, request)
}

func (s *EventProducerService) CreateVirtualDNSRecordTagRef(ctx context.Context, request *CreateVirtualDNSRecordTagRefRequest) (*CreateVirtualDNSRecordTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualDNSRecordTagRefRequest{
			CreateVirtualDNSRecordTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualDNSRecordTagRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualDNSRecordTagRef(ctx context.Context, request *DeleteVirtualDNSRecordTagRefRequest) (*DeleteVirtualDNSRecordTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualDNSRecordTagRefRequest{
			DeleteVirtualDNSRecordTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualDNSRecordTagRef(ctx, request)
}

func (e *Event_CreateVirtualDNSRecordRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualDNSRecordRequest
	model := request.VirtualDNSRecord
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetVirtualDNSRecord(ctx,
			&GetVirtualDNSRecordRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateVirtualDNSRecord(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateVirtualDNSRecordRequest{
			CreateVirtualDNSRecordRequest: &CreateVirtualDNSRecordRequest{
				VirtualDNSRecord: response.GetVirtualDNSRecord(),
			},
		},
	}, nil
}

func (e *Event_CreateVirtualDNSRecordRequest) ToUpdateEvent() *Event {
	request := e.CreateVirtualDNSRecordRequest
	model := request.VirtualDNSRecord
	return &Event{
		Request: &Event_UpdateVirtualDNSRecordRequest{
			UpdateVirtualDNSRecordRequest: &UpdateVirtualDNSRecordRequest{
				VirtualDNSRecord: model,
				FieldMask:        request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateVirtualDNSRecordRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateVirtualDNSRecordRequest
	response, err := service.UpdateVirtualDNSRecord(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateVirtualDNSRecordRequest{
			UpdateVirtualDNSRecordRequest: &UpdateVirtualDNSRecordRequest{
				VirtualDNSRecord: response.GetVirtualDNSRecord(),
			},
		},
	}, nil
}

func (e *Event_UpdateVirtualDNSRecordRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteVirtualDNSRecordRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualDNSRecordRequest
	_, err := service.DeleteVirtualDNSRecord(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteVirtualDNSRecordRequest{
			DeleteVirtualDNSRecordRequest: &DeleteVirtualDNSRecordRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateVirtualDNSRecordTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualDNSRecordTagRefRequest
	if _, err := service.CreateVirtualDNSRecordTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualDNSRecordTagRefRequest{
		CreateVirtualDNSRecordTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualDNSRecordTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualDNSRecordTagRefRequest
	if _, err := service.DeleteVirtualDNSRecordTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualDNSRecordTagRefRequest{
		DeleteVirtualDNSRecordTagRefRequest: request,
	}}, nil
}

type VirtualDNS = models.VirtualDNS

func (s *BaseService) CreateVirtualDNS(ctx context.Context, request *CreateVirtualDNSRequest) (*CreateVirtualDNSResponse, error) {
	if s.next == nil {
		return &CreateVirtualDNSResponse{
			VirtualDNS: request.GetVirtualDNS(),
		}, nil
	}
	return s.Next().CreateVirtualDNS(ctx, request)
}
func (s *BaseService) UpdateVirtualDNS(ctx context.Context, request *UpdateVirtualDNSRequest) (*UpdateVirtualDNSResponse, error) {
	if s.next == nil {
		return &UpdateVirtualDNSResponse{
			VirtualDNS: request.GetVirtualDNS(),
		}, nil
	}
	return s.Next().UpdateVirtualDNS(ctx, request)
}
func (s *BaseService) DeleteVirtualDNS(ctx context.Context, request *DeleteVirtualDNSRequest) (*DeleteVirtualDNSResponse, error) {
	if s.next == nil {
		return &DeleteVirtualDNSResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteVirtualDNS(ctx, request)
}
func (s *BaseService) GetVirtualDNS(ctx context.Context, request *GetVirtualDNSRequest) (*GetVirtualDNSResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetVirtualDNS(ctx, request)
}
func (s *BaseService) ListVirtualDNS(ctx context.Context, request *ListVirtualDNSRequest) (*ListVirtualDNSResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListVirtualDNS(ctx, request)
}

func (s *BaseService) CreateVirtualDNSTagRef(ctx context.Context, request *CreateVirtualDNSTagRefRequest) (*CreateVirtualDNSTagRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualDNSTagRefResponse{
			ID:               request.ID,
			VirtualDNSTagRef: request.GetVirtualDNSTagRef(),
		}, nil
	}
	return s.Next().CreateVirtualDNSTagRef(ctx, request)
}

func (s *BaseService) DeleteVirtualDNSTagRef(ctx context.Context, request *DeleteVirtualDNSTagRefRequest) (*DeleteVirtualDNSTagRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualDNSTagRefResponse{
			ID:               request.ID,
			VirtualDNSTagRef: request.GetVirtualDNSTagRef(),
		}, nil
	}
	return s.Next().DeleteVirtualDNSTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualDNSTagRef(ctx context.Context, request *CreateVirtualDNSTagRefRequest) (*CreateVirtualDNSTagRefResponse, error) {
	refField := models.VirtualDNSFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualDNS(ctx, &GetVirtualDNSRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualDNS
		obj.AddTagRef(request.VirtualDNSTagRef)

		_, err = s.BaseService.UpdateVirtualDNS(ctx, &UpdateVirtualDNSRequest{
			VirtualDNS: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualDNSTagRefResponse{
		ID:               request.ID,
		VirtualDNSTagRef: request.GetVirtualDNSTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualDNSTagRef(ctx context.Context, request *DeleteVirtualDNSTagRefRequest) (*DeleteVirtualDNSTagRefResponse, error) {
	refField := models.VirtualDNSFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualDNS(ctx, &GetVirtualDNSRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualDNS
		obj.RemoveTagRef(request.VirtualDNSTagRef)

		_, err = s.BaseService.UpdateVirtualDNS(ctx, &UpdateVirtualDNSRequest{
			VirtualDNS: obj,
			FieldMask:  types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualDNSTagRefResponse{
		ID:               request.ID,
		VirtualDNSTagRef: request.GetVirtualDNSTagRef(),
	}, nil
}

func (s *EventProducerService) CreateVirtualDNS(ctx context.Context, request *CreateVirtualDNSRequest) (*CreateVirtualDNSResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateVirtualDNSRequest{
				CreateVirtualDNSRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualDNS(ctx, request)
}
func (s *EventProducerService) UpdateVirtualDNS(ctx context.Context, request *UpdateVirtualDNSRequest) (*UpdateVirtualDNSResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateVirtualDNSRequest{
				UpdateVirtualDNSRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateVirtualDNS(ctx, request)
}
func (s *EventProducerService) DeleteVirtualDNS(ctx context.Context, request *DeleteVirtualDNSRequest) (*DeleteVirtualDNSResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteVirtualDNSRequest{
				DeleteVirtualDNSRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualDNS(ctx, request)
}

func (s *EventProducerService) CreateVirtualDNSTagRef(ctx context.Context, request *CreateVirtualDNSTagRefRequest) (*CreateVirtualDNSTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualDNSTagRefRequest{
			CreateVirtualDNSTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualDNSTagRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualDNSTagRef(ctx context.Context, request *DeleteVirtualDNSTagRefRequest) (*DeleteVirtualDNSTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualDNSTagRefRequest{
			DeleteVirtualDNSTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualDNSTagRef(ctx, request)
}

func (e *Event_CreateVirtualDNSRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualDNSRequest
	model := request.VirtualDNS
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetVirtualDNS(ctx,
			&GetVirtualDNSRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateVirtualDNS(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateVirtualDNSRequest{
			CreateVirtualDNSRequest: &CreateVirtualDNSRequest{
				VirtualDNS: response.GetVirtualDNS(),
			},
		},
	}, nil
}

func (e *Event_CreateVirtualDNSRequest) ToUpdateEvent() *Event {
	request := e.CreateVirtualDNSRequest
	model := request.VirtualDNS
	return &Event{
		Request: &Event_UpdateVirtualDNSRequest{
			UpdateVirtualDNSRequest: &UpdateVirtualDNSRequest{
				VirtualDNS: model,
				FieldMask:  request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateVirtualDNSRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateVirtualDNSRequest
	response, err := service.UpdateVirtualDNS(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateVirtualDNSRequest{
			UpdateVirtualDNSRequest: &UpdateVirtualDNSRequest{
				VirtualDNS: response.GetVirtualDNS(),
			},
		},
	}, nil
}

func (e *Event_UpdateVirtualDNSRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteVirtualDNSRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualDNSRequest
	_, err := service.DeleteVirtualDNS(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteVirtualDNSRequest{
			DeleteVirtualDNSRequest: &DeleteVirtualDNSRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateVirtualDNSTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualDNSTagRefRequest
	if _, err := service.CreateVirtualDNSTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualDNSTagRefRequest{
		CreateVirtualDNSTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualDNSTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualDNSTagRefRequest
	if _, err := service.DeleteVirtualDNSTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualDNSTagRefRequest{
		DeleteVirtualDNSTagRefRequest: request,
	}}, nil
}

type VirtualIP = models.VirtualIP

func (s *BaseService) CreateVirtualIP(ctx context.Context, request *CreateVirtualIPRequest) (*CreateVirtualIPResponse, error) {
	if s.next == nil {
		return &CreateVirtualIPResponse{
			VirtualIP: request.GetVirtualIP(),
		}, nil
	}
	return s.Next().CreateVirtualIP(ctx, request)
}
func (s *BaseService) UpdateVirtualIP(ctx context.Context, request *UpdateVirtualIPRequest) (*UpdateVirtualIPResponse, error) {
	if s.next == nil {
		return &UpdateVirtualIPResponse{
			VirtualIP: request.GetVirtualIP(),
		}, nil
	}
	return s.Next().UpdateVirtualIP(ctx, request)
}
func (s *BaseService) DeleteVirtualIP(ctx context.Context, request *DeleteVirtualIPRequest) (*DeleteVirtualIPResponse, error) {
	if s.next == nil {
		return &DeleteVirtualIPResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteVirtualIP(ctx, request)
}
func (s *BaseService) GetVirtualIP(ctx context.Context, request *GetVirtualIPRequest) (*GetVirtualIPResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetVirtualIP(ctx, request)
}
func (s *BaseService) ListVirtualIP(ctx context.Context, request *ListVirtualIPRequest) (*ListVirtualIPResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListVirtualIP(ctx, request)
}

func (s *BaseService) CreateVirtualIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateVirtualIPVirtualMachineInterfaceRefRequest) (*CreateVirtualIPVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualIPVirtualMachineInterfaceRefResponse{
			ID:                                  request.ID,
			VirtualIPVirtualMachineInterfaceRef: request.GetVirtualIPVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().CreateVirtualIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteVirtualIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteVirtualIPVirtualMachineInterfaceRefRequest) (*DeleteVirtualIPVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualIPVirtualMachineInterfaceRefResponse{
			ID:                                  request.ID,
			VirtualIPVirtualMachineInterfaceRef: request.GetVirtualIPVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteVirtualIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateVirtualIPVirtualMachineInterfaceRefRequest) (*CreateVirtualIPVirtualMachineInterfaceRefResponse, error) {
	refField := models.VirtualIPFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualIP(ctx, &GetVirtualIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualIP
		obj.AddVirtualMachineInterfaceRef(request.VirtualIPVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateVirtualIP(ctx, &UpdateVirtualIPRequest{
			VirtualIP: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualIPVirtualMachineInterfaceRefResponse{
		ID:                                  request.ID,
		VirtualIPVirtualMachineInterfaceRef: request.GetVirtualIPVirtualMachineInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteVirtualIPVirtualMachineInterfaceRefRequest) (*DeleteVirtualIPVirtualMachineInterfaceRefResponse, error) {
	refField := models.VirtualIPFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualIP(ctx, &GetVirtualIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualIP
		obj.RemoveVirtualMachineInterfaceRef(request.VirtualIPVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateVirtualIP(ctx, &UpdateVirtualIPRequest{
			VirtualIP: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualIPVirtualMachineInterfaceRefResponse{
		ID:                                  request.ID,
		VirtualIPVirtualMachineInterfaceRef: request.GetVirtualIPVirtualMachineInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateVirtualIPTagRef(ctx context.Context, request *CreateVirtualIPTagRefRequest) (*CreateVirtualIPTagRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualIPTagRefResponse{
			ID:              request.ID,
			VirtualIPTagRef: request.GetVirtualIPTagRef(),
		}, nil
	}
	return s.Next().CreateVirtualIPTagRef(ctx, request)
}

func (s *BaseService) DeleteVirtualIPTagRef(ctx context.Context, request *DeleteVirtualIPTagRefRequest) (*DeleteVirtualIPTagRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualIPTagRefResponse{
			ID:              request.ID,
			VirtualIPTagRef: request.GetVirtualIPTagRef(),
		}, nil
	}
	return s.Next().DeleteVirtualIPTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualIPTagRef(ctx context.Context, request *CreateVirtualIPTagRefRequest) (*CreateVirtualIPTagRefResponse, error) {
	refField := models.VirtualIPFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualIP(ctx, &GetVirtualIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualIP
		obj.AddTagRef(request.VirtualIPTagRef)

		_, err = s.BaseService.UpdateVirtualIP(ctx, &UpdateVirtualIPRequest{
			VirtualIP: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualIPTagRefResponse{
		ID:              request.ID,
		VirtualIPTagRef: request.GetVirtualIPTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualIPTagRef(ctx context.Context, request *DeleteVirtualIPTagRefRequest) (*DeleteVirtualIPTagRefResponse, error) {
	refField := models.VirtualIPFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualIP(ctx, &GetVirtualIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualIP
		obj.RemoveTagRef(request.VirtualIPTagRef)

		_, err = s.BaseService.UpdateVirtualIP(ctx, &UpdateVirtualIPRequest{
			VirtualIP: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualIPTagRefResponse{
		ID:              request.ID,
		VirtualIPTagRef: request.GetVirtualIPTagRef(),
	}, nil
}

func (s *BaseService) CreateVirtualIPLoadbalancerPoolRef(ctx context.Context, request *CreateVirtualIPLoadbalancerPoolRefRequest) (*CreateVirtualIPLoadbalancerPoolRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualIPLoadbalancerPoolRefResponse{
			ID:                           request.ID,
			VirtualIPLoadbalancerPoolRef: request.GetVirtualIPLoadbalancerPoolRef(),
		}, nil
	}
	return s.Next().CreateVirtualIPLoadbalancerPoolRef(ctx, request)
}

func (s *BaseService) DeleteVirtualIPLoadbalancerPoolRef(ctx context.Context, request *DeleteVirtualIPLoadbalancerPoolRefRequest) (*DeleteVirtualIPLoadbalancerPoolRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualIPLoadbalancerPoolRefResponse{
			ID:                           request.ID,
			VirtualIPLoadbalancerPoolRef: request.GetVirtualIPLoadbalancerPoolRef(),
		}, nil
	}
	return s.Next().DeleteVirtualIPLoadbalancerPoolRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualIPLoadbalancerPoolRef(ctx context.Context, request *CreateVirtualIPLoadbalancerPoolRefRequest) (*CreateVirtualIPLoadbalancerPoolRefResponse, error) {
	refField := models.VirtualIPFieldLoadbalancerPoolRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualIP(ctx, &GetVirtualIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualIP
		obj.AddLoadbalancerPoolRef(request.VirtualIPLoadbalancerPoolRef)

		_, err = s.BaseService.UpdateVirtualIP(ctx, &UpdateVirtualIPRequest{
			VirtualIP: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualIPLoadbalancerPoolRefResponse{
		ID:                           request.ID,
		VirtualIPLoadbalancerPoolRef: request.GetVirtualIPLoadbalancerPoolRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualIPLoadbalancerPoolRef(ctx context.Context, request *DeleteVirtualIPLoadbalancerPoolRefRequest) (*DeleteVirtualIPLoadbalancerPoolRefResponse, error) {
	refField := models.VirtualIPFieldLoadbalancerPoolRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualIP(ctx, &GetVirtualIPRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualIP
		obj.RemoveLoadbalancerPoolRef(request.VirtualIPLoadbalancerPoolRef)

		_, err = s.BaseService.UpdateVirtualIP(ctx, &UpdateVirtualIPRequest{
			VirtualIP: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualIPLoadbalancerPoolRefResponse{
		ID:                           request.ID,
		VirtualIPLoadbalancerPoolRef: request.GetVirtualIPLoadbalancerPoolRef(),
	}, nil
}

func (s *EventProducerService) CreateVirtualIP(ctx context.Context, request *CreateVirtualIPRequest) (*CreateVirtualIPResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateVirtualIPRequest{
				CreateVirtualIPRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualIP(ctx, request)
}
func (s *EventProducerService) UpdateVirtualIP(ctx context.Context, request *UpdateVirtualIPRequest) (*UpdateVirtualIPResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateVirtualIPRequest{
				UpdateVirtualIPRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateVirtualIP(ctx, request)
}
func (s *EventProducerService) DeleteVirtualIP(ctx context.Context, request *DeleteVirtualIPRequest) (*DeleteVirtualIPResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteVirtualIPRequest{
				DeleteVirtualIPRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualIP(ctx, request)
}

func (s *EventProducerService) CreateVirtualIPVirtualMachineInterfaceRef(ctx context.Context, request *CreateVirtualIPVirtualMachineInterfaceRefRequest) (*CreateVirtualIPVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualIPVirtualMachineInterfaceRefRequest{
			CreateVirtualIPVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualIPVirtualMachineInterfaceRef(ctx context.Context, request *DeleteVirtualIPVirtualMachineInterfaceRefRequest) (*DeleteVirtualIPVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualIPVirtualMachineInterfaceRefRequest{
			DeleteVirtualIPVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualIPVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualIPTagRef(ctx context.Context, request *CreateVirtualIPTagRefRequest) (*CreateVirtualIPTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualIPTagRefRequest{
			CreateVirtualIPTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualIPTagRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualIPTagRef(ctx context.Context, request *DeleteVirtualIPTagRefRequest) (*DeleteVirtualIPTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualIPTagRefRequest{
			DeleteVirtualIPTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualIPTagRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualIPLoadbalancerPoolRef(ctx context.Context, request *CreateVirtualIPLoadbalancerPoolRefRequest) (*CreateVirtualIPLoadbalancerPoolRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualIPLoadbalancerPoolRefRequest{
			CreateVirtualIPLoadbalancerPoolRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualIPLoadbalancerPoolRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualIPLoadbalancerPoolRef(ctx context.Context, request *DeleteVirtualIPLoadbalancerPoolRefRequest) (*DeleteVirtualIPLoadbalancerPoolRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualIPLoadbalancerPoolRefRequest{
			DeleteVirtualIPLoadbalancerPoolRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualIPLoadbalancerPoolRef(ctx, request)
}

func (e *Event_CreateVirtualIPRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualIPRequest
	model := request.VirtualIP
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetVirtualIP(ctx,
			&GetVirtualIPRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateVirtualIP(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateVirtualIPRequest{
			CreateVirtualIPRequest: &CreateVirtualIPRequest{
				VirtualIP: response.GetVirtualIP(),
			},
		},
	}, nil
}

func (e *Event_CreateVirtualIPRequest) ToUpdateEvent() *Event {
	request := e.CreateVirtualIPRequest
	model := request.VirtualIP
	return &Event{
		Request: &Event_UpdateVirtualIPRequest{
			UpdateVirtualIPRequest: &UpdateVirtualIPRequest{
				VirtualIP: model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateVirtualIPRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateVirtualIPRequest
	response, err := service.UpdateVirtualIP(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateVirtualIPRequest{
			UpdateVirtualIPRequest: &UpdateVirtualIPRequest{
				VirtualIP: response.GetVirtualIP(),
			},
		},
	}, nil
}

func (e *Event_UpdateVirtualIPRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteVirtualIPRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualIPRequest
	_, err := service.DeleteVirtualIP(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteVirtualIPRequest{
			DeleteVirtualIPRequest: &DeleteVirtualIPRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateVirtualIPVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualIPVirtualMachineInterfaceRefRequest
	if _, err := service.CreateVirtualIPVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualIPVirtualMachineInterfaceRefRequest{
		CreateVirtualIPVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualIPVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualIPVirtualMachineInterfaceRefRequest
	if _, err := service.DeleteVirtualIPVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualIPVirtualMachineInterfaceRefRequest{
		DeleteVirtualIPVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualIPTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualIPTagRefRequest
	if _, err := service.CreateVirtualIPTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualIPTagRefRequest{
		CreateVirtualIPTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualIPTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualIPTagRefRequest
	if _, err := service.DeleteVirtualIPTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualIPTagRefRequest{
		DeleteVirtualIPTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualIPLoadbalancerPoolRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualIPLoadbalancerPoolRefRequest
	if _, err := service.CreateVirtualIPLoadbalancerPoolRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualIPLoadbalancerPoolRefRequest{
		CreateVirtualIPLoadbalancerPoolRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualIPLoadbalancerPoolRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualIPLoadbalancerPoolRefRequest
	if _, err := service.DeleteVirtualIPLoadbalancerPoolRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualIPLoadbalancerPoolRefRequest{
		DeleteVirtualIPLoadbalancerPoolRefRequest: request,
	}}, nil
}

type VirtualMachineInterface = models.VirtualMachineInterface

func (s *BaseService) CreateVirtualMachineInterface(ctx context.Context, request *CreateVirtualMachineInterfaceRequest) (*CreateVirtualMachineInterfaceResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfaceResponse{
			VirtualMachineInterface: request.GetVirtualMachineInterface(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterface(ctx, request)
}
func (s *BaseService) UpdateVirtualMachineInterface(ctx context.Context, request *UpdateVirtualMachineInterfaceRequest) (*UpdateVirtualMachineInterfaceResponse, error) {
	if s.next == nil {
		return &UpdateVirtualMachineInterfaceResponse{
			VirtualMachineInterface: request.GetVirtualMachineInterface(),
		}, nil
	}
	return s.Next().UpdateVirtualMachineInterface(ctx, request)
}
func (s *BaseService) DeleteVirtualMachineInterface(ctx context.Context, request *DeleteVirtualMachineInterfaceRequest) (*DeleteVirtualMachineInterfaceResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfaceResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterface(ctx, request)
}
func (s *BaseService) GetVirtualMachineInterface(ctx context.Context, request *GetVirtualMachineInterfaceRequest) (*GetVirtualMachineInterfaceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetVirtualMachineInterface(ctx, request)
}
func (s *BaseService) ListVirtualMachineInterface(ctx context.Context, request *ListVirtualMachineInterfaceRequest) (*ListVirtualMachineInterfaceResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListVirtualMachineInterface(ctx, request)
}

func (s *BaseService) CreateVirtualMachineInterfaceVirtualMachineRef(ctx context.Context, request *CreateVirtualMachineInterfaceVirtualMachineRefRequest) (*CreateVirtualMachineInterfaceVirtualMachineRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfaceVirtualMachineRefResponse{
			ID:                                       request.ID,
			VirtualMachineInterfaceVirtualMachineRef: request.GetVirtualMachineInterfaceVirtualMachineRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfaceVirtualMachineRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfaceVirtualMachineRef(ctx context.Context, request *DeleteVirtualMachineInterfaceVirtualMachineRefRequest) (*DeleteVirtualMachineInterfaceVirtualMachineRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfaceVirtualMachineRefResponse{
			ID:                                       request.ID,
			VirtualMachineInterfaceVirtualMachineRef: request.GetVirtualMachineInterfaceVirtualMachineRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfaceVirtualMachineRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfaceVirtualMachineRef(ctx context.Context, request *CreateVirtualMachineInterfaceVirtualMachineRefRequest) (*CreateVirtualMachineInterfaceVirtualMachineRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldVirtualMachineRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddVirtualMachineRef(request.VirtualMachineInterfaceVirtualMachineRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfaceVirtualMachineRefResponse{
		ID:                                       request.ID,
		VirtualMachineInterfaceVirtualMachineRef: request.GetVirtualMachineInterfaceVirtualMachineRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfaceVirtualMachineRef(ctx context.Context, request *DeleteVirtualMachineInterfaceVirtualMachineRefRequest) (*DeleteVirtualMachineInterfaceVirtualMachineRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldVirtualMachineRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemoveVirtualMachineRef(request.VirtualMachineInterfaceVirtualMachineRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfaceVirtualMachineRefResponse{
		ID:                                       request.ID,
		VirtualMachineInterfaceVirtualMachineRef: request.GetVirtualMachineInterfaceVirtualMachineRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *CreateVirtualMachineInterfaceVirtualMachineInterfaceRefRequest) (*CreateVirtualMachineInterfaceVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfaceVirtualMachineInterfaceRefResponse{
			ID: request.ID,
			VirtualMachineInterfaceVirtualMachineInterfaceRef: request.GetVirtualMachineInterfaceVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfaceVirtualMachineInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefRequest) (*DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefResponse{
			ID: request.ID,
			VirtualMachineInterfaceVirtualMachineInterfaceRef: request.GetVirtualMachineInterfaceVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfaceVirtualMachineInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *CreateVirtualMachineInterfaceVirtualMachineInterfaceRefRequest) (*CreateVirtualMachineInterfaceVirtualMachineInterfaceRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddVirtualMachineInterfaceRef(request.VirtualMachineInterfaceVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfaceVirtualMachineInterfaceRefResponse{
		ID: request.ID,
		VirtualMachineInterfaceVirtualMachineInterfaceRef: request.GetVirtualMachineInterfaceVirtualMachineInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefRequest) (*DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemoveVirtualMachineInterfaceRef(request.VirtualMachineInterfaceVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefResponse{
		ID: request.ID,
		VirtualMachineInterfaceVirtualMachineInterfaceRef: request.GetVirtualMachineInterfaceVirtualMachineInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfacePortProfileRef(ctx context.Context, request *CreateVirtualMachineInterfacePortProfileRefRequest) (*CreateVirtualMachineInterfacePortProfileRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfacePortProfileRefResponse{
			ID:                                    request.ID,
			VirtualMachineInterfacePortProfileRef: request.GetVirtualMachineInterfacePortProfileRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfacePortProfileRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfacePortProfileRef(ctx context.Context, request *DeleteVirtualMachineInterfacePortProfileRefRequest) (*DeleteVirtualMachineInterfacePortProfileRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfacePortProfileRefResponse{
			ID:                                    request.ID,
			VirtualMachineInterfacePortProfileRef: request.GetVirtualMachineInterfacePortProfileRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfacePortProfileRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfacePortProfileRef(ctx context.Context, request *CreateVirtualMachineInterfacePortProfileRefRequest) (*CreateVirtualMachineInterfacePortProfileRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldPortProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddPortProfileRef(request.VirtualMachineInterfacePortProfileRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfacePortProfileRefResponse{
		ID:                                    request.ID,
		VirtualMachineInterfacePortProfileRef: request.GetVirtualMachineInterfacePortProfileRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfacePortProfileRef(ctx context.Context, request *DeleteVirtualMachineInterfacePortProfileRefRequest) (*DeleteVirtualMachineInterfacePortProfileRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldPortProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemovePortProfileRef(request.VirtualMachineInterfacePortProfileRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfacePortProfileRefResponse{
		ID:                                    request.ID,
		VirtualMachineInterfacePortProfileRef: request.GetVirtualMachineInterfacePortProfileRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfaceVirtualNetworkRef(ctx context.Context, request *CreateVirtualMachineInterfaceVirtualNetworkRefRequest) (*CreateVirtualMachineInterfaceVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfaceVirtualNetworkRefResponse{
			ID:                                       request.ID,
			VirtualMachineInterfaceVirtualNetworkRef: request.GetVirtualMachineInterfaceVirtualNetworkRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfaceVirtualNetworkRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfaceVirtualNetworkRef(ctx context.Context, request *DeleteVirtualMachineInterfaceVirtualNetworkRefRequest) (*DeleteVirtualMachineInterfaceVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfaceVirtualNetworkRefResponse{
			ID:                                       request.ID,
			VirtualMachineInterfaceVirtualNetworkRef: request.GetVirtualMachineInterfaceVirtualNetworkRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfaceVirtualNetworkRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfaceVirtualNetworkRef(ctx context.Context, request *CreateVirtualMachineInterfaceVirtualNetworkRefRequest) (*CreateVirtualMachineInterfaceVirtualNetworkRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddVirtualNetworkRef(request.VirtualMachineInterfaceVirtualNetworkRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfaceVirtualNetworkRefResponse{
		ID:                                       request.ID,
		VirtualMachineInterfaceVirtualNetworkRef: request.GetVirtualMachineInterfaceVirtualNetworkRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfaceVirtualNetworkRef(ctx context.Context, request *DeleteVirtualMachineInterfaceVirtualNetworkRefRequest) (*DeleteVirtualMachineInterfaceVirtualNetworkRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemoveVirtualNetworkRef(request.VirtualMachineInterfaceVirtualNetworkRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfaceVirtualNetworkRefResponse{
		ID:                                       request.ID,
		VirtualMachineInterfaceVirtualNetworkRef: request.GetVirtualMachineInterfaceVirtualNetworkRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfacePhysicalInterfaceRef(ctx context.Context, request *CreateVirtualMachineInterfacePhysicalInterfaceRefRequest) (*CreateVirtualMachineInterfacePhysicalInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfacePhysicalInterfaceRefResponse{
			ID: request.ID,
			VirtualMachineInterfacePhysicalInterfaceRef: request.GetVirtualMachineInterfacePhysicalInterfaceRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfacePhysicalInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfacePhysicalInterfaceRef(ctx context.Context, request *DeleteVirtualMachineInterfacePhysicalInterfaceRefRequest) (*DeleteVirtualMachineInterfacePhysicalInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfacePhysicalInterfaceRefResponse{
			ID: request.ID,
			VirtualMachineInterfacePhysicalInterfaceRef: request.GetVirtualMachineInterfacePhysicalInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfacePhysicalInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfacePhysicalInterfaceRef(ctx context.Context, request *CreateVirtualMachineInterfacePhysicalInterfaceRefRequest) (*CreateVirtualMachineInterfacePhysicalInterfaceRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldPhysicalInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddPhysicalInterfaceRef(request.VirtualMachineInterfacePhysicalInterfaceRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfacePhysicalInterfaceRefResponse{
		ID: request.ID,
		VirtualMachineInterfacePhysicalInterfaceRef: request.GetVirtualMachineInterfacePhysicalInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfacePhysicalInterfaceRef(ctx context.Context, request *DeleteVirtualMachineInterfacePhysicalInterfaceRefRequest) (*DeleteVirtualMachineInterfacePhysicalInterfaceRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldPhysicalInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemovePhysicalInterfaceRef(request.VirtualMachineInterfacePhysicalInterfaceRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfacePhysicalInterfaceRefResponse{
		ID: request.ID,
		VirtualMachineInterfacePhysicalInterfaceRef: request.GetVirtualMachineInterfacePhysicalInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfaceServiceHealthCheckRef(ctx context.Context, request *CreateVirtualMachineInterfaceServiceHealthCheckRefRequest) (*CreateVirtualMachineInterfaceServiceHealthCheckRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfaceServiceHealthCheckRefResponse{
			ID: request.ID,
			VirtualMachineInterfaceServiceHealthCheckRef: request.GetVirtualMachineInterfaceServiceHealthCheckRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfaceServiceHealthCheckRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfaceServiceHealthCheckRef(ctx context.Context, request *DeleteVirtualMachineInterfaceServiceHealthCheckRefRequest) (*DeleteVirtualMachineInterfaceServiceHealthCheckRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfaceServiceHealthCheckRefResponse{
			ID: request.ID,
			VirtualMachineInterfaceServiceHealthCheckRef: request.GetVirtualMachineInterfaceServiceHealthCheckRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfaceServiceHealthCheckRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfaceServiceHealthCheckRef(ctx context.Context, request *CreateVirtualMachineInterfaceServiceHealthCheckRefRequest) (*CreateVirtualMachineInterfaceServiceHealthCheckRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldServiceHealthCheckRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddServiceHealthCheckRef(request.VirtualMachineInterfaceServiceHealthCheckRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfaceServiceHealthCheckRefResponse{
		ID: request.ID,
		VirtualMachineInterfaceServiceHealthCheckRef: request.GetVirtualMachineInterfaceServiceHealthCheckRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfaceServiceHealthCheckRef(ctx context.Context, request *DeleteVirtualMachineInterfaceServiceHealthCheckRefRequest) (*DeleteVirtualMachineInterfaceServiceHealthCheckRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldServiceHealthCheckRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemoveServiceHealthCheckRef(request.VirtualMachineInterfaceServiceHealthCheckRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfaceServiceHealthCheckRefResponse{
		ID: request.ID,
		VirtualMachineInterfaceServiceHealthCheckRef: request.GetVirtualMachineInterfaceServiceHealthCheckRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfaceQosConfigRef(ctx context.Context, request *CreateVirtualMachineInterfaceQosConfigRefRequest) (*CreateVirtualMachineInterfaceQosConfigRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfaceQosConfigRefResponse{
			ID:                                  request.ID,
			VirtualMachineInterfaceQosConfigRef: request.GetVirtualMachineInterfaceQosConfigRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfaceQosConfigRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfaceQosConfigRef(ctx context.Context, request *DeleteVirtualMachineInterfaceQosConfigRefRequest) (*DeleteVirtualMachineInterfaceQosConfigRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfaceQosConfigRefResponse{
			ID:                                  request.ID,
			VirtualMachineInterfaceQosConfigRef: request.GetVirtualMachineInterfaceQosConfigRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfaceQosConfigRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfaceQosConfigRef(ctx context.Context, request *CreateVirtualMachineInterfaceQosConfigRefRequest) (*CreateVirtualMachineInterfaceQosConfigRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldQosConfigRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddQosConfigRef(request.VirtualMachineInterfaceQosConfigRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfaceQosConfigRefResponse{
		ID:                                  request.ID,
		VirtualMachineInterfaceQosConfigRef: request.GetVirtualMachineInterfaceQosConfigRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfaceQosConfigRef(ctx context.Context, request *DeleteVirtualMachineInterfaceQosConfigRefRequest) (*DeleteVirtualMachineInterfaceQosConfigRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldQosConfigRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemoveQosConfigRef(request.VirtualMachineInterfaceQosConfigRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfaceQosConfigRefResponse{
		ID:                                  request.ID,
		VirtualMachineInterfaceQosConfigRef: request.GetVirtualMachineInterfaceQosConfigRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfaceTagRef(ctx context.Context, request *CreateVirtualMachineInterfaceTagRefRequest) (*CreateVirtualMachineInterfaceTagRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfaceTagRefResponse{
			ID:                            request.ID,
			VirtualMachineInterfaceTagRef: request.GetVirtualMachineInterfaceTagRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfaceTagRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfaceTagRef(ctx context.Context, request *DeleteVirtualMachineInterfaceTagRefRequest) (*DeleteVirtualMachineInterfaceTagRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfaceTagRefResponse{
			ID:                            request.ID,
			VirtualMachineInterfaceTagRef: request.GetVirtualMachineInterfaceTagRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfaceTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfaceTagRef(ctx context.Context, request *CreateVirtualMachineInterfaceTagRefRequest) (*CreateVirtualMachineInterfaceTagRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddTagRef(request.VirtualMachineInterfaceTagRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfaceTagRefResponse{
		ID:                            request.ID,
		VirtualMachineInterfaceTagRef: request.GetVirtualMachineInterfaceTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfaceTagRef(ctx context.Context, request *DeleteVirtualMachineInterfaceTagRefRequest) (*DeleteVirtualMachineInterfaceTagRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemoveTagRef(request.VirtualMachineInterfaceTagRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfaceTagRefResponse{
		ID:                            request.ID,
		VirtualMachineInterfaceTagRef: request.GetVirtualMachineInterfaceTagRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfaceBGPRouterRef(ctx context.Context, request *CreateVirtualMachineInterfaceBGPRouterRefRequest) (*CreateVirtualMachineInterfaceBGPRouterRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfaceBGPRouterRefResponse{
			ID:                                  request.ID,
			VirtualMachineInterfaceBGPRouterRef: request.GetVirtualMachineInterfaceBGPRouterRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfaceBGPRouterRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfaceBGPRouterRef(ctx context.Context, request *DeleteVirtualMachineInterfaceBGPRouterRefRequest) (*DeleteVirtualMachineInterfaceBGPRouterRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfaceBGPRouterRefResponse{
			ID:                                  request.ID,
			VirtualMachineInterfaceBGPRouterRef: request.GetVirtualMachineInterfaceBGPRouterRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfaceBGPRouterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfaceBGPRouterRef(ctx context.Context, request *CreateVirtualMachineInterfaceBGPRouterRefRequest) (*CreateVirtualMachineInterfaceBGPRouterRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldBGPRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddBGPRouterRef(request.VirtualMachineInterfaceBGPRouterRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfaceBGPRouterRefResponse{
		ID:                                  request.ID,
		VirtualMachineInterfaceBGPRouterRef: request.GetVirtualMachineInterfaceBGPRouterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfaceBGPRouterRef(ctx context.Context, request *DeleteVirtualMachineInterfaceBGPRouterRefRequest) (*DeleteVirtualMachineInterfaceBGPRouterRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldBGPRouterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemoveBGPRouterRef(request.VirtualMachineInterfaceBGPRouterRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfaceBGPRouterRefResponse{
		ID:                                  request.ID,
		VirtualMachineInterfaceBGPRouterRef: request.GetVirtualMachineInterfaceBGPRouterRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfaceRoutingInstanceRef(ctx context.Context, request *CreateVirtualMachineInterfaceRoutingInstanceRefRequest) (*CreateVirtualMachineInterfaceRoutingInstanceRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfaceRoutingInstanceRefResponse{
			ID: request.ID,
			VirtualMachineInterfaceRoutingInstanceRef: request.GetVirtualMachineInterfaceRoutingInstanceRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfaceRoutingInstanceRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfaceRoutingInstanceRef(ctx context.Context, request *DeleteVirtualMachineInterfaceRoutingInstanceRefRequest) (*DeleteVirtualMachineInterfaceRoutingInstanceRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfaceRoutingInstanceRefResponse{
			ID: request.ID,
			VirtualMachineInterfaceRoutingInstanceRef: request.GetVirtualMachineInterfaceRoutingInstanceRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfaceRoutingInstanceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfaceRoutingInstanceRef(ctx context.Context, request *CreateVirtualMachineInterfaceRoutingInstanceRefRequest) (*CreateVirtualMachineInterfaceRoutingInstanceRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldRoutingInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddRoutingInstanceRef(request.VirtualMachineInterfaceRoutingInstanceRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfaceRoutingInstanceRefResponse{
		ID: request.ID,
		VirtualMachineInterfaceRoutingInstanceRef: request.GetVirtualMachineInterfaceRoutingInstanceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfaceRoutingInstanceRef(ctx context.Context, request *DeleteVirtualMachineInterfaceRoutingInstanceRefRequest) (*DeleteVirtualMachineInterfaceRoutingInstanceRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldRoutingInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemoveRoutingInstanceRef(request.VirtualMachineInterfaceRoutingInstanceRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfaceRoutingInstanceRefResponse{
		ID: request.ID,
		VirtualMachineInterfaceRoutingInstanceRef: request.GetVirtualMachineInterfaceRoutingInstanceRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfaceBridgeDomainRef(ctx context.Context, request *CreateVirtualMachineInterfaceBridgeDomainRefRequest) (*CreateVirtualMachineInterfaceBridgeDomainRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfaceBridgeDomainRefResponse{
			ID:                                     request.ID,
			VirtualMachineInterfaceBridgeDomainRef: request.GetVirtualMachineInterfaceBridgeDomainRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfaceBridgeDomainRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfaceBridgeDomainRef(ctx context.Context, request *DeleteVirtualMachineInterfaceBridgeDomainRefRequest) (*DeleteVirtualMachineInterfaceBridgeDomainRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfaceBridgeDomainRefResponse{
			ID:                                     request.ID,
			VirtualMachineInterfaceBridgeDomainRef: request.GetVirtualMachineInterfaceBridgeDomainRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfaceBridgeDomainRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfaceBridgeDomainRef(ctx context.Context, request *CreateVirtualMachineInterfaceBridgeDomainRefRequest) (*CreateVirtualMachineInterfaceBridgeDomainRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldBridgeDomainRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddBridgeDomainRef(request.VirtualMachineInterfaceBridgeDomainRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfaceBridgeDomainRefResponse{
		ID:                                     request.ID,
		VirtualMachineInterfaceBridgeDomainRef: request.GetVirtualMachineInterfaceBridgeDomainRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfaceBridgeDomainRef(ctx context.Context, request *DeleteVirtualMachineInterfaceBridgeDomainRefRequest) (*DeleteVirtualMachineInterfaceBridgeDomainRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldBridgeDomainRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemoveBridgeDomainRef(request.VirtualMachineInterfaceBridgeDomainRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfaceBridgeDomainRefResponse{
		ID:                                     request.ID,
		VirtualMachineInterfaceBridgeDomainRef: request.GetVirtualMachineInterfaceBridgeDomainRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfaceSecurityGroupRef(ctx context.Context, request *CreateVirtualMachineInterfaceSecurityGroupRefRequest) (*CreateVirtualMachineInterfaceSecurityGroupRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfaceSecurityGroupRefResponse{
			ID:                                      request.ID,
			VirtualMachineInterfaceSecurityGroupRef: request.GetVirtualMachineInterfaceSecurityGroupRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfaceSecurityGroupRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfaceSecurityGroupRef(ctx context.Context, request *DeleteVirtualMachineInterfaceSecurityGroupRefRequest) (*DeleteVirtualMachineInterfaceSecurityGroupRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfaceSecurityGroupRefResponse{
			ID:                                      request.ID,
			VirtualMachineInterfaceSecurityGroupRef: request.GetVirtualMachineInterfaceSecurityGroupRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfaceSecurityGroupRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfaceSecurityGroupRef(ctx context.Context, request *CreateVirtualMachineInterfaceSecurityGroupRefRequest) (*CreateVirtualMachineInterfaceSecurityGroupRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldSecurityGroupRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddSecurityGroupRef(request.VirtualMachineInterfaceSecurityGroupRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfaceSecurityGroupRefResponse{
		ID:                                      request.ID,
		VirtualMachineInterfaceSecurityGroupRef: request.GetVirtualMachineInterfaceSecurityGroupRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfaceSecurityGroupRef(ctx context.Context, request *DeleteVirtualMachineInterfaceSecurityGroupRefRequest) (*DeleteVirtualMachineInterfaceSecurityGroupRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldSecurityGroupRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemoveSecurityGroupRef(request.VirtualMachineInterfaceSecurityGroupRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfaceSecurityGroupRefResponse{
		ID:                                      request.ID,
		VirtualMachineInterfaceSecurityGroupRef: request.GetVirtualMachineInterfaceSecurityGroupRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfaceSecurityLoggingObjectRef(ctx context.Context, request *CreateVirtualMachineInterfaceSecurityLoggingObjectRefRequest) (*CreateVirtualMachineInterfaceSecurityLoggingObjectRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfaceSecurityLoggingObjectRefResponse{
			ID: request.ID,
			VirtualMachineInterfaceSecurityLoggingObjectRef: request.GetVirtualMachineInterfaceSecurityLoggingObjectRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfaceSecurityLoggingObjectRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfaceSecurityLoggingObjectRef(ctx context.Context, request *DeleteVirtualMachineInterfaceSecurityLoggingObjectRefRequest) (*DeleteVirtualMachineInterfaceSecurityLoggingObjectRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfaceSecurityLoggingObjectRefResponse{
			ID: request.ID,
			VirtualMachineInterfaceSecurityLoggingObjectRef: request.GetVirtualMachineInterfaceSecurityLoggingObjectRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfaceSecurityLoggingObjectRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfaceSecurityLoggingObjectRef(ctx context.Context, request *CreateVirtualMachineInterfaceSecurityLoggingObjectRefRequest) (*CreateVirtualMachineInterfaceSecurityLoggingObjectRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldSecurityLoggingObjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddSecurityLoggingObjectRef(request.VirtualMachineInterfaceSecurityLoggingObjectRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfaceSecurityLoggingObjectRefResponse{
		ID: request.ID,
		VirtualMachineInterfaceSecurityLoggingObjectRef: request.GetVirtualMachineInterfaceSecurityLoggingObjectRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfaceSecurityLoggingObjectRef(ctx context.Context, request *DeleteVirtualMachineInterfaceSecurityLoggingObjectRefRequest) (*DeleteVirtualMachineInterfaceSecurityLoggingObjectRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldSecurityLoggingObjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemoveSecurityLoggingObjectRef(request.VirtualMachineInterfaceSecurityLoggingObjectRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfaceSecurityLoggingObjectRefResponse{
		ID: request.ID,
		VirtualMachineInterfaceSecurityLoggingObjectRef: request.GetVirtualMachineInterfaceSecurityLoggingObjectRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfacePortTupleRef(ctx context.Context, request *CreateVirtualMachineInterfacePortTupleRefRequest) (*CreateVirtualMachineInterfacePortTupleRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfacePortTupleRefResponse{
			ID:                                  request.ID,
			VirtualMachineInterfacePortTupleRef: request.GetVirtualMachineInterfacePortTupleRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfacePortTupleRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfacePortTupleRef(ctx context.Context, request *DeleteVirtualMachineInterfacePortTupleRefRequest) (*DeleteVirtualMachineInterfacePortTupleRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfacePortTupleRefResponse{
			ID:                                  request.ID,
			VirtualMachineInterfacePortTupleRef: request.GetVirtualMachineInterfacePortTupleRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfacePortTupleRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfacePortTupleRef(ctx context.Context, request *CreateVirtualMachineInterfacePortTupleRefRequest) (*CreateVirtualMachineInterfacePortTupleRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldPortTupleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddPortTupleRef(request.VirtualMachineInterfacePortTupleRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfacePortTupleRefResponse{
		ID:                                  request.ID,
		VirtualMachineInterfacePortTupleRef: request.GetVirtualMachineInterfacePortTupleRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfacePortTupleRef(ctx context.Context, request *DeleteVirtualMachineInterfacePortTupleRefRequest) (*DeleteVirtualMachineInterfacePortTupleRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldPortTupleRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemovePortTupleRef(request.VirtualMachineInterfacePortTupleRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfacePortTupleRefResponse{
		ID:                                  request.ID,
		VirtualMachineInterfacePortTupleRef: request.GetVirtualMachineInterfacePortTupleRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfaceServiceEndpointRef(ctx context.Context, request *CreateVirtualMachineInterfaceServiceEndpointRefRequest) (*CreateVirtualMachineInterfaceServiceEndpointRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfaceServiceEndpointRefResponse{
			ID: request.ID,
			VirtualMachineInterfaceServiceEndpointRef: request.GetVirtualMachineInterfaceServiceEndpointRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfaceServiceEndpointRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfaceServiceEndpointRef(ctx context.Context, request *DeleteVirtualMachineInterfaceServiceEndpointRefRequest) (*DeleteVirtualMachineInterfaceServiceEndpointRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfaceServiceEndpointRefResponse{
			ID: request.ID,
			VirtualMachineInterfaceServiceEndpointRef: request.GetVirtualMachineInterfaceServiceEndpointRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfaceServiceEndpointRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfaceServiceEndpointRef(ctx context.Context, request *CreateVirtualMachineInterfaceServiceEndpointRefRequest) (*CreateVirtualMachineInterfaceServiceEndpointRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldServiceEndpointRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddServiceEndpointRef(request.VirtualMachineInterfaceServiceEndpointRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfaceServiceEndpointRefResponse{
		ID: request.ID,
		VirtualMachineInterfaceServiceEndpointRef: request.GetVirtualMachineInterfaceServiceEndpointRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfaceServiceEndpointRef(ctx context.Context, request *DeleteVirtualMachineInterfaceServiceEndpointRefRequest) (*DeleteVirtualMachineInterfaceServiceEndpointRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldServiceEndpointRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemoveServiceEndpointRef(request.VirtualMachineInterfaceServiceEndpointRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfaceServiceEndpointRefResponse{
		ID: request.ID,
		VirtualMachineInterfaceServiceEndpointRef: request.GetVirtualMachineInterfaceServiceEndpointRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineInterfaceInterfaceRouteTableRef(ctx context.Context, request *CreateVirtualMachineInterfaceInterfaceRouteTableRefRequest) (*CreateVirtualMachineInterfaceInterfaceRouteTableRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineInterfaceInterfaceRouteTableRefResponse{
			ID: request.ID,
			VirtualMachineInterfaceInterfaceRouteTableRef: request.GetVirtualMachineInterfaceInterfaceRouteTableRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineInterfaceInterfaceRouteTableRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineInterfaceInterfaceRouteTableRef(ctx context.Context, request *DeleteVirtualMachineInterfaceInterfaceRouteTableRefRequest) (*DeleteVirtualMachineInterfaceInterfaceRouteTableRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineInterfaceInterfaceRouteTableRefResponse{
			ID: request.ID,
			VirtualMachineInterfaceInterfaceRouteTableRef: request.GetVirtualMachineInterfaceInterfaceRouteTableRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineInterfaceInterfaceRouteTableRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineInterfaceInterfaceRouteTableRef(ctx context.Context, request *CreateVirtualMachineInterfaceInterfaceRouteTableRefRequest) (*CreateVirtualMachineInterfaceInterfaceRouteTableRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldInterfaceRouteTableRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.AddInterfaceRouteTableRef(request.VirtualMachineInterfaceInterfaceRouteTableRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineInterfaceInterfaceRouteTableRefResponse{
		ID: request.ID,
		VirtualMachineInterfaceInterfaceRouteTableRef: request.GetVirtualMachineInterfaceInterfaceRouteTableRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineInterfaceInterfaceRouteTableRef(ctx context.Context, request *DeleteVirtualMachineInterfaceInterfaceRouteTableRefRequest) (*DeleteVirtualMachineInterfaceInterfaceRouteTableRefResponse, error) {
	refField := models.VirtualMachineInterfaceFieldInterfaceRouteTableRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachineInterface(ctx, &GetVirtualMachineInterfaceRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachineInterface
		obj.RemoveInterfaceRouteTableRef(request.VirtualMachineInterfaceInterfaceRouteTableRef)

		_, err = s.BaseService.UpdateVirtualMachineInterface(ctx, &UpdateVirtualMachineInterfaceRequest{
			VirtualMachineInterface: obj,
			FieldMask:               types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineInterfaceInterfaceRouteTableRefResponse{
		ID: request.ID,
		VirtualMachineInterfaceInterfaceRouteTableRef: request.GetVirtualMachineInterfaceInterfaceRouteTableRef(),
	}, nil
}

func (s *EventProducerService) CreateVirtualMachineInterface(ctx context.Context, request *CreateVirtualMachineInterfaceRequest) (*CreateVirtualMachineInterfaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateVirtualMachineInterfaceRequest{
				CreateVirtualMachineInterfaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterface(ctx, request)
}
func (s *EventProducerService) UpdateVirtualMachineInterface(ctx context.Context, request *UpdateVirtualMachineInterfaceRequest) (*UpdateVirtualMachineInterfaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateVirtualMachineInterfaceRequest{
				UpdateVirtualMachineInterfaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateVirtualMachineInterface(ctx, request)
}
func (s *EventProducerService) DeleteVirtualMachineInterface(ctx context.Context, request *DeleteVirtualMachineInterfaceRequest) (*DeleteVirtualMachineInterfaceResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteVirtualMachineInterfaceRequest{
				DeleteVirtualMachineInterfaceRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterface(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfacePortTupleRef(ctx context.Context, request *CreateVirtualMachineInterfacePortTupleRefRequest) (*CreateVirtualMachineInterfacePortTupleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfacePortTupleRefRequest{
			CreateVirtualMachineInterfacePortTupleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfacePortTupleRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfacePortTupleRef(ctx context.Context, request *DeleteVirtualMachineInterfacePortTupleRefRequest) (*DeleteVirtualMachineInterfacePortTupleRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfacePortTupleRefRequest{
			DeleteVirtualMachineInterfacePortTupleRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfacePortTupleRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfaceServiceEndpointRef(ctx context.Context, request *CreateVirtualMachineInterfaceServiceEndpointRefRequest) (*CreateVirtualMachineInterfaceServiceEndpointRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfaceServiceEndpointRefRequest{
			CreateVirtualMachineInterfaceServiceEndpointRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfaceServiceEndpointRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfaceServiceEndpointRef(ctx context.Context, request *DeleteVirtualMachineInterfaceServiceEndpointRefRequest) (*DeleteVirtualMachineInterfaceServiceEndpointRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfaceServiceEndpointRefRequest{
			DeleteVirtualMachineInterfaceServiceEndpointRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfaceServiceEndpointRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfaceInterfaceRouteTableRef(ctx context.Context, request *CreateVirtualMachineInterfaceInterfaceRouteTableRefRequest) (*CreateVirtualMachineInterfaceInterfaceRouteTableRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfaceInterfaceRouteTableRefRequest{
			CreateVirtualMachineInterfaceInterfaceRouteTableRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfaceInterfaceRouteTableRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfaceInterfaceRouteTableRef(ctx context.Context, request *DeleteVirtualMachineInterfaceInterfaceRouteTableRefRequest) (*DeleteVirtualMachineInterfaceInterfaceRouteTableRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfaceInterfaceRouteTableRefRequest{
			DeleteVirtualMachineInterfaceInterfaceRouteTableRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfaceInterfaceRouteTableRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfaceVirtualMachineRef(ctx context.Context, request *CreateVirtualMachineInterfaceVirtualMachineRefRequest) (*CreateVirtualMachineInterfaceVirtualMachineRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfaceVirtualMachineRefRequest{
			CreateVirtualMachineInterfaceVirtualMachineRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfaceVirtualMachineRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfaceVirtualMachineRef(ctx context.Context, request *DeleteVirtualMachineInterfaceVirtualMachineRefRequest) (*DeleteVirtualMachineInterfaceVirtualMachineRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfaceVirtualMachineRefRequest{
			DeleteVirtualMachineInterfaceVirtualMachineRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfaceVirtualMachineRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *CreateVirtualMachineInterfaceVirtualMachineInterfaceRefRequest) (*CreateVirtualMachineInterfaceVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfaceVirtualMachineInterfaceRefRequest{
			CreateVirtualMachineInterfaceVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfaceVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfaceVirtualMachineInterfaceRef(ctx context.Context, request *DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefRequest) (*DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefRequest{
			DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfaceVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfacePortProfileRef(ctx context.Context, request *CreateVirtualMachineInterfacePortProfileRefRequest) (*CreateVirtualMachineInterfacePortProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfacePortProfileRefRequest{
			CreateVirtualMachineInterfacePortProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfacePortProfileRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfacePortProfileRef(ctx context.Context, request *DeleteVirtualMachineInterfacePortProfileRefRequest) (*DeleteVirtualMachineInterfacePortProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfacePortProfileRefRequest{
			DeleteVirtualMachineInterfacePortProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfacePortProfileRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfaceVirtualNetworkRef(ctx context.Context, request *CreateVirtualMachineInterfaceVirtualNetworkRefRequest) (*CreateVirtualMachineInterfaceVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfaceVirtualNetworkRefRequest{
			CreateVirtualMachineInterfaceVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfaceVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfaceVirtualNetworkRef(ctx context.Context, request *DeleteVirtualMachineInterfaceVirtualNetworkRefRequest) (*DeleteVirtualMachineInterfaceVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfaceVirtualNetworkRefRequest{
			DeleteVirtualMachineInterfaceVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfaceVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfacePhysicalInterfaceRef(ctx context.Context, request *CreateVirtualMachineInterfacePhysicalInterfaceRefRequest) (*CreateVirtualMachineInterfacePhysicalInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfacePhysicalInterfaceRefRequest{
			CreateVirtualMachineInterfacePhysicalInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfacePhysicalInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfacePhysicalInterfaceRef(ctx context.Context, request *DeleteVirtualMachineInterfacePhysicalInterfaceRefRequest) (*DeleteVirtualMachineInterfacePhysicalInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfacePhysicalInterfaceRefRequest{
			DeleteVirtualMachineInterfacePhysicalInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfacePhysicalInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfaceServiceHealthCheckRef(ctx context.Context, request *CreateVirtualMachineInterfaceServiceHealthCheckRefRequest) (*CreateVirtualMachineInterfaceServiceHealthCheckRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfaceServiceHealthCheckRefRequest{
			CreateVirtualMachineInterfaceServiceHealthCheckRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfaceServiceHealthCheckRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfaceServiceHealthCheckRef(ctx context.Context, request *DeleteVirtualMachineInterfaceServiceHealthCheckRefRequest) (*DeleteVirtualMachineInterfaceServiceHealthCheckRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfaceServiceHealthCheckRefRequest{
			DeleteVirtualMachineInterfaceServiceHealthCheckRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfaceServiceHealthCheckRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfaceQosConfigRef(ctx context.Context, request *CreateVirtualMachineInterfaceQosConfigRefRequest) (*CreateVirtualMachineInterfaceQosConfigRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfaceQosConfigRefRequest{
			CreateVirtualMachineInterfaceQosConfigRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfaceQosConfigRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfaceQosConfigRef(ctx context.Context, request *DeleteVirtualMachineInterfaceQosConfigRefRequest) (*DeleteVirtualMachineInterfaceQosConfigRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfaceQosConfigRefRequest{
			DeleteVirtualMachineInterfaceQosConfigRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfaceQosConfigRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfaceTagRef(ctx context.Context, request *CreateVirtualMachineInterfaceTagRefRequest) (*CreateVirtualMachineInterfaceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfaceTagRefRequest{
			CreateVirtualMachineInterfaceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfaceTagRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfaceTagRef(ctx context.Context, request *DeleteVirtualMachineInterfaceTagRefRequest) (*DeleteVirtualMachineInterfaceTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfaceTagRefRequest{
			DeleteVirtualMachineInterfaceTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfaceTagRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfaceSecurityLoggingObjectRef(ctx context.Context, request *CreateVirtualMachineInterfaceSecurityLoggingObjectRefRequest) (*CreateVirtualMachineInterfaceSecurityLoggingObjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfaceSecurityLoggingObjectRefRequest{
			CreateVirtualMachineInterfaceSecurityLoggingObjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfaceSecurityLoggingObjectRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfaceSecurityLoggingObjectRef(ctx context.Context, request *DeleteVirtualMachineInterfaceSecurityLoggingObjectRefRequest) (*DeleteVirtualMachineInterfaceSecurityLoggingObjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfaceSecurityLoggingObjectRefRequest{
			DeleteVirtualMachineInterfaceSecurityLoggingObjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfaceSecurityLoggingObjectRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfaceBGPRouterRef(ctx context.Context, request *CreateVirtualMachineInterfaceBGPRouterRefRequest) (*CreateVirtualMachineInterfaceBGPRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfaceBGPRouterRefRequest{
			CreateVirtualMachineInterfaceBGPRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfaceBGPRouterRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfaceBGPRouterRef(ctx context.Context, request *DeleteVirtualMachineInterfaceBGPRouterRefRequest) (*DeleteVirtualMachineInterfaceBGPRouterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfaceBGPRouterRefRequest{
			DeleteVirtualMachineInterfaceBGPRouterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfaceBGPRouterRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfaceRoutingInstanceRef(ctx context.Context, request *CreateVirtualMachineInterfaceRoutingInstanceRefRequest) (*CreateVirtualMachineInterfaceRoutingInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfaceRoutingInstanceRefRequest{
			CreateVirtualMachineInterfaceRoutingInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfaceRoutingInstanceRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfaceRoutingInstanceRef(ctx context.Context, request *DeleteVirtualMachineInterfaceRoutingInstanceRefRequest) (*DeleteVirtualMachineInterfaceRoutingInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfaceRoutingInstanceRefRequest{
			DeleteVirtualMachineInterfaceRoutingInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfaceRoutingInstanceRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfaceBridgeDomainRef(ctx context.Context, request *CreateVirtualMachineInterfaceBridgeDomainRefRequest) (*CreateVirtualMachineInterfaceBridgeDomainRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfaceBridgeDomainRefRequest{
			CreateVirtualMachineInterfaceBridgeDomainRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfaceBridgeDomainRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfaceBridgeDomainRef(ctx context.Context, request *DeleteVirtualMachineInterfaceBridgeDomainRefRequest) (*DeleteVirtualMachineInterfaceBridgeDomainRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfaceBridgeDomainRefRequest{
			DeleteVirtualMachineInterfaceBridgeDomainRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfaceBridgeDomainRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineInterfaceSecurityGroupRef(ctx context.Context, request *CreateVirtualMachineInterfaceSecurityGroupRefRequest) (*CreateVirtualMachineInterfaceSecurityGroupRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineInterfaceSecurityGroupRefRequest{
			CreateVirtualMachineInterfaceSecurityGroupRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineInterfaceSecurityGroupRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineInterfaceSecurityGroupRef(ctx context.Context, request *DeleteVirtualMachineInterfaceSecurityGroupRefRequest) (*DeleteVirtualMachineInterfaceSecurityGroupRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineInterfaceSecurityGroupRefRequest{
			DeleteVirtualMachineInterfaceSecurityGroupRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineInterfaceSecurityGroupRef(ctx, request)
}

func (e *Event_CreateVirtualMachineInterfaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfaceRequest
	model := request.VirtualMachineInterface
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetVirtualMachineInterface(ctx,
			&GetVirtualMachineInterfaceRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateVirtualMachineInterface(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateVirtualMachineInterfaceRequest{
			CreateVirtualMachineInterfaceRequest: &CreateVirtualMachineInterfaceRequest{
				VirtualMachineInterface: response.GetVirtualMachineInterface(),
			},
		},
	}, nil
}

func (e *Event_CreateVirtualMachineInterfaceRequest) ToUpdateEvent() *Event {
	request := e.CreateVirtualMachineInterfaceRequest
	model := request.VirtualMachineInterface
	return &Event{
		Request: &Event_UpdateVirtualMachineInterfaceRequest{
			UpdateVirtualMachineInterfaceRequest: &UpdateVirtualMachineInterfaceRequest{
				VirtualMachineInterface: model,
				FieldMask:               request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateVirtualMachineInterfaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateVirtualMachineInterfaceRequest
	response, err := service.UpdateVirtualMachineInterface(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateVirtualMachineInterfaceRequest{
			UpdateVirtualMachineInterfaceRequest: &UpdateVirtualMachineInterfaceRequest{
				VirtualMachineInterface: response.GetVirtualMachineInterface(),
			},
		},
	}, nil
}

func (e *Event_UpdateVirtualMachineInterfaceRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteVirtualMachineInterfaceRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfaceRequest
	_, err := service.DeleteVirtualMachineInterface(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteVirtualMachineInterfaceRequest{
			DeleteVirtualMachineInterfaceRequest: &DeleteVirtualMachineInterfaceRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateVirtualMachineInterfaceVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfaceVirtualNetworkRefRequest
	if _, err := service.CreateVirtualMachineInterfaceVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfaceVirtualNetworkRefRequest{
		CreateVirtualMachineInterfaceVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfaceVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfaceVirtualNetworkRefRequest
	if _, err := service.DeleteVirtualMachineInterfaceVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfaceVirtualNetworkRefRequest{
		DeleteVirtualMachineInterfaceVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfaceVirtualMachineRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfaceVirtualMachineRefRequest
	if _, err := service.CreateVirtualMachineInterfaceVirtualMachineRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfaceVirtualMachineRefRequest{
		CreateVirtualMachineInterfaceVirtualMachineRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfaceVirtualMachineRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfaceVirtualMachineRefRequest
	if _, err := service.DeleteVirtualMachineInterfaceVirtualMachineRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfaceVirtualMachineRefRequest{
		DeleteVirtualMachineInterfaceVirtualMachineRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfaceVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfaceVirtualMachineInterfaceRefRequest
	if _, err := service.CreateVirtualMachineInterfaceVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfaceVirtualMachineInterfaceRefRequest{
		CreateVirtualMachineInterfaceVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefRequest
	if _, err := service.DeleteVirtualMachineInterfaceVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefRequest{
		DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfacePortProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfacePortProfileRefRequest
	if _, err := service.CreateVirtualMachineInterfacePortProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfacePortProfileRefRequest{
		CreateVirtualMachineInterfacePortProfileRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfacePortProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfacePortProfileRefRequest
	if _, err := service.DeleteVirtualMachineInterfacePortProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfacePortProfileRefRequest{
		DeleteVirtualMachineInterfacePortProfileRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfaceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfaceTagRefRequest
	if _, err := service.CreateVirtualMachineInterfaceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfaceTagRefRequest{
		CreateVirtualMachineInterfaceTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfaceTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfaceTagRefRequest
	if _, err := service.DeleteVirtualMachineInterfaceTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfaceTagRefRequest{
		DeleteVirtualMachineInterfaceTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfacePhysicalInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfacePhysicalInterfaceRefRequest
	if _, err := service.CreateVirtualMachineInterfacePhysicalInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfacePhysicalInterfaceRefRequest{
		CreateVirtualMachineInterfacePhysicalInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfacePhysicalInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfacePhysicalInterfaceRefRequest
	if _, err := service.DeleteVirtualMachineInterfacePhysicalInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfacePhysicalInterfaceRefRequest{
		DeleteVirtualMachineInterfacePhysicalInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfaceServiceHealthCheckRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfaceServiceHealthCheckRefRequest
	if _, err := service.CreateVirtualMachineInterfaceServiceHealthCheckRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfaceServiceHealthCheckRefRequest{
		CreateVirtualMachineInterfaceServiceHealthCheckRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfaceServiceHealthCheckRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfaceServiceHealthCheckRefRequest
	if _, err := service.DeleteVirtualMachineInterfaceServiceHealthCheckRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfaceServiceHealthCheckRefRequest{
		DeleteVirtualMachineInterfaceServiceHealthCheckRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfaceQosConfigRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfaceQosConfigRefRequest
	if _, err := service.CreateVirtualMachineInterfaceQosConfigRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfaceQosConfigRefRequest{
		CreateVirtualMachineInterfaceQosConfigRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfaceQosConfigRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfaceQosConfigRefRequest
	if _, err := service.DeleteVirtualMachineInterfaceQosConfigRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfaceQosConfigRefRequest{
		DeleteVirtualMachineInterfaceQosConfigRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfaceSecurityGroupRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfaceSecurityGroupRefRequest
	if _, err := service.CreateVirtualMachineInterfaceSecurityGroupRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfaceSecurityGroupRefRequest{
		CreateVirtualMachineInterfaceSecurityGroupRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfaceSecurityGroupRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfaceSecurityGroupRefRequest
	if _, err := service.DeleteVirtualMachineInterfaceSecurityGroupRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfaceSecurityGroupRefRequest{
		DeleteVirtualMachineInterfaceSecurityGroupRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfaceSecurityLoggingObjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfaceSecurityLoggingObjectRefRequest
	if _, err := service.CreateVirtualMachineInterfaceSecurityLoggingObjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfaceSecurityLoggingObjectRefRequest{
		CreateVirtualMachineInterfaceSecurityLoggingObjectRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfaceSecurityLoggingObjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfaceSecurityLoggingObjectRefRequest
	if _, err := service.DeleteVirtualMachineInterfaceSecurityLoggingObjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfaceSecurityLoggingObjectRefRequest{
		DeleteVirtualMachineInterfaceSecurityLoggingObjectRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfaceBGPRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfaceBGPRouterRefRequest
	if _, err := service.CreateVirtualMachineInterfaceBGPRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfaceBGPRouterRefRequest{
		CreateVirtualMachineInterfaceBGPRouterRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfaceBGPRouterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfaceBGPRouterRefRequest
	if _, err := service.DeleteVirtualMachineInterfaceBGPRouterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfaceBGPRouterRefRequest{
		DeleteVirtualMachineInterfaceBGPRouterRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfaceRoutingInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfaceRoutingInstanceRefRequest
	if _, err := service.CreateVirtualMachineInterfaceRoutingInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfaceRoutingInstanceRefRequest{
		CreateVirtualMachineInterfaceRoutingInstanceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfaceRoutingInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfaceRoutingInstanceRefRequest
	if _, err := service.DeleteVirtualMachineInterfaceRoutingInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfaceRoutingInstanceRefRequest{
		DeleteVirtualMachineInterfaceRoutingInstanceRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfaceBridgeDomainRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfaceBridgeDomainRefRequest
	if _, err := service.CreateVirtualMachineInterfaceBridgeDomainRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfaceBridgeDomainRefRequest{
		CreateVirtualMachineInterfaceBridgeDomainRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfaceBridgeDomainRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfaceBridgeDomainRefRequest
	if _, err := service.DeleteVirtualMachineInterfaceBridgeDomainRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfaceBridgeDomainRefRequest{
		DeleteVirtualMachineInterfaceBridgeDomainRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfacePortTupleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfacePortTupleRefRequest
	if _, err := service.CreateVirtualMachineInterfacePortTupleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfacePortTupleRefRequest{
		CreateVirtualMachineInterfacePortTupleRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfacePortTupleRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfacePortTupleRefRequest
	if _, err := service.DeleteVirtualMachineInterfacePortTupleRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfacePortTupleRefRequest{
		DeleteVirtualMachineInterfacePortTupleRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfaceServiceEndpointRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfaceServiceEndpointRefRequest
	if _, err := service.CreateVirtualMachineInterfaceServiceEndpointRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfaceServiceEndpointRefRequest{
		CreateVirtualMachineInterfaceServiceEndpointRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfaceServiceEndpointRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfaceServiceEndpointRefRequest
	if _, err := service.DeleteVirtualMachineInterfaceServiceEndpointRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfaceServiceEndpointRefRequest{
		DeleteVirtualMachineInterfaceServiceEndpointRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineInterfaceInterfaceRouteTableRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineInterfaceInterfaceRouteTableRefRequest
	if _, err := service.CreateVirtualMachineInterfaceInterfaceRouteTableRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineInterfaceInterfaceRouteTableRefRequest{
		CreateVirtualMachineInterfaceInterfaceRouteTableRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineInterfaceInterfaceRouteTableRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineInterfaceInterfaceRouteTableRefRequest
	if _, err := service.DeleteVirtualMachineInterfaceInterfaceRouteTableRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineInterfaceInterfaceRouteTableRefRequest{
		DeleteVirtualMachineInterfaceInterfaceRouteTableRefRequest: request,
	}}, nil
}

type VirtualMachine = models.VirtualMachine

func (s *BaseService) CreateVirtualMachine(ctx context.Context, request *CreateVirtualMachineRequest) (*CreateVirtualMachineResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineResponse{
			VirtualMachine: request.GetVirtualMachine(),
		}, nil
	}
	return s.Next().CreateVirtualMachine(ctx, request)
}
func (s *BaseService) UpdateVirtualMachine(ctx context.Context, request *UpdateVirtualMachineRequest) (*UpdateVirtualMachineResponse, error) {
	if s.next == nil {
		return &UpdateVirtualMachineResponse{
			VirtualMachine: request.GetVirtualMachine(),
		}, nil
	}
	return s.Next().UpdateVirtualMachine(ctx, request)
}
func (s *BaseService) DeleteVirtualMachine(ctx context.Context, request *DeleteVirtualMachineRequest) (*DeleteVirtualMachineResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteVirtualMachine(ctx, request)
}
func (s *BaseService) GetVirtualMachine(ctx context.Context, request *GetVirtualMachineRequest) (*GetVirtualMachineResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetVirtualMachine(ctx, request)
}
func (s *BaseService) ListVirtualMachine(ctx context.Context, request *ListVirtualMachineRequest) (*ListVirtualMachineResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListVirtualMachine(ctx, request)
}

func (s *BaseService) CreateVirtualMachineServiceInstanceRef(ctx context.Context, request *CreateVirtualMachineServiceInstanceRefRequest) (*CreateVirtualMachineServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineServiceInstanceRefResponse{
			ID:                               request.ID,
			VirtualMachineServiceInstanceRef: request.GetVirtualMachineServiceInstanceRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineServiceInstanceRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineServiceInstanceRef(ctx context.Context, request *DeleteVirtualMachineServiceInstanceRefRequest) (*DeleteVirtualMachineServiceInstanceRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineServiceInstanceRefResponse{
			ID:                               request.ID,
			VirtualMachineServiceInstanceRef: request.GetVirtualMachineServiceInstanceRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineServiceInstanceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineServiceInstanceRef(ctx context.Context, request *CreateVirtualMachineServiceInstanceRefRequest) (*CreateVirtualMachineServiceInstanceRefResponse, error) {
	refField := models.VirtualMachineFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachine(ctx, &GetVirtualMachineRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachine
		obj.AddServiceInstanceRef(request.VirtualMachineServiceInstanceRef)

		_, err = s.BaseService.UpdateVirtualMachine(ctx, &UpdateVirtualMachineRequest{
			VirtualMachine: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineServiceInstanceRefResponse{
		ID:                               request.ID,
		VirtualMachineServiceInstanceRef: request.GetVirtualMachineServiceInstanceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineServiceInstanceRef(ctx context.Context, request *DeleteVirtualMachineServiceInstanceRefRequest) (*DeleteVirtualMachineServiceInstanceRefResponse, error) {
	refField := models.VirtualMachineFieldServiceInstanceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachine(ctx, &GetVirtualMachineRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachine
		obj.RemoveServiceInstanceRef(request.VirtualMachineServiceInstanceRef)

		_, err = s.BaseService.UpdateVirtualMachine(ctx, &UpdateVirtualMachineRequest{
			VirtualMachine: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineServiceInstanceRefResponse{
		ID:                               request.ID,
		VirtualMachineServiceInstanceRef: request.GetVirtualMachineServiceInstanceRef(),
	}, nil
}

func (s *BaseService) CreateVirtualMachineTagRef(ctx context.Context, request *CreateVirtualMachineTagRefRequest) (*CreateVirtualMachineTagRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualMachineTagRefResponse{
			ID:                   request.ID,
			VirtualMachineTagRef: request.GetVirtualMachineTagRef(),
		}, nil
	}
	return s.Next().CreateVirtualMachineTagRef(ctx, request)
}

func (s *BaseService) DeleteVirtualMachineTagRef(ctx context.Context, request *DeleteVirtualMachineTagRefRequest) (*DeleteVirtualMachineTagRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualMachineTagRefResponse{
			ID:                   request.ID,
			VirtualMachineTagRef: request.GetVirtualMachineTagRef(),
		}, nil
	}
	return s.Next().DeleteVirtualMachineTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualMachineTagRef(ctx context.Context, request *CreateVirtualMachineTagRefRequest) (*CreateVirtualMachineTagRefResponse, error) {
	refField := models.VirtualMachineFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachine(ctx, &GetVirtualMachineRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachine
		obj.AddTagRef(request.VirtualMachineTagRef)

		_, err = s.BaseService.UpdateVirtualMachine(ctx, &UpdateVirtualMachineRequest{
			VirtualMachine: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualMachineTagRefResponse{
		ID:                   request.ID,
		VirtualMachineTagRef: request.GetVirtualMachineTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualMachineTagRef(ctx context.Context, request *DeleteVirtualMachineTagRefRequest) (*DeleteVirtualMachineTagRefResponse, error) {
	refField := models.VirtualMachineFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualMachine(ctx, &GetVirtualMachineRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualMachine
		obj.RemoveTagRef(request.VirtualMachineTagRef)

		_, err = s.BaseService.UpdateVirtualMachine(ctx, &UpdateVirtualMachineRequest{
			VirtualMachine: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualMachineTagRefResponse{
		ID:                   request.ID,
		VirtualMachineTagRef: request.GetVirtualMachineTagRef(),
	}, nil
}

func (s *EventProducerService) CreateVirtualMachine(ctx context.Context, request *CreateVirtualMachineRequest) (*CreateVirtualMachineResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateVirtualMachineRequest{
				CreateVirtualMachineRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachine(ctx, request)
}
func (s *EventProducerService) UpdateVirtualMachine(ctx context.Context, request *UpdateVirtualMachineRequest) (*UpdateVirtualMachineResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateVirtualMachineRequest{
				UpdateVirtualMachineRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateVirtualMachine(ctx, request)
}
func (s *EventProducerService) DeleteVirtualMachine(ctx context.Context, request *DeleteVirtualMachineRequest) (*DeleteVirtualMachineResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteVirtualMachineRequest{
				DeleteVirtualMachineRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachine(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineServiceInstanceRef(ctx context.Context, request *CreateVirtualMachineServiceInstanceRefRequest) (*CreateVirtualMachineServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineServiceInstanceRefRequest{
			CreateVirtualMachineServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineServiceInstanceRef(ctx context.Context, request *DeleteVirtualMachineServiceInstanceRefRequest) (*DeleteVirtualMachineServiceInstanceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineServiceInstanceRefRequest{
			DeleteVirtualMachineServiceInstanceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineServiceInstanceRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualMachineTagRef(ctx context.Context, request *CreateVirtualMachineTagRefRequest) (*CreateVirtualMachineTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualMachineTagRefRequest{
			CreateVirtualMachineTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualMachineTagRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualMachineTagRef(ctx context.Context, request *DeleteVirtualMachineTagRefRequest) (*DeleteVirtualMachineTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualMachineTagRefRequest{
			DeleteVirtualMachineTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualMachineTagRef(ctx, request)
}

func (e *Event_CreateVirtualMachineRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineRequest
	model := request.VirtualMachine
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetVirtualMachine(ctx,
			&GetVirtualMachineRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateVirtualMachine(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateVirtualMachineRequest{
			CreateVirtualMachineRequest: &CreateVirtualMachineRequest{
				VirtualMachine: response.GetVirtualMachine(),
			},
		},
	}, nil
}

func (e *Event_CreateVirtualMachineRequest) ToUpdateEvent() *Event {
	request := e.CreateVirtualMachineRequest
	model := request.VirtualMachine
	return &Event{
		Request: &Event_UpdateVirtualMachineRequest{
			UpdateVirtualMachineRequest: &UpdateVirtualMachineRequest{
				VirtualMachine: model,
				FieldMask:      request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateVirtualMachineRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateVirtualMachineRequest
	response, err := service.UpdateVirtualMachine(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateVirtualMachineRequest{
			UpdateVirtualMachineRequest: &UpdateVirtualMachineRequest{
				VirtualMachine: response.GetVirtualMachine(),
			},
		},
	}, nil
}

func (e *Event_UpdateVirtualMachineRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteVirtualMachineRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineRequest
	_, err := service.DeleteVirtualMachine(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteVirtualMachineRequest{
			DeleteVirtualMachineRequest: &DeleteVirtualMachineRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateVirtualMachineServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineServiceInstanceRefRequest
	if _, err := service.CreateVirtualMachineServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineServiceInstanceRefRequest{
		CreateVirtualMachineServiceInstanceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineServiceInstanceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineServiceInstanceRefRequest
	if _, err := service.DeleteVirtualMachineServiceInstanceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineServiceInstanceRefRequest{
		DeleteVirtualMachineServiceInstanceRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualMachineTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualMachineTagRefRequest
	if _, err := service.CreateVirtualMachineTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualMachineTagRefRequest{
		CreateVirtualMachineTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualMachineTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualMachineTagRefRequest
	if _, err := service.DeleteVirtualMachineTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualMachineTagRefRequest{
		DeleteVirtualMachineTagRefRequest: request,
	}}, nil
}

type VirtualNetwork = models.VirtualNetwork

func (s *BaseService) CreateVirtualNetwork(ctx context.Context, request *CreateVirtualNetworkRequest) (*CreateVirtualNetworkResponse, error) {
	if s.next == nil {
		return &CreateVirtualNetworkResponse{
			VirtualNetwork: request.GetVirtualNetwork(),
		}, nil
	}
	return s.Next().CreateVirtualNetwork(ctx, request)
}
func (s *BaseService) UpdateVirtualNetwork(ctx context.Context, request *UpdateVirtualNetworkRequest) (*UpdateVirtualNetworkResponse, error) {
	if s.next == nil {
		return &UpdateVirtualNetworkResponse{
			VirtualNetwork: request.GetVirtualNetwork(),
		}, nil
	}
	return s.Next().UpdateVirtualNetwork(ctx, request)
}
func (s *BaseService) DeleteVirtualNetwork(ctx context.Context, request *DeleteVirtualNetworkRequest) (*DeleteVirtualNetworkResponse, error) {
	if s.next == nil {
		return &DeleteVirtualNetworkResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteVirtualNetwork(ctx, request)
}
func (s *BaseService) GetVirtualNetwork(ctx context.Context, request *GetVirtualNetworkRequest) (*GetVirtualNetworkResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetVirtualNetwork(ctx, request)
}
func (s *BaseService) ListVirtualNetwork(ctx context.Context, request *ListVirtualNetworkRequest) (*ListVirtualNetworkResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListVirtualNetwork(ctx, request)
}

func (s *BaseService) CreateVirtualNetworkMulticastPolicyRef(ctx context.Context, request *CreateVirtualNetworkMulticastPolicyRefRequest) (*CreateVirtualNetworkMulticastPolicyRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualNetworkMulticastPolicyRefResponse{
			ID:                               request.ID,
			VirtualNetworkMulticastPolicyRef: request.GetVirtualNetworkMulticastPolicyRef(),
		}, nil
	}
	return s.Next().CreateVirtualNetworkMulticastPolicyRef(ctx, request)
}

func (s *BaseService) DeleteVirtualNetworkMulticastPolicyRef(ctx context.Context, request *DeleteVirtualNetworkMulticastPolicyRefRequest) (*DeleteVirtualNetworkMulticastPolicyRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualNetworkMulticastPolicyRefResponse{
			ID:                               request.ID,
			VirtualNetworkMulticastPolicyRef: request.GetVirtualNetworkMulticastPolicyRef(),
		}, nil
	}
	return s.Next().DeleteVirtualNetworkMulticastPolicyRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualNetworkMulticastPolicyRef(ctx context.Context, request *CreateVirtualNetworkMulticastPolicyRefRequest) (*CreateVirtualNetworkMulticastPolicyRefResponse, error) {
	refField := models.VirtualNetworkFieldMulticastPolicyRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.AddMulticastPolicyRef(request.VirtualNetworkMulticastPolicyRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualNetworkMulticastPolicyRefResponse{
		ID:                               request.ID,
		VirtualNetworkMulticastPolicyRef: request.GetVirtualNetworkMulticastPolicyRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualNetworkMulticastPolicyRef(ctx context.Context, request *DeleteVirtualNetworkMulticastPolicyRefRequest) (*DeleteVirtualNetworkMulticastPolicyRefResponse, error) {
	refField := models.VirtualNetworkFieldMulticastPolicyRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.RemoveMulticastPolicyRef(request.VirtualNetworkMulticastPolicyRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualNetworkMulticastPolicyRefResponse{
		ID:                               request.ID,
		VirtualNetworkMulticastPolicyRef: request.GetVirtualNetworkMulticastPolicyRef(),
	}, nil
}

func (s *BaseService) CreateVirtualNetworkNetworkIpamRef(ctx context.Context, request *CreateVirtualNetworkNetworkIpamRefRequest) (*CreateVirtualNetworkNetworkIpamRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualNetworkNetworkIpamRefResponse{
			ID:                           request.ID,
			VirtualNetworkNetworkIpamRef: request.GetVirtualNetworkNetworkIpamRef(),
		}, nil
	}
	return s.Next().CreateVirtualNetworkNetworkIpamRef(ctx, request)
}

func (s *BaseService) DeleteVirtualNetworkNetworkIpamRef(ctx context.Context, request *DeleteVirtualNetworkNetworkIpamRefRequest) (*DeleteVirtualNetworkNetworkIpamRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualNetworkNetworkIpamRefResponse{
			ID:                           request.ID,
			VirtualNetworkNetworkIpamRef: request.GetVirtualNetworkNetworkIpamRef(),
		}, nil
	}
	return s.Next().DeleteVirtualNetworkNetworkIpamRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualNetworkNetworkIpamRef(ctx context.Context, request *CreateVirtualNetworkNetworkIpamRefRequest) (*CreateVirtualNetworkNetworkIpamRefResponse, error) {
	refField := models.VirtualNetworkFieldNetworkIpamRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.AddNetworkIpamRef(request.VirtualNetworkNetworkIpamRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualNetworkNetworkIpamRefResponse{
		ID:                           request.ID,
		VirtualNetworkNetworkIpamRef: request.GetVirtualNetworkNetworkIpamRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualNetworkNetworkIpamRef(ctx context.Context, request *DeleteVirtualNetworkNetworkIpamRefRequest) (*DeleteVirtualNetworkNetworkIpamRefResponse, error) {
	refField := models.VirtualNetworkFieldNetworkIpamRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.RemoveNetworkIpamRef(request.VirtualNetworkNetworkIpamRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualNetworkNetworkIpamRefResponse{
		ID:                           request.ID,
		VirtualNetworkNetworkIpamRef: request.GetVirtualNetworkNetworkIpamRef(),
	}, nil
}

func (s *BaseService) CreateVirtualNetworkRouteTableRef(ctx context.Context, request *CreateVirtualNetworkRouteTableRefRequest) (*CreateVirtualNetworkRouteTableRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualNetworkRouteTableRefResponse{
			ID:                          request.ID,
			VirtualNetworkRouteTableRef: request.GetVirtualNetworkRouteTableRef(),
		}, nil
	}
	return s.Next().CreateVirtualNetworkRouteTableRef(ctx, request)
}

func (s *BaseService) DeleteVirtualNetworkRouteTableRef(ctx context.Context, request *DeleteVirtualNetworkRouteTableRefRequest) (*DeleteVirtualNetworkRouteTableRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualNetworkRouteTableRefResponse{
			ID:                          request.ID,
			VirtualNetworkRouteTableRef: request.GetVirtualNetworkRouteTableRef(),
		}, nil
	}
	return s.Next().DeleteVirtualNetworkRouteTableRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualNetworkRouteTableRef(ctx context.Context, request *CreateVirtualNetworkRouteTableRefRequest) (*CreateVirtualNetworkRouteTableRefResponse, error) {
	refField := models.VirtualNetworkFieldRouteTableRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.AddRouteTableRef(request.VirtualNetworkRouteTableRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualNetworkRouteTableRefResponse{
		ID:                          request.ID,
		VirtualNetworkRouteTableRef: request.GetVirtualNetworkRouteTableRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualNetworkRouteTableRef(ctx context.Context, request *DeleteVirtualNetworkRouteTableRefRequest) (*DeleteVirtualNetworkRouteTableRefResponse, error) {
	refField := models.VirtualNetworkFieldRouteTableRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.RemoveRouteTableRef(request.VirtualNetworkRouteTableRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualNetworkRouteTableRefResponse{
		ID:                          request.ID,
		VirtualNetworkRouteTableRef: request.GetVirtualNetworkRouteTableRef(),
	}, nil
}

func (s *BaseService) CreateVirtualNetworkQosConfigRef(ctx context.Context, request *CreateVirtualNetworkQosConfigRefRequest) (*CreateVirtualNetworkQosConfigRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualNetworkQosConfigRefResponse{
			ID:                         request.ID,
			VirtualNetworkQosConfigRef: request.GetVirtualNetworkQosConfigRef(),
		}, nil
	}
	return s.Next().CreateVirtualNetworkQosConfigRef(ctx, request)
}

func (s *BaseService) DeleteVirtualNetworkQosConfigRef(ctx context.Context, request *DeleteVirtualNetworkQosConfigRefRequest) (*DeleteVirtualNetworkQosConfigRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualNetworkQosConfigRefResponse{
			ID:                         request.ID,
			VirtualNetworkQosConfigRef: request.GetVirtualNetworkQosConfigRef(),
		}, nil
	}
	return s.Next().DeleteVirtualNetworkQosConfigRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualNetworkQosConfigRef(ctx context.Context, request *CreateVirtualNetworkQosConfigRefRequest) (*CreateVirtualNetworkQosConfigRefResponse, error) {
	refField := models.VirtualNetworkFieldQosConfigRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.AddQosConfigRef(request.VirtualNetworkQosConfigRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualNetworkQosConfigRefResponse{
		ID:                         request.ID,
		VirtualNetworkQosConfigRef: request.GetVirtualNetworkQosConfigRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualNetworkQosConfigRef(ctx context.Context, request *DeleteVirtualNetworkQosConfigRefRequest) (*DeleteVirtualNetworkQosConfigRefResponse, error) {
	refField := models.VirtualNetworkFieldQosConfigRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.RemoveQosConfigRef(request.VirtualNetworkQosConfigRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualNetworkQosConfigRefResponse{
		ID:                         request.ID,
		VirtualNetworkQosConfigRef: request.GetVirtualNetworkQosConfigRef(),
	}, nil
}

func (s *BaseService) CreateVirtualNetworkSecurityLoggingObjectRef(ctx context.Context, request *CreateVirtualNetworkSecurityLoggingObjectRefRequest) (*CreateVirtualNetworkSecurityLoggingObjectRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualNetworkSecurityLoggingObjectRefResponse{
			ID:                                     request.ID,
			VirtualNetworkSecurityLoggingObjectRef: request.GetVirtualNetworkSecurityLoggingObjectRef(),
		}, nil
	}
	return s.Next().CreateVirtualNetworkSecurityLoggingObjectRef(ctx, request)
}

func (s *BaseService) DeleteVirtualNetworkSecurityLoggingObjectRef(ctx context.Context, request *DeleteVirtualNetworkSecurityLoggingObjectRefRequest) (*DeleteVirtualNetworkSecurityLoggingObjectRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualNetworkSecurityLoggingObjectRefResponse{
			ID:                                     request.ID,
			VirtualNetworkSecurityLoggingObjectRef: request.GetVirtualNetworkSecurityLoggingObjectRef(),
		}, nil
	}
	return s.Next().DeleteVirtualNetworkSecurityLoggingObjectRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualNetworkSecurityLoggingObjectRef(ctx context.Context, request *CreateVirtualNetworkSecurityLoggingObjectRefRequest) (*CreateVirtualNetworkSecurityLoggingObjectRefResponse, error) {
	refField := models.VirtualNetworkFieldSecurityLoggingObjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.AddSecurityLoggingObjectRef(request.VirtualNetworkSecurityLoggingObjectRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualNetworkSecurityLoggingObjectRefResponse{
		ID:                                     request.ID,
		VirtualNetworkSecurityLoggingObjectRef: request.GetVirtualNetworkSecurityLoggingObjectRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualNetworkSecurityLoggingObjectRef(ctx context.Context, request *DeleteVirtualNetworkSecurityLoggingObjectRefRequest) (*DeleteVirtualNetworkSecurityLoggingObjectRefResponse, error) {
	refField := models.VirtualNetworkFieldSecurityLoggingObjectRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.RemoveSecurityLoggingObjectRef(request.VirtualNetworkSecurityLoggingObjectRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualNetworkSecurityLoggingObjectRefResponse{
		ID:                                     request.ID,
		VirtualNetworkSecurityLoggingObjectRef: request.GetVirtualNetworkSecurityLoggingObjectRef(),
	}, nil
}

func (s *BaseService) CreateVirtualNetworkTagRef(ctx context.Context, request *CreateVirtualNetworkTagRefRequest) (*CreateVirtualNetworkTagRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualNetworkTagRefResponse{
			ID:                   request.ID,
			VirtualNetworkTagRef: request.GetVirtualNetworkTagRef(),
		}, nil
	}
	return s.Next().CreateVirtualNetworkTagRef(ctx, request)
}

func (s *BaseService) DeleteVirtualNetworkTagRef(ctx context.Context, request *DeleteVirtualNetworkTagRefRequest) (*DeleteVirtualNetworkTagRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualNetworkTagRefResponse{
			ID:                   request.ID,
			VirtualNetworkTagRef: request.GetVirtualNetworkTagRef(),
		}, nil
	}
	return s.Next().DeleteVirtualNetworkTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualNetworkTagRef(ctx context.Context, request *CreateVirtualNetworkTagRefRequest) (*CreateVirtualNetworkTagRefResponse, error) {
	refField := models.VirtualNetworkFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.AddTagRef(request.VirtualNetworkTagRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualNetworkTagRefResponse{
		ID:                   request.ID,
		VirtualNetworkTagRef: request.GetVirtualNetworkTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualNetworkTagRef(ctx context.Context, request *DeleteVirtualNetworkTagRefRequest) (*DeleteVirtualNetworkTagRefResponse, error) {
	refField := models.VirtualNetworkFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.RemoveTagRef(request.VirtualNetworkTagRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualNetworkTagRefResponse{
		ID:                   request.ID,
		VirtualNetworkTagRef: request.GetVirtualNetworkTagRef(),
	}, nil
}

func (s *BaseService) CreateVirtualNetworkIntentMapRef(ctx context.Context, request *CreateVirtualNetworkIntentMapRefRequest) (*CreateVirtualNetworkIntentMapRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualNetworkIntentMapRefResponse{
			ID:                         request.ID,
			VirtualNetworkIntentMapRef: request.GetVirtualNetworkIntentMapRef(),
		}, nil
	}
	return s.Next().CreateVirtualNetworkIntentMapRef(ctx, request)
}

func (s *BaseService) DeleteVirtualNetworkIntentMapRef(ctx context.Context, request *DeleteVirtualNetworkIntentMapRefRequest) (*DeleteVirtualNetworkIntentMapRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualNetworkIntentMapRefResponse{
			ID:                         request.ID,
			VirtualNetworkIntentMapRef: request.GetVirtualNetworkIntentMapRef(),
		}, nil
	}
	return s.Next().DeleteVirtualNetworkIntentMapRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualNetworkIntentMapRef(ctx context.Context, request *CreateVirtualNetworkIntentMapRefRequest) (*CreateVirtualNetworkIntentMapRefResponse, error) {
	refField := models.VirtualNetworkFieldIntentMapRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.AddIntentMapRef(request.VirtualNetworkIntentMapRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualNetworkIntentMapRefResponse{
		ID:                         request.ID,
		VirtualNetworkIntentMapRef: request.GetVirtualNetworkIntentMapRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualNetworkIntentMapRef(ctx context.Context, request *DeleteVirtualNetworkIntentMapRefRequest) (*DeleteVirtualNetworkIntentMapRefResponse, error) {
	refField := models.VirtualNetworkFieldIntentMapRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.RemoveIntentMapRef(request.VirtualNetworkIntentMapRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualNetworkIntentMapRefResponse{
		ID:                         request.ID,
		VirtualNetworkIntentMapRef: request.GetVirtualNetworkIntentMapRef(),
	}, nil
}

func (s *BaseService) CreateVirtualNetworkBGPVPNRef(ctx context.Context, request *CreateVirtualNetworkBGPVPNRefRequest) (*CreateVirtualNetworkBGPVPNRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualNetworkBGPVPNRefResponse{
			ID:                      request.ID,
			VirtualNetworkBGPVPNRef: request.GetVirtualNetworkBGPVPNRef(),
		}, nil
	}
	return s.Next().CreateVirtualNetworkBGPVPNRef(ctx, request)
}

func (s *BaseService) DeleteVirtualNetworkBGPVPNRef(ctx context.Context, request *DeleteVirtualNetworkBGPVPNRefRequest) (*DeleteVirtualNetworkBGPVPNRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualNetworkBGPVPNRefResponse{
			ID:                      request.ID,
			VirtualNetworkBGPVPNRef: request.GetVirtualNetworkBGPVPNRef(),
		}, nil
	}
	return s.Next().DeleteVirtualNetworkBGPVPNRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualNetworkBGPVPNRef(ctx context.Context, request *CreateVirtualNetworkBGPVPNRefRequest) (*CreateVirtualNetworkBGPVPNRefResponse, error) {
	refField := models.VirtualNetworkFieldBGPVPNRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.AddBGPVPNRef(request.VirtualNetworkBGPVPNRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualNetworkBGPVPNRefResponse{
		ID:                      request.ID,
		VirtualNetworkBGPVPNRef: request.GetVirtualNetworkBGPVPNRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualNetworkBGPVPNRef(ctx context.Context, request *DeleteVirtualNetworkBGPVPNRefRequest) (*DeleteVirtualNetworkBGPVPNRefResponse, error) {
	refField := models.VirtualNetworkFieldBGPVPNRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.RemoveBGPVPNRef(request.VirtualNetworkBGPVPNRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualNetworkBGPVPNRefResponse{
		ID:                      request.ID,
		VirtualNetworkBGPVPNRef: request.GetVirtualNetworkBGPVPNRef(),
	}, nil
}

func (s *BaseService) CreateVirtualNetworkRoutingPolicyRef(ctx context.Context, request *CreateVirtualNetworkRoutingPolicyRefRequest) (*CreateVirtualNetworkRoutingPolicyRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualNetworkRoutingPolicyRefResponse{
			ID:                             request.ID,
			VirtualNetworkRoutingPolicyRef: request.GetVirtualNetworkRoutingPolicyRef(),
		}, nil
	}
	return s.Next().CreateVirtualNetworkRoutingPolicyRef(ctx, request)
}

func (s *BaseService) DeleteVirtualNetworkRoutingPolicyRef(ctx context.Context, request *DeleteVirtualNetworkRoutingPolicyRefRequest) (*DeleteVirtualNetworkRoutingPolicyRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualNetworkRoutingPolicyRefResponse{
			ID:                             request.ID,
			VirtualNetworkRoutingPolicyRef: request.GetVirtualNetworkRoutingPolicyRef(),
		}, nil
	}
	return s.Next().DeleteVirtualNetworkRoutingPolicyRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualNetworkRoutingPolicyRef(ctx context.Context, request *CreateVirtualNetworkRoutingPolicyRefRequest) (*CreateVirtualNetworkRoutingPolicyRefResponse, error) {
	refField := models.VirtualNetworkFieldRoutingPolicyRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.AddRoutingPolicyRef(request.VirtualNetworkRoutingPolicyRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualNetworkRoutingPolicyRefResponse{
		ID:                             request.ID,
		VirtualNetworkRoutingPolicyRef: request.GetVirtualNetworkRoutingPolicyRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualNetworkRoutingPolicyRef(ctx context.Context, request *DeleteVirtualNetworkRoutingPolicyRefRequest) (*DeleteVirtualNetworkRoutingPolicyRefResponse, error) {
	refField := models.VirtualNetworkFieldRoutingPolicyRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.RemoveRoutingPolicyRef(request.VirtualNetworkRoutingPolicyRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualNetworkRoutingPolicyRefResponse{
		ID:                             request.ID,
		VirtualNetworkRoutingPolicyRef: request.GetVirtualNetworkRoutingPolicyRef(),
	}, nil
}

func (s *BaseService) CreateVirtualNetworkNetworkPolicyRef(ctx context.Context, request *CreateVirtualNetworkNetworkPolicyRefRequest) (*CreateVirtualNetworkNetworkPolicyRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualNetworkNetworkPolicyRefResponse{
			ID:                             request.ID,
			VirtualNetworkNetworkPolicyRef: request.GetVirtualNetworkNetworkPolicyRef(),
		}, nil
	}
	return s.Next().CreateVirtualNetworkNetworkPolicyRef(ctx, request)
}

func (s *BaseService) DeleteVirtualNetworkNetworkPolicyRef(ctx context.Context, request *DeleteVirtualNetworkNetworkPolicyRefRequest) (*DeleteVirtualNetworkNetworkPolicyRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualNetworkNetworkPolicyRefResponse{
			ID:                             request.ID,
			VirtualNetworkNetworkPolicyRef: request.GetVirtualNetworkNetworkPolicyRef(),
		}, nil
	}
	return s.Next().DeleteVirtualNetworkNetworkPolicyRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualNetworkNetworkPolicyRef(ctx context.Context, request *CreateVirtualNetworkNetworkPolicyRefRequest) (*CreateVirtualNetworkNetworkPolicyRefResponse, error) {
	refField := models.VirtualNetworkFieldNetworkPolicyRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.AddNetworkPolicyRef(request.VirtualNetworkNetworkPolicyRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualNetworkNetworkPolicyRefResponse{
		ID:                             request.ID,
		VirtualNetworkNetworkPolicyRef: request.GetVirtualNetworkNetworkPolicyRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualNetworkNetworkPolicyRef(ctx context.Context, request *DeleteVirtualNetworkNetworkPolicyRefRequest) (*DeleteVirtualNetworkNetworkPolicyRefResponse, error) {
	refField := models.VirtualNetworkFieldNetworkPolicyRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.RemoveNetworkPolicyRef(request.VirtualNetworkNetworkPolicyRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualNetworkNetworkPolicyRefResponse{
		ID:                             request.ID,
		VirtualNetworkNetworkPolicyRef: request.GetVirtualNetworkNetworkPolicyRef(),
	}, nil
}

func (s *BaseService) CreateVirtualNetworkVirtualNetworkRef(ctx context.Context, request *CreateVirtualNetworkVirtualNetworkRefRequest) (*CreateVirtualNetworkVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualNetworkVirtualNetworkRefResponse{
			ID:                              request.ID,
			VirtualNetworkVirtualNetworkRef: request.GetVirtualNetworkVirtualNetworkRef(),
		}, nil
	}
	return s.Next().CreateVirtualNetworkVirtualNetworkRef(ctx, request)
}

func (s *BaseService) DeleteVirtualNetworkVirtualNetworkRef(ctx context.Context, request *DeleteVirtualNetworkVirtualNetworkRefRequest) (*DeleteVirtualNetworkVirtualNetworkRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualNetworkVirtualNetworkRefResponse{
			ID:                              request.ID,
			VirtualNetworkVirtualNetworkRef: request.GetVirtualNetworkVirtualNetworkRef(),
		}, nil
	}
	return s.Next().DeleteVirtualNetworkVirtualNetworkRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualNetworkVirtualNetworkRef(ctx context.Context, request *CreateVirtualNetworkVirtualNetworkRefRequest) (*CreateVirtualNetworkVirtualNetworkRefResponse, error) {
	refField := models.VirtualNetworkFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.AddVirtualNetworkRef(request.VirtualNetworkVirtualNetworkRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualNetworkVirtualNetworkRefResponse{
		ID:                              request.ID,
		VirtualNetworkVirtualNetworkRef: request.GetVirtualNetworkVirtualNetworkRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualNetworkVirtualNetworkRef(ctx context.Context, request *DeleteVirtualNetworkVirtualNetworkRefRequest) (*DeleteVirtualNetworkVirtualNetworkRefResponse, error) {
	refField := models.VirtualNetworkFieldVirtualNetworkRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualNetwork(ctx, &GetVirtualNetworkRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualNetwork
		obj.RemoveVirtualNetworkRef(request.VirtualNetworkVirtualNetworkRef)

		_, err = s.BaseService.UpdateVirtualNetwork(ctx, &UpdateVirtualNetworkRequest{
			VirtualNetwork: obj,
			FieldMask:      types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualNetworkVirtualNetworkRefResponse{
		ID:                              request.ID,
		VirtualNetworkVirtualNetworkRef: request.GetVirtualNetworkVirtualNetworkRef(),
	}, nil
}

func (s *EventProducerService) CreateVirtualNetwork(ctx context.Context, request *CreateVirtualNetworkRequest) (*CreateVirtualNetworkResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateVirtualNetworkRequest{
				CreateVirtualNetworkRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualNetwork(ctx, request)
}
func (s *EventProducerService) UpdateVirtualNetwork(ctx context.Context, request *UpdateVirtualNetworkRequest) (*UpdateVirtualNetworkResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateVirtualNetworkRequest{
				UpdateVirtualNetworkRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateVirtualNetwork(ctx, request)
}
func (s *EventProducerService) DeleteVirtualNetwork(ctx context.Context, request *DeleteVirtualNetworkRequest) (*DeleteVirtualNetworkResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteVirtualNetworkRequest{
				DeleteVirtualNetworkRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualNetwork(ctx, request)
}

func (s *EventProducerService) CreateVirtualNetworkQosConfigRef(ctx context.Context, request *CreateVirtualNetworkQosConfigRefRequest) (*CreateVirtualNetworkQosConfigRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualNetworkQosConfigRefRequest{
			CreateVirtualNetworkQosConfigRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualNetworkQosConfigRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualNetworkQosConfigRef(ctx context.Context, request *DeleteVirtualNetworkQosConfigRefRequest) (*DeleteVirtualNetworkQosConfigRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualNetworkQosConfigRefRequest{
			DeleteVirtualNetworkQosConfigRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualNetworkQosConfigRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualNetworkSecurityLoggingObjectRef(ctx context.Context, request *CreateVirtualNetworkSecurityLoggingObjectRefRequest) (*CreateVirtualNetworkSecurityLoggingObjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualNetworkSecurityLoggingObjectRefRequest{
			CreateVirtualNetworkSecurityLoggingObjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualNetworkSecurityLoggingObjectRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualNetworkSecurityLoggingObjectRef(ctx context.Context, request *DeleteVirtualNetworkSecurityLoggingObjectRefRequest) (*DeleteVirtualNetworkSecurityLoggingObjectRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualNetworkSecurityLoggingObjectRefRequest{
			DeleteVirtualNetworkSecurityLoggingObjectRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualNetworkSecurityLoggingObjectRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualNetworkTagRef(ctx context.Context, request *CreateVirtualNetworkTagRefRequest) (*CreateVirtualNetworkTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualNetworkTagRefRequest{
			CreateVirtualNetworkTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualNetworkTagRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualNetworkTagRef(ctx context.Context, request *DeleteVirtualNetworkTagRefRequest) (*DeleteVirtualNetworkTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualNetworkTagRefRequest{
			DeleteVirtualNetworkTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualNetworkTagRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualNetworkIntentMapRef(ctx context.Context, request *CreateVirtualNetworkIntentMapRefRequest) (*CreateVirtualNetworkIntentMapRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualNetworkIntentMapRefRequest{
			CreateVirtualNetworkIntentMapRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualNetworkIntentMapRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualNetworkIntentMapRef(ctx context.Context, request *DeleteVirtualNetworkIntentMapRefRequest) (*DeleteVirtualNetworkIntentMapRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualNetworkIntentMapRefRequest{
			DeleteVirtualNetworkIntentMapRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualNetworkIntentMapRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualNetworkMulticastPolicyRef(ctx context.Context, request *CreateVirtualNetworkMulticastPolicyRefRequest) (*CreateVirtualNetworkMulticastPolicyRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualNetworkMulticastPolicyRefRequest{
			CreateVirtualNetworkMulticastPolicyRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualNetworkMulticastPolicyRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualNetworkMulticastPolicyRef(ctx context.Context, request *DeleteVirtualNetworkMulticastPolicyRefRequest) (*DeleteVirtualNetworkMulticastPolicyRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualNetworkMulticastPolicyRefRequest{
			DeleteVirtualNetworkMulticastPolicyRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualNetworkMulticastPolicyRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualNetworkNetworkIpamRef(ctx context.Context, request *CreateVirtualNetworkNetworkIpamRefRequest) (*CreateVirtualNetworkNetworkIpamRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualNetworkNetworkIpamRefRequest{
			CreateVirtualNetworkNetworkIpamRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualNetworkNetworkIpamRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualNetworkNetworkIpamRef(ctx context.Context, request *DeleteVirtualNetworkNetworkIpamRefRequest) (*DeleteVirtualNetworkNetworkIpamRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualNetworkNetworkIpamRefRequest{
			DeleteVirtualNetworkNetworkIpamRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualNetworkNetworkIpamRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualNetworkRouteTableRef(ctx context.Context, request *CreateVirtualNetworkRouteTableRefRequest) (*CreateVirtualNetworkRouteTableRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualNetworkRouteTableRefRequest{
			CreateVirtualNetworkRouteTableRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualNetworkRouteTableRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualNetworkRouteTableRef(ctx context.Context, request *DeleteVirtualNetworkRouteTableRefRequest) (*DeleteVirtualNetworkRouteTableRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualNetworkRouteTableRefRequest{
			DeleteVirtualNetworkRouteTableRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualNetworkRouteTableRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualNetworkBGPVPNRef(ctx context.Context, request *CreateVirtualNetworkBGPVPNRefRequest) (*CreateVirtualNetworkBGPVPNRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualNetworkBGPVPNRefRequest{
			CreateVirtualNetworkBGPVPNRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualNetworkBGPVPNRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualNetworkBGPVPNRef(ctx context.Context, request *DeleteVirtualNetworkBGPVPNRefRequest) (*DeleteVirtualNetworkBGPVPNRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualNetworkBGPVPNRefRequest{
			DeleteVirtualNetworkBGPVPNRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualNetworkBGPVPNRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualNetworkRoutingPolicyRef(ctx context.Context, request *CreateVirtualNetworkRoutingPolicyRefRequest) (*CreateVirtualNetworkRoutingPolicyRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualNetworkRoutingPolicyRefRequest{
			CreateVirtualNetworkRoutingPolicyRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualNetworkRoutingPolicyRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualNetworkRoutingPolicyRef(ctx context.Context, request *DeleteVirtualNetworkRoutingPolicyRefRequest) (*DeleteVirtualNetworkRoutingPolicyRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualNetworkRoutingPolicyRefRequest{
			DeleteVirtualNetworkRoutingPolicyRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualNetworkRoutingPolicyRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualNetworkNetworkPolicyRef(ctx context.Context, request *CreateVirtualNetworkNetworkPolicyRefRequest) (*CreateVirtualNetworkNetworkPolicyRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualNetworkNetworkPolicyRefRequest{
			CreateVirtualNetworkNetworkPolicyRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualNetworkNetworkPolicyRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualNetworkNetworkPolicyRef(ctx context.Context, request *DeleteVirtualNetworkNetworkPolicyRefRequest) (*DeleteVirtualNetworkNetworkPolicyRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualNetworkNetworkPolicyRefRequest{
			DeleteVirtualNetworkNetworkPolicyRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualNetworkNetworkPolicyRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualNetworkVirtualNetworkRef(ctx context.Context, request *CreateVirtualNetworkVirtualNetworkRefRequest) (*CreateVirtualNetworkVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualNetworkVirtualNetworkRefRequest{
			CreateVirtualNetworkVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualNetworkVirtualNetworkRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualNetworkVirtualNetworkRef(ctx context.Context, request *DeleteVirtualNetworkVirtualNetworkRefRequest) (*DeleteVirtualNetworkVirtualNetworkRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualNetworkVirtualNetworkRefRequest{
			DeleteVirtualNetworkVirtualNetworkRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualNetworkVirtualNetworkRef(ctx, request)
}

func (e *Event_CreateVirtualNetworkRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualNetworkRequest
	model := request.VirtualNetwork
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetVirtualNetwork(ctx,
			&GetVirtualNetworkRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateVirtualNetwork(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateVirtualNetworkRequest{
			CreateVirtualNetworkRequest: &CreateVirtualNetworkRequest{
				VirtualNetwork: response.GetVirtualNetwork(),
			},
		},
	}, nil
}

func (e *Event_CreateVirtualNetworkRequest) ToUpdateEvent() *Event {
	request := e.CreateVirtualNetworkRequest
	model := request.VirtualNetwork
	return &Event{
		Request: &Event_UpdateVirtualNetworkRequest{
			UpdateVirtualNetworkRequest: &UpdateVirtualNetworkRequest{
				VirtualNetwork: model,
				FieldMask:      request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateVirtualNetworkRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateVirtualNetworkRequest
	response, err := service.UpdateVirtualNetwork(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateVirtualNetworkRequest{
			UpdateVirtualNetworkRequest: &UpdateVirtualNetworkRequest{
				VirtualNetwork: response.GetVirtualNetwork(),
			},
		},
	}, nil
}

func (e *Event_UpdateVirtualNetworkRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteVirtualNetworkRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualNetworkRequest
	_, err := service.DeleteVirtualNetwork(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteVirtualNetworkRequest{
			DeleteVirtualNetworkRequest: &DeleteVirtualNetworkRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateVirtualNetworkBGPVPNRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualNetworkBGPVPNRefRequest
	if _, err := service.CreateVirtualNetworkBGPVPNRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualNetworkBGPVPNRefRequest{
		CreateVirtualNetworkBGPVPNRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualNetworkBGPVPNRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualNetworkBGPVPNRefRequest
	if _, err := service.DeleteVirtualNetworkBGPVPNRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualNetworkBGPVPNRefRequest{
		DeleteVirtualNetworkBGPVPNRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualNetworkRoutingPolicyRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualNetworkRoutingPolicyRefRequest
	if _, err := service.CreateVirtualNetworkRoutingPolicyRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualNetworkRoutingPolicyRefRequest{
		CreateVirtualNetworkRoutingPolicyRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualNetworkRoutingPolicyRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualNetworkRoutingPolicyRefRequest
	if _, err := service.DeleteVirtualNetworkRoutingPolicyRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualNetworkRoutingPolicyRefRequest{
		DeleteVirtualNetworkRoutingPolicyRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualNetworkNetworkPolicyRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualNetworkNetworkPolicyRefRequest
	if _, err := service.CreateVirtualNetworkNetworkPolicyRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualNetworkNetworkPolicyRefRequest{
		CreateVirtualNetworkNetworkPolicyRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualNetworkNetworkPolicyRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualNetworkNetworkPolicyRefRequest
	if _, err := service.DeleteVirtualNetworkNetworkPolicyRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualNetworkNetworkPolicyRefRequest{
		DeleteVirtualNetworkNetworkPolicyRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualNetworkVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualNetworkVirtualNetworkRefRequest
	if _, err := service.CreateVirtualNetworkVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualNetworkVirtualNetworkRefRequest{
		CreateVirtualNetworkVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualNetworkVirtualNetworkRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualNetworkVirtualNetworkRefRequest
	if _, err := service.DeleteVirtualNetworkVirtualNetworkRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualNetworkVirtualNetworkRefRequest{
		DeleteVirtualNetworkVirtualNetworkRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualNetworkQosConfigRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualNetworkQosConfigRefRequest
	if _, err := service.CreateVirtualNetworkQosConfigRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualNetworkQosConfigRefRequest{
		CreateVirtualNetworkQosConfigRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualNetworkQosConfigRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualNetworkQosConfigRefRequest
	if _, err := service.DeleteVirtualNetworkQosConfigRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualNetworkQosConfigRefRequest{
		DeleteVirtualNetworkQosConfigRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualNetworkSecurityLoggingObjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualNetworkSecurityLoggingObjectRefRequest
	if _, err := service.CreateVirtualNetworkSecurityLoggingObjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualNetworkSecurityLoggingObjectRefRequest{
		CreateVirtualNetworkSecurityLoggingObjectRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualNetworkSecurityLoggingObjectRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualNetworkSecurityLoggingObjectRefRequest
	if _, err := service.DeleteVirtualNetworkSecurityLoggingObjectRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualNetworkSecurityLoggingObjectRefRequest{
		DeleteVirtualNetworkSecurityLoggingObjectRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualNetworkTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualNetworkTagRefRequest
	if _, err := service.CreateVirtualNetworkTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualNetworkTagRefRequest{
		CreateVirtualNetworkTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualNetworkTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualNetworkTagRefRequest
	if _, err := service.DeleteVirtualNetworkTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualNetworkTagRefRequest{
		DeleteVirtualNetworkTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualNetworkIntentMapRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualNetworkIntentMapRefRequest
	if _, err := service.CreateVirtualNetworkIntentMapRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualNetworkIntentMapRefRequest{
		CreateVirtualNetworkIntentMapRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualNetworkIntentMapRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualNetworkIntentMapRefRequest
	if _, err := service.DeleteVirtualNetworkIntentMapRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualNetworkIntentMapRefRequest{
		DeleteVirtualNetworkIntentMapRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualNetworkMulticastPolicyRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualNetworkMulticastPolicyRefRequest
	if _, err := service.CreateVirtualNetworkMulticastPolicyRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualNetworkMulticastPolicyRefRequest{
		CreateVirtualNetworkMulticastPolicyRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualNetworkMulticastPolicyRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualNetworkMulticastPolicyRefRequest
	if _, err := service.DeleteVirtualNetworkMulticastPolicyRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualNetworkMulticastPolicyRefRequest{
		DeleteVirtualNetworkMulticastPolicyRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualNetworkNetworkIpamRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualNetworkNetworkIpamRefRequest
	if _, err := service.CreateVirtualNetworkNetworkIpamRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualNetworkNetworkIpamRefRequest{
		CreateVirtualNetworkNetworkIpamRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualNetworkNetworkIpamRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualNetworkNetworkIpamRefRequest
	if _, err := service.DeleteVirtualNetworkNetworkIpamRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualNetworkNetworkIpamRefRequest{
		DeleteVirtualNetworkNetworkIpamRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualNetworkRouteTableRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualNetworkRouteTableRefRequest
	if _, err := service.CreateVirtualNetworkRouteTableRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualNetworkRouteTableRefRequest{
		CreateVirtualNetworkRouteTableRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualNetworkRouteTableRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualNetworkRouteTableRefRequest
	if _, err := service.DeleteVirtualNetworkRouteTableRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualNetworkRouteTableRefRequest{
		DeleteVirtualNetworkRouteTableRefRequest: request,
	}}, nil
}

type VirtualPortGroup = models.VirtualPortGroup

func (s *BaseService) CreateVirtualPortGroup(ctx context.Context, request *CreateVirtualPortGroupRequest) (*CreateVirtualPortGroupResponse, error) {
	if s.next == nil {
		return &CreateVirtualPortGroupResponse{
			VirtualPortGroup: request.GetVirtualPortGroup(),
		}, nil
	}
	return s.Next().CreateVirtualPortGroup(ctx, request)
}
func (s *BaseService) UpdateVirtualPortGroup(ctx context.Context, request *UpdateVirtualPortGroupRequest) (*UpdateVirtualPortGroupResponse, error) {
	if s.next == nil {
		return &UpdateVirtualPortGroupResponse{
			VirtualPortGroup: request.GetVirtualPortGroup(),
		}, nil
	}
	return s.Next().UpdateVirtualPortGroup(ctx, request)
}
func (s *BaseService) DeleteVirtualPortGroup(ctx context.Context, request *DeleteVirtualPortGroupRequest) (*DeleteVirtualPortGroupResponse, error) {
	if s.next == nil {
		return &DeleteVirtualPortGroupResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteVirtualPortGroup(ctx, request)
}
func (s *BaseService) GetVirtualPortGroup(ctx context.Context, request *GetVirtualPortGroupRequest) (*GetVirtualPortGroupResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetVirtualPortGroup(ctx, request)
}
func (s *BaseService) ListVirtualPortGroup(ctx context.Context, request *ListVirtualPortGroupRequest) (*ListVirtualPortGroupResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListVirtualPortGroup(ctx, request)
}

func (s *BaseService) CreateVirtualPortGroupPhysicalInterfaceRef(ctx context.Context, request *CreateVirtualPortGroupPhysicalInterfaceRefRequest) (*CreateVirtualPortGroupPhysicalInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualPortGroupPhysicalInterfaceRefResponse{
			ID:                                   request.ID,
			VirtualPortGroupPhysicalInterfaceRef: request.GetVirtualPortGroupPhysicalInterfaceRef(),
		}, nil
	}
	return s.Next().CreateVirtualPortGroupPhysicalInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteVirtualPortGroupPhysicalInterfaceRef(ctx context.Context, request *DeleteVirtualPortGroupPhysicalInterfaceRefRequest) (*DeleteVirtualPortGroupPhysicalInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualPortGroupPhysicalInterfaceRefResponse{
			ID:                                   request.ID,
			VirtualPortGroupPhysicalInterfaceRef: request.GetVirtualPortGroupPhysicalInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteVirtualPortGroupPhysicalInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualPortGroupPhysicalInterfaceRef(ctx context.Context, request *CreateVirtualPortGroupPhysicalInterfaceRefRequest) (*CreateVirtualPortGroupPhysicalInterfaceRefResponse, error) {
	refField := models.VirtualPortGroupFieldPhysicalInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualPortGroup(ctx, &GetVirtualPortGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualPortGroup
		obj.AddPhysicalInterfaceRef(request.VirtualPortGroupPhysicalInterfaceRef)

		_, err = s.BaseService.UpdateVirtualPortGroup(ctx, &UpdateVirtualPortGroupRequest{
			VirtualPortGroup: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualPortGroupPhysicalInterfaceRefResponse{
		ID:                                   request.ID,
		VirtualPortGroupPhysicalInterfaceRef: request.GetVirtualPortGroupPhysicalInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualPortGroupPhysicalInterfaceRef(ctx context.Context, request *DeleteVirtualPortGroupPhysicalInterfaceRefRequest) (*DeleteVirtualPortGroupPhysicalInterfaceRefResponse, error) {
	refField := models.VirtualPortGroupFieldPhysicalInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualPortGroup(ctx, &GetVirtualPortGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualPortGroup
		obj.RemovePhysicalInterfaceRef(request.VirtualPortGroupPhysicalInterfaceRef)

		_, err = s.BaseService.UpdateVirtualPortGroup(ctx, &UpdateVirtualPortGroupRequest{
			VirtualPortGroup: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualPortGroupPhysicalInterfaceRefResponse{
		ID:                                   request.ID,
		VirtualPortGroupPhysicalInterfaceRef: request.GetVirtualPortGroupPhysicalInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateVirtualPortGroupPortProfileRef(ctx context.Context, request *CreateVirtualPortGroupPortProfileRefRequest) (*CreateVirtualPortGroupPortProfileRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualPortGroupPortProfileRefResponse{
			ID:                             request.ID,
			VirtualPortGroupPortProfileRef: request.GetVirtualPortGroupPortProfileRef(),
		}, nil
	}
	return s.Next().CreateVirtualPortGroupPortProfileRef(ctx, request)
}

func (s *BaseService) DeleteVirtualPortGroupPortProfileRef(ctx context.Context, request *DeleteVirtualPortGroupPortProfileRefRequest) (*DeleteVirtualPortGroupPortProfileRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualPortGroupPortProfileRefResponse{
			ID:                             request.ID,
			VirtualPortGroupPortProfileRef: request.GetVirtualPortGroupPortProfileRef(),
		}, nil
	}
	return s.Next().DeleteVirtualPortGroupPortProfileRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualPortGroupPortProfileRef(ctx context.Context, request *CreateVirtualPortGroupPortProfileRefRequest) (*CreateVirtualPortGroupPortProfileRefResponse, error) {
	refField := models.VirtualPortGroupFieldPortProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualPortGroup(ctx, &GetVirtualPortGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualPortGroup
		obj.AddPortProfileRef(request.VirtualPortGroupPortProfileRef)

		_, err = s.BaseService.UpdateVirtualPortGroup(ctx, &UpdateVirtualPortGroupRequest{
			VirtualPortGroup: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualPortGroupPortProfileRefResponse{
		ID:                             request.ID,
		VirtualPortGroupPortProfileRef: request.GetVirtualPortGroupPortProfileRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualPortGroupPortProfileRef(ctx context.Context, request *DeleteVirtualPortGroupPortProfileRefRequest) (*DeleteVirtualPortGroupPortProfileRefResponse, error) {
	refField := models.VirtualPortGroupFieldPortProfileRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualPortGroup(ctx, &GetVirtualPortGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualPortGroup
		obj.RemovePortProfileRef(request.VirtualPortGroupPortProfileRef)

		_, err = s.BaseService.UpdateVirtualPortGroup(ctx, &UpdateVirtualPortGroupRequest{
			VirtualPortGroup: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualPortGroupPortProfileRefResponse{
		ID:                             request.ID,
		VirtualPortGroupPortProfileRef: request.GetVirtualPortGroupPortProfileRef(),
	}, nil
}

func (s *BaseService) CreateVirtualPortGroupSecurityGroupRef(ctx context.Context, request *CreateVirtualPortGroupSecurityGroupRefRequest) (*CreateVirtualPortGroupSecurityGroupRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualPortGroupSecurityGroupRefResponse{
			ID:                               request.ID,
			VirtualPortGroupSecurityGroupRef: request.GetVirtualPortGroupSecurityGroupRef(),
		}, nil
	}
	return s.Next().CreateVirtualPortGroupSecurityGroupRef(ctx, request)
}

func (s *BaseService) DeleteVirtualPortGroupSecurityGroupRef(ctx context.Context, request *DeleteVirtualPortGroupSecurityGroupRefRequest) (*DeleteVirtualPortGroupSecurityGroupRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualPortGroupSecurityGroupRefResponse{
			ID:                               request.ID,
			VirtualPortGroupSecurityGroupRef: request.GetVirtualPortGroupSecurityGroupRef(),
		}, nil
	}
	return s.Next().DeleteVirtualPortGroupSecurityGroupRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualPortGroupSecurityGroupRef(ctx context.Context, request *CreateVirtualPortGroupSecurityGroupRefRequest) (*CreateVirtualPortGroupSecurityGroupRefResponse, error) {
	refField := models.VirtualPortGroupFieldSecurityGroupRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualPortGroup(ctx, &GetVirtualPortGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualPortGroup
		obj.AddSecurityGroupRef(request.VirtualPortGroupSecurityGroupRef)

		_, err = s.BaseService.UpdateVirtualPortGroup(ctx, &UpdateVirtualPortGroupRequest{
			VirtualPortGroup: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualPortGroupSecurityGroupRefResponse{
		ID:                               request.ID,
		VirtualPortGroupSecurityGroupRef: request.GetVirtualPortGroupSecurityGroupRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualPortGroupSecurityGroupRef(ctx context.Context, request *DeleteVirtualPortGroupSecurityGroupRefRequest) (*DeleteVirtualPortGroupSecurityGroupRefResponse, error) {
	refField := models.VirtualPortGroupFieldSecurityGroupRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualPortGroup(ctx, &GetVirtualPortGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualPortGroup
		obj.RemoveSecurityGroupRef(request.VirtualPortGroupSecurityGroupRef)

		_, err = s.BaseService.UpdateVirtualPortGroup(ctx, &UpdateVirtualPortGroupRequest{
			VirtualPortGroup: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualPortGroupSecurityGroupRefResponse{
		ID:                               request.ID,
		VirtualPortGroupSecurityGroupRef: request.GetVirtualPortGroupSecurityGroupRef(),
	}, nil
}

func (s *BaseService) CreateVirtualPortGroupVirtualMachineInterfaceRef(ctx context.Context, request *CreateVirtualPortGroupVirtualMachineInterfaceRefRequest) (*CreateVirtualPortGroupVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualPortGroupVirtualMachineInterfaceRefResponse{
			ID: request.ID,
			VirtualPortGroupVirtualMachineInterfaceRef: request.GetVirtualPortGroupVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().CreateVirtualPortGroupVirtualMachineInterfaceRef(ctx, request)
}

func (s *BaseService) DeleteVirtualPortGroupVirtualMachineInterfaceRef(ctx context.Context, request *DeleteVirtualPortGroupVirtualMachineInterfaceRefRequest) (*DeleteVirtualPortGroupVirtualMachineInterfaceRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualPortGroupVirtualMachineInterfaceRefResponse{
			ID: request.ID,
			VirtualPortGroupVirtualMachineInterfaceRef: request.GetVirtualPortGroupVirtualMachineInterfaceRef(),
		}, nil
	}
	return s.Next().DeleteVirtualPortGroupVirtualMachineInterfaceRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualPortGroupVirtualMachineInterfaceRef(ctx context.Context, request *CreateVirtualPortGroupVirtualMachineInterfaceRefRequest) (*CreateVirtualPortGroupVirtualMachineInterfaceRefResponse, error) {
	refField := models.VirtualPortGroupFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualPortGroup(ctx, &GetVirtualPortGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualPortGroup
		obj.AddVirtualMachineInterfaceRef(request.VirtualPortGroupVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateVirtualPortGroup(ctx, &UpdateVirtualPortGroupRequest{
			VirtualPortGroup: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualPortGroupVirtualMachineInterfaceRefResponse{
		ID: request.ID,
		VirtualPortGroupVirtualMachineInterfaceRef: request.GetVirtualPortGroupVirtualMachineInterfaceRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualPortGroupVirtualMachineInterfaceRef(ctx context.Context, request *DeleteVirtualPortGroupVirtualMachineInterfaceRefRequest) (*DeleteVirtualPortGroupVirtualMachineInterfaceRefResponse, error) {
	refField := models.VirtualPortGroupFieldVirtualMachineInterfaceRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualPortGroup(ctx, &GetVirtualPortGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualPortGroup
		obj.RemoveVirtualMachineInterfaceRef(request.VirtualPortGroupVirtualMachineInterfaceRef)

		_, err = s.BaseService.UpdateVirtualPortGroup(ctx, &UpdateVirtualPortGroupRequest{
			VirtualPortGroup: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualPortGroupVirtualMachineInterfaceRefResponse{
		ID: request.ID,
		VirtualPortGroupVirtualMachineInterfaceRef: request.GetVirtualPortGroupVirtualMachineInterfaceRef(),
	}, nil
}

func (s *BaseService) CreateVirtualPortGroupTagRef(ctx context.Context, request *CreateVirtualPortGroupTagRefRequest) (*CreateVirtualPortGroupTagRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualPortGroupTagRefResponse{
			ID:                     request.ID,
			VirtualPortGroupTagRef: request.GetVirtualPortGroupTagRef(),
		}, nil
	}
	return s.Next().CreateVirtualPortGroupTagRef(ctx, request)
}

func (s *BaseService) DeleteVirtualPortGroupTagRef(ctx context.Context, request *DeleteVirtualPortGroupTagRefRequest) (*DeleteVirtualPortGroupTagRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualPortGroupTagRefResponse{
			ID:                     request.ID,
			VirtualPortGroupTagRef: request.GetVirtualPortGroupTagRef(),
		}, nil
	}
	return s.Next().DeleteVirtualPortGroupTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualPortGroupTagRef(ctx context.Context, request *CreateVirtualPortGroupTagRefRequest) (*CreateVirtualPortGroupTagRefResponse, error) {
	refField := models.VirtualPortGroupFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualPortGroup(ctx, &GetVirtualPortGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualPortGroup
		obj.AddTagRef(request.VirtualPortGroupTagRef)

		_, err = s.BaseService.UpdateVirtualPortGroup(ctx, &UpdateVirtualPortGroupRequest{
			VirtualPortGroup: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualPortGroupTagRefResponse{
		ID:                     request.ID,
		VirtualPortGroupTagRef: request.GetVirtualPortGroupTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualPortGroupTagRef(ctx context.Context, request *DeleteVirtualPortGroupTagRefRequest) (*DeleteVirtualPortGroupTagRefResponse, error) {
	refField := models.VirtualPortGroupFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualPortGroup(ctx, &GetVirtualPortGroupRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualPortGroup
		obj.RemoveTagRef(request.VirtualPortGroupTagRef)

		_, err = s.BaseService.UpdateVirtualPortGroup(ctx, &UpdateVirtualPortGroupRequest{
			VirtualPortGroup: obj,
			FieldMask:        types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualPortGroupTagRefResponse{
		ID:                     request.ID,
		VirtualPortGroupTagRef: request.GetVirtualPortGroupTagRef(),
	}, nil
}

func (s *EventProducerService) CreateVirtualPortGroup(ctx context.Context, request *CreateVirtualPortGroupRequest) (*CreateVirtualPortGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateVirtualPortGroupRequest{
				CreateVirtualPortGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualPortGroup(ctx, request)
}
func (s *EventProducerService) UpdateVirtualPortGroup(ctx context.Context, request *UpdateVirtualPortGroupRequest) (*UpdateVirtualPortGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateVirtualPortGroupRequest{
				UpdateVirtualPortGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateVirtualPortGroup(ctx, request)
}
func (s *EventProducerService) DeleteVirtualPortGroup(ctx context.Context, request *DeleteVirtualPortGroupRequest) (*DeleteVirtualPortGroupResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteVirtualPortGroupRequest{
				DeleteVirtualPortGroupRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualPortGroup(ctx, request)
}

func (s *EventProducerService) CreateVirtualPortGroupPhysicalInterfaceRef(ctx context.Context, request *CreateVirtualPortGroupPhysicalInterfaceRefRequest) (*CreateVirtualPortGroupPhysicalInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualPortGroupPhysicalInterfaceRefRequest{
			CreateVirtualPortGroupPhysicalInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualPortGroupPhysicalInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualPortGroupPhysicalInterfaceRef(ctx context.Context, request *DeleteVirtualPortGroupPhysicalInterfaceRefRequest) (*DeleteVirtualPortGroupPhysicalInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualPortGroupPhysicalInterfaceRefRequest{
			DeleteVirtualPortGroupPhysicalInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualPortGroupPhysicalInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualPortGroupPortProfileRef(ctx context.Context, request *CreateVirtualPortGroupPortProfileRefRequest) (*CreateVirtualPortGroupPortProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualPortGroupPortProfileRefRequest{
			CreateVirtualPortGroupPortProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualPortGroupPortProfileRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualPortGroupPortProfileRef(ctx context.Context, request *DeleteVirtualPortGroupPortProfileRefRequest) (*DeleteVirtualPortGroupPortProfileRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualPortGroupPortProfileRefRequest{
			DeleteVirtualPortGroupPortProfileRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualPortGroupPortProfileRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualPortGroupSecurityGroupRef(ctx context.Context, request *CreateVirtualPortGroupSecurityGroupRefRequest) (*CreateVirtualPortGroupSecurityGroupRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualPortGroupSecurityGroupRefRequest{
			CreateVirtualPortGroupSecurityGroupRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualPortGroupSecurityGroupRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualPortGroupSecurityGroupRef(ctx context.Context, request *DeleteVirtualPortGroupSecurityGroupRefRequest) (*DeleteVirtualPortGroupSecurityGroupRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualPortGroupSecurityGroupRefRequest{
			DeleteVirtualPortGroupSecurityGroupRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualPortGroupSecurityGroupRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualPortGroupVirtualMachineInterfaceRef(ctx context.Context, request *CreateVirtualPortGroupVirtualMachineInterfaceRefRequest) (*CreateVirtualPortGroupVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualPortGroupVirtualMachineInterfaceRefRequest{
			CreateVirtualPortGroupVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualPortGroupVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualPortGroupVirtualMachineInterfaceRef(ctx context.Context, request *DeleteVirtualPortGroupVirtualMachineInterfaceRefRequest) (*DeleteVirtualPortGroupVirtualMachineInterfaceRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualPortGroupVirtualMachineInterfaceRefRequest{
			DeleteVirtualPortGroupVirtualMachineInterfaceRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualPortGroupVirtualMachineInterfaceRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualPortGroupTagRef(ctx context.Context, request *CreateVirtualPortGroupTagRefRequest) (*CreateVirtualPortGroupTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualPortGroupTagRefRequest{
			CreateVirtualPortGroupTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualPortGroupTagRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualPortGroupTagRef(ctx context.Context, request *DeleteVirtualPortGroupTagRefRequest) (*DeleteVirtualPortGroupTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualPortGroupTagRefRequest{
			DeleteVirtualPortGroupTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualPortGroupTagRef(ctx, request)
}

func (e *Event_CreateVirtualPortGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualPortGroupRequest
	model := request.VirtualPortGroup
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetVirtualPortGroup(ctx,
			&GetVirtualPortGroupRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateVirtualPortGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateVirtualPortGroupRequest{
			CreateVirtualPortGroupRequest: &CreateVirtualPortGroupRequest{
				VirtualPortGroup: response.GetVirtualPortGroup(),
			},
		},
	}, nil
}

func (e *Event_CreateVirtualPortGroupRequest) ToUpdateEvent() *Event {
	request := e.CreateVirtualPortGroupRequest
	model := request.VirtualPortGroup
	return &Event{
		Request: &Event_UpdateVirtualPortGroupRequest{
			UpdateVirtualPortGroupRequest: &UpdateVirtualPortGroupRequest{
				VirtualPortGroup: model,
				FieldMask:        request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateVirtualPortGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateVirtualPortGroupRequest
	response, err := service.UpdateVirtualPortGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateVirtualPortGroupRequest{
			UpdateVirtualPortGroupRequest: &UpdateVirtualPortGroupRequest{
				VirtualPortGroup: response.GetVirtualPortGroup(),
			},
		},
	}, nil
}

func (e *Event_UpdateVirtualPortGroupRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteVirtualPortGroupRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualPortGroupRequest
	_, err := service.DeleteVirtualPortGroup(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteVirtualPortGroupRequest{
			DeleteVirtualPortGroupRequest: &DeleteVirtualPortGroupRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateVirtualPortGroupTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualPortGroupTagRefRequest
	if _, err := service.CreateVirtualPortGroupTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualPortGroupTagRefRequest{
		CreateVirtualPortGroupTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualPortGroupTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualPortGroupTagRefRequest
	if _, err := service.DeleteVirtualPortGroupTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualPortGroupTagRefRequest{
		DeleteVirtualPortGroupTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualPortGroupPhysicalInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualPortGroupPhysicalInterfaceRefRequest
	if _, err := service.CreateVirtualPortGroupPhysicalInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualPortGroupPhysicalInterfaceRefRequest{
		CreateVirtualPortGroupPhysicalInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualPortGroupPhysicalInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualPortGroupPhysicalInterfaceRefRequest
	if _, err := service.DeleteVirtualPortGroupPhysicalInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualPortGroupPhysicalInterfaceRefRequest{
		DeleteVirtualPortGroupPhysicalInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualPortGroupPortProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualPortGroupPortProfileRefRequest
	if _, err := service.CreateVirtualPortGroupPortProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualPortGroupPortProfileRefRequest{
		CreateVirtualPortGroupPortProfileRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualPortGroupPortProfileRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualPortGroupPortProfileRefRequest
	if _, err := service.DeleteVirtualPortGroupPortProfileRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualPortGroupPortProfileRefRequest{
		DeleteVirtualPortGroupPortProfileRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualPortGroupSecurityGroupRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualPortGroupSecurityGroupRefRequest
	if _, err := service.CreateVirtualPortGroupSecurityGroupRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualPortGroupSecurityGroupRefRequest{
		CreateVirtualPortGroupSecurityGroupRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualPortGroupSecurityGroupRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualPortGroupSecurityGroupRefRequest
	if _, err := service.DeleteVirtualPortGroupSecurityGroupRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualPortGroupSecurityGroupRefRequest{
		DeleteVirtualPortGroupSecurityGroupRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualPortGroupVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualPortGroupVirtualMachineInterfaceRefRequest
	if _, err := service.CreateVirtualPortGroupVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualPortGroupVirtualMachineInterfaceRefRequest{
		CreateVirtualPortGroupVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualPortGroupVirtualMachineInterfaceRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualPortGroupVirtualMachineInterfaceRefRequest
	if _, err := service.DeleteVirtualPortGroupVirtualMachineInterfaceRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualPortGroupVirtualMachineInterfaceRefRequest{
		DeleteVirtualPortGroupVirtualMachineInterfaceRefRequest: request,
	}}, nil
}

type VirtualRouter = models.VirtualRouter

func (s *BaseService) CreateVirtualRouter(ctx context.Context, request *CreateVirtualRouterRequest) (*CreateVirtualRouterResponse, error) {
	if s.next == nil {
		return &CreateVirtualRouterResponse{
			VirtualRouter: request.GetVirtualRouter(),
		}, nil
	}
	return s.Next().CreateVirtualRouter(ctx, request)
}
func (s *BaseService) UpdateVirtualRouter(ctx context.Context, request *UpdateVirtualRouterRequest) (*UpdateVirtualRouterResponse, error) {
	if s.next == nil {
		return &UpdateVirtualRouterResponse{
			VirtualRouter: request.GetVirtualRouter(),
		}, nil
	}
	return s.Next().UpdateVirtualRouter(ctx, request)
}
func (s *BaseService) DeleteVirtualRouter(ctx context.Context, request *DeleteVirtualRouterRequest) (*DeleteVirtualRouterResponse, error) {
	if s.next == nil {
		return &DeleteVirtualRouterResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteVirtualRouter(ctx, request)
}
func (s *BaseService) GetVirtualRouter(ctx context.Context, request *GetVirtualRouterRequest) (*GetVirtualRouterResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetVirtualRouter(ctx, request)
}
func (s *BaseService) ListVirtualRouter(ctx context.Context, request *ListVirtualRouterRequest) (*ListVirtualRouterResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListVirtualRouter(ctx, request)
}

func (s *BaseService) CreateVirtualRouterSubClusterRef(ctx context.Context, request *CreateVirtualRouterSubClusterRefRequest) (*CreateVirtualRouterSubClusterRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualRouterSubClusterRefResponse{
			ID:                         request.ID,
			VirtualRouterSubClusterRef: request.GetVirtualRouterSubClusterRef(),
		}, nil
	}
	return s.Next().CreateVirtualRouterSubClusterRef(ctx, request)
}

func (s *BaseService) DeleteVirtualRouterSubClusterRef(ctx context.Context, request *DeleteVirtualRouterSubClusterRefRequest) (*DeleteVirtualRouterSubClusterRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualRouterSubClusterRefResponse{
			ID:                         request.ID,
			VirtualRouterSubClusterRef: request.GetVirtualRouterSubClusterRef(),
		}, nil
	}
	return s.Next().DeleteVirtualRouterSubClusterRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualRouterSubClusterRef(ctx context.Context, request *CreateVirtualRouterSubClusterRefRequest) (*CreateVirtualRouterSubClusterRefResponse, error) {
	refField := models.VirtualRouterFieldSubClusterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualRouter(ctx, &GetVirtualRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualRouter
		obj.AddSubClusterRef(request.VirtualRouterSubClusterRef)

		_, err = s.BaseService.UpdateVirtualRouter(ctx, &UpdateVirtualRouterRequest{
			VirtualRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualRouterSubClusterRefResponse{
		ID:                         request.ID,
		VirtualRouterSubClusterRef: request.GetVirtualRouterSubClusterRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualRouterSubClusterRef(ctx context.Context, request *DeleteVirtualRouterSubClusterRefRequest) (*DeleteVirtualRouterSubClusterRefResponse, error) {
	refField := models.VirtualRouterFieldSubClusterRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualRouter(ctx, &GetVirtualRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualRouter
		obj.RemoveSubClusterRef(request.VirtualRouterSubClusterRef)

		_, err = s.BaseService.UpdateVirtualRouter(ctx, &UpdateVirtualRouterRequest{
			VirtualRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualRouterSubClusterRefResponse{
		ID:                         request.ID,
		VirtualRouterSubClusterRef: request.GetVirtualRouterSubClusterRef(),
	}, nil
}

func (s *BaseService) CreateVirtualRouterVirtualMachineRef(ctx context.Context, request *CreateVirtualRouterVirtualMachineRefRequest) (*CreateVirtualRouterVirtualMachineRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualRouterVirtualMachineRefResponse{
			ID:                             request.ID,
			VirtualRouterVirtualMachineRef: request.GetVirtualRouterVirtualMachineRef(),
		}, nil
	}
	return s.Next().CreateVirtualRouterVirtualMachineRef(ctx, request)
}

func (s *BaseService) DeleteVirtualRouterVirtualMachineRef(ctx context.Context, request *DeleteVirtualRouterVirtualMachineRefRequest) (*DeleteVirtualRouterVirtualMachineRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualRouterVirtualMachineRefResponse{
			ID:                             request.ID,
			VirtualRouterVirtualMachineRef: request.GetVirtualRouterVirtualMachineRef(),
		}, nil
	}
	return s.Next().DeleteVirtualRouterVirtualMachineRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualRouterVirtualMachineRef(ctx context.Context, request *CreateVirtualRouterVirtualMachineRefRequest) (*CreateVirtualRouterVirtualMachineRefResponse, error) {
	refField := models.VirtualRouterFieldVirtualMachineRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualRouter(ctx, &GetVirtualRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualRouter
		obj.AddVirtualMachineRef(request.VirtualRouterVirtualMachineRef)

		_, err = s.BaseService.UpdateVirtualRouter(ctx, &UpdateVirtualRouterRequest{
			VirtualRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualRouterVirtualMachineRefResponse{
		ID:                             request.ID,
		VirtualRouterVirtualMachineRef: request.GetVirtualRouterVirtualMachineRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualRouterVirtualMachineRef(ctx context.Context, request *DeleteVirtualRouterVirtualMachineRefRequest) (*DeleteVirtualRouterVirtualMachineRefResponse, error) {
	refField := models.VirtualRouterFieldVirtualMachineRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualRouter(ctx, &GetVirtualRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualRouter
		obj.RemoveVirtualMachineRef(request.VirtualRouterVirtualMachineRef)

		_, err = s.BaseService.UpdateVirtualRouter(ctx, &UpdateVirtualRouterRequest{
			VirtualRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualRouterVirtualMachineRefResponse{
		ID:                             request.ID,
		VirtualRouterVirtualMachineRef: request.GetVirtualRouterVirtualMachineRef(),
	}, nil
}

func (s *BaseService) CreateVirtualRouterTagRef(ctx context.Context, request *CreateVirtualRouterTagRefRequest) (*CreateVirtualRouterTagRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualRouterTagRefResponse{
			ID:                  request.ID,
			VirtualRouterTagRef: request.GetVirtualRouterTagRef(),
		}, nil
	}
	return s.Next().CreateVirtualRouterTagRef(ctx, request)
}

func (s *BaseService) DeleteVirtualRouterTagRef(ctx context.Context, request *DeleteVirtualRouterTagRefRequest) (*DeleteVirtualRouterTagRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualRouterTagRefResponse{
			ID:                  request.ID,
			VirtualRouterTagRef: request.GetVirtualRouterTagRef(),
		}, nil
	}
	return s.Next().DeleteVirtualRouterTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualRouterTagRef(ctx context.Context, request *CreateVirtualRouterTagRefRequest) (*CreateVirtualRouterTagRefResponse, error) {
	refField := models.VirtualRouterFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualRouter(ctx, &GetVirtualRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualRouter
		obj.AddTagRef(request.VirtualRouterTagRef)

		_, err = s.BaseService.UpdateVirtualRouter(ctx, &UpdateVirtualRouterRequest{
			VirtualRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualRouterTagRefResponse{
		ID:                  request.ID,
		VirtualRouterTagRef: request.GetVirtualRouterTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualRouterTagRef(ctx context.Context, request *DeleteVirtualRouterTagRefRequest) (*DeleteVirtualRouterTagRefResponse, error) {
	refField := models.VirtualRouterFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualRouter(ctx, &GetVirtualRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualRouter
		obj.RemoveTagRef(request.VirtualRouterTagRef)

		_, err = s.BaseService.UpdateVirtualRouter(ctx, &UpdateVirtualRouterRequest{
			VirtualRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualRouterTagRefResponse{
		ID:                  request.ID,
		VirtualRouterTagRef: request.GetVirtualRouterTagRef(),
	}, nil
}

func (s *BaseService) CreateVirtualRouterNetworkIpamRef(ctx context.Context, request *CreateVirtualRouterNetworkIpamRefRequest) (*CreateVirtualRouterNetworkIpamRefResponse, error) {
	if s.next == nil {
		return &CreateVirtualRouterNetworkIpamRefResponse{
			ID:                          request.ID,
			VirtualRouterNetworkIpamRef: request.GetVirtualRouterNetworkIpamRef(),
		}, nil
	}
	return s.Next().CreateVirtualRouterNetworkIpamRef(ctx, request)
}

func (s *BaseService) DeleteVirtualRouterNetworkIpamRef(ctx context.Context, request *DeleteVirtualRouterNetworkIpamRefRequest) (*DeleteVirtualRouterNetworkIpamRefResponse, error) {
	if s.next == nil {
		return &DeleteVirtualRouterNetworkIpamRefResponse{
			ID:                          request.ID,
			VirtualRouterNetworkIpamRef: request.GetVirtualRouterNetworkIpamRef(),
		}, nil
	}
	return s.Next().DeleteVirtualRouterNetworkIpamRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateVirtualRouterNetworkIpamRef(ctx context.Context, request *CreateVirtualRouterNetworkIpamRefRequest) (*CreateVirtualRouterNetworkIpamRefResponse, error) {
	refField := models.VirtualRouterFieldNetworkIpamRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualRouter(ctx, &GetVirtualRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualRouter
		obj.AddNetworkIpamRef(request.VirtualRouterNetworkIpamRef)

		_, err = s.BaseService.UpdateVirtualRouter(ctx, &UpdateVirtualRouterRequest{
			VirtualRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateVirtualRouterNetworkIpamRefResponse{
		ID:                          request.ID,
		VirtualRouterNetworkIpamRef: request.GetVirtualRouterNetworkIpamRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteVirtualRouterNetworkIpamRef(ctx context.Context, request *DeleteVirtualRouterNetworkIpamRefRequest) (*DeleteVirtualRouterNetworkIpamRefResponse, error) {
	refField := models.VirtualRouterFieldNetworkIpamRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetVirtualRouter(ctx, &GetVirtualRouterRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.VirtualRouter
		obj.RemoveNetworkIpamRef(request.VirtualRouterNetworkIpamRef)

		_, err = s.BaseService.UpdateVirtualRouter(ctx, &UpdateVirtualRouterRequest{
			VirtualRouter: obj,
			FieldMask:     types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteVirtualRouterNetworkIpamRefResponse{
		ID:                          request.ID,
		VirtualRouterNetworkIpamRef: request.GetVirtualRouterNetworkIpamRef(),
	}, nil
}

func (s *EventProducerService) CreateVirtualRouter(ctx context.Context, request *CreateVirtualRouterRequest) (*CreateVirtualRouterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateVirtualRouterRequest{
				CreateVirtualRouterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualRouter(ctx, request)
}
func (s *EventProducerService) UpdateVirtualRouter(ctx context.Context, request *UpdateVirtualRouterRequest) (*UpdateVirtualRouterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateVirtualRouterRequest{
				UpdateVirtualRouterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateVirtualRouter(ctx, request)
}
func (s *EventProducerService) DeleteVirtualRouter(ctx context.Context, request *DeleteVirtualRouterRequest) (*DeleteVirtualRouterResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteVirtualRouterRequest{
				DeleteVirtualRouterRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualRouter(ctx, request)
}

func (s *EventProducerService) CreateVirtualRouterSubClusterRef(ctx context.Context, request *CreateVirtualRouterSubClusterRefRequest) (*CreateVirtualRouterSubClusterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualRouterSubClusterRefRequest{
			CreateVirtualRouterSubClusterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualRouterSubClusterRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualRouterSubClusterRef(ctx context.Context, request *DeleteVirtualRouterSubClusterRefRequest) (*DeleteVirtualRouterSubClusterRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualRouterSubClusterRefRequest{
			DeleteVirtualRouterSubClusterRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualRouterSubClusterRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualRouterVirtualMachineRef(ctx context.Context, request *CreateVirtualRouterVirtualMachineRefRequest) (*CreateVirtualRouterVirtualMachineRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualRouterVirtualMachineRefRequest{
			CreateVirtualRouterVirtualMachineRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualRouterVirtualMachineRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualRouterVirtualMachineRef(ctx context.Context, request *DeleteVirtualRouterVirtualMachineRefRequest) (*DeleteVirtualRouterVirtualMachineRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualRouterVirtualMachineRefRequest{
			DeleteVirtualRouterVirtualMachineRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualRouterVirtualMachineRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualRouterTagRef(ctx context.Context, request *CreateVirtualRouterTagRefRequest) (*CreateVirtualRouterTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualRouterTagRefRequest{
			CreateVirtualRouterTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualRouterTagRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualRouterTagRef(ctx context.Context, request *DeleteVirtualRouterTagRefRequest) (*DeleteVirtualRouterTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualRouterTagRefRequest{
			DeleteVirtualRouterTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualRouterTagRef(ctx, request)
}

func (s *EventProducerService) CreateVirtualRouterNetworkIpamRef(ctx context.Context, request *CreateVirtualRouterNetworkIpamRefRequest) (*CreateVirtualRouterNetworkIpamRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateVirtualRouterNetworkIpamRefRequest{
			CreateVirtualRouterNetworkIpamRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateVirtualRouterNetworkIpamRef(ctx, request)
}

func (s *EventProducerService) DeleteVirtualRouterNetworkIpamRef(ctx context.Context, request *DeleteVirtualRouterNetworkIpamRefRequest) (*DeleteVirtualRouterNetworkIpamRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteVirtualRouterNetworkIpamRefRequest{
			DeleteVirtualRouterNetworkIpamRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteVirtualRouterNetworkIpamRef(ctx, request)
}

func (e *Event_CreateVirtualRouterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualRouterRequest
	model := request.VirtualRouter
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetVirtualRouter(ctx,
			&GetVirtualRouterRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateVirtualRouter(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateVirtualRouterRequest{
			CreateVirtualRouterRequest: &CreateVirtualRouterRequest{
				VirtualRouter: response.GetVirtualRouter(),
			},
		},
	}, nil
}

func (e *Event_CreateVirtualRouterRequest) ToUpdateEvent() *Event {
	request := e.CreateVirtualRouterRequest
	model := request.VirtualRouter
	return &Event{
		Request: &Event_UpdateVirtualRouterRequest{
			UpdateVirtualRouterRequest: &UpdateVirtualRouterRequest{
				VirtualRouter: model,
				FieldMask:     request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateVirtualRouterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateVirtualRouterRequest
	response, err := service.UpdateVirtualRouter(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateVirtualRouterRequest{
			UpdateVirtualRouterRequest: &UpdateVirtualRouterRequest{
				VirtualRouter: response.GetVirtualRouter(),
			},
		},
	}, nil
}

func (e *Event_UpdateVirtualRouterRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteVirtualRouterRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualRouterRequest
	_, err := service.DeleteVirtualRouter(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteVirtualRouterRequest{
			DeleteVirtualRouterRequest: &DeleteVirtualRouterRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateVirtualRouterVirtualMachineRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualRouterVirtualMachineRefRequest
	if _, err := service.CreateVirtualRouterVirtualMachineRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualRouterVirtualMachineRefRequest{
		CreateVirtualRouterVirtualMachineRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualRouterVirtualMachineRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualRouterVirtualMachineRefRequest
	if _, err := service.DeleteVirtualRouterVirtualMachineRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualRouterVirtualMachineRefRequest{
		DeleteVirtualRouterVirtualMachineRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualRouterTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualRouterTagRefRequest
	if _, err := service.CreateVirtualRouterTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualRouterTagRefRequest{
		CreateVirtualRouterTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualRouterTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualRouterTagRefRequest
	if _, err := service.DeleteVirtualRouterTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualRouterTagRefRequest{
		DeleteVirtualRouterTagRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualRouterNetworkIpamRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualRouterNetworkIpamRefRequest
	if _, err := service.CreateVirtualRouterNetworkIpamRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualRouterNetworkIpamRefRequest{
		CreateVirtualRouterNetworkIpamRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualRouterNetworkIpamRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualRouterNetworkIpamRefRequest
	if _, err := service.DeleteVirtualRouterNetworkIpamRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualRouterNetworkIpamRefRequest{
		DeleteVirtualRouterNetworkIpamRefRequest: request,
	}}, nil
}

func (e *Event_CreateVirtualRouterSubClusterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateVirtualRouterSubClusterRefRequest
	if _, err := service.CreateVirtualRouterSubClusterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateVirtualRouterSubClusterRefRequest{
		CreateVirtualRouterSubClusterRefRequest: request,
	}}, nil
}

func (e *Event_DeleteVirtualRouterSubClusterRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteVirtualRouterSubClusterRefRequest
	if _, err := service.DeleteVirtualRouterSubClusterRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteVirtualRouterSubClusterRefRequest{
		DeleteVirtualRouterSubClusterRefRequest: request,
	}}, nil
}

type WebuiNode = models.WebuiNode

func (s *BaseService) CreateWebuiNode(ctx context.Context, request *CreateWebuiNodeRequest) (*CreateWebuiNodeResponse, error) {
	if s.next == nil {
		return &CreateWebuiNodeResponse{
			WebuiNode: request.GetWebuiNode(),
		}, nil
	}
	return s.Next().CreateWebuiNode(ctx, request)
}
func (s *BaseService) UpdateWebuiNode(ctx context.Context, request *UpdateWebuiNodeRequest) (*UpdateWebuiNodeResponse, error) {
	if s.next == nil {
		return &UpdateWebuiNodeResponse{
			WebuiNode: request.GetWebuiNode(),
		}, nil
	}
	return s.Next().UpdateWebuiNode(ctx, request)
}
func (s *BaseService) DeleteWebuiNode(ctx context.Context, request *DeleteWebuiNodeRequest) (*DeleteWebuiNodeResponse, error) {
	if s.next == nil {
		return &DeleteWebuiNodeResponse{
			ID: request.ID,
		}, nil
	}
	return s.Next().DeleteWebuiNode(ctx, request)
}
func (s *BaseService) GetWebuiNode(ctx context.Context, request *GetWebuiNodeRequest) (*GetWebuiNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().GetWebuiNode(ctx, request)
}
func (s *BaseService) ListWebuiNode(ctx context.Context, request *ListWebuiNodeRequest) (*ListWebuiNodeResponse, error) {
	if s.next == nil {
		return nil, nil
	}
	return s.Next().ListWebuiNode(ctx, request)
}

func (s *BaseService) CreateWebuiNodeTagRef(ctx context.Context, request *CreateWebuiNodeTagRefRequest) (*CreateWebuiNodeTagRefResponse, error) {
	if s.next == nil {
		return &CreateWebuiNodeTagRefResponse{
			ID:              request.ID,
			WebuiNodeTagRef: request.GetWebuiNodeTagRef(),
		}, nil
	}
	return s.Next().CreateWebuiNodeTagRef(ctx, request)
}

func (s *BaseService) DeleteWebuiNodeTagRef(ctx context.Context, request *DeleteWebuiNodeTagRefRequest) (*DeleteWebuiNodeTagRefResponse, error) {
	if s.next == nil {
		return &DeleteWebuiNodeTagRefResponse{
			ID:              request.ID,
			WebuiNodeTagRef: request.GetWebuiNodeTagRef(),
		}, nil
	}
	return s.Next().DeleteWebuiNodeTagRef(ctx, request)
}

func (s *RefUpdateToUpdateService) CreateWebuiNodeTagRef(ctx context.Context, request *CreateWebuiNodeTagRefRequest) (*CreateWebuiNodeTagRefResponse, error) {
	refField := models.WebuiNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetWebuiNode(ctx, &GetWebuiNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.WebuiNode
		obj.AddTagRef(request.WebuiNodeTagRef)

		_, err = s.BaseService.UpdateWebuiNode(ctx, &UpdateWebuiNodeRequest{
			WebuiNode: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &CreateWebuiNodeTagRefResponse{
		ID:              request.ID,
		WebuiNodeTagRef: request.GetWebuiNodeTagRef(),
	}, nil
}

func (s *RefUpdateToUpdateService) DeleteWebuiNodeTagRef(ctx context.Context, request *DeleteWebuiNodeTagRefRequest) (*DeleteWebuiNodeTagRefResponse, error) {
	refField := models.WebuiNodeFieldTagRefs
	if err := s.InTransactionDoer.DoInTransaction(ctx, func(ctx context.Context) error {
		objResp, err := s.ReadService.GetWebuiNode(ctx, &GetWebuiNodeRequest{
			ID:     request.ID,
			Fields: []string{refField},
		})
		if err != nil {
			return err
		}
		obj := objResp.WebuiNode
		obj.RemoveTagRef(request.WebuiNodeTagRef)

		_, err = s.BaseService.UpdateWebuiNode(ctx, &UpdateWebuiNodeRequest{
			WebuiNode: obj,
			FieldMask: types.FieldMask{Paths: []string{refField}},
		})
		return err
	}); err != nil {
		return nil, err
	}
	return &DeleteWebuiNodeTagRefResponse{
		ID:              request.ID,
		WebuiNodeTagRef: request.GetWebuiNodeTagRef(),
	}, nil
}

func (s *EventProducerService) CreateWebuiNode(ctx context.Context, request *CreateWebuiNodeRequest) (*CreateWebuiNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_CreateWebuiNodeRequest{
				CreateWebuiNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().CreateWebuiNode(ctx, request)
}
func (s *EventProducerService) UpdateWebuiNode(ctx context.Context, request *UpdateWebuiNodeRequest) (*UpdateWebuiNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_UpdateWebuiNodeRequest{
				UpdateWebuiNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().UpdateWebuiNode(ctx, request)
}
func (s *EventProducerService) DeleteWebuiNode(ctx context.Context, request *DeleteWebuiNodeRequest) (*DeleteWebuiNodeResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{
			Request: &Event_DeleteWebuiNodeRequest{
				DeleteWebuiNodeRequest: request,
			},
		})
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteWebuiNode(ctx, request)
}

func (s *EventProducerService) CreateWebuiNodeTagRef(ctx context.Context, request *CreateWebuiNodeTagRefRequest) (*CreateWebuiNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_CreateWebuiNodeTagRefRequest{
			CreateWebuiNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().CreateWebuiNodeTagRef(ctx, request)
}

func (s *EventProducerService) DeleteWebuiNodeTagRef(ctx context.Context, request *DeleteWebuiNodeTagRefRequest) (*DeleteWebuiNodeTagRefResponse, error) {
	_, err := s.Processor.Process(
		ctx,
		&Event{Request: &Event_DeleteWebuiNodeTagRefRequest{
			DeleteWebuiNodeTagRefRequest: request,
		}},
	)
	if err != nil {
		return nil, err
	}
	return s.Next().DeleteWebuiNodeTagRef(ctx, request)
}

func (e *Event_CreateWebuiNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateWebuiNodeRequest
	model := request.WebuiNode
	uuid := model.GetUUID()
	if uuid != "" {
		existing, err := service.GetWebuiNode(ctx,
			&GetWebuiNodeRequest{
				ID:     uuid,
				Fields: []string{"uuid"},
			})
		if err == nil && existing != nil {
			update := e.ToUpdateEvent()
			return update.Process(ctx, service)
		}
	}
	response, err := service.CreateWebuiNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_CreateWebuiNodeRequest{
			CreateWebuiNodeRequest: &CreateWebuiNodeRequest{
				WebuiNode: response.GetWebuiNode(),
			},
		},
	}, nil
}

func (e *Event_CreateWebuiNodeRequest) ToUpdateEvent() *Event {
	request := e.CreateWebuiNodeRequest
	model := request.WebuiNode
	return &Event{
		Request: &Event_UpdateWebuiNodeRequest{
			UpdateWebuiNodeRequest: &UpdateWebuiNodeRequest{
				WebuiNode: model,
				FieldMask: request.FieldMask,
			},
		},
	}
}

func (e *Event_UpdateWebuiNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.UpdateWebuiNodeRequest
	response, err := service.UpdateWebuiNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_UpdateWebuiNodeRequest{
			UpdateWebuiNodeRequest: &UpdateWebuiNodeRequest{
				WebuiNode: response.GetWebuiNode(),
			},
		},
	}, nil
}

func (e *Event_UpdateWebuiNodeRequest) ToUpdateEvent() *Event {
	return &Event{Request: e}
}

func (e *Event_DeleteWebuiNodeRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteWebuiNodeRequest
	_, err := service.DeleteWebuiNode(ctx, request)
	if err != nil {
		return nil, err
	}
	return &Event{
		Request: &Event_DeleteWebuiNodeRequest{
			DeleteWebuiNodeRequest: &DeleteWebuiNodeRequest{
				ID: request.ID,
			},
		},
	}, nil
}

func (e *Event_CreateWebuiNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.CreateWebuiNodeTagRefRequest
	if _, err := service.CreateWebuiNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_CreateWebuiNodeTagRefRequest{
		CreateWebuiNodeTagRefRequest: request,
	}}, nil
}

func (e *Event_DeleteWebuiNodeTagRefRequest) Process(ctx context.Context, service Service) (*Event, error) {
	request := e.DeleteWebuiNodeTagRefRequest
	if _, err := service.DeleteWebuiNodeTagRef(ctx, request); err != nil {
		return nil, err
	}
	return &Event{Request: &Event_DeleteWebuiNodeTagRefRequest{
		DeleteWebuiNodeTagRefRequest: request,
	}}, nil
}

//Dump dumps all service data.
func Dump(ctx context.Context, service Service) (*EventList, error) {
	response := []*Event{}

	listAccessControlList, err := service.ListAccessControlList(ctx,
		&ListAccessControlListRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing AccessControlList objects")
	}
	for _, resource := range listAccessControlList.AccessControlLists {
		response = append(response, &Event{
			Request: &Event_CreateAccessControlListRequest{
				CreateAccessControlListRequest: &CreateAccessControlListRequest{
					AccessControlList: resource,
				}}})
	}

	listAddressGroup, err := service.ListAddressGroup(ctx,
		&ListAddressGroupRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing AddressGroup objects")
	}
	for _, resource := range listAddressGroup.AddressGroups {
		response = append(response, &Event{
			Request: &Event_CreateAddressGroupRequest{
				CreateAddressGroupRequest: &CreateAddressGroupRequest{
					AddressGroup: resource,
				}}})
	}

	listAlarm, err := service.ListAlarm(ctx,
		&ListAlarmRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Alarm objects")
	}
	for _, resource := range listAlarm.Alarms {
		response = append(response, &Event{
			Request: &Event_CreateAlarmRequest{
				CreateAlarmRequest: &CreateAlarmRequest{
					Alarm: resource,
				}}})
	}

	listAliasIPPool, err := service.ListAliasIPPool(ctx,
		&ListAliasIPPoolRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing AliasIPPool objects")
	}
	for _, resource := range listAliasIPPool.AliasIPPools {
		response = append(response, &Event{
			Request: &Event_CreateAliasIPPoolRequest{
				CreateAliasIPPoolRequest: &CreateAliasIPPoolRequest{
					AliasIPPool: resource,
				}}})
	}

	listAliasIP, err := service.ListAliasIP(ctx,
		&ListAliasIPRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing AliasIP objects")
	}
	for _, resource := range listAliasIP.AliasIPs {
		response = append(response, &Event{
			Request: &Event_CreateAliasIPRequest{
				CreateAliasIPRequest: &CreateAliasIPRequest{
					AliasIP: resource,
				}}})
	}

	listAnalyticsAlarmNode, err := service.ListAnalyticsAlarmNode(ctx,
		&ListAnalyticsAlarmNodeRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing AnalyticsAlarmNode objects")
	}
	for _, resource := range listAnalyticsAlarmNode.AnalyticsAlarmNodes {
		response = append(response, &Event{
			Request: &Event_CreateAnalyticsAlarmNodeRequest{
				CreateAnalyticsAlarmNodeRequest: &CreateAnalyticsAlarmNodeRequest{
					AnalyticsAlarmNode: resource,
				}}})
	}

	listAnalyticsNode, err := service.ListAnalyticsNode(ctx,
		&ListAnalyticsNodeRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing AnalyticsNode objects")
	}
	for _, resource := range listAnalyticsNode.AnalyticsNodes {
		response = append(response, &Event{
			Request: &Event_CreateAnalyticsNodeRequest{
				CreateAnalyticsNodeRequest: &CreateAnalyticsNodeRequest{
					AnalyticsNode: resource,
				}}})
	}

	listAnalyticsSNMPNode, err := service.ListAnalyticsSNMPNode(ctx,
		&ListAnalyticsSNMPNodeRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing AnalyticsSNMPNode objects")
	}
	for _, resource := range listAnalyticsSNMPNode.AnalyticsSNMPNodes {
		response = append(response, &Event{
			Request: &Event_CreateAnalyticsSNMPNodeRequest{
				CreateAnalyticsSNMPNodeRequest: &CreateAnalyticsSNMPNodeRequest{
					AnalyticsSNMPNode: resource,
				}}})
	}

	listAPIAccessList, err := service.ListAPIAccessList(ctx,
		&ListAPIAccessListRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing APIAccessList objects")
	}
	for _, resource := range listAPIAccessList.APIAccessLists {
		response = append(response, &Event{
			Request: &Event_CreateAPIAccessListRequest{
				CreateAPIAccessListRequest: &CreateAPIAccessListRequest{
					APIAccessList: resource,
				}}})
	}

	listApplicationPolicySet, err := service.ListApplicationPolicySet(ctx,
		&ListApplicationPolicySetRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ApplicationPolicySet objects")
	}
	for _, resource := range listApplicationPolicySet.ApplicationPolicySets {
		response = append(response, &Event{
			Request: &Event_CreateApplicationPolicySetRequest{
				CreateApplicationPolicySetRequest: &CreateApplicationPolicySetRequest{
					ApplicationPolicySet: resource,
				}}})
	}

	listBGPAsAService, err := service.ListBGPAsAService(ctx,
		&ListBGPAsAServiceRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing BGPAsAService objects")
	}
	for _, resource := range listBGPAsAService.BGPAsAServices {
		response = append(response, &Event{
			Request: &Event_CreateBGPAsAServiceRequest{
				CreateBGPAsAServiceRequest: &CreateBGPAsAServiceRequest{
					BGPAsAService: resource,
				}}})
	}

	listBGPRouter, err := service.ListBGPRouter(ctx,
		&ListBGPRouterRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing BGPRouter objects")
	}
	for _, resource := range listBGPRouter.BGPRouters {
		response = append(response, &Event{
			Request: &Event_CreateBGPRouterRequest{
				CreateBGPRouterRequest: &CreateBGPRouterRequest{
					BGPRouter: resource,
				}}})
	}

	listBGPVPN, err := service.ListBGPVPN(ctx,
		&ListBGPVPNRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing BGPVPN objects")
	}
	for _, resource := range listBGPVPN.BGPVPNs {
		response = append(response, &Event{
			Request: &Event_CreateBGPVPNRequest{
				CreateBGPVPNRequest: &CreateBGPVPNRequest{
					BGPVPN: resource,
				}}})
	}

	listBridgeDomain, err := service.ListBridgeDomain(ctx,
		&ListBridgeDomainRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing BridgeDomain objects")
	}
	for _, resource := range listBridgeDomain.BridgeDomains {
		response = append(response, &Event{
			Request: &Event_CreateBridgeDomainRequest{
				CreateBridgeDomainRequest: &CreateBridgeDomainRequest{
					BridgeDomain: resource,
				}}})
	}

	listCard, err := service.ListCard(ctx,
		&ListCardRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Card objects")
	}
	for _, resource := range listCard.Cards {
		response = append(response, &Event{
			Request: &Event_CreateCardRequest{
				CreateCardRequest: &CreateCardRequest{
					Card: resource,
				}}})
	}

	listCliConfig, err := service.ListCliConfig(ctx,
		&ListCliConfigRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing CliConfig objects")
	}
	for _, resource := range listCliConfig.CliConfigs {
		response = append(response, &Event{
			Request: &Event_CreateCliConfigRequest{
				CreateCliConfigRequest: &CreateCliConfigRequest{
					CliConfig: resource,
				}}})
	}

	listConfigDatabaseNode, err := service.ListConfigDatabaseNode(ctx,
		&ListConfigDatabaseNodeRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ConfigDatabaseNode objects")
	}
	for _, resource := range listConfigDatabaseNode.ConfigDatabaseNodes {
		response = append(response, &Event{
			Request: &Event_CreateConfigDatabaseNodeRequest{
				CreateConfigDatabaseNodeRequest: &CreateConfigDatabaseNodeRequest{
					ConfigDatabaseNode: resource,
				}}})
	}

	listConfigNode, err := service.ListConfigNode(ctx,
		&ListConfigNodeRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ConfigNode objects")
	}
	for _, resource := range listConfigNode.ConfigNodes {
		response = append(response, &Event{
			Request: &Event_CreateConfigNodeRequest{
				CreateConfigNodeRequest: &CreateConfigNodeRequest{
					ConfigNode: resource,
				}}})
	}

	listConfigRoot, err := service.ListConfigRoot(ctx,
		&ListConfigRootRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ConfigRoot objects")
	}
	for _, resource := range listConfigRoot.ConfigRoots {
		response = append(response, &Event{
			Request: &Event_CreateConfigRootRequest{
				CreateConfigRootRequest: &CreateConfigRootRequest{
					ConfigRoot: resource,
				}}})
	}

	listControlNodeZone, err := service.ListControlNodeZone(ctx,
		&ListControlNodeZoneRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ControlNodeZone objects")
	}
	for _, resource := range listControlNodeZone.ControlNodeZones {
		response = append(response, &Event{
			Request: &Event_CreateControlNodeZoneRequest{
				CreateControlNodeZoneRequest: &CreateControlNodeZoneRequest{
					ControlNodeZone: resource,
				}}})
	}

	listCustomerAttachment, err := service.ListCustomerAttachment(ctx,
		&ListCustomerAttachmentRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing CustomerAttachment objects")
	}
	for _, resource := range listCustomerAttachment.CustomerAttachments {
		response = append(response, &Event{
			Request: &Event_CreateCustomerAttachmentRequest{
				CreateCustomerAttachmentRequest: &CreateCustomerAttachmentRequest{
					CustomerAttachment: resource,
				}}})
	}

	listDataCenterInterconnect, err := service.ListDataCenterInterconnect(ctx,
		&ListDataCenterInterconnectRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing DataCenterInterconnect objects")
	}
	for _, resource := range listDataCenterInterconnect.DataCenterInterconnects {
		response = append(response, &Event{
			Request: &Event_CreateDataCenterInterconnectRequest{
				CreateDataCenterInterconnectRequest: &CreateDataCenterInterconnectRequest{
					DataCenterInterconnect: resource,
				}}})
	}

	listDatabaseNode, err := service.ListDatabaseNode(ctx,
		&ListDatabaseNodeRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing DatabaseNode objects")
	}
	for _, resource := range listDatabaseNode.DatabaseNodes {
		response = append(response, &Event{
			Request: &Event_CreateDatabaseNodeRequest{
				CreateDatabaseNodeRequest: &CreateDatabaseNodeRequest{
					DatabaseNode: resource,
				}}})
	}

	listDeviceChassis, err := service.ListDeviceChassis(ctx,
		&ListDeviceChassisRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing DeviceChassis objects")
	}
	for _, resource := range listDeviceChassis.DeviceChassiss {
		response = append(response, &Event{
			Request: &Event_CreateDeviceChassisRequest{
				CreateDeviceChassisRequest: &CreateDeviceChassisRequest{
					DeviceChassis: resource,
				}}})
	}

	listDeviceFunctionalGroup, err := service.ListDeviceFunctionalGroup(ctx,
		&ListDeviceFunctionalGroupRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing DeviceFunctionalGroup objects")
	}
	for _, resource := range listDeviceFunctionalGroup.DeviceFunctionalGroups {
		response = append(response, &Event{
			Request: &Event_CreateDeviceFunctionalGroupRequest{
				CreateDeviceFunctionalGroupRequest: &CreateDeviceFunctionalGroupRequest{
					DeviceFunctionalGroup: resource,
				}}})
	}

	listDeviceImage, err := service.ListDeviceImage(ctx,
		&ListDeviceImageRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing DeviceImage objects")
	}
	for _, resource := range listDeviceImage.DeviceImages {
		response = append(response, &Event{
			Request: &Event_CreateDeviceImageRequest{
				CreateDeviceImageRequest: &CreateDeviceImageRequest{
					DeviceImage: resource,
				}}})
	}

	listDevicemgrNode, err := service.ListDevicemgrNode(ctx,
		&ListDevicemgrNodeRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing DevicemgrNode objects")
	}
	for _, resource := range listDevicemgrNode.DevicemgrNodes {
		response = append(response, &Event{
			Request: &Event_CreateDevicemgrNodeRequest{
				CreateDevicemgrNodeRequest: &CreateDevicemgrNodeRequest{
					DevicemgrNode: resource,
				}}})
	}

	listDiscoveryServiceAssignment, err := service.ListDiscoveryServiceAssignment(ctx,
		&ListDiscoveryServiceAssignmentRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing DiscoveryServiceAssignment objects")
	}
	for _, resource := range listDiscoveryServiceAssignment.DiscoveryServiceAssignments {
		response = append(response, &Event{
			Request: &Event_CreateDiscoveryServiceAssignmentRequest{
				CreateDiscoveryServiceAssignmentRequest: &CreateDiscoveryServiceAssignmentRequest{
					DiscoveryServiceAssignment: resource,
				}}})
	}

	listDomain, err := service.ListDomain(ctx,
		&ListDomainRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Domain objects")
	}
	for _, resource := range listDomain.Domains {
		response = append(response, &Event{
			Request: &Event_CreateDomainRequest{
				CreateDomainRequest: &CreateDomainRequest{
					Domain: resource,
				}}})
	}

	listDsaRule, err := service.ListDsaRule(ctx,
		&ListDsaRuleRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing DsaRule objects")
	}
	for _, resource := range listDsaRule.DsaRules {
		response = append(response, &Event{
			Request: &Event_CreateDsaRuleRequest{
				CreateDsaRuleRequest: &CreateDsaRuleRequest{
					DsaRule: resource,
				}}})
	}

	listE2ServiceProvider, err := service.ListE2ServiceProvider(ctx,
		&ListE2ServiceProviderRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing E2ServiceProvider objects")
	}
	for _, resource := range listE2ServiceProvider.E2ServiceProviders {
		response = append(response, &Event{
			Request: &Event_CreateE2ServiceProviderRequest{
				CreateE2ServiceProviderRequest: &CreateE2ServiceProviderRequest{
					E2ServiceProvider: resource,
				}}})
	}

	listFabricNamespace, err := service.ListFabricNamespace(ctx,
		&ListFabricNamespaceRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing FabricNamespace objects")
	}
	for _, resource := range listFabricNamespace.FabricNamespaces {
		response = append(response, &Event{
			Request: &Event_CreateFabricNamespaceRequest{
				CreateFabricNamespaceRequest: &CreateFabricNamespaceRequest{
					FabricNamespace: resource,
				}}})
	}

	listFabric, err := service.ListFabric(ctx,
		&ListFabricRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Fabric objects")
	}
	for _, resource := range listFabric.Fabrics {
		response = append(response, &Event{
			Request: &Event_CreateFabricRequest{
				CreateFabricRequest: &CreateFabricRequest{
					Fabric: resource,
				}}})
	}

	listFeatureConfig, err := service.ListFeatureConfig(ctx,
		&ListFeatureConfigRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing FeatureConfig objects")
	}
	for _, resource := range listFeatureConfig.FeatureConfigs {
		response = append(response, &Event{
			Request: &Event_CreateFeatureConfigRequest{
				CreateFeatureConfigRequest: &CreateFeatureConfigRequest{
					FeatureConfig: resource,
				}}})
	}

	listFeatureFlag, err := service.ListFeatureFlag(ctx,
		&ListFeatureFlagRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing FeatureFlag objects")
	}
	for _, resource := range listFeatureFlag.FeatureFlags {
		response = append(response, &Event{
			Request: &Event_CreateFeatureFlagRequest{
				CreateFeatureFlagRequest: &CreateFeatureFlagRequest{
					FeatureFlag: resource,
				}}})
	}

	listFeature, err := service.ListFeature(ctx,
		&ListFeatureRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Feature objects")
	}
	for _, resource := range listFeature.Features {
		response = append(response, &Event{
			Request: &Event_CreateFeatureRequest{
				CreateFeatureRequest: &CreateFeatureRequest{
					Feature: resource,
				}}})
	}

	listFirewallPolicy, err := service.ListFirewallPolicy(ctx,
		&ListFirewallPolicyRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing FirewallPolicy objects")
	}
	for _, resource := range listFirewallPolicy.FirewallPolicys {
		response = append(response, &Event{
			Request: &Event_CreateFirewallPolicyRequest{
				CreateFirewallPolicyRequest: &CreateFirewallPolicyRequest{
					FirewallPolicy: resource,
				}}})
	}

	listFirewallRule, err := service.ListFirewallRule(ctx,
		&ListFirewallRuleRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing FirewallRule objects")
	}
	for _, resource := range listFirewallRule.FirewallRules {
		response = append(response, &Event{
			Request: &Event_CreateFirewallRuleRequest{
				CreateFirewallRuleRequest: &CreateFirewallRuleRequest{
					FirewallRule: resource,
				}}})
	}

	listFloatingIPPool, err := service.ListFloatingIPPool(ctx,
		&ListFloatingIPPoolRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing FloatingIPPool objects")
	}
	for _, resource := range listFloatingIPPool.FloatingIPPools {
		response = append(response, &Event{
			Request: &Event_CreateFloatingIPPoolRequest{
				CreateFloatingIPPoolRequest: &CreateFloatingIPPoolRequest{
					FloatingIPPool: resource,
				}}})
	}

	listFloatingIP, err := service.ListFloatingIP(ctx,
		&ListFloatingIPRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing FloatingIP objects")
	}
	for _, resource := range listFloatingIP.FloatingIPs {
		response = append(response, &Event{
			Request: &Event_CreateFloatingIPRequest{
				CreateFloatingIPRequest: &CreateFloatingIPRequest{
					FloatingIP: resource,
				}}})
	}

	listFlowNode, err := service.ListFlowNode(ctx,
		&ListFlowNodeRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing FlowNode objects")
	}
	for _, resource := range listFlowNode.FlowNodes {
		response = append(response, &Event{
			Request: &Event_CreateFlowNodeRequest{
				CreateFlowNodeRequest: &CreateFlowNodeRequest{
					FlowNode: resource,
				}}})
	}

	listForwardingClass, err := service.ListForwardingClass(ctx,
		&ListForwardingClassRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ForwardingClass objects")
	}
	for _, resource := range listForwardingClass.ForwardingClasss {
		response = append(response, &Event{
			Request: &Event_CreateForwardingClassRequest{
				CreateForwardingClassRequest: &CreateForwardingClassRequest{
					ForwardingClass: resource,
				}}})
	}

	listGlobalAnalyticsConfig, err := service.ListGlobalAnalyticsConfig(ctx,
		&ListGlobalAnalyticsConfigRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing GlobalAnalyticsConfig objects")
	}
	for _, resource := range listGlobalAnalyticsConfig.GlobalAnalyticsConfigs {
		response = append(response, &Event{
			Request: &Event_CreateGlobalAnalyticsConfigRequest{
				CreateGlobalAnalyticsConfigRequest: &CreateGlobalAnalyticsConfigRequest{
					GlobalAnalyticsConfig: resource,
				}}})
	}

	listGlobalQosConfig, err := service.ListGlobalQosConfig(ctx,
		&ListGlobalQosConfigRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing GlobalQosConfig objects")
	}
	for _, resource := range listGlobalQosConfig.GlobalQosConfigs {
		response = append(response, &Event{
			Request: &Event_CreateGlobalQosConfigRequest{
				CreateGlobalQosConfigRequest: &CreateGlobalQosConfigRequest{
					GlobalQosConfig: resource,
				}}})
	}

	listGlobalSystemConfig, err := service.ListGlobalSystemConfig(ctx,
		&ListGlobalSystemConfigRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing GlobalSystemConfig objects")
	}
	for _, resource := range listGlobalSystemConfig.GlobalSystemConfigs {
		response = append(response, &Event{
			Request: &Event_CreateGlobalSystemConfigRequest{
				CreateGlobalSystemConfigRequest: &CreateGlobalSystemConfigRequest{
					GlobalSystemConfig: resource,
				}}})
	}

	listGlobalVrouterConfig, err := service.ListGlobalVrouterConfig(ctx,
		&ListGlobalVrouterConfigRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing GlobalVrouterConfig objects")
	}
	for _, resource := range listGlobalVrouterConfig.GlobalVrouterConfigs {
		response = append(response, &Event{
			Request: &Event_CreateGlobalVrouterConfigRequest{
				CreateGlobalVrouterConfigRequest: &CreateGlobalVrouterConfigRequest{
					GlobalVrouterConfig: resource,
				}}})
	}

	listHardwareInventory, err := service.ListHardwareInventory(ctx,
		&ListHardwareInventoryRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing HardwareInventory objects")
	}
	for _, resource := range listHardwareInventory.HardwareInventorys {
		response = append(response, &Event{
			Request: &Event_CreateHardwareInventoryRequest{
				CreateHardwareInventoryRequest: &CreateHardwareInventoryRequest{
					HardwareInventory: resource,
				}}})
	}

	listHardware, err := service.ListHardware(ctx,
		&ListHardwareRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Hardware objects")
	}
	for _, resource := range listHardware.Hardwares {
		response = append(response, &Event{
			Request: &Event_CreateHardwareRequest{
				CreateHardwareRequest: &CreateHardwareRequest{
					Hardware: resource,
				}}})
	}

	listHostBasedService, err := service.ListHostBasedService(ctx,
		&ListHostBasedServiceRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing HostBasedService objects")
	}
	for _, resource := range listHostBasedService.HostBasedServices {
		response = append(response, &Event{
			Request: &Event_CreateHostBasedServiceRequest{
				CreateHostBasedServiceRequest: &CreateHostBasedServiceRequest{
					HostBasedService: resource,
				}}})
	}

	listInstanceIP, err := service.ListInstanceIP(ctx,
		&ListInstanceIPRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing InstanceIP objects")
	}
	for _, resource := range listInstanceIP.InstanceIPs {
		response = append(response, &Event{
			Request: &Event_CreateInstanceIPRequest{
				CreateInstanceIPRequest: &CreateInstanceIPRequest{
					InstanceIP: resource,
				}}})
	}

	listIntentMap, err := service.ListIntentMap(ctx,
		&ListIntentMapRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing IntentMap objects")
	}
	for _, resource := range listIntentMap.IntentMaps {
		response = append(response, &Event{
			Request: &Event_CreateIntentMapRequest{
				CreateIntentMapRequest: &CreateIntentMapRequest{
					IntentMap: resource,
				}}})
	}

	listInterfaceRouteTable, err := service.ListInterfaceRouteTable(ctx,
		&ListInterfaceRouteTableRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing InterfaceRouteTable objects")
	}
	for _, resource := range listInterfaceRouteTable.InterfaceRouteTables {
		response = append(response, &Event{
			Request: &Event_CreateInterfaceRouteTableRequest{
				CreateInterfaceRouteTableRequest: &CreateInterfaceRouteTableRequest{
					InterfaceRouteTable: resource,
				}}})
	}

	listJobTemplate, err := service.ListJobTemplate(ctx,
		&ListJobTemplateRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing JobTemplate objects")
	}
	for _, resource := range listJobTemplate.JobTemplates {
		response = append(response, &Event{
			Request: &Event_CreateJobTemplateRequest{
				CreateJobTemplateRequest: &CreateJobTemplateRequest{
					JobTemplate: resource,
				}}})
	}

	listLinkAggregationGroup, err := service.ListLinkAggregationGroup(ctx,
		&ListLinkAggregationGroupRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing LinkAggregationGroup objects")
	}
	for _, resource := range listLinkAggregationGroup.LinkAggregationGroups {
		response = append(response, &Event{
			Request: &Event_CreateLinkAggregationGroupRequest{
				CreateLinkAggregationGroupRequest: &CreateLinkAggregationGroupRequest{
					LinkAggregationGroup: resource,
				}}})
	}

	listLoadbalancerHealthmonitor, err := service.ListLoadbalancerHealthmonitor(ctx,
		&ListLoadbalancerHealthmonitorRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing LoadbalancerHealthmonitor objects")
	}
	for _, resource := range listLoadbalancerHealthmonitor.LoadbalancerHealthmonitors {
		response = append(response, &Event{
			Request: &Event_CreateLoadbalancerHealthmonitorRequest{
				CreateLoadbalancerHealthmonitorRequest: &CreateLoadbalancerHealthmonitorRequest{
					LoadbalancerHealthmonitor: resource,
				}}})
	}

	listLoadbalancerListener, err := service.ListLoadbalancerListener(ctx,
		&ListLoadbalancerListenerRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing LoadbalancerListener objects")
	}
	for _, resource := range listLoadbalancerListener.LoadbalancerListeners {
		response = append(response, &Event{
			Request: &Event_CreateLoadbalancerListenerRequest{
				CreateLoadbalancerListenerRequest: &CreateLoadbalancerListenerRequest{
					LoadbalancerListener: resource,
				}}})
	}

	listLoadbalancerMember, err := service.ListLoadbalancerMember(ctx,
		&ListLoadbalancerMemberRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing LoadbalancerMember objects")
	}
	for _, resource := range listLoadbalancerMember.LoadbalancerMembers {
		response = append(response, &Event{
			Request: &Event_CreateLoadbalancerMemberRequest{
				CreateLoadbalancerMemberRequest: &CreateLoadbalancerMemberRequest{
					LoadbalancerMember: resource,
				}}})
	}

	listLoadbalancerPool, err := service.ListLoadbalancerPool(ctx,
		&ListLoadbalancerPoolRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing LoadbalancerPool objects")
	}
	for _, resource := range listLoadbalancerPool.LoadbalancerPools {
		response = append(response, &Event{
			Request: &Event_CreateLoadbalancerPoolRequest{
				CreateLoadbalancerPoolRequest: &CreateLoadbalancerPoolRequest{
					LoadbalancerPool: resource,
				}}})
	}

	listLoadbalancer, err := service.ListLoadbalancer(ctx,
		&ListLoadbalancerRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Loadbalancer objects")
	}
	for _, resource := range listLoadbalancer.Loadbalancers {
		response = append(response, &Event{
			Request: &Event_CreateLoadbalancerRequest{
				CreateLoadbalancerRequest: &CreateLoadbalancerRequest{
					Loadbalancer: resource,
				}}})
	}

	listLogicalInterface, err := service.ListLogicalInterface(ctx,
		&ListLogicalInterfaceRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing LogicalInterface objects")
	}
	for _, resource := range listLogicalInterface.LogicalInterfaces {
		response = append(response, &Event{
			Request: &Event_CreateLogicalInterfaceRequest{
				CreateLogicalInterfaceRequest: &CreateLogicalInterfaceRequest{
					LogicalInterface: resource,
				}}})
	}

	listLogicalRouter, err := service.ListLogicalRouter(ctx,
		&ListLogicalRouterRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing LogicalRouter objects")
	}
	for _, resource := range listLogicalRouter.LogicalRouters {
		response = append(response, &Event{
			Request: &Event_CreateLogicalRouterRequest{
				CreateLogicalRouterRequest: &CreateLogicalRouterRequest{
					LogicalRouter: resource,
				}}})
	}

	listMulticastPolicy, err := service.ListMulticastPolicy(ctx,
		&ListMulticastPolicyRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing MulticastPolicy objects")
	}
	for _, resource := range listMulticastPolicy.MulticastPolicys {
		response = append(response, &Event{
			Request: &Event_CreateMulticastPolicyRequest{
				CreateMulticastPolicyRequest: &CreateMulticastPolicyRequest{
					MulticastPolicy: resource,
				}}})
	}

	listNamespace, err := service.ListNamespace(ctx,
		&ListNamespaceRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Namespace objects")
	}
	for _, resource := range listNamespace.Namespaces {
		response = append(response, &Event{
			Request: &Event_CreateNamespaceRequest{
				CreateNamespaceRequest: &CreateNamespaceRequest{
					Namespace: resource,
				}}})
	}

	listNetworkDeviceConfig, err := service.ListNetworkDeviceConfig(ctx,
		&ListNetworkDeviceConfigRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing NetworkDeviceConfig objects")
	}
	for _, resource := range listNetworkDeviceConfig.NetworkDeviceConfigs {
		response = append(response, &Event{
			Request: &Event_CreateNetworkDeviceConfigRequest{
				CreateNetworkDeviceConfigRequest: &CreateNetworkDeviceConfigRequest{
					NetworkDeviceConfig: resource,
				}}})
	}

	listNetworkIpam, err := service.ListNetworkIpam(ctx,
		&ListNetworkIpamRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing NetworkIpam objects")
	}
	for _, resource := range listNetworkIpam.NetworkIpams {
		response = append(response, &Event{
			Request: &Event_CreateNetworkIpamRequest{
				CreateNetworkIpamRequest: &CreateNetworkIpamRequest{
					NetworkIpam: resource,
				}}})
	}

	listNetworkPolicy, err := service.ListNetworkPolicy(ctx,
		&ListNetworkPolicyRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing NetworkPolicy objects")
	}
	for _, resource := range listNetworkPolicy.NetworkPolicys {
		response = append(response, &Event{
			Request: &Event_CreateNetworkPolicyRequest{
				CreateNetworkPolicyRequest: &CreateNetworkPolicyRequest{
					NetworkPolicy: resource,
				}}})
	}

	listNodeProfile, err := service.ListNodeProfile(ctx,
		&ListNodeProfileRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing NodeProfile objects")
	}
	for _, resource := range listNodeProfile.NodeProfiles {
		response = append(response, &Event{
			Request: &Event_CreateNodeProfileRequest{
				CreateNodeProfileRequest: &CreateNodeProfileRequest{
					NodeProfile: resource,
				}}})
	}

	listNode, err := service.ListNode(ctx,
		&ListNodeRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Node objects")
	}
	for _, resource := range listNode.Nodes {
		response = append(response, &Event{
			Request: &Event_CreateNodeRequest{
				CreateNodeRequest: &CreateNodeRequest{
					Node: resource,
				}}})
	}

	listOverlayRole, err := service.ListOverlayRole(ctx,
		&ListOverlayRoleRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing OverlayRole objects")
	}
	for _, resource := range listOverlayRole.OverlayRoles {
		response = append(response, &Event{
			Request: &Event_CreateOverlayRoleRequest{
				CreateOverlayRoleRequest: &CreateOverlayRoleRequest{
					OverlayRole: resource,
				}}})
	}

	listPeeringPolicy, err := service.ListPeeringPolicy(ctx,
		&ListPeeringPolicyRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing PeeringPolicy objects")
	}
	for _, resource := range listPeeringPolicy.PeeringPolicys {
		response = append(response, &Event{
			Request: &Event_CreatePeeringPolicyRequest{
				CreatePeeringPolicyRequest: &CreatePeeringPolicyRequest{
					PeeringPolicy: resource,
				}}})
	}

	listPhysicalInterface, err := service.ListPhysicalInterface(ctx,
		&ListPhysicalInterfaceRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing PhysicalInterface objects")
	}
	for _, resource := range listPhysicalInterface.PhysicalInterfaces {
		response = append(response, &Event{
			Request: &Event_CreatePhysicalInterfaceRequest{
				CreatePhysicalInterfaceRequest: &CreatePhysicalInterfaceRequest{
					PhysicalInterface: resource,
				}}})
	}

	listPhysicalRole, err := service.ListPhysicalRole(ctx,
		&ListPhysicalRoleRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing PhysicalRole objects")
	}
	for _, resource := range listPhysicalRole.PhysicalRoles {
		response = append(response, &Event{
			Request: &Event_CreatePhysicalRoleRequest{
				CreatePhysicalRoleRequest: &CreatePhysicalRoleRequest{
					PhysicalRole: resource,
				}}})
	}

	listPhysicalRouter, err := service.ListPhysicalRouter(ctx,
		&ListPhysicalRouterRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing PhysicalRouter objects")
	}
	for _, resource := range listPhysicalRouter.PhysicalRouters {
		response = append(response, &Event{
			Request: &Event_CreatePhysicalRouterRequest{
				CreatePhysicalRouterRequest: &CreatePhysicalRouterRequest{
					PhysicalRouter: resource,
				}}})
	}

	listPolicyManagement, err := service.ListPolicyManagement(ctx,
		&ListPolicyManagementRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing PolicyManagement objects")
	}
	for _, resource := range listPolicyManagement.PolicyManagements {
		response = append(response, &Event{
			Request: &Event_CreatePolicyManagementRequest{
				CreatePolicyManagementRequest: &CreatePolicyManagementRequest{
					PolicyManagement: resource,
				}}})
	}

	listPortGroup, err := service.ListPortGroup(ctx,
		&ListPortGroupRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing PortGroup objects")
	}
	for _, resource := range listPortGroup.PortGroups {
		response = append(response, &Event{
			Request: &Event_CreatePortGroupRequest{
				CreatePortGroupRequest: &CreatePortGroupRequest{
					PortGroup: resource,
				}}})
	}

	listPortProfile, err := service.ListPortProfile(ctx,
		&ListPortProfileRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing PortProfile objects")
	}
	for _, resource := range listPortProfile.PortProfiles {
		response = append(response, &Event{
			Request: &Event_CreatePortProfileRequest{
				CreatePortProfileRequest: &CreatePortProfileRequest{
					PortProfile: resource,
				}}})
	}

	listPort, err := service.ListPort(ctx,
		&ListPortRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Port objects")
	}
	for _, resource := range listPort.Ports {
		response = append(response, &Event{
			Request: &Event_CreatePortRequest{
				CreatePortRequest: &CreatePortRequest{
					Port: resource,
				}}})
	}

	listPortTuple, err := service.ListPortTuple(ctx,
		&ListPortTupleRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing PortTuple objects")
	}
	for _, resource := range listPortTuple.PortTuples {
		response = append(response, &Event{
			Request: &Event_CreatePortTupleRequest{
				CreatePortTupleRequest: &CreatePortTupleRequest{
					PortTuple: resource,
				}}})
	}

	listProject, err := service.ListProject(ctx,
		&ListProjectRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Project objects")
	}
	for _, resource := range listProject.Projects {
		response = append(response, &Event{
			Request: &Event_CreateProjectRequest{
				CreateProjectRequest: &CreateProjectRequest{
					Project: resource,
				}}})
	}

	listProviderAttachment, err := service.ListProviderAttachment(ctx,
		&ListProviderAttachmentRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ProviderAttachment objects")
	}
	for _, resource := range listProviderAttachment.ProviderAttachments {
		response = append(response, &Event{
			Request: &Event_CreateProviderAttachmentRequest{
				CreateProviderAttachmentRequest: &CreateProviderAttachmentRequest{
					ProviderAttachment: resource,
				}}})
	}

	listQosConfig, err := service.ListQosConfig(ctx,
		&ListQosConfigRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing QosConfig objects")
	}
	for _, resource := range listQosConfig.QosConfigs {
		response = append(response, &Event{
			Request: &Event_CreateQosConfigRequest{
				CreateQosConfigRequest: &CreateQosConfigRequest{
					QosConfig: resource,
				}}})
	}

	listQosQueue, err := service.ListQosQueue(ctx,
		&ListQosQueueRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing QosQueue objects")
	}
	for _, resource := range listQosQueue.QosQueues {
		response = append(response, &Event{
			Request: &Event_CreateQosQueueRequest{
				CreateQosQueueRequest: &CreateQosQueueRequest{
					QosQueue: resource,
				}}})
	}

	listRoleConfig, err := service.ListRoleConfig(ctx,
		&ListRoleConfigRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing RoleConfig objects")
	}
	for _, resource := range listRoleConfig.RoleConfigs {
		response = append(response, &Event{
			Request: &Event_CreateRoleConfigRequest{
				CreateRoleConfigRequest: &CreateRoleConfigRequest{
					RoleConfig: resource,
				}}})
	}

	listRoleDefinition, err := service.ListRoleDefinition(ctx,
		&ListRoleDefinitionRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing RoleDefinition objects")
	}
	for _, resource := range listRoleDefinition.RoleDefinitions {
		response = append(response, &Event{
			Request: &Event_CreateRoleDefinitionRequest{
				CreateRoleDefinitionRequest: &CreateRoleDefinitionRequest{
					RoleDefinition: resource,
				}}})
	}

	listRouteAggregate, err := service.ListRouteAggregate(ctx,
		&ListRouteAggregateRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing RouteAggregate objects")
	}
	for _, resource := range listRouteAggregate.RouteAggregates {
		response = append(response, &Event{
			Request: &Event_CreateRouteAggregateRequest{
				CreateRouteAggregateRequest: &CreateRouteAggregateRequest{
					RouteAggregate: resource,
				}}})
	}

	listRouteTable, err := service.ListRouteTable(ctx,
		&ListRouteTableRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing RouteTable objects")
	}
	for _, resource := range listRouteTable.RouteTables {
		response = append(response, &Event{
			Request: &Event_CreateRouteTableRequest{
				CreateRouteTableRequest: &CreateRouteTableRequest{
					RouteTable: resource,
				}}})
	}

	listRouteTarget, err := service.ListRouteTarget(ctx,
		&ListRouteTargetRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing RouteTarget objects")
	}
	for _, resource := range listRouteTarget.RouteTargets {
		response = append(response, &Event{
			Request: &Event_CreateRouteTargetRequest{
				CreateRouteTargetRequest: &CreateRouteTargetRequest{
					RouteTarget: resource,
				}}})
	}

	listRoutingInstance, err := service.ListRoutingInstance(ctx,
		&ListRoutingInstanceRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing RoutingInstance objects")
	}
	for _, resource := range listRoutingInstance.RoutingInstances {
		response = append(response, &Event{
			Request: &Event_CreateRoutingInstanceRequest{
				CreateRoutingInstanceRequest: &CreateRoutingInstanceRequest{
					RoutingInstance: resource,
				}}})
	}

	listRoutingPolicy, err := service.ListRoutingPolicy(ctx,
		&ListRoutingPolicyRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing RoutingPolicy objects")
	}
	for _, resource := range listRoutingPolicy.RoutingPolicys {
		response = append(response, &Event{
			Request: &Event_CreateRoutingPolicyRequest{
				CreateRoutingPolicyRequest: &CreateRoutingPolicyRequest{
					RoutingPolicy: resource,
				}}})
	}

	listSecurityGroup, err := service.ListSecurityGroup(ctx,
		&ListSecurityGroupRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing SecurityGroup objects")
	}
	for _, resource := range listSecurityGroup.SecurityGroups {
		response = append(response, &Event{
			Request: &Event_CreateSecurityGroupRequest{
				CreateSecurityGroupRequest: &CreateSecurityGroupRequest{
					SecurityGroup: resource,
				}}})
	}

	listSecurityLoggingObject, err := service.ListSecurityLoggingObject(ctx,
		&ListSecurityLoggingObjectRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing SecurityLoggingObject objects")
	}
	for _, resource := range listSecurityLoggingObject.SecurityLoggingObjects {
		response = append(response, &Event{
			Request: &Event_CreateSecurityLoggingObjectRequest{
				CreateSecurityLoggingObjectRequest: &CreateSecurityLoggingObjectRequest{
					SecurityLoggingObject: resource,
				}}})
	}

	listServiceAppliance, err := service.ListServiceAppliance(ctx,
		&ListServiceApplianceRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ServiceAppliance objects")
	}
	for _, resource := range listServiceAppliance.ServiceAppliances {
		response = append(response, &Event{
			Request: &Event_CreateServiceApplianceRequest{
				CreateServiceApplianceRequest: &CreateServiceApplianceRequest{
					ServiceAppliance: resource,
				}}})
	}

	listServiceApplianceSet, err := service.ListServiceApplianceSet(ctx,
		&ListServiceApplianceSetRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ServiceApplianceSet objects")
	}
	for _, resource := range listServiceApplianceSet.ServiceApplianceSets {
		response = append(response, &Event{
			Request: &Event_CreateServiceApplianceSetRequest{
				CreateServiceApplianceSetRequest: &CreateServiceApplianceSetRequest{
					ServiceApplianceSet: resource,
				}}})
	}

	listServiceConnectionModule, err := service.ListServiceConnectionModule(ctx,
		&ListServiceConnectionModuleRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ServiceConnectionModule objects")
	}
	for _, resource := range listServiceConnectionModule.ServiceConnectionModules {
		response = append(response, &Event{
			Request: &Event_CreateServiceConnectionModuleRequest{
				CreateServiceConnectionModuleRequest: &CreateServiceConnectionModuleRequest{
					ServiceConnectionModule: resource,
				}}})
	}

	listServiceEndpoint, err := service.ListServiceEndpoint(ctx,
		&ListServiceEndpointRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ServiceEndpoint objects")
	}
	for _, resource := range listServiceEndpoint.ServiceEndpoints {
		response = append(response, &Event{
			Request: &Event_CreateServiceEndpointRequest{
				CreateServiceEndpointRequest: &CreateServiceEndpointRequest{
					ServiceEndpoint: resource,
				}}})
	}

	listServiceGroup, err := service.ListServiceGroup(ctx,
		&ListServiceGroupRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ServiceGroup objects")
	}
	for _, resource := range listServiceGroup.ServiceGroups {
		response = append(response, &Event{
			Request: &Event_CreateServiceGroupRequest{
				CreateServiceGroupRequest: &CreateServiceGroupRequest{
					ServiceGroup: resource,
				}}})
	}

	listServiceHealthCheck, err := service.ListServiceHealthCheck(ctx,
		&ListServiceHealthCheckRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ServiceHealthCheck objects")
	}
	for _, resource := range listServiceHealthCheck.ServiceHealthChecks {
		response = append(response, &Event{
			Request: &Event_CreateServiceHealthCheckRequest{
				CreateServiceHealthCheckRequest: &CreateServiceHealthCheckRequest{
					ServiceHealthCheck: resource,
				}}})
	}

	listServiceInstance, err := service.ListServiceInstance(ctx,
		&ListServiceInstanceRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ServiceInstance objects")
	}
	for _, resource := range listServiceInstance.ServiceInstances {
		response = append(response, &Event{
			Request: &Event_CreateServiceInstanceRequest{
				CreateServiceInstanceRequest: &CreateServiceInstanceRequest{
					ServiceInstance: resource,
				}}})
	}

	listServiceObject, err := service.ListServiceObject(ctx,
		&ListServiceObjectRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ServiceObject objects")
	}
	for _, resource := range listServiceObject.ServiceObjects {
		response = append(response, &Event{
			Request: &Event_CreateServiceObjectRequest{
				CreateServiceObjectRequest: &CreateServiceObjectRequest{
					ServiceObject: resource,
				}}})
	}

	listServiceTemplate, err := service.ListServiceTemplate(ctx,
		&ListServiceTemplateRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing ServiceTemplate objects")
	}
	for _, resource := range listServiceTemplate.ServiceTemplates {
		response = append(response, &Event{
			Request: &Event_CreateServiceTemplateRequest{
				CreateServiceTemplateRequest: &CreateServiceTemplateRequest{
					ServiceTemplate: resource,
				}}})
	}

	listSflowProfile, err := service.ListSflowProfile(ctx,
		&ListSflowProfileRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing SflowProfile objects")
	}
	for _, resource := range listSflowProfile.SflowProfiles {
		response = append(response, &Event{
			Request: &Event_CreateSflowProfileRequest{
				CreateSflowProfileRequest: &CreateSflowProfileRequest{
					SflowProfile: resource,
				}}})
	}

	listStormControlProfile, err := service.ListStormControlProfile(ctx,
		&ListStormControlProfileRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing StormControlProfile objects")
	}
	for _, resource := range listStormControlProfile.StormControlProfiles {
		response = append(response, &Event{
			Request: &Event_CreateStormControlProfileRequest{
				CreateStormControlProfileRequest: &CreateStormControlProfileRequest{
					StormControlProfile: resource,
				}}})
	}

	listStructuredSyslogApplicationRecord, err := service.ListStructuredSyslogApplicationRecord(ctx,
		&ListStructuredSyslogApplicationRecordRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing StructuredSyslogApplicationRecord objects")
	}
	for _, resource := range listStructuredSyslogApplicationRecord.StructuredSyslogApplicationRecords {
		response = append(response, &Event{
			Request: &Event_CreateStructuredSyslogApplicationRecordRequest{
				CreateStructuredSyslogApplicationRecordRequest: &CreateStructuredSyslogApplicationRecordRequest{
					StructuredSyslogApplicationRecord: resource,
				}}})
	}

	listStructuredSyslogConfig, err := service.ListStructuredSyslogConfig(ctx,
		&ListStructuredSyslogConfigRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing StructuredSyslogConfig objects")
	}
	for _, resource := range listStructuredSyslogConfig.StructuredSyslogConfigs {
		response = append(response, &Event{
			Request: &Event_CreateStructuredSyslogConfigRequest{
				CreateStructuredSyslogConfigRequest: &CreateStructuredSyslogConfigRequest{
					StructuredSyslogConfig: resource,
				}}})
	}

	listStructuredSyslogHostnameRecord, err := service.ListStructuredSyslogHostnameRecord(ctx,
		&ListStructuredSyslogHostnameRecordRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing StructuredSyslogHostnameRecord objects")
	}
	for _, resource := range listStructuredSyslogHostnameRecord.StructuredSyslogHostnameRecords {
		response = append(response, &Event{
			Request: &Event_CreateStructuredSyslogHostnameRecordRequest{
				CreateStructuredSyslogHostnameRecordRequest: &CreateStructuredSyslogHostnameRecordRequest{
					StructuredSyslogHostnameRecord: resource,
				}}})
	}

	listStructuredSyslogMessage, err := service.ListStructuredSyslogMessage(ctx,
		&ListStructuredSyslogMessageRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing StructuredSyslogMessage objects")
	}
	for _, resource := range listStructuredSyslogMessage.StructuredSyslogMessages {
		response = append(response, &Event{
			Request: &Event_CreateStructuredSyslogMessageRequest{
				CreateStructuredSyslogMessageRequest: &CreateStructuredSyslogMessageRequest{
					StructuredSyslogMessage: resource,
				}}})
	}

	listStructuredSyslogSLAProfile, err := service.ListStructuredSyslogSLAProfile(ctx,
		&ListStructuredSyslogSLAProfileRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing StructuredSyslogSLAProfile objects")
	}
	for _, resource := range listStructuredSyslogSLAProfile.StructuredSyslogSLAProfiles {
		response = append(response, &Event{
			Request: &Event_CreateStructuredSyslogSLAProfileRequest{
				CreateStructuredSyslogSLAProfileRequest: &CreateStructuredSyslogSLAProfileRequest{
					StructuredSyslogSLAProfile: resource,
				}}})
	}

	listSubCluster, err := service.ListSubCluster(ctx,
		&ListSubClusterRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing SubCluster objects")
	}
	for _, resource := range listSubCluster.SubClusters {
		response = append(response, &Event{
			Request: &Event_CreateSubClusterRequest{
				CreateSubClusterRequest: &CreateSubClusterRequest{
					SubCluster: resource,
				}}})
	}

	listSubnet, err := service.ListSubnet(ctx,
		&ListSubnetRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Subnet objects")
	}
	for _, resource := range listSubnet.Subnets {
		response = append(response, &Event{
			Request: &Event_CreateSubnetRequest{
				CreateSubnetRequest: &CreateSubnetRequest{
					Subnet: resource,
				}}})
	}

	listTag, err := service.ListTag(ctx,
		&ListTagRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing Tag objects")
	}
	for _, resource := range listTag.Tags {
		response = append(response, &Event{
			Request: &Event_CreateTagRequest{
				CreateTagRequest: &CreateTagRequest{
					Tag: resource,
				}}})
	}

	listTagType, err := service.ListTagType(ctx,
		&ListTagTypeRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing TagType objects")
	}
	for _, resource := range listTagType.TagTypes {
		response = append(response, &Event{
			Request: &Event_CreateTagTypeRequest{
				CreateTagTypeRequest: &CreateTagTypeRequest{
					TagType: resource,
				}}})
	}

	listTelemetryProfile, err := service.ListTelemetryProfile(ctx,
		&ListTelemetryProfileRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing TelemetryProfile objects")
	}
	for _, resource := range listTelemetryProfile.TelemetryProfiles {
		response = append(response, &Event{
			Request: &Event_CreateTelemetryProfileRequest{
				CreateTelemetryProfileRequest: &CreateTelemetryProfileRequest{
					TelemetryProfile: resource,
				}}})
	}

	listVirtualDNSRecord, err := service.ListVirtualDNSRecord(ctx,
		&ListVirtualDNSRecordRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing VirtualDNSRecord objects")
	}
	for _, resource := range listVirtualDNSRecord.VirtualDNSRecords {
		response = append(response, &Event{
			Request: &Event_CreateVirtualDNSRecordRequest{
				CreateVirtualDNSRecordRequest: &CreateVirtualDNSRecordRequest{
					VirtualDNSRecord: resource,
				}}})
	}

	listVirtualDNS, err := service.ListVirtualDNS(ctx,
		&ListVirtualDNSRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing VirtualDNS objects")
	}
	for _, resource := range listVirtualDNS.VirtualDNSs {
		response = append(response, &Event{
			Request: &Event_CreateVirtualDNSRequest{
				CreateVirtualDNSRequest: &CreateVirtualDNSRequest{
					VirtualDNS: resource,
				}}})
	}

	listVirtualIP, err := service.ListVirtualIP(ctx,
		&ListVirtualIPRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing VirtualIP objects")
	}
	for _, resource := range listVirtualIP.VirtualIPs {
		response = append(response, &Event{
			Request: &Event_CreateVirtualIPRequest{
				CreateVirtualIPRequest: &CreateVirtualIPRequest{
					VirtualIP: resource,
				}}})
	}

	listVirtualMachineInterface, err := service.ListVirtualMachineInterface(ctx,
		&ListVirtualMachineInterfaceRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing VirtualMachineInterface objects")
	}
	for _, resource := range listVirtualMachineInterface.VirtualMachineInterfaces {
		response = append(response, &Event{
			Request: &Event_CreateVirtualMachineInterfaceRequest{
				CreateVirtualMachineInterfaceRequest: &CreateVirtualMachineInterfaceRequest{
					VirtualMachineInterface: resource,
				}}})
	}

	listVirtualMachine, err := service.ListVirtualMachine(ctx,
		&ListVirtualMachineRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing VirtualMachine objects")
	}
	for _, resource := range listVirtualMachine.VirtualMachines {
		response = append(response, &Event{
			Request: &Event_CreateVirtualMachineRequest{
				CreateVirtualMachineRequest: &CreateVirtualMachineRequest{
					VirtualMachine: resource,
				}}})
	}

	listVirtualNetwork, err := service.ListVirtualNetwork(ctx,
		&ListVirtualNetworkRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing VirtualNetwork objects")
	}
	for _, resource := range listVirtualNetwork.VirtualNetworks {
		response = append(response, &Event{
			Request: &Event_CreateVirtualNetworkRequest{
				CreateVirtualNetworkRequest: &CreateVirtualNetworkRequest{
					VirtualNetwork: resource,
				}}})
	}

	listVirtualPortGroup, err := service.ListVirtualPortGroup(ctx,
		&ListVirtualPortGroupRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing VirtualPortGroup objects")
	}
	for _, resource := range listVirtualPortGroup.VirtualPortGroups {
		response = append(response, &Event{
			Request: &Event_CreateVirtualPortGroupRequest{
				CreateVirtualPortGroupRequest: &CreateVirtualPortGroupRequest{
					VirtualPortGroup: resource,
				}}})
	}

	listVirtualRouter, err := service.ListVirtualRouter(ctx,
		&ListVirtualRouterRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing VirtualRouter objects")
	}
	for _, resource := range listVirtualRouter.VirtualRouters {
		response = append(response, &Event{
			Request: &Event_CreateVirtualRouterRequest{
				CreateVirtualRouterRequest: &CreateVirtualRouterRequest{
					VirtualRouter: resource,
				}}})
	}

	listWebuiNode, err := service.ListWebuiNode(ctx,
		&ListWebuiNodeRequest{
			&baseservices.ListSpec{
				Detail: true,
			},
		},
	)
	if err != nil {
		return nil, errors.Wrap(err, "error listing WebuiNode objects")
	}
	for _, resource := range listWebuiNode.WebuiNodes {
		response = append(response, &Event{
			Request: &Event_CreateWebuiNodeRequest{
				CreateWebuiNodeRequest: &CreateWebuiNodeRequest{
					WebuiNode: resource,
				}}})
	}

	return &EventList{
		Events: response,
	}, nil
}
