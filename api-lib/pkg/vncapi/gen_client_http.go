// Code generated by contrailschema tool from template /home/ijohnson/gocode/pkg/mod/github.com/!juniper/asf@v0.0.0-20200409074924-f1fbe5303e00/pkg/client/client_http.go.tmpl; DO NOT EDIT.

package client

import (
	"context"
	"net/http"
	"net/url"
	"strconv"

	"github.com/Juniper/asf/pkg/client"
	"github.com/Juniper/asf/pkg/services/baseservices"
	"github.com/pkg/errors"

	services "/github.com/Juniper/contrail-api-client/api-lib/pkg/services"
	models "github.com/Juniper/contrail-api-client/api-lib/pkg/models"
)

// HTTP is an API client that implements services.Service interface.
type HTTP struct {
	services.BaseService
	*client.HTTP
}

// NewHTTP makes API Server HTTP client.
func NewHTTP(c *client.HTTPConfig) *HTTP {
	return &HTTP{HTTP: client.NewHTTP(c)}
}

// NewHTTPFromConfig makes API Server HTTP client with viper config
func NewHTTPFromConfig() *HTTP {
	return &HTTP{HTTP: client.NewHTTPFromConfig()}
}

// RefUpdate sends a create/update API request
// TODO(mblotniak): Move to ASF/pkg/client package, when handler implementation(pkg/services/common.go) is moved.
func (h *HTTP) RefUpdate(ctx context.Context, data interface{}, output interface{}) (*http.Response, error) {
	return h.Do(ctx, http.MethodPost, "/"+baseservices.RefUpdatePath, nil, data, output, []int{http.StatusOK})
}

// CreateIntPool sends a create int pool request to remote int-pools.
// TODO(mblotniak): Move to ASF/pkg/client package, when handler implementation(pkg/services/common.go) is moved.
func (h *HTTP) CreateIntPool(ctx context.Context, pool string, start int64, end int64) error {
	_, err := h.Do(
		ctx,
		http.MethodPost,
		"/"+baseservices.IntPoolsPath,
		nil,
		&services.CreateIntPoolRequest{
			Pool:  pool,
			Start: start,
			End:   end,
		},
		&struct{}{},
		[]int{http.StatusOK},
	)
	return errors.Wrap(err, "error creating int pool in int-pools via HTTP")
}

// GetIntOwner sends a get int pool owner request to remote int-owner.
// TODO(mblotniak): Move to ASF/pkg/client package, when handler implementation(pkg/services/common.go) is moved.
func (h *HTTP) GetIntOwner(ctx context.Context, pool string, value int64) (string, error) {
	q := make(url.Values)
	q.Set("pool", pool)
	q.Set("value", strconv.FormatInt(value, 10))
	var output struct {
		Owner string `json:"owner"`
	}

	_, err := h.Do(ctx, http.MethodGet, "/"+baseservices.IntPoolPath, q, nil, &output, []int{http.StatusOK})
	return output.Owner, errors.Wrap(err, "error getting int pool owner via HTTP")
}

// DeleteIntPool sends a delete int pool request to remote int-pools.
// TODO(mblotniak): Move to ASF/pkg/client package, when handler implementation(pkg/services/common.go) is moved.
func (h *HTTP) DeleteIntPool(ctx context.Context, pool string) error {
	_, err := h.Do(
		ctx,
		http.MethodDelete,
		"/"+baseservices.IntPoolsPath,
		nil,
		&services.DeleteIntPoolRequest{
			Pool: pool,
		},
		&struct{}{},
		[]int{http.StatusOK},
	)
	return errors.Wrap(err, "error deleting int pool in int-pools via HTTP")
}

// AllocateInt sends an allocate int request to remote int-pool.
// TODO(mblotniak): Move to ASF/pkg/client package, when handler implementation(pkg/services/common.go) is moved.
func (h *HTTP) AllocateInt(ctx context.Context, pool, owner string) (int64, error) {
	var output struct {
		Value int64 `json:"value"`
	}
	_, err := h.Do(
		ctx,
		http.MethodPost,
		"/"+baseservices.IntPoolPath,
		nil,
		&services.IntPoolAllocationBody{
			Pool:  pool,
			Owner: owner,
		},
		&output,
		[]int{http.StatusOK},
	)
	return output.Value, errors.Wrap(err, "error allocating int in int-pool via HTTP")
}

// SetInt sends a set int request to remote int-pool.
// TODO(mblotniak): Move to ASF/pkg/client package, when handler implementation(pkg/services/common.go) is moved.
func (h *HTTP) SetInt(ctx context.Context, pool string, value int64, owner string) error {
	_, err := h.Do(
		ctx,
		http.MethodPost,
		"/"+baseservices.IntPoolPath,
		nil,
		&services.IntPoolAllocationBody{
			Pool:  pool,
			Value: &value,
			Owner: owner,
		},
		&struct{}{},
		[]int{http.StatusOK},
	)
	return errors.Wrap(err, "error setting int in int-pool via HTTP")
}

// DeallocateInt sends a deallocate int request to remote int-pool.
// TODO(mblotniak): Move to ASF/pkg/client package, when handler implementation(pkg/services/common.go) is moved.
func (h *HTTP) DeallocateInt(ctx context.Context, pool string, value int64) error {
	_, err := h.Do(
		ctx,
		http.MethodDelete,
		"/"+baseservices.IntPoolPath,
		nil,
		&services.IntPoolAllocationBody{
			Pool:  pool,
			Value: &value,
		},
		&struct{}{},
		[]int{http.StatusOK},
	)
	return errors.Wrap(err, "error deallocating int in int-pool via HTTP")
}

func (h *HTTP) CreateAccessControlList(ctx context.Context, request *services.CreateAccessControlListRequest) (*services.CreateAccessControlListResponse, error) {
	response := &services.CreateAccessControlListResponse{}
	_, err := h.Create(ctx, "/access-control-lists", request, response)
	return response, err
}

func (h *HTTP) UpdateAccessControlList(ctx context.Context, request *services.UpdateAccessControlListRequest) (*services.UpdateAccessControlListResponse, error) {
	response := &services.UpdateAccessControlListResponse{}
	_, err := h.Update(ctx, "/access-control-list/"+request.AccessControlList.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteAccessControlList(ctx context.Context, request *services.DeleteAccessControlListRequest) (*services.DeleteAccessControlListResponse, error) {
	response := &services.DeleteAccessControlListResponse{}
	_, err := h.Delete(ctx, "/access-control-list/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetAccessControlList(ctx context.Context, request *services.GetAccessControlListRequest) (*services.GetAccessControlListResponse, error) {
	response := &services.GetAccessControlListResponse{}
	_, err := h.Read(ctx, "/access-control-list/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListAccessControlList(ctx context.Context, request *services.ListAccessControlListRequest) (*services.ListAccessControlListResponse, error) {
	response := &services.ListAccessControlListResponse{}
	_, err := h.ReadWithQuery(ctx, "/access-control-lists", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateAccessControlListTagRef(
	ctx context.Context, request *services.CreateAccessControlListTagRefRequest,
) (*services.CreateAccessControlListTagRefResponse, error) {
	data := getRefUpdateFromRequestAccessControlListTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateAccessControlListTagRefResponse)(request), nil
}

func (h *HTTP) DeleteAccessControlListTagRef(
	ctx context.Context, request *services.DeleteAccessControlListTagRefRequest,
) (*services.DeleteAccessControlListTagRefResponse, error) {
	data := getRefUpdateFromRequestAccessControlListTagRef((*services.CreateAccessControlListTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteAccessControlListTagRefResponse)(request), nil
}

func getRefUpdateFromRequestAccessControlListTagRef(request *services.CreateAccessControlListTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetAccessControlListTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "access-control-list",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateAddressGroup(ctx context.Context, request *services.CreateAddressGroupRequest) (*services.CreateAddressGroupResponse, error) {
	response := &services.CreateAddressGroupResponse{}
	_, err := h.Create(ctx, "/address-groups", request, response)
	return response, err
}

func (h *HTTP) UpdateAddressGroup(ctx context.Context, request *services.UpdateAddressGroupRequest) (*services.UpdateAddressGroupResponse, error) {
	response := &services.UpdateAddressGroupResponse{}
	_, err := h.Update(ctx, "/address-group/"+request.AddressGroup.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteAddressGroup(ctx context.Context, request *services.DeleteAddressGroupRequest) (*services.DeleteAddressGroupResponse, error) {
	response := &services.DeleteAddressGroupResponse{}
	_, err := h.Delete(ctx, "/address-group/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetAddressGroup(ctx context.Context, request *services.GetAddressGroupRequest) (*services.GetAddressGroupResponse, error) {
	response := &services.GetAddressGroupResponse{}
	_, err := h.Read(ctx, "/address-group/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListAddressGroup(ctx context.Context, request *services.ListAddressGroupRequest) (*services.ListAddressGroupResponse, error) {
	response := &services.ListAddressGroupResponse{}
	_, err := h.ReadWithQuery(ctx, "/address-groups", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateAddressGroupTagRef(
	ctx context.Context, request *services.CreateAddressGroupTagRefRequest,
) (*services.CreateAddressGroupTagRefResponse, error) {
	data := getRefUpdateFromRequestAddressGroupTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateAddressGroupTagRefResponse)(request), nil
}

func (h *HTTP) DeleteAddressGroupTagRef(
	ctx context.Context, request *services.DeleteAddressGroupTagRefRequest,
) (*services.DeleteAddressGroupTagRefResponse, error) {
	data := getRefUpdateFromRequestAddressGroupTagRef((*services.CreateAddressGroupTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteAddressGroupTagRefResponse)(request), nil
}

func getRefUpdateFromRequestAddressGroupTagRef(request *services.CreateAddressGroupTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetAddressGroupTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "address-group",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateAlarm(ctx context.Context, request *services.CreateAlarmRequest) (*services.CreateAlarmResponse, error) {
	response := &services.CreateAlarmResponse{}
	_, err := h.Create(ctx, "/alarms", request, response)
	return response, err
}

func (h *HTTP) UpdateAlarm(ctx context.Context, request *services.UpdateAlarmRequest) (*services.UpdateAlarmResponse, error) {
	response := &services.UpdateAlarmResponse{}
	_, err := h.Update(ctx, "/alarm/"+request.Alarm.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteAlarm(ctx context.Context, request *services.DeleteAlarmRequest) (*services.DeleteAlarmResponse, error) {
	response := &services.DeleteAlarmResponse{}
	_, err := h.Delete(ctx, "/alarm/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetAlarm(ctx context.Context, request *services.GetAlarmRequest) (*services.GetAlarmResponse, error) {
	response := &services.GetAlarmResponse{}
	_, err := h.Read(ctx, "/alarm/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListAlarm(ctx context.Context, request *services.ListAlarmRequest) (*services.ListAlarmResponse, error) {
	response := &services.ListAlarmResponse{}
	_, err := h.ReadWithQuery(ctx, "/alarms", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateAlarmTagRef(
	ctx context.Context, request *services.CreateAlarmTagRefRequest,
) (*services.CreateAlarmTagRefResponse, error) {
	data := getRefUpdateFromRequestAlarmTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateAlarmTagRefResponse)(request), nil
}

func (h *HTTP) DeleteAlarmTagRef(
	ctx context.Context, request *services.DeleteAlarmTagRefRequest,
) (*services.DeleteAlarmTagRefResponse, error) {
	data := getRefUpdateFromRequestAlarmTagRef((*services.CreateAlarmTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteAlarmTagRefResponse)(request), nil
}

func getRefUpdateFromRequestAlarmTagRef(request *services.CreateAlarmTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetAlarmTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "alarm",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateAliasIPPool(ctx context.Context, request *services.CreateAliasIPPoolRequest) (*services.CreateAliasIPPoolResponse, error) {
	response := &services.CreateAliasIPPoolResponse{}
	_, err := h.Create(ctx, "/alias-ip-pools", request, response)
	return response, err
}

func (h *HTTP) UpdateAliasIPPool(ctx context.Context, request *services.UpdateAliasIPPoolRequest) (*services.UpdateAliasIPPoolResponse, error) {
	response := &services.UpdateAliasIPPoolResponse{}
	_, err := h.Update(ctx, "/alias-ip-pool/"+request.AliasIPPool.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteAliasIPPool(ctx context.Context, request *services.DeleteAliasIPPoolRequest) (*services.DeleteAliasIPPoolResponse, error) {
	response := &services.DeleteAliasIPPoolResponse{}
	_, err := h.Delete(ctx, "/alias-ip-pool/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetAliasIPPool(ctx context.Context, request *services.GetAliasIPPoolRequest) (*services.GetAliasIPPoolResponse, error) {
	response := &services.GetAliasIPPoolResponse{}
	_, err := h.Read(ctx, "/alias-ip-pool/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListAliasIPPool(ctx context.Context, request *services.ListAliasIPPoolRequest) (*services.ListAliasIPPoolResponse, error) {
	response := &services.ListAliasIPPoolResponse{}
	_, err := h.ReadWithQuery(ctx, "/alias-ip-pools", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateAliasIPPoolTagRef(
	ctx context.Context, request *services.CreateAliasIPPoolTagRefRequest,
) (*services.CreateAliasIPPoolTagRefResponse, error) {
	data := getRefUpdateFromRequestAliasIPPoolTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateAliasIPPoolTagRefResponse)(request), nil
}

func (h *HTTP) DeleteAliasIPPoolTagRef(
	ctx context.Context, request *services.DeleteAliasIPPoolTagRefRequest,
) (*services.DeleteAliasIPPoolTagRefResponse, error) {
	data := getRefUpdateFromRequestAliasIPPoolTagRef((*services.CreateAliasIPPoolTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteAliasIPPoolTagRefResponse)(request), nil
}

func getRefUpdateFromRequestAliasIPPoolTagRef(request *services.CreateAliasIPPoolTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetAliasIPPoolTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "alias-ip-pool",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateAliasIP(ctx context.Context, request *services.CreateAliasIPRequest) (*services.CreateAliasIPResponse, error) {
	response := &services.CreateAliasIPResponse{}
	_, err := h.Create(ctx, "/alias-ips", request, response)
	return response, err
}

func (h *HTTP) UpdateAliasIP(ctx context.Context, request *services.UpdateAliasIPRequest) (*services.UpdateAliasIPResponse, error) {
	response := &services.UpdateAliasIPResponse{}
	_, err := h.Update(ctx, "/alias-ip/"+request.AliasIP.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteAliasIP(ctx context.Context, request *services.DeleteAliasIPRequest) (*services.DeleteAliasIPResponse, error) {
	response := &services.DeleteAliasIPResponse{}
	_, err := h.Delete(ctx, "/alias-ip/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetAliasIP(ctx context.Context, request *services.GetAliasIPRequest) (*services.GetAliasIPResponse, error) {
	response := &services.GetAliasIPResponse{}
	_, err := h.Read(ctx, "/alias-ip/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListAliasIP(ctx context.Context, request *services.ListAliasIPRequest) (*services.ListAliasIPResponse, error) {
	response := &services.ListAliasIPResponse{}
	_, err := h.ReadWithQuery(ctx, "/alias-ips", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateAliasIPProjectRef(
	ctx context.Context, request *services.CreateAliasIPProjectRefRequest,
) (*services.CreateAliasIPProjectRefResponse, error) {
	data := getRefUpdateFromRequestAliasIPProjectRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateAliasIPProjectRefResponse)(request), nil
}

func (h *HTTP) DeleteAliasIPProjectRef(
	ctx context.Context, request *services.DeleteAliasIPProjectRefRequest,
) (*services.DeleteAliasIPProjectRefResponse, error) {
	data := getRefUpdateFromRequestAliasIPProjectRef((*services.CreateAliasIPProjectRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteAliasIPProjectRefResponse)(request), nil
}

func getRefUpdateFromRequestAliasIPProjectRef(request *services.CreateAliasIPProjectRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetAliasIPProjectRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "alias-ip",
			UUID:      id,
			RefType:   "project",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateAliasIPTagRef(
	ctx context.Context, request *services.CreateAliasIPTagRefRequest,
) (*services.CreateAliasIPTagRefResponse, error) {
	data := getRefUpdateFromRequestAliasIPTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateAliasIPTagRefResponse)(request), nil
}

func (h *HTTP) DeleteAliasIPTagRef(
	ctx context.Context, request *services.DeleteAliasIPTagRefRequest,
) (*services.DeleteAliasIPTagRefResponse, error) {
	data := getRefUpdateFromRequestAliasIPTagRef((*services.CreateAliasIPTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteAliasIPTagRefResponse)(request), nil
}

func getRefUpdateFromRequestAliasIPTagRef(request *services.CreateAliasIPTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetAliasIPTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "alias-ip",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateAliasIPVirtualMachineInterfaceRef(
	ctx context.Context, request *services.CreateAliasIPVirtualMachineInterfaceRefRequest,
) (*services.CreateAliasIPVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestAliasIPVirtualMachineInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateAliasIPVirtualMachineInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteAliasIPVirtualMachineInterfaceRef(
	ctx context.Context, request *services.DeleteAliasIPVirtualMachineInterfaceRefRequest,
) (*services.DeleteAliasIPVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestAliasIPVirtualMachineInterfaceRef((*services.CreateAliasIPVirtualMachineInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteAliasIPVirtualMachineInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestAliasIPVirtualMachineInterfaceRef(request *services.CreateAliasIPVirtualMachineInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetAliasIPVirtualMachineInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "alias-ip",
			UUID:      id,
			RefType:   "virtual-machine-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateAnalyticsAlarmNode(ctx context.Context, request *services.CreateAnalyticsAlarmNodeRequest) (*services.CreateAnalyticsAlarmNodeResponse, error) {
	response := &services.CreateAnalyticsAlarmNodeResponse{}
	_, err := h.Create(ctx, "/analytics-alarm-nodes", request, response)
	return response, err
}

func (h *HTTP) UpdateAnalyticsAlarmNode(ctx context.Context, request *services.UpdateAnalyticsAlarmNodeRequest) (*services.UpdateAnalyticsAlarmNodeResponse, error) {
	response := &services.UpdateAnalyticsAlarmNodeResponse{}
	_, err := h.Update(ctx, "/analytics-alarm-node/"+request.AnalyticsAlarmNode.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteAnalyticsAlarmNode(ctx context.Context, request *services.DeleteAnalyticsAlarmNodeRequest) (*services.DeleteAnalyticsAlarmNodeResponse, error) {
	response := &services.DeleteAnalyticsAlarmNodeResponse{}
	_, err := h.Delete(ctx, "/analytics-alarm-node/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetAnalyticsAlarmNode(ctx context.Context, request *services.GetAnalyticsAlarmNodeRequest) (*services.GetAnalyticsAlarmNodeResponse, error) {
	response := &services.GetAnalyticsAlarmNodeResponse{}
	_, err := h.Read(ctx, "/analytics-alarm-node/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListAnalyticsAlarmNode(ctx context.Context, request *services.ListAnalyticsAlarmNodeRequest) (*services.ListAnalyticsAlarmNodeResponse, error) {
	response := &services.ListAnalyticsAlarmNodeResponse{}
	_, err := h.ReadWithQuery(ctx, "/analytics-alarm-nodes", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateAnalyticsAlarmNodeTagRef(
	ctx context.Context, request *services.CreateAnalyticsAlarmNodeTagRefRequest,
) (*services.CreateAnalyticsAlarmNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestAnalyticsAlarmNodeTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateAnalyticsAlarmNodeTagRefResponse)(request), nil
}

func (h *HTTP) DeleteAnalyticsAlarmNodeTagRef(
	ctx context.Context, request *services.DeleteAnalyticsAlarmNodeTagRefRequest,
) (*services.DeleteAnalyticsAlarmNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestAnalyticsAlarmNodeTagRef((*services.CreateAnalyticsAlarmNodeTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteAnalyticsAlarmNodeTagRefResponse)(request), nil
}

func getRefUpdateFromRequestAnalyticsAlarmNodeTagRef(request *services.CreateAnalyticsAlarmNodeTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetAnalyticsAlarmNodeTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "analytics-alarm-node",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateAnalyticsNode(ctx context.Context, request *services.CreateAnalyticsNodeRequest) (*services.CreateAnalyticsNodeResponse, error) {
	response := &services.CreateAnalyticsNodeResponse{}
	_, err := h.Create(ctx, "/analytics-nodes", request, response)
	return response, err
}

func (h *HTTP) UpdateAnalyticsNode(ctx context.Context, request *services.UpdateAnalyticsNodeRequest) (*services.UpdateAnalyticsNodeResponse, error) {
	response := &services.UpdateAnalyticsNodeResponse{}
	_, err := h.Update(ctx, "/analytics-node/"+request.AnalyticsNode.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteAnalyticsNode(ctx context.Context, request *services.DeleteAnalyticsNodeRequest) (*services.DeleteAnalyticsNodeResponse, error) {
	response := &services.DeleteAnalyticsNodeResponse{}
	_, err := h.Delete(ctx, "/analytics-node/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetAnalyticsNode(ctx context.Context, request *services.GetAnalyticsNodeRequest) (*services.GetAnalyticsNodeResponse, error) {
	response := &services.GetAnalyticsNodeResponse{}
	_, err := h.Read(ctx, "/analytics-node/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListAnalyticsNode(ctx context.Context, request *services.ListAnalyticsNodeRequest) (*services.ListAnalyticsNodeResponse, error) {
	response := &services.ListAnalyticsNodeResponse{}
	_, err := h.ReadWithQuery(ctx, "/analytics-nodes", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateAnalyticsNodeTagRef(
	ctx context.Context, request *services.CreateAnalyticsNodeTagRefRequest,
) (*services.CreateAnalyticsNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestAnalyticsNodeTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateAnalyticsNodeTagRefResponse)(request), nil
}

func (h *HTTP) DeleteAnalyticsNodeTagRef(
	ctx context.Context, request *services.DeleteAnalyticsNodeTagRefRequest,
) (*services.DeleteAnalyticsNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestAnalyticsNodeTagRef((*services.CreateAnalyticsNodeTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteAnalyticsNodeTagRefResponse)(request), nil
}

func getRefUpdateFromRequestAnalyticsNodeTagRef(request *services.CreateAnalyticsNodeTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetAnalyticsNodeTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "analytics-node",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateAnalyticsSNMPNode(ctx context.Context, request *services.CreateAnalyticsSNMPNodeRequest) (*services.CreateAnalyticsSNMPNodeResponse, error) {
	response := &services.CreateAnalyticsSNMPNodeResponse{}
	_, err := h.Create(ctx, "/analytics-snmp-nodes", request, response)
	return response, err
}

func (h *HTTP) UpdateAnalyticsSNMPNode(ctx context.Context, request *services.UpdateAnalyticsSNMPNodeRequest) (*services.UpdateAnalyticsSNMPNodeResponse, error) {
	response := &services.UpdateAnalyticsSNMPNodeResponse{}
	_, err := h.Update(ctx, "/analytics-snmp-node/"+request.AnalyticsSNMPNode.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteAnalyticsSNMPNode(ctx context.Context, request *services.DeleteAnalyticsSNMPNodeRequest) (*services.DeleteAnalyticsSNMPNodeResponse, error) {
	response := &services.DeleteAnalyticsSNMPNodeResponse{}
	_, err := h.Delete(ctx, "/analytics-snmp-node/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetAnalyticsSNMPNode(ctx context.Context, request *services.GetAnalyticsSNMPNodeRequest) (*services.GetAnalyticsSNMPNodeResponse, error) {
	response := &services.GetAnalyticsSNMPNodeResponse{}
	_, err := h.Read(ctx, "/analytics-snmp-node/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListAnalyticsSNMPNode(ctx context.Context, request *services.ListAnalyticsSNMPNodeRequest) (*services.ListAnalyticsSNMPNodeResponse, error) {
	response := &services.ListAnalyticsSNMPNodeResponse{}
	_, err := h.ReadWithQuery(ctx, "/analytics-snmp-nodes", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateAnalyticsSNMPNodeTagRef(
	ctx context.Context, request *services.CreateAnalyticsSNMPNodeTagRefRequest,
) (*services.CreateAnalyticsSNMPNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestAnalyticsSNMPNodeTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateAnalyticsSNMPNodeTagRefResponse)(request), nil
}

func (h *HTTP) DeleteAnalyticsSNMPNodeTagRef(
	ctx context.Context, request *services.DeleteAnalyticsSNMPNodeTagRefRequest,
) (*services.DeleteAnalyticsSNMPNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestAnalyticsSNMPNodeTagRef((*services.CreateAnalyticsSNMPNodeTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteAnalyticsSNMPNodeTagRefResponse)(request), nil
}

func getRefUpdateFromRequestAnalyticsSNMPNodeTagRef(request *services.CreateAnalyticsSNMPNodeTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetAnalyticsSNMPNodeTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "analytics-snmp-node",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateAPIAccessList(ctx context.Context, request *services.CreateAPIAccessListRequest) (*services.CreateAPIAccessListResponse, error) {
	response := &services.CreateAPIAccessListResponse{}
	_, err := h.Create(ctx, "/api-access-lists", request, response)
	return response, err
}

func (h *HTTP) UpdateAPIAccessList(ctx context.Context, request *services.UpdateAPIAccessListRequest) (*services.UpdateAPIAccessListResponse, error) {
	response := &services.UpdateAPIAccessListResponse{}
	_, err := h.Update(ctx, "/api-access-list/"+request.APIAccessList.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteAPIAccessList(ctx context.Context, request *services.DeleteAPIAccessListRequest) (*services.DeleteAPIAccessListResponse, error) {
	response := &services.DeleteAPIAccessListResponse{}
	_, err := h.Delete(ctx, "/api-access-list/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetAPIAccessList(ctx context.Context, request *services.GetAPIAccessListRequest) (*services.GetAPIAccessListResponse, error) {
	response := &services.GetAPIAccessListResponse{}
	_, err := h.Read(ctx, "/api-access-list/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListAPIAccessList(ctx context.Context, request *services.ListAPIAccessListRequest) (*services.ListAPIAccessListResponse, error) {
	response := &services.ListAPIAccessListResponse{}
	_, err := h.ReadWithQuery(ctx, "/api-access-lists", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateAPIAccessListTagRef(
	ctx context.Context, request *services.CreateAPIAccessListTagRefRequest,
) (*services.CreateAPIAccessListTagRefResponse, error) {
	data := getRefUpdateFromRequestAPIAccessListTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateAPIAccessListTagRefResponse)(request), nil
}

func (h *HTTP) DeleteAPIAccessListTagRef(
	ctx context.Context, request *services.DeleteAPIAccessListTagRefRequest,
) (*services.DeleteAPIAccessListTagRefResponse, error) {
	data := getRefUpdateFromRequestAPIAccessListTagRef((*services.CreateAPIAccessListTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteAPIAccessListTagRefResponse)(request), nil
}

func getRefUpdateFromRequestAPIAccessListTagRef(request *services.CreateAPIAccessListTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetAPIAccessListTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "api-access-list",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateApplicationPolicySet(ctx context.Context, request *services.CreateApplicationPolicySetRequest) (*services.CreateApplicationPolicySetResponse, error) {
	response := &services.CreateApplicationPolicySetResponse{}
	_, err := h.Create(ctx, "/application-policy-sets", request, response)
	return response, err
}

func (h *HTTP) UpdateApplicationPolicySet(ctx context.Context, request *services.UpdateApplicationPolicySetRequest) (*services.UpdateApplicationPolicySetResponse, error) {
	response := &services.UpdateApplicationPolicySetResponse{}
	_, err := h.Update(ctx, "/application-policy-set/"+request.ApplicationPolicySet.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteApplicationPolicySet(ctx context.Context, request *services.DeleteApplicationPolicySetRequest) (*services.DeleteApplicationPolicySetResponse, error) {
	response := &services.DeleteApplicationPolicySetResponse{}
	_, err := h.Delete(ctx, "/application-policy-set/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetApplicationPolicySet(ctx context.Context, request *services.GetApplicationPolicySetRequest) (*services.GetApplicationPolicySetResponse, error) {
	response := &services.GetApplicationPolicySetResponse{}
	_, err := h.Read(ctx, "/application-policy-set/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListApplicationPolicySet(ctx context.Context, request *services.ListApplicationPolicySetRequest) (*services.ListApplicationPolicySetResponse, error) {
	response := &services.ListApplicationPolicySetResponse{}
	_, err := h.ReadWithQuery(ctx, "/application-policy-sets", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateApplicationPolicySetFirewallPolicyRef(
	ctx context.Context, request *services.CreateApplicationPolicySetFirewallPolicyRefRequest,
) (*services.CreateApplicationPolicySetFirewallPolicyRefResponse, error) {
	data := getRefUpdateFromRequestApplicationPolicySetFirewallPolicyRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateApplicationPolicySetFirewallPolicyRefResponse)(request), nil
}

func (h *HTTP) DeleteApplicationPolicySetFirewallPolicyRef(
	ctx context.Context, request *services.DeleteApplicationPolicySetFirewallPolicyRefRequest,
) (*services.DeleteApplicationPolicySetFirewallPolicyRefResponse, error) {
	data := getRefUpdateFromRequestApplicationPolicySetFirewallPolicyRef((*services.CreateApplicationPolicySetFirewallPolicyRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteApplicationPolicySetFirewallPolicyRefResponse)(request), nil
}

func getRefUpdateFromRequestApplicationPolicySetFirewallPolicyRef(request *services.CreateApplicationPolicySetFirewallPolicyRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetApplicationPolicySetFirewallPolicyRef()

	data := struct {
		services.RefUpdate

		Attr *models.FirewallSequence `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "application-policy-set",
			UUID:      id,
			RefType:   "firewall-policy",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateApplicationPolicySetGlobalVrouterConfigRef(
	ctx context.Context, request *services.CreateApplicationPolicySetGlobalVrouterConfigRefRequest,
) (*services.CreateApplicationPolicySetGlobalVrouterConfigRefResponse, error) {
	data := getRefUpdateFromRequestApplicationPolicySetGlobalVrouterConfigRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateApplicationPolicySetGlobalVrouterConfigRefResponse)(request), nil
}

func (h *HTTP) DeleteApplicationPolicySetGlobalVrouterConfigRef(
	ctx context.Context, request *services.DeleteApplicationPolicySetGlobalVrouterConfigRefRequest,
) (*services.DeleteApplicationPolicySetGlobalVrouterConfigRefResponse, error) {
	data := getRefUpdateFromRequestApplicationPolicySetGlobalVrouterConfigRef((*services.CreateApplicationPolicySetGlobalVrouterConfigRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteApplicationPolicySetGlobalVrouterConfigRefResponse)(request), nil
}

func getRefUpdateFromRequestApplicationPolicySetGlobalVrouterConfigRef(request *services.CreateApplicationPolicySetGlobalVrouterConfigRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetApplicationPolicySetGlobalVrouterConfigRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "application-policy-set",
			UUID:      id,
			RefType:   "global-vrouter-config",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateApplicationPolicySetTagRef(
	ctx context.Context, request *services.CreateApplicationPolicySetTagRefRequest,
) (*services.CreateApplicationPolicySetTagRefResponse, error) {
	data := getRefUpdateFromRequestApplicationPolicySetTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateApplicationPolicySetTagRefResponse)(request), nil
}

func (h *HTTP) DeleteApplicationPolicySetTagRef(
	ctx context.Context, request *services.DeleteApplicationPolicySetTagRefRequest,
) (*services.DeleteApplicationPolicySetTagRefResponse, error) {
	data := getRefUpdateFromRequestApplicationPolicySetTagRef((*services.CreateApplicationPolicySetTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteApplicationPolicySetTagRefResponse)(request), nil
}

func getRefUpdateFromRequestApplicationPolicySetTagRef(request *services.CreateApplicationPolicySetTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetApplicationPolicySetTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "application-policy-set",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateBGPAsAService(ctx context.Context, request *services.CreateBGPAsAServiceRequest) (*services.CreateBGPAsAServiceResponse, error) {
	response := &services.CreateBGPAsAServiceResponse{}
	_, err := h.Create(ctx, "/bgp-as-a-services", request, response)
	return response, err
}

func (h *HTTP) UpdateBGPAsAService(ctx context.Context, request *services.UpdateBGPAsAServiceRequest) (*services.UpdateBGPAsAServiceResponse, error) {
	response := &services.UpdateBGPAsAServiceResponse{}
	_, err := h.Update(ctx, "/bgp-as-a-service/"+request.BGPAsAService.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteBGPAsAService(ctx context.Context, request *services.DeleteBGPAsAServiceRequest) (*services.DeleteBGPAsAServiceResponse, error) {
	response := &services.DeleteBGPAsAServiceResponse{}
	_, err := h.Delete(ctx, "/bgp-as-a-service/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetBGPAsAService(ctx context.Context, request *services.GetBGPAsAServiceRequest) (*services.GetBGPAsAServiceResponse, error) {
	response := &services.GetBGPAsAServiceResponse{}
	_, err := h.Read(ctx, "/bgp-as-a-service/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListBGPAsAService(ctx context.Context, request *services.ListBGPAsAServiceRequest) (*services.ListBGPAsAServiceResponse, error) {
	response := &services.ListBGPAsAServiceResponse{}
	_, err := h.ReadWithQuery(ctx, "/bgp-as-a-services", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateBGPAsAServiceBGPRouterRef(
	ctx context.Context, request *services.CreateBGPAsAServiceBGPRouterRefRequest,
) (*services.CreateBGPAsAServiceBGPRouterRefResponse, error) {
	data := getRefUpdateFromRequestBGPAsAServiceBGPRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateBGPAsAServiceBGPRouterRefResponse)(request), nil
}

func (h *HTTP) DeleteBGPAsAServiceBGPRouterRef(
	ctx context.Context, request *services.DeleteBGPAsAServiceBGPRouterRefRequest,
) (*services.DeleteBGPAsAServiceBGPRouterRefResponse, error) {
	data := getRefUpdateFromRequestBGPAsAServiceBGPRouterRef((*services.CreateBGPAsAServiceBGPRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteBGPAsAServiceBGPRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestBGPAsAServiceBGPRouterRef(request *services.CreateBGPAsAServiceBGPRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetBGPAsAServiceBGPRouterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "bgp-as-a-service",
			UUID:      id,
			RefType:   "bgp-router",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateBGPAsAServiceControlNodeZoneRef(
	ctx context.Context, request *services.CreateBGPAsAServiceControlNodeZoneRefRequest,
) (*services.CreateBGPAsAServiceControlNodeZoneRefResponse, error) {
	data := getRefUpdateFromRequestBGPAsAServiceControlNodeZoneRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateBGPAsAServiceControlNodeZoneRefResponse)(request), nil
}

func (h *HTTP) DeleteBGPAsAServiceControlNodeZoneRef(
	ctx context.Context, request *services.DeleteBGPAsAServiceControlNodeZoneRefRequest,
) (*services.DeleteBGPAsAServiceControlNodeZoneRefResponse, error) {
	data := getRefUpdateFromRequestBGPAsAServiceControlNodeZoneRef((*services.CreateBGPAsAServiceControlNodeZoneRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteBGPAsAServiceControlNodeZoneRefResponse)(request), nil
}

func getRefUpdateFromRequestBGPAsAServiceControlNodeZoneRef(request *services.CreateBGPAsAServiceControlNodeZoneRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetBGPAsAServiceControlNodeZoneRef()

	data := struct {
		services.RefUpdate

		Attr *models.BGPaaSControlNodeZoneAttributes `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "bgp-as-a-service",
			UUID:      id,
			RefType:   "control-node-zone",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateBGPAsAServiceServiceHealthCheckRef(
	ctx context.Context, request *services.CreateBGPAsAServiceServiceHealthCheckRefRequest,
) (*services.CreateBGPAsAServiceServiceHealthCheckRefResponse, error) {
	data := getRefUpdateFromRequestBGPAsAServiceServiceHealthCheckRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateBGPAsAServiceServiceHealthCheckRefResponse)(request), nil
}

func (h *HTTP) DeleteBGPAsAServiceServiceHealthCheckRef(
	ctx context.Context, request *services.DeleteBGPAsAServiceServiceHealthCheckRefRequest,
) (*services.DeleteBGPAsAServiceServiceHealthCheckRefResponse, error) {
	data := getRefUpdateFromRequestBGPAsAServiceServiceHealthCheckRef((*services.CreateBGPAsAServiceServiceHealthCheckRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteBGPAsAServiceServiceHealthCheckRefResponse)(request), nil
}

func getRefUpdateFromRequestBGPAsAServiceServiceHealthCheckRef(request *services.CreateBGPAsAServiceServiceHealthCheckRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetBGPAsAServiceServiceHealthCheckRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "bgp-as-a-service",
			UUID:      id,
			RefType:   "service-health-check",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateBGPAsAServiceTagRef(
	ctx context.Context, request *services.CreateBGPAsAServiceTagRefRequest,
) (*services.CreateBGPAsAServiceTagRefResponse, error) {
	data := getRefUpdateFromRequestBGPAsAServiceTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateBGPAsAServiceTagRefResponse)(request), nil
}

func (h *HTTP) DeleteBGPAsAServiceTagRef(
	ctx context.Context, request *services.DeleteBGPAsAServiceTagRefRequest,
) (*services.DeleteBGPAsAServiceTagRefResponse, error) {
	data := getRefUpdateFromRequestBGPAsAServiceTagRef((*services.CreateBGPAsAServiceTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteBGPAsAServiceTagRefResponse)(request), nil
}

func getRefUpdateFromRequestBGPAsAServiceTagRef(request *services.CreateBGPAsAServiceTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetBGPAsAServiceTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "bgp-as-a-service",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateBGPAsAServiceVirtualMachineInterfaceRef(
	ctx context.Context, request *services.CreateBGPAsAServiceVirtualMachineInterfaceRefRequest,
) (*services.CreateBGPAsAServiceVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestBGPAsAServiceVirtualMachineInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateBGPAsAServiceVirtualMachineInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteBGPAsAServiceVirtualMachineInterfaceRef(
	ctx context.Context, request *services.DeleteBGPAsAServiceVirtualMachineInterfaceRefRequest,
) (*services.DeleteBGPAsAServiceVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestBGPAsAServiceVirtualMachineInterfaceRef((*services.CreateBGPAsAServiceVirtualMachineInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteBGPAsAServiceVirtualMachineInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestBGPAsAServiceVirtualMachineInterfaceRef(request *services.CreateBGPAsAServiceVirtualMachineInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetBGPAsAServiceVirtualMachineInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "bgp-as-a-service",
			UUID:      id,
			RefType:   "virtual-machine-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateBGPRouter(ctx context.Context, request *services.CreateBGPRouterRequest) (*services.CreateBGPRouterResponse, error) {
	response := &services.CreateBGPRouterResponse{}
	_, err := h.Create(ctx, "/bgp-routers", request, response)
	return response, err
}

func (h *HTTP) UpdateBGPRouter(ctx context.Context, request *services.UpdateBGPRouterRequest) (*services.UpdateBGPRouterResponse, error) {
	response := &services.UpdateBGPRouterResponse{}
	_, err := h.Update(ctx, "/bgp-router/"+request.BGPRouter.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteBGPRouter(ctx context.Context, request *services.DeleteBGPRouterRequest) (*services.DeleteBGPRouterResponse, error) {
	response := &services.DeleteBGPRouterResponse{}
	_, err := h.Delete(ctx, "/bgp-router/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetBGPRouter(ctx context.Context, request *services.GetBGPRouterRequest) (*services.GetBGPRouterResponse, error) {
	response := &services.GetBGPRouterResponse{}
	_, err := h.Read(ctx, "/bgp-router/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListBGPRouter(ctx context.Context, request *services.ListBGPRouterRequest) (*services.ListBGPRouterResponse, error) {
	response := &services.ListBGPRouterResponse{}
	_, err := h.ReadWithQuery(ctx, "/bgp-routers", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateBGPRouterBGPRouterRef(
	ctx context.Context, request *services.CreateBGPRouterBGPRouterRefRequest,
) (*services.CreateBGPRouterBGPRouterRefResponse, error) {
	data := getRefUpdateFromRequestBGPRouterBGPRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateBGPRouterBGPRouterRefResponse)(request), nil
}

func (h *HTTP) DeleteBGPRouterBGPRouterRef(
	ctx context.Context, request *services.DeleteBGPRouterBGPRouterRefRequest,
) (*services.DeleteBGPRouterBGPRouterRefResponse, error) {
	data := getRefUpdateFromRequestBGPRouterBGPRouterRef((*services.CreateBGPRouterBGPRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteBGPRouterBGPRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestBGPRouterBGPRouterRef(request *services.CreateBGPRouterBGPRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetBGPRouterBGPRouterRef()

	data := struct {
		services.RefUpdate

		Attr *models.BgpPeeringAttributes `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "bgp-router",
			UUID:      id,
			RefType:   "bgp-router",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateBGPRouterControlNodeZoneRef(
	ctx context.Context, request *services.CreateBGPRouterControlNodeZoneRefRequest,
) (*services.CreateBGPRouterControlNodeZoneRefResponse, error) {
	data := getRefUpdateFromRequestBGPRouterControlNodeZoneRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateBGPRouterControlNodeZoneRefResponse)(request), nil
}

func (h *HTTP) DeleteBGPRouterControlNodeZoneRef(
	ctx context.Context, request *services.DeleteBGPRouterControlNodeZoneRefRequest,
) (*services.DeleteBGPRouterControlNodeZoneRefResponse, error) {
	data := getRefUpdateFromRequestBGPRouterControlNodeZoneRef((*services.CreateBGPRouterControlNodeZoneRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteBGPRouterControlNodeZoneRefResponse)(request), nil
}

func getRefUpdateFromRequestBGPRouterControlNodeZoneRef(request *services.CreateBGPRouterControlNodeZoneRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetBGPRouterControlNodeZoneRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "bgp-router",
			UUID:      id,
			RefType:   "control-node-zone",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateBGPRouterSubClusterRef(
	ctx context.Context, request *services.CreateBGPRouterSubClusterRefRequest,
) (*services.CreateBGPRouterSubClusterRefResponse, error) {
	data := getRefUpdateFromRequestBGPRouterSubClusterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateBGPRouterSubClusterRefResponse)(request), nil
}

func (h *HTTP) DeleteBGPRouterSubClusterRef(
	ctx context.Context, request *services.DeleteBGPRouterSubClusterRefRequest,
) (*services.DeleteBGPRouterSubClusterRefResponse, error) {
	data := getRefUpdateFromRequestBGPRouterSubClusterRef((*services.CreateBGPRouterSubClusterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteBGPRouterSubClusterRefResponse)(request), nil
}

func getRefUpdateFromRequestBGPRouterSubClusterRef(request *services.CreateBGPRouterSubClusterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetBGPRouterSubClusterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "bgp-router",
			UUID:      id,
			RefType:   "sub-cluster",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateBGPRouterTagRef(
	ctx context.Context, request *services.CreateBGPRouterTagRefRequest,
) (*services.CreateBGPRouterTagRefResponse, error) {
	data := getRefUpdateFromRequestBGPRouterTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateBGPRouterTagRefResponse)(request), nil
}

func (h *HTTP) DeleteBGPRouterTagRef(
	ctx context.Context, request *services.DeleteBGPRouterTagRefRequest,
) (*services.DeleteBGPRouterTagRefResponse, error) {
	data := getRefUpdateFromRequestBGPRouterTagRef((*services.CreateBGPRouterTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteBGPRouterTagRefResponse)(request), nil
}

func getRefUpdateFromRequestBGPRouterTagRef(request *services.CreateBGPRouterTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetBGPRouterTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "bgp-router",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateBGPVPN(ctx context.Context, request *services.CreateBGPVPNRequest) (*services.CreateBGPVPNResponse, error) {
	response := &services.CreateBGPVPNResponse{}
	_, err := h.Create(ctx, "/bgpvpns", request, response)
	return response, err
}

func (h *HTTP) UpdateBGPVPN(ctx context.Context, request *services.UpdateBGPVPNRequest) (*services.UpdateBGPVPNResponse, error) {
	response := &services.UpdateBGPVPNResponse{}
	_, err := h.Update(ctx, "/bgpvpn/"+request.BGPVPN.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteBGPVPN(ctx context.Context, request *services.DeleteBGPVPNRequest) (*services.DeleteBGPVPNResponse, error) {
	response := &services.DeleteBGPVPNResponse{}
	_, err := h.Delete(ctx, "/bgpvpn/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetBGPVPN(ctx context.Context, request *services.GetBGPVPNRequest) (*services.GetBGPVPNResponse, error) {
	response := &services.GetBGPVPNResponse{}
	_, err := h.Read(ctx, "/bgpvpn/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListBGPVPN(ctx context.Context, request *services.ListBGPVPNRequest) (*services.ListBGPVPNResponse, error) {
	response := &services.ListBGPVPNResponse{}
	_, err := h.ReadWithQuery(ctx, "/bgpvpns", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateBGPVPNTagRef(
	ctx context.Context, request *services.CreateBGPVPNTagRefRequest,
) (*services.CreateBGPVPNTagRefResponse, error) {
	data := getRefUpdateFromRequestBGPVPNTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateBGPVPNTagRefResponse)(request), nil
}

func (h *HTTP) DeleteBGPVPNTagRef(
	ctx context.Context, request *services.DeleteBGPVPNTagRefRequest,
) (*services.DeleteBGPVPNTagRefResponse, error) {
	data := getRefUpdateFromRequestBGPVPNTagRef((*services.CreateBGPVPNTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteBGPVPNTagRefResponse)(request), nil
}

func getRefUpdateFromRequestBGPVPNTagRef(request *services.CreateBGPVPNTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetBGPVPNTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "bgpvpn",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateBridgeDomain(ctx context.Context, request *services.CreateBridgeDomainRequest) (*services.CreateBridgeDomainResponse, error) {
	response := &services.CreateBridgeDomainResponse{}
	_, err := h.Create(ctx, "/bridge-domains", request, response)
	return response, err
}

func (h *HTTP) UpdateBridgeDomain(ctx context.Context, request *services.UpdateBridgeDomainRequest) (*services.UpdateBridgeDomainResponse, error) {
	response := &services.UpdateBridgeDomainResponse{}
	_, err := h.Update(ctx, "/bridge-domain/"+request.BridgeDomain.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteBridgeDomain(ctx context.Context, request *services.DeleteBridgeDomainRequest) (*services.DeleteBridgeDomainResponse, error) {
	response := &services.DeleteBridgeDomainResponse{}
	_, err := h.Delete(ctx, "/bridge-domain/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetBridgeDomain(ctx context.Context, request *services.GetBridgeDomainRequest) (*services.GetBridgeDomainResponse, error) {
	response := &services.GetBridgeDomainResponse{}
	_, err := h.Read(ctx, "/bridge-domain/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListBridgeDomain(ctx context.Context, request *services.ListBridgeDomainRequest) (*services.ListBridgeDomainResponse, error) {
	response := &services.ListBridgeDomainResponse{}
	_, err := h.ReadWithQuery(ctx, "/bridge-domains", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateBridgeDomainTagRef(
	ctx context.Context, request *services.CreateBridgeDomainTagRefRequest,
) (*services.CreateBridgeDomainTagRefResponse, error) {
	data := getRefUpdateFromRequestBridgeDomainTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateBridgeDomainTagRefResponse)(request), nil
}

func (h *HTTP) DeleteBridgeDomainTagRef(
	ctx context.Context, request *services.DeleteBridgeDomainTagRefRequest,
) (*services.DeleteBridgeDomainTagRefResponse, error) {
	data := getRefUpdateFromRequestBridgeDomainTagRef((*services.CreateBridgeDomainTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteBridgeDomainTagRefResponse)(request), nil
}

func getRefUpdateFromRequestBridgeDomainTagRef(request *services.CreateBridgeDomainTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetBridgeDomainTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "bridge-domain",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateCard(ctx context.Context, request *services.CreateCardRequest) (*services.CreateCardResponse, error) {
	response := &services.CreateCardResponse{}
	_, err := h.Create(ctx, "/cards", request, response)
	return response, err
}

func (h *HTTP) UpdateCard(ctx context.Context, request *services.UpdateCardRequest) (*services.UpdateCardResponse, error) {
	response := &services.UpdateCardResponse{}
	_, err := h.Update(ctx, "/card/"+request.Card.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteCard(ctx context.Context, request *services.DeleteCardRequest) (*services.DeleteCardResponse, error) {
	response := &services.DeleteCardResponse{}
	_, err := h.Delete(ctx, "/card/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetCard(ctx context.Context, request *services.GetCardRequest) (*services.GetCardResponse, error) {
	response := &services.GetCardResponse{}
	_, err := h.Read(ctx, "/card/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListCard(ctx context.Context, request *services.ListCardRequest) (*services.ListCardResponse, error) {
	response := &services.ListCardResponse{}
	_, err := h.ReadWithQuery(ctx, "/cards", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateCardTagRef(
	ctx context.Context, request *services.CreateCardTagRefRequest,
) (*services.CreateCardTagRefResponse, error) {
	data := getRefUpdateFromRequestCardTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateCardTagRefResponse)(request), nil
}

func (h *HTTP) DeleteCardTagRef(
	ctx context.Context, request *services.DeleteCardTagRefRequest,
) (*services.DeleteCardTagRefResponse, error) {
	data := getRefUpdateFromRequestCardTagRef((*services.CreateCardTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteCardTagRefResponse)(request), nil
}

func getRefUpdateFromRequestCardTagRef(request *services.CreateCardTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetCardTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "card",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateCliConfig(ctx context.Context, request *services.CreateCliConfigRequest) (*services.CreateCliConfigResponse, error) {
	response := &services.CreateCliConfigResponse{}
	_, err := h.Create(ctx, "/cli-configs", request, response)
	return response, err
}

func (h *HTTP) UpdateCliConfig(ctx context.Context, request *services.UpdateCliConfigRequest) (*services.UpdateCliConfigResponse, error) {
	response := &services.UpdateCliConfigResponse{}
	_, err := h.Update(ctx, "/cli-config/"+request.CliConfig.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteCliConfig(ctx context.Context, request *services.DeleteCliConfigRequest) (*services.DeleteCliConfigResponse, error) {
	response := &services.DeleteCliConfigResponse{}
	_, err := h.Delete(ctx, "/cli-config/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetCliConfig(ctx context.Context, request *services.GetCliConfigRequest) (*services.GetCliConfigResponse, error) {
	response := &services.GetCliConfigResponse{}
	_, err := h.Read(ctx, "/cli-config/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListCliConfig(ctx context.Context, request *services.ListCliConfigRequest) (*services.ListCliConfigResponse, error) {
	response := &services.ListCliConfigResponse{}
	_, err := h.ReadWithQuery(ctx, "/cli-configs", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateCliConfigTagRef(
	ctx context.Context, request *services.CreateCliConfigTagRefRequest,
) (*services.CreateCliConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestCliConfigTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateCliConfigTagRefResponse)(request), nil
}

func (h *HTTP) DeleteCliConfigTagRef(
	ctx context.Context, request *services.DeleteCliConfigTagRefRequest,
) (*services.DeleteCliConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestCliConfigTagRef((*services.CreateCliConfigTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteCliConfigTagRefResponse)(request), nil
}

func getRefUpdateFromRequestCliConfigTagRef(request *services.CreateCliConfigTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetCliConfigTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "cli-config",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateConfigDatabaseNode(ctx context.Context, request *services.CreateConfigDatabaseNodeRequest) (*services.CreateConfigDatabaseNodeResponse, error) {
	response := &services.CreateConfigDatabaseNodeResponse{}
	_, err := h.Create(ctx, "/config-database-nodes", request, response)
	return response, err
}

func (h *HTTP) UpdateConfigDatabaseNode(ctx context.Context, request *services.UpdateConfigDatabaseNodeRequest) (*services.UpdateConfigDatabaseNodeResponse, error) {
	response := &services.UpdateConfigDatabaseNodeResponse{}
	_, err := h.Update(ctx, "/config-database-node/"+request.ConfigDatabaseNode.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteConfigDatabaseNode(ctx context.Context, request *services.DeleteConfigDatabaseNodeRequest) (*services.DeleteConfigDatabaseNodeResponse, error) {
	response := &services.DeleteConfigDatabaseNodeResponse{}
	_, err := h.Delete(ctx, "/config-database-node/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetConfigDatabaseNode(ctx context.Context, request *services.GetConfigDatabaseNodeRequest) (*services.GetConfigDatabaseNodeResponse, error) {
	response := &services.GetConfigDatabaseNodeResponse{}
	_, err := h.Read(ctx, "/config-database-node/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListConfigDatabaseNode(ctx context.Context, request *services.ListConfigDatabaseNodeRequest) (*services.ListConfigDatabaseNodeResponse, error) {
	response := &services.ListConfigDatabaseNodeResponse{}
	_, err := h.ReadWithQuery(ctx, "/config-database-nodes", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateConfigDatabaseNodeTagRef(
	ctx context.Context, request *services.CreateConfigDatabaseNodeTagRefRequest,
) (*services.CreateConfigDatabaseNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestConfigDatabaseNodeTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateConfigDatabaseNodeTagRefResponse)(request), nil
}

func (h *HTTP) DeleteConfigDatabaseNodeTagRef(
	ctx context.Context, request *services.DeleteConfigDatabaseNodeTagRefRequest,
) (*services.DeleteConfigDatabaseNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestConfigDatabaseNodeTagRef((*services.CreateConfigDatabaseNodeTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteConfigDatabaseNodeTagRefResponse)(request), nil
}

func getRefUpdateFromRequestConfigDatabaseNodeTagRef(request *services.CreateConfigDatabaseNodeTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetConfigDatabaseNodeTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "config-database-node",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateConfigNode(ctx context.Context, request *services.CreateConfigNodeRequest) (*services.CreateConfigNodeResponse, error) {
	response := &services.CreateConfigNodeResponse{}
	_, err := h.Create(ctx, "/config-nodes", request, response)
	return response, err
}

func (h *HTTP) UpdateConfigNode(ctx context.Context, request *services.UpdateConfigNodeRequest) (*services.UpdateConfigNodeResponse, error) {
	response := &services.UpdateConfigNodeResponse{}
	_, err := h.Update(ctx, "/config-node/"+request.ConfigNode.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteConfigNode(ctx context.Context, request *services.DeleteConfigNodeRequest) (*services.DeleteConfigNodeResponse, error) {
	response := &services.DeleteConfigNodeResponse{}
	_, err := h.Delete(ctx, "/config-node/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetConfigNode(ctx context.Context, request *services.GetConfigNodeRequest) (*services.GetConfigNodeResponse, error) {
	response := &services.GetConfigNodeResponse{}
	_, err := h.Read(ctx, "/config-node/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListConfigNode(ctx context.Context, request *services.ListConfigNodeRequest) (*services.ListConfigNodeResponse, error) {
	response := &services.ListConfigNodeResponse{}
	_, err := h.ReadWithQuery(ctx, "/config-nodes", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateConfigNodeTagRef(
	ctx context.Context, request *services.CreateConfigNodeTagRefRequest,
) (*services.CreateConfigNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestConfigNodeTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateConfigNodeTagRefResponse)(request), nil
}

func (h *HTTP) DeleteConfigNodeTagRef(
	ctx context.Context, request *services.DeleteConfigNodeTagRefRequest,
) (*services.DeleteConfigNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestConfigNodeTagRef((*services.CreateConfigNodeTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteConfigNodeTagRefResponse)(request), nil
}

func getRefUpdateFromRequestConfigNodeTagRef(request *services.CreateConfigNodeTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetConfigNodeTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "config-node",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateConfigRoot(ctx context.Context, request *services.CreateConfigRootRequest) (*services.CreateConfigRootResponse, error) {
	response := &services.CreateConfigRootResponse{}
	_, err := h.Create(ctx, "/config-roots", request, response)
	return response, err
}

func (h *HTTP) UpdateConfigRoot(ctx context.Context, request *services.UpdateConfigRootRequest) (*services.UpdateConfigRootResponse, error) {
	response := &services.UpdateConfigRootResponse{}
	_, err := h.Update(ctx, "/config-root/"+request.ConfigRoot.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteConfigRoot(ctx context.Context, request *services.DeleteConfigRootRequest) (*services.DeleteConfigRootResponse, error) {
	response := &services.DeleteConfigRootResponse{}
	_, err := h.Delete(ctx, "/config-root/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetConfigRoot(ctx context.Context, request *services.GetConfigRootRequest) (*services.GetConfigRootResponse, error) {
	response := &services.GetConfigRootResponse{}
	_, err := h.Read(ctx, "/config-root/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListConfigRoot(ctx context.Context, request *services.ListConfigRootRequest) (*services.ListConfigRootResponse, error) {
	response := &services.ListConfigRootResponse{}
	_, err := h.ReadWithQuery(ctx, "/config-roots", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateConfigRootTagRef(
	ctx context.Context, request *services.CreateConfigRootTagRefRequest,
) (*services.CreateConfigRootTagRefResponse, error) {
	data := getRefUpdateFromRequestConfigRootTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateConfigRootTagRefResponse)(request), nil
}

func (h *HTTP) DeleteConfigRootTagRef(
	ctx context.Context, request *services.DeleteConfigRootTagRefRequest,
) (*services.DeleteConfigRootTagRefResponse, error) {
	data := getRefUpdateFromRequestConfigRootTagRef((*services.CreateConfigRootTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteConfigRootTagRefResponse)(request), nil
}

func getRefUpdateFromRequestConfigRootTagRef(request *services.CreateConfigRootTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetConfigRootTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "config-root",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateControlNodeZone(ctx context.Context, request *services.CreateControlNodeZoneRequest) (*services.CreateControlNodeZoneResponse, error) {
	response := &services.CreateControlNodeZoneResponse{}
	_, err := h.Create(ctx, "/control-node-zones", request, response)
	return response, err
}

func (h *HTTP) UpdateControlNodeZone(ctx context.Context, request *services.UpdateControlNodeZoneRequest) (*services.UpdateControlNodeZoneResponse, error) {
	response := &services.UpdateControlNodeZoneResponse{}
	_, err := h.Update(ctx, "/control-node-zone/"+request.ControlNodeZone.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteControlNodeZone(ctx context.Context, request *services.DeleteControlNodeZoneRequest) (*services.DeleteControlNodeZoneResponse, error) {
	response := &services.DeleteControlNodeZoneResponse{}
	_, err := h.Delete(ctx, "/control-node-zone/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetControlNodeZone(ctx context.Context, request *services.GetControlNodeZoneRequest) (*services.GetControlNodeZoneResponse, error) {
	response := &services.GetControlNodeZoneResponse{}
	_, err := h.Read(ctx, "/control-node-zone/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListControlNodeZone(ctx context.Context, request *services.ListControlNodeZoneRequest) (*services.ListControlNodeZoneResponse, error) {
	response := &services.ListControlNodeZoneResponse{}
	_, err := h.ReadWithQuery(ctx, "/control-node-zones", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateControlNodeZoneTagRef(
	ctx context.Context, request *services.CreateControlNodeZoneTagRefRequest,
) (*services.CreateControlNodeZoneTagRefResponse, error) {
	data := getRefUpdateFromRequestControlNodeZoneTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateControlNodeZoneTagRefResponse)(request), nil
}

func (h *HTTP) DeleteControlNodeZoneTagRef(
	ctx context.Context, request *services.DeleteControlNodeZoneTagRefRequest,
) (*services.DeleteControlNodeZoneTagRefResponse, error) {
	data := getRefUpdateFromRequestControlNodeZoneTagRef((*services.CreateControlNodeZoneTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteControlNodeZoneTagRefResponse)(request), nil
}

func getRefUpdateFromRequestControlNodeZoneTagRef(request *services.CreateControlNodeZoneTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetControlNodeZoneTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "control-node-zone",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateCustomerAttachment(ctx context.Context, request *services.CreateCustomerAttachmentRequest) (*services.CreateCustomerAttachmentResponse, error) {
	response := &services.CreateCustomerAttachmentResponse{}
	_, err := h.Create(ctx, "/customer-attachments", request, response)
	return response, err
}

func (h *HTTP) UpdateCustomerAttachment(ctx context.Context, request *services.UpdateCustomerAttachmentRequest) (*services.UpdateCustomerAttachmentResponse, error) {
	response := &services.UpdateCustomerAttachmentResponse{}
	_, err := h.Update(ctx, "/customer-attachment/"+request.CustomerAttachment.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteCustomerAttachment(ctx context.Context, request *services.DeleteCustomerAttachmentRequest) (*services.DeleteCustomerAttachmentResponse, error) {
	response := &services.DeleteCustomerAttachmentResponse{}
	_, err := h.Delete(ctx, "/customer-attachment/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetCustomerAttachment(ctx context.Context, request *services.GetCustomerAttachmentRequest) (*services.GetCustomerAttachmentResponse, error) {
	response := &services.GetCustomerAttachmentResponse{}
	_, err := h.Read(ctx, "/customer-attachment/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListCustomerAttachment(ctx context.Context, request *services.ListCustomerAttachmentRequest) (*services.ListCustomerAttachmentResponse, error) {
	response := &services.ListCustomerAttachmentResponse{}
	_, err := h.ReadWithQuery(ctx, "/customer-attachments", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateCustomerAttachmentFloatingIPRef(
	ctx context.Context, request *services.CreateCustomerAttachmentFloatingIPRefRequest,
) (*services.CreateCustomerAttachmentFloatingIPRefResponse, error) {
	data := getRefUpdateFromRequestCustomerAttachmentFloatingIPRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateCustomerAttachmentFloatingIPRefResponse)(request), nil
}

func (h *HTTP) DeleteCustomerAttachmentFloatingIPRef(
	ctx context.Context, request *services.DeleteCustomerAttachmentFloatingIPRefRequest,
) (*services.DeleteCustomerAttachmentFloatingIPRefResponse, error) {
	data := getRefUpdateFromRequestCustomerAttachmentFloatingIPRef((*services.CreateCustomerAttachmentFloatingIPRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteCustomerAttachmentFloatingIPRefResponse)(request), nil
}

func getRefUpdateFromRequestCustomerAttachmentFloatingIPRef(request *services.CreateCustomerAttachmentFloatingIPRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetCustomerAttachmentFloatingIPRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "customer-attachment",
			UUID:      id,
			RefType:   "floating-ip",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateCustomerAttachmentTagRef(
	ctx context.Context, request *services.CreateCustomerAttachmentTagRefRequest,
) (*services.CreateCustomerAttachmentTagRefResponse, error) {
	data := getRefUpdateFromRequestCustomerAttachmentTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateCustomerAttachmentTagRefResponse)(request), nil
}

func (h *HTTP) DeleteCustomerAttachmentTagRef(
	ctx context.Context, request *services.DeleteCustomerAttachmentTagRefRequest,
) (*services.DeleteCustomerAttachmentTagRefResponse, error) {
	data := getRefUpdateFromRequestCustomerAttachmentTagRef((*services.CreateCustomerAttachmentTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteCustomerAttachmentTagRefResponse)(request), nil
}

func getRefUpdateFromRequestCustomerAttachmentTagRef(request *services.CreateCustomerAttachmentTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetCustomerAttachmentTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "customer-attachment",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateCustomerAttachmentVirtualMachineInterfaceRef(
	ctx context.Context, request *services.CreateCustomerAttachmentVirtualMachineInterfaceRefRequest,
) (*services.CreateCustomerAttachmentVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestCustomerAttachmentVirtualMachineInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateCustomerAttachmentVirtualMachineInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteCustomerAttachmentVirtualMachineInterfaceRef(
	ctx context.Context, request *services.DeleteCustomerAttachmentVirtualMachineInterfaceRefRequest,
) (*services.DeleteCustomerAttachmentVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestCustomerAttachmentVirtualMachineInterfaceRef((*services.CreateCustomerAttachmentVirtualMachineInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteCustomerAttachmentVirtualMachineInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestCustomerAttachmentVirtualMachineInterfaceRef(request *services.CreateCustomerAttachmentVirtualMachineInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetCustomerAttachmentVirtualMachineInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "customer-attachment",
			UUID:      id,
			RefType:   "virtual-machine-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateDataCenterInterconnect(ctx context.Context, request *services.CreateDataCenterInterconnectRequest) (*services.CreateDataCenterInterconnectResponse, error) {
	response := &services.CreateDataCenterInterconnectResponse{}
	_, err := h.Create(ctx, "/data-center-interconnects", request, response)
	return response, err
}

func (h *HTTP) UpdateDataCenterInterconnect(ctx context.Context, request *services.UpdateDataCenterInterconnectRequest) (*services.UpdateDataCenterInterconnectResponse, error) {
	response := &services.UpdateDataCenterInterconnectResponse{}
	_, err := h.Update(ctx, "/data-center-interconnect/"+request.DataCenterInterconnect.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteDataCenterInterconnect(ctx context.Context, request *services.DeleteDataCenterInterconnectRequest) (*services.DeleteDataCenterInterconnectResponse, error) {
	response := &services.DeleteDataCenterInterconnectResponse{}
	_, err := h.Delete(ctx, "/data-center-interconnect/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetDataCenterInterconnect(ctx context.Context, request *services.GetDataCenterInterconnectRequest) (*services.GetDataCenterInterconnectResponse, error) {
	response := &services.GetDataCenterInterconnectResponse{}
	_, err := h.Read(ctx, "/data-center-interconnect/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListDataCenterInterconnect(ctx context.Context, request *services.ListDataCenterInterconnectRequest) (*services.ListDataCenterInterconnectResponse, error) {
	response := &services.ListDataCenterInterconnectResponse{}
	_, err := h.ReadWithQuery(ctx, "/data-center-interconnects", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateDataCenterInterconnectLogicalRouterRef(
	ctx context.Context, request *services.CreateDataCenterInterconnectLogicalRouterRefRequest,
) (*services.CreateDataCenterInterconnectLogicalRouterRefResponse, error) {
	data := getRefUpdateFromRequestDataCenterInterconnectLogicalRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateDataCenterInterconnectLogicalRouterRefResponse)(request), nil
}

func (h *HTTP) DeleteDataCenterInterconnectLogicalRouterRef(
	ctx context.Context, request *services.DeleteDataCenterInterconnectLogicalRouterRefRequest,
) (*services.DeleteDataCenterInterconnectLogicalRouterRefResponse, error) {
	data := getRefUpdateFromRequestDataCenterInterconnectLogicalRouterRef((*services.CreateDataCenterInterconnectLogicalRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteDataCenterInterconnectLogicalRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestDataCenterInterconnectLogicalRouterRef(request *services.CreateDataCenterInterconnectLogicalRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetDataCenterInterconnectLogicalRouterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "data-center-interconnect",
			UUID:      id,
			RefType:   "logical-router",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateDataCenterInterconnectTagRef(
	ctx context.Context, request *services.CreateDataCenterInterconnectTagRefRequest,
) (*services.CreateDataCenterInterconnectTagRefResponse, error) {
	data := getRefUpdateFromRequestDataCenterInterconnectTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateDataCenterInterconnectTagRefResponse)(request), nil
}

func (h *HTTP) DeleteDataCenterInterconnectTagRef(
	ctx context.Context, request *services.DeleteDataCenterInterconnectTagRefRequest,
) (*services.DeleteDataCenterInterconnectTagRefResponse, error) {
	data := getRefUpdateFromRequestDataCenterInterconnectTagRef((*services.CreateDataCenterInterconnectTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteDataCenterInterconnectTagRefResponse)(request), nil
}

func getRefUpdateFromRequestDataCenterInterconnectTagRef(request *services.CreateDataCenterInterconnectTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetDataCenterInterconnectTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "data-center-interconnect",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateDataCenterInterconnectVirtualNetworkRef(
	ctx context.Context, request *services.CreateDataCenterInterconnectVirtualNetworkRefRequest,
) (*services.CreateDataCenterInterconnectVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestDataCenterInterconnectVirtualNetworkRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateDataCenterInterconnectVirtualNetworkRefResponse)(request), nil
}

func (h *HTTP) DeleteDataCenterInterconnectVirtualNetworkRef(
	ctx context.Context, request *services.DeleteDataCenterInterconnectVirtualNetworkRefRequest,
) (*services.DeleteDataCenterInterconnectVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestDataCenterInterconnectVirtualNetworkRef((*services.CreateDataCenterInterconnectVirtualNetworkRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteDataCenterInterconnectVirtualNetworkRefResponse)(request), nil
}

func getRefUpdateFromRequestDataCenterInterconnectVirtualNetworkRef(request *services.CreateDataCenterInterconnectVirtualNetworkRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetDataCenterInterconnectVirtualNetworkRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "data-center-interconnect",
			UUID:      id,
			RefType:   "virtual-network",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateDatabaseNode(ctx context.Context, request *services.CreateDatabaseNodeRequest) (*services.CreateDatabaseNodeResponse, error) {
	response := &services.CreateDatabaseNodeResponse{}
	_, err := h.Create(ctx, "/database-nodes", request, response)
	return response, err
}

func (h *HTTP) UpdateDatabaseNode(ctx context.Context, request *services.UpdateDatabaseNodeRequest) (*services.UpdateDatabaseNodeResponse, error) {
	response := &services.UpdateDatabaseNodeResponse{}
	_, err := h.Update(ctx, "/database-node/"+request.DatabaseNode.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteDatabaseNode(ctx context.Context, request *services.DeleteDatabaseNodeRequest) (*services.DeleteDatabaseNodeResponse, error) {
	response := &services.DeleteDatabaseNodeResponse{}
	_, err := h.Delete(ctx, "/database-node/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetDatabaseNode(ctx context.Context, request *services.GetDatabaseNodeRequest) (*services.GetDatabaseNodeResponse, error) {
	response := &services.GetDatabaseNodeResponse{}
	_, err := h.Read(ctx, "/database-node/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListDatabaseNode(ctx context.Context, request *services.ListDatabaseNodeRequest) (*services.ListDatabaseNodeResponse, error) {
	response := &services.ListDatabaseNodeResponse{}
	_, err := h.ReadWithQuery(ctx, "/database-nodes", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateDatabaseNodeTagRef(
	ctx context.Context, request *services.CreateDatabaseNodeTagRefRequest,
) (*services.CreateDatabaseNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestDatabaseNodeTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateDatabaseNodeTagRefResponse)(request), nil
}

func (h *HTTP) DeleteDatabaseNodeTagRef(
	ctx context.Context, request *services.DeleteDatabaseNodeTagRefRequest,
) (*services.DeleteDatabaseNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestDatabaseNodeTagRef((*services.CreateDatabaseNodeTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteDatabaseNodeTagRefResponse)(request), nil
}

func getRefUpdateFromRequestDatabaseNodeTagRef(request *services.CreateDatabaseNodeTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetDatabaseNodeTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "database-node",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateDeviceChassis(ctx context.Context, request *services.CreateDeviceChassisRequest) (*services.CreateDeviceChassisResponse, error) {
	response := &services.CreateDeviceChassisResponse{}
	_, err := h.Create(ctx, "/device-chassiss", request, response)
	return response, err
}

func (h *HTTP) UpdateDeviceChassis(ctx context.Context, request *services.UpdateDeviceChassisRequest) (*services.UpdateDeviceChassisResponse, error) {
	response := &services.UpdateDeviceChassisResponse{}
	_, err := h.Update(ctx, "/device-chassis/"+request.DeviceChassis.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteDeviceChassis(ctx context.Context, request *services.DeleteDeviceChassisRequest) (*services.DeleteDeviceChassisResponse, error) {
	response := &services.DeleteDeviceChassisResponse{}
	_, err := h.Delete(ctx, "/device-chassis/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetDeviceChassis(ctx context.Context, request *services.GetDeviceChassisRequest) (*services.GetDeviceChassisResponse, error) {
	response := &services.GetDeviceChassisResponse{}
	_, err := h.Read(ctx, "/device-chassis/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListDeviceChassis(ctx context.Context, request *services.ListDeviceChassisRequest) (*services.ListDeviceChassisResponse, error) {
	response := &services.ListDeviceChassisResponse{}
	_, err := h.ReadWithQuery(ctx, "/device-chassiss", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateDeviceChassisTagRef(
	ctx context.Context, request *services.CreateDeviceChassisTagRefRequest,
) (*services.CreateDeviceChassisTagRefResponse, error) {
	data := getRefUpdateFromRequestDeviceChassisTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateDeviceChassisTagRefResponse)(request), nil
}

func (h *HTTP) DeleteDeviceChassisTagRef(
	ctx context.Context, request *services.DeleteDeviceChassisTagRefRequest,
) (*services.DeleteDeviceChassisTagRefResponse, error) {
	data := getRefUpdateFromRequestDeviceChassisTagRef((*services.CreateDeviceChassisTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteDeviceChassisTagRefResponse)(request), nil
}

func getRefUpdateFromRequestDeviceChassisTagRef(request *services.CreateDeviceChassisTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetDeviceChassisTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "device-chassis",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateDeviceFunctionalGroup(ctx context.Context, request *services.CreateDeviceFunctionalGroupRequest) (*services.CreateDeviceFunctionalGroupResponse, error) {
	response := &services.CreateDeviceFunctionalGroupResponse{}
	_, err := h.Create(ctx, "/device-functional-groups", request, response)
	return response, err
}

func (h *HTTP) UpdateDeviceFunctionalGroup(ctx context.Context, request *services.UpdateDeviceFunctionalGroupRequest) (*services.UpdateDeviceFunctionalGroupResponse, error) {
	response := &services.UpdateDeviceFunctionalGroupResponse{}
	_, err := h.Update(ctx, "/device-functional-group/"+request.DeviceFunctionalGroup.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteDeviceFunctionalGroup(ctx context.Context, request *services.DeleteDeviceFunctionalGroupRequest) (*services.DeleteDeviceFunctionalGroupResponse, error) {
	response := &services.DeleteDeviceFunctionalGroupResponse{}
	_, err := h.Delete(ctx, "/device-functional-group/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetDeviceFunctionalGroup(ctx context.Context, request *services.GetDeviceFunctionalGroupRequest) (*services.GetDeviceFunctionalGroupResponse, error) {
	response := &services.GetDeviceFunctionalGroupResponse{}
	_, err := h.Read(ctx, "/device-functional-group/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListDeviceFunctionalGroup(ctx context.Context, request *services.ListDeviceFunctionalGroupRequest) (*services.ListDeviceFunctionalGroupResponse, error) {
	response := &services.ListDeviceFunctionalGroupResponse{}
	_, err := h.ReadWithQuery(ctx, "/device-functional-groups", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateDeviceFunctionalGroupPhysicalRoleRef(
	ctx context.Context, request *services.CreateDeviceFunctionalGroupPhysicalRoleRefRequest,
) (*services.CreateDeviceFunctionalGroupPhysicalRoleRefResponse, error) {
	data := getRefUpdateFromRequestDeviceFunctionalGroupPhysicalRoleRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateDeviceFunctionalGroupPhysicalRoleRefResponse)(request), nil
}

func (h *HTTP) DeleteDeviceFunctionalGroupPhysicalRoleRef(
	ctx context.Context, request *services.DeleteDeviceFunctionalGroupPhysicalRoleRefRequest,
) (*services.DeleteDeviceFunctionalGroupPhysicalRoleRefResponse, error) {
	data := getRefUpdateFromRequestDeviceFunctionalGroupPhysicalRoleRef((*services.CreateDeviceFunctionalGroupPhysicalRoleRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteDeviceFunctionalGroupPhysicalRoleRefResponse)(request), nil
}

func getRefUpdateFromRequestDeviceFunctionalGroupPhysicalRoleRef(request *services.CreateDeviceFunctionalGroupPhysicalRoleRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetDeviceFunctionalGroupPhysicalRoleRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "device-functional-group",
			UUID:      id,
			RefType:   "physical-role",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateDeviceFunctionalGroupTagRef(
	ctx context.Context, request *services.CreateDeviceFunctionalGroupTagRefRequest,
) (*services.CreateDeviceFunctionalGroupTagRefResponse, error) {
	data := getRefUpdateFromRequestDeviceFunctionalGroupTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateDeviceFunctionalGroupTagRefResponse)(request), nil
}

func (h *HTTP) DeleteDeviceFunctionalGroupTagRef(
	ctx context.Context, request *services.DeleteDeviceFunctionalGroupTagRefRequest,
) (*services.DeleteDeviceFunctionalGroupTagRefResponse, error) {
	data := getRefUpdateFromRequestDeviceFunctionalGroupTagRef((*services.CreateDeviceFunctionalGroupTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteDeviceFunctionalGroupTagRefResponse)(request), nil
}

func getRefUpdateFromRequestDeviceFunctionalGroupTagRef(request *services.CreateDeviceFunctionalGroupTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetDeviceFunctionalGroupTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "device-functional-group",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateDeviceImage(ctx context.Context, request *services.CreateDeviceImageRequest) (*services.CreateDeviceImageResponse, error) {
	response := &services.CreateDeviceImageResponse{}
	_, err := h.Create(ctx, "/device-images", request, response)
	return response, err
}

func (h *HTTP) UpdateDeviceImage(ctx context.Context, request *services.UpdateDeviceImageRequest) (*services.UpdateDeviceImageResponse, error) {
	response := &services.UpdateDeviceImageResponse{}
	_, err := h.Update(ctx, "/device-image/"+request.DeviceImage.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteDeviceImage(ctx context.Context, request *services.DeleteDeviceImageRequest) (*services.DeleteDeviceImageResponse, error) {
	response := &services.DeleteDeviceImageResponse{}
	_, err := h.Delete(ctx, "/device-image/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetDeviceImage(ctx context.Context, request *services.GetDeviceImageRequest) (*services.GetDeviceImageResponse, error) {
	response := &services.GetDeviceImageResponse{}
	_, err := h.Read(ctx, "/device-image/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListDeviceImage(ctx context.Context, request *services.ListDeviceImageRequest) (*services.ListDeviceImageResponse, error) {
	response := &services.ListDeviceImageResponse{}
	_, err := h.ReadWithQuery(ctx, "/device-images", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateDeviceImageHardwareRef(
	ctx context.Context, request *services.CreateDeviceImageHardwareRefRequest,
) (*services.CreateDeviceImageHardwareRefResponse, error) {
	data := getRefUpdateFromRequestDeviceImageHardwareRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateDeviceImageHardwareRefResponse)(request), nil
}

func (h *HTTP) DeleteDeviceImageHardwareRef(
	ctx context.Context, request *services.DeleteDeviceImageHardwareRefRequest,
) (*services.DeleteDeviceImageHardwareRefResponse, error) {
	data := getRefUpdateFromRequestDeviceImageHardwareRef((*services.CreateDeviceImageHardwareRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteDeviceImageHardwareRefResponse)(request), nil
}

func getRefUpdateFromRequestDeviceImageHardwareRef(request *services.CreateDeviceImageHardwareRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetDeviceImageHardwareRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "device-image",
			UUID:      id,
			RefType:   "hardware",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateDeviceImageTagRef(
	ctx context.Context, request *services.CreateDeviceImageTagRefRequest,
) (*services.CreateDeviceImageTagRefResponse, error) {
	data := getRefUpdateFromRequestDeviceImageTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateDeviceImageTagRefResponse)(request), nil
}

func (h *HTTP) DeleteDeviceImageTagRef(
	ctx context.Context, request *services.DeleteDeviceImageTagRefRequest,
) (*services.DeleteDeviceImageTagRefResponse, error) {
	data := getRefUpdateFromRequestDeviceImageTagRef((*services.CreateDeviceImageTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteDeviceImageTagRefResponse)(request), nil
}

func getRefUpdateFromRequestDeviceImageTagRef(request *services.CreateDeviceImageTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetDeviceImageTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "device-image",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateDevicemgrNode(ctx context.Context, request *services.CreateDevicemgrNodeRequest) (*services.CreateDevicemgrNodeResponse, error) {
	response := &services.CreateDevicemgrNodeResponse{}
	_, err := h.Create(ctx, "/devicemgr-nodes", request, response)
	return response, err
}

func (h *HTTP) UpdateDevicemgrNode(ctx context.Context, request *services.UpdateDevicemgrNodeRequest) (*services.UpdateDevicemgrNodeResponse, error) {
	response := &services.UpdateDevicemgrNodeResponse{}
	_, err := h.Update(ctx, "/devicemgr-node/"+request.DevicemgrNode.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteDevicemgrNode(ctx context.Context, request *services.DeleteDevicemgrNodeRequest) (*services.DeleteDevicemgrNodeResponse, error) {
	response := &services.DeleteDevicemgrNodeResponse{}
	_, err := h.Delete(ctx, "/devicemgr-node/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetDevicemgrNode(ctx context.Context, request *services.GetDevicemgrNodeRequest) (*services.GetDevicemgrNodeResponse, error) {
	response := &services.GetDevicemgrNodeResponse{}
	_, err := h.Read(ctx, "/devicemgr-node/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListDevicemgrNode(ctx context.Context, request *services.ListDevicemgrNodeRequest) (*services.ListDevicemgrNodeResponse, error) {
	response := &services.ListDevicemgrNodeResponse{}
	_, err := h.ReadWithQuery(ctx, "/devicemgr-nodes", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateDevicemgrNodeTagRef(
	ctx context.Context, request *services.CreateDevicemgrNodeTagRefRequest,
) (*services.CreateDevicemgrNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestDevicemgrNodeTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateDevicemgrNodeTagRefResponse)(request), nil
}

func (h *HTTP) DeleteDevicemgrNodeTagRef(
	ctx context.Context, request *services.DeleteDevicemgrNodeTagRefRequest,
) (*services.DeleteDevicemgrNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestDevicemgrNodeTagRef((*services.CreateDevicemgrNodeTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteDevicemgrNodeTagRefResponse)(request), nil
}

func getRefUpdateFromRequestDevicemgrNodeTagRef(request *services.CreateDevicemgrNodeTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetDevicemgrNodeTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "devicemgr-node",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateDiscoveryServiceAssignment(ctx context.Context, request *services.CreateDiscoveryServiceAssignmentRequest) (*services.CreateDiscoveryServiceAssignmentResponse, error) {
	response := &services.CreateDiscoveryServiceAssignmentResponse{}
	_, err := h.Create(ctx, "/discovery-service-assignments", request, response)
	return response, err
}

func (h *HTTP) UpdateDiscoveryServiceAssignment(ctx context.Context, request *services.UpdateDiscoveryServiceAssignmentRequest) (*services.UpdateDiscoveryServiceAssignmentResponse, error) {
	response := &services.UpdateDiscoveryServiceAssignmentResponse{}
	_, err := h.Update(ctx, "/discovery-service-assignment/"+request.DiscoveryServiceAssignment.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteDiscoveryServiceAssignment(ctx context.Context, request *services.DeleteDiscoveryServiceAssignmentRequest) (*services.DeleteDiscoveryServiceAssignmentResponse, error) {
	response := &services.DeleteDiscoveryServiceAssignmentResponse{}
	_, err := h.Delete(ctx, "/discovery-service-assignment/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetDiscoveryServiceAssignment(ctx context.Context, request *services.GetDiscoveryServiceAssignmentRequest) (*services.GetDiscoveryServiceAssignmentResponse, error) {
	response := &services.GetDiscoveryServiceAssignmentResponse{}
	_, err := h.Read(ctx, "/discovery-service-assignment/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListDiscoveryServiceAssignment(ctx context.Context, request *services.ListDiscoveryServiceAssignmentRequest) (*services.ListDiscoveryServiceAssignmentResponse, error) {
	response := &services.ListDiscoveryServiceAssignmentResponse{}
	_, err := h.ReadWithQuery(ctx, "/discovery-service-assignments", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateDiscoveryServiceAssignmentTagRef(
	ctx context.Context, request *services.CreateDiscoveryServiceAssignmentTagRefRequest,
) (*services.CreateDiscoveryServiceAssignmentTagRefResponse, error) {
	data := getRefUpdateFromRequestDiscoveryServiceAssignmentTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateDiscoveryServiceAssignmentTagRefResponse)(request), nil
}

func (h *HTTP) DeleteDiscoveryServiceAssignmentTagRef(
	ctx context.Context, request *services.DeleteDiscoveryServiceAssignmentTagRefRequest,
) (*services.DeleteDiscoveryServiceAssignmentTagRefResponse, error) {
	data := getRefUpdateFromRequestDiscoveryServiceAssignmentTagRef((*services.CreateDiscoveryServiceAssignmentTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteDiscoveryServiceAssignmentTagRefResponse)(request), nil
}

func getRefUpdateFromRequestDiscoveryServiceAssignmentTagRef(request *services.CreateDiscoveryServiceAssignmentTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetDiscoveryServiceAssignmentTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "discovery-service-assignment",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateDomain(ctx context.Context, request *services.CreateDomainRequest) (*services.CreateDomainResponse, error) {
	response := &services.CreateDomainResponse{}
	_, err := h.Create(ctx, "/domains", request, response)
	return response, err
}

func (h *HTTP) UpdateDomain(ctx context.Context, request *services.UpdateDomainRequest) (*services.UpdateDomainResponse, error) {
	response := &services.UpdateDomainResponse{}
	_, err := h.Update(ctx, "/domain/"+request.Domain.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteDomain(ctx context.Context, request *services.DeleteDomainRequest) (*services.DeleteDomainResponse, error) {
	response := &services.DeleteDomainResponse{}
	_, err := h.Delete(ctx, "/domain/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetDomain(ctx context.Context, request *services.GetDomainRequest) (*services.GetDomainResponse, error) {
	response := &services.GetDomainResponse{}
	_, err := h.Read(ctx, "/domain/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListDomain(ctx context.Context, request *services.ListDomainRequest) (*services.ListDomainResponse, error) {
	response := &services.ListDomainResponse{}
	_, err := h.ReadWithQuery(ctx, "/domains", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateDomainTagRef(
	ctx context.Context, request *services.CreateDomainTagRefRequest,
) (*services.CreateDomainTagRefResponse, error) {
	data := getRefUpdateFromRequestDomainTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateDomainTagRefResponse)(request), nil
}

func (h *HTTP) DeleteDomainTagRef(
	ctx context.Context, request *services.DeleteDomainTagRefRequest,
) (*services.DeleteDomainTagRefResponse, error) {
	data := getRefUpdateFromRequestDomainTagRef((*services.CreateDomainTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteDomainTagRefResponse)(request), nil
}

func getRefUpdateFromRequestDomainTagRef(request *services.CreateDomainTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetDomainTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "domain",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateDsaRule(ctx context.Context, request *services.CreateDsaRuleRequest) (*services.CreateDsaRuleResponse, error) {
	response := &services.CreateDsaRuleResponse{}
	_, err := h.Create(ctx, "/dsa-rules", request, response)
	return response, err
}

func (h *HTTP) UpdateDsaRule(ctx context.Context, request *services.UpdateDsaRuleRequest) (*services.UpdateDsaRuleResponse, error) {
	response := &services.UpdateDsaRuleResponse{}
	_, err := h.Update(ctx, "/dsa-rule/"+request.DsaRule.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteDsaRule(ctx context.Context, request *services.DeleteDsaRuleRequest) (*services.DeleteDsaRuleResponse, error) {
	response := &services.DeleteDsaRuleResponse{}
	_, err := h.Delete(ctx, "/dsa-rule/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetDsaRule(ctx context.Context, request *services.GetDsaRuleRequest) (*services.GetDsaRuleResponse, error) {
	response := &services.GetDsaRuleResponse{}
	_, err := h.Read(ctx, "/dsa-rule/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListDsaRule(ctx context.Context, request *services.ListDsaRuleRequest) (*services.ListDsaRuleResponse, error) {
	response := &services.ListDsaRuleResponse{}
	_, err := h.ReadWithQuery(ctx, "/dsa-rules", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateDsaRuleTagRef(
	ctx context.Context, request *services.CreateDsaRuleTagRefRequest,
) (*services.CreateDsaRuleTagRefResponse, error) {
	data := getRefUpdateFromRequestDsaRuleTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateDsaRuleTagRefResponse)(request), nil
}

func (h *HTTP) DeleteDsaRuleTagRef(
	ctx context.Context, request *services.DeleteDsaRuleTagRefRequest,
) (*services.DeleteDsaRuleTagRefResponse, error) {
	data := getRefUpdateFromRequestDsaRuleTagRef((*services.CreateDsaRuleTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteDsaRuleTagRefResponse)(request), nil
}

func getRefUpdateFromRequestDsaRuleTagRef(request *services.CreateDsaRuleTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetDsaRuleTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "dsa-rule",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateE2ServiceProvider(ctx context.Context, request *services.CreateE2ServiceProviderRequest) (*services.CreateE2ServiceProviderResponse, error) {
	response := &services.CreateE2ServiceProviderResponse{}
	_, err := h.Create(ctx, "/e2-service-providers", request, response)
	return response, err
}

func (h *HTTP) UpdateE2ServiceProvider(ctx context.Context, request *services.UpdateE2ServiceProviderRequest) (*services.UpdateE2ServiceProviderResponse, error) {
	response := &services.UpdateE2ServiceProviderResponse{}
	_, err := h.Update(ctx, "/e2-service-provider/"+request.E2ServiceProvider.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteE2ServiceProvider(ctx context.Context, request *services.DeleteE2ServiceProviderRequest) (*services.DeleteE2ServiceProviderResponse, error) {
	response := &services.DeleteE2ServiceProviderResponse{}
	_, err := h.Delete(ctx, "/e2-service-provider/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetE2ServiceProvider(ctx context.Context, request *services.GetE2ServiceProviderRequest) (*services.GetE2ServiceProviderResponse, error) {
	response := &services.GetE2ServiceProviderResponse{}
	_, err := h.Read(ctx, "/e2-service-provider/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListE2ServiceProvider(ctx context.Context, request *services.ListE2ServiceProviderRequest) (*services.ListE2ServiceProviderResponse, error) {
	response := &services.ListE2ServiceProviderResponse{}
	_, err := h.ReadWithQuery(ctx, "/e2-service-providers", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateE2ServiceProviderPeeringPolicyRef(
	ctx context.Context, request *services.CreateE2ServiceProviderPeeringPolicyRefRequest,
) (*services.CreateE2ServiceProviderPeeringPolicyRefResponse, error) {
	data := getRefUpdateFromRequestE2ServiceProviderPeeringPolicyRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateE2ServiceProviderPeeringPolicyRefResponse)(request), nil
}

func (h *HTTP) DeleteE2ServiceProviderPeeringPolicyRef(
	ctx context.Context, request *services.DeleteE2ServiceProviderPeeringPolicyRefRequest,
) (*services.DeleteE2ServiceProviderPeeringPolicyRefResponse, error) {
	data := getRefUpdateFromRequestE2ServiceProviderPeeringPolicyRef((*services.CreateE2ServiceProviderPeeringPolicyRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteE2ServiceProviderPeeringPolicyRefResponse)(request), nil
}

func getRefUpdateFromRequestE2ServiceProviderPeeringPolicyRef(request *services.CreateE2ServiceProviderPeeringPolicyRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetE2ServiceProviderPeeringPolicyRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "e2-service-provider",
			UUID:      id,
			RefType:   "peering-policy",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateE2ServiceProviderPhysicalRouterRef(
	ctx context.Context, request *services.CreateE2ServiceProviderPhysicalRouterRefRequest,
) (*services.CreateE2ServiceProviderPhysicalRouterRefResponse, error) {
	data := getRefUpdateFromRequestE2ServiceProviderPhysicalRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateE2ServiceProviderPhysicalRouterRefResponse)(request), nil
}

func (h *HTTP) DeleteE2ServiceProviderPhysicalRouterRef(
	ctx context.Context, request *services.DeleteE2ServiceProviderPhysicalRouterRefRequest,
) (*services.DeleteE2ServiceProviderPhysicalRouterRefResponse, error) {
	data := getRefUpdateFromRequestE2ServiceProviderPhysicalRouterRef((*services.CreateE2ServiceProviderPhysicalRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteE2ServiceProviderPhysicalRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestE2ServiceProviderPhysicalRouterRef(request *services.CreateE2ServiceProviderPhysicalRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetE2ServiceProviderPhysicalRouterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "e2-service-provider",
			UUID:      id,
			RefType:   "physical-router",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateE2ServiceProviderTagRef(
	ctx context.Context, request *services.CreateE2ServiceProviderTagRefRequest,
) (*services.CreateE2ServiceProviderTagRefResponse, error) {
	data := getRefUpdateFromRequestE2ServiceProviderTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateE2ServiceProviderTagRefResponse)(request), nil
}

func (h *HTTP) DeleteE2ServiceProviderTagRef(
	ctx context.Context, request *services.DeleteE2ServiceProviderTagRefRequest,
) (*services.DeleteE2ServiceProviderTagRefResponse, error) {
	data := getRefUpdateFromRequestE2ServiceProviderTagRef((*services.CreateE2ServiceProviderTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteE2ServiceProviderTagRefResponse)(request), nil
}

func getRefUpdateFromRequestE2ServiceProviderTagRef(request *services.CreateE2ServiceProviderTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetE2ServiceProviderTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "e2-service-provider",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFabricNamespace(ctx context.Context, request *services.CreateFabricNamespaceRequest) (*services.CreateFabricNamespaceResponse, error) {
	response := &services.CreateFabricNamespaceResponse{}
	_, err := h.Create(ctx, "/fabric-namespaces", request, response)
	return response, err
}

func (h *HTTP) UpdateFabricNamespace(ctx context.Context, request *services.UpdateFabricNamespaceRequest) (*services.UpdateFabricNamespaceResponse, error) {
	response := &services.UpdateFabricNamespaceResponse{}
	_, err := h.Update(ctx, "/fabric-namespace/"+request.FabricNamespace.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteFabricNamespace(ctx context.Context, request *services.DeleteFabricNamespaceRequest) (*services.DeleteFabricNamespaceResponse, error) {
	response := &services.DeleteFabricNamespaceResponse{}
	_, err := h.Delete(ctx, "/fabric-namespace/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetFabricNamespace(ctx context.Context, request *services.GetFabricNamespaceRequest) (*services.GetFabricNamespaceResponse, error) {
	response := &services.GetFabricNamespaceResponse{}
	_, err := h.Read(ctx, "/fabric-namespace/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListFabricNamespace(ctx context.Context, request *services.ListFabricNamespaceRequest) (*services.ListFabricNamespaceResponse, error) {
	response := &services.ListFabricNamespaceResponse{}
	_, err := h.ReadWithQuery(ctx, "/fabric-namespaces", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateFabricNamespaceTagRef(
	ctx context.Context, request *services.CreateFabricNamespaceTagRefRequest,
) (*services.CreateFabricNamespaceTagRefResponse, error) {
	data := getRefUpdateFromRequestFabricNamespaceTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFabricNamespaceTagRefResponse)(request), nil
}

func (h *HTTP) DeleteFabricNamespaceTagRef(
	ctx context.Context, request *services.DeleteFabricNamespaceTagRefRequest,
) (*services.DeleteFabricNamespaceTagRefResponse, error) {
	data := getRefUpdateFromRequestFabricNamespaceTagRef((*services.CreateFabricNamespaceTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFabricNamespaceTagRefResponse)(request), nil
}

func getRefUpdateFromRequestFabricNamespaceTagRef(request *services.CreateFabricNamespaceTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFabricNamespaceTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "fabric-namespace",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFabric(ctx context.Context, request *services.CreateFabricRequest) (*services.CreateFabricResponse, error) {
	response := &services.CreateFabricResponse{}
	_, err := h.Create(ctx, "/fabrics", request, response)
	return response, err
}

func (h *HTTP) UpdateFabric(ctx context.Context, request *services.UpdateFabricRequest) (*services.UpdateFabricResponse, error) {
	response := &services.UpdateFabricResponse{}
	_, err := h.Update(ctx, "/fabric/"+request.Fabric.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteFabric(ctx context.Context, request *services.DeleteFabricRequest) (*services.DeleteFabricResponse, error) {
	response := &services.DeleteFabricResponse{}
	_, err := h.Delete(ctx, "/fabric/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetFabric(ctx context.Context, request *services.GetFabricRequest) (*services.GetFabricResponse, error) {
	response := &services.GetFabricResponse{}
	_, err := h.Read(ctx, "/fabric/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListFabric(ctx context.Context, request *services.ListFabricRequest) (*services.ListFabricResponse, error) {
	response := &services.ListFabricResponse{}
	_, err := h.ReadWithQuery(ctx, "/fabrics", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateFabricIntentMapRef(
	ctx context.Context, request *services.CreateFabricIntentMapRefRequest,
) (*services.CreateFabricIntentMapRefResponse, error) {
	data := getRefUpdateFromRequestFabricIntentMapRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFabricIntentMapRefResponse)(request), nil
}

func (h *HTTP) DeleteFabricIntentMapRef(
	ctx context.Context, request *services.DeleteFabricIntentMapRefRequest,
) (*services.DeleteFabricIntentMapRefResponse, error) {
	data := getRefUpdateFromRequestFabricIntentMapRef((*services.CreateFabricIntentMapRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFabricIntentMapRefResponse)(request), nil
}

func getRefUpdateFromRequestFabricIntentMapRef(request *services.CreateFabricIntentMapRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFabricIntentMapRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "fabric",
			UUID:      id,
			RefType:   "intent-map",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFabricNodeProfileRef(
	ctx context.Context, request *services.CreateFabricNodeProfileRefRequest,
) (*services.CreateFabricNodeProfileRefResponse, error) {
	data := getRefUpdateFromRequestFabricNodeProfileRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFabricNodeProfileRefResponse)(request), nil
}

func (h *HTTP) DeleteFabricNodeProfileRef(
	ctx context.Context, request *services.DeleteFabricNodeProfileRefRequest,
) (*services.DeleteFabricNodeProfileRefResponse, error) {
	data := getRefUpdateFromRequestFabricNodeProfileRef((*services.CreateFabricNodeProfileRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFabricNodeProfileRefResponse)(request), nil
}

func getRefUpdateFromRequestFabricNodeProfileRef(request *services.CreateFabricNodeProfileRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFabricNodeProfileRef()

	data := struct {
		services.RefUpdate

		Attr *models.SerialNumListType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "fabric",
			UUID:      id,
			RefType:   "node-profile",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateFabricTagRef(
	ctx context.Context, request *services.CreateFabricTagRefRequest,
) (*services.CreateFabricTagRefResponse, error) {
	data := getRefUpdateFromRequestFabricTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFabricTagRefResponse)(request), nil
}

func (h *HTTP) DeleteFabricTagRef(
	ctx context.Context, request *services.DeleteFabricTagRefRequest,
) (*services.DeleteFabricTagRefResponse, error) {
	data := getRefUpdateFromRequestFabricTagRef((*services.CreateFabricTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFabricTagRefResponse)(request), nil
}

func getRefUpdateFromRequestFabricTagRef(request *services.CreateFabricTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFabricTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "fabric",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFabricVirtualNetworkRef(
	ctx context.Context, request *services.CreateFabricVirtualNetworkRefRequest,
) (*services.CreateFabricVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestFabricVirtualNetworkRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFabricVirtualNetworkRefResponse)(request), nil
}

func (h *HTTP) DeleteFabricVirtualNetworkRef(
	ctx context.Context, request *services.DeleteFabricVirtualNetworkRefRequest,
) (*services.DeleteFabricVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestFabricVirtualNetworkRef((*services.CreateFabricVirtualNetworkRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFabricVirtualNetworkRefResponse)(request), nil
}

func getRefUpdateFromRequestFabricVirtualNetworkRef(request *services.CreateFabricVirtualNetworkRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFabricVirtualNetworkRef()

	data := struct {
		services.RefUpdate

		Attr *models.FabricNetworkTag `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "fabric",
			UUID:      id,
			RefType:   "virtual-network",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateFeatureConfig(ctx context.Context, request *services.CreateFeatureConfigRequest) (*services.CreateFeatureConfigResponse, error) {
	response := &services.CreateFeatureConfigResponse{}
	_, err := h.Create(ctx, "/feature-configs", request, response)
	return response, err
}

func (h *HTTP) UpdateFeatureConfig(ctx context.Context, request *services.UpdateFeatureConfigRequest) (*services.UpdateFeatureConfigResponse, error) {
	response := &services.UpdateFeatureConfigResponse{}
	_, err := h.Update(ctx, "/feature-config/"+request.FeatureConfig.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteFeatureConfig(ctx context.Context, request *services.DeleteFeatureConfigRequest) (*services.DeleteFeatureConfigResponse, error) {
	response := &services.DeleteFeatureConfigResponse{}
	_, err := h.Delete(ctx, "/feature-config/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetFeatureConfig(ctx context.Context, request *services.GetFeatureConfigRequest) (*services.GetFeatureConfigResponse, error) {
	response := &services.GetFeatureConfigResponse{}
	_, err := h.Read(ctx, "/feature-config/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListFeatureConfig(ctx context.Context, request *services.ListFeatureConfigRequest) (*services.ListFeatureConfigResponse, error) {
	response := &services.ListFeatureConfigResponse{}
	_, err := h.ReadWithQuery(ctx, "/feature-configs", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateFeatureConfigTagRef(
	ctx context.Context, request *services.CreateFeatureConfigTagRefRequest,
) (*services.CreateFeatureConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestFeatureConfigTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFeatureConfigTagRefResponse)(request), nil
}

func (h *HTTP) DeleteFeatureConfigTagRef(
	ctx context.Context, request *services.DeleteFeatureConfigTagRefRequest,
) (*services.DeleteFeatureConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestFeatureConfigTagRef((*services.CreateFeatureConfigTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFeatureConfigTagRefResponse)(request), nil
}

func getRefUpdateFromRequestFeatureConfigTagRef(request *services.CreateFeatureConfigTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFeatureConfigTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "feature-config",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFeatureFlag(ctx context.Context, request *services.CreateFeatureFlagRequest) (*services.CreateFeatureFlagResponse, error) {
	response := &services.CreateFeatureFlagResponse{}
	_, err := h.Create(ctx, "/feature-flags", request, response)
	return response, err
}

func (h *HTTP) UpdateFeatureFlag(ctx context.Context, request *services.UpdateFeatureFlagRequest) (*services.UpdateFeatureFlagResponse, error) {
	response := &services.UpdateFeatureFlagResponse{}
	_, err := h.Update(ctx, "/feature-flag/"+request.FeatureFlag.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteFeatureFlag(ctx context.Context, request *services.DeleteFeatureFlagRequest) (*services.DeleteFeatureFlagResponse, error) {
	response := &services.DeleteFeatureFlagResponse{}
	_, err := h.Delete(ctx, "/feature-flag/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetFeatureFlag(ctx context.Context, request *services.GetFeatureFlagRequest) (*services.GetFeatureFlagResponse, error) {
	response := &services.GetFeatureFlagResponse{}
	_, err := h.Read(ctx, "/feature-flag/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListFeatureFlag(ctx context.Context, request *services.ListFeatureFlagRequest) (*services.ListFeatureFlagResponse, error) {
	response := &services.ListFeatureFlagResponse{}
	_, err := h.ReadWithQuery(ctx, "/feature-flags", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateFeatureFlagTagRef(
	ctx context.Context, request *services.CreateFeatureFlagTagRefRequest,
) (*services.CreateFeatureFlagTagRefResponse, error) {
	data := getRefUpdateFromRequestFeatureFlagTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFeatureFlagTagRefResponse)(request), nil
}

func (h *HTTP) DeleteFeatureFlagTagRef(
	ctx context.Context, request *services.DeleteFeatureFlagTagRefRequest,
) (*services.DeleteFeatureFlagTagRefResponse, error) {
	data := getRefUpdateFromRequestFeatureFlagTagRef((*services.CreateFeatureFlagTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFeatureFlagTagRefResponse)(request), nil
}

func getRefUpdateFromRequestFeatureFlagTagRef(request *services.CreateFeatureFlagTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFeatureFlagTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "feature-flag",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFeature(ctx context.Context, request *services.CreateFeatureRequest) (*services.CreateFeatureResponse, error) {
	response := &services.CreateFeatureResponse{}
	_, err := h.Create(ctx, "/features", request, response)
	return response, err
}

func (h *HTTP) UpdateFeature(ctx context.Context, request *services.UpdateFeatureRequest) (*services.UpdateFeatureResponse, error) {
	response := &services.UpdateFeatureResponse{}
	_, err := h.Update(ctx, "/feature/"+request.Feature.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteFeature(ctx context.Context, request *services.DeleteFeatureRequest) (*services.DeleteFeatureResponse, error) {
	response := &services.DeleteFeatureResponse{}
	_, err := h.Delete(ctx, "/feature/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetFeature(ctx context.Context, request *services.GetFeatureRequest) (*services.GetFeatureResponse, error) {
	response := &services.GetFeatureResponse{}
	_, err := h.Read(ctx, "/feature/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListFeature(ctx context.Context, request *services.ListFeatureRequest) (*services.ListFeatureResponse, error) {
	response := &services.ListFeatureResponse{}
	_, err := h.ReadWithQuery(ctx, "/features", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateFeatureFeatureRef(
	ctx context.Context, request *services.CreateFeatureFeatureRefRequest,
) (*services.CreateFeatureFeatureRefResponse, error) {
	data := getRefUpdateFromRequestFeatureFeatureRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFeatureFeatureRefResponse)(request), nil
}

func (h *HTTP) DeleteFeatureFeatureRef(
	ctx context.Context, request *services.DeleteFeatureFeatureRefRequest,
) (*services.DeleteFeatureFeatureRefResponse, error) {
	data := getRefUpdateFromRequestFeatureFeatureRef((*services.CreateFeatureFeatureRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFeatureFeatureRefResponse)(request), nil
}

func getRefUpdateFromRequestFeatureFeatureRef(request *services.CreateFeatureFeatureRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFeatureFeatureRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "feature",
			UUID:      id,
			RefType:   "feature",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFeatureTagRef(
	ctx context.Context, request *services.CreateFeatureTagRefRequest,
) (*services.CreateFeatureTagRefResponse, error) {
	data := getRefUpdateFromRequestFeatureTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFeatureTagRefResponse)(request), nil
}

func (h *HTTP) DeleteFeatureTagRef(
	ctx context.Context, request *services.DeleteFeatureTagRefRequest,
) (*services.DeleteFeatureTagRefResponse, error) {
	data := getRefUpdateFromRequestFeatureTagRef((*services.CreateFeatureTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFeatureTagRefResponse)(request), nil
}

func getRefUpdateFromRequestFeatureTagRef(request *services.CreateFeatureTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFeatureTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "feature",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFirewallPolicy(ctx context.Context, request *services.CreateFirewallPolicyRequest) (*services.CreateFirewallPolicyResponse, error) {
	response := &services.CreateFirewallPolicyResponse{}
	_, err := h.Create(ctx, "/firewall-policys", request, response)
	return response, err
}

func (h *HTTP) UpdateFirewallPolicy(ctx context.Context, request *services.UpdateFirewallPolicyRequest) (*services.UpdateFirewallPolicyResponse, error) {
	response := &services.UpdateFirewallPolicyResponse{}
	_, err := h.Update(ctx, "/firewall-policy/"+request.FirewallPolicy.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteFirewallPolicy(ctx context.Context, request *services.DeleteFirewallPolicyRequest) (*services.DeleteFirewallPolicyResponse, error) {
	response := &services.DeleteFirewallPolicyResponse{}
	_, err := h.Delete(ctx, "/firewall-policy/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetFirewallPolicy(ctx context.Context, request *services.GetFirewallPolicyRequest) (*services.GetFirewallPolicyResponse, error) {
	response := &services.GetFirewallPolicyResponse{}
	_, err := h.Read(ctx, "/firewall-policy/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListFirewallPolicy(ctx context.Context, request *services.ListFirewallPolicyRequest) (*services.ListFirewallPolicyResponse, error) {
	response := &services.ListFirewallPolicyResponse{}
	_, err := h.ReadWithQuery(ctx, "/firewall-policys", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateFirewallPolicyFirewallRuleRef(
	ctx context.Context, request *services.CreateFirewallPolicyFirewallRuleRefRequest,
) (*services.CreateFirewallPolicyFirewallRuleRefResponse, error) {
	data := getRefUpdateFromRequestFirewallPolicyFirewallRuleRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFirewallPolicyFirewallRuleRefResponse)(request), nil
}

func (h *HTTP) DeleteFirewallPolicyFirewallRuleRef(
	ctx context.Context, request *services.DeleteFirewallPolicyFirewallRuleRefRequest,
) (*services.DeleteFirewallPolicyFirewallRuleRefResponse, error) {
	data := getRefUpdateFromRequestFirewallPolicyFirewallRuleRef((*services.CreateFirewallPolicyFirewallRuleRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFirewallPolicyFirewallRuleRefResponse)(request), nil
}

func getRefUpdateFromRequestFirewallPolicyFirewallRuleRef(request *services.CreateFirewallPolicyFirewallRuleRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFirewallPolicyFirewallRuleRef()

	data := struct {
		services.RefUpdate

		Attr *models.FirewallSequence `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "firewall-policy",
			UUID:      id,
			RefType:   "firewall-rule",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateFirewallPolicySecurityLoggingObjectRef(
	ctx context.Context, request *services.CreateFirewallPolicySecurityLoggingObjectRefRequest,
) (*services.CreateFirewallPolicySecurityLoggingObjectRefResponse, error) {
	data := getRefUpdateFromRequestFirewallPolicySecurityLoggingObjectRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFirewallPolicySecurityLoggingObjectRefResponse)(request), nil
}

func (h *HTTP) DeleteFirewallPolicySecurityLoggingObjectRef(
	ctx context.Context, request *services.DeleteFirewallPolicySecurityLoggingObjectRefRequest,
) (*services.DeleteFirewallPolicySecurityLoggingObjectRefResponse, error) {
	data := getRefUpdateFromRequestFirewallPolicySecurityLoggingObjectRef((*services.CreateFirewallPolicySecurityLoggingObjectRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFirewallPolicySecurityLoggingObjectRefResponse)(request), nil
}

func getRefUpdateFromRequestFirewallPolicySecurityLoggingObjectRef(request *services.CreateFirewallPolicySecurityLoggingObjectRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFirewallPolicySecurityLoggingObjectRef()

	data := struct {
		services.RefUpdate

		Attr *models.SloRateType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "firewall-policy",
			UUID:      id,
			RefType:   "security-logging-object",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateFirewallPolicyTagRef(
	ctx context.Context, request *services.CreateFirewallPolicyTagRefRequest,
) (*services.CreateFirewallPolicyTagRefResponse, error) {
	data := getRefUpdateFromRequestFirewallPolicyTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFirewallPolicyTagRefResponse)(request), nil
}

func (h *HTTP) DeleteFirewallPolicyTagRef(
	ctx context.Context, request *services.DeleteFirewallPolicyTagRefRequest,
) (*services.DeleteFirewallPolicyTagRefResponse, error) {
	data := getRefUpdateFromRequestFirewallPolicyTagRef((*services.CreateFirewallPolicyTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFirewallPolicyTagRefResponse)(request), nil
}

func getRefUpdateFromRequestFirewallPolicyTagRef(request *services.CreateFirewallPolicyTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFirewallPolicyTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "firewall-policy",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFirewallRule(ctx context.Context, request *services.CreateFirewallRuleRequest) (*services.CreateFirewallRuleResponse, error) {
	response := &services.CreateFirewallRuleResponse{}
	_, err := h.Create(ctx, "/firewall-rules", request, response)
	return response, err
}

func (h *HTTP) UpdateFirewallRule(ctx context.Context, request *services.UpdateFirewallRuleRequest) (*services.UpdateFirewallRuleResponse, error) {
	response := &services.UpdateFirewallRuleResponse{}
	_, err := h.Update(ctx, "/firewall-rule/"+request.FirewallRule.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteFirewallRule(ctx context.Context, request *services.DeleteFirewallRuleRequest) (*services.DeleteFirewallRuleResponse, error) {
	response := &services.DeleteFirewallRuleResponse{}
	_, err := h.Delete(ctx, "/firewall-rule/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetFirewallRule(ctx context.Context, request *services.GetFirewallRuleRequest) (*services.GetFirewallRuleResponse, error) {
	response := &services.GetFirewallRuleResponse{}
	_, err := h.Read(ctx, "/firewall-rule/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListFirewallRule(ctx context.Context, request *services.ListFirewallRuleRequest) (*services.ListFirewallRuleResponse, error) {
	response := &services.ListFirewallRuleResponse{}
	_, err := h.ReadWithQuery(ctx, "/firewall-rules", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateFirewallRuleAddressGroupRef(
	ctx context.Context, request *services.CreateFirewallRuleAddressGroupRefRequest,
) (*services.CreateFirewallRuleAddressGroupRefResponse, error) {
	data := getRefUpdateFromRequestFirewallRuleAddressGroupRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFirewallRuleAddressGroupRefResponse)(request), nil
}

func (h *HTTP) DeleteFirewallRuleAddressGroupRef(
	ctx context.Context, request *services.DeleteFirewallRuleAddressGroupRefRequest,
) (*services.DeleteFirewallRuleAddressGroupRefResponse, error) {
	data := getRefUpdateFromRequestFirewallRuleAddressGroupRef((*services.CreateFirewallRuleAddressGroupRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFirewallRuleAddressGroupRefResponse)(request), nil
}

func getRefUpdateFromRequestFirewallRuleAddressGroupRef(request *services.CreateFirewallRuleAddressGroupRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFirewallRuleAddressGroupRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "firewall-rule",
			UUID:      id,
			RefType:   "address-group",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFirewallRuleSecurityLoggingObjectRef(
	ctx context.Context, request *services.CreateFirewallRuleSecurityLoggingObjectRefRequest,
) (*services.CreateFirewallRuleSecurityLoggingObjectRefResponse, error) {
	data := getRefUpdateFromRequestFirewallRuleSecurityLoggingObjectRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFirewallRuleSecurityLoggingObjectRefResponse)(request), nil
}

func (h *HTTP) DeleteFirewallRuleSecurityLoggingObjectRef(
	ctx context.Context, request *services.DeleteFirewallRuleSecurityLoggingObjectRefRequest,
) (*services.DeleteFirewallRuleSecurityLoggingObjectRefResponse, error) {
	data := getRefUpdateFromRequestFirewallRuleSecurityLoggingObjectRef((*services.CreateFirewallRuleSecurityLoggingObjectRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFirewallRuleSecurityLoggingObjectRefResponse)(request), nil
}

func getRefUpdateFromRequestFirewallRuleSecurityLoggingObjectRef(request *services.CreateFirewallRuleSecurityLoggingObjectRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFirewallRuleSecurityLoggingObjectRef()

	data := struct {
		services.RefUpdate

		Attr *models.SloRateType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "firewall-rule",
			UUID:      id,
			RefType:   "security-logging-object",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateFirewallRuleServiceGroupRef(
	ctx context.Context, request *services.CreateFirewallRuleServiceGroupRefRequest,
) (*services.CreateFirewallRuleServiceGroupRefResponse, error) {
	data := getRefUpdateFromRequestFirewallRuleServiceGroupRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFirewallRuleServiceGroupRefResponse)(request), nil
}

func (h *HTTP) DeleteFirewallRuleServiceGroupRef(
	ctx context.Context, request *services.DeleteFirewallRuleServiceGroupRefRequest,
) (*services.DeleteFirewallRuleServiceGroupRefResponse, error) {
	data := getRefUpdateFromRequestFirewallRuleServiceGroupRef((*services.CreateFirewallRuleServiceGroupRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFirewallRuleServiceGroupRefResponse)(request), nil
}

func getRefUpdateFromRequestFirewallRuleServiceGroupRef(request *services.CreateFirewallRuleServiceGroupRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFirewallRuleServiceGroupRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "firewall-rule",
			UUID:      id,
			RefType:   "service-group",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFirewallRuleTagRef(
	ctx context.Context, request *services.CreateFirewallRuleTagRefRequest,
) (*services.CreateFirewallRuleTagRefResponse, error) {
	data := getRefUpdateFromRequestFirewallRuleTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFirewallRuleTagRefResponse)(request), nil
}

func (h *HTTP) DeleteFirewallRuleTagRef(
	ctx context.Context, request *services.DeleteFirewallRuleTagRefRequest,
) (*services.DeleteFirewallRuleTagRefResponse, error) {
	data := getRefUpdateFromRequestFirewallRuleTagRef((*services.CreateFirewallRuleTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFirewallRuleTagRefResponse)(request), nil
}

func getRefUpdateFromRequestFirewallRuleTagRef(request *services.CreateFirewallRuleTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFirewallRuleTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "firewall-rule",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFirewallRuleVirtualNetworkRef(
	ctx context.Context, request *services.CreateFirewallRuleVirtualNetworkRefRequest,
) (*services.CreateFirewallRuleVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestFirewallRuleVirtualNetworkRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFirewallRuleVirtualNetworkRefResponse)(request), nil
}

func (h *HTTP) DeleteFirewallRuleVirtualNetworkRef(
	ctx context.Context, request *services.DeleteFirewallRuleVirtualNetworkRefRequest,
) (*services.DeleteFirewallRuleVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestFirewallRuleVirtualNetworkRef((*services.CreateFirewallRuleVirtualNetworkRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFirewallRuleVirtualNetworkRefResponse)(request), nil
}

func getRefUpdateFromRequestFirewallRuleVirtualNetworkRef(request *services.CreateFirewallRuleVirtualNetworkRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFirewallRuleVirtualNetworkRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "firewall-rule",
			UUID:      id,
			RefType:   "virtual-network",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFloatingIPPool(ctx context.Context, request *services.CreateFloatingIPPoolRequest) (*services.CreateFloatingIPPoolResponse, error) {
	response := &services.CreateFloatingIPPoolResponse{}
	_, err := h.Create(ctx, "/floating-ip-pools", request, response)
	return response, err
}

func (h *HTTP) UpdateFloatingIPPool(ctx context.Context, request *services.UpdateFloatingIPPoolRequest) (*services.UpdateFloatingIPPoolResponse, error) {
	response := &services.UpdateFloatingIPPoolResponse{}
	_, err := h.Update(ctx, "/floating-ip-pool/"+request.FloatingIPPool.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteFloatingIPPool(ctx context.Context, request *services.DeleteFloatingIPPoolRequest) (*services.DeleteFloatingIPPoolResponse, error) {
	response := &services.DeleteFloatingIPPoolResponse{}
	_, err := h.Delete(ctx, "/floating-ip-pool/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetFloatingIPPool(ctx context.Context, request *services.GetFloatingIPPoolRequest) (*services.GetFloatingIPPoolResponse, error) {
	response := &services.GetFloatingIPPoolResponse{}
	_, err := h.Read(ctx, "/floating-ip-pool/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListFloatingIPPool(ctx context.Context, request *services.ListFloatingIPPoolRequest) (*services.ListFloatingIPPoolResponse, error) {
	response := &services.ListFloatingIPPoolResponse{}
	_, err := h.ReadWithQuery(ctx, "/floating-ip-pools", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateFloatingIPPoolTagRef(
	ctx context.Context, request *services.CreateFloatingIPPoolTagRefRequest,
) (*services.CreateFloatingIPPoolTagRefResponse, error) {
	data := getRefUpdateFromRequestFloatingIPPoolTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFloatingIPPoolTagRefResponse)(request), nil
}

func (h *HTTP) DeleteFloatingIPPoolTagRef(
	ctx context.Context, request *services.DeleteFloatingIPPoolTagRefRequest,
) (*services.DeleteFloatingIPPoolTagRefResponse, error) {
	data := getRefUpdateFromRequestFloatingIPPoolTagRef((*services.CreateFloatingIPPoolTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFloatingIPPoolTagRefResponse)(request), nil
}

func getRefUpdateFromRequestFloatingIPPoolTagRef(request *services.CreateFloatingIPPoolTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFloatingIPPoolTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "floating-ip-pool",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFloatingIP(ctx context.Context, request *services.CreateFloatingIPRequest) (*services.CreateFloatingIPResponse, error) {
	response := &services.CreateFloatingIPResponse{}
	_, err := h.Create(ctx, "/floating-ips", request, response)
	return response, err
}

func (h *HTTP) UpdateFloatingIP(ctx context.Context, request *services.UpdateFloatingIPRequest) (*services.UpdateFloatingIPResponse, error) {
	response := &services.UpdateFloatingIPResponse{}
	_, err := h.Update(ctx, "/floating-ip/"+request.FloatingIP.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteFloatingIP(ctx context.Context, request *services.DeleteFloatingIPRequest) (*services.DeleteFloatingIPResponse, error) {
	response := &services.DeleteFloatingIPResponse{}
	_, err := h.Delete(ctx, "/floating-ip/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetFloatingIP(ctx context.Context, request *services.GetFloatingIPRequest) (*services.GetFloatingIPResponse, error) {
	response := &services.GetFloatingIPResponse{}
	_, err := h.Read(ctx, "/floating-ip/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListFloatingIP(ctx context.Context, request *services.ListFloatingIPRequest) (*services.ListFloatingIPResponse, error) {
	response := &services.ListFloatingIPResponse{}
	_, err := h.ReadWithQuery(ctx, "/floating-ips", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateFloatingIPProjectRef(
	ctx context.Context, request *services.CreateFloatingIPProjectRefRequest,
) (*services.CreateFloatingIPProjectRefResponse, error) {
	data := getRefUpdateFromRequestFloatingIPProjectRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFloatingIPProjectRefResponse)(request), nil
}

func (h *HTTP) DeleteFloatingIPProjectRef(
	ctx context.Context, request *services.DeleteFloatingIPProjectRefRequest,
) (*services.DeleteFloatingIPProjectRefResponse, error) {
	data := getRefUpdateFromRequestFloatingIPProjectRef((*services.CreateFloatingIPProjectRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFloatingIPProjectRefResponse)(request), nil
}

func getRefUpdateFromRequestFloatingIPProjectRef(request *services.CreateFloatingIPProjectRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFloatingIPProjectRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "floating-ip",
			UUID:      id,
			RefType:   "project",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFloatingIPTagRef(
	ctx context.Context, request *services.CreateFloatingIPTagRefRequest,
) (*services.CreateFloatingIPTagRefResponse, error) {
	data := getRefUpdateFromRequestFloatingIPTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFloatingIPTagRefResponse)(request), nil
}

func (h *HTTP) DeleteFloatingIPTagRef(
	ctx context.Context, request *services.DeleteFloatingIPTagRefRequest,
) (*services.DeleteFloatingIPTagRefResponse, error) {
	data := getRefUpdateFromRequestFloatingIPTagRef((*services.CreateFloatingIPTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFloatingIPTagRefResponse)(request), nil
}

func getRefUpdateFromRequestFloatingIPTagRef(request *services.CreateFloatingIPTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFloatingIPTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "floating-ip",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFloatingIPVirtualMachineInterfaceRef(
	ctx context.Context, request *services.CreateFloatingIPVirtualMachineInterfaceRefRequest,
) (*services.CreateFloatingIPVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestFloatingIPVirtualMachineInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFloatingIPVirtualMachineInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteFloatingIPVirtualMachineInterfaceRef(
	ctx context.Context, request *services.DeleteFloatingIPVirtualMachineInterfaceRefRequest,
) (*services.DeleteFloatingIPVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestFloatingIPVirtualMachineInterfaceRef((*services.CreateFloatingIPVirtualMachineInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFloatingIPVirtualMachineInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestFloatingIPVirtualMachineInterfaceRef(request *services.CreateFloatingIPVirtualMachineInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFloatingIPVirtualMachineInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "floating-ip",
			UUID:      id,
			RefType:   "virtual-machine-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFlowNode(ctx context.Context, request *services.CreateFlowNodeRequest) (*services.CreateFlowNodeResponse, error) {
	response := &services.CreateFlowNodeResponse{}
	_, err := h.Create(ctx, "/flow-nodes", request, response)
	return response, err
}

func (h *HTTP) UpdateFlowNode(ctx context.Context, request *services.UpdateFlowNodeRequest) (*services.UpdateFlowNodeResponse, error) {
	response := &services.UpdateFlowNodeResponse{}
	_, err := h.Update(ctx, "/flow-node/"+request.FlowNode.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteFlowNode(ctx context.Context, request *services.DeleteFlowNodeRequest) (*services.DeleteFlowNodeResponse, error) {
	response := &services.DeleteFlowNodeResponse{}
	_, err := h.Delete(ctx, "/flow-node/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetFlowNode(ctx context.Context, request *services.GetFlowNodeRequest) (*services.GetFlowNodeResponse, error) {
	response := &services.GetFlowNodeResponse{}
	_, err := h.Read(ctx, "/flow-node/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListFlowNode(ctx context.Context, request *services.ListFlowNodeRequest) (*services.ListFlowNodeResponse, error) {
	response := &services.ListFlowNodeResponse{}
	_, err := h.ReadWithQuery(ctx, "/flow-nodes", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateFlowNodeTagRef(
	ctx context.Context, request *services.CreateFlowNodeTagRefRequest,
) (*services.CreateFlowNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestFlowNodeTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFlowNodeTagRefResponse)(request), nil
}

func (h *HTTP) DeleteFlowNodeTagRef(
	ctx context.Context, request *services.DeleteFlowNodeTagRefRequest,
) (*services.DeleteFlowNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestFlowNodeTagRef((*services.CreateFlowNodeTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFlowNodeTagRefResponse)(request), nil
}

func getRefUpdateFromRequestFlowNodeTagRef(request *services.CreateFlowNodeTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFlowNodeTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "flow-node",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateFlowNodeVirtualNetworkRef(
	ctx context.Context, request *services.CreateFlowNodeVirtualNetworkRefRequest,
) (*services.CreateFlowNodeVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestFlowNodeVirtualNetworkRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateFlowNodeVirtualNetworkRefResponse)(request), nil
}

func (h *HTTP) DeleteFlowNodeVirtualNetworkRef(
	ctx context.Context, request *services.DeleteFlowNodeVirtualNetworkRefRequest,
) (*services.DeleteFlowNodeVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestFlowNodeVirtualNetworkRef((*services.CreateFlowNodeVirtualNetworkRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteFlowNodeVirtualNetworkRefResponse)(request), nil
}

func getRefUpdateFromRequestFlowNodeVirtualNetworkRef(request *services.CreateFlowNodeVirtualNetworkRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetFlowNodeVirtualNetworkRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "flow-node",
			UUID:      id,
			RefType:   "virtual-network",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateForwardingClass(ctx context.Context, request *services.CreateForwardingClassRequest) (*services.CreateForwardingClassResponse, error) {
	response := &services.CreateForwardingClassResponse{}
	_, err := h.Create(ctx, "/forwarding-classs", request, response)
	return response, err
}

func (h *HTTP) UpdateForwardingClass(ctx context.Context, request *services.UpdateForwardingClassRequest) (*services.UpdateForwardingClassResponse, error) {
	response := &services.UpdateForwardingClassResponse{}
	_, err := h.Update(ctx, "/forwarding-class/"+request.ForwardingClass.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteForwardingClass(ctx context.Context, request *services.DeleteForwardingClassRequest) (*services.DeleteForwardingClassResponse, error) {
	response := &services.DeleteForwardingClassResponse{}
	_, err := h.Delete(ctx, "/forwarding-class/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetForwardingClass(ctx context.Context, request *services.GetForwardingClassRequest) (*services.GetForwardingClassResponse, error) {
	response := &services.GetForwardingClassResponse{}
	_, err := h.Read(ctx, "/forwarding-class/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListForwardingClass(ctx context.Context, request *services.ListForwardingClassRequest) (*services.ListForwardingClassResponse, error) {
	response := &services.ListForwardingClassResponse{}
	_, err := h.ReadWithQuery(ctx, "/forwarding-classs", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateForwardingClassQosQueueRef(
	ctx context.Context, request *services.CreateForwardingClassQosQueueRefRequest,
) (*services.CreateForwardingClassQosQueueRefResponse, error) {
	data := getRefUpdateFromRequestForwardingClassQosQueueRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateForwardingClassQosQueueRefResponse)(request), nil
}

func (h *HTTP) DeleteForwardingClassQosQueueRef(
	ctx context.Context, request *services.DeleteForwardingClassQosQueueRefRequest,
) (*services.DeleteForwardingClassQosQueueRefResponse, error) {
	data := getRefUpdateFromRequestForwardingClassQosQueueRef((*services.CreateForwardingClassQosQueueRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteForwardingClassQosQueueRefResponse)(request), nil
}

func getRefUpdateFromRequestForwardingClassQosQueueRef(request *services.CreateForwardingClassQosQueueRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetForwardingClassQosQueueRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "forwarding-class",
			UUID:      id,
			RefType:   "qos-queue",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateForwardingClassTagRef(
	ctx context.Context, request *services.CreateForwardingClassTagRefRequest,
) (*services.CreateForwardingClassTagRefResponse, error) {
	data := getRefUpdateFromRequestForwardingClassTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateForwardingClassTagRefResponse)(request), nil
}

func (h *HTTP) DeleteForwardingClassTagRef(
	ctx context.Context, request *services.DeleteForwardingClassTagRefRequest,
) (*services.DeleteForwardingClassTagRefResponse, error) {
	data := getRefUpdateFromRequestForwardingClassTagRef((*services.CreateForwardingClassTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteForwardingClassTagRefResponse)(request), nil
}

func getRefUpdateFromRequestForwardingClassTagRef(request *services.CreateForwardingClassTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetForwardingClassTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "forwarding-class",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateGlobalAnalyticsConfig(ctx context.Context, request *services.CreateGlobalAnalyticsConfigRequest) (*services.CreateGlobalAnalyticsConfigResponse, error) {
	response := &services.CreateGlobalAnalyticsConfigResponse{}
	_, err := h.Create(ctx, "/global-analytics-configs", request, response)
	return response, err
}

func (h *HTTP) UpdateGlobalAnalyticsConfig(ctx context.Context, request *services.UpdateGlobalAnalyticsConfigRequest) (*services.UpdateGlobalAnalyticsConfigResponse, error) {
	response := &services.UpdateGlobalAnalyticsConfigResponse{}
	_, err := h.Update(ctx, "/global-analytics-config/"+request.GlobalAnalyticsConfig.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteGlobalAnalyticsConfig(ctx context.Context, request *services.DeleteGlobalAnalyticsConfigRequest) (*services.DeleteGlobalAnalyticsConfigResponse, error) {
	response := &services.DeleteGlobalAnalyticsConfigResponse{}
	_, err := h.Delete(ctx, "/global-analytics-config/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetGlobalAnalyticsConfig(ctx context.Context, request *services.GetGlobalAnalyticsConfigRequest) (*services.GetGlobalAnalyticsConfigResponse, error) {
	response := &services.GetGlobalAnalyticsConfigResponse{}
	_, err := h.Read(ctx, "/global-analytics-config/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListGlobalAnalyticsConfig(ctx context.Context, request *services.ListGlobalAnalyticsConfigRequest) (*services.ListGlobalAnalyticsConfigResponse, error) {
	response := &services.ListGlobalAnalyticsConfigResponse{}
	_, err := h.ReadWithQuery(ctx, "/global-analytics-configs", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateGlobalAnalyticsConfigTagRef(
	ctx context.Context, request *services.CreateGlobalAnalyticsConfigTagRefRequest,
) (*services.CreateGlobalAnalyticsConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestGlobalAnalyticsConfigTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateGlobalAnalyticsConfigTagRefResponse)(request), nil
}

func (h *HTTP) DeleteGlobalAnalyticsConfigTagRef(
	ctx context.Context, request *services.DeleteGlobalAnalyticsConfigTagRefRequest,
) (*services.DeleteGlobalAnalyticsConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestGlobalAnalyticsConfigTagRef((*services.CreateGlobalAnalyticsConfigTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteGlobalAnalyticsConfigTagRefResponse)(request), nil
}

func getRefUpdateFromRequestGlobalAnalyticsConfigTagRef(request *services.CreateGlobalAnalyticsConfigTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetGlobalAnalyticsConfigTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "global-analytics-config",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateGlobalQosConfig(ctx context.Context, request *services.CreateGlobalQosConfigRequest) (*services.CreateGlobalQosConfigResponse, error) {
	response := &services.CreateGlobalQosConfigResponse{}
	_, err := h.Create(ctx, "/global-qos-configs", request, response)
	return response, err
}

func (h *HTTP) UpdateGlobalQosConfig(ctx context.Context, request *services.UpdateGlobalQosConfigRequest) (*services.UpdateGlobalQosConfigResponse, error) {
	response := &services.UpdateGlobalQosConfigResponse{}
	_, err := h.Update(ctx, "/global-qos-config/"+request.GlobalQosConfig.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteGlobalQosConfig(ctx context.Context, request *services.DeleteGlobalQosConfigRequest) (*services.DeleteGlobalQosConfigResponse, error) {
	response := &services.DeleteGlobalQosConfigResponse{}
	_, err := h.Delete(ctx, "/global-qos-config/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetGlobalQosConfig(ctx context.Context, request *services.GetGlobalQosConfigRequest) (*services.GetGlobalQosConfigResponse, error) {
	response := &services.GetGlobalQosConfigResponse{}
	_, err := h.Read(ctx, "/global-qos-config/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListGlobalQosConfig(ctx context.Context, request *services.ListGlobalQosConfigRequest) (*services.ListGlobalQosConfigResponse, error) {
	response := &services.ListGlobalQosConfigResponse{}
	_, err := h.ReadWithQuery(ctx, "/global-qos-configs", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateGlobalQosConfigTagRef(
	ctx context.Context, request *services.CreateGlobalQosConfigTagRefRequest,
) (*services.CreateGlobalQosConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestGlobalQosConfigTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateGlobalQosConfigTagRefResponse)(request), nil
}

func (h *HTTP) DeleteGlobalQosConfigTagRef(
	ctx context.Context, request *services.DeleteGlobalQosConfigTagRefRequest,
) (*services.DeleteGlobalQosConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestGlobalQosConfigTagRef((*services.CreateGlobalQosConfigTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteGlobalQosConfigTagRefResponse)(request), nil
}

func getRefUpdateFromRequestGlobalQosConfigTagRef(request *services.CreateGlobalQosConfigTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetGlobalQosConfigTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "global-qos-config",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateGlobalSystemConfig(ctx context.Context, request *services.CreateGlobalSystemConfigRequest) (*services.CreateGlobalSystemConfigResponse, error) {
	response := &services.CreateGlobalSystemConfigResponse{}
	_, err := h.Create(ctx, "/global-system-configs", request, response)
	return response, err
}

func (h *HTTP) UpdateGlobalSystemConfig(ctx context.Context, request *services.UpdateGlobalSystemConfigRequest) (*services.UpdateGlobalSystemConfigResponse, error) {
	response := &services.UpdateGlobalSystemConfigResponse{}
	_, err := h.Update(ctx, "/global-system-config/"+request.GlobalSystemConfig.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteGlobalSystemConfig(ctx context.Context, request *services.DeleteGlobalSystemConfigRequest) (*services.DeleteGlobalSystemConfigResponse, error) {
	response := &services.DeleteGlobalSystemConfigResponse{}
	_, err := h.Delete(ctx, "/global-system-config/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetGlobalSystemConfig(ctx context.Context, request *services.GetGlobalSystemConfigRequest) (*services.GetGlobalSystemConfigResponse, error) {
	response := &services.GetGlobalSystemConfigResponse{}
	_, err := h.Read(ctx, "/global-system-config/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListGlobalSystemConfig(ctx context.Context, request *services.ListGlobalSystemConfigRequest) (*services.ListGlobalSystemConfigResponse, error) {
	response := &services.ListGlobalSystemConfigResponse{}
	_, err := h.ReadWithQuery(ctx, "/global-system-configs", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateGlobalSystemConfigBGPRouterRef(
	ctx context.Context, request *services.CreateGlobalSystemConfigBGPRouterRefRequest,
) (*services.CreateGlobalSystemConfigBGPRouterRefResponse, error) {
	data := getRefUpdateFromRequestGlobalSystemConfigBGPRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateGlobalSystemConfigBGPRouterRefResponse)(request), nil
}

func (h *HTTP) DeleteGlobalSystemConfigBGPRouterRef(
	ctx context.Context, request *services.DeleteGlobalSystemConfigBGPRouterRefRequest,
) (*services.DeleteGlobalSystemConfigBGPRouterRefResponse, error) {
	data := getRefUpdateFromRequestGlobalSystemConfigBGPRouterRef((*services.CreateGlobalSystemConfigBGPRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteGlobalSystemConfigBGPRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestGlobalSystemConfigBGPRouterRef(request *services.CreateGlobalSystemConfigBGPRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetGlobalSystemConfigBGPRouterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "global-system-config",
			UUID:      id,
			RefType:   "bgp-router",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateGlobalSystemConfigTagRef(
	ctx context.Context, request *services.CreateGlobalSystemConfigTagRefRequest,
) (*services.CreateGlobalSystemConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestGlobalSystemConfigTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateGlobalSystemConfigTagRefResponse)(request), nil
}

func (h *HTTP) DeleteGlobalSystemConfigTagRef(
	ctx context.Context, request *services.DeleteGlobalSystemConfigTagRefRequest,
) (*services.DeleteGlobalSystemConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestGlobalSystemConfigTagRef((*services.CreateGlobalSystemConfigTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteGlobalSystemConfigTagRefResponse)(request), nil
}

func getRefUpdateFromRequestGlobalSystemConfigTagRef(request *services.CreateGlobalSystemConfigTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetGlobalSystemConfigTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "global-system-config",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateGlobalVrouterConfig(ctx context.Context, request *services.CreateGlobalVrouterConfigRequest) (*services.CreateGlobalVrouterConfigResponse, error) {
	response := &services.CreateGlobalVrouterConfigResponse{}
	_, err := h.Create(ctx, "/global-vrouter-configs", request, response)
	return response, err
}

func (h *HTTP) UpdateGlobalVrouterConfig(ctx context.Context, request *services.UpdateGlobalVrouterConfigRequest) (*services.UpdateGlobalVrouterConfigResponse, error) {
	response := &services.UpdateGlobalVrouterConfigResponse{}
	_, err := h.Update(ctx, "/global-vrouter-config/"+request.GlobalVrouterConfig.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteGlobalVrouterConfig(ctx context.Context, request *services.DeleteGlobalVrouterConfigRequest) (*services.DeleteGlobalVrouterConfigResponse, error) {
	response := &services.DeleteGlobalVrouterConfigResponse{}
	_, err := h.Delete(ctx, "/global-vrouter-config/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetGlobalVrouterConfig(ctx context.Context, request *services.GetGlobalVrouterConfigRequest) (*services.GetGlobalVrouterConfigResponse, error) {
	response := &services.GetGlobalVrouterConfigResponse{}
	_, err := h.Read(ctx, "/global-vrouter-config/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListGlobalVrouterConfig(ctx context.Context, request *services.ListGlobalVrouterConfigRequest) (*services.ListGlobalVrouterConfigResponse, error) {
	response := &services.ListGlobalVrouterConfigResponse{}
	_, err := h.ReadWithQuery(ctx, "/global-vrouter-configs", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateGlobalVrouterConfigTagRef(
	ctx context.Context, request *services.CreateGlobalVrouterConfigTagRefRequest,
) (*services.CreateGlobalVrouterConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestGlobalVrouterConfigTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateGlobalVrouterConfigTagRefResponse)(request), nil
}

func (h *HTTP) DeleteGlobalVrouterConfigTagRef(
	ctx context.Context, request *services.DeleteGlobalVrouterConfigTagRefRequest,
) (*services.DeleteGlobalVrouterConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestGlobalVrouterConfigTagRef((*services.CreateGlobalVrouterConfigTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteGlobalVrouterConfigTagRefResponse)(request), nil
}

func getRefUpdateFromRequestGlobalVrouterConfigTagRef(request *services.CreateGlobalVrouterConfigTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetGlobalVrouterConfigTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "global-vrouter-config",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateHardwareInventory(ctx context.Context, request *services.CreateHardwareInventoryRequest) (*services.CreateHardwareInventoryResponse, error) {
	response := &services.CreateHardwareInventoryResponse{}
	_, err := h.Create(ctx, "/hardware-inventorys", request, response)
	return response, err
}

func (h *HTTP) UpdateHardwareInventory(ctx context.Context, request *services.UpdateHardwareInventoryRequest) (*services.UpdateHardwareInventoryResponse, error) {
	response := &services.UpdateHardwareInventoryResponse{}
	_, err := h.Update(ctx, "/hardware-inventory/"+request.HardwareInventory.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteHardwareInventory(ctx context.Context, request *services.DeleteHardwareInventoryRequest) (*services.DeleteHardwareInventoryResponse, error) {
	response := &services.DeleteHardwareInventoryResponse{}
	_, err := h.Delete(ctx, "/hardware-inventory/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetHardwareInventory(ctx context.Context, request *services.GetHardwareInventoryRequest) (*services.GetHardwareInventoryResponse, error) {
	response := &services.GetHardwareInventoryResponse{}
	_, err := h.Read(ctx, "/hardware-inventory/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListHardwareInventory(ctx context.Context, request *services.ListHardwareInventoryRequest) (*services.ListHardwareInventoryResponse, error) {
	response := &services.ListHardwareInventoryResponse{}
	_, err := h.ReadWithQuery(ctx, "/hardware-inventorys", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateHardwareInventoryTagRef(
	ctx context.Context, request *services.CreateHardwareInventoryTagRefRequest,
) (*services.CreateHardwareInventoryTagRefResponse, error) {
	data := getRefUpdateFromRequestHardwareInventoryTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateHardwareInventoryTagRefResponse)(request), nil
}

func (h *HTTP) DeleteHardwareInventoryTagRef(
	ctx context.Context, request *services.DeleteHardwareInventoryTagRefRequest,
) (*services.DeleteHardwareInventoryTagRefResponse, error) {
	data := getRefUpdateFromRequestHardwareInventoryTagRef((*services.CreateHardwareInventoryTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteHardwareInventoryTagRefResponse)(request), nil
}

func getRefUpdateFromRequestHardwareInventoryTagRef(request *services.CreateHardwareInventoryTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetHardwareInventoryTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "hardware-inventory",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateHardware(ctx context.Context, request *services.CreateHardwareRequest) (*services.CreateHardwareResponse, error) {
	response := &services.CreateHardwareResponse{}
	_, err := h.Create(ctx, "/hardwares", request, response)
	return response, err
}

func (h *HTTP) UpdateHardware(ctx context.Context, request *services.UpdateHardwareRequest) (*services.UpdateHardwareResponse, error) {
	response := &services.UpdateHardwareResponse{}
	_, err := h.Update(ctx, "/hardware/"+request.Hardware.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteHardware(ctx context.Context, request *services.DeleteHardwareRequest) (*services.DeleteHardwareResponse, error) {
	response := &services.DeleteHardwareResponse{}
	_, err := h.Delete(ctx, "/hardware/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetHardware(ctx context.Context, request *services.GetHardwareRequest) (*services.GetHardwareResponse, error) {
	response := &services.GetHardwareResponse{}
	_, err := h.Read(ctx, "/hardware/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListHardware(ctx context.Context, request *services.ListHardwareRequest) (*services.ListHardwareResponse, error) {
	response := &services.ListHardwareResponse{}
	_, err := h.ReadWithQuery(ctx, "/hardwares", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateHardwareCardRef(
	ctx context.Context, request *services.CreateHardwareCardRefRequest,
) (*services.CreateHardwareCardRefResponse, error) {
	data := getRefUpdateFromRequestHardwareCardRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateHardwareCardRefResponse)(request), nil
}

func (h *HTTP) DeleteHardwareCardRef(
	ctx context.Context, request *services.DeleteHardwareCardRefRequest,
) (*services.DeleteHardwareCardRefResponse, error) {
	data := getRefUpdateFromRequestHardwareCardRef((*services.CreateHardwareCardRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteHardwareCardRefResponse)(request), nil
}

func getRefUpdateFromRequestHardwareCardRef(request *services.CreateHardwareCardRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetHardwareCardRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "hardware",
			UUID:      id,
			RefType:   "card",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateHardwareTagRef(
	ctx context.Context, request *services.CreateHardwareTagRefRequest,
) (*services.CreateHardwareTagRefResponse, error) {
	data := getRefUpdateFromRequestHardwareTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateHardwareTagRefResponse)(request), nil
}

func (h *HTTP) DeleteHardwareTagRef(
	ctx context.Context, request *services.DeleteHardwareTagRefRequest,
) (*services.DeleteHardwareTagRefResponse, error) {
	data := getRefUpdateFromRequestHardwareTagRef((*services.CreateHardwareTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteHardwareTagRefResponse)(request), nil
}

func getRefUpdateFromRequestHardwareTagRef(request *services.CreateHardwareTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetHardwareTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "hardware",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateHostBasedService(ctx context.Context, request *services.CreateHostBasedServiceRequest) (*services.CreateHostBasedServiceResponse, error) {
	response := &services.CreateHostBasedServiceResponse{}
	_, err := h.Create(ctx, "/host-based-services", request, response)
	return response, err
}

func (h *HTTP) UpdateHostBasedService(ctx context.Context, request *services.UpdateHostBasedServiceRequest) (*services.UpdateHostBasedServiceResponse, error) {
	response := &services.UpdateHostBasedServiceResponse{}
	_, err := h.Update(ctx, "/host-based-service/"+request.HostBasedService.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteHostBasedService(ctx context.Context, request *services.DeleteHostBasedServiceRequest) (*services.DeleteHostBasedServiceResponse, error) {
	response := &services.DeleteHostBasedServiceResponse{}
	_, err := h.Delete(ctx, "/host-based-service/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetHostBasedService(ctx context.Context, request *services.GetHostBasedServiceRequest) (*services.GetHostBasedServiceResponse, error) {
	response := &services.GetHostBasedServiceResponse{}
	_, err := h.Read(ctx, "/host-based-service/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListHostBasedService(ctx context.Context, request *services.ListHostBasedServiceRequest) (*services.ListHostBasedServiceResponse, error) {
	response := &services.ListHostBasedServiceResponse{}
	_, err := h.ReadWithQuery(ctx, "/host-based-services", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateHostBasedServiceTagRef(
	ctx context.Context, request *services.CreateHostBasedServiceTagRefRequest,
) (*services.CreateHostBasedServiceTagRefResponse, error) {
	data := getRefUpdateFromRequestHostBasedServiceTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateHostBasedServiceTagRefResponse)(request), nil
}

func (h *HTTP) DeleteHostBasedServiceTagRef(
	ctx context.Context, request *services.DeleteHostBasedServiceTagRefRequest,
) (*services.DeleteHostBasedServiceTagRefResponse, error) {
	data := getRefUpdateFromRequestHostBasedServiceTagRef((*services.CreateHostBasedServiceTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteHostBasedServiceTagRefResponse)(request), nil
}

func getRefUpdateFromRequestHostBasedServiceTagRef(request *services.CreateHostBasedServiceTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetHostBasedServiceTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "host-based-service",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateHostBasedServiceVirtualNetworkRef(
	ctx context.Context, request *services.CreateHostBasedServiceVirtualNetworkRefRequest,
) (*services.CreateHostBasedServiceVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestHostBasedServiceVirtualNetworkRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateHostBasedServiceVirtualNetworkRefResponse)(request), nil
}

func (h *HTTP) DeleteHostBasedServiceVirtualNetworkRef(
	ctx context.Context, request *services.DeleteHostBasedServiceVirtualNetworkRefRequest,
) (*services.DeleteHostBasedServiceVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestHostBasedServiceVirtualNetworkRef((*services.CreateHostBasedServiceVirtualNetworkRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteHostBasedServiceVirtualNetworkRefResponse)(request), nil
}

func getRefUpdateFromRequestHostBasedServiceVirtualNetworkRef(request *services.CreateHostBasedServiceVirtualNetworkRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetHostBasedServiceVirtualNetworkRef()

	data := struct {
		services.RefUpdate

		Attr *models.ServiceVirtualNetworkType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "host-based-service",
			UUID:      id,
			RefType:   "virtual-network",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateInstanceIP(ctx context.Context, request *services.CreateInstanceIPRequest) (*services.CreateInstanceIPResponse, error) {
	response := &services.CreateInstanceIPResponse{}
	_, err := h.Create(ctx, "/instance-ips", request, response)
	return response, err
}

func (h *HTTP) UpdateInstanceIP(ctx context.Context, request *services.UpdateInstanceIPRequest) (*services.UpdateInstanceIPResponse, error) {
	response := &services.UpdateInstanceIPResponse{}
	_, err := h.Update(ctx, "/instance-ip/"+request.InstanceIP.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteInstanceIP(ctx context.Context, request *services.DeleteInstanceIPRequest) (*services.DeleteInstanceIPResponse, error) {
	response := &services.DeleteInstanceIPResponse{}
	_, err := h.Delete(ctx, "/instance-ip/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetInstanceIP(ctx context.Context, request *services.GetInstanceIPRequest) (*services.GetInstanceIPResponse, error) {
	response := &services.GetInstanceIPResponse{}
	_, err := h.Read(ctx, "/instance-ip/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListInstanceIP(ctx context.Context, request *services.ListInstanceIPRequest) (*services.ListInstanceIPResponse, error) {
	response := &services.ListInstanceIPResponse{}
	_, err := h.ReadWithQuery(ctx, "/instance-ips", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateInstanceIPFlowNodeRef(
	ctx context.Context, request *services.CreateInstanceIPFlowNodeRefRequest,
) (*services.CreateInstanceIPFlowNodeRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPFlowNodeRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateInstanceIPFlowNodeRefResponse)(request), nil
}

func (h *HTTP) DeleteInstanceIPFlowNodeRef(
	ctx context.Context, request *services.DeleteInstanceIPFlowNodeRefRequest,
) (*services.DeleteInstanceIPFlowNodeRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPFlowNodeRef((*services.CreateInstanceIPFlowNodeRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteInstanceIPFlowNodeRefResponse)(request), nil
}

func getRefUpdateFromRequestInstanceIPFlowNodeRef(request *services.CreateInstanceIPFlowNodeRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetInstanceIPFlowNodeRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "instance-ip",
			UUID:      id,
			RefType:   "flow-node",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateInstanceIPLogicalInterfaceRef(
	ctx context.Context, request *services.CreateInstanceIPLogicalInterfaceRefRequest,
) (*services.CreateInstanceIPLogicalInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPLogicalInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateInstanceIPLogicalInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteInstanceIPLogicalInterfaceRef(
	ctx context.Context, request *services.DeleteInstanceIPLogicalInterfaceRefRequest,
) (*services.DeleteInstanceIPLogicalInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPLogicalInterfaceRef((*services.CreateInstanceIPLogicalInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteInstanceIPLogicalInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestInstanceIPLogicalInterfaceRef(request *services.CreateInstanceIPLogicalInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetInstanceIPLogicalInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "instance-ip",
			UUID:      id,
			RefType:   "logical-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateInstanceIPNetworkIpamRef(
	ctx context.Context, request *services.CreateInstanceIPNetworkIpamRefRequest,
) (*services.CreateInstanceIPNetworkIpamRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPNetworkIpamRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateInstanceIPNetworkIpamRefResponse)(request), nil
}

func (h *HTTP) DeleteInstanceIPNetworkIpamRef(
	ctx context.Context, request *services.DeleteInstanceIPNetworkIpamRefRequest,
) (*services.DeleteInstanceIPNetworkIpamRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPNetworkIpamRef((*services.CreateInstanceIPNetworkIpamRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteInstanceIPNetworkIpamRefResponse)(request), nil
}

func getRefUpdateFromRequestInstanceIPNetworkIpamRef(request *services.CreateInstanceIPNetworkIpamRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetInstanceIPNetworkIpamRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "instance-ip",
			UUID:      id,
			RefType:   "network-ipam",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateInstanceIPPhysicalRouterRef(
	ctx context.Context, request *services.CreateInstanceIPPhysicalRouterRefRequest,
) (*services.CreateInstanceIPPhysicalRouterRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPPhysicalRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateInstanceIPPhysicalRouterRefResponse)(request), nil
}

func (h *HTTP) DeleteInstanceIPPhysicalRouterRef(
	ctx context.Context, request *services.DeleteInstanceIPPhysicalRouterRefRequest,
) (*services.DeleteInstanceIPPhysicalRouterRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPPhysicalRouterRef((*services.CreateInstanceIPPhysicalRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteInstanceIPPhysicalRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestInstanceIPPhysicalRouterRef(request *services.CreateInstanceIPPhysicalRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetInstanceIPPhysicalRouterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "instance-ip",
			UUID:      id,
			RefType:   "physical-router",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateInstanceIPTagRef(
	ctx context.Context, request *services.CreateInstanceIPTagRefRequest,
) (*services.CreateInstanceIPTagRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateInstanceIPTagRefResponse)(request), nil
}

func (h *HTTP) DeleteInstanceIPTagRef(
	ctx context.Context, request *services.DeleteInstanceIPTagRefRequest,
) (*services.DeleteInstanceIPTagRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPTagRef((*services.CreateInstanceIPTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteInstanceIPTagRefResponse)(request), nil
}

func getRefUpdateFromRequestInstanceIPTagRef(request *services.CreateInstanceIPTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetInstanceIPTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "instance-ip",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateInstanceIPVirtualMachineInterfaceRef(
	ctx context.Context, request *services.CreateInstanceIPVirtualMachineInterfaceRefRequest,
) (*services.CreateInstanceIPVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPVirtualMachineInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateInstanceIPVirtualMachineInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteInstanceIPVirtualMachineInterfaceRef(
	ctx context.Context, request *services.DeleteInstanceIPVirtualMachineInterfaceRefRequest,
) (*services.DeleteInstanceIPVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPVirtualMachineInterfaceRef((*services.CreateInstanceIPVirtualMachineInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteInstanceIPVirtualMachineInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestInstanceIPVirtualMachineInterfaceRef(request *services.CreateInstanceIPVirtualMachineInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetInstanceIPVirtualMachineInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "instance-ip",
			UUID:      id,
			RefType:   "virtual-machine-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateInstanceIPVirtualNetworkRef(
	ctx context.Context, request *services.CreateInstanceIPVirtualNetworkRefRequest,
) (*services.CreateInstanceIPVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPVirtualNetworkRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateInstanceIPVirtualNetworkRefResponse)(request), nil
}

func (h *HTTP) DeleteInstanceIPVirtualNetworkRef(
	ctx context.Context, request *services.DeleteInstanceIPVirtualNetworkRefRequest,
) (*services.DeleteInstanceIPVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPVirtualNetworkRef((*services.CreateInstanceIPVirtualNetworkRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteInstanceIPVirtualNetworkRefResponse)(request), nil
}

func getRefUpdateFromRequestInstanceIPVirtualNetworkRef(request *services.CreateInstanceIPVirtualNetworkRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetInstanceIPVirtualNetworkRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "instance-ip",
			UUID:      id,
			RefType:   "virtual-network",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateInstanceIPVirtualRouterRef(
	ctx context.Context, request *services.CreateInstanceIPVirtualRouterRefRequest,
) (*services.CreateInstanceIPVirtualRouterRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPVirtualRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateInstanceIPVirtualRouterRefResponse)(request), nil
}

func (h *HTTP) DeleteInstanceIPVirtualRouterRef(
	ctx context.Context, request *services.DeleteInstanceIPVirtualRouterRefRequest,
) (*services.DeleteInstanceIPVirtualRouterRefResponse, error) {
	data := getRefUpdateFromRequestInstanceIPVirtualRouterRef((*services.CreateInstanceIPVirtualRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteInstanceIPVirtualRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestInstanceIPVirtualRouterRef(request *services.CreateInstanceIPVirtualRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetInstanceIPVirtualRouterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "instance-ip",
			UUID:      id,
			RefType:   "virtual-router",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateIntentMap(ctx context.Context, request *services.CreateIntentMapRequest) (*services.CreateIntentMapResponse, error) {
	response := &services.CreateIntentMapResponse{}
	_, err := h.Create(ctx, "/intent-maps", request, response)
	return response, err
}

func (h *HTTP) UpdateIntentMap(ctx context.Context, request *services.UpdateIntentMapRequest) (*services.UpdateIntentMapResponse, error) {
	response := &services.UpdateIntentMapResponse{}
	_, err := h.Update(ctx, "/intent-map/"+request.IntentMap.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteIntentMap(ctx context.Context, request *services.DeleteIntentMapRequest) (*services.DeleteIntentMapResponse, error) {
	response := &services.DeleteIntentMapResponse{}
	_, err := h.Delete(ctx, "/intent-map/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetIntentMap(ctx context.Context, request *services.GetIntentMapRequest) (*services.GetIntentMapResponse, error) {
	response := &services.GetIntentMapResponse{}
	_, err := h.Read(ctx, "/intent-map/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListIntentMap(ctx context.Context, request *services.ListIntentMapRequest) (*services.ListIntentMapResponse, error) {
	response := &services.ListIntentMapResponse{}
	_, err := h.ReadWithQuery(ctx, "/intent-maps", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateIntentMapTagRef(
	ctx context.Context, request *services.CreateIntentMapTagRefRequest,
) (*services.CreateIntentMapTagRefResponse, error) {
	data := getRefUpdateFromRequestIntentMapTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateIntentMapTagRefResponse)(request), nil
}

func (h *HTTP) DeleteIntentMapTagRef(
	ctx context.Context, request *services.DeleteIntentMapTagRefRequest,
) (*services.DeleteIntentMapTagRefResponse, error) {
	data := getRefUpdateFromRequestIntentMapTagRef((*services.CreateIntentMapTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteIntentMapTagRefResponse)(request), nil
}

func getRefUpdateFromRequestIntentMapTagRef(request *services.CreateIntentMapTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetIntentMapTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "intent-map",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateInterfaceRouteTable(ctx context.Context, request *services.CreateInterfaceRouteTableRequest) (*services.CreateInterfaceRouteTableResponse, error) {
	response := &services.CreateInterfaceRouteTableResponse{}
	_, err := h.Create(ctx, "/interface-route-tables", request, response)
	return response, err
}

func (h *HTTP) UpdateInterfaceRouteTable(ctx context.Context, request *services.UpdateInterfaceRouteTableRequest) (*services.UpdateInterfaceRouteTableResponse, error) {
	response := &services.UpdateInterfaceRouteTableResponse{}
	_, err := h.Update(ctx, "/interface-route-table/"+request.InterfaceRouteTable.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteInterfaceRouteTable(ctx context.Context, request *services.DeleteInterfaceRouteTableRequest) (*services.DeleteInterfaceRouteTableResponse, error) {
	response := &services.DeleteInterfaceRouteTableResponse{}
	_, err := h.Delete(ctx, "/interface-route-table/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetInterfaceRouteTable(ctx context.Context, request *services.GetInterfaceRouteTableRequest) (*services.GetInterfaceRouteTableResponse, error) {
	response := &services.GetInterfaceRouteTableResponse{}
	_, err := h.Read(ctx, "/interface-route-table/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListInterfaceRouteTable(ctx context.Context, request *services.ListInterfaceRouteTableRequest) (*services.ListInterfaceRouteTableResponse, error) {
	response := &services.ListInterfaceRouteTableResponse{}
	_, err := h.ReadWithQuery(ctx, "/interface-route-tables", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateInterfaceRouteTableServiceInstanceRef(
	ctx context.Context, request *services.CreateInterfaceRouteTableServiceInstanceRefRequest,
) (*services.CreateInterfaceRouteTableServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestInterfaceRouteTableServiceInstanceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateInterfaceRouteTableServiceInstanceRefResponse)(request), nil
}

func (h *HTTP) DeleteInterfaceRouteTableServiceInstanceRef(
	ctx context.Context, request *services.DeleteInterfaceRouteTableServiceInstanceRefRequest,
) (*services.DeleteInterfaceRouteTableServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestInterfaceRouteTableServiceInstanceRef((*services.CreateInterfaceRouteTableServiceInstanceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteInterfaceRouteTableServiceInstanceRefResponse)(request), nil
}

func getRefUpdateFromRequestInterfaceRouteTableServiceInstanceRef(request *services.CreateInterfaceRouteTableServiceInstanceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetInterfaceRouteTableServiceInstanceRef()

	data := struct {
		services.RefUpdate

		Attr *models.ServiceInterfaceTag `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "interface-route-table",
			UUID:      id,
			RefType:   "service-instance",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateInterfaceRouteTableTagRef(
	ctx context.Context, request *services.CreateInterfaceRouteTableTagRefRequest,
) (*services.CreateInterfaceRouteTableTagRefResponse, error) {
	data := getRefUpdateFromRequestInterfaceRouteTableTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateInterfaceRouteTableTagRefResponse)(request), nil
}

func (h *HTTP) DeleteInterfaceRouteTableTagRef(
	ctx context.Context, request *services.DeleteInterfaceRouteTableTagRefRequest,
) (*services.DeleteInterfaceRouteTableTagRefResponse, error) {
	data := getRefUpdateFromRequestInterfaceRouteTableTagRef((*services.CreateInterfaceRouteTableTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteInterfaceRouteTableTagRefResponse)(request), nil
}

func getRefUpdateFromRequestInterfaceRouteTableTagRef(request *services.CreateInterfaceRouteTableTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetInterfaceRouteTableTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "interface-route-table",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateJobTemplate(ctx context.Context, request *services.CreateJobTemplateRequest) (*services.CreateJobTemplateResponse, error) {
	response := &services.CreateJobTemplateResponse{}
	_, err := h.Create(ctx, "/job-templates", request, response)
	return response, err
}

func (h *HTTP) UpdateJobTemplate(ctx context.Context, request *services.UpdateJobTemplateRequest) (*services.UpdateJobTemplateResponse, error) {
	response := &services.UpdateJobTemplateResponse{}
	_, err := h.Update(ctx, "/job-template/"+request.JobTemplate.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteJobTemplate(ctx context.Context, request *services.DeleteJobTemplateRequest) (*services.DeleteJobTemplateResponse, error) {
	response := &services.DeleteJobTemplateResponse{}
	_, err := h.Delete(ctx, "/job-template/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetJobTemplate(ctx context.Context, request *services.GetJobTemplateRequest) (*services.GetJobTemplateResponse, error) {
	response := &services.GetJobTemplateResponse{}
	_, err := h.Read(ctx, "/job-template/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListJobTemplate(ctx context.Context, request *services.ListJobTemplateRequest) (*services.ListJobTemplateResponse, error) {
	response := &services.ListJobTemplateResponse{}
	_, err := h.ReadWithQuery(ctx, "/job-templates", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateJobTemplateTagRef(
	ctx context.Context, request *services.CreateJobTemplateTagRefRequest,
) (*services.CreateJobTemplateTagRefResponse, error) {
	data := getRefUpdateFromRequestJobTemplateTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateJobTemplateTagRefResponse)(request), nil
}

func (h *HTTP) DeleteJobTemplateTagRef(
	ctx context.Context, request *services.DeleteJobTemplateTagRefRequest,
) (*services.DeleteJobTemplateTagRefResponse, error) {
	data := getRefUpdateFromRequestJobTemplateTagRef((*services.CreateJobTemplateTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteJobTemplateTagRefResponse)(request), nil
}

func getRefUpdateFromRequestJobTemplateTagRef(request *services.CreateJobTemplateTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetJobTemplateTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "job-template",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLinkAggregationGroup(ctx context.Context, request *services.CreateLinkAggregationGroupRequest) (*services.CreateLinkAggregationGroupResponse, error) {
	response := &services.CreateLinkAggregationGroupResponse{}
	_, err := h.Create(ctx, "/link-aggregation-groups", request, response)
	return response, err
}

func (h *HTTP) UpdateLinkAggregationGroup(ctx context.Context, request *services.UpdateLinkAggregationGroupRequest) (*services.UpdateLinkAggregationGroupResponse, error) {
	response := &services.UpdateLinkAggregationGroupResponse{}
	_, err := h.Update(ctx, "/link-aggregation-group/"+request.LinkAggregationGroup.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteLinkAggregationGroup(ctx context.Context, request *services.DeleteLinkAggregationGroupRequest) (*services.DeleteLinkAggregationGroupResponse, error) {
	response := &services.DeleteLinkAggregationGroupResponse{}
	_, err := h.Delete(ctx, "/link-aggregation-group/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetLinkAggregationGroup(ctx context.Context, request *services.GetLinkAggregationGroupRequest) (*services.GetLinkAggregationGroupResponse, error) {
	response := &services.GetLinkAggregationGroupResponse{}
	_, err := h.Read(ctx, "/link-aggregation-group/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListLinkAggregationGroup(ctx context.Context, request *services.ListLinkAggregationGroupRequest) (*services.ListLinkAggregationGroupResponse, error) {
	response := &services.ListLinkAggregationGroupResponse{}
	_, err := h.ReadWithQuery(ctx, "/link-aggregation-groups", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateLinkAggregationGroupPhysicalInterfaceRef(
	ctx context.Context, request *services.CreateLinkAggregationGroupPhysicalInterfaceRefRequest,
) (*services.CreateLinkAggregationGroupPhysicalInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestLinkAggregationGroupPhysicalInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLinkAggregationGroupPhysicalInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteLinkAggregationGroupPhysicalInterfaceRef(
	ctx context.Context, request *services.DeleteLinkAggregationGroupPhysicalInterfaceRefRequest,
) (*services.DeleteLinkAggregationGroupPhysicalInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestLinkAggregationGroupPhysicalInterfaceRef((*services.CreateLinkAggregationGroupPhysicalInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLinkAggregationGroupPhysicalInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestLinkAggregationGroupPhysicalInterfaceRef(request *services.CreateLinkAggregationGroupPhysicalInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLinkAggregationGroupPhysicalInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "link-aggregation-group",
			UUID:      id,
			RefType:   "physical-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLinkAggregationGroupTagRef(
	ctx context.Context, request *services.CreateLinkAggregationGroupTagRefRequest,
) (*services.CreateLinkAggregationGroupTagRefResponse, error) {
	data := getRefUpdateFromRequestLinkAggregationGroupTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLinkAggregationGroupTagRefResponse)(request), nil
}

func (h *HTTP) DeleteLinkAggregationGroupTagRef(
	ctx context.Context, request *services.DeleteLinkAggregationGroupTagRefRequest,
) (*services.DeleteLinkAggregationGroupTagRefResponse, error) {
	data := getRefUpdateFromRequestLinkAggregationGroupTagRef((*services.CreateLinkAggregationGroupTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLinkAggregationGroupTagRefResponse)(request), nil
}

func getRefUpdateFromRequestLinkAggregationGroupTagRef(request *services.CreateLinkAggregationGroupTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLinkAggregationGroupTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "link-aggregation-group",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLinkAggregationGroupVirtualMachineInterfaceRef(
	ctx context.Context, request *services.CreateLinkAggregationGroupVirtualMachineInterfaceRefRequest,
) (*services.CreateLinkAggregationGroupVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestLinkAggregationGroupVirtualMachineInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLinkAggregationGroupVirtualMachineInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteLinkAggregationGroupVirtualMachineInterfaceRef(
	ctx context.Context, request *services.DeleteLinkAggregationGroupVirtualMachineInterfaceRefRequest,
) (*services.DeleteLinkAggregationGroupVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestLinkAggregationGroupVirtualMachineInterfaceRef((*services.CreateLinkAggregationGroupVirtualMachineInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLinkAggregationGroupVirtualMachineInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestLinkAggregationGroupVirtualMachineInterfaceRef(request *services.CreateLinkAggregationGroupVirtualMachineInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLinkAggregationGroupVirtualMachineInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "link-aggregation-group",
			UUID:      id,
			RefType:   "virtual-machine-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLoadbalancerHealthmonitor(ctx context.Context, request *services.CreateLoadbalancerHealthmonitorRequest) (*services.CreateLoadbalancerHealthmonitorResponse, error) {
	response := &services.CreateLoadbalancerHealthmonitorResponse{}
	_, err := h.Create(ctx, "/loadbalancer-healthmonitors", request, response)
	return response, err
}

func (h *HTTP) UpdateLoadbalancerHealthmonitor(ctx context.Context, request *services.UpdateLoadbalancerHealthmonitorRequest) (*services.UpdateLoadbalancerHealthmonitorResponse, error) {
	response := &services.UpdateLoadbalancerHealthmonitorResponse{}
	_, err := h.Update(ctx, "/loadbalancer-healthmonitor/"+request.LoadbalancerHealthmonitor.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteLoadbalancerHealthmonitor(ctx context.Context, request *services.DeleteLoadbalancerHealthmonitorRequest) (*services.DeleteLoadbalancerHealthmonitorResponse, error) {
	response := &services.DeleteLoadbalancerHealthmonitorResponse{}
	_, err := h.Delete(ctx, "/loadbalancer-healthmonitor/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetLoadbalancerHealthmonitor(ctx context.Context, request *services.GetLoadbalancerHealthmonitorRequest) (*services.GetLoadbalancerHealthmonitorResponse, error) {
	response := &services.GetLoadbalancerHealthmonitorResponse{}
	_, err := h.Read(ctx, "/loadbalancer-healthmonitor/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListLoadbalancerHealthmonitor(ctx context.Context, request *services.ListLoadbalancerHealthmonitorRequest) (*services.ListLoadbalancerHealthmonitorResponse, error) {
	response := &services.ListLoadbalancerHealthmonitorResponse{}
	_, err := h.ReadWithQuery(ctx, "/loadbalancer-healthmonitors", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateLoadbalancerHealthmonitorTagRef(
	ctx context.Context, request *services.CreateLoadbalancerHealthmonitorTagRefRequest,
) (*services.CreateLoadbalancerHealthmonitorTagRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerHealthmonitorTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLoadbalancerHealthmonitorTagRefResponse)(request), nil
}

func (h *HTTP) DeleteLoadbalancerHealthmonitorTagRef(
	ctx context.Context, request *services.DeleteLoadbalancerHealthmonitorTagRefRequest,
) (*services.DeleteLoadbalancerHealthmonitorTagRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerHealthmonitorTagRef((*services.CreateLoadbalancerHealthmonitorTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLoadbalancerHealthmonitorTagRefResponse)(request), nil
}

func getRefUpdateFromRequestLoadbalancerHealthmonitorTagRef(request *services.CreateLoadbalancerHealthmonitorTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLoadbalancerHealthmonitorTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "loadbalancer-healthmonitor",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLoadbalancerListener(ctx context.Context, request *services.CreateLoadbalancerListenerRequest) (*services.CreateLoadbalancerListenerResponse, error) {
	response := &services.CreateLoadbalancerListenerResponse{}
	_, err := h.Create(ctx, "/loadbalancer-listeners", request, response)
	return response, err
}

func (h *HTTP) UpdateLoadbalancerListener(ctx context.Context, request *services.UpdateLoadbalancerListenerRequest) (*services.UpdateLoadbalancerListenerResponse, error) {
	response := &services.UpdateLoadbalancerListenerResponse{}
	_, err := h.Update(ctx, "/loadbalancer-listener/"+request.LoadbalancerListener.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteLoadbalancerListener(ctx context.Context, request *services.DeleteLoadbalancerListenerRequest) (*services.DeleteLoadbalancerListenerResponse, error) {
	response := &services.DeleteLoadbalancerListenerResponse{}
	_, err := h.Delete(ctx, "/loadbalancer-listener/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetLoadbalancerListener(ctx context.Context, request *services.GetLoadbalancerListenerRequest) (*services.GetLoadbalancerListenerResponse, error) {
	response := &services.GetLoadbalancerListenerResponse{}
	_, err := h.Read(ctx, "/loadbalancer-listener/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListLoadbalancerListener(ctx context.Context, request *services.ListLoadbalancerListenerRequest) (*services.ListLoadbalancerListenerResponse, error) {
	response := &services.ListLoadbalancerListenerResponse{}
	_, err := h.ReadWithQuery(ctx, "/loadbalancer-listeners", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateLoadbalancerListenerLoadbalancerRef(
	ctx context.Context, request *services.CreateLoadbalancerListenerLoadbalancerRefRequest,
) (*services.CreateLoadbalancerListenerLoadbalancerRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerListenerLoadbalancerRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLoadbalancerListenerLoadbalancerRefResponse)(request), nil
}

func (h *HTTP) DeleteLoadbalancerListenerLoadbalancerRef(
	ctx context.Context, request *services.DeleteLoadbalancerListenerLoadbalancerRefRequest,
) (*services.DeleteLoadbalancerListenerLoadbalancerRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerListenerLoadbalancerRef((*services.CreateLoadbalancerListenerLoadbalancerRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLoadbalancerListenerLoadbalancerRefResponse)(request), nil
}

func getRefUpdateFromRequestLoadbalancerListenerLoadbalancerRef(request *services.CreateLoadbalancerListenerLoadbalancerRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLoadbalancerListenerLoadbalancerRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "loadbalancer-listener",
			UUID:      id,
			RefType:   "loadbalancer",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLoadbalancerListenerTagRef(
	ctx context.Context, request *services.CreateLoadbalancerListenerTagRefRequest,
) (*services.CreateLoadbalancerListenerTagRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerListenerTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLoadbalancerListenerTagRefResponse)(request), nil
}

func (h *HTTP) DeleteLoadbalancerListenerTagRef(
	ctx context.Context, request *services.DeleteLoadbalancerListenerTagRefRequest,
) (*services.DeleteLoadbalancerListenerTagRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerListenerTagRef((*services.CreateLoadbalancerListenerTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLoadbalancerListenerTagRefResponse)(request), nil
}

func getRefUpdateFromRequestLoadbalancerListenerTagRef(request *services.CreateLoadbalancerListenerTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLoadbalancerListenerTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "loadbalancer-listener",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLoadbalancerMember(ctx context.Context, request *services.CreateLoadbalancerMemberRequest) (*services.CreateLoadbalancerMemberResponse, error) {
	response := &services.CreateLoadbalancerMemberResponse{}
	_, err := h.Create(ctx, "/loadbalancer-members", request, response)
	return response, err
}

func (h *HTTP) UpdateLoadbalancerMember(ctx context.Context, request *services.UpdateLoadbalancerMemberRequest) (*services.UpdateLoadbalancerMemberResponse, error) {
	response := &services.UpdateLoadbalancerMemberResponse{}
	_, err := h.Update(ctx, "/loadbalancer-member/"+request.LoadbalancerMember.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteLoadbalancerMember(ctx context.Context, request *services.DeleteLoadbalancerMemberRequest) (*services.DeleteLoadbalancerMemberResponse, error) {
	response := &services.DeleteLoadbalancerMemberResponse{}
	_, err := h.Delete(ctx, "/loadbalancer-member/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetLoadbalancerMember(ctx context.Context, request *services.GetLoadbalancerMemberRequest) (*services.GetLoadbalancerMemberResponse, error) {
	response := &services.GetLoadbalancerMemberResponse{}
	_, err := h.Read(ctx, "/loadbalancer-member/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListLoadbalancerMember(ctx context.Context, request *services.ListLoadbalancerMemberRequest) (*services.ListLoadbalancerMemberResponse, error) {
	response := &services.ListLoadbalancerMemberResponse{}
	_, err := h.ReadWithQuery(ctx, "/loadbalancer-members", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateLoadbalancerMemberTagRef(
	ctx context.Context, request *services.CreateLoadbalancerMemberTagRefRequest,
) (*services.CreateLoadbalancerMemberTagRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerMemberTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLoadbalancerMemberTagRefResponse)(request), nil
}

func (h *HTTP) DeleteLoadbalancerMemberTagRef(
	ctx context.Context, request *services.DeleteLoadbalancerMemberTagRefRequest,
) (*services.DeleteLoadbalancerMemberTagRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerMemberTagRef((*services.CreateLoadbalancerMemberTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLoadbalancerMemberTagRefResponse)(request), nil
}

func getRefUpdateFromRequestLoadbalancerMemberTagRef(request *services.CreateLoadbalancerMemberTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLoadbalancerMemberTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "loadbalancer-member",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLoadbalancerPool(ctx context.Context, request *services.CreateLoadbalancerPoolRequest) (*services.CreateLoadbalancerPoolResponse, error) {
	response := &services.CreateLoadbalancerPoolResponse{}
	_, err := h.Create(ctx, "/loadbalancer-pools", request, response)
	return response, err
}

func (h *HTTP) UpdateLoadbalancerPool(ctx context.Context, request *services.UpdateLoadbalancerPoolRequest) (*services.UpdateLoadbalancerPoolResponse, error) {
	response := &services.UpdateLoadbalancerPoolResponse{}
	_, err := h.Update(ctx, "/loadbalancer-pool/"+request.LoadbalancerPool.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteLoadbalancerPool(ctx context.Context, request *services.DeleteLoadbalancerPoolRequest) (*services.DeleteLoadbalancerPoolResponse, error) {
	response := &services.DeleteLoadbalancerPoolResponse{}
	_, err := h.Delete(ctx, "/loadbalancer-pool/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetLoadbalancerPool(ctx context.Context, request *services.GetLoadbalancerPoolRequest) (*services.GetLoadbalancerPoolResponse, error) {
	response := &services.GetLoadbalancerPoolResponse{}
	_, err := h.Read(ctx, "/loadbalancer-pool/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListLoadbalancerPool(ctx context.Context, request *services.ListLoadbalancerPoolRequest) (*services.ListLoadbalancerPoolResponse, error) {
	response := &services.ListLoadbalancerPoolResponse{}
	_, err := h.ReadWithQuery(ctx, "/loadbalancer-pools", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateLoadbalancerPoolLoadbalancerHealthmonitorRef(
	ctx context.Context, request *services.CreateLoadbalancerPoolLoadbalancerHealthmonitorRefRequest,
) (*services.CreateLoadbalancerPoolLoadbalancerHealthmonitorRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerPoolLoadbalancerHealthmonitorRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLoadbalancerPoolLoadbalancerHealthmonitorRefResponse)(request), nil
}

func (h *HTTP) DeleteLoadbalancerPoolLoadbalancerHealthmonitorRef(
	ctx context.Context, request *services.DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefRequest,
) (*services.DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerPoolLoadbalancerHealthmonitorRef((*services.CreateLoadbalancerPoolLoadbalancerHealthmonitorRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLoadbalancerPoolLoadbalancerHealthmonitorRefResponse)(request), nil
}

func getRefUpdateFromRequestLoadbalancerPoolLoadbalancerHealthmonitorRef(request *services.CreateLoadbalancerPoolLoadbalancerHealthmonitorRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLoadbalancerPoolLoadbalancerHealthmonitorRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "loadbalancer-pool",
			UUID:      id,
			RefType:   "loadbalancer-healthmonitor",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLoadbalancerPoolLoadbalancerListenerRef(
	ctx context.Context, request *services.CreateLoadbalancerPoolLoadbalancerListenerRefRequest,
) (*services.CreateLoadbalancerPoolLoadbalancerListenerRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerPoolLoadbalancerListenerRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLoadbalancerPoolLoadbalancerListenerRefResponse)(request), nil
}

func (h *HTTP) DeleteLoadbalancerPoolLoadbalancerListenerRef(
	ctx context.Context, request *services.DeleteLoadbalancerPoolLoadbalancerListenerRefRequest,
) (*services.DeleteLoadbalancerPoolLoadbalancerListenerRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerPoolLoadbalancerListenerRef((*services.CreateLoadbalancerPoolLoadbalancerListenerRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLoadbalancerPoolLoadbalancerListenerRefResponse)(request), nil
}

func getRefUpdateFromRequestLoadbalancerPoolLoadbalancerListenerRef(request *services.CreateLoadbalancerPoolLoadbalancerListenerRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLoadbalancerPoolLoadbalancerListenerRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "loadbalancer-pool",
			UUID:      id,
			RefType:   "loadbalancer-listener",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLoadbalancerPoolServiceApplianceSetRef(
	ctx context.Context, request *services.CreateLoadbalancerPoolServiceApplianceSetRefRequest,
) (*services.CreateLoadbalancerPoolServiceApplianceSetRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerPoolServiceApplianceSetRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLoadbalancerPoolServiceApplianceSetRefResponse)(request), nil
}

func (h *HTTP) DeleteLoadbalancerPoolServiceApplianceSetRef(
	ctx context.Context, request *services.DeleteLoadbalancerPoolServiceApplianceSetRefRequest,
) (*services.DeleteLoadbalancerPoolServiceApplianceSetRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerPoolServiceApplianceSetRef((*services.CreateLoadbalancerPoolServiceApplianceSetRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLoadbalancerPoolServiceApplianceSetRefResponse)(request), nil
}

func getRefUpdateFromRequestLoadbalancerPoolServiceApplianceSetRef(request *services.CreateLoadbalancerPoolServiceApplianceSetRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLoadbalancerPoolServiceApplianceSetRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "loadbalancer-pool",
			UUID:      id,
			RefType:   "service-appliance-set",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLoadbalancerPoolServiceInstanceRef(
	ctx context.Context, request *services.CreateLoadbalancerPoolServiceInstanceRefRequest,
) (*services.CreateLoadbalancerPoolServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerPoolServiceInstanceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLoadbalancerPoolServiceInstanceRefResponse)(request), nil
}

func (h *HTTP) DeleteLoadbalancerPoolServiceInstanceRef(
	ctx context.Context, request *services.DeleteLoadbalancerPoolServiceInstanceRefRequest,
) (*services.DeleteLoadbalancerPoolServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerPoolServiceInstanceRef((*services.CreateLoadbalancerPoolServiceInstanceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLoadbalancerPoolServiceInstanceRefResponse)(request), nil
}

func getRefUpdateFromRequestLoadbalancerPoolServiceInstanceRef(request *services.CreateLoadbalancerPoolServiceInstanceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLoadbalancerPoolServiceInstanceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "loadbalancer-pool",
			UUID:      id,
			RefType:   "service-instance",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLoadbalancerPoolTagRef(
	ctx context.Context, request *services.CreateLoadbalancerPoolTagRefRequest,
) (*services.CreateLoadbalancerPoolTagRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerPoolTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLoadbalancerPoolTagRefResponse)(request), nil
}

func (h *HTTP) DeleteLoadbalancerPoolTagRef(
	ctx context.Context, request *services.DeleteLoadbalancerPoolTagRefRequest,
) (*services.DeleteLoadbalancerPoolTagRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerPoolTagRef((*services.CreateLoadbalancerPoolTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLoadbalancerPoolTagRefResponse)(request), nil
}

func getRefUpdateFromRequestLoadbalancerPoolTagRef(request *services.CreateLoadbalancerPoolTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLoadbalancerPoolTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "loadbalancer-pool",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLoadbalancerPoolVirtualMachineInterfaceRef(
	ctx context.Context, request *services.CreateLoadbalancerPoolVirtualMachineInterfaceRefRequest,
) (*services.CreateLoadbalancerPoolVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerPoolVirtualMachineInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLoadbalancerPoolVirtualMachineInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteLoadbalancerPoolVirtualMachineInterfaceRef(
	ctx context.Context, request *services.DeleteLoadbalancerPoolVirtualMachineInterfaceRefRequest,
) (*services.DeleteLoadbalancerPoolVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerPoolVirtualMachineInterfaceRef((*services.CreateLoadbalancerPoolVirtualMachineInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLoadbalancerPoolVirtualMachineInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestLoadbalancerPoolVirtualMachineInterfaceRef(request *services.CreateLoadbalancerPoolVirtualMachineInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLoadbalancerPoolVirtualMachineInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "loadbalancer-pool",
			UUID:      id,
			RefType:   "virtual-machine-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLoadbalancer(ctx context.Context, request *services.CreateLoadbalancerRequest) (*services.CreateLoadbalancerResponse, error) {
	response := &services.CreateLoadbalancerResponse{}
	_, err := h.Create(ctx, "/loadbalancers", request, response)
	return response, err
}

func (h *HTTP) UpdateLoadbalancer(ctx context.Context, request *services.UpdateLoadbalancerRequest) (*services.UpdateLoadbalancerResponse, error) {
	response := &services.UpdateLoadbalancerResponse{}
	_, err := h.Update(ctx, "/loadbalancer/"+request.Loadbalancer.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteLoadbalancer(ctx context.Context, request *services.DeleteLoadbalancerRequest) (*services.DeleteLoadbalancerResponse, error) {
	response := &services.DeleteLoadbalancerResponse{}
	_, err := h.Delete(ctx, "/loadbalancer/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetLoadbalancer(ctx context.Context, request *services.GetLoadbalancerRequest) (*services.GetLoadbalancerResponse, error) {
	response := &services.GetLoadbalancerResponse{}
	_, err := h.Read(ctx, "/loadbalancer/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListLoadbalancer(ctx context.Context, request *services.ListLoadbalancerRequest) (*services.ListLoadbalancerResponse, error) {
	response := &services.ListLoadbalancerResponse{}
	_, err := h.ReadWithQuery(ctx, "/loadbalancers", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateLoadbalancerServiceApplianceSetRef(
	ctx context.Context, request *services.CreateLoadbalancerServiceApplianceSetRefRequest,
) (*services.CreateLoadbalancerServiceApplianceSetRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerServiceApplianceSetRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLoadbalancerServiceApplianceSetRefResponse)(request), nil
}

func (h *HTTP) DeleteLoadbalancerServiceApplianceSetRef(
	ctx context.Context, request *services.DeleteLoadbalancerServiceApplianceSetRefRequest,
) (*services.DeleteLoadbalancerServiceApplianceSetRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerServiceApplianceSetRef((*services.CreateLoadbalancerServiceApplianceSetRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLoadbalancerServiceApplianceSetRefResponse)(request), nil
}

func getRefUpdateFromRequestLoadbalancerServiceApplianceSetRef(request *services.CreateLoadbalancerServiceApplianceSetRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLoadbalancerServiceApplianceSetRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "loadbalancer",
			UUID:      id,
			RefType:   "service-appliance-set",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLoadbalancerServiceInstanceRef(
	ctx context.Context, request *services.CreateLoadbalancerServiceInstanceRefRequest,
) (*services.CreateLoadbalancerServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerServiceInstanceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLoadbalancerServiceInstanceRefResponse)(request), nil
}

func (h *HTTP) DeleteLoadbalancerServiceInstanceRef(
	ctx context.Context, request *services.DeleteLoadbalancerServiceInstanceRefRequest,
) (*services.DeleteLoadbalancerServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerServiceInstanceRef((*services.CreateLoadbalancerServiceInstanceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLoadbalancerServiceInstanceRefResponse)(request), nil
}

func getRefUpdateFromRequestLoadbalancerServiceInstanceRef(request *services.CreateLoadbalancerServiceInstanceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLoadbalancerServiceInstanceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "loadbalancer",
			UUID:      id,
			RefType:   "service-instance",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLoadbalancerTagRef(
	ctx context.Context, request *services.CreateLoadbalancerTagRefRequest,
) (*services.CreateLoadbalancerTagRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLoadbalancerTagRefResponse)(request), nil
}

func (h *HTTP) DeleteLoadbalancerTagRef(
	ctx context.Context, request *services.DeleteLoadbalancerTagRefRequest,
) (*services.DeleteLoadbalancerTagRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerTagRef((*services.CreateLoadbalancerTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLoadbalancerTagRefResponse)(request), nil
}

func getRefUpdateFromRequestLoadbalancerTagRef(request *services.CreateLoadbalancerTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLoadbalancerTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "loadbalancer",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLoadbalancerVirtualMachineInterfaceRef(
	ctx context.Context, request *services.CreateLoadbalancerVirtualMachineInterfaceRefRequest,
) (*services.CreateLoadbalancerVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerVirtualMachineInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLoadbalancerVirtualMachineInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteLoadbalancerVirtualMachineInterfaceRef(
	ctx context.Context, request *services.DeleteLoadbalancerVirtualMachineInterfaceRefRequest,
) (*services.DeleteLoadbalancerVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestLoadbalancerVirtualMachineInterfaceRef((*services.CreateLoadbalancerVirtualMachineInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLoadbalancerVirtualMachineInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestLoadbalancerVirtualMachineInterfaceRef(request *services.CreateLoadbalancerVirtualMachineInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLoadbalancerVirtualMachineInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "loadbalancer",
			UUID:      id,
			RefType:   "virtual-machine-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLogicalInterface(ctx context.Context, request *services.CreateLogicalInterfaceRequest) (*services.CreateLogicalInterfaceResponse, error) {
	response := &services.CreateLogicalInterfaceResponse{}
	_, err := h.Create(ctx, "/logical-interfaces", request, response)
	return response, err
}

func (h *HTTP) UpdateLogicalInterface(ctx context.Context, request *services.UpdateLogicalInterfaceRequest) (*services.UpdateLogicalInterfaceResponse, error) {
	response := &services.UpdateLogicalInterfaceResponse{}
	_, err := h.Update(ctx, "/logical-interface/"+request.LogicalInterface.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteLogicalInterface(ctx context.Context, request *services.DeleteLogicalInterfaceRequest) (*services.DeleteLogicalInterfaceResponse, error) {
	response := &services.DeleteLogicalInterfaceResponse{}
	_, err := h.Delete(ctx, "/logical-interface/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetLogicalInterface(ctx context.Context, request *services.GetLogicalInterfaceRequest) (*services.GetLogicalInterfaceResponse, error) {
	response := &services.GetLogicalInterfaceResponse{}
	_, err := h.Read(ctx, "/logical-interface/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListLogicalInterface(ctx context.Context, request *services.ListLogicalInterfaceRequest) (*services.ListLogicalInterfaceResponse, error) {
	response := &services.ListLogicalInterfaceResponse{}
	_, err := h.ReadWithQuery(ctx, "/logical-interfaces", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateLogicalInterfaceTagRef(
	ctx context.Context, request *services.CreateLogicalInterfaceTagRefRequest,
) (*services.CreateLogicalInterfaceTagRefResponse, error) {
	data := getRefUpdateFromRequestLogicalInterfaceTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLogicalInterfaceTagRefResponse)(request), nil
}

func (h *HTTP) DeleteLogicalInterfaceTagRef(
	ctx context.Context, request *services.DeleteLogicalInterfaceTagRefRequest,
) (*services.DeleteLogicalInterfaceTagRefResponse, error) {
	data := getRefUpdateFromRequestLogicalInterfaceTagRef((*services.CreateLogicalInterfaceTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLogicalInterfaceTagRefResponse)(request), nil
}

func getRefUpdateFromRequestLogicalInterfaceTagRef(request *services.CreateLogicalInterfaceTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLogicalInterfaceTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "logical-interface",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLogicalInterfaceVirtualMachineInterfaceRef(
	ctx context.Context, request *services.CreateLogicalInterfaceVirtualMachineInterfaceRefRequest,
) (*services.CreateLogicalInterfaceVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestLogicalInterfaceVirtualMachineInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLogicalInterfaceVirtualMachineInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteLogicalInterfaceVirtualMachineInterfaceRef(
	ctx context.Context, request *services.DeleteLogicalInterfaceVirtualMachineInterfaceRefRequest,
) (*services.DeleteLogicalInterfaceVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestLogicalInterfaceVirtualMachineInterfaceRef((*services.CreateLogicalInterfaceVirtualMachineInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLogicalInterfaceVirtualMachineInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestLogicalInterfaceVirtualMachineInterfaceRef(request *services.CreateLogicalInterfaceVirtualMachineInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLogicalInterfaceVirtualMachineInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "logical-interface",
			UUID:      id,
			RefType:   "virtual-machine-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLogicalRouter(ctx context.Context, request *services.CreateLogicalRouterRequest) (*services.CreateLogicalRouterResponse, error) {
	response := &services.CreateLogicalRouterResponse{}
	_, err := h.Create(ctx, "/logical-routers", request, response)
	return response, err
}

func (h *HTTP) UpdateLogicalRouter(ctx context.Context, request *services.UpdateLogicalRouterRequest) (*services.UpdateLogicalRouterResponse, error) {
	response := &services.UpdateLogicalRouterResponse{}
	_, err := h.Update(ctx, "/logical-router/"+request.LogicalRouter.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteLogicalRouter(ctx context.Context, request *services.DeleteLogicalRouterRequest) (*services.DeleteLogicalRouterResponse, error) {
	response := &services.DeleteLogicalRouterResponse{}
	_, err := h.Delete(ctx, "/logical-router/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetLogicalRouter(ctx context.Context, request *services.GetLogicalRouterRequest) (*services.GetLogicalRouterResponse, error) {
	response := &services.GetLogicalRouterResponse{}
	_, err := h.Read(ctx, "/logical-router/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListLogicalRouter(ctx context.Context, request *services.ListLogicalRouterRequest) (*services.ListLogicalRouterResponse, error) {
	response := &services.ListLogicalRouterResponse{}
	_, err := h.ReadWithQuery(ctx, "/logical-routers", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateLogicalRouterBGPVPNRef(
	ctx context.Context, request *services.CreateLogicalRouterBGPVPNRefRequest,
) (*services.CreateLogicalRouterBGPVPNRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterBGPVPNRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLogicalRouterBGPVPNRefResponse)(request), nil
}

func (h *HTTP) DeleteLogicalRouterBGPVPNRef(
	ctx context.Context, request *services.DeleteLogicalRouterBGPVPNRefRequest,
) (*services.DeleteLogicalRouterBGPVPNRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterBGPVPNRef((*services.CreateLogicalRouterBGPVPNRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLogicalRouterBGPVPNRefResponse)(request), nil
}

func getRefUpdateFromRequestLogicalRouterBGPVPNRef(request *services.CreateLogicalRouterBGPVPNRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLogicalRouterBGPVPNRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "logical-router",
			UUID:      id,
			RefType:   "bgpvpn",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLogicalRouterPhysicalRouterRef(
	ctx context.Context, request *services.CreateLogicalRouterPhysicalRouterRefRequest,
) (*services.CreateLogicalRouterPhysicalRouterRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterPhysicalRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLogicalRouterPhysicalRouterRefResponse)(request), nil
}

func (h *HTTP) DeleteLogicalRouterPhysicalRouterRef(
	ctx context.Context, request *services.DeleteLogicalRouterPhysicalRouterRefRequest,
) (*services.DeleteLogicalRouterPhysicalRouterRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterPhysicalRouterRef((*services.CreateLogicalRouterPhysicalRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLogicalRouterPhysicalRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestLogicalRouterPhysicalRouterRef(request *services.CreateLogicalRouterPhysicalRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLogicalRouterPhysicalRouterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "logical-router",
			UUID:      id,
			RefType:   "physical-router",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLogicalRouterRouteTableRef(
	ctx context.Context, request *services.CreateLogicalRouterRouteTableRefRequest,
) (*services.CreateLogicalRouterRouteTableRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterRouteTableRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLogicalRouterRouteTableRefResponse)(request), nil
}

func (h *HTTP) DeleteLogicalRouterRouteTableRef(
	ctx context.Context, request *services.DeleteLogicalRouterRouteTableRefRequest,
) (*services.DeleteLogicalRouterRouteTableRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterRouteTableRef((*services.CreateLogicalRouterRouteTableRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLogicalRouterRouteTableRefResponse)(request), nil
}

func getRefUpdateFromRequestLogicalRouterRouteTableRef(request *services.CreateLogicalRouterRouteTableRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLogicalRouterRouteTableRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "logical-router",
			UUID:      id,
			RefType:   "route-table",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLogicalRouterRouteTargetRef(
	ctx context.Context, request *services.CreateLogicalRouterRouteTargetRefRequest,
) (*services.CreateLogicalRouterRouteTargetRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterRouteTargetRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLogicalRouterRouteTargetRefResponse)(request), nil
}

func (h *HTTP) DeleteLogicalRouterRouteTargetRef(
	ctx context.Context, request *services.DeleteLogicalRouterRouteTargetRefRequest,
) (*services.DeleteLogicalRouterRouteTargetRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterRouteTargetRef((*services.CreateLogicalRouterRouteTargetRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLogicalRouterRouteTargetRefResponse)(request), nil
}

func getRefUpdateFromRequestLogicalRouterRouteTargetRef(request *services.CreateLogicalRouterRouteTargetRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLogicalRouterRouteTargetRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "logical-router",
			UUID:      id,
			RefType:   "route-target",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLogicalRouterServiceInstanceRef(
	ctx context.Context, request *services.CreateLogicalRouterServiceInstanceRefRequest,
) (*services.CreateLogicalRouterServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterServiceInstanceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLogicalRouterServiceInstanceRefResponse)(request), nil
}

func (h *HTTP) DeleteLogicalRouterServiceInstanceRef(
	ctx context.Context, request *services.DeleteLogicalRouterServiceInstanceRefRequest,
) (*services.DeleteLogicalRouterServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterServiceInstanceRef((*services.CreateLogicalRouterServiceInstanceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLogicalRouterServiceInstanceRefResponse)(request), nil
}

func getRefUpdateFromRequestLogicalRouterServiceInstanceRef(request *services.CreateLogicalRouterServiceInstanceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLogicalRouterServiceInstanceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "logical-router",
			UUID:      id,
			RefType:   "service-instance",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLogicalRouterTagRef(
	ctx context.Context, request *services.CreateLogicalRouterTagRefRequest,
) (*services.CreateLogicalRouterTagRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLogicalRouterTagRefResponse)(request), nil
}

func (h *HTTP) DeleteLogicalRouterTagRef(
	ctx context.Context, request *services.DeleteLogicalRouterTagRefRequest,
) (*services.DeleteLogicalRouterTagRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterTagRef((*services.CreateLogicalRouterTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLogicalRouterTagRefResponse)(request), nil
}

func getRefUpdateFromRequestLogicalRouterTagRef(request *services.CreateLogicalRouterTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLogicalRouterTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "logical-router",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLogicalRouterVirtualMachineInterfaceRef(
	ctx context.Context, request *services.CreateLogicalRouterVirtualMachineInterfaceRefRequest,
) (*services.CreateLogicalRouterVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterVirtualMachineInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLogicalRouterVirtualMachineInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteLogicalRouterVirtualMachineInterfaceRef(
	ctx context.Context, request *services.DeleteLogicalRouterVirtualMachineInterfaceRefRequest,
) (*services.DeleteLogicalRouterVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterVirtualMachineInterfaceRef((*services.CreateLogicalRouterVirtualMachineInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLogicalRouterVirtualMachineInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestLogicalRouterVirtualMachineInterfaceRef(request *services.CreateLogicalRouterVirtualMachineInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLogicalRouterVirtualMachineInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "logical-router",
			UUID:      id,
			RefType:   "virtual-machine-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateLogicalRouterVirtualNetworkRef(
	ctx context.Context, request *services.CreateLogicalRouterVirtualNetworkRefRequest,
) (*services.CreateLogicalRouterVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterVirtualNetworkRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateLogicalRouterVirtualNetworkRefResponse)(request), nil
}

func (h *HTTP) DeleteLogicalRouterVirtualNetworkRef(
	ctx context.Context, request *services.DeleteLogicalRouterVirtualNetworkRefRequest,
) (*services.DeleteLogicalRouterVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestLogicalRouterVirtualNetworkRef((*services.CreateLogicalRouterVirtualNetworkRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteLogicalRouterVirtualNetworkRefResponse)(request), nil
}

func getRefUpdateFromRequestLogicalRouterVirtualNetworkRef(request *services.CreateLogicalRouterVirtualNetworkRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetLogicalRouterVirtualNetworkRef()

	data := struct {
		services.RefUpdate

		Attr *models.LogicalRouterVirtualNetworkType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "logical-router",
			UUID:      id,
			RefType:   "virtual-network",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateMulticastPolicy(ctx context.Context, request *services.CreateMulticastPolicyRequest) (*services.CreateMulticastPolicyResponse, error) {
	response := &services.CreateMulticastPolicyResponse{}
	_, err := h.Create(ctx, "/multicast-policys", request, response)
	return response, err
}

func (h *HTTP) UpdateMulticastPolicy(ctx context.Context, request *services.UpdateMulticastPolicyRequest) (*services.UpdateMulticastPolicyResponse, error) {
	response := &services.UpdateMulticastPolicyResponse{}
	_, err := h.Update(ctx, "/multicast-policy/"+request.MulticastPolicy.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteMulticastPolicy(ctx context.Context, request *services.DeleteMulticastPolicyRequest) (*services.DeleteMulticastPolicyResponse, error) {
	response := &services.DeleteMulticastPolicyResponse{}
	_, err := h.Delete(ctx, "/multicast-policy/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetMulticastPolicy(ctx context.Context, request *services.GetMulticastPolicyRequest) (*services.GetMulticastPolicyResponse, error) {
	response := &services.GetMulticastPolicyResponse{}
	_, err := h.Read(ctx, "/multicast-policy/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListMulticastPolicy(ctx context.Context, request *services.ListMulticastPolicyRequest) (*services.ListMulticastPolicyResponse, error) {
	response := &services.ListMulticastPolicyResponse{}
	_, err := h.ReadWithQuery(ctx, "/multicast-policys", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateMulticastPolicyTagRef(
	ctx context.Context, request *services.CreateMulticastPolicyTagRefRequest,
) (*services.CreateMulticastPolicyTagRefResponse, error) {
	data := getRefUpdateFromRequestMulticastPolicyTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateMulticastPolicyTagRefResponse)(request), nil
}

func (h *HTTP) DeleteMulticastPolicyTagRef(
	ctx context.Context, request *services.DeleteMulticastPolicyTagRefRequest,
) (*services.DeleteMulticastPolicyTagRefResponse, error) {
	data := getRefUpdateFromRequestMulticastPolicyTagRef((*services.CreateMulticastPolicyTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteMulticastPolicyTagRefResponse)(request), nil
}

func getRefUpdateFromRequestMulticastPolicyTagRef(request *services.CreateMulticastPolicyTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetMulticastPolicyTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "multicast-policy",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateNamespace(ctx context.Context, request *services.CreateNamespaceRequest) (*services.CreateNamespaceResponse, error) {
	response := &services.CreateNamespaceResponse{}
	_, err := h.Create(ctx, "/namespaces", request, response)
	return response, err
}

func (h *HTTP) UpdateNamespace(ctx context.Context, request *services.UpdateNamespaceRequest) (*services.UpdateNamespaceResponse, error) {
	response := &services.UpdateNamespaceResponse{}
	_, err := h.Update(ctx, "/namespace/"+request.Namespace.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteNamespace(ctx context.Context, request *services.DeleteNamespaceRequest) (*services.DeleteNamespaceResponse, error) {
	response := &services.DeleteNamespaceResponse{}
	_, err := h.Delete(ctx, "/namespace/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetNamespace(ctx context.Context, request *services.GetNamespaceRequest) (*services.GetNamespaceResponse, error) {
	response := &services.GetNamespaceResponse{}
	_, err := h.Read(ctx, "/namespace/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListNamespace(ctx context.Context, request *services.ListNamespaceRequest) (*services.ListNamespaceResponse, error) {
	response := &services.ListNamespaceResponse{}
	_, err := h.ReadWithQuery(ctx, "/namespaces", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateNamespaceTagRef(
	ctx context.Context, request *services.CreateNamespaceTagRefRequest,
) (*services.CreateNamespaceTagRefResponse, error) {
	data := getRefUpdateFromRequestNamespaceTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateNamespaceTagRefResponse)(request), nil
}

func (h *HTTP) DeleteNamespaceTagRef(
	ctx context.Context, request *services.DeleteNamespaceTagRefRequest,
) (*services.DeleteNamespaceTagRefResponse, error) {
	data := getRefUpdateFromRequestNamespaceTagRef((*services.CreateNamespaceTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteNamespaceTagRefResponse)(request), nil
}

func getRefUpdateFromRequestNamespaceTagRef(request *services.CreateNamespaceTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetNamespaceTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "namespace",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateNetworkDeviceConfig(ctx context.Context, request *services.CreateNetworkDeviceConfigRequest) (*services.CreateNetworkDeviceConfigResponse, error) {
	response := &services.CreateNetworkDeviceConfigResponse{}
	_, err := h.Create(ctx, "/network-device-configs", request, response)
	return response, err
}

func (h *HTTP) UpdateNetworkDeviceConfig(ctx context.Context, request *services.UpdateNetworkDeviceConfigRequest) (*services.UpdateNetworkDeviceConfigResponse, error) {
	response := &services.UpdateNetworkDeviceConfigResponse{}
	_, err := h.Update(ctx, "/network-device-config/"+request.NetworkDeviceConfig.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteNetworkDeviceConfig(ctx context.Context, request *services.DeleteNetworkDeviceConfigRequest) (*services.DeleteNetworkDeviceConfigResponse, error) {
	response := &services.DeleteNetworkDeviceConfigResponse{}
	_, err := h.Delete(ctx, "/network-device-config/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetNetworkDeviceConfig(ctx context.Context, request *services.GetNetworkDeviceConfigRequest) (*services.GetNetworkDeviceConfigResponse, error) {
	response := &services.GetNetworkDeviceConfigResponse{}
	_, err := h.Read(ctx, "/network-device-config/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListNetworkDeviceConfig(ctx context.Context, request *services.ListNetworkDeviceConfigRequest) (*services.ListNetworkDeviceConfigResponse, error) {
	response := &services.ListNetworkDeviceConfigResponse{}
	_, err := h.ReadWithQuery(ctx, "/network-device-configs", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateNetworkDeviceConfigPhysicalRouterRef(
	ctx context.Context, request *services.CreateNetworkDeviceConfigPhysicalRouterRefRequest,
) (*services.CreateNetworkDeviceConfigPhysicalRouterRefResponse, error) {
	data := getRefUpdateFromRequestNetworkDeviceConfigPhysicalRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateNetworkDeviceConfigPhysicalRouterRefResponse)(request), nil
}

func (h *HTTP) DeleteNetworkDeviceConfigPhysicalRouterRef(
	ctx context.Context, request *services.DeleteNetworkDeviceConfigPhysicalRouterRefRequest,
) (*services.DeleteNetworkDeviceConfigPhysicalRouterRefResponse, error) {
	data := getRefUpdateFromRequestNetworkDeviceConfigPhysicalRouterRef((*services.CreateNetworkDeviceConfigPhysicalRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteNetworkDeviceConfigPhysicalRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestNetworkDeviceConfigPhysicalRouterRef(request *services.CreateNetworkDeviceConfigPhysicalRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetNetworkDeviceConfigPhysicalRouterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "network-device-config",
			UUID:      id,
			RefType:   "physical-router",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateNetworkDeviceConfigTagRef(
	ctx context.Context, request *services.CreateNetworkDeviceConfigTagRefRequest,
) (*services.CreateNetworkDeviceConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestNetworkDeviceConfigTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateNetworkDeviceConfigTagRefResponse)(request), nil
}

func (h *HTTP) DeleteNetworkDeviceConfigTagRef(
	ctx context.Context, request *services.DeleteNetworkDeviceConfigTagRefRequest,
) (*services.DeleteNetworkDeviceConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestNetworkDeviceConfigTagRef((*services.CreateNetworkDeviceConfigTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteNetworkDeviceConfigTagRefResponse)(request), nil
}

func getRefUpdateFromRequestNetworkDeviceConfigTagRef(request *services.CreateNetworkDeviceConfigTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetNetworkDeviceConfigTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "network-device-config",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateNetworkIpam(ctx context.Context, request *services.CreateNetworkIpamRequest) (*services.CreateNetworkIpamResponse, error) {
	response := &services.CreateNetworkIpamResponse{}
	_, err := h.Create(ctx, "/network-ipams", request, response)
	return response, err
}

func (h *HTTP) UpdateNetworkIpam(ctx context.Context, request *services.UpdateNetworkIpamRequest) (*services.UpdateNetworkIpamResponse, error) {
	response := &services.UpdateNetworkIpamResponse{}
	_, err := h.Update(ctx, "/network-ipam/"+request.NetworkIpam.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteNetworkIpam(ctx context.Context, request *services.DeleteNetworkIpamRequest) (*services.DeleteNetworkIpamResponse, error) {
	response := &services.DeleteNetworkIpamResponse{}
	_, err := h.Delete(ctx, "/network-ipam/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetNetworkIpam(ctx context.Context, request *services.GetNetworkIpamRequest) (*services.GetNetworkIpamResponse, error) {
	response := &services.GetNetworkIpamResponse{}
	_, err := h.Read(ctx, "/network-ipam/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListNetworkIpam(ctx context.Context, request *services.ListNetworkIpamRequest) (*services.ListNetworkIpamResponse, error) {
	response := &services.ListNetworkIpamResponse{}
	_, err := h.ReadWithQuery(ctx, "/network-ipams", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateNetworkIpamTagRef(
	ctx context.Context, request *services.CreateNetworkIpamTagRefRequest,
) (*services.CreateNetworkIpamTagRefResponse, error) {
	data := getRefUpdateFromRequestNetworkIpamTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateNetworkIpamTagRefResponse)(request), nil
}

func (h *HTTP) DeleteNetworkIpamTagRef(
	ctx context.Context, request *services.DeleteNetworkIpamTagRefRequest,
) (*services.DeleteNetworkIpamTagRefResponse, error) {
	data := getRefUpdateFromRequestNetworkIpamTagRef((*services.CreateNetworkIpamTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteNetworkIpamTagRefResponse)(request), nil
}

func getRefUpdateFromRequestNetworkIpamTagRef(request *services.CreateNetworkIpamTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetNetworkIpamTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "network-ipam",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateNetworkIpamVirtualDNSRef(
	ctx context.Context, request *services.CreateNetworkIpamVirtualDNSRefRequest,
) (*services.CreateNetworkIpamVirtualDNSRefResponse, error) {
	data := getRefUpdateFromRequestNetworkIpamVirtualDNSRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateNetworkIpamVirtualDNSRefResponse)(request), nil
}

func (h *HTTP) DeleteNetworkIpamVirtualDNSRef(
	ctx context.Context, request *services.DeleteNetworkIpamVirtualDNSRefRequest,
) (*services.DeleteNetworkIpamVirtualDNSRefResponse, error) {
	data := getRefUpdateFromRequestNetworkIpamVirtualDNSRef((*services.CreateNetworkIpamVirtualDNSRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteNetworkIpamVirtualDNSRefResponse)(request), nil
}

func getRefUpdateFromRequestNetworkIpamVirtualDNSRef(request *services.CreateNetworkIpamVirtualDNSRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetNetworkIpamVirtualDNSRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "network-ipam",
			UUID:      id,
			RefType:   "virtual-DNS",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateNetworkPolicy(ctx context.Context, request *services.CreateNetworkPolicyRequest) (*services.CreateNetworkPolicyResponse, error) {
	response := &services.CreateNetworkPolicyResponse{}
	_, err := h.Create(ctx, "/network-policys", request, response)
	return response, err
}

func (h *HTTP) UpdateNetworkPolicy(ctx context.Context, request *services.UpdateNetworkPolicyRequest) (*services.UpdateNetworkPolicyResponse, error) {
	response := &services.UpdateNetworkPolicyResponse{}
	_, err := h.Update(ctx, "/network-policy/"+request.NetworkPolicy.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteNetworkPolicy(ctx context.Context, request *services.DeleteNetworkPolicyRequest) (*services.DeleteNetworkPolicyResponse, error) {
	response := &services.DeleteNetworkPolicyResponse{}
	_, err := h.Delete(ctx, "/network-policy/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetNetworkPolicy(ctx context.Context, request *services.GetNetworkPolicyRequest) (*services.GetNetworkPolicyResponse, error) {
	response := &services.GetNetworkPolicyResponse{}
	_, err := h.Read(ctx, "/network-policy/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListNetworkPolicy(ctx context.Context, request *services.ListNetworkPolicyRequest) (*services.ListNetworkPolicyResponse, error) {
	response := &services.ListNetworkPolicyResponse{}
	_, err := h.ReadWithQuery(ctx, "/network-policys", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateNetworkPolicyTagRef(
	ctx context.Context, request *services.CreateNetworkPolicyTagRefRequest,
) (*services.CreateNetworkPolicyTagRefResponse, error) {
	data := getRefUpdateFromRequestNetworkPolicyTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateNetworkPolicyTagRefResponse)(request), nil
}

func (h *HTTP) DeleteNetworkPolicyTagRef(
	ctx context.Context, request *services.DeleteNetworkPolicyTagRefRequest,
) (*services.DeleteNetworkPolicyTagRefResponse, error) {
	data := getRefUpdateFromRequestNetworkPolicyTagRef((*services.CreateNetworkPolicyTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteNetworkPolicyTagRefResponse)(request), nil
}

func getRefUpdateFromRequestNetworkPolicyTagRef(request *services.CreateNetworkPolicyTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetNetworkPolicyTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "network-policy",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateNodeProfile(ctx context.Context, request *services.CreateNodeProfileRequest) (*services.CreateNodeProfileResponse, error) {
	response := &services.CreateNodeProfileResponse{}
	_, err := h.Create(ctx, "/node-profiles", request, response)
	return response, err
}

func (h *HTTP) UpdateNodeProfile(ctx context.Context, request *services.UpdateNodeProfileRequest) (*services.UpdateNodeProfileResponse, error) {
	response := &services.UpdateNodeProfileResponse{}
	_, err := h.Update(ctx, "/node-profile/"+request.NodeProfile.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteNodeProfile(ctx context.Context, request *services.DeleteNodeProfileRequest) (*services.DeleteNodeProfileResponse, error) {
	response := &services.DeleteNodeProfileResponse{}
	_, err := h.Delete(ctx, "/node-profile/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetNodeProfile(ctx context.Context, request *services.GetNodeProfileRequest) (*services.GetNodeProfileResponse, error) {
	response := &services.GetNodeProfileResponse{}
	_, err := h.Read(ctx, "/node-profile/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListNodeProfile(ctx context.Context, request *services.ListNodeProfileRequest) (*services.ListNodeProfileResponse, error) {
	response := &services.ListNodeProfileResponse{}
	_, err := h.ReadWithQuery(ctx, "/node-profiles", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateNodeProfileHardwareRef(
	ctx context.Context, request *services.CreateNodeProfileHardwareRefRequest,
) (*services.CreateNodeProfileHardwareRefResponse, error) {
	data := getRefUpdateFromRequestNodeProfileHardwareRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateNodeProfileHardwareRefResponse)(request), nil
}

func (h *HTTP) DeleteNodeProfileHardwareRef(
	ctx context.Context, request *services.DeleteNodeProfileHardwareRefRequest,
) (*services.DeleteNodeProfileHardwareRefResponse, error) {
	data := getRefUpdateFromRequestNodeProfileHardwareRef((*services.CreateNodeProfileHardwareRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteNodeProfileHardwareRefResponse)(request), nil
}

func getRefUpdateFromRequestNodeProfileHardwareRef(request *services.CreateNodeProfileHardwareRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetNodeProfileHardwareRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "node-profile",
			UUID:      id,
			RefType:   "hardware",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateNodeProfileJobTemplateRef(
	ctx context.Context, request *services.CreateNodeProfileJobTemplateRefRequest,
) (*services.CreateNodeProfileJobTemplateRefResponse, error) {
	data := getRefUpdateFromRequestNodeProfileJobTemplateRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateNodeProfileJobTemplateRefResponse)(request), nil
}

func (h *HTTP) DeleteNodeProfileJobTemplateRef(
	ctx context.Context, request *services.DeleteNodeProfileJobTemplateRefRequest,
) (*services.DeleteNodeProfileJobTemplateRefResponse, error) {
	data := getRefUpdateFromRequestNodeProfileJobTemplateRef((*services.CreateNodeProfileJobTemplateRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteNodeProfileJobTemplateRefResponse)(request), nil
}

func getRefUpdateFromRequestNodeProfileJobTemplateRef(request *services.CreateNodeProfileJobTemplateRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetNodeProfileJobTemplateRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "node-profile",
			UUID:      id,
			RefType:   "job-template",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateNodeProfileRoleDefinitionRef(
	ctx context.Context, request *services.CreateNodeProfileRoleDefinitionRefRequest,
) (*services.CreateNodeProfileRoleDefinitionRefResponse, error) {
	data := getRefUpdateFromRequestNodeProfileRoleDefinitionRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateNodeProfileRoleDefinitionRefResponse)(request), nil
}

func (h *HTTP) DeleteNodeProfileRoleDefinitionRef(
	ctx context.Context, request *services.DeleteNodeProfileRoleDefinitionRefRequest,
) (*services.DeleteNodeProfileRoleDefinitionRefResponse, error) {
	data := getRefUpdateFromRequestNodeProfileRoleDefinitionRef((*services.CreateNodeProfileRoleDefinitionRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteNodeProfileRoleDefinitionRefResponse)(request), nil
}

func getRefUpdateFromRequestNodeProfileRoleDefinitionRef(request *services.CreateNodeProfileRoleDefinitionRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetNodeProfileRoleDefinitionRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "node-profile",
			UUID:      id,
			RefType:   "role-definition",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateNodeProfileTagRef(
	ctx context.Context, request *services.CreateNodeProfileTagRefRequest,
) (*services.CreateNodeProfileTagRefResponse, error) {
	data := getRefUpdateFromRequestNodeProfileTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateNodeProfileTagRefResponse)(request), nil
}

func (h *HTTP) DeleteNodeProfileTagRef(
	ctx context.Context, request *services.DeleteNodeProfileTagRefRequest,
) (*services.DeleteNodeProfileTagRefResponse, error) {
	data := getRefUpdateFromRequestNodeProfileTagRef((*services.CreateNodeProfileTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteNodeProfileTagRefResponse)(request), nil
}

func getRefUpdateFromRequestNodeProfileTagRef(request *services.CreateNodeProfileTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetNodeProfileTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "node-profile",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateNode(ctx context.Context, request *services.CreateNodeRequest) (*services.CreateNodeResponse, error) {
	response := &services.CreateNodeResponse{}
	_, err := h.Create(ctx, "/nodes", request, response)
	return response, err
}

func (h *HTTP) UpdateNode(ctx context.Context, request *services.UpdateNodeRequest) (*services.UpdateNodeResponse, error) {
	response := &services.UpdateNodeResponse{}
	_, err := h.Update(ctx, "/node/"+request.Node.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteNode(ctx context.Context, request *services.DeleteNodeRequest) (*services.DeleteNodeResponse, error) {
	response := &services.DeleteNodeResponse{}
	_, err := h.Delete(ctx, "/node/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetNode(ctx context.Context, request *services.GetNodeRequest) (*services.GetNodeResponse, error) {
	response := &services.GetNodeResponse{}
	_, err := h.Read(ctx, "/node/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListNode(ctx context.Context, request *services.ListNodeRequest) (*services.ListNodeResponse, error) {
	response := &services.ListNodeResponse{}
	_, err := h.ReadWithQuery(ctx, "/nodes", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateNodeNodeProfileRef(
	ctx context.Context, request *services.CreateNodeNodeProfileRefRequest,
) (*services.CreateNodeNodeProfileRefResponse, error) {
	data := getRefUpdateFromRequestNodeNodeProfileRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateNodeNodeProfileRefResponse)(request), nil
}

func (h *HTTP) DeleteNodeNodeProfileRef(
	ctx context.Context, request *services.DeleteNodeNodeProfileRefRequest,
) (*services.DeleteNodeNodeProfileRefResponse, error) {
	data := getRefUpdateFromRequestNodeNodeProfileRef((*services.CreateNodeNodeProfileRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteNodeNodeProfileRefResponse)(request), nil
}

func getRefUpdateFromRequestNodeNodeProfileRef(request *services.CreateNodeNodeProfileRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetNodeNodeProfileRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "node",
			UUID:      id,
			RefType:   "node-profile",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateNodeTagRef(
	ctx context.Context, request *services.CreateNodeTagRefRequest,
) (*services.CreateNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestNodeTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateNodeTagRefResponse)(request), nil
}

func (h *HTTP) DeleteNodeTagRef(
	ctx context.Context, request *services.DeleteNodeTagRefRequest,
) (*services.DeleteNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestNodeTagRef((*services.CreateNodeTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteNodeTagRefResponse)(request), nil
}

func getRefUpdateFromRequestNodeTagRef(request *services.CreateNodeTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetNodeTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "node",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateOverlayRole(ctx context.Context, request *services.CreateOverlayRoleRequest) (*services.CreateOverlayRoleResponse, error) {
	response := &services.CreateOverlayRoleResponse{}
	_, err := h.Create(ctx, "/overlay-roles", request, response)
	return response, err
}

func (h *HTTP) UpdateOverlayRole(ctx context.Context, request *services.UpdateOverlayRoleRequest) (*services.UpdateOverlayRoleResponse, error) {
	response := &services.UpdateOverlayRoleResponse{}
	_, err := h.Update(ctx, "/overlay-role/"+request.OverlayRole.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteOverlayRole(ctx context.Context, request *services.DeleteOverlayRoleRequest) (*services.DeleteOverlayRoleResponse, error) {
	response := &services.DeleteOverlayRoleResponse{}
	_, err := h.Delete(ctx, "/overlay-role/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetOverlayRole(ctx context.Context, request *services.GetOverlayRoleRequest) (*services.GetOverlayRoleResponse, error) {
	response := &services.GetOverlayRoleResponse{}
	_, err := h.Read(ctx, "/overlay-role/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListOverlayRole(ctx context.Context, request *services.ListOverlayRoleRequest) (*services.ListOverlayRoleResponse, error) {
	response := &services.ListOverlayRoleResponse{}
	_, err := h.ReadWithQuery(ctx, "/overlay-roles", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateOverlayRoleTagRef(
	ctx context.Context, request *services.CreateOverlayRoleTagRefRequest,
) (*services.CreateOverlayRoleTagRefResponse, error) {
	data := getRefUpdateFromRequestOverlayRoleTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateOverlayRoleTagRefResponse)(request), nil
}

func (h *HTTP) DeleteOverlayRoleTagRef(
	ctx context.Context, request *services.DeleteOverlayRoleTagRefRequest,
) (*services.DeleteOverlayRoleTagRefResponse, error) {
	data := getRefUpdateFromRequestOverlayRoleTagRef((*services.CreateOverlayRoleTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteOverlayRoleTagRefResponse)(request), nil
}

func getRefUpdateFromRequestOverlayRoleTagRef(request *services.CreateOverlayRoleTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetOverlayRoleTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "overlay-role",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePeeringPolicy(ctx context.Context, request *services.CreatePeeringPolicyRequest) (*services.CreatePeeringPolicyResponse, error) {
	response := &services.CreatePeeringPolicyResponse{}
	_, err := h.Create(ctx, "/peering-policys", request, response)
	return response, err
}

func (h *HTTP) UpdatePeeringPolicy(ctx context.Context, request *services.UpdatePeeringPolicyRequest) (*services.UpdatePeeringPolicyResponse, error) {
	response := &services.UpdatePeeringPolicyResponse{}
	_, err := h.Update(ctx, "/peering-policy/"+request.PeeringPolicy.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeletePeeringPolicy(ctx context.Context, request *services.DeletePeeringPolicyRequest) (*services.DeletePeeringPolicyResponse, error) {
	response := &services.DeletePeeringPolicyResponse{}
	_, err := h.Delete(ctx, "/peering-policy/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetPeeringPolicy(ctx context.Context, request *services.GetPeeringPolicyRequest) (*services.GetPeeringPolicyResponse, error) {
	response := &services.GetPeeringPolicyResponse{}
	_, err := h.Read(ctx, "/peering-policy/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListPeeringPolicy(ctx context.Context, request *services.ListPeeringPolicyRequest) (*services.ListPeeringPolicyResponse, error) {
	response := &services.ListPeeringPolicyResponse{}
	_, err := h.ReadWithQuery(ctx, "/peering-policys", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreatePeeringPolicyTagRef(
	ctx context.Context, request *services.CreatePeeringPolicyTagRefRequest,
) (*services.CreatePeeringPolicyTagRefResponse, error) {
	data := getRefUpdateFromRequestPeeringPolicyTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePeeringPolicyTagRefResponse)(request), nil
}

func (h *HTTP) DeletePeeringPolicyTagRef(
	ctx context.Context, request *services.DeletePeeringPolicyTagRefRequest,
) (*services.DeletePeeringPolicyTagRefResponse, error) {
	data := getRefUpdateFromRequestPeeringPolicyTagRef((*services.CreatePeeringPolicyTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePeeringPolicyTagRefResponse)(request), nil
}

func getRefUpdateFromRequestPeeringPolicyTagRef(request *services.CreatePeeringPolicyTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPeeringPolicyTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "peering-policy",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalInterface(ctx context.Context, request *services.CreatePhysicalInterfaceRequest) (*services.CreatePhysicalInterfaceResponse, error) {
	response := &services.CreatePhysicalInterfaceResponse{}
	_, err := h.Create(ctx, "/physical-interfaces", request, response)
	return response, err
}

func (h *HTTP) UpdatePhysicalInterface(ctx context.Context, request *services.UpdatePhysicalInterfaceRequest) (*services.UpdatePhysicalInterfaceResponse, error) {
	response := &services.UpdatePhysicalInterfaceResponse{}
	_, err := h.Update(ctx, "/physical-interface/"+request.PhysicalInterface.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeletePhysicalInterface(ctx context.Context, request *services.DeletePhysicalInterfaceRequest) (*services.DeletePhysicalInterfaceResponse, error) {
	response := &services.DeletePhysicalInterfaceResponse{}
	_, err := h.Delete(ctx, "/physical-interface/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetPhysicalInterface(ctx context.Context, request *services.GetPhysicalInterfaceRequest) (*services.GetPhysicalInterfaceResponse, error) {
	response := &services.GetPhysicalInterfaceResponse{}
	_, err := h.Read(ctx, "/physical-interface/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListPhysicalInterface(ctx context.Context, request *services.ListPhysicalInterfaceRequest) (*services.ListPhysicalInterfaceResponse, error) {
	response := &services.ListPhysicalInterfaceResponse{}
	_, err := h.ReadWithQuery(ctx, "/physical-interfaces", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreatePhysicalInterfacePhysicalInterfaceRef(
	ctx context.Context, request *services.CreatePhysicalInterfacePhysicalInterfaceRefRequest,
) (*services.CreatePhysicalInterfacePhysicalInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalInterfacePhysicalInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalInterfacePhysicalInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalInterfacePhysicalInterfaceRef(
	ctx context.Context, request *services.DeletePhysicalInterfacePhysicalInterfaceRefRequest,
) (*services.DeletePhysicalInterfacePhysicalInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalInterfacePhysicalInterfaceRef((*services.CreatePhysicalInterfacePhysicalInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalInterfacePhysicalInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalInterfacePhysicalInterfaceRef(request *services.CreatePhysicalInterfacePhysicalInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalInterfacePhysicalInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-interface",
			UUID:      id,
			RefType:   "physical-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalInterfacePortRef(
	ctx context.Context, request *services.CreatePhysicalInterfacePortRefRequest,
) (*services.CreatePhysicalInterfacePortRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalInterfacePortRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalInterfacePortRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalInterfacePortRef(
	ctx context.Context, request *services.DeletePhysicalInterfacePortRefRequest,
) (*services.DeletePhysicalInterfacePortRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalInterfacePortRef((*services.CreatePhysicalInterfacePortRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalInterfacePortRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalInterfacePortRef(request *services.CreatePhysicalInterfacePortRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalInterfacePortRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-interface",
			UUID:      id,
			RefType:   "port",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalInterfaceTagRef(
	ctx context.Context, request *services.CreatePhysicalInterfaceTagRefRequest,
) (*services.CreatePhysicalInterfaceTagRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalInterfaceTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalInterfaceTagRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalInterfaceTagRef(
	ctx context.Context, request *services.DeletePhysicalInterfaceTagRefRequest,
) (*services.DeletePhysicalInterfaceTagRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalInterfaceTagRef((*services.CreatePhysicalInterfaceTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalInterfaceTagRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalInterfaceTagRef(request *services.CreatePhysicalInterfaceTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalInterfaceTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-interface",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalRole(ctx context.Context, request *services.CreatePhysicalRoleRequest) (*services.CreatePhysicalRoleResponse, error) {
	response := &services.CreatePhysicalRoleResponse{}
	_, err := h.Create(ctx, "/physical-roles", request, response)
	return response, err
}

func (h *HTTP) UpdatePhysicalRole(ctx context.Context, request *services.UpdatePhysicalRoleRequest) (*services.UpdatePhysicalRoleResponse, error) {
	response := &services.UpdatePhysicalRoleResponse{}
	_, err := h.Update(ctx, "/physical-role/"+request.PhysicalRole.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeletePhysicalRole(ctx context.Context, request *services.DeletePhysicalRoleRequest) (*services.DeletePhysicalRoleResponse, error) {
	response := &services.DeletePhysicalRoleResponse{}
	_, err := h.Delete(ctx, "/physical-role/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetPhysicalRole(ctx context.Context, request *services.GetPhysicalRoleRequest) (*services.GetPhysicalRoleResponse, error) {
	response := &services.GetPhysicalRoleResponse{}
	_, err := h.Read(ctx, "/physical-role/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListPhysicalRole(ctx context.Context, request *services.ListPhysicalRoleRequest) (*services.ListPhysicalRoleResponse, error) {
	response := &services.ListPhysicalRoleResponse{}
	_, err := h.ReadWithQuery(ctx, "/physical-roles", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreatePhysicalRoleTagRef(
	ctx context.Context, request *services.CreatePhysicalRoleTagRefRequest,
) (*services.CreatePhysicalRoleTagRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRoleTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalRoleTagRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalRoleTagRef(
	ctx context.Context, request *services.DeletePhysicalRoleTagRefRequest,
) (*services.DeletePhysicalRoleTagRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRoleTagRef((*services.CreatePhysicalRoleTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalRoleTagRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalRoleTagRef(request *services.CreatePhysicalRoleTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalRoleTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-role",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalRouter(ctx context.Context, request *services.CreatePhysicalRouterRequest) (*services.CreatePhysicalRouterResponse, error) {
	response := &services.CreatePhysicalRouterResponse{}
	_, err := h.Create(ctx, "/physical-routers", request, response)
	return response, err
}

func (h *HTTP) UpdatePhysicalRouter(ctx context.Context, request *services.UpdatePhysicalRouterRequest) (*services.UpdatePhysicalRouterResponse, error) {
	response := &services.UpdatePhysicalRouterResponse{}
	_, err := h.Update(ctx, "/physical-router/"+request.PhysicalRouter.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeletePhysicalRouter(ctx context.Context, request *services.DeletePhysicalRouterRequest) (*services.DeletePhysicalRouterResponse, error) {
	response := &services.DeletePhysicalRouterResponse{}
	_, err := h.Delete(ctx, "/physical-router/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetPhysicalRouter(ctx context.Context, request *services.GetPhysicalRouterRequest) (*services.GetPhysicalRouterResponse, error) {
	response := &services.GetPhysicalRouterResponse{}
	_, err := h.Read(ctx, "/physical-router/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListPhysicalRouter(ctx context.Context, request *services.ListPhysicalRouterRequest) (*services.ListPhysicalRouterResponse, error) {
	response := &services.ListPhysicalRouterResponse{}
	_, err := h.ReadWithQuery(ctx, "/physical-routers", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreatePhysicalRouterBGPRouterRef(
	ctx context.Context, request *services.CreatePhysicalRouterBGPRouterRefRequest,
) (*services.CreatePhysicalRouterBGPRouterRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterBGPRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalRouterBGPRouterRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalRouterBGPRouterRef(
	ctx context.Context, request *services.DeletePhysicalRouterBGPRouterRefRequest,
) (*services.DeletePhysicalRouterBGPRouterRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterBGPRouterRef((*services.CreatePhysicalRouterBGPRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalRouterBGPRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalRouterBGPRouterRef(request *services.CreatePhysicalRouterBGPRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalRouterBGPRouterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-router",
			UUID:      id,
			RefType:   "bgp-router",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalRouterDeviceChassisRef(
	ctx context.Context, request *services.CreatePhysicalRouterDeviceChassisRefRequest,
) (*services.CreatePhysicalRouterDeviceChassisRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterDeviceChassisRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalRouterDeviceChassisRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalRouterDeviceChassisRef(
	ctx context.Context, request *services.DeletePhysicalRouterDeviceChassisRefRequest,
) (*services.DeletePhysicalRouterDeviceChassisRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterDeviceChassisRef((*services.CreatePhysicalRouterDeviceChassisRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalRouterDeviceChassisRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalRouterDeviceChassisRef(request *services.CreatePhysicalRouterDeviceChassisRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalRouterDeviceChassisRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-router",
			UUID:      id,
			RefType:   "device-chassis",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalRouterDeviceFunctionalGroupRef(
	ctx context.Context, request *services.CreatePhysicalRouterDeviceFunctionalGroupRefRequest,
) (*services.CreatePhysicalRouterDeviceFunctionalGroupRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterDeviceFunctionalGroupRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalRouterDeviceFunctionalGroupRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalRouterDeviceFunctionalGroupRef(
	ctx context.Context, request *services.DeletePhysicalRouterDeviceFunctionalGroupRefRequest,
) (*services.DeletePhysicalRouterDeviceFunctionalGroupRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterDeviceFunctionalGroupRef((*services.CreatePhysicalRouterDeviceFunctionalGroupRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalRouterDeviceFunctionalGroupRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalRouterDeviceFunctionalGroupRef(request *services.CreatePhysicalRouterDeviceFunctionalGroupRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalRouterDeviceFunctionalGroupRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-router",
			UUID:      id,
			RefType:   "device-functional-group",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalRouterDeviceImageRef(
	ctx context.Context, request *services.CreatePhysicalRouterDeviceImageRefRequest,
) (*services.CreatePhysicalRouterDeviceImageRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterDeviceImageRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalRouterDeviceImageRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalRouterDeviceImageRef(
	ctx context.Context, request *services.DeletePhysicalRouterDeviceImageRefRequest,
) (*services.DeletePhysicalRouterDeviceImageRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterDeviceImageRef((*services.CreatePhysicalRouterDeviceImageRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalRouterDeviceImageRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalRouterDeviceImageRef(request *services.CreatePhysicalRouterDeviceImageRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalRouterDeviceImageRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-router",
			UUID:      id,
			RefType:   "device-image",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalRouterFabricRef(
	ctx context.Context, request *services.CreatePhysicalRouterFabricRefRequest,
) (*services.CreatePhysicalRouterFabricRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterFabricRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalRouterFabricRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalRouterFabricRef(
	ctx context.Context, request *services.DeletePhysicalRouterFabricRefRequest,
) (*services.DeletePhysicalRouterFabricRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterFabricRef((*services.CreatePhysicalRouterFabricRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalRouterFabricRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalRouterFabricRef(request *services.CreatePhysicalRouterFabricRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalRouterFabricRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-router",
			UUID:      id,
			RefType:   "fabric",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalRouterIntentMapRef(
	ctx context.Context, request *services.CreatePhysicalRouterIntentMapRefRequest,
) (*services.CreatePhysicalRouterIntentMapRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterIntentMapRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalRouterIntentMapRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalRouterIntentMapRef(
	ctx context.Context, request *services.DeletePhysicalRouterIntentMapRefRequest,
) (*services.DeletePhysicalRouterIntentMapRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterIntentMapRef((*services.CreatePhysicalRouterIntentMapRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalRouterIntentMapRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalRouterIntentMapRef(request *services.CreatePhysicalRouterIntentMapRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalRouterIntentMapRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-router",
			UUID:      id,
			RefType:   "intent-map",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalRouterNodeProfileRef(
	ctx context.Context, request *services.CreatePhysicalRouterNodeProfileRefRequest,
) (*services.CreatePhysicalRouterNodeProfileRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterNodeProfileRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalRouterNodeProfileRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalRouterNodeProfileRef(
	ctx context.Context, request *services.DeletePhysicalRouterNodeProfileRefRequest,
) (*services.DeletePhysicalRouterNodeProfileRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterNodeProfileRef((*services.CreatePhysicalRouterNodeProfileRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalRouterNodeProfileRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalRouterNodeProfileRef(request *services.CreatePhysicalRouterNodeProfileRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalRouterNodeProfileRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-router",
			UUID:      id,
			RefType:   "node-profile",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalRouterOverlayRoleRef(
	ctx context.Context, request *services.CreatePhysicalRouterOverlayRoleRefRequest,
) (*services.CreatePhysicalRouterOverlayRoleRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterOverlayRoleRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalRouterOverlayRoleRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalRouterOverlayRoleRef(
	ctx context.Context, request *services.DeletePhysicalRouterOverlayRoleRefRequest,
) (*services.DeletePhysicalRouterOverlayRoleRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterOverlayRoleRef((*services.CreatePhysicalRouterOverlayRoleRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalRouterOverlayRoleRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalRouterOverlayRoleRef(request *services.CreatePhysicalRouterOverlayRoleRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalRouterOverlayRoleRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-router",
			UUID:      id,
			RefType:   "overlay-role",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalRouterPhysicalRoleRef(
	ctx context.Context, request *services.CreatePhysicalRouterPhysicalRoleRefRequest,
) (*services.CreatePhysicalRouterPhysicalRoleRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterPhysicalRoleRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalRouterPhysicalRoleRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalRouterPhysicalRoleRef(
	ctx context.Context, request *services.DeletePhysicalRouterPhysicalRoleRefRequest,
) (*services.DeletePhysicalRouterPhysicalRoleRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterPhysicalRoleRef((*services.CreatePhysicalRouterPhysicalRoleRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalRouterPhysicalRoleRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalRouterPhysicalRoleRef(request *services.CreatePhysicalRouterPhysicalRoleRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalRouterPhysicalRoleRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-router",
			UUID:      id,
			RefType:   "physical-role",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalRouterTagRef(
	ctx context.Context, request *services.CreatePhysicalRouterTagRefRequest,
) (*services.CreatePhysicalRouterTagRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalRouterTagRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalRouterTagRef(
	ctx context.Context, request *services.DeletePhysicalRouterTagRefRequest,
) (*services.DeletePhysicalRouterTagRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterTagRef((*services.CreatePhysicalRouterTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalRouterTagRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalRouterTagRef(request *services.CreatePhysicalRouterTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalRouterTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-router",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalRouterTelemetryProfileRef(
	ctx context.Context, request *services.CreatePhysicalRouterTelemetryProfileRefRequest,
) (*services.CreatePhysicalRouterTelemetryProfileRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterTelemetryProfileRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalRouterTelemetryProfileRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalRouterTelemetryProfileRef(
	ctx context.Context, request *services.DeletePhysicalRouterTelemetryProfileRefRequest,
) (*services.DeletePhysicalRouterTelemetryProfileRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterTelemetryProfileRef((*services.CreatePhysicalRouterTelemetryProfileRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalRouterTelemetryProfileRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalRouterTelemetryProfileRef(request *services.CreatePhysicalRouterTelemetryProfileRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalRouterTelemetryProfileRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-router",
			UUID:      id,
			RefType:   "telemetry-profile",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalRouterVirtualNetworkRef(
	ctx context.Context, request *services.CreatePhysicalRouterVirtualNetworkRefRequest,
) (*services.CreatePhysicalRouterVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterVirtualNetworkRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalRouterVirtualNetworkRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalRouterVirtualNetworkRef(
	ctx context.Context, request *services.DeletePhysicalRouterVirtualNetworkRefRequest,
) (*services.DeletePhysicalRouterVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterVirtualNetworkRef((*services.CreatePhysicalRouterVirtualNetworkRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalRouterVirtualNetworkRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalRouterVirtualNetworkRef(request *services.CreatePhysicalRouterVirtualNetworkRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalRouterVirtualNetworkRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-router",
			UUID:      id,
			RefType:   "virtual-network",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePhysicalRouterVirtualRouterRef(
	ctx context.Context, request *services.CreatePhysicalRouterVirtualRouterRefRequest,
) (*services.CreatePhysicalRouterVirtualRouterRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterVirtualRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePhysicalRouterVirtualRouterRefResponse)(request), nil
}

func (h *HTTP) DeletePhysicalRouterVirtualRouterRef(
	ctx context.Context, request *services.DeletePhysicalRouterVirtualRouterRefRequest,
) (*services.DeletePhysicalRouterVirtualRouterRefResponse, error) {
	data := getRefUpdateFromRequestPhysicalRouterVirtualRouterRef((*services.CreatePhysicalRouterVirtualRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePhysicalRouterVirtualRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestPhysicalRouterVirtualRouterRef(request *services.CreatePhysicalRouterVirtualRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPhysicalRouterVirtualRouterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "physical-router",
			UUID:      id,
			RefType:   "virtual-router",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePolicyManagement(ctx context.Context, request *services.CreatePolicyManagementRequest) (*services.CreatePolicyManagementResponse, error) {
	response := &services.CreatePolicyManagementResponse{}
	_, err := h.Create(ctx, "/policy-managements", request, response)
	return response, err
}

func (h *HTTP) UpdatePolicyManagement(ctx context.Context, request *services.UpdatePolicyManagementRequest) (*services.UpdatePolicyManagementResponse, error) {
	response := &services.UpdatePolicyManagementResponse{}
	_, err := h.Update(ctx, "/policy-management/"+request.PolicyManagement.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeletePolicyManagement(ctx context.Context, request *services.DeletePolicyManagementRequest) (*services.DeletePolicyManagementResponse, error) {
	response := &services.DeletePolicyManagementResponse{}
	_, err := h.Delete(ctx, "/policy-management/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetPolicyManagement(ctx context.Context, request *services.GetPolicyManagementRequest) (*services.GetPolicyManagementResponse, error) {
	response := &services.GetPolicyManagementResponse{}
	_, err := h.Read(ctx, "/policy-management/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListPolicyManagement(ctx context.Context, request *services.ListPolicyManagementRequest) (*services.ListPolicyManagementResponse, error) {
	response := &services.ListPolicyManagementResponse{}
	_, err := h.ReadWithQuery(ctx, "/policy-managements", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreatePolicyManagementTagRef(
	ctx context.Context, request *services.CreatePolicyManagementTagRefRequest,
) (*services.CreatePolicyManagementTagRefResponse, error) {
	data := getRefUpdateFromRequestPolicyManagementTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePolicyManagementTagRefResponse)(request), nil
}

func (h *HTTP) DeletePolicyManagementTagRef(
	ctx context.Context, request *services.DeletePolicyManagementTagRefRequest,
) (*services.DeletePolicyManagementTagRefResponse, error) {
	data := getRefUpdateFromRequestPolicyManagementTagRef((*services.CreatePolicyManagementTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePolicyManagementTagRefResponse)(request), nil
}

func getRefUpdateFromRequestPolicyManagementTagRef(request *services.CreatePolicyManagementTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPolicyManagementTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "policy-management",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePortGroup(ctx context.Context, request *services.CreatePortGroupRequest) (*services.CreatePortGroupResponse, error) {
	response := &services.CreatePortGroupResponse{}
	_, err := h.Create(ctx, "/port-groups", request, response)
	return response, err
}

func (h *HTTP) UpdatePortGroup(ctx context.Context, request *services.UpdatePortGroupRequest) (*services.UpdatePortGroupResponse, error) {
	response := &services.UpdatePortGroupResponse{}
	_, err := h.Update(ctx, "/port-group/"+request.PortGroup.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeletePortGroup(ctx context.Context, request *services.DeletePortGroupRequest) (*services.DeletePortGroupResponse, error) {
	response := &services.DeletePortGroupResponse{}
	_, err := h.Delete(ctx, "/port-group/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetPortGroup(ctx context.Context, request *services.GetPortGroupRequest) (*services.GetPortGroupResponse, error) {
	response := &services.GetPortGroupResponse{}
	_, err := h.Read(ctx, "/port-group/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListPortGroup(ctx context.Context, request *services.ListPortGroupRequest) (*services.ListPortGroupResponse, error) {
	response := &services.ListPortGroupResponse{}
	_, err := h.ReadWithQuery(ctx, "/port-groups", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreatePortGroupPortRef(
	ctx context.Context, request *services.CreatePortGroupPortRefRequest,
) (*services.CreatePortGroupPortRefResponse, error) {
	data := getRefUpdateFromRequestPortGroupPortRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePortGroupPortRefResponse)(request), nil
}

func (h *HTTP) DeletePortGroupPortRef(
	ctx context.Context, request *services.DeletePortGroupPortRefRequest,
) (*services.DeletePortGroupPortRefResponse, error) {
	data := getRefUpdateFromRequestPortGroupPortRef((*services.CreatePortGroupPortRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePortGroupPortRefResponse)(request), nil
}

func getRefUpdateFromRequestPortGroupPortRef(request *services.CreatePortGroupPortRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPortGroupPortRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "port-group",
			UUID:      id,
			RefType:   "port",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePortGroupTagRef(
	ctx context.Context, request *services.CreatePortGroupTagRefRequest,
) (*services.CreatePortGroupTagRefResponse, error) {
	data := getRefUpdateFromRequestPortGroupTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePortGroupTagRefResponse)(request), nil
}

func (h *HTTP) DeletePortGroupTagRef(
	ctx context.Context, request *services.DeletePortGroupTagRefRequest,
) (*services.DeletePortGroupTagRefResponse, error) {
	data := getRefUpdateFromRequestPortGroupTagRef((*services.CreatePortGroupTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePortGroupTagRefResponse)(request), nil
}

func getRefUpdateFromRequestPortGroupTagRef(request *services.CreatePortGroupTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPortGroupTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "port-group",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePortProfile(ctx context.Context, request *services.CreatePortProfileRequest) (*services.CreatePortProfileResponse, error) {
	response := &services.CreatePortProfileResponse{}
	_, err := h.Create(ctx, "/port-profiles", request, response)
	return response, err
}

func (h *HTTP) UpdatePortProfile(ctx context.Context, request *services.UpdatePortProfileRequest) (*services.UpdatePortProfileResponse, error) {
	response := &services.UpdatePortProfileResponse{}
	_, err := h.Update(ctx, "/port-profile/"+request.PortProfile.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeletePortProfile(ctx context.Context, request *services.DeletePortProfileRequest) (*services.DeletePortProfileResponse, error) {
	response := &services.DeletePortProfileResponse{}
	_, err := h.Delete(ctx, "/port-profile/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetPortProfile(ctx context.Context, request *services.GetPortProfileRequest) (*services.GetPortProfileResponse, error) {
	response := &services.GetPortProfileResponse{}
	_, err := h.Read(ctx, "/port-profile/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListPortProfile(ctx context.Context, request *services.ListPortProfileRequest) (*services.ListPortProfileResponse, error) {
	response := &services.ListPortProfileResponse{}
	_, err := h.ReadWithQuery(ctx, "/port-profiles", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreatePortProfileStormControlProfileRef(
	ctx context.Context, request *services.CreatePortProfileStormControlProfileRefRequest,
) (*services.CreatePortProfileStormControlProfileRefResponse, error) {
	data := getRefUpdateFromRequestPortProfileStormControlProfileRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePortProfileStormControlProfileRefResponse)(request), nil
}

func (h *HTTP) DeletePortProfileStormControlProfileRef(
	ctx context.Context, request *services.DeletePortProfileStormControlProfileRefRequest,
) (*services.DeletePortProfileStormControlProfileRefResponse, error) {
	data := getRefUpdateFromRequestPortProfileStormControlProfileRef((*services.CreatePortProfileStormControlProfileRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePortProfileStormControlProfileRefResponse)(request), nil
}

func getRefUpdateFromRequestPortProfileStormControlProfileRef(request *services.CreatePortProfileStormControlProfileRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPortProfileStormControlProfileRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "port-profile",
			UUID:      id,
			RefType:   "storm-control-profile",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePortProfileTagRef(
	ctx context.Context, request *services.CreatePortProfileTagRefRequest,
) (*services.CreatePortProfileTagRefResponse, error) {
	data := getRefUpdateFromRequestPortProfileTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePortProfileTagRefResponse)(request), nil
}

func (h *HTTP) DeletePortProfileTagRef(
	ctx context.Context, request *services.DeletePortProfileTagRefRequest,
) (*services.DeletePortProfileTagRefResponse, error) {
	data := getRefUpdateFromRequestPortProfileTagRef((*services.CreatePortProfileTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePortProfileTagRefResponse)(request), nil
}

func getRefUpdateFromRequestPortProfileTagRef(request *services.CreatePortProfileTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPortProfileTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "port-profile",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePort(ctx context.Context, request *services.CreatePortRequest) (*services.CreatePortResponse, error) {
	response := &services.CreatePortResponse{}
	_, err := h.Create(ctx, "/ports", request, response)
	return response, err
}

func (h *HTTP) UpdatePort(ctx context.Context, request *services.UpdatePortRequest) (*services.UpdatePortResponse, error) {
	response := &services.UpdatePortResponse{}
	_, err := h.Update(ctx, "/port/"+request.Port.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeletePort(ctx context.Context, request *services.DeletePortRequest) (*services.DeletePortResponse, error) {
	response := &services.DeletePortResponse{}
	_, err := h.Delete(ctx, "/port/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetPort(ctx context.Context, request *services.GetPortRequest) (*services.GetPortResponse, error) {
	response := &services.GetPortResponse{}
	_, err := h.Read(ctx, "/port/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListPort(ctx context.Context, request *services.ListPortRequest) (*services.ListPortResponse, error) {
	response := &services.ListPortResponse{}
	_, err := h.ReadWithQuery(ctx, "/ports", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreatePortTagRef(
	ctx context.Context, request *services.CreatePortTagRefRequest,
) (*services.CreatePortTagRefResponse, error) {
	data := getRefUpdateFromRequestPortTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePortTagRefResponse)(request), nil
}

func (h *HTTP) DeletePortTagRef(
	ctx context.Context, request *services.DeletePortTagRefRequest,
) (*services.DeletePortTagRefResponse, error) {
	data := getRefUpdateFromRequestPortTagRef((*services.CreatePortTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePortTagRefResponse)(request), nil
}

func getRefUpdateFromRequestPortTagRef(request *services.CreatePortTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPortTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "port",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePortTuple(ctx context.Context, request *services.CreatePortTupleRequest) (*services.CreatePortTupleResponse, error) {
	response := &services.CreatePortTupleResponse{}
	_, err := h.Create(ctx, "/port-tuples", request, response)
	return response, err
}

func (h *HTTP) UpdatePortTuple(ctx context.Context, request *services.UpdatePortTupleRequest) (*services.UpdatePortTupleResponse, error) {
	response := &services.UpdatePortTupleResponse{}
	_, err := h.Update(ctx, "/port-tuple/"+request.PortTuple.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeletePortTuple(ctx context.Context, request *services.DeletePortTupleRequest) (*services.DeletePortTupleResponse, error) {
	response := &services.DeletePortTupleResponse{}
	_, err := h.Delete(ctx, "/port-tuple/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetPortTuple(ctx context.Context, request *services.GetPortTupleRequest) (*services.GetPortTupleResponse, error) {
	response := &services.GetPortTupleResponse{}
	_, err := h.Read(ctx, "/port-tuple/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListPortTuple(ctx context.Context, request *services.ListPortTupleRequest) (*services.ListPortTupleResponse, error) {
	response := &services.ListPortTupleResponse{}
	_, err := h.ReadWithQuery(ctx, "/port-tuples", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreatePortTupleLogicalRouterRef(
	ctx context.Context, request *services.CreatePortTupleLogicalRouterRefRequest,
) (*services.CreatePortTupleLogicalRouterRefResponse, error) {
	data := getRefUpdateFromRequestPortTupleLogicalRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePortTupleLogicalRouterRefResponse)(request), nil
}

func (h *HTTP) DeletePortTupleLogicalRouterRef(
	ctx context.Context, request *services.DeletePortTupleLogicalRouterRefRequest,
) (*services.DeletePortTupleLogicalRouterRefResponse, error) {
	data := getRefUpdateFromRequestPortTupleLogicalRouterRef((*services.CreatePortTupleLogicalRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePortTupleLogicalRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestPortTupleLogicalRouterRef(request *services.CreatePortTupleLogicalRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPortTupleLogicalRouterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "port-tuple",
			UUID:      id,
			RefType:   "logical-router",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePortTupleTagRef(
	ctx context.Context, request *services.CreatePortTupleTagRefRequest,
) (*services.CreatePortTupleTagRefResponse, error) {
	data := getRefUpdateFromRequestPortTupleTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePortTupleTagRefResponse)(request), nil
}

func (h *HTTP) DeletePortTupleTagRef(
	ctx context.Context, request *services.DeletePortTupleTagRefRequest,
) (*services.DeletePortTupleTagRefResponse, error) {
	data := getRefUpdateFromRequestPortTupleTagRef((*services.CreatePortTupleTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePortTupleTagRefResponse)(request), nil
}

func getRefUpdateFromRequestPortTupleTagRef(request *services.CreatePortTupleTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPortTupleTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "port-tuple",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreatePortTupleVirtualNetworkRef(
	ctx context.Context, request *services.CreatePortTupleVirtualNetworkRefRequest,
) (*services.CreatePortTupleVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestPortTupleVirtualNetworkRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreatePortTupleVirtualNetworkRefResponse)(request), nil
}

func (h *HTTP) DeletePortTupleVirtualNetworkRef(
	ctx context.Context, request *services.DeletePortTupleVirtualNetworkRefRequest,
) (*services.DeletePortTupleVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestPortTupleVirtualNetworkRef((*services.CreatePortTupleVirtualNetworkRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeletePortTupleVirtualNetworkRefResponse)(request), nil
}

func getRefUpdateFromRequestPortTupleVirtualNetworkRef(request *services.CreatePortTupleVirtualNetworkRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetPortTupleVirtualNetworkRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "port-tuple",
			UUID:      id,
			RefType:   "virtual-network",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateProject(ctx context.Context, request *services.CreateProjectRequest) (*services.CreateProjectResponse, error) {
	response := &services.CreateProjectResponse{}
	_, err := h.Create(ctx, "/projects", request, response)
	return response, err
}

func (h *HTTP) UpdateProject(ctx context.Context, request *services.UpdateProjectRequest) (*services.UpdateProjectResponse, error) {
	response := &services.UpdateProjectResponse{}
	_, err := h.Update(ctx, "/project/"+request.Project.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteProject(ctx context.Context, request *services.DeleteProjectRequest) (*services.DeleteProjectResponse, error) {
	response := &services.DeleteProjectResponse{}
	_, err := h.Delete(ctx, "/project/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetProject(ctx context.Context, request *services.GetProjectRequest) (*services.GetProjectResponse, error) {
	response := &services.GetProjectResponse{}
	_, err := h.Read(ctx, "/project/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListProject(ctx context.Context, request *services.ListProjectRequest) (*services.ListProjectResponse, error) {
	response := &services.ListProjectResponse{}
	_, err := h.ReadWithQuery(ctx, "/projects", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateProjectAliasIPPoolRef(
	ctx context.Context, request *services.CreateProjectAliasIPPoolRefRequest,
) (*services.CreateProjectAliasIPPoolRefResponse, error) {
	data := getRefUpdateFromRequestProjectAliasIPPoolRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateProjectAliasIPPoolRefResponse)(request), nil
}

func (h *HTTP) DeleteProjectAliasIPPoolRef(
	ctx context.Context, request *services.DeleteProjectAliasIPPoolRefRequest,
) (*services.DeleteProjectAliasIPPoolRefResponse, error) {
	data := getRefUpdateFromRequestProjectAliasIPPoolRef((*services.CreateProjectAliasIPPoolRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteProjectAliasIPPoolRefResponse)(request), nil
}

func getRefUpdateFromRequestProjectAliasIPPoolRef(request *services.CreateProjectAliasIPPoolRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetProjectAliasIPPoolRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "project",
			UUID:      id,
			RefType:   "alias-ip-pool",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateProjectApplicationPolicySetRef(
	ctx context.Context, request *services.CreateProjectApplicationPolicySetRefRequest,
) (*services.CreateProjectApplicationPolicySetRefResponse, error) {
	data := getRefUpdateFromRequestProjectApplicationPolicySetRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateProjectApplicationPolicySetRefResponse)(request), nil
}

func (h *HTTP) DeleteProjectApplicationPolicySetRef(
	ctx context.Context, request *services.DeleteProjectApplicationPolicySetRefRequest,
) (*services.DeleteProjectApplicationPolicySetRefResponse, error) {
	data := getRefUpdateFromRequestProjectApplicationPolicySetRef((*services.CreateProjectApplicationPolicySetRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteProjectApplicationPolicySetRefResponse)(request), nil
}

func getRefUpdateFromRequestProjectApplicationPolicySetRef(request *services.CreateProjectApplicationPolicySetRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetProjectApplicationPolicySetRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "project",
			UUID:      id,
			RefType:   "application-policy-set",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateProjectFloatingIPPoolRef(
	ctx context.Context, request *services.CreateProjectFloatingIPPoolRefRequest,
) (*services.CreateProjectFloatingIPPoolRefResponse, error) {
	data := getRefUpdateFromRequestProjectFloatingIPPoolRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateProjectFloatingIPPoolRefResponse)(request), nil
}

func (h *HTTP) DeleteProjectFloatingIPPoolRef(
	ctx context.Context, request *services.DeleteProjectFloatingIPPoolRefRequest,
) (*services.DeleteProjectFloatingIPPoolRefResponse, error) {
	data := getRefUpdateFromRequestProjectFloatingIPPoolRef((*services.CreateProjectFloatingIPPoolRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteProjectFloatingIPPoolRefResponse)(request), nil
}

func getRefUpdateFromRequestProjectFloatingIPPoolRef(request *services.CreateProjectFloatingIPPoolRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetProjectFloatingIPPoolRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "project",
			UUID:      id,
			RefType:   "floating-ip-pool",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateProjectNamespaceRef(
	ctx context.Context, request *services.CreateProjectNamespaceRefRequest,
) (*services.CreateProjectNamespaceRefResponse, error) {
	data := getRefUpdateFromRequestProjectNamespaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateProjectNamespaceRefResponse)(request), nil
}

func (h *HTTP) DeleteProjectNamespaceRef(
	ctx context.Context, request *services.DeleteProjectNamespaceRefRequest,
) (*services.DeleteProjectNamespaceRefResponse, error) {
	data := getRefUpdateFromRequestProjectNamespaceRef((*services.CreateProjectNamespaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteProjectNamespaceRefResponse)(request), nil
}

func getRefUpdateFromRequestProjectNamespaceRef(request *services.CreateProjectNamespaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetProjectNamespaceRef()

	data := struct {
		services.RefUpdate

		Attr *models.SubnetType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "project",
			UUID:      id,
			RefType:   "namespace",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateProjectTagRef(
	ctx context.Context, request *services.CreateProjectTagRefRequest,
) (*services.CreateProjectTagRefResponse, error) {
	data := getRefUpdateFromRequestProjectTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateProjectTagRefResponse)(request), nil
}

func (h *HTTP) DeleteProjectTagRef(
	ctx context.Context, request *services.DeleteProjectTagRefRequest,
) (*services.DeleteProjectTagRefResponse, error) {
	data := getRefUpdateFromRequestProjectTagRef((*services.CreateProjectTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteProjectTagRefResponse)(request), nil
}

func getRefUpdateFromRequestProjectTagRef(request *services.CreateProjectTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetProjectTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "project",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateProviderAttachment(ctx context.Context, request *services.CreateProviderAttachmentRequest) (*services.CreateProviderAttachmentResponse, error) {
	response := &services.CreateProviderAttachmentResponse{}
	_, err := h.Create(ctx, "/provider-attachments", request, response)
	return response, err
}

func (h *HTTP) UpdateProviderAttachment(ctx context.Context, request *services.UpdateProviderAttachmentRequest) (*services.UpdateProviderAttachmentResponse, error) {
	response := &services.UpdateProviderAttachmentResponse{}
	_, err := h.Update(ctx, "/provider-attachment/"+request.ProviderAttachment.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteProviderAttachment(ctx context.Context, request *services.DeleteProviderAttachmentRequest) (*services.DeleteProviderAttachmentResponse, error) {
	response := &services.DeleteProviderAttachmentResponse{}
	_, err := h.Delete(ctx, "/provider-attachment/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetProviderAttachment(ctx context.Context, request *services.GetProviderAttachmentRequest) (*services.GetProviderAttachmentResponse, error) {
	response := &services.GetProviderAttachmentResponse{}
	_, err := h.Read(ctx, "/provider-attachment/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListProviderAttachment(ctx context.Context, request *services.ListProviderAttachmentRequest) (*services.ListProviderAttachmentResponse, error) {
	response := &services.ListProviderAttachmentResponse{}
	_, err := h.ReadWithQuery(ctx, "/provider-attachments", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateProviderAttachmentTagRef(
	ctx context.Context, request *services.CreateProviderAttachmentTagRefRequest,
) (*services.CreateProviderAttachmentTagRefResponse, error) {
	data := getRefUpdateFromRequestProviderAttachmentTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateProviderAttachmentTagRefResponse)(request), nil
}

func (h *HTTP) DeleteProviderAttachmentTagRef(
	ctx context.Context, request *services.DeleteProviderAttachmentTagRefRequest,
) (*services.DeleteProviderAttachmentTagRefResponse, error) {
	data := getRefUpdateFromRequestProviderAttachmentTagRef((*services.CreateProviderAttachmentTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteProviderAttachmentTagRefResponse)(request), nil
}

func getRefUpdateFromRequestProviderAttachmentTagRef(request *services.CreateProviderAttachmentTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetProviderAttachmentTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "provider-attachment",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateProviderAttachmentVirtualRouterRef(
	ctx context.Context, request *services.CreateProviderAttachmentVirtualRouterRefRequest,
) (*services.CreateProviderAttachmentVirtualRouterRefResponse, error) {
	data := getRefUpdateFromRequestProviderAttachmentVirtualRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateProviderAttachmentVirtualRouterRefResponse)(request), nil
}

func (h *HTTP) DeleteProviderAttachmentVirtualRouterRef(
	ctx context.Context, request *services.DeleteProviderAttachmentVirtualRouterRefRequest,
) (*services.DeleteProviderAttachmentVirtualRouterRefResponse, error) {
	data := getRefUpdateFromRequestProviderAttachmentVirtualRouterRef((*services.CreateProviderAttachmentVirtualRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteProviderAttachmentVirtualRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestProviderAttachmentVirtualRouterRef(request *services.CreateProviderAttachmentVirtualRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetProviderAttachmentVirtualRouterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "provider-attachment",
			UUID:      id,
			RefType:   "virtual-router",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateQosConfig(ctx context.Context, request *services.CreateQosConfigRequest) (*services.CreateQosConfigResponse, error) {
	response := &services.CreateQosConfigResponse{}
	_, err := h.Create(ctx, "/qos-configs", request, response)
	return response, err
}

func (h *HTTP) UpdateQosConfig(ctx context.Context, request *services.UpdateQosConfigRequest) (*services.UpdateQosConfigResponse, error) {
	response := &services.UpdateQosConfigResponse{}
	_, err := h.Update(ctx, "/qos-config/"+request.QosConfig.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteQosConfig(ctx context.Context, request *services.DeleteQosConfigRequest) (*services.DeleteQosConfigResponse, error) {
	response := &services.DeleteQosConfigResponse{}
	_, err := h.Delete(ctx, "/qos-config/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetQosConfig(ctx context.Context, request *services.GetQosConfigRequest) (*services.GetQosConfigResponse, error) {
	response := &services.GetQosConfigResponse{}
	_, err := h.Read(ctx, "/qos-config/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListQosConfig(ctx context.Context, request *services.ListQosConfigRequest) (*services.ListQosConfigResponse, error) {
	response := &services.ListQosConfigResponse{}
	_, err := h.ReadWithQuery(ctx, "/qos-configs", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateQosConfigGlobalSystemConfigRef(
	ctx context.Context, request *services.CreateQosConfigGlobalSystemConfigRefRequest,
) (*services.CreateQosConfigGlobalSystemConfigRefResponse, error) {
	data := getRefUpdateFromRequestQosConfigGlobalSystemConfigRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateQosConfigGlobalSystemConfigRefResponse)(request), nil
}

func (h *HTTP) DeleteQosConfigGlobalSystemConfigRef(
	ctx context.Context, request *services.DeleteQosConfigGlobalSystemConfigRefRequest,
) (*services.DeleteQosConfigGlobalSystemConfigRefResponse, error) {
	data := getRefUpdateFromRequestQosConfigGlobalSystemConfigRef((*services.CreateQosConfigGlobalSystemConfigRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteQosConfigGlobalSystemConfigRefResponse)(request), nil
}

func getRefUpdateFromRequestQosConfigGlobalSystemConfigRef(request *services.CreateQosConfigGlobalSystemConfigRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetQosConfigGlobalSystemConfigRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "qos-config",
			UUID:      id,
			RefType:   "global-system-config",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateQosConfigTagRef(
	ctx context.Context, request *services.CreateQosConfigTagRefRequest,
) (*services.CreateQosConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestQosConfigTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateQosConfigTagRefResponse)(request), nil
}

func (h *HTTP) DeleteQosConfigTagRef(
	ctx context.Context, request *services.DeleteQosConfigTagRefRequest,
) (*services.DeleteQosConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestQosConfigTagRef((*services.CreateQosConfigTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteQosConfigTagRefResponse)(request), nil
}

func getRefUpdateFromRequestQosConfigTagRef(request *services.CreateQosConfigTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetQosConfigTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "qos-config",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateQosQueue(ctx context.Context, request *services.CreateQosQueueRequest) (*services.CreateQosQueueResponse, error) {
	response := &services.CreateQosQueueResponse{}
	_, err := h.Create(ctx, "/qos-queues", request, response)
	return response, err
}

func (h *HTTP) UpdateQosQueue(ctx context.Context, request *services.UpdateQosQueueRequest) (*services.UpdateQosQueueResponse, error) {
	response := &services.UpdateQosQueueResponse{}
	_, err := h.Update(ctx, "/qos-queue/"+request.QosQueue.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteQosQueue(ctx context.Context, request *services.DeleteQosQueueRequest) (*services.DeleteQosQueueResponse, error) {
	response := &services.DeleteQosQueueResponse{}
	_, err := h.Delete(ctx, "/qos-queue/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetQosQueue(ctx context.Context, request *services.GetQosQueueRequest) (*services.GetQosQueueResponse, error) {
	response := &services.GetQosQueueResponse{}
	_, err := h.Read(ctx, "/qos-queue/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListQosQueue(ctx context.Context, request *services.ListQosQueueRequest) (*services.ListQosQueueResponse, error) {
	response := &services.ListQosQueueResponse{}
	_, err := h.ReadWithQuery(ctx, "/qos-queues", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateQosQueueTagRef(
	ctx context.Context, request *services.CreateQosQueueTagRefRequest,
) (*services.CreateQosQueueTagRefResponse, error) {
	data := getRefUpdateFromRequestQosQueueTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateQosQueueTagRefResponse)(request), nil
}

func (h *HTTP) DeleteQosQueueTagRef(
	ctx context.Context, request *services.DeleteQosQueueTagRefRequest,
) (*services.DeleteQosQueueTagRefResponse, error) {
	data := getRefUpdateFromRequestQosQueueTagRef((*services.CreateQosQueueTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteQosQueueTagRefResponse)(request), nil
}

func getRefUpdateFromRequestQosQueueTagRef(request *services.CreateQosQueueTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetQosQueueTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "qos-queue",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateRoleConfig(ctx context.Context, request *services.CreateRoleConfigRequest) (*services.CreateRoleConfigResponse, error) {
	response := &services.CreateRoleConfigResponse{}
	_, err := h.Create(ctx, "/role-configs", request, response)
	return response, err
}

func (h *HTTP) UpdateRoleConfig(ctx context.Context, request *services.UpdateRoleConfigRequest) (*services.UpdateRoleConfigResponse, error) {
	response := &services.UpdateRoleConfigResponse{}
	_, err := h.Update(ctx, "/role-config/"+request.RoleConfig.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteRoleConfig(ctx context.Context, request *services.DeleteRoleConfigRequest) (*services.DeleteRoleConfigResponse, error) {
	response := &services.DeleteRoleConfigResponse{}
	_, err := h.Delete(ctx, "/role-config/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetRoleConfig(ctx context.Context, request *services.GetRoleConfigRequest) (*services.GetRoleConfigResponse, error) {
	response := &services.GetRoleConfigResponse{}
	_, err := h.Read(ctx, "/role-config/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListRoleConfig(ctx context.Context, request *services.ListRoleConfigRequest) (*services.ListRoleConfigResponse, error) {
	response := &services.ListRoleConfigResponse{}
	_, err := h.ReadWithQuery(ctx, "/role-configs", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateRoleConfigTagRef(
	ctx context.Context, request *services.CreateRoleConfigTagRefRequest,
) (*services.CreateRoleConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestRoleConfigTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRoleConfigTagRefResponse)(request), nil
}

func (h *HTTP) DeleteRoleConfigTagRef(
	ctx context.Context, request *services.DeleteRoleConfigTagRefRequest,
) (*services.DeleteRoleConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestRoleConfigTagRef((*services.CreateRoleConfigTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRoleConfigTagRefResponse)(request), nil
}

func getRefUpdateFromRequestRoleConfigTagRef(request *services.CreateRoleConfigTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRoleConfigTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "role-config",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateRoleDefinition(ctx context.Context, request *services.CreateRoleDefinitionRequest) (*services.CreateRoleDefinitionResponse, error) {
	response := &services.CreateRoleDefinitionResponse{}
	_, err := h.Create(ctx, "/role-definitions", request, response)
	return response, err
}

func (h *HTTP) UpdateRoleDefinition(ctx context.Context, request *services.UpdateRoleDefinitionRequest) (*services.UpdateRoleDefinitionResponse, error) {
	response := &services.UpdateRoleDefinitionResponse{}
	_, err := h.Update(ctx, "/role-definition/"+request.RoleDefinition.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteRoleDefinition(ctx context.Context, request *services.DeleteRoleDefinitionRequest) (*services.DeleteRoleDefinitionResponse, error) {
	response := &services.DeleteRoleDefinitionResponse{}
	_, err := h.Delete(ctx, "/role-definition/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetRoleDefinition(ctx context.Context, request *services.GetRoleDefinitionRequest) (*services.GetRoleDefinitionResponse, error) {
	response := &services.GetRoleDefinitionResponse{}
	_, err := h.Read(ctx, "/role-definition/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListRoleDefinition(ctx context.Context, request *services.ListRoleDefinitionRequest) (*services.ListRoleDefinitionResponse, error) {
	response := &services.ListRoleDefinitionResponse{}
	_, err := h.ReadWithQuery(ctx, "/role-definitions", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateRoleDefinitionFeatureRef(
	ctx context.Context, request *services.CreateRoleDefinitionFeatureRefRequest,
) (*services.CreateRoleDefinitionFeatureRefResponse, error) {
	data := getRefUpdateFromRequestRoleDefinitionFeatureRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRoleDefinitionFeatureRefResponse)(request), nil
}

func (h *HTTP) DeleteRoleDefinitionFeatureRef(
	ctx context.Context, request *services.DeleteRoleDefinitionFeatureRefRequest,
) (*services.DeleteRoleDefinitionFeatureRefResponse, error) {
	data := getRefUpdateFromRequestRoleDefinitionFeatureRef((*services.CreateRoleDefinitionFeatureRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRoleDefinitionFeatureRefResponse)(request), nil
}

func getRefUpdateFromRequestRoleDefinitionFeatureRef(request *services.CreateRoleDefinitionFeatureRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRoleDefinitionFeatureRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "role-definition",
			UUID:      id,
			RefType:   "feature",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateRoleDefinitionOverlayRoleRef(
	ctx context.Context, request *services.CreateRoleDefinitionOverlayRoleRefRequest,
) (*services.CreateRoleDefinitionOverlayRoleRefResponse, error) {
	data := getRefUpdateFromRequestRoleDefinitionOverlayRoleRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRoleDefinitionOverlayRoleRefResponse)(request), nil
}

func (h *HTTP) DeleteRoleDefinitionOverlayRoleRef(
	ctx context.Context, request *services.DeleteRoleDefinitionOverlayRoleRefRequest,
) (*services.DeleteRoleDefinitionOverlayRoleRefResponse, error) {
	data := getRefUpdateFromRequestRoleDefinitionOverlayRoleRef((*services.CreateRoleDefinitionOverlayRoleRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRoleDefinitionOverlayRoleRefResponse)(request), nil
}

func getRefUpdateFromRequestRoleDefinitionOverlayRoleRef(request *services.CreateRoleDefinitionOverlayRoleRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRoleDefinitionOverlayRoleRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "role-definition",
			UUID:      id,
			RefType:   "overlay-role",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateRoleDefinitionPhysicalRoleRef(
	ctx context.Context, request *services.CreateRoleDefinitionPhysicalRoleRefRequest,
) (*services.CreateRoleDefinitionPhysicalRoleRefResponse, error) {
	data := getRefUpdateFromRequestRoleDefinitionPhysicalRoleRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRoleDefinitionPhysicalRoleRefResponse)(request), nil
}

func (h *HTTP) DeleteRoleDefinitionPhysicalRoleRef(
	ctx context.Context, request *services.DeleteRoleDefinitionPhysicalRoleRefRequest,
) (*services.DeleteRoleDefinitionPhysicalRoleRefResponse, error) {
	data := getRefUpdateFromRequestRoleDefinitionPhysicalRoleRef((*services.CreateRoleDefinitionPhysicalRoleRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRoleDefinitionPhysicalRoleRefResponse)(request), nil
}

func getRefUpdateFromRequestRoleDefinitionPhysicalRoleRef(request *services.CreateRoleDefinitionPhysicalRoleRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRoleDefinitionPhysicalRoleRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "role-definition",
			UUID:      id,
			RefType:   "physical-role",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateRoleDefinitionTagRef(
	ctx context.Context, request *services.CreateRoleDefinitionTagRefRequest,
) (*services.CreateRoleDefinitionTagRefResponse, error) {
	data := getRefUpdateFromRequestRoleDefinitionTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRoleDefinitionTagRefResponse)(request), nil
}

func (h *HTTP) DeleteRoleDefinitionTagRef(
	ctx context.Context, request *services.DeleteRoleDefinitionTagRefRequest,
) (*services.DeleteRoleDefinitionTagRefResponse, error) {
	data := getRefUpdateFromRequestRoleDefinitionTagRef((*services.CreateRoleDefinitionTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRoleDefinitionTagRefResponse)(request), nil
}

func getRefUpdateFromRequestRoleDefinitionTagRef(request *services.CreateRoleDefinitionTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRoleDefinitionTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "role-definition",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateRouteAggregate(ctx context.Context, request *services.CreateRouteAggregateRequest) (*services.CreateRouteAggregateResponse, error) {
	response := &services.CreateRouteAggregateResponse{}
	_, err := h.Create(ctx, "/route-aggregates", request, response)
	return response, err
}

func (h *HTTP) UpdateRouteAggregate(ctx context.Context, request *services.UpdateRouteAggregateRequest) (*services.UpdateRouteAggregateResponse, error) {
	response := &services.UpdateRouteAggregateResponse{}
	_, err := h.Update(ctx, "/route-aggregate/"+request.RouteAggregate.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteRouteAggregate(ctx context.Context, request *services.DeleteRouteAggregateRequest) (*services.DeleteRouteAggregateResponse, error) {
	response := &services.DeleteRouteAggregateResponse{}
	_, err := h.Delete(ctx, "/route-aggregate/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetRouteAggregate(ctx context.Context, request *services.GetRouteAggregateRequest) (*services.GetRouteAggregateResponse, error) {
	response := &services.GetRouteAggregateResponse{}
	_, err := h.Read(ctx, "/route-aggregate/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListRouteAggregate(ctx context.Context, request *services.ListRouteAggregateRequest) (*services.ListRouteAggregateResponse, error) {
	response := &services.ListRouteAggregateResponse{}
	_, err := h.ReadWithQuery(ctx, "/route-aggregates", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateRouteAggregateRoutingInstanceRef(
	ctx context.Context, request *services.CreateRouteAggregateRoutingInstanceRefRequest,
) (*services.CreateRouteAggregateRoutingInstanceRefResponse, error) {
	data := getRefUpdateFromRequestRouteAggregateRoutingInstanceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRouteAggregateRoutingInstanceRefResponse)(request), nil
}

func (h *HTTP) DeleteRouteAggregateRoutingInstanceRef(
	ctx context.Context, request *services.DeleteRouteAggregateRoutingInstanceRefRequest,
) (*services.DeleteRouteAggregateRoutingInstanceRefResponse, error) {
	data := getRefUpdateFromRequestRouteAggregateRoutingInstanceRef((*services.CreateRouteAggregateRoutingInstanceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRouteAggregateRoutingInstanceRefResponse)(request), nil
}

func getRefUpdateFromRequestRouteAggregateRoutingInstanceRef(request *services.CreateRouteAggregateRoutingInstanceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRouteAggregateRoutingInstanceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "route-aggregate",
			UUID:      id,
			RefType:   "routing-instance",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateRouteAggregateServiceInstanceRef(
	ctx context.Context, request *services.CreateRouteAggregateServiceInstanceRefRequest,
) (*services.CreateRouteAggregateServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestRouteAggregateServiceInstanceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRouteAggregateServiceInstanceRefResponse)(request), nil
}

func (h *HTTP) DeleteRouteAggregateServiceInstanceRef(
	ctx context.Context, request *services.DeleteRouteAggregateServiceInstanceRefRequest,
) (*services.DeleteRouteAggregateServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestRouteAggregateServiceInstanceRef((*services.CreateRouteAggregateServiceInstanceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRouteAggregateServiceInstanceRefResponse)(request), nil
}

func getRefUpdateFromRequestRouteAggregateServiceInstanceRef(request *services.CreateRouteAggregateServiceInstanceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRouteAggregateServiceInstanceRef()

	data := struct {
		services.RefUpdate

		Attr *models.ServiceInterfaceTag `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "route-aggregate",
			UUID:      id,
			RefType:   "service-instance",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateRouteAggregateTagRef(
	ctx context.Context, request *services.CreateRouteAggregateTagRefRequest,
) (*services.CreateRouteAggregateTagRefResponse, error) {
	data := getRefUpdateFromRequestRouteAggregateTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRouteAggregateTagRefResponse)(request), nil
}

func (h *HTTP) DeleteRouteAggregateTagRef(
	ctx context.Context, request *services.DeleteRouteAggregateTagRefRequest,
) (*services.DeleteRouteAggregateTagRefResponse, error) {
	data := getRefUpdateFromRequestRouteAggregateTagRef((*services.CreateRouteAggregateTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRouteAggregateTagRefResponse)(request), nil
}

func getRefUpdateFromRequestRouteAggregateTagRef(request *services.CreateRouteAggregateTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRouteAggregateTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "route-aggregate",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateRouteTable(ctx context.Context, request *services.CreateRouteTableRequest) (*services.CreateRouteTableResponse, error) {
	response := &services.CreateRouteTableResponse{}
	_, err := h.Create(ctx, "/route-tables", request, response)
	return response, err
}

func (h *HTTP) UpdateRouteTable(ctx context.Context, request *services.UpdateRouteTableRequest) (*services.UpdateRouteTableResponse, error) {
	response := &services.UpdateRouteTableResponse{}
	_, err := h.Update(ctx, "/route-table/"+request.RouteTable.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteRouteTable(ctx context.Context, request *services.DeleteRouteTableRequest) (*services.DeleteRouteTableResponse, error) {
	response := &services.DeleteRouteTableResponse{}
	_, err := h.Delete(ctx, "/route-table/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetRouteTable(ctx context.Context, request *services.GetRouteTableRequest) (*services.GetRouteTableResponse, error) {
	response := &services.GetRouteTableResponse{}
	_, err := h.Read(ctx, "/route-table/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListRouteTable(ctx context.Context, request *services.ListRouteTableRequest) (*services.ListRouteTableResponse, error) {
	response := &services.ListRouteTableResponse{}
	_, err := h.ReadWithQuery(ctx, "/route-tables", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateRouteTableTagRef(
	ctx context.Context, request *services.CreateRouteTableTagRefRequest,
) (*services.CreateRouteTableTagRefResponse, error) {
	data := getRefUpdateFromRequestRouteTableTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRouteTableTagRefResponse)(request), nil
}

func (h *HTTP) DeleteRouteTableTagRef(
	ctx context.Context, request *services.DeleteRouteTableTagRefRequest,
) (*services.DeleteRouteTableTagRefResponse, error) {
	data := getRefUpdateFromRequestRouteTableTagRef((*services.CreateRouteTableTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRouteTableTagRefResponse)(request), nil
}

func getRefUpdateFromRequestRouteTableTagRef(request *services.CreateRouteTableTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRouteTableTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "route-table",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateRouteTarget(ctx context.Context, request *services.CreateRouteTargetRequest) (*services.CreateRouteTargetResponse, error) {
	response := &services.CreateRouteTargetResponse{}
	_, err := h.Create(ctx, "/route-targets", request, response)
	return response, err
}

func (h *HTTP) UpdateRouteTarget(ctx context.Context, request *services.UpdateRouteTargetRequest) (*services.UpdateRouteTargetResponse, error) {
	response := &services.UpdateRouteTargetResponse{}
	_, err := h.Update(ctx, "/route-target/"+request.RouteTarget.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteRouteTarget(ctx context.Context, request *services.DeleteRouteTargetRequest) (*services.DeleteRouteTargetResponse, error) {
	response := &services.DeleteRouteTargetResponse{}
	_, err := h.Delete(ctx, "/route-target/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetRouteTarget(ctx context.Context, request *services.GetRouteTargetRequest) (*services.GetRouteTargetResponse, error) {
	response := &services.GetRouteTargetResponse{}
	_, err := h.Read(ctx, "/route-target/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListRouteTarget(ctx context.Context, request *services.ListRouteTargetRequest) (*services.ListRouteTargetResponse, error) {
	response := &services.ListRouteTargetResponse{}
	_, err := h.ReadWithQuery(ctx, "/route-targets", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateRouteTargetTagRef(
	ctx context.Context, request *services.CreateRouteTargetTagRefRequest,
) (*services.CreateRouteTargetTagRefResponse, error) {
	data := getRefUpdateFromRequestRouteTargetTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRouteTargetTagRefResponse)(request), nil
}

func (h *HTTP) DeleteRouteTargetTagRef(
	ctx context.Context, request *services.DeleteRouteTargetTagRefRequest,
) (*services.DeleteRouteTargetTagRefResponse, error) {
	data := getRefUpdateFromRequestRouteTargetTagRef((*services.CreateRouteTargetTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRouteTargetTagRefResponse)(request), nil
}

func getRefUpdateFromRequestRouteTargetTagRef(request *services.CreateRouteTargetTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRouteTargetTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "route-target",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateRoutingInstance(ctx context.Context, request *services.CreateRoutingInstanceRequest) (*services.CreateRoutingInstanceResponse, error) {
	response := &services.CreateRoutingInstanceResponse{}
	_, err := h.Create(ctx, "/routing-instances", request, response)
	return response, err
}

func (h *HTTP) UpdateRoutingInstance(ctx context.Context, request *services.UpdateRoutingInstanceRequest) (*services.UpdateRoutingInstanceResponse, error) {
	response := &services.UpdateRoutingInstanceResponse{}
	_, err := h.Update(ctx, "/routing-instance/"+request.RoutingInstance.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteRoutingInstance(ctx context.Context, request *services.DeleteRoutingInstanceRequest) (*services.DeleteRoutingInstanceResponse, error) {
	response := &services.DeleteRoutingInstanceResponse{}
	_, err := h.Delete(ctx, "/routing-instance/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetRoutingInstance(ctx context.Context, request *services.GetRoutingInstanceRequest) (*services.GetRoutingInstanceResponse, error) {
	response := &services.GetRoutingInstanceResponse{}
	_, err := h.Read(ctx, "/routing-instance/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListRoutingInstance(ctx context.Context, request *services.ListRoutingInstanceRequest) (*services.ListRoutingInstanceResponse, error) {
	response := &services.ListRoutingInstanceResponse{}
	_, err := h.ReadWithQuery(ctx, "/routing-instances", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateRoutingInstanceRouteTargetRef(
	ctx context.Context, request *services.CreateRoutingInstanceRouteTargetRefRequest,
) (*services.CreateRoutingInstanceRouteTargetRefResponse, error) {
	data := getRefUpdateFromRequestRoutingInstanceRouteTargetRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRoutingInstanceRouteTargetRefResponse)(request), nil
}

func (h *HTTP) DeleteRoutingInstanceRouteTargetRef(
	ctx context.Context, request *services.DeleteRoutingInstanceRouteTargetRefRequest,
) (*services.DeleteRoutingInstanceRouteTargetRefResponse, error) {
	data := getRefUpdateFromRequestRoutingInstanceRouteTargetRef((*services.CreateRoutingInstanceRouteTargetRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRoutingInstanceRouteTargetRefResponse)(request), nil
}

func getRefUpdateFromRequestRoutingInstanceRouteTargetRef(request *services.CreateRoutingInstanceRouteTargetRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRoutingInstanceRouteTargetRef()

	data := struct {
		services.RefUpdate

		Attr *models.InstanceTargetType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "routing-instance",
			UUID:      id,
			RefType:   "route-target",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateRoutingInstanceRoutingInstanceRef(
	ctx context.Context, request *services.CreateRoutingInstanceRoutingInstanceRefRequest,
) (*services.CreateRoutingInstanceRoutingInstanceRefResponse, error) {
	data := getRefUpdateFromRequestRoutingInstanceRoutingInstanceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRoutingInstanceRoutingInstanceRefResponse)(request), nil
}

func (h *HTTP) DeleteRoutingInstanceRoutingInstanceRef(
	ctx context.Context, request *services.DeleteRoutingInstanceRoutingInstanceRefRequest,
) (*services.DeleteRoutingInstanceRoutingInstanceRefResponse, error) {
	data := getRefUpdateFromRequestRoutingInstanceRoutingInstanceRef((*services.CreateRoutingInstanceRoutingInstanceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRoutingInstanceRoutingInstanceRefResponse)(request), nil
}

func getRefUpdateFromRequestRoutingInstanceRoutingInstanceRef(request *services.CreateRoutingInstanceRoutingInstanceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRoutingInstanceRoutingInstanceRef()

	data := struct {
		services.RefUpdate

		Attr *models.ConnectionType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "routing-instance",
			UUID:      id,
			RefType:   "routing-instance",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateRoutingInstanceTagRef(
	ctx context.Context, request *services.CreateRoutingInstanceTagRefRequest,
) (*services.CreateRoutingInstanceTagRefResponse, error) {
	data := getRefUpdateFromRequestRoutingInstanceTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRoutingInstanceTagRefResponse)(request), nil
}

func (h *HTTP) DeleteRoutingInstanceTagRef(
	ctx context.Context, request *services.DeleteRoutingInstanceTagRefRequest,
) (*services.DeleteRoutingInstanceTagRefResponse, error) {
	data := getRefUpdateFromRequestRoutingInstanceTagRef((*services.CreateRoutingInstanceTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRoutingInstanceTagRefResponse)(request), nil
}

func getRefUpdateFromRequestRoutingInstanceTagRef(request *services.CreateRoutingInstanceTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRoutingInstanceTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "routing-instance",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateRoutingPolicy(ctx context.Context, request *services.CreateRoutingPolicyRequest) (*services.CreateRoutingPolicyResponse, error) {
	response := &services.CreateRoutingPolicyResponse{}
	_, err := h.Create(ctx, "/routing-policys", request, response)
	return response, err
}

func (h *HTTP) UpdateRoutingPolicy(ctx context.Context, request *services.UpdateRoutingPolicyRequest) (*services.UpdateRoutingPolicyResponse, error) {
	response := &services.UpdateRoutingPolicyResponse{}
	_, err := h.Update(ctx, "/routing-policy/"+request.RoutingPolicy.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteRoutingPolicy(ctx context.Context, request *services.DeleteRoutingPolicyRequest) (*services.DeleteRoutingPolicyResponse, error) {
	response := &services.DeleteRoutingPolicyResponse{}
	_, err := h.Delete(ctx, "/routing-policy/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetRoutingPolicy(ctx context.Context, request *services.GetRoutingPolicyRequest) (*services.GetRoutingPolicyResponse, error) {
	response := &services.GetRoutingPolicyResponse{}
	_, err := h.Read(ctx, "/routing-policy/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListRoutingPolicy(ctx context.Context, request *services.ListRoutingPolicyRequest) (*services.ListRoutingPolicyResponse, error) {
	response := &services.ListRoutingPolicyResponse{}
	_, err := h.ReadWithQuery(ctx, "/routing-policys", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateRoutingPolicyRoutingInstanceRef(
	ctx context.Context, request *services.CreateRoutingPolicyRoutingInstanceRefRequest,
) (*services.CreateRoutingPolicyRoutingInstanceRefResponse, error) {
	data := getRefUpdateFromRequestRoutingPolicyRoutingInstanceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRoutingPolicyRoutingInstanceRefResponse)(request), nil
}

func (h *HTTP) DeleteRoutingPolicyRoutingInstanceRef(
	ctx context.Context, request *services.DeleteRoutingPolicyRoutingInstanceRefRequest,
) (*services.DeleteRoutingPolicyRoutingInstanceRefResponse, error) {
	data := getRefUpdateFromRequestRoutingPolicyRoutingInstanceRef((*services.CreateRoutingPolicyRoutingInstanceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRoutingPolicyRoutingInstanceRefResponse)(request), nil
}

func getRefUpdateFromRequestRoutingPolicyRoutingInstanceRef(request *services.CreateRoutingPolicyRoutingInstanceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRoutingPolicyRoutingInstanceRef()

	data := struct {
		services.RefUpdate

		Attr *models.RoutingPolicyType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "routing-policy",
			UUID:      id,
			RefType:   "routing-instance",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateRoutingPolicyServiceInstanceRef(
	ctx context.Context, request *services.CreateRoutingPolicyServiceInstanceRefRequest,
) (*services.CreateRoutingPolicyServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestRoutingPolicyServiceInstanceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRoutingPolicyServiceInstanceRefResponse)(request), nil
}

func (h *HTTP) DeleteRoutingPolicyServiceInstanceRef(
	ctx context.Context, request *services.DeleteRoutingPolicyServiceInstanceRefRequest,
) (*services.DeleteRoutingPolicyServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestRoutingPolicyServiceInstanceRef((*services.CreateRoutingPolicyServiceInstanceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRoutingPolicyServiceInstanceRefResponse)(request), nil
}

func getRefUpdateFromRequestRoutingPolicyServiceInstanceRef(request *services.CreateRoutingPolicyServiceInstanceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRoutingPolicyServiceInstanceRef()

	data := struct {
		services.RefUpdate

		Attr *models.RoutingPolicyServiceInstanceType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "routing-policy",
			UUID:      id,
			RefType:   "service-instance",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateRoutingPolicyTagRef(
	ctx context.Context, request *services.CreateRoutingPolicyTagRefRequest,
) (*services.CreateRoutingPolicyTagRefResponse, error) {
	data := getRefUpdateFromRequestRoutingPolicyTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateRoutingPolicyTagRefResponse)(request), nil
}

func (h *HTTP) DeleteRoutingPolicyTagRef(
	ctx context.Context, request *services.DeleteRoutingPolicyTagRefRequest,
) (*services.DeleteRoutingPolicyTagRefResponse, error) {
	data := getRefUpdateFromRequestRoutingPolicyTagRef((*services.CreateRoutingPolicyTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteRoutingPolicyTagRefResponse)(request), nil
}

func getRefUpdateFromRequestRoutingPolicyTagRef(request *services.CreateRoutingPolicyTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetRoutingPolicyTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "routing-policy",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateSecurityGroup(ctx context.Context, request *services.CreateSecurityGroupRequest) (*services.CreateSecurityGroupResponse, error) {
	response := &services.CreateSecurityGroupResponse{}
	_, err := h.Create(ctx, "/security-groups", request, response)
	return response, err
}

func (h *HTTP) UpdateSecurityGroup(ctx context.Context, request *services.UpdateSecurityGroupRequest) (*services.UpdateSecurityGroupResponse, error) {
	response := &services.UpdateSecurityGroupResponse{}
	_, err := h.Update(ctx, "/security-group/"+request.SecurityGroup.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteSecurityGroup(ctx context.Context, request *services.DeleteSecurityGroupRequest) (*services.DeleteSecurityGroupResponse, error) {
	response := &services.DeleteSecurityGroupResponse{}
	_, err := h.Delete(ctx, "/security-group/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetSecurityGroup(ctx context.Context, request *services.GetSecurityGroupRequest) (*services.GetSecurityGroupResponse, error) {
	response := &services.GetSecurityGroupResponse{}
	_, err := h.Read(ctx, "/security-group/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListSecurityGroup(ctx context.Context, request *services.ListSecurityGroupRequest) (*services.ListSecurityGroupResponse, error) {
	response := &services.ListSecurityGroupResponse{}
	_, err := h.ReadWithQuery(ctx, "/security-groups", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateSecurityGroupTagRef(
	ctx context.Context, request *services.CreateSecurityGroupTagRefRequest,
) (*services.CreateSecurityGroupTagRefResponse, error) {
	data := getRefUpdateFromRequestSecurityGroupTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateSecurityGroupTagRefResponse)(request), nil
}

func (h *HTTP) DeleteSecurityGroupTagRef(
	ctx context.Context, request *services.DeleteSecurityGroupTagRefRequest,
) (*services.DeleteSecurityGroupTagRefResponse, error) {
	data := getRefUpdateFromRequestSecurityGroupTagRef((*services.CreateSecurityGroupTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteSecurityGroupTagRefResponse)(request), nil
}

func getRefUpdateFromRequestSecurityGroupTagRef(request *services.CreateSecurityGroupTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetSecurityGroupTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "security-group",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateSecurityLoggingObject(ctx context.Context, request *services.CreateSecurityLoggingObjectRequest) (*services.CreateSecurityLoggingObjectResponse, error) {
	response := &services.CreateSecurityLoggingObjectResponse{}
	_, err := h.Create(ctx, "/security-logging-objects", request, response)
	return response, err
}

func (h *HTTP) UpdateSecurityLoggingObject(ctx context.Context, request *services.UpdateSecurityLoggingObjectRequest) (*services.UpdateSecurityLoggingObjectResponse, error) {
	response := &services.UpdateSecurityLoggingObjectResponse{}
	_, err := h.Update(ctx, "/security-logging-object/"+request.SecurityLoggingObject.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteSecurityLoggingObject(ctx context.Context, request *services.DeleteSecurityLoggingObjectRequest) (*services.DeleteSecurityLoggingObjectResponse, error) {
	response := &services.DeleteSecurityLoggingObjectResponse{}
	_, err := h.Delete(ctx, "/security-logging-object/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetSecurityLoggingObject(ctx context.Context, request *services.GetSecurityLoggingObjectRequest) (*services.GetSecurityLoggingObjectResponse, error) {
	response := &services.GetSecurityLoggingObjectResponse{}
	_, err := h.Read(ctx, "/security-logging-object/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListSecurityLoggingObject(ctx context.Context, request *services.ListSecurityLoggingObjectRequest) (*services.ListSecurityLoggingObjectResponse, error) {
	response := &services.ListSecurityLoggingObjectResponse{}
	_, err := h.ReadWithQuery(ctx, "/security-logging-objects", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateSecurityLoggingObjectNetworkPolicyRef(
	ctx context.Context, request *services.CreateSecurityLoggingObjectNetworkPolicyRefRequest,
) (*services.CreateSecurityLoggingObjectNetworkPolicyRefResponse, error) {
	data := getRefUpdateFromRequestSecurityLoggingObjectNetworkPolicyRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateSecurityLoggingObjectNetworkPolicyRefResponse)(request), nil
}

func (h *HTTP) DeleteSecurityLoggingObjectNetworkPolicyRef(
	ctx context.Context, request *services.DeleteSecurityLoggingObjectNetworkPolicyRefRequest,
) (*services.DeleteSecurityLoggingObjectNetworkPolicyRefResponse, error) {
	data := getRefUpdateFromRequestSecurityLoggingObjectNetworkPolicyRef((*services.CreateSecurityLoggingObjectNetworkPolicyRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteSecurityLoggingObjectNetworkPolicyRefResponse)(request), nil
}

func getRefUpdateFromRequestSecurityLoggingObjectNetworkPolicyRef(request *services.CreateSecurityLoggingObjectNetworkPolicyRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetSecurityLoggingObjectNetworkPolicyRef()

	data := struct {
		services.RefUpdate

		Attr *models.SecurityLoggingObjectRuleListType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "security-logging-object",
			UUID:      id,
			RefType:   "network-policy",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateSecurityLoggingObjectSecurityGroupRef(
	ctx context.Context, request *services.CreateSecurityLoggingObjectSecurityGroupRefRequest,
) (*services.CreateSecurityLoggingObjectSecurityGroupRefResponse, error) {
	data := getRefUpdateFromRequestSecurityLoggingObjectSecurityGroupRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateSecurityLoggingObjectSecurityGroupRefResponse)(request), nil
}

func (h *HTTP) DeleteSecurityLoggingObjectSecurityGroupRef(
	ctx context.Context, request *services.DeleteSecurityLoggingObjectSecurityGroupRefRequest,
) (*services.DeleteSecurityLoggingObjectSecurityGroupRefResponse, error) {
	data := getRefUpdateFromRequestSecurityLoggingObjectSecurityGroupRef((*services.CreateSecurityLoggingObjectSecurityGroupRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteSecurityLoggingObjectSecurityGroupRefResponse)(request), nil
}

func getRefUpdateFromRequestSecurityLoggingObjectSecurityGroupRef(request *services.CreateSecurityLoggingObjectSecurityGroupRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetSecurityLoggingObjectSecurityGroupRef()

	data := struct {
		services.RefUpdate

		Attr *models.SecurityLoggingObjectRuleListType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "security-logging-object",
			UUID:      id,
			RefType:   "security-group",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateSecurityLoggingObjectTagRef(
	ctx context.Context, request *services.CreateSecurityLoggingObjectTagRefRequest,
) (*services.CreateSecurityLoggingObjectTagRefResponse, error) {
	data := getRefUpdateFromRequestSecurityLoggingObjectTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateSecurityLoggingObjectTagRefResponse)(request), nil
}

func (h *HTTP) DeleteSecurityLoggingObjectTagRef(
	ctx context.Context, request *services.DeleteSecurityLoggingObjectTagRefRequest,
) (*services.DeleteSecurityLoggingObjectTagRefResponse, error) {
	data := getRefUpdateFromRequestSecurityLoggingObjectTagRef((*services.CreateSecurityLoggingObjectTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteSecurityLoggingObjectTagRefResponse)(request), nil
}

func getRefUpdateFromRequestSecurityLoggingObjectTagRef(request *services.CreateSecurityLoggingObjectTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetSecurityLoggingObjectTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "security-logging-object",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceAppliance(ctx context.Context, request *services.CreateServiceApplianceRequest) (*services.CreateServiceApplianceResponse, error) {
	response := &services.CreateServiceApplianceResponse{}
	_, err := h.Create(ctx, "/service-appliances", request, response)
	return response, err
}

func (h *HTTP) UpdateServiceAppliance(ctx context.Context, request *services.UpdateServiceApplianceRequest) (*services.UpdateServiceApplianceResponse, error) {
	response := &services.UpdateServiceApplianceResponse{}
	_, err := h.Update(ctx, "/service-appliance/"+request.ServiceAppliance.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteServiceAppliance(ctx context.Context, request *services.DeleteServiceApplianceRequest) (*services.DeleteServiceApplianceResponse, error) {
	response := &services.DeleteServiceApplianceResponse{}
	_, err := h.Delete(ctx, "/service-appliance/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetServiceAppliance(ctx context.Context, request *services.GetServiceApplianceRequest) (*services.GetServiceApplianceResponse, error) {
	response := &services.GetServiceApplianceResponse{}
	_, err := h.Read(ctx, "/service-appliance/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListServiceAppliance(ctx context.Context, request *services.ListServiceApplianceRequest) (*services.ListServiceApplianceResponse, error) {
	response := &services.ListServiceApplianceResponse{}
	_, err := h.ReadWithQuery(ctx, "/service-appliances", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateServiceAppliancePhysicalInterfaceRef(
	ctx context.Context, request *services.CreateServiceAppliancePhysicalInterfaceRefRequest,
) (*services.CreateServiceAppliancePhysicalInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestServiceAppliancePhysicalInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceAppliancePhysicalInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceAppliancePhysicalInterfaceRef(
	ctx context.Context, request *services.DeleteServiceAppliancePhysicalInterfaceRefRequest,
) (*services.DeleteServiceAppliancePhysicalInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestServiceAppliancePhysicalInterfaceRef((*services.CreateServiceAppliancePhysicalInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceAppliancePhysicalInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceAppliancePhysicalInterfaceRef(request *services.CreateServiceAppliancePhysicalInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceAppliancePhysicalInterfaceRef()

	data := struct {
		services.RefUpdate

		Attr *models.ServiceApplianceInterfaceType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-appliance",
			UUID:      id,
			RefType:   "physical-interface",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateServiceApplianceTagRef(
	ctx context.Context, request *services.CreateServiceApplianceTagRefRequest,
) (*services.CreateServiceApplianceTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceApplianceTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceApplianceTagRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceApplianceTagRef(
	ctx context.Context, request *services.DeleteServiceApplianceTagRefRequest,
) (*services.DeleteServiceApplianceTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceApplianceTagRef((*services.CreateServiceApplianceTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceApplianceTagRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceApplianceTagRef(request *services.CreateServiceApplianceTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceApplianceTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-appliance",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceApplianceSet(ctx context.Context, request *services.CreateServiceApplianceSetRequest) (*services.CreateServiceApplianceSetResponse, error) {
	response := &services.CreateServiceApplianceSetResponse{}
	_, err := h.Create(ctx, "/service-appliance-sets", request, response)
	return response, err
}

func (h *HTTP) UpdateServiceApplianceSet(ctx context.Context, request *services.UpdateServiceApplianceSetRequest) (*services.UpdateServiceApplianceSetResponse, error) {
	response := &services.UpdateServiceApplianceSetResponse{}
	_, err := h.Update(ctx, "/service-appliance-set/"+request.ServiceApplianceSet.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteServiceApplianceSet(ctx context.Context, request *services.DeleteServiceApplianceSetRequest) (*services.DeleteServiceApplianceSetResponse, error) {
	response := &services.DeleteServiceApplianceSetResponse{}
	_, err := h.Delete(ctx, "/service-appliance-set/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetServiceApplianceSet(ctx context.Context, request *services.GetServiceApplianceSetRequest) (*services.GetServiceApplianceSetResponse, error) {
	response := &services.GetServiceApplianceSetResponse{}
	_, err := h.Read(ctx, "/service-appliance-set/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListServiceApplianceSet(ctx context.Context, request *services.ListServiceApplianceSetRequest) (*services.ListServiceApplianceSetResponse, error) {
	response := &services.ListServiceApplianceSetResponse{}
	_, err := h.ReadWithQuery(ctx, "/service-appliance-sets", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateServiceApplianceSetTagRef(
	ctx context.Context, request *services.CreateServiceApplianceSetTagRefRequest,
) (*services.CreateServiceApplianceSetTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceApplianceSetTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceApplianceSetTagRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceApplianceSetTagRef(
	ctx context.Context, request *services.DeleteServiceApplianceSetTagRefRequest,
) (*services.DeleteServiceApplianceSetTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceApplianceSetTagRef((*services.CreateServiceApplianceSetTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceApplianceSetTagRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceApplianceSetTagRef(request *services.CreateServiceApplianceSetTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceApplianceSetTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-appliance-set",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceConnectionModule(ctx context.Context, request *services.CreateServiceConnectionModuleRequest) (*services.CreateServiceConnectionModuleResponse, error) {
	response := &services.CreateServiceConnectionModuleResponse{}
	_, err := h.Create(ctx, "/service-connection-modules", request, response)
	return response, err
}

func (h *HTTP) UpdateServiceConnectionModule(ctx context.Context, request *services.UpdateServiceConnectionModuleRequest) (*services.UpdateServiceConnectionModuleResponse, error) {
	response := &services.UpdateServiceConnectionModuleResponse{}
	_, err := h.Update(ctx, "/service-connection-module/"+request.ServiceConnectionModule.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteServiceConnectionModule(ctx context.Context, request *services.DeleteServiceConnectionModuleRequest) (*services.DeleteServiceConnectionModuleResponse, error) {
	response := &services.DeleteServiceConnectionModuleResponse{}
	_, err := h.Delete(ctx, "/service-connection-module/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetServiceConnectionModule(ctx context.Context, request *services.GetServiceConnectionModuleRequest) (*services.GetServiceConnectionModuleResponse, error) {
	response := &services.GetServiceConnectionModuleResponse{}
	_, err := h.Read(ctx, "/service-connection-module/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListServiceConnectionModule(ctx context.Context, request *services.ListServiceConnectionModuleRequest) (*services.ListServiceConnectionModuleResponse, error) {
	response := &services.ListServiceConnectionModuleResponse{}
	_, err := h.ReadWithQuery(ctx, "/service-connection-modules", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateServiceConnectionModuleServiceObjectRef(
	ctx context.Context, request *services.CreateServiceConnectionModuleServiceObjectRefRequest,
) (*services.CreateServiceConnectionModuleServiceObjectRefResponse, error) {
	data := getRefUpdateFromRequestServiceConnectionModuleServiceObjectRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceConnectionModuleServiceObjectRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceConnectionModuleServiceObjectRef(
	ctx context.Context, request *services.DeleteServiceConnectionModuleServiceObjectRefRequest,
) (*services.DeleteServiceConnectionModuleServiceObjectRefResponse, error) {
	data := getRefUpdateFromRequestServiceConnectionModuleServiceObjectRef((*services.CreateServiceConnectionModuleServiceObjectRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceConnectionModuleServiceObjectRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceConnectionModuleServiceObjectRef(request *services.CreateServiceConnectionModuleServiceObjectRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceConnectionModuleServiceObjectRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-connection-module",
			UUID:      id,
			RefType:   "service-object",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceConnectionModuleTagRef(
	ctx context.Context, request *services.CreateServiceConnectionModuleTagRefRequest,
) (*services.CreateServiceConnectionModuleTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceConnectionModuleTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceConnectionModuleTagRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceConnectionModuleTagRef(
	ctx context.Context, request *services.DeleteServiceConnectionModuleTagRefRequest,
) (*services.DeleteServiceConnectionModuleTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceConnectionModuleTagRef((*services.CreateServiceConnectionModuleTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceConnectionModuleTagRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceConnectionModuleTagRef(request *services.CreateServiceConnectionModuleTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceConnectionModuleTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-connection-module",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceEndpoint(ctx context.Context, request *services.CreateServiceEndpointRequest) (*services.CreateServiceEndpointResponse, error) {
	response := &services.CreateServiceEndpointResponse{}
	_, err := h.Create(ctx, "/service-endpoints", request, response)
	return response, err
}

func (h *HTTP) UpdateServiceEndpoint(ctx context.Context, request *services.UpdateServiceEndpointRequest) (*services.UpdateServiceEndpointResponse, error) {
	response := &services.UpdateServiceEndpointResponse{}
	_, err := h.Update(ctx, "/service-endpoint/"+request.ServiceEndpoint.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteServiceEndpoint(ctx context.Context, request *services.DeleteServiceEndpointRequest) (*services.DeleteServiceEndpointResponse, error) {
	response := &services.DeleteServiceEndpointResponse{}
	_, err := h.Delete(ctx, "/service-endpoint/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetServiceEndpoint(ctx context.Context, request *services.GetServiceEndpointRequest) (*services.GetServiceEndpointResponse, error) {
	response := &services.GetServiceEndpointResponse{}
	_, err := h.Read(ctx, "/service-endpoint/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListServiceEndpoint(ctx context.Context, request *services.ListServiceEndpointRequest) (*services.ListServiceEndpointResponse, error) {
	response := &services.ListServiceEndpointResponse{}
	_, err := h.ReadWithQuery(ctx, "/service-endpoints", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateServiceEndpointPhysicalRouterRef(
	ctx context.Context, request *services.CreateServiceEndpointPhysicalRouterRefRequest,
) (*services.CreateServiceEndpointPhysicalRouterRefResponse, error) {
	data := getRefUpdateFromRequestServiceEndpointPhysicalRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceEndpointPhysicalRouterRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceEndpointPhysicalRouterRef(
	ctx context.Context, request *services.DeleteServiceEndpointPhysicalRouterRefRequest,
) (*services.DeleteServiceEndpointPhysicalRouterRefResponse, error) {
	data := getRefUpdateFromRequestServiceEndpointPhysicalRouterRef((*services.CreateServiceEndpointPhysicalRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceEndpointPhysicalRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceEndpointPhysicalRouterRef(request *services.CreateServiceEndpointPhysicalRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceEndpointPhysicalRouterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-endpoint",
			UUID:      id,
			RefType:   "physical-router",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceEndpointServiceConnectionModuleRef(
	ctx context.Context, request *services.CreateServiceEndpointServiceConnectionModuleRefRequest,
) (*services.CreateServiceEndpointServiceConnectionModuleRefResponse, error) {
	data := getRefUpdateFromRequestServiceEndpointServiceConnectionModuleRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceEndpointServiceConnectionModuleRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceEndpointServiceConnectionModuleRef(
	ctx context.Context, request *services.DeleteServiceEndpointServiceConnectionModuleRefRequest,
) (*services.DeleteServiceEndpointServiceConnectionModuleRefResponse, error) {
	data := getRefUpdateFromRequestServiceEndpointServiceConnectionModuleRef((*services.CreateServiceEndpointServiceConnectionModuleRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceEndpointServiceConnectionModuleRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceEndpointServiceConnectionModuleRef(request *services.CreateServiceEndpointServiceConnectionModuleRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceEndpointServiceConnectionModuleRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-endpoint",
			UUID:      id,
			RefType:   "service-connection-module",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceEndpointServiceObjectRef(
	ctx context.Context, request *services.CreateServiceEndpointServiceObjectRefRequest,
) (*services.CreateServiceEndpointServiceObjectRefResponse, error) {
	data := getRefUpdateFromRequestServiceEndpointServiceObjectRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceEndpointServiceObjectRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceEndpointServiceObjectRef(
	ctx context.Context, request *services.DeleteServiceEndpointServiceObjectRefRequest,
) (*services.DeleteServiceEndpointServiceObjectRefResponse, error) {
	data := getRefUpdateFromRequestServiceEndpointServiceObjectRef((*services.CreateServiceEndpointServiceObjectRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceEndpointServiceObjectRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceEndpointServiceObjectRef(request *services.CreateServiceEndpointServiceObjectRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceEndpointServiceObjectRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-endpoint",
			UUID:      id,
			RefType:   "service-object",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceEndpointTagRef(
	ctx context.Context, request *services.CreateServiceEndpointTagRefRequest,
) (*services.CreateServiceEndpointTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceEndpointTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceEndpointTagRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceEndpointTagRef(
	ctx context.Context, request *services.DeleteServiceEndpointTagRefRequest,
) (*services.DeleteServiceEndpointTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceEndpointTagRef((*services.CreateServiceEndpointTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceEndpointTagRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceEndpointTagRef(request *services.CreateServiceEndpointTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceEndpointTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-endpoint",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceGroup(ctx context.Context, request *services.CreateServiceGroupRequest) (*services.CreateServiceGroupResponse, error) {
	response := &services.CreateServiceGroupResponse{}
	_, err := h.Create(ctx, "/service-groups", request, response)
	return response, err
}

func (h *HTTP) UpdateServiceGroup(ctx context.Context, request *services.UpdateServiceGroupRequest) (*services.UpdateServiceGroupResponse, error) {
	response := &services.UpdateServiceGroupResponse{}
	_, err := h.Update(ctx, "/service-group/"+request.ServiceGroup.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteServiceGroup(ctx context.Context, request *services.DeleteServiceGroupRequest) (*services.DeleteServiceGroupResponse, error) {
	response := &services.DeleteServiceGroupResponse{}
	_, err := h.Delete(ctx, "/service-group/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetServiceGroup(ctx context.Context, request *services.GetServiceGroupRequest) (*services.GetServiceGroupResponse, error) {
	response := &services.GetServiceGroupResponse{}
	_, err := h.Read(ctx, "/service-group/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListServiceGroup(ctx context.Context, request *services.ListServiceGroupRequest) (*services.ListServiceGroupResponse, error) {
	response := &services.ListServiceGroupResponse{}
	_, err := h.ReadWithQuery(ctx, "/service-groups", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateServiceGroupTagRef(
	ctx context.Context, request *services.CreateServiceGroupTagRefRequest,
) (*services.CreateServiceGroupTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceGroupTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceGroupTagRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceGroupTagRef(
	ctx context.Context, request *services.DeleteServiceGroupTagRefRequest,
) (*services.DeleteServiceGroupTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceGroupTagRef((*services.CreateServiceGroupTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceGroupTagRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceGroupTagRef(request *services.CreateServiceGroupTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceGroupTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-group",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceHealthCheck(ctx context.Context, request *services.CreateServiceHealthCheckRequest) (*services.CreateServiceHealthCheckResponse, error) {
	response := &services.CreateServiceHealthCheckResponse{}
	_, err := h.Create(ctx, "/service-health-checks", request, response)
	return response, err
}

func (h *HTTP) UpdateServiceHealthCheck(ctx context.Context, request *services.UpdateServiceHealthCheckRequest) (*services.UpdateServiceHealthCheckResponse, error) {
	response := &services.UpdateServiceHealthCheckResponse{}
	_, err := h.Update(ctx, "/service-health-check/"+request.ServiceHealthCheck.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteServiceHealthCheck(ctx context.Context, request *services.DeleteServiceHealthCheckRequest) (*services.DeleteServiceHealthCheckResponse, error) {
	response := &services.DeleteServiceHealthCheckResponse{}
	_, err := h.Delete(ctx, "/service-health-check/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetServiceHealthCheck(ctx context.Context, request *services.GetServiceHealthCheckRequest) (*services.GetServiceHealthCheckResponse, error) {
	response := &services.GetServiceHealthCheckResponse{}
	_, err := h.Read(ctx, "/service-health-check/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListServiceHealthCheck(ctx context.Context, request *services.ListServiceHealthCheckRequest) (*services.ListServiceHealthCheckResponse, error) {
	response := &services.ListServiceHealthCheckResponse{}
	_, err := h.ReadWithQuery(ctx, "/service-health-checks", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateServiceHealthCheckServiceInstanceRef(
	ctx context.Context, request *services.CreateServiceHealthCheckServiceInstanceRefRequest,
) (*services.CreateServiceHealthCheckServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestServiceHealthCheckServiceInstanceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceHealthCheckServiceInstanceRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceHealthCheckServiceInstanceRef(
	ctx context.Context, request *services.DeleteServiceHealthCheckServiceInstanceRefRequest,
) (*services.DeleteServiceHealthCheckServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestServiceHealthCheckServiceInstanceRef((*services.CreateServiceHealthCheckServiceInstanceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceHealthCheckServiceInstanceRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceHealthCheckServiceInstanceRef(request *services.CreateServiceHealthCheckServiceInstanceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceHealthCheckServiceInstanceRef()

	data := struct {
		services.RefUpdate

		Attr *models.ServiceInterfaceTag `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-health-check",
			UUID:      id,
			RefType:   "service-instance",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateServiceHealthCheckTagRef(
	ctx context.Context, request *services.CreateServiceHealthCheckTagRefRequest,
) (*services.CreateServiceHealthCheckTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceHealthCheckTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceHealthCheckTagRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceHealthCheckTagRef(
	ctx context.Context, request *services.DeleteServiceHealthCheckTagRefRequest,
) (*services.DeleteServiceHealthCheckTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceHealthCheckTagRef((*services.CreateServiceHealthCheckTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceHealthCheckTagRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceHealthCheckTagRef(request *services.CreateServiceHealthCheckTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceHealthCheckTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-health-check",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceInstance(ctx context.Context, request *services.CreateServiceInstanceRequest) (*services.CreateServiceInstanceResponse, error) {
	response := &services.CreateServiceInstanceResponse{}
	_, err := h.Create(ctx, "/service-instances", request, response)
	return response, err
}

func (h *HTTP) UpdateServiceInstance(ctx context.Context, request *services.UpdateServiceInstanceRequest) (*services.UpdateServiceInstanceResponse, error) {
	response := &services.UpdateServiceInstanceResponse{}
	_, err := h.Update(ctx, "/service-instance/"+request.ServiceInstance.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteServiceInstance(ctx context.Context, request *services.DeleteServiceInstanceRequest) (*services.DeleteServiceInstanceResponse, error) {
	response := &services.DeleteServiceInstanceResponse{}
	_, err := h.Delete(ctx, "/service-instance/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetServiceInstance(ctx context.Context, request *services.GetServiceInstanceRequest) (*services.GetServiceInstanceResponse, error) {
	response := &services.GetServiceInstanceResponse{}
	_, err := h.Read(ctx, "/service-instance/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListServiceInstance(ctx context.Context, request *services.ListServiceInstanceRequest) (*services.ListServiceInstanceResponse, error) {
	response := &services.ListServiceInstanceResponse{}
	_, err := h.ReadWithQuery(ctx, "/service-instances", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateServiceInstanceInstanceIPRef(
	ctx context.Context, request *services.CreateServiceInstanceInstanceIPRefRequest,
) (*services.CreateServiceInstanceInstanceIPRefResponse, error) {
	data := getRefUpdateFromRequestServiceInstanceInstanceIPRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceInstanceInstanceIPRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceInstanceInstanceIPRef(
	ctx context.Context, request *services.DeleteServiceInstanceInstanceIPRefRequest,
) (*services.DeleteServiceInstanceInstanceIPRefResponse, error) {
	data := getRefUpdateFromRequestServiceInstanceInstanceIPRef((*services.CreateServiceInstanceInstanceIPRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceInstanceInstanceIPRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceInstanceInstanceIPRef(request *services.CreateServiceInstanceInstanceIPRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceInstanceInstanceIPRef()

	data := struct {
		services.RefUpdate

		Attr *models.ServiceInterfaceTag `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-instance",
			UUID:      id,
			RefType:   "instance-ip",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateServiceInstanceServiceTemplateRef(
	ctx context.Context, request *services.CreateServiceInstanceServiceTemplateRefRequest,
) (*services.CreateServiceInstanceServiceTemplateRefResponse, error) {
	data := getRefUpdateFromRequestServiceInstanceServiceTemplateRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceInstanceServiceTemplateRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceInstanceServiceTemplateRef(
	ctx context.Context, request *services.DeleteServiceInstanceServiceTemplateRefRequest,
) (*services.DeleteServiceInstanceServiceTemplateRefResponse, error) {
	data := getRefUpdateFromRequestServiceInstanceServiceTemplateRef((*services.CreateServiceInstanceServiceTemplateRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceInstanceServiceTemplateRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceInstanceServiceTemplateRef(request *services.CreateServiceInstanceServiceTemplateRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceInstanceServiceTemplateRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-instance",
			UUID:      id,
			RefType:   "service-template",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceInstanceTagRef(
	ctx context.Context, request *services.CreateServiceInstanceTagRefRequest,
) (*services.CreateServiceInstanceTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceInstanceTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceInstanceTagRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceInstanceTagRef(
	ctx context.Context, request *services.DeleteServiceInstanceTagRefRequest,
) (*services.DeleteServiceInstanceTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceInstanceTagRef((*services.CreateServiceInstanceTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceInstanceTagRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceInstanceTagRef(request *services.CreateServiceInstanceTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceInstanceTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-instance",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceObject(ctx context.Context, request *services.CreateServiceObjectRequest) (*services.CreateServiceObjectResponse, error) {
	response := &services.CreateServiceObjectResponse{}
	_, err := h.Create(ctx, "/service-objects", request, response)
	return response, err
}

func (h *HTTP) UpdateServiceObject(ctx context.Context, request *services.UpdateServiceObjectRequest) (*services.UpdateServiceObjectResponse, error) {
	response := &services.UpdateServiceObjectResponse{}
	_, err := h.Update(ctx, "/service-object/"+request.ServiceObject.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteServiceObject(ctx context.Context, request *services.DeleteServiceObjectRequest) (*services.DeleteServiceObjectResponse, error) {
	response := &services.DeleteServiceObjectResponse{}
	_, err := h.Delete(ctx, "/service-object/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetServiceObject(ctx context.Context, request *services.GetServiceObjectRequest) (*services.GetServiceObjectResponse, error) {
	response := &services.GetServiceObjectResponse{}
	_, err := h.Read(ctx, "/service-object/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListServiceObject(ctx context.Context, request *services.ListServiceObjectRequest) (*services.ListServiceObjectResponse, error) {
	response := &services.ListServiceObjectResponse{}
	_, err := h.ReadWithQuery(ctx, "/service-objects", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateServiceObjectTagRef(
	ctx context.Context, request *services.CreateServiceObjectTagRefRequest,
) (*services.CreateServiceObjectTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceObjectTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceObjectTagRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceObjectTagRef(
	ctx context.Context, request *services.DeleteServiceObjectTagRefRequest,
) (*services.DeleteServiceObjectTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceObjectTagRef((*services.CreateServiceObjectTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceObjectTagRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceObjectTagRef(request *services.CreateServiceObjectTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceObjectTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-object",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceTemplate(ctx context.Context, request *services.CreateServiceTemplateRequest) (*services.CreateServiceTemplateResponse, error) {
	response := &services.CreateServiceTemplateResponse{}
	_, err := h.Create(ctx, "/service-templates", request, response)
	return response, err
}

func (h *HTTP) UpdateServiceTemplate(ctx context.Context, request *services.UpdateServiceTemplateRequest) (*services.UpdateServiceTemplateResponse, error) {
	response := &services.UpdateServiceTemplateResponse{}
	_, err := h.Update(ctx, "/service-template/"+request.ServiceTemplate.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteServiceTemplate(ctx context.Context, request *services.DeleteServiceTemplateRequest) (*services.DeleteServiceTemplateResponse, error) {
	response := &services.DeleteServiceTemplateResponse{}
	_, err := h.Delete(ctx, "/service-template/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetServiceTemplate(ctx context.Context, request *services.GetServiceTemplateRequest) (*services.GetServiceTemplateResponse, error) {
	response := &services.GetServiceTemplateResponse{}
	_, err := h.Read(ctx, "/service-template/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListServiceTemplate(ctx context.Context, request *services.ListServiceTemplateRequest) (*services.ListServiceTemplateResponse, error) {
	response := &services.ListServiceTemplateResponse{}
	_, err := h.ReadWithQuery(ctx, "/service-templates", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateServiceTemplateServiceApplianceSetRef(
	ctx context.Context, request *services.CreateServiceTemplateServiceApplianceSetRefRequest,
) (*services.CreateServiceTemplateServiceApplianceSetRefResponse, error) {
	data := getRefUpdateFromRequestServiceTemplateServiceApplianceSetRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceTemplateServiceApplianceSetRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceTemplateServiceApplianceSetRef(
	ctx context.Context, request *services.DeleteServiceTemplateServiceApplianceSetRefRequest,
) (*services.DeleteServiceTemplateServiceApplianceSetRefResponse, error) {
	data := getRefUpdateFromRequestServiceTemplateServiceApplianceSetRef((*services.CreateServiceTemplateServiceApplianceSetRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceTemplateServiceApplianceSetRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceTemplateServiceApplianceSetRef(request *services.CreateServiceTemplateServiceApplianceSetRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceTemplateServiceApplianceSetRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-template",
			UUID:      id,
			RefType:   "service-appliance-set",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateServiceTemplateTagRef(
	ctx context.Context, request *services.CreateServiceTemplateTagRefRequest,
) (*services.CreateServiceTemplateTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceTemplateTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateServiceTemplateTagRefResponse)(request), nil
}

func (h *HTTP) DeleteServiceTemplateTagRef(
	ctx context.Context, request *services.DeleteServiceTemplateTagRefRequest,
) (*services.DeleteServiceTemplateTagRefResponse, error) {
	data := getRefUpdateFromRequestServiceTemplateTagRef((*services.CreateServiceTemplateTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteServiceTemplateTagRefResponse)(request), nil
}

func getRefUpdateFromRequestServiceTemplateTagRef(request *services.CreateServiceTemplateTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetServiceTemplateTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "service-template",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateSflowProfile(ctx context.Context, request *services.CreateSflowProfileRequest) (*services.CreateSflowProfileResponse, error) {
	response := &services.CreateSflowProfileResponse{}
	_, err := h.Create(ctx, "/sflow-profiles", request, response)
	return response, err
}

func (h *HTTP) UpdateSflowProfile(ctx context.Context, request *services.UpdateSflowProfileRequest) (*services.UpdateSflowProfileResponse, error) {
	response := &services.UpdateSflowProfileResponse{}
	_, err := h.Update(ctx, "/sflow-profile/"+request.SflowProfile.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteSflowProfile(ctx context.Context, request *services.DeleteSflowProfileRequest) (*services.DeleteSflowProfileResponse, error) {
	response := &services.DeleteSflowProfileResponse{}
	_, err := h.Delete(ctx, "/sflow-profile/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetSflowProfile(ctx context.Context, request *services.GetSflowProfileRequest) (*services.GetSflowProfileResponse, error) {
	response := &services.GetSflowProfileResponse{}
	_, err := h.Read(ctx, "/sflow-profile/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListSflowProfile(ctx context.Context, request *services.ListSflowProfileRequest) (*services.ListSflowProfileResponse, error) {
	response := &services.ListSflowProfileResponse{}
	_, err := h.ReadWithQuery(ctx, "/sflow-profiles", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateSflowProfileTagRef(
	ctx context.Context, request *services.CreateSflowProfileTagRefRequest,
) (*services.CreateSflowProfileTagRefResponse, error) {
	data := getRefUpdateFromRequestSflowProfileTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateSflowProfileTagRefResponse)(request), nil
}

func (h *HTTP) DeleteSflowProfileTagRef(
	ctx context.Context, request *services.DeleteSflowProfileTagRefRequest,
) (*services.DeleteSflowProfileTagRefResponse, error) {
	data := getRefUpdateFromRequestSflowProfileTagRef((*services.CreateSflowProfileTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteSflowProfileTagRefResponse)(request), nil
}

func getRefUpdateFromRequestSflowProfileTagRef(request *services.CreateSflowProfileTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetSflowProfileTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "sflow-profile",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateStormControlProfile(ctx context.Context, request *services.CreateStormControlProfileRequest) (*services.CreateStormControlProfileResponse, error) {
	response := &services.CreateStormControlProfileResponse{}
	_, err := h.Create(ctx, "/storm-control-profiles", request, response)
	return response, err
}

func (h *HTTP) UpdateStormControlProfile(ctx context.Context, request *services.UpdateStormControlProfileRequest) (*services.UpdateStormControlProfileResponse, error) {
	response := &services.UpdateStormControlProfileResponse{}
	_, err := h.Update(ctx, "/storm-control-profile/"+request.StormControlProfile.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteStormControlProfile(ctx context.Context, request *services.DeleteStormControlProfileRequest) (*services.DeleteStormControlProfileResponse, error) {
	response := &services.DeleteStormControlProfileResponse{}
	_, err := h.Delete(ctx, "/storm-control-profile/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetStormControlProfile(ctx context.Context, request *services.GetStormControlProfileRequest) (*services.GetStormControlProfileResponse, error) {
	response := &services.GetStormControlProfileResponse{}
	_, err := h.Read(ctx, "/storm-control-profile/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListStormControlProfile(ctx context.Context, request *services.ListStormControlProfileRequest) (*services.ListStormControlProfileResponse, error) {
	response := &services.ListStormControlProfileResponse{}
	_, err := h.ReadWithQuery(ctx, "/storm-control-profiles", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateStormControlProfileTagRef(
	ctx context.Context, request *services.CreateStormControlProfileTagRefRequest,
) (*services.CreateStormControlProfileTagRefResponse, error) {
	data := getRefUpdateFromRequestStormControlProfileTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateStormControlProfileTagRefResponse)(request), nil
}

func (h *HTTP) DeleteStormControlProfileTagRef(
	ctx context.Context, request *services.DeleteStormControlProfileTagRefRequest,
) (*services.DeleteStormControlProfileTagRefResponse, error) {
	data := getRefUpdateFromRequestStormControlProfileTagRef((*services.CreateStormControlProfileTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteStormControlProfileTagRefResponse)(request), nil
}

func getRefUpdateFromRequestStormControlProfileTagRef(request *services.CreateStormControlProfileTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetStormControlProfileTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "storm-control-profile",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateStructuredSyslogApplicationRecord(ctx context.Context, request *services.CreateStructuredSyslogApplicationRecordRequest) (*services.CreateStructuredSyslogApplicationRecordResponse, error) {
	response := &services.CreateStructuredSyslogApplicationRecordResponse{}
	_, err := h.Create(ctx, "/structured-syslog-application-records", request, response)
	return response, err
}

func (h *HTTP) UpdateStructuredSyslogApplicationRecord(ctx context.Context, request *services.UpdateStructuredSyslogApplicationRecordRequest) (*services.UpdateStructuredSyslogApplicationRecordResponse, error) {
	response := &services.UpdateStructuredSyslogApplicationRecordResponse{}
	_, err := h.Update(ctx, "/structured-syslog-application-record/"+request.StructuredSyslogApplicationRecord.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteStructuredSyslogApplicationRecord(ctx context.Context, request *services.DeleteStructuredSyslogApplicationRecordRequest) (*services.DeleteStructuredSyslogApplicationRecordResponse, error) {
	response := &services.DeleteStructuredSyslogApplicationRecordResponse{}
	_, err := h.Delete(ctx, "/structured-syslog-application-record/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetStructuredSyslogApplicationRecord(ctx context.Context, request *services.GetStructuredSyslogApplicationRecordRequest) (*services.GetStructuredSyslogApplicationRecordResponse, error) {
	response := &services.GetStructuredSyslogApplicationRecordResponse{}
	_, err := h.Read(ctx, "/structured-syslog-application-record/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListStructuredSyslogApplicationRecord(ctx context.Context, request *services.ListStructuredSyslogApplicationRecordRequest) (*services.ListStructuredSyslogApplicationRecordResponse, error) {
	response := &services.ListStructuredSyslogApplicationRecordResponse{}
	_, err := h.ReadWithQuery(ctx, "/structured-syslog-application-records", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateStructuredSyslogApplicationRecordTagRef(
	ctx context.Context, request *services.CreateStructuredSyslogApplicationRecordTagRefRequest,
) (*services.CreateStructuredSyslogApplicationRecordTagRefResponse, error) {
	data := getRefUpdateFromRequestStructuredSyslogApplicationRecordTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateStructuredSyslogApplicationRecordTagRefResponse)(request), nil
}

func (h *HTTP) DeleteStructuredSyslogApplicationRecordTagRef(
	ctx context.Context, request *services.DeleteStructuredSyslogApplicationRecordTagRefRequest,
) (*services.DeleteStructuredSyslogApplicationRecordTagRefResponse, error) {
	data := getRefUpdateFromRequestStructuredSyslogApplicationRecordTagRef((*services.CreateStructuredSyslogApplicationRecordTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteStructuredSyslogApplicationRecordTagRefResponse)(request), nil
}

func getRefUpdateFromRequestStructuredSyslogApplicationRecordTagRef(request *services.CreateStructuredSyslogApplicationRecordTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetStructuredSyslogApplicationRecordTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "structured-syslog-application-record",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateStructuredSyslogConfig(ctx context.Context, request *services.CreateStructuredSyslogConfigRequest) (*services.CreateStructuredSyslogConfigResponse, error) {
	response := &services.CreateStructuredSyslogConfigResponse{}
	_, err := h.Create(ctx, "/structured-syslog-configs", request, response)
	return response, err
}

func (h *HTTP) UpdateStructuredSyslogConfig(ctx context.Context, request *services.UpdateStructuredSyslogConfigRequest) (*services.UpdateStructuredSyslogConfigResponse, error) {
	response := &services.UpdateStructuredSyslogConfigResponse{}
	_, err := h.Update(ctx, "/structured-syslog-config/"+request.StructuredSyslogConfig.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteStructuredSyslogConfig(ctx context.Context, request *services.DeleteStructuredSyslogConfigRequest) (*services.DeleteStructuredSyslogConfigResponse, error) {
	response := &services.DeleteStructuredSyslogConfigResponse{}
	_, err := h.Delete(ctx, "/structured-syslog-config/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetStructuredSyslogConfig(ctx context.Context, request *services.GetStructuredSyslogConfigRequest) (*services.GetStructuredSyslogConfigResponse, error) {
	response := &services.GetStructuredSyslogConfigResponse{}
	_, err := h.Read(ctx, "/structured-syslog-config/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListStructuredSyslogConfig(ctx context.Context, request *services.ListStructuredSyslogConfigRequest) (*services.ListStructuredSyslogConfigResponse, error) {
	response := &services.ListStructuredSyslogConfigResponse{}
	_, err := h.ReadWithQuery(ctx, "/structured-syslog-configs", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateStructuredSyslogConfigTagRef(
	ctx context.Context, request *services.CreateStructuredSyslogConfigTagRefRequest,
) (*services.CreateStructuredSyslogConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestStructuredSyslogConfigTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateStructuredSyslogConfigTagRefResponse)(request), nil
}

func (h *HTTP) DeleteStructuredSyslogConfigTagRef(
	ctx context.Context, request *services.DeleteStructuredSyslogConfigTagRefRequest,
) (*services.DeleteStructuredSyslogConfigTagRefResponse, error) {
	data := getRefUpdateFromRequestStructuredSyslogConfigTagRef((*services.CreateStructuredSyslogConfigTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteStructuredSyslogConfigTagRefResponse)(request), nil
}

func getRefUpdateFromRequestStructuredSyslogConfigTagRef(request *services.CreateStructuredSyslogConfigTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetStructuredSyslogConfigTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "structured-syslog-config",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateStructuredSyslogHostnameRecord(ctx context.Context, request *services.CreateStructuredSyslogHostnameRecordRequest) (*services.CreateStructuredSyslogHostnameRecordResponse, error) {
	response := &services.CreateStructuredSyslogHostnameRecordResponse{}
	_, err := h.Create(ctx, "/structured-syslog-hostname-records", request, response)
	return response, err
}

func (h *HTTP) UpdateStructuredSyslogHostnameRecord(ctx context.Context, request *services.UpdateStructuredSyslogHostnameRecordRequest) (*services.UpdateStructuredSyslogHostnameRecordResponse, error) {
	response := &services.UpdateStructuredSyslogHostnameRecordResponse{}
	_, err := h.Update(ctx, "/structured-syslog-hostname-record/"+request.StructuredSyslogHostnameRecord.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteStructuredSyslogHostnameRecord(ctx context.Context, request *services.DeleteStructuredSyslogHostnameRecordRequest) (*services.DeleteStructuredSyslogHostnameRecordResponse, error) {
	response := &services.DeleteStructuredSyslogHostnameRecordResponse{}
	_, err := h.Delete(ctx, "/structured-syslog-hostname-record/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetStructuredSyslogHostnameRecord(ctx context.Context, request *services.GetStructuredSyslogHostnameRecordRequest) (*services.GetStructuredSyslogHostnameRecordResponse, error) {
	response := &services.GetStructuredSyslogHostnameRecordResponse{}
	_, err := h.Read(ctx, "/structured-syslog-hostname-record/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListStructuredSyslogHostnameRecord(ctx context.Context, request *services.ListStructuredSyslogHostnameRecordRequest) (*services.ListStructuredSyslogHostnameRecordResponse, error) {
	response := &services.ListStructuredSyslogHostnameRecordResponse{}
	_, err := h.ReadWithQuery(ctx, "/structured-syslog-hostname-records", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateStructuredSyslogHostnameRecordTagRef(
	ctx context.Context, request *services.CreateStructuredSyslogHostnameRecordTagRefRequest,
) (*services.CreateStructuredSyslogHostnameRecordTagRefResponse, error) {
	data := getRefUpdateFromRequestStructuredSyslogHostnameRecordTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateStructuredSyslogHostnameRecordTagRefResponse)(request), nil
}

func (h *HTTP) DeleteStructuredSyslogHostnameRecordTagRef(
	ctx context.Context, request *services.DeleteStructuredSyslogHostnameRecordTagRefRequest,
) (*services.DeleteStructuredSyslogHostnameRecordTagRefResponse, error) {
	data := getRefUpdateFromRequestStructuredSyslogHostnameRecordTagRef((*services.CreateStructuredSyslogHostnameRecordTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteStructuredSyslogHostnameRecordTagRefResponse)(request), nil
}

func getRefUpdateFromRequestStructuredSyslogHostnameRecordTagRef(request *services.CreateStructuredSyslogHostnameRecordTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetStructuredSyslogHostnameRecordTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "structured-syslog-hostname-record",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateStructuredSyslogMessage(ctx context.Context, request *services.CreateStructuredSyslogMessageRequest) (*services.CreateStructuredSyslogMessageResponse, error) {
	response := &services.CreateStructuredSyslogMessageResponse{}
	_, err := h.Create(ctx, "/structured-syslog-messages", request, response)
	return response, err
}

func (h *HTTP) UpdateStructuredSyslogMessage(ctx context.Context, request *services.UpdateStructuredSyslogMessageRequest) (*services.UpdateStructuredSyslogMessageResponse, error) {
	response := &services.UpdateStructuredSyslogMessageResponse{}
	_, err := h.Update(ctx, "/structured-syslog-message/"+request.StructuredSyslogMessage.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteStructuredSyslogMessage(ctx context.Context, request *services.DeleteStructuredSyslogMessageRequest) (*services.DeleteStructuredSyslogMessageResponse, error) {
	response := &services.DeleteStructuredSyslogMessageResponse{}
	_, err := h.Delete(ctx, "/structured-syslog-message/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetStructuredSyslogMessage(ctx context.Context, request *services.GetStructuredSyslogMessageRequest) (*services.GetStructuredSyslogMessageResponse, error) {
	response := &services.GetStructuredSyslogMessageResponse{}
	_, err := h.Read(ctx, "/structured-syslog-message/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListStructuredSyslogMessage(ctx context.Context, request *services.ListStructuredSyslogMessageRequest) (*services.ListStructuredSyslogMessageResponse, error) {
	response := &services.ListStructuredSyslogMessageResponse{}
	_, err := h.ReadWithQuery(ctx, "/structured-syslog-messages", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateStructuredSyslogMessageTagRef(
	ctx context.Context, request *services.CreateStructuredSyslogMessageTagRefRequest,
) (*services.CreateStructuredSyslogMessageTagRefResponse, error) {
	data := getRefUpdateFromRequestStructuredSyslogMessageTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateStructuredSyslogMessageTagRefResponse)(request), nil
}

func (h *HTTP) DeleteStructuredSyslogMessageTagRef(
	ctx context.Context, request *services.DeleteStructuredSyslogMessageTagRefRequest,
) (*services.DeleteStructuredSyslogMessageTagRefResponse, error) {
	data := getRefUpdateFromRequestStructuredSyslogMessageTagRef((*services.CreateStructuredSyslogMessageTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteStructuredSyslogMessageTagRefResponse)(request), nil
}

func getRefUpdateFromRequestStructuredSyslogMessageTagRef(request *services.CreateStructuredSyslogMessageTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetStructuredSyslogMessageTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "structured-syslog-message",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateStructuredSyslogSLAProfile(ctx context.Context, request *services.CreateStructuredSyslogSLAProfileRequest) (*services.CreateStructuredSyslogSLAProfileResponse, error) {
	response := &services.CreateStructuredSyslogSLAProfileResponse{}
	_, err := h.Create(ctx, "/structured-syslog-sla-profiles", request, response)
	return response, err
}

func (h *HTTP) UpdateStructuredSyslogSLAProfile(ctx context.Context, request *services.UpdateStructuredSyslogSLAProfileRequest) (*services.UpdateStructuredSyslogSLAProfileResponse, error) {
	response := &services.UpdateStructuredSyslogSLAProfileResponse{}
	_, err := h.Update(ctx, "/structured-syslog-sla-profile/"+request.StructuredSyslogSLAProfile.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteStructuredSyslogSLAProfile(ctx context.Context, request *services.DeleteStructuredSyslogSLAProfileRequest) (*services.DeleteStructuredSyslogSLAProfileResponse, error) {
	response := &services.DeleteStructuredSyslogSLAProfileResponse{}
	_, err := h.Delete(ctx, "/structured-syslog-sla-profile/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetStructuredSyslogSLAProfile(ctx context.Context, request *services.GetStructuredSyslogSLAProfileRequest) (*services.GetStructuredSyslogSLAProfileResponse, error) {
	response := &services.GetStructuredSyslogSLAProfileResponse{}
	_, err := h.Read(ctx, "/structured-syslog-sla-profile/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListStructuredSyslogSLAProfile(ctx context.Context, request *services.ListStructuredSyslogSLAProfileRequest) (*services.ListStructuredSyslogSLAProfileResponse, error) {
	response := &services.ListStructuredSyslogSLAProfileResponse{}
	_, err := h.ReadWithQuery(ctx, "/structured-syslog-sla-profiles", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateStructuredSyslogSLAProfileTagRef(
	ctx context.Context, request *services.CreateStructuredSyslogSLAProfileTagRefRequest,
) (*services.CreateStructuredSyslogSLAProfileTagRefResponse, error) {
	data := getRefUpdateFromRequestStructuredSyslogSLAProfileTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateStructuredSyslogSLAProfileTagRefResponse)(request), nil
}

func (h *HTTP) DeleteStructuredSyslogSLAProfileTagRef(
	ctx context.Context, request *services.DeleteStructuredSyslogSLAProfileTagRefRequest,
) (*services.DeleteStructuredSyslogSLAProfileTagRefResponse, error) {
	data := getRefUpdateFromRequestStructuredSyslogSLAProfileTagRef((*services.CreateStructuredSyslogSLAProfileTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteStructuredSyslogSLAProfileTagRefResponse)(request), nil
}

func getRefUpdateFromRequestStructuredSyslogSLAProfileTagRef(request *services.CreateStructuredSyslogSLAProfileTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetStructuredSyslogSLAProfileTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "structured-syslog-sla-profile",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateSubCluster(ctx context.Context, request *services.CreateSubClusterRequest) (*services.CreateSubClusterResponse, error) {
	response := &services.CreateSubClusterResponse{}
	_, err := h.Create(ctx, "/sub-clusters", request, response)
	return response, err
}

func (h *HTTP) UpdateSubCluster(ctx context.Context, request *services.UpdateSubClusterRequest) (*services.UpdateSubClusterResponse, error) {
	response := &services.UpdateSubClusterResponse{}
	_, err := h.Update(ctx, "/sub-cluster/"+request.SubCluster.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteSubCluster(ctx context.Context, request *services.DeleteSubClusterRequest) (*services.DeleteSubClusterResponse, error) {
	response := &services.DeleteSubClusterResponse{}
	_, err := h.Delete(ctx, "/sub-cluster/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetSubCluster(ctx context.Context, request *services.GetSubClusterRequest) (*services.GetSubClusterResponse, error) {
	response := &services.GetSubClusterResponse{}
	_, err := h.Read(ctx, "/sub-cluster/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListSubCluster(ctx context.Context, request *services.ListSubClusterRequest) (*services.ListSubClusterResponse, error) {
	response := &services.ListSubClusterResponse{}
	_, err := h.ReadWithQuery(ctx, "/sub-clusters", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateSubClusterTagRef(
	ctx context.Context, request *services.CreateSubClusterTagRefRequest,
) (*services.CreateSubClusterTagRefResponse, error) {
	data := getRefUpdateFromRequestSubClusterTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateSubClusterTagRefResponse)(request), nil
}

func (h *HTTP) DeleteSubClusterTagRef(
	ctx context.Context, request *services.DeleteSubClusterTagRefRequest,
) (*services.DeleteSubClusterTagRefResponse, error) {
	data := getRefUpdateFromRequestSubClusterTagRef((*services.CreateSubClusterTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteSubClusterTagRefResponse)(request), nil
}

func getRefUpdateFromRequestSubClusterTagRef(request *services.CreateSubClusterTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetSubClusterTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "sub-cluster",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateSubnet(ctx context.Context, request *services.CreateSubnetRequest) (*services.CreateSubnetResponse, error) {
	response := &services.CreateSubnetResponse{}
	_, err := h.Create(ctx, "/subnets", request, response)
	return response, err
}

func (h *HTTP) UpdateSubnet(ctx context.Context, request *services.UpdateSubnetRequest) (*services.UpdateSubnetResponse, error) {
	response := &services.UpdateSubnetResponse{}
	_, err := h.Update(ctx, "/subnet/"+request.Subnet.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteSubnet(ctx context.Context, request *services.DeleteSubnetRequest) (*services.DeleteSubnetResponse, error) {
	response := &services.DeleteSubnetResponse{}
	_, err := h.Delete(ctx, "/subnet/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetSubnet(ctx context.Context, request *services.GetSubnetRequest) (*services.GetSubnetResponse, error) {
	response := &services.GetSubnetResponse{}
	_, err := h.Read(ctx, "/subnet/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListSubnet(ctx context.Context, request *services.ListSubnetRequest) (*services.ListSubnetResponse, error) {
	response := &services.ListSubnetResponse{}
	_, err := h.ReadWithQuery(ctx, "/subnets", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateSubnetTagRef(
	ctx context.Context, request *services.CreateSubnetTagRefRequest,
) (*services.CreateSubnetTagRefResponse, error) {
	data := getRefUpdateFromRequestSubnetTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateSubnetTagRefResponse)(request), nil
}

func (h *HTTP) DeleteSubnetTagRef(
	ctx context.Context, request *services.DeleteSubnetTagRefRequest,
) (*services.DeleteSubnetTagRefResponse, error) {
	data := getRefUpdateFromRequestSubnetTagRef((*services.CreateSubnetTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteSubnetTagRefResponse)(request), nil
}

func getRefUpdateFromRequestSubnetTagRef(request *services.CreateSubnetTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetSubnetTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "subnet",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateSubnetVirtualMachineInterfaceRef(
	ctx context.Context, request *services.CreateSubnetVirtualMachineInterfaceRefRequest,
) (*services.CreateSubnetVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestSubnetVirtualMachineInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateSubnetVirtualMachineInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteSubnetVirtualMachineInterfaceRef(
	ctx context.Context, request *services.DeleteSubnetVirtualMachineInterfaceRefRequest,
) (*services.DeleteSubnetVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestSubnetVirtualMachineInterfaceRef((*services.CreateSubnetVirtualMachineInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteSubnetVirtualMachineInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestSubnetVirtualMachineInterfaceRef(request *services.CreateSubnetVirtualMachineInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetSubnetVirtualMachineInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "subnet",
			UUID:      id,
			RefType:   "virtual-machine-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateTag(ctx context.Context, request *services.CreateTagRequest) (*services.CreateTagResponse, error) {
	response := &services.CreateTagResponse{}
	_, err := h.Create(ctx, "/tags", request, response)
	return response, err
}

func (h *HTTP) UpdateTag(ctx context.Context, request *services.UpdateTagRequest) (*services.UpdateTagResponse, error) {
	response := &services.UpdateTagResponse{}
	_, err := h.Update(ctx, "/tag/"+request.Tag.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteTag(ctx context.Context, request *services.DeleteTagRequest) (*services.DeleteTagResponse, error) {
	response := &services.DeleteTagResponse{}
	_, err := h.Delete(ctx, "/tag/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetTag(ctx context.Context, request *services.GetTagRequest) (*services.GetTagResponse, error) {
	response := &services.GetTagResponse{}
	_, err := h.Read(ctx, "/tag/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListTag(ctx context.Context, request *services.ListTagRequest) (*services.ListTagResponse, error) {
	response := &services.ListTagResponse{}
	_, err := h.ReadWithQuery(ctx, "/tags", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateTagTagRef(
	ctx context.Context, request *services.CreateTagTagRefRequest,
) (*services.CreateTagTagRefResponse, error) {
	data := getRefUpdateFromRequestTagTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateTagTagRefResponse)(request), nil
}

func (h *HTTP) DeleteTagTagRef(
	ctx context.Context, request *services.DeleteTagTagRefRequest,
) (*services.DeleteTagTagRefResponse, error) {
	data := getRefUpdateFromRequestTagTagRef((*services.CreateTagTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteTagTagRefResponse)(request), nil
}

func getRefUpdateFromRequestTagTagRef(request *services.CreateTagTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetTagTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "tag",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateTagTagTypeRef(
	ctx context.Context, request *services.CreateTagTagTypeRefRequest,
) (*services.CreateTagTagTypeRefResponse, error) {
	data := getRefUpdateFromRequestTagTagTypeRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateTagTagTypeRefResponse)(request), nil
}

func (h *HTTP) DeleteTagTagTypeRef(
	ctx context.Context, request *services.DeleteTagTagTypeRefRequest,
) (*services.DeleteTagTagTypeRefResponse, error) {
	data := getRefUpdateFromRequestTagTagTypeRef((*services.CreateTagTagTypeRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteTagTagTypeRefResponse)(request), nil
}

func getRefUpdateFromRequestTagTagTypeRef(request *services.CreateTagTagTypeRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetTagTagTypeRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "tag",
			UUID:      id,
			RefType:   "tag-type",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateTagType(ctx context.Context, request *services.CreateTagTypeRequest) (*services.CreateTagTypeResponse, error) {
	response := &services.CreateTagTypeResponse{}
	_, err := h.Create(ctx, "/tag-types", request, response)
	return response, err
}

func (h *HTTP) UpdateTagType(ctx context.Context, request *services.UpdateTagTypeRequest) (*services.UpdateTagTypeResponse, error) {
	response := &services.UpdateTagTypeResponse{}
	_, err := h.Update(ctx, "/tag-type/"+request.TagType.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteTagType(ctx context.Context, request *services.DeleteTagTypeRequest) (*services.DeleteTagTypeResponse, error) {
	response := &services.DeleteTagTypeResponse{}
	_, err := h.Delete(ctx, "/tag-type/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetTagType(ctx context.Context, request *services.GetTagTypeRequest) (*services.GetTagTypeResponse, error) {
	response := &services.GetTagTypeResponse{}
	_, err := h.Read(ctx, "/tag-type/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListTagType(ctx context.Context, request *services.ListTagTypeRequest) (*services.ListTagTypeResponse, error) {
	response := &services.ListTagTypeResponse{}
	_, err := h.ReadWithQuery(ctx, "/tag-types", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateTagTypeTagRef(
	ctx context.Context, request *services.CreateTagTypeTagRefRequest,
) (*services.CreateTagTypeTagRefResponse, error) {
	data := getRefUpdateFromRequestTagTypeTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateTagTypeTagRefResponse)(request), nil
}

func (h *HTTP) DeleteTagTypeTagRef(
	ctx context.Context, request *services.DeleteTagTypeTagRefRequest,
) (*services.DeleteTagTypeTagRefResponse, error) {
	data := getRefUpdateFromRequestTagTypeTagRef((*services.CreateTagTypeTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteTagTypeTagRefResponse)(request), nil
}

func getRefUpdateFromRequestTagTypeTagRef(request *services.CreateTagTypeTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetTagTypeTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "tag-type",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateTelemetryProfile(ctx context.Context, request *services.CreateTelemetryProfileRequest) (*services.CreateTelemetryProfileResponse, error) {
	response := &services.CreateTelemetryProfileResponse{}
	_, err := h.Create(ctx, "/telemetry-profiles", request, response)
	return response, err
}

func (h *HTTP) UpdateTelemetryProfile(ctx context.Context, request *services.UpdateTelemetryProfileRequest) (*services.UpdateTelemetryProfileResponse, error) {
	response := &services.UpdateTelemetryProfileResponse{}
	_, err := h.Update(ctx, "/telemetry-profile/"+request.TelemetryProfile.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteTelemetryProfile(ctx context.Context, request *services.DeleteTelemetryProfileRequest) (*services.DeleteTelemetryProfileResponse, error) {
	response := &services.DeleteTelemetryProfileResponse{}
	_, err := h.Delete(ctx, "/telemetry-profile/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetTelemetryProfile(ctx context.Context, request *services.GetTelemetryProfileRequest) (*services.GetTelemetryProfileResponse, error) {
	response := &services.GetTelemetryProfileResponse{}
	_, err := h.Read(ctx, "/telemetry-profile/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListTelemetryProfile(ctx context.Context, request *services.ListTelemetryProfileRequest) (*services.ListTelemetryProfileResponse, error) {
	response := &services.ListTelemetryProfileResponse{}
	_, err := h.ReadWithQuery(ctx, "/telemetry-profiles", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateTelemetryProfileSflowProfileRef(
	ctx context.Context, request *services.CreateTelemetryProfileSflowProfileRefRequest,
) (*services.CreateTelemetryProfileSflowProfileRefResponse, error) {
	data := getRefUpdateFromRequestTelemetryProfileSflowProfileRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateTelemetryProfileSflowProfileRefResponse)(request), nil
}

func (h *HTTP) DeleteTelemetryProfileSflowProfileRef(
	ctx context.Context, request *services.DeleteTelemetryProfileSflowProfileRefRequest,
) (*services.DeleteTelemetryProfileSflowProfileRefResponse, error) {
	data := getRefUpdateFromRequestTelemetryProfileSflowProfileRef((*services.CreateTelemetryProfileSflowProfileRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteTelemetryProfileSflowProfileRefResponse)(request), nil
}

func getRefUpdateFromRequestTelemetryProfileSflowProfileRef(request *services.CreateTelemetryProfileSflowProfileRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetTelemetryProfileSflowProfileRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "telemetry-profile",
			UUID:      id,
			RefType:   "sflow-profile",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateTelemetryProfileTagRef(
	ctx context.Context, request *services.CreateTelemetryProfileTagRefRequest,
) (*services.CreateTelemetryProfileTagRefResponse, error) {
	data := getRefUpdateFromRequestTelemetryProfileTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateTelemetryProfileTagRefResponse)(request), nil
}

func (h *HTTP) DeleteTelemetryProfileTagRef(
	ctx context.Context, request *services.DeleteTelemetryProfileTagRefRequest,
) (*services.DeleteTelemetryProfileTagRefResponse, error) {
	data := getRefUpdateFromRequestTelemetryProfileTagRef((*services.CreateTelemetryProfileTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteTelemetryProfileTagRefResponse)(request), nil
}

func getRefUpdateFromRequestTelemetryProfileTagRef(request *services.CreateTelemetryProfileTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetTelemetryProfileTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "telemetry-profile",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualDNSRecord(ctx context.Context, request *services.CreateVirtualDNSRecordRequest) (*services.CreateVirtualDNSRecordResponse, error) {
	response := &services.CreateVirtualDNSRecordResponse{}
	_, err := h.Create(ctx, "/virtual-DNS-records", request, response)
	return response, err
}

func (h *HTTP) UpdateVirtualDNSRecord(ctx context.Context, request *services.UpdateVirtualDNSRecordRequest) (*services.UpdateVirtualDNSRecordResponse, error) {
	response := &services.UpdateVirtualDNSRecordResponse{}
	_, err := h.Update(ctx, "/virtual-DNS-record/"+request.VirtualDNSRecord.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteVirtualDNSRecord(ctx context.Context, request *services.DeleteVirtualDNSRecordRequest) (*services.DeleteVirtualDNSRecordResponse, error) {
	response := &services.DeleteVirtualDNSRecordResponse{}
	_, err := h.Delete(ctx, "/virtual-DNS-record/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetVirtualDNSRecord(ctx context.Context, request *services.GetVirtualDNSRecordRequest) (*services.GetVirtualDNSRecordResponse, error) {
	response := &services.GetVirtualDNSRecordResponse{}
	_, err := h.Read(ctx, "/virtual-DNS-record/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListVirtualDNSRecord(ctx context.Context, request *services.ListVirtualDNSRecordRequest) (*services.ListVirtualDNSRecordResponse, error) {
	response := &services.ListVirtualDNSRecordResponse{}
	_, err := h.ReadWithQuery(ctx, "/virtual-DNS-records", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateVirtualDNSRecordTagRef(
	ctx context.Context, request *services.CreateVirtualDNSRecordTagRefRequest,
) (*services.CreateVirtualDNSRecordTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualDNSRecordTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualDNSRecordTagRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualDNSRecordTagRef(
	ctx context.Context, request *services.DeleteVirtualDNSRecordTagRefRequest,
) (*services.DeleteVirtualDNSRecordTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualDNSRecordTagRef((*services.CreateVirtualDNSRecordTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualDNSRecordTagRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualDNSRecordTagRef(request *services.CreateVirtualDNSRecordTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualDNSRecordTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-DNS-record",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualDNS(ctx context.Context, request *services.CreateVirtualDNSRequest) (*services.CreateVirtualDNSResponse, error) {
	response := &services.CreateVirtualDNSResponse{}
	_, err := h.Create(ctx, "/virtual-DNSs", request, response)
	return response, err
}

func (h *HTTP) UpdateVirtualDNS(ctx context.Context, request *services.UpdateVirtualDNSRequest) (*services.UpdateVirtualDNSResponse, error) {
	response := &services.UpdateVirtualDNSResponse{}
	_, err := h.Update(ctx, "/virtual-DNS/"+request.VirtualDNS.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteVirtualDNS(ctx context.Context, request *services.DeleteVirtualDNSRequest) (*services.DeleteVirtualDNSResponse, error) {
	response := &services.DeleteVirtualDNSResponse{}
	_, err := h.Delete(ctx, "/virtual-DNS/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetVirtualDNS(ctx context.Context, request *services.GetVirtualDNSRequest) (*services.GetVirtualDNSResponse, error) {
	response := &services.GetVirtualDNSResponse{}
	_, err := h.Read(ctx, "/virtual-DNS/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListVirtualDNS(ctx context.Context, request *services.ListVirtualDNSRequest) (*services.ListVirtualDNSResponse, error) {
	response := &services.ListVirtualDNSResponse{}
	_, err := h.ReadWithQuery(ctx, "/virtual-DNSs", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateVirtualDNSTagRef(
	ctx context.Context, request *services.CreateVirtualDNSTagRefRequest,
) (*services.CreateVirtualDNSTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualDNSTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualDNSTagRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualDNSTagRef(
	ctx context.Context, request *services.DeleteVirtualDNSTagRefRequest,
) (*services.DeleteVirtualDNSTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualDNSTagRef((*services.CreateVirtualDNSTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualDNSTagRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualDNSTagRef(request *services.CreateVirtualDNSTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualDNSTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-DNS",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualIP(ctx context.Context, request *services.CreateVirtualIPRequest) (*services.CreateVirtualIPResponse, error) {
	response := &services.CreateVirtualIPResponse{}
	_, err := h.Create(ctx, "/virtual-ips", request, response)
	return response, err
}

func (h *HTTP) UpdateVirtualIP(ctx context.Context, request *services.UpdateVirtualIPRequest) (*services.UpdateVirtualIPResponse, error) {
	response := &services.UpdateVirtualIPResponse{}
	_, err := h.Update(ctx, "/virtual-ip/"+request.VirtualIP.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteVirtualIP(ctx context.Context, request *services.DeleteVirtualIPRequest) (*services.DeleteVirtualIPResponse, error) {
	response := &services.DeleteVirtualIPResponse{}
	_, err := h.Delete(ctx, "/virtual-ip/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetVirtualIP(ctx context.Context, request *services.GetVirtualIPRequest) (*services.GetVirtualIPResponse, error) {
	response := &services.GetVirtualIPResponse{}
	_, err := h.Read(ctx, "/virtual-ip/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListVirtualIP(ctx context.Context, request *services.ListVirtualIPRequest) (*services.ListVirtualIPResponse, error) {
	response := &services.ListVirtualIPResponse{}
	_, err := h.ReadWithQuery(ctx, "/virtual-ips", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateVirtualIPLoadbalancerPoolRef(
	ctx context.Context, request *services.CreateVirtualIPLoadbalancerPoolRefRequest,
) (*services.CreateVirtualIPLoadbalancerPoolRefResponse, error) {
	data := getRefUpdateFromRequestVirtualIPLoadbalancerPoolRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualIPLoadbalancerPoolRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualIPLoadbalancerPoolRef(
	ctx context.Context, request *services.DeleteVirtualIPLoadbalancerPoolRefRequest,
) (*services.DeleteVirtualIPLoadbalancerPoolRefResponse, error) {
	data := getRefUpdateFromRequestVirtualIPLoadbalancerPoolRef((*services.CreateVirtualIPLoadbalancerPoolRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualIPLoadbalancerPoolRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualIPLoadbalancerPoolRef(request *services.CreateVirtualIPLoadbalancerPoolRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualIPLoadbalancerPoolRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-ip",
			UUID:      id,
			RefType:   "loadbalancer-pool",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualIPTagRef(
	ctx context.Context, request *services.CreateVirtualIPTagRefRequest,
) (*services.CreateVirtualIPTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualIPTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualIPTagRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualIPTagRef(
	ctx context.Context, request *services.DeleteVirtualIPTagRefRequest,
) (*services.DeleteVirtualIPTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualIPTagRef((*services.CreateVirtualIPTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualIPTagRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualIPTagRef(request *services.CreateVirtualIPTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualIPTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-ip",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualIPVirtualMachineInterfaceRef(
	ctx context.Context, request *services.CreateVirtualIPVirtualMachineInterfaceRefRequest,
) (*services.CreateVirtualIPVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestVirtualIPVirtualMachineInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualIPVirtualMachineInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualIPVirtualMachineInterfaceRef(
	ctx context.Context, request *services.DeleteVirtualIPVirtualMachineInterfaceRefRequest,
) (*services.DeleteVirtualIPVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestVirtualIPVirtualMachineInterfaceRef((*services.CreateVirtualIPVirtualMachineInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualIPVirtualMachineInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualIPVirtualMachineInterfaceRef(request *services.CreateVirtualIPVirtualMachineInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualIPVirtualMachineInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-ip",
			UUID:      id,
			RefType:   "virtual-machine-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterface(ctx context.Context, request *services.CreateVirtualMachineInterfaceRequest) (*services.CreateVirtualMachineInterfaceResponse, error) {
	response := &services.CreateVirtualMachineInterfaceResponse{}
	_, err := h.Create(ctx, "/virtual-machine-interfaces", request, response)
	return response, err
}

func (h *HTTP) UpdateVirtualMachineInterface(ctx context.Context, request *services.UpdateVirtualMachineInterfaceRequest) (*services.UpdateVirtualMachineInterfaceResponse, error) {
	response := &services.UpdateVirtualMachineInterfaceResponse{}
	_, err := h.Update(ctx, "/virtual-machine-interface/"+request.VirtualMachineInterface.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteVirtualMachineInterface(ctx context.Context, request *services.DeleteVirtualMachineInterfaceRequest) (*services.DeleteVirtualMachineInterfaceResponse, error) {
	response := &services.DeleteVirtualMachineInterfaceResponse{}
	_, err := h.Delete(ctx, "/virtual-machine-interface/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetVirtualMachineInterface(ctx context.Context, request *services.GetVirtualMachineInterfaceRequest) (*services.GetVirtualMachineInterfaceResponse, error) {
	response := &services.GetVirtualMachineInterfaceResponse{}
	_, err := h.Read(ctx, "/virtual-machine-interface/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListVirtualMachineInterface(ctx context.Context, request *services.ListVirtualMachineInterfaceRequest) (*services.ListVirtualMachineInterfaceResponse, error) {
	response := &services.ListVirtualMachineInterfaceResponse{}
	_, err := h.ReadWithQuery(ctx, "/virtual-machine-interfaces", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateVirtualMachineInterfaceBGPRouterRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfaceBGPRouterRefRequest,
) (*services.CreateVirtualMachineInterfaceBGPRouterRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceBGPRouterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfaceBGPRouterRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfaceBGPRouterRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfaceBGPRouterRefRequest,
) (*services.DeleteVirtualMachineInterfaceBGPRouterRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceBGPRouterRef((*services.CreateVirtualMachineInterfaceBGPRouterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfaceBGPRouterRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfaceBGPRouterRef(request *services.CreateVirtualMachineInterfaceBGPRouterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfaceBGPRouterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "bgp-router",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfaceBridgeDomainRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfaceBridgeDomainRefRequest,
) (*services.CreateVirtualMachineInterfaceBridgeDomainRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceBridgeDomainRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfaceBridgeDomainRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfaceBridgeDomainRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfaceBridgeDomainRefRequest,
) (*services.DeleteVirtualMachineInterfaceBridgeDomainRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceBridgeDomainRef((*services.CreateVirtualMachineInterfaceBridgeDomainRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfaceBridgeDomainRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfaceBridgeDomainRef(request *services.CreateVirtualMachineInterfaceBridgeDomainRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfaceBridgeDomainRef()

	data := struct {
		services.RefUpdate

		Attr *models.BridgeDomainMembershipType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "bridge-domain",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfaceInterfaceRouteTableRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfaceInterfaceRouteTableRefRequest,
) (*services.CreateVirtualMachineInterfaceInterfaceRouteTableRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceInterfaceRouteTableRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfaceInterfaceRouteTableRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfaceInterfaceRouteTableRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfaceInterfaceRouteTableRefRequest,
) (*services.DeleteVirtualMachineInterfaceInterfaceRouteTableRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceInterfaceRouteTableRef((*services.CreateVirtualMachineInterfaceInterfaceRouteTableRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfaceInterfaceRouteTableRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfaceInterfaceRouteTableRef(request *services.CreateVirtualMachineInterfaceInterfaceRouteTableRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfaceInterfaceRouteTableRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "interface-route-table",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfacePhysicalInterfaceRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfacePhysicalInterfaceRefRequest,
) (*services.CreateVirtualMachineInterfacePhysicalInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfacePhysicalInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfacePhysicalInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfacePhysicalInterfaceRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfacePhysicalInterfaceRefRequest,
) (*services.DeleteVirtualMachineInterfacePhysicalInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfacePhysicalInterfaceRef((*services.CreateVirtualMachineInterfacePhysicalInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfacePhysicalInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfacePhysicalInterfaceRef(request *services.CreateVirtualMachineInterfacePhysicalInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfacePhysicalInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "physical-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfacePortProfileRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfacePortProfileRefRequest,
) (*services.CreateVirtualMachineInterfacePortProfileRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfacePortProfileRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfacePortProfileRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfacePortProfileRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfacePortProfileRefRequest,
) (*services.DeleteVirtualMachineInterfacePortProfileRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfacePortProfileRef((*services.CreateVirtualMachineInterfacePortProfileRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfacePortProfileRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfacePortProfileRef(request *services.CreateVirtualMachineInterfacePortProfileRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfacePortProfileRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "port-profile",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfacePortTupleRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfacePortTupleRefRequest,
) (*services.CreateVirtualMachineInterfacePortTupleRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfacePortTupleRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfacePortTupleRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfacePortTupleRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfacePortTupleRefRequest,
) (*services.DeleteVirtualMachineInterfacePortTupleRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfacePortTupleRef((*services.CreateVirtualMachineInterfacePortTupleRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfacePortTupleRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfacePortTupleRef(request *services.CreateVirtualMachineInterfacePortTupleRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfacePortTupleRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "port-tuple",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfaceQosConfigRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfaceQosConfigRefRequest,
) (*services.CreateVirtualMachineInterfaceQosConfigRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceQosConfigRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfaceQosConfigRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfaceQosConfigRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfaceQosConfigRefRequest,
) (*services.DeleteVirtualMachineInterfaceQosConfigRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceQosConfigRef((*services.CreateVirtualMachineInterfaceQosConfigRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfaceQosConfigRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfaceQosConfigRef(request *services.CreateVirtualMachineInterfaceQosConfigRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfaceQosConfigRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "qos-config",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfaceRoutingInstanceRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfaceRoutingInstanceRefRequest,
) (*services.CreateVirtualMachineInterfaceRoutingInstanceRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceRoutingInstanceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfaceRoutingInstanceRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfaceRoutingInstanceRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfaceRoutingInstanceRefRequest,
) (*services.DeleteVirtualMachineInterfaceRoutingInstanceRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceRoutingInstanceRef((*services.CreateVirtualMachineInterfaceRoutingInstanceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfaceRoutingInstanceRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfaceRoutingInstanceRef(request *services.CreateVirtualMachineInterfaceRoutingInstanceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfaceRoutingInstanceRef()

	data := struct {
		services.RefUpdate

		Attr *models.PolicyBasedForwardingRuleType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "routing-instance",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfaceSecurityGroupRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfaceSecurityGroupRefRequest,
) (*services.CreateVirtualMachineInterfaceSecurityGroupRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceSecurityGroupRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfaceSecurityGroupRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfaceSecurityGroupRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfaceSecurityGroupRefRequest,
) (*services.DeleteVirtualMachineInterfaceSecurityGroupRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceSecurityGroupRef((*services.CreateVirtualMachineInterfaceSecurityGroupRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfaceSecurityGroupRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfaceSecurityGroupRef(request *services.CreateVirtualMachineInterfaceSecurityGroupRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfaceSecurityGroupRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "security-group",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfaceSecurityLoggingObjectRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfaceSecurityLoggingObjectRefRequest,
) (*services.CreateVirtualMachineInterfaceSecurityLoggingObjectRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceSecurityLoggingObjectRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfaceSecurityLoggingObjectRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfaceSecurityLoggingObjectRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfaceSecurityLoggingObjectRefRequest,
) (*services.DeleteVirtualMachineInterfaceSecurityLoggingObjectRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceSecurityLoggingObjectRef((*services.CreateVirtualMachineInterfaceSecurityLoggingObjectRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfaceSecurityLoggingObjectRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfaceSecurityLoggingObjectRef(request *services.CreateVirtualMachineInterfaceSecurityLoggingObjectRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfaceSecurityLoggingObjectRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "security-logging-object",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfaceServiceEndpointRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfaceServiceEndpointRefRequest,
) (*services.CreateVirtualMachineInterfaceServiceEndpointRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceServiceEndpointRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfaceServiceEndpointRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfaceServiceEndpointRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfaceServiceEndpointRefRequest,
) (*services.DeleteVirtualMachineInterfaceServiceEndpointRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceServiceEndpointRef((*services.CreateVirtualMachineInterfaceServiceEndpointRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfaceServiceEndpointRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfaceServiceEndpointRef(request *services.CreateVirtualMachineInterfaceServiceEndpointRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfaceServiceEndpointRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "service-endpoint",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfaceServiceHealthCheckRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfaceServiceHealthCheckRefRequest,
) (*services.CreateVirtualMachineInterfaceServiceHealthCheckRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceServiceHealthCheckRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfaceServiceHealthCheckRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfaceServiceHealthCheckRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfaceServiceHealthCheckRefRequest,
) (*services.DeleteVirtualMachineInterfaceServiceHealthCheckRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceServiceHealthCheckRef((*services.CreateVirtualMachineInterfaceServiceHealthCheckRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfaceServiceHealthCheckRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfaceServiceHealthCheckRef(request *services.CreateVirtualMachineInterfaceServiceHealthCheckRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfaceServiceHealthCheckRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "service-health-check",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfaceTagRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfaceTagRefRequest,
) (*services.CreateVirtualMachineInterfaceTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfaceTagRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfaceTagRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfaceTagRefRequest,
) (*services.DeleteVirtualMachineInterfaceTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceTagRef((*services.CreateVirtualMachineInterfaceTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfaceTagRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfaceTagRef(request *services.CreateVirtualMachineInterfaceTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfaceTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfaceVirtualMachineRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfaceVirtualMachineRefRequest,
) (*services.CreateVirtualMachineInterfaceVirtualMachineRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceVirtualMachineRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfaceVirtualMachineRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfaceVirtualMachineRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfaceVirtualMachineRefRequest,
) (*services.DeleteVirtualMachineInterfaceVirtualMachineRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceVirtualMachineRef((*services.CreateVirtualMachineInterfaceVirtualMachineRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfaceVirtualMachineRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfaceVirtualMachineRef(request *services.CreateVirtualMachineInterfaceVirtualMachineRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfaceVirtualMachineRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "virtual-machine",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfaceVirtualMachineInterfaceRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfaceVirtualMachineInterfaceRefRequest,
) (*services.CreateVirtualMachineInterfaceVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceVirtualMachineInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfaceVirtualMachineInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfaceVirtualMachineInterfaceRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefRequest,
) (*services.DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceVirtualMachineInterfaceRef((*services.CreateVirtualMachineInterfaceVirtualMachineInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfaceVirtualMachineInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfaceVirtualMachineInterfaceRef(request *services.CreateVirtualMachineInterfaceVirtualMachineInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfaceVirtualMachineInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "virtual-machine-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineInterfaceVirtualNetworkRef(
	ctx context.Context, request *services.CreateVirtualMachineInterfaceVirtualNetworkRefRequest,
) (*services.CreateVirtualMachineInterfaceVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceVirtualNetworkRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineInterfaceVirtualNetworkRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineInterfaceVirtualNetworkRef(
	ctx context.Context, request *services.DeleteVirtualMachineInterfaceVirtualNetworkRefRequest,
) (*services.DeleteVirtualMachineInterfaceVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineInterfaceVirtualNetworkRef((*services.CreateVirtualMachineInterfaceVirtualNetworkRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineInterfaceVirtualNetworkRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineInterfaceVirtualNetworkRef(request *services.CreateVirtualMachineInterfaceVirtualNetworkRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineInterfaceVirtualNetworkRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine-interface",
			UUID:      id,
			RefType:   "virtual-network",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachine(ctx context.Context, request *services.CreateVirtualMachineRequest) (*services.CreateVirtualMachineResponse, error) {
	response := &services.CreateVirtualMachineResponse{}
	_, err := h.Create(ctx, "/virtual-machines", request, response)
	return response, err
}

func (h *HTTP) UpdateVirtualMachine(ctx context.Context, request *services.UpdateVirtualMachineRequest) (*services.UpdateVirtualMachineResponse, error) {
	response := &services.UpdateVirtualMachineResponse{}
	_, err := h.Update(ctx, "/virtual-machine/"+request.VirtualMachine.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteVirtualMachine(ctx context.Context, request *services.DeleteVirtualMachineRequest) (*services.DeleteVirtualMachineResponse, error) {
	response := &services.DeleteVirtualMachineResponse{}
	_, err := h.Delete(ctx, "/virtual-machine/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetVirtualMachine(ctx context.Context, request *services.GetVirtualMachineRequest) (*services.GetVirtualMachineResponse, error) {
	response := &services.GetVirtualMachineResponse{}
	_, err := h.Read(ctx, "/virtual-machine/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListVirtualMachine(ctx context.Context, request *services.ListVirtualMachineRequest) (*services.ListVirtualMachineResponse, error) {
	response := &services.ListVirtualMachineResponse{}
	_, err := h.ReadWithQuery(ctx, "/virtual-machines", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateVirtualMachineServiceInstanceRef(
	ctx context.Context, request *services.CreateVirtualMachineServiceInstanceRefRequest,
) (*services.CreateVirtualMachineServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineServiceInstanceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineServiceInstanceRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineServiceInstanceRef(
	ctx context.Context, request *services.DeleteVirtualMachineServiceInstanceRefRequest,
) (*services.DeleteVirtualMachineServiceInstanceRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineServiceInstanceRef((*services.CreateVirtualMachineServiceInstanceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineServiceInstanceRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineServiceInstanceRef(request *services.CreateVirtualMachineServiceInstanceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineServiceInstanceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine",
			UUID:      id,
			RefType:   "service-instance",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualMachineTagRef(
	ctx context.Context, request *services.CreateVirtualMachineTagRefRequest,
) (*services.CreateVirtualMachineTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualMachineTagRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualMachineTagRef(
	ctx context.Context, request *services.DeleteVirtualMachineTagRefRequest,
) (*services.DeleteVirtualMachineTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualMachineTagRef((*services.CreateVirtualMachineTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualMachineTagRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualMachineTagRef(request *services.CreateVirtualMachineTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualMachineTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-machine",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualNetwork(ctx context.Context, request *services.CreateVirtualNetworkRequest) (*services.CreateVirtualNetworkResponse, error) {
	response := &services.CreateVirtualNetworkResponse{}
	_, err := h.Create(ctx, "/virtual-networks", request, response)
	return response, err
}

func (h *HTTP) UpdateVirtualNetwork(ctx context.Context, request *services.UpdateVirtualNetworkRequest) (*services.UpdateVirtualNetworkResponse, error) {
	response := &services.UpdateVirtualNetworkResponse{}
	_, err := h.Update(ctx, "/virtual-network/"+request.VirtualNetwork.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteVirtualNetwork(ctx context.Context, request *services.DeleteVirtualNetworkRequest) (*services.DeleteVirtualNetworkResponse, error) {
	response := &services.DeleteVirtualNetworkResponse{}
	_, err := h.Delete(ctx, "/virtual-network/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetVirtualNetwork(ctx context.Context, request *services.GetVirtualNetworkRequest) (*services.GetVirtualNetworkResponse, error) {
	response := &services.GetVirtualNetworkResponse{}
	_, err := h.Read(ctx, "/virtual-network/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListVirtualNetwork(ctx context.Context, request *services.ListVirtualNetworkRequest) (*services.ListVirtualNetworkResponse, error) {
	response := &services.ListVirtualNetworkResponse{}
	_, err := h.ReadWithQuery(ctx, "/virtual-networks", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateVirtualNetworkBGPVPNRef(
	ctx context.Context, request *services.CreateVirtualNetworkBGPVPNRefRequest,
) (*services.CreateVirtualNetworkBGPVPNRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkBGPVPNRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualNetworkBGPVPNRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualNetworkBGPVPNRef(
	ctx context.Context, request *services.DeleteVirtualNetworkBGPVPNRefRequest,
) (*services.DeleteVirtualNetworkBGPVPNRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkBGPVPNRef((*services.CreateVirtualNetworkBGPVPNRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualNetworkBGPVPNRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualNetworkBGPVPNRef(request *services.CreateVirtualNetworkBGPVPNRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualNetworkBGPVPNRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-network",
			UUID:      id,
			RefType:   "bgpvpn",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualNetworkIntentMapRef(
	ctx context.Context, request *services.CreateVirtualNetworkIntentMapRefRequest,
) (*services.CreateVirtualNetworkIntentMapRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkIntentMapRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualNetworkIntentMapRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualNetworkIntentMapRef(
	ctx context.Context, request *services.DeleteVirtualNetworkIntentMapRefRequest,
) (*services.DeleteVirtualNetworkIntentMapRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkIntentMapRef((*services.CreateVirtualNetworkIntentMapRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualNetworkIntentMapRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualNetworkIntentMapRef(request *services.CreateVirtualNetworkIntentMapRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualNetworkIntentMapRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-network",
			UUID:      id,
			RefType:   "intent-map",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualNetworkMulticastPolicyRef(
	ctx context.Context, request *services.CreateVirtualNetworkMulticastPolicyRefRequest,
) (*services.CreateVirtualNetworkMulticastPolicyRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkMulticastPolicyRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualNetworkMulticastPolicyRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualNetworkMulticastPolicyRef(
	ctx context.Context, request *services.DeleteVirtualNetworkMulticastPolicyRefRequest,
) (*services.DeleteVirtualNetworkMulticastPolicyRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkMulticastPolicyRef((*services.CreateVirtualNetworkMulticastPolicyRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualNetworkMulticastPolicyRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualNetworkMulticastPolicyRef(request *services.CreateVirtualNetworkMulticastPolicyRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualNetworkMulticastPolicyRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-network",
			UUID:      id,
			RefType:   "multicast-policy",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualNetworkNetworkIpamRef(
	ctx context.Context, request *services.CreateVirtualNetworkNetworkIpamRefRequest,
) (*services.CreateVirtualNetworkNetworkIpamRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkNetworkIpamRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualNetworkNetworkIpamRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualNetworkNetworkIpamRef(
	ctx context.Context, request *services.DeleteVirtualNetworkNetworkIpamRefRequest,
) (*services.DeleteVirtualNetworkNetworkIpamRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkNetworkIpamRef((*services.CreateVirtualNetworkNetworkIpamRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualNetworkNetworkIpamRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualNetworkNetworkIpamRef(request *services.CreateVirtualNetworkNetworkIpamRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualNetworkNetworkIpamRef()

	data := struct {
		services.RefUpdate

		Attr *models.VnSubnetsType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-network",
			UUID:      id,
			RefType:   "network-ipam",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateVirtualNetworkNetworkPolicyRef(
	ctx context.Context, request *services.CreateVirtualNetworkNetworkPolicyRefRequest,
) (*services.CreateVirtualNetworkNetworkPolicyRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkNetworkPolicyRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualNetworkNetworkPolicyRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualNetworkNetworkPolicyRef(
	ctx context.Context, request *services.DeleteVirtualNetworkNetworkPolicyRefRequest,
) (*services.DeleteVirtualNetworkNetworkPolicyRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkNetworkPolicyRef((*services.CreateVirtualNetworkNetworkPolicyRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualNetworkNetworkPolicyRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualNetworkNetworkPolicyRef(request *services.CreateVirtualNetworkNetworkPolicyRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualNetworkNetworkPolicyRef()

	data := struct {
		services.RefUpdate

		Attr *models.VirtualNetworkPolicyType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-network",
			UUID:      id,
			RefType:   "network-policy",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateVirtualNetworkQosConfigRef(
	ctx context.Context, request *services.CreateVirtualNetworkQosConfigRefRequest,
) (*services.CreateVirtualNetworkQosConfigRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkQosConfigRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualNetworkQosConfigRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualNetworkQosConfigRef(
	ctx context.Context, request *services.DeleteVirtualNetworkQosConfigRefRequest,
) (*services.DeleteVirtualNetworkQosConfigRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkQosConfigRef((*services.CreateVirtualNetworkQosConfigRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualNetworkQosConfigRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualNetworkQosConfigRef(request *services.CreateVirtualNetworkQosConfigRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualNetworkQosConfigRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-network",
			UUID:      id,
			RefType:   "qos-config",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualNetworkRouteTableRef(
	ctx context.Context, request *services.CreateVirtualNetworkRouteTableRefRequest,
) (*services.CreateVirtualNetworkRouteTableRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkRouteTableRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualNetworkRouteTableRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualNetworkRouteTableRef(
	ctx context.Context, request *services.DeleteVirtualNetworkRouteTableRefRequest,
) (*services.DeleteVirtualNetworkRouteTableRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkRouteTableRef((*services.CreateVirtualNetworkRouteTableRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualNetworkRouteTableRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualNetworkRouteTableRef(request *services.CreateVirtualNetworkRouteTableRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualNetworkRouteTableRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-network",
			UUID:      id,
			RefType:   "route-table",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualNetworkRoutingPolicyRef(
	ctx context.Context, request *services.CreateVirtualNetworkRoutingPolicyRefRequest,
) (*services.CreateVirtualNetworkRoutingPolicyRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkRoutingPolicyRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualNetworkRoutingPolicyRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualNetworkRoutingPolicyRef(
	ctx context.Context, request *services.DeleteVirtualNetworkRoutingPolicyRefRequest,
) (*services.DeleteVirtualNetworkRoutingPolicyRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkRoutingPolicyRef((*services.CreateVirtualNetworkRoutingPolicyRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualNetworkRoutingPolicyRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualNetworkRoutingPolicyRef(request *services.CreateVirtualNetworkRoutingPolicyRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualNetworkRoutingPolicyRef()

	data := struct {
		services.RefUpdate

		Attr *models.RoutingPolicyType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-network",
			UUID:      id,
			RefType:   "routing-policy",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateVirtualNetworkSecurityLoggingObjectRef(
	ctx context.Context, request *services.CreateVirtualNetworkSecurityLoggingObjectRefRequest,
) (*services.CreateVirtualNetworkSecurityLoggingObjectRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkSecurityLoggingObjectRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualNetworkSecurityLoggingObjectRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualNetworkSecurityLoggingObjectRef(
	ctx context.Context, request *services.DeleteVirtualNetworkSecurityLoggingObjectRefRequest,
) (*services.DeleteVirtualNetworkSecurityLoggingObjectRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkSecurityLoggingObjectRef((*services.CreateVirtualNetworkSecurityLoggingObjectRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualNetworkSecurityLoggingObjectRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualNetworkSecurityLoggingObjectRef(request *services.CreateVirtualNetworkSecurityLoggingObjectRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualNetworkSecurityLoggingObjectRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-network",
			UUID:      id,
			RefType:   "security-logging-object",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualNetworkTagRef(
	ctx context.Context, request *services.CreateVirtualNetworkTagRefRequest,
) (*services.CreateVirtualNetworkTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualNetworkTagRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualNetworkTagRef(
	ctx context.Context, request *services.DeleteVirtualNetworkTagRefRequest,
) (*services.DeleteVirtualNetworkTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkTagRef((*services.CreateVirtualNetworkTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualNetworkTagRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualNetworkTagRef(request *services.CreateVirtualNetworkTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualNetworkTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-network",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualNetworkVirtualNetworkRef(
	ctx context.Context, request *services.CreateVirtualNetworkVirtualNetworkRefRequest,
) (*services.CreateVirtualNetworkVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkVirtualNetworkRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualNetworkVirtualNetworkRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualNetworkVirtualNetworkRef(
	ctx context.Context, request *services.DeleteVirtualNetworkVirtualNetworkRefRequest,
) (*services.DeleteVirtualNetworkVirtualNetworkRefResponse, error) {
	data := getRefUpdateFromRequestVirtualNetworkVirtualNetworkRef((*services.CreateVirtualNetworkVirtualNetworkRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualNetworkVirtualNetworkRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualNetworkVirtualNetworkRef(request *services.CreateVirtualNetworkVirtualNetworkRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualNetworkVirtualNetworkRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-network",
			UUID:      id,
			RefType:   "virtual-network",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualPortGroup(ctx context.Context, request *services.CreateVirtualPortGroupRequest) (*services.CreateVirtualPortGroupResponse, error) {
	response := &services.CreateVirtualPortGroupResponse{}
	_, err := h.Create(ctx, "/virtual-port-groups", request, response)
	return response, err
}

func (h *HTTP) UpdateVirtualPortGroup(ctx context.Context, request *services.UpdateVirtualPortGroupRequest) (*services.UpdateVirtualPortGroupResponse, error) {
	response := &services.UpdateVirtualPortGroupResponse{}
	_, err := h.Update(ctx, "/virtual-port-group/"+request.VirtualPortGroup.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteVirtualPortGroup(ctx context.Context, request *services.DeleteVirtualPortGroupRequest) (*services.DeleteVirtualPortGroupResponse, error) {
	response := &services.DeleteVirtualPortGroupResponse{}
	_, err := h.Delete(ctx, "/virtual-port-group/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetVirtualPortGroup(ctx context.Context, request *services.GetVirtualPortGroupRequest) (*services.GetVirtualPortGroupResponse, error) {
	response := &services.GetVirtualPortGroupResponse{}
	_, err := h.Read(ctx, "/virtual-port-group/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListVirtualPortGroup(ctx context.Context, request *services.ListVirtualPortGroupRequest) (*services.ListVirtualPortGroupResponse, error) {
	response := &services.ListVirtualPortGroupResponse{}
	_, err := h.ReadWithQuery(ctx, "/virtual-port-groups", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateVirtualPortGroupPhysicalInterfaceRef(
	ctx context.Context, request *services.CreateVirtualPortGroupPhysicalInterfaceRefRequest,
) (*services.CreateVirtualPortGroupPhysicalInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestVirtualPortGroupPhysicalInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualPortGroupPhysicalInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualPortGroupPhysicalInterfaceRef(
	ctx context.Context, request *services.DeleteVirtualPortGroupPhysicalInterfaceRefRequest,
) (*services.DeleteVirtualPortGroupPhysicalInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestVirtualPortGroupPhysicalInterfaceRef((*services.CreateVirtualPortGroupPhysicalInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualPortGroupPhysicalInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualPortGroupPhysicalInterfaceRef(request *services.CreateVirtualPortGroupPhysicalInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualPortGroupPhysicalInterfaceRef()

	data := struct {
		services.RefUpdate

		Attr *models.VpgInterfaceParametersType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-port-group",
			UUID:      id,
			RefType:   "physical-interface",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateVirtualPortGroupPortProfileRef(
	ctx context.Context, request *services.CreateVirtualPortGroupPortProfileRefRequest,
) (*services.CreateVirtualPortGroupPortProfileRefResponse, error) {
	data := getRefUpdateFromRequestVirtualPortGroupPortProfileRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualPortGroupPortProfileRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualPortGroupPortProfileRef(
	ctx context.Context, request *services.DeleteVirtualPortGroupPortProfileRefRequest,
) (*services.DeleteVirtualPortGroupPortProfileRefResponse, error) {
	data := getRefUpdateFromRequestVirtualPortGroupPortProfileRef((*services.CreateVirtualPortGroupPortProfileRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualPortGroupPortProfileRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualPortGroupPortProfileRef(request *services.CreateVirtualPortGroupPortProfileRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualPortGroupPortProfileRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-port-group",
			UUID:      id,
			RefType:   "port-profile",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualPortGroupSecurityGroupRef(
	ctx context.Context, request *services.CreateVirtualPortGroupSecurityGroupRefRequest,
) (*services.CreateVirtualPortGroupSecurityGroupRefResponse, error) {
	data := getRefUpdateFromRequestVirtualPortGroupSecurityGroupRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualPortGroupSecurityGroupRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualPortGroupSecurityGroupRef(
	ctx context.Context, request *services.DeleteVirtualPortGroupSecurityGroupRefRequest,
) (*services.DeleteVirtualPortGroupSecurityGroupRefResponse, error) {
	data := getRefUpdateFromRequestVirtualPortGroupSecurityGroupRef((*services.CreateVirtualPortGroupSecurityGroupRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualPortGroupSecurityGroupRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualPortGroupSecurityGroupRef(request *services.CreateVirtualPortGroupSecurityGroupRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualPortGroupSecurityGroupRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-port-group",
			UUID:      id,
			RefType:   "security-group",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualPortGroupTagRef(
	ctx context.Context, request *services.CreateVirtualPortGroupTagRefRequest,
) (*services.CreateVirtualPortGroupTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualPortGroupTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualPortGroupTagRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualPortGroupTagRef(
	ctx context.Context, request *services.DeleteVirtualPortGroupTagRefRequest,
) (*services.DeleteVirtualPortGroupTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualPortGroupTagRef((*services.CreateVirtualPortGroupTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualPortGroupTagRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualPortGroupTagRef(request *services.CreateVirtualPortGroupTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualPortGroupTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-port-group",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualPortGroupVirtualMachineInterfaceRef(
	ctx context.Context, request *services.CreateVirtualPortGroupVirtualMachineInterfaceRefRequest,
) (*services.CreateVirtualPortGroupVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestVirtualPortGroupVirtualMachineInterfaceRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualPortGroupVirtualMachineInterfaceRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualPortGroupVirtualMachineInterfaceRef(
	ctx context.Context, request *services.DeleteVirtualPortGroupVirtualMachineInterfaceRefRequest,
) (*services.DeleteVirtualPortGroupVirtualMachineInterfaceRefResponse, error) {
	data := getRefUpdateFromRequestVirtualPortGroupVirtualMachineInterfaceRef((*services.CreateVirtualPortGroupVirtualMachineInterfaceRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualPortGroupVirtualMachineInterfaceRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualPortGroupVirtualMachineInterfaceRef(request *services.CreateVirtualPortGroupVirtualMachineInterfaceRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualPortGroupVirtualMachineInterfaceRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-port-group",
			UUID:      id,
			RefType:   "virtual-machine-interface",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualRouter(ctx context.Context, request *services.CreateVirtualRouterRequest) (*services.CreateVirtualRouterResponse, error) {
	response := &services.CreateVirtualRouterResponse{}
	_, err := h.Create(ctx, "/virtual-routers", request, response)
	return response, err
}

func (h *HTTP) UpdateVirtualRouter(ctx context.Context, request *services.UpdateVirtualRouterRequest) (*services.UpdateVirtualRouterResponse, error) {
	response := &services.UpdateVirtualRouterResponse{}
	_, err := h.Update(ctx, "/virtual-router/"+request.VirtualRouter.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteVirtualRouter(ctx context.Context, request *services.DeleteVirtualRouterRequest) (*services.DeleteVirtualRouterResponse, error) {
	response := &services.DeleteVirtualRouterResponse{}
	_, err := h.Delete(ctx, "/virtual-router/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetVirtualRouter(ctx context.Context, request *services.GetVirtualRouterRequest) (*services.GetVirtualRouterResponse, error) {
	response := &services.GetVirtualRouterResponse{}
	_, err := h.Read(ctx, "/virtual-router/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListVirtualRouter(ctx context.Context, request *services.ListVirtualRouterRequest) (*services.ListVirtualRouterResponse, error) {
	response := &services.ListVirtualRouterResponse{}
	_, err := h.ReadWithQuery(ctx, "/virtual-routers", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateVirtualRouterNetworkIpamRef(
	ctx context.Context, request *services.CreateVirtualRouterNetworkIpamRefRequest,
) (*services.CreateVirtualRouterNetworkIpamRefResponse, error) {
	data := getRefUpdateFromRequestVirtualRouterNetworkIpamRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualRouterNetworkIpamRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualRouterNetworkIpamRef(
	ctx context.Context, request *services.DeleteVirtualRouterNetworkIpamRefRequest,
) (*services.DeleteVirtualRouterNetworkIpamRefResponse, error) {
	data := getRefUpdateFromRequestVirtualRouterNetworkIpamRef((*services.CreateVirtualRouterNetworkIpamRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualRouterNetworkIpamRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualRouterNetworkIpamRef(request *services.CreateVirtualRouterNetworkIpamRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualRouterNetworkIpamRef()

	data := struct {
		services.RefUpdate

		Attr *models.VirtualRouterNetworkIpamType `json:"attr"`
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-router",
			UUID:      id,
			RefType:   "network-ipam",
			RefUUID:   reference.GetUUID(),
		},

		reference.GetAttr(),
	}
	return data
}

func (h *HTTP) CreateVirtualRouterSubClusterRef(
	ctx context.Context, request *services.CreateVirtualRouterSubClusterRefRequest,
) (*services.CreateVirtualRouterSubClusterRefResponse, error) {
	data := getRefUpdateFromRequestVirtualRouterSubClusterRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualRouterSubClusterRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualRouterSubClusterRef(
	ctx context.Context, request *services.DeleteVirtualRouterSubClusterRefRequest,
) (*services.DeleteVirtualRouterSubClusterRefResponse, error) {
	data := getRefUpdateFromRequestVirtualRouterSubClusterRef((*services.CreateVirtualRouterSubClusterRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualRouterSubClusterRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualRouterSubClusterRef(request *services.CreateVirtualRouterSubClusterRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualRouterSubClusterRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-router",
			UUID:      id,
			RefType:   "sub-cluster",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualRouterTagRef(
	ctx context.Context, request *services.CreateVirtualRouterTagRefRequest,
) (*services.CreateVirtualRouterTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualRouterTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualRouterTagRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualRouterTagRef(
	ctx context.Context, request *services.DeleteVirtualRouterTagRefRequest,
) (*services.DeleteVirtualRouterTagRefResponse, error) {
	data := getRefUpdateFromRequestVirtualRouterTagRef((*services.CreateVirtualRouterTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualRouterTagRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualRouterTagRef(request *services.CreateVirtualRouterTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualRouterTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-router",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateVirtualRouterVirtualMachineRef(
	ctx context.Context, request *services.CreateVirtualRouterVirtualMachineRefRequest,
) (*services.CreateVirtualRouterVirtualMachineRefResponse, error) {
	data := getRefUpdateFromRequestVirtualRouterVirtualMachineRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateVirtualRouterVirtualMachineRefResponse)(request), nil
}

func (h *HTTP) DeleteVirtualRouterVirtualMachineRef(
	ctx context.Context, request *services.DeleteVirtualRouterVirtualMachineRefRequest,
) (*services.DeleteVirtualRouterVirtualMachineRefResponse, error) {
	data := getRefUpdateFromRequestVirtualRouterVirtualMachineRef((*services.CreateVirtualRouterVirtualMachineRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteVirtualRouterVirtualMachineRefResponse)(request), nil
}

func getRefUpdateFromRequestVirtualRouterVirtualMachineRef(request *services.CreateVirtualRouterVirtualMachineRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetVirtualRouterVirtualMachineRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "virtual-router",
			UUID:      id,
			RefType:   "virtual-machine",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}

func (h *HTTP) CreateWebuiNode(ctx context.Context, request *services.CreateWebuiNodeRequest) (*services.CreateWebuiNodeResponse, error) {
	response := &services.CreateWebuiNodeResponse{}
	_, err := h.Create(ctx, "/webui-nodes", request, response)
	return response, err
}

func (h *HTTP) UpdateWebuiNode(ctx context.Context, request *services.UpdateWebuiNodeRequest) (*services.UpdateWebuiNodeResponse, error) {
	response := &services.UpdateWebuiNodeResponse{}
	_, err := h.Update(ctx, "/webui-node/"+request.WebuiNode.UUID,
		request, &response)
	return response, err
}

func (h *HTTP) DeleteWebuiNode(ctx context.Context, request *services.DeleteWebuiNodeRequest) (*services.DeleteWebuiNodeResponse, error) {
	response := &services.DeleteWebuiNodeResponse{}
	_, err := h.Delete(ctx, "/webui-node/"+request.ID, nil)
	return response, err
}

func (h *HTTP) GetWebuiNode(ctx context.Context, request *services.GetWebuiNodeRequest) (*services.GetWebuiNodeResponse, error) {
	response := &services.GetWebuiNodeResponse{}
	_, err := h.Read(ctx, "/webui-node/"+request.ID, response)
	return response, err
}

func (h *HTTP) ListWebuiNode(ctx context.Context, request *services.ListWebuiNodeRequest) (*services.ListWebuiNodeResponse, error) {
	response := &services.ListWebuiNodeResponse{}
	_, err := h.ReadWithQuery(ctx, "/webui-nodes", request.GetSpec().URLQuery(), response)
	return response, err
}

func (h *HTTP) CreateWebuiNodeTagRef(
	ctx context.Context, request *services.CreateWebuiNodeTagRefRequest,
) (*services.CreateWebuiNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestWebuiNodeTagRef(request, baseservices.RefOperationAdd)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.CreateWebuiNodeTagRefResponse)(request), nil
}

func (h *HTTP) DeleteWebuiNodeTagRef(
	ctx context.Context, request *services.DeleteWebuiNodeTagRefRequest,
) (*services.DeleteWebuiNodeTagRefResponse, error) {
	data := getRefUpdateFromRequestWebuiNodeTagRef((*services.CreateWebuiNodeTagRefRequest)(request), baseservices.RefOperationDelete)
	_, err := h.RefUpdate(ctx, data, nil)
	if err != nil {
		return nil, err
	}
	return (*services.DeleteWebuiNodeTagRefResponse)(request), nil
}

func getRefUpdateFromRequestWebuiNodeTagRef(request *services.CreateWebuiNodeTagRefRequest, operation baseservices.RefOperation) interface{} {
	id := request.GetID()
	reference := request.GetWebuiNodeTagRef()

	data := struct {
		services.RefUpdate
	}{
		services.RefUpdate{
			Operation: operation,
			Type:      "webui-node",
			UUID:      id,
			RefType:   "tag",
			RefUUID:   reference.GetUUID(),
		},
	}
	return data
}
