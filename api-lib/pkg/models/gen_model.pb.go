// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/Juniper/contrail-api-client/api-lib/pkg/models/gen_model.proto

package models

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AccessControlList struct {
	Annotations              *KeyValuePairs             `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion     int64                      `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName              string                     `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                   []string                   `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                     string                     `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                  *IdPermsType               `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                     string                     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType               string                     `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID               string                     `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                   *PermType2                 `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                     string                     `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AccessControlListEntries *AclEntriesType            `protobuf:"bytes,12,opt,name=access_control_list_entries,json=accessControlListEntries,proto3" json:"access_control_list_entries,omitempty" yaml:"access_control_list_entries,omitempty"`
	AccessControlListHash    int64                      `protobuf:"varint,13,opt,name=access_control_list_hash,json=accessControlListHash,proto3" json:"access_control_list_hash,omitempty" yaml:"access_control_list_hash,omitempty"`
	TagRefs                  []*AccessControlListTagRef `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *AccessControlList) Reset()      { *m = AccessControlList{} }
func (*AccessControlList) ProtoMessage() {}
func (*AccessControlList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{0}
}
func (m *AccessControlList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessControlList.Unmarshal(m, b)
}
func (m *AccessControlList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessControlList.Marshal(b, m, deterministic)
}
func (m *AccessControlList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessControlList.Merge(m, src)
}
func (m *AccessControlList) XXX_Size() int {
	return xxx_messageInfo_AccessControlList.Size(m)
}
func (m *AccessControlList) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessControlList.DiscardUnknown(m)
}

var xxx_messageInfo_AccessControlList proto.InternalMessageInfo

func (m *AccessControlList) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *AccessControlList) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *AccessControlList) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *AccessControlList) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *AccessControlList) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *AccessControlList) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *AccessControlList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccessControlList) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *AccessControlList) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *AccessControlList) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *AccessControlList) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AccessControlList) GetAccessControlListEntries() *AclEntriesType {
	if m != nil {
		return m.AccessControlListEntries
	}
	return nil
}

func (m *AccessControlList) GetAccessControlListHash() int64 {
	if m != nil {
		return m.AccessControlListHash
	}
	return 0
}

func (m *AccessControlList) GetTagRefs() []*AccessControlListTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type AccessControlListTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *AccessControlListTagRef) Reset()      { *m = AccessControlListTagRef{} }
func (*AccessControlListTagRef) ProtoMessage() {}
func (*AccessControlListTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{1}
}
func (m *AccessControlListTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccessControlListTagRef.Unmarshal(m, b)
}
func (m *AccessControlListTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccessControlListTagRef.Marshal(b, m, deterministic)
}
func (m *AccessControlListTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccessControlListTagRef.Merge(m, src)
}
func (m *AccessControlListTagRef) XXX_Size() int {
	return xxx_messageInfo_AccessControlListTagRef.Size(m)
}
func (m *AccessControlListTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AccessControlListTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_AccessControlListTagRef proto.InternalMessageInfo

func (m *AccessControlListTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AccessControlListTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *AccessControlListTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type AddressGroup struct {
	Annotations          *KeyValuePairs        `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                 `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string                `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string              `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string                `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType          `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string                `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string                `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string                `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2            `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string                `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AddressGroupPrefix   *SubnetListType       `protobuf:"bytes,12,opt,name=address_group_prefix,json=addressGroupPrefix,proto3" json:"address_group_prefix,omitempty" yaml:"address_group_prefix,omitempty"`
	DraftModeState       string                `protobuf:"bytes,13,opt,name=draft_mode_state,json=draftModeState,proto3" json:"draft_mode_state,omitempty" yaml:"draft_mode_state,omitempty"`
	TagRefs              []*AddressGroupTagRef `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	FirewallRuleBackRefs []*FirewallRule       `protobuf:"bytes,3015,rep,name=firewall_rule_back_refs,json=firewallRuleBackRefs,proto3" json:"firewall_rule_back_refs,omitempty" yaml:"firewall_rule_back_refs,omitempty"`
}

func (m *AddressGroup) Reset()      { *m = AddressGroup{} }
func (*AddressGroup) ProtoMessage() {}
func (*AddressGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{2}
}
func (m *AddressGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressGroup.Unmarshal(m, b)
}
func (m *AddressGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressGroup.Marshal(b, m, deterministic)
}
func (m *AddressGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressGroup.Merge(m, src)
}
func (m *AddressGroup) XXX_Size() int {
	return xxx_messageInfo_AddressGroup.Size(m)
}
func (m *AddressGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressGroup.DiscardUnknown(m)
}

var xxx_messageInfo_AddressGroup proto.InternalMessageInfo

func (m *AddressGroup) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *AddressGroup) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *AddressGroup) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *AddressGroup) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *AddressGroup) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *AddressGroup) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *AddressGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddressGroup) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *AddressGroup) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *AddressGroup) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *AddressGroup) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AddressGroup) GetAddressGroupPrefix() *SubnetListType {
	if m != nil {
		return m.AddressGroupPrefix
	}
	return nil
}

func (m *AddressGroup) GetDraftModeState() string {
	if m != nil {
		return m.DraftModeState
	}
	return ""
}

func (m *AddressGroup) GetTagRefs() []*AddressGroupTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *AddressGroup) GetFirewallRuleBackRefs() []*FirewallRule {
	if m != nil {
		return m.FirewallRuleBackRefs
	}
	return nil
}

type AddressGroupTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *AddressGroupTagRef) Reset()      { *m = AddressGroupTagRef{} }
func (*AddressGroupTagRef) ProtoMessage() {}
func (*AddressGroupTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{3}
}
func (m *AddressGroupTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressGroupTagRef.Unmarshal(m, b)
}
func (m *AddressGroupTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressGroupTagRef.Marshal(b, m, deterministic)
}
func (m *AddressGroupTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressGroupTagRef.Merge(m, src)
}
func (m *AddressGroupTagRef) XXX_Size() int {
	return xxx_messageInfo_AddressGroupTagRef.Size(m)
}
func (m *AddressGroupTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressGroupTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_AddressGroupTagRef proto.InternalMessageInfo

func (m *AddressGroupTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AddressGroupTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *AddressGroupTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type Alarm struct {
	Annotations          *KeyValuePairs `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64          `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string         `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string       `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string         `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType   `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string         `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string         `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string         `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2     `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string         `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AlarmRules           *AlarmOrList   `protobuf:"bytes,12,opt,name=alarm_rules,json=alarmRules,proto3" json:"alarm_rules,omitempty" yaml:"alarm_rules,omitempty"`
	AlarmSeverity        int64          `protobuf:"varint,13,opt,name=alarm_severity,json=alarmSeverity,proto3" json:"alarm_severity,omitempty" yaml:"alarm_severity,omitempty"`
	UveKeys              *UveKeysType   `protobuf:"bytes,14,opt,name=uve_keys,json=uveKeys,proto3" json:"uve_keys,omitempty" yaml:"uve_keys,omitempty"`
	TagRefs              []*AlarmTagRef `protobuf:"bytes,1015,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *Alarm) Reset()      { *m = Alarm{} }
func (*Alarm) ProtoMessage() {}
func (*Alarm) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{4}
}
func (m *Alarm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Alarm.Unmarshal(m, b)
}
func (m *Alarm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Alarm.Marshal(b, m, deterministic)
}
func (m *Alarm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Alarm.Merge(m, src)
}
func (m *Alarm) XXX_Size() int {
	return xxx_messageInfo_Alarm.Size(m)
}
func (m *Alarm) XXX_DiscardUnknown() {
	xxx_messageInfo_Alarm.DiscardUnknown(m)
}

var xxx_messageInfo_Alarm proto.InternalMessageInfo

func (m *Alarm) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Alarm) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *Alarm) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Alarm) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *Alarm) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Alarm) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *Alarm) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Alarm) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *Alarm) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *Alarm) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *Alarm) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Alarm) GetAlarmRules() *AlarmOrList {
	if m != nil {
		return m.AlarmRules
	}
	return nil
}

func (m *Alarm) GetAlarmSeverity() int64 {
	if m != nil {
		return m.AlarmSeverity
	}
	return 0
}

func (m *Alarm) GetUveKeys() *UveKeysType {
	if m != nil {
		return m.UveKeys
	}
	return nil
}

func (m *Alarm) GetTagRefs() []*AlarmTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type AlarmTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *AlarmTagRef) Reset()      { *m = AlarmTagRef{} }
func (*AlarmTagRef) ProtoMessage() {}
func (*AlarmTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{5}
}
func (m *AlarmTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlarmTagRef.Unmarshal(m, b)
}
func (m *AlarmTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlarmTagRef.Marshal(b, m, deterministic)
}
func (m *AlarmTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlarmTagRef.Merge(m, src)
}
func (m *AlarmTagRef) XXX_Size() int {
	return xxx_messageInfo_AlarmTagRef.Size(m)
}
func (m *AlarmTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AlarmTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_AlarmTagRef proto.InternalMessageInfo

func (m *AlarmTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AlarmTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *AlarmTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type AliasIPPool struct {
	Annotations          *KeyValuePairs       `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string             `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string               `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType         `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string               `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string               `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2           `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string               `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TagRefs              []*AliasIPPoolTagRef `protobuf:"bytes,1012,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	ProjectBackRefs      []*Project           `protobuf:"bytes,3014,rep,name=project_back_refs,json=projectBackRefs,proto3" json:"project_back_refs,omitempty" yaml:"project_back_refs,omitempty"`
	AliasIPs             []*AliasIP           `protobuf:"bytes,2013,rep,name=alias_ips,json=aliasIps,proto3" json:"alias_ips,omitempty" yaml:"alias_ips,omitempty"`
}

func (m *AliasIPPool) Reset()      { *m = AliasIPPool{} }
func (*AliasIPPool) ProtoMessage() {}
func (*AliasIPPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{6}
}
func (m *AliasIPPool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AliasIPPool.Unmarshal(m, b)
}
func (m *AliasIPPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AliasIPPool.Marshal(b, m, deterministic)
}
func (m *AliasIPPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliasIPPool.Merge(m, src)
}
func (m *AliasIPPool) XXX_Size() int {
	return xxx_messageInfo_AliasIPPool.Size(m)
}
func (m *AliasIPPool) XXX_DiscardUnknown() {
	xxx_messageInfo_AliasIPPool.DiscardUnknown(m)
}

var xxx_messageInfo_AliasIPPool proto.InternalMessageInfo

func (m *AliasIPPool) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *AliasIPPool) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *AliasIPPool) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *AliasIPPool) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *AliasIPPool) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *AliasIPPool) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *AliasIPPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AliasIPPool) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *AliasIPPool) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *AliasIPPool) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *AliasIPPool) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AliasIPPool) GetTagRefs() []*AliasIPPoolTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *AliasIPPool) GetProjectBackRefs() []*Project {
	if m != nil {
		return m.ProjectBackRefs
	}
	return nil
}

func (m *AliasIPPool) GetAliasIPs() []*AliasIP {
	if m != nil {
		return m.AliasIPs
	}
	return nil
}

type AliasIPPoolTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *AliasIPPoolTagRef) Reset()      { *m = AliasIPPoolTagRef{} }
func (*AliasIPPoolTagRef) ProtoMessage() {}
func (*AliasIPPoolTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{7}
}
func (m *AliasIPPoolTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AliasIPPoolTagRef.Unmarshal(m, b)
}
func (m *AliasIPPoolTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AliasIPPoolTagRef.Marshal(b, m, deterministic)
}
func (m *AliasIPPoolTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliasIPPoolTagRef.Merge(m, src)
}
func (m *AliasIPPoolTagRef) XXX_Size() int {
	return xxx_messageInfo_AliasIPPoolTagRef.Size(m)
}
func (m *AliasIPPoolTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AliasIPPoolTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_AliasIPPoolTagRef proto.InternalMessageInfo

func (m *AliasIPPoolTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AliasIPPoolTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *AliasIPPoolTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type AliasIP struct {
	Annotations                 *KeyValuePairs                       `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion        int64                                `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                 string                               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                      []string                             `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                        string                               `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                     *IdPermsType                         `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                        string                               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                  string                               `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                  string                               `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                      *PermType2                           `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                        string                               `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AliasIPAddress              string                               `protobuf:"bytes,12,opt,name=alias_ip_address,json=aliasIpAddress,proto3" json:"alias_ip_address,omitempty" yaml:"alias_ip_address,omitempty"`
	AliasIPAddressFamily        string                               `protobuf:"bytes,13,opt,name=alias_ip_address_family,json=aliasIpAddressFamily,proto3" json:"alias_ip_address_family,omitempty" yaml:"alias_ip_address_family,omitempty"`
	ProjectRefs                 []*AliasIPProjectRef                 `protobuf:"bytes,1014,rep,name=project_refs,json=projectRefs,proto3" json:"project_refs,omitempty" yaml:"project_refs,omitempty"`
	TagRefs                     []*AliasIPTagRef                     `protobuf:"bytes,1015,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceRefs []*AliasIPVirtualMachineInterfaceRef `protobuf:"bytes,1016,rep,name=virtual_machine_interface_refs,json=virtualMachineInterfaceRefs,proto3" json:"virtual_machine_interface_refs,omitempty" yaml:"virtual_machine_interface_refs,omitempty"`
}

func (m *AliasIP) Reset()      { *m = AliasIP{} }
func (*AliasIP) ProtoMessage() {}
func (*AliasIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{8}
}
func (m *AliasIP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AliasIP.Unmarshal(m, b)
}
func (m *AliasIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AliasIP.Marshal(b, m, deterministic)
}
func (m *AliasIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliasIP.Merge(m, src)
}
func (m *AliasIP) XXX_Size() int {
	return xxx_messageInfo_AliasIP.Size(m)
}
func (m *AliasIP) XXX_DiscardUnknown() {
	xxx_messageInfo_AliasIP.DiscardUnknown(m)
}

var xxx_messageInfo_AliasIP proto.InternalMessageInfo

func (m *AliasIP) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *AliasIP) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *AliasIP) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *AliasIP) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *AliasIP) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *AliasIP) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *AliasIP) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AliasIP) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *AliasIP) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *AliasIP) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *AliasIP) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AliasIP) GetAliasIPAddress() string {
	if m != nil {
		return m.AliasIPAddress
	}
	return ""
}

func (m *AliasIP) GetAliasIPAddressFamily() string {
	if m != nil {
		return m.AliasIPAddressFamily
	}
	return ""
}

func (m *AliasIP) GetProjectRefs() []*AliasIPProjectRef {
	if m != nil {
		return m.ProjectRefs
	}
	return nil
}

func (m *AliasIP) GetTagRefs() []*AliasIPTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *AliasIP) GetVirtualMachineInterfaceRefs() []*AliasIPVirtualMachineInterfaceRef {
	if m != nil {
		return m.VirtualMachineInterfaceRefs
	}
	return nil
}

type AliasIPProjectRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *AliasIPProjectRef) Reset()      { *m = AliasIPProjectRef{} }
func (*AliasIPProjectRef) ProtoMessage() {}
func (*AliasIPProjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{9}
}
func (m *AliasIPProjectRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AliasIPProjectRef.Unmarshal(m, b)
}
func (m *AliasIPProjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AliasIPProjectRef.Marshal(b, m, deterministic)
}
func (m *AliasIPProjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliasIPProjectRef.Merge(m, src)
}
func (m *AliasIPProjectRef) XXX_Size() int {
	return xxx_messageInfo_AliasIPProjectRef.Size(m)
}
func (m *AliasIPProjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AliasIPProjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_AliasIPProjectRef proto.InternalMessageInfo

func (m *AliasIPProjectRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AliasIPProjectRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *AliasIPProjectRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type AliasIPTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *AliasIPTagRef) Reset()      { *m = AliasIPTagRef{} }
func (*AliasIPTagRef) ProtoMessage() {}
func (*AliasIPTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{10}
}
func (m *AliasIPTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AliasIPTagRef.Unmarshal(m, b)
}
func (m *AliasIPTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AliasIPTagRef.Marshal(b, m, deterministic)
}
func (m *AliasIPTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliasIPTagRef.Merge(m, src)
}
func (m *AliasIPTagRef) XXX_Size() int {
	return xxx_messageInfo_AliasIPTagRef.Size(m)
}
func (m *AliasIPTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AliasIPTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_AliasIPTagRef proto.InternalMessageInfo

func (m *AliasIPTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AliasIPTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *AliasIPTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type AliasIPVirtualMachineInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *AliasIPVirtualMachineInterfaceRef) Reset()      { *m = AliasIPVirtualMachineInterfaceRef{} }
func (*AliasIPVirtualMachineInterfaceRef) ProtoMessage() {}
func (*AliasIPVirtualMachineInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{11}
}
func (m *AliasIPVirtualMachineInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AliasIPVirtualMachineInterfaceRef.Unmarshal(m, b)
}
func (m *AliasIPVirtualMachineInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AliasIPVirtualMachineInterfaceRef.Marshal(b, m, deterministic)
}
func (m *AliasIPVirtualMachineInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AliasIPVirtualMachineInterfaceRef.Merge(m, src)
}
func (m *AliasIPVirtualMachineInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_AliasIPVirtualMachineInterfaceRef.Size(m)
}
func (m *AliasIPVirtualMachineInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AliasIPVirtualMachineInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_AliasIPVirtualMachineInterfaceRef proto.InternalMessageInfo

func (m *AliasIPVirtualMachineInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AliasIPVirtualMachineInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *AliasIPVirtualMachineInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type AnalyticsAlarmNode struct {
	Annotations                 *KeyValuePairs              `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion        int64                       `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                 string                      `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                      []string                    `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                        string                      `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                     *IdPermsType                `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                        string                      `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                  string                      `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                  string                      `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                      *PermType2                  `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                        string                      `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AnalyticsAlarmNodeIPAddress string                      `protobuf:"bytes,12,opt,name=analytics_alarm_node_ip_address,json=analyticsAlarmNodeIpAddress,proto3" json:"analytics_alarm_node_ip_address,omitempty" yaml:"analytics_alarm_node_ip_address,omitempty"`
	TagRefs                     []*AnalyticsAlarmNodeTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *AnalyticsAlarmNode) Reset()      { *m = AnalyticsAlarmNode{} }
func (*AnalyticsAlarmNode) ProtoMessage() {}
func (*AnalyticsAlarmNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{12}
}
func (m *AnalyticsAlarmNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyticsAlarmNode.Unmarshal(m, b)
}
func (m *AnalyticsAlarmNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyticsAlarmNode.Marshal(b, m, deterministic)
}
func (m *AnalyticsAlarmNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyticsAlarmNode.Merge(m, src)
}
func (m *AnalyticsAlarmNode) XXX_Size() int {
	return xxx_messageInfo_AnalyticsAlarmNode.Size(m)
}
func (m *AnalyticsAlarmNode) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyticsAlarmNode.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyticsAlarmNode proto.InternalMessageInfo

func (m *AnalyticsAlarmNode) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *AnalyticsAlarmNode) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *AnalyticsAlarmNode) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *AnalyticsAlarmNode) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *AnalyticsAlarmNode) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *AnalyticsAlarmNode) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *AnalyticsAlarmNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AnalyticsAlarmNode) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *AnalyticsAlarmNode) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *AnalyticsAlarmNode) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *AnalyticsAlarmNode) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AnalyticsAlarmNode) GetAnalyticsAlarmNodeIPAddress() string {
	if m != nil {
		return m.AnalyticsAlarmNodeIPAddress
	}
	return ""
}

func (m *AnalyticsAlarmNode) GetTagRefs() []*AnalyticsAlarmNodeTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type AnalyticsAlarmNodeTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *AnalyticsAlarmNodeTagRef) Reset()      { *m = AnalyticsAlarmNodeTagRef{} }
func (*AnalyticsAlarmNodeTagRef) ProtoMessage() {}
func (*AnalyticsAlarmNodeTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{13}
}
func (m *AnalyticsAlarmNodeTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyticsAlarmNodeTagRef.Unmarshal(m, b)
}
func (m *AnalyticsAlarmNodeTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyticsAlarmNodeTagRef.Marshal(b, m, deterministic)
}
func (m *AnalyticsAlarmNodeTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyticsAlarmNodeTagRef.Merge(m, src)
}
func (m *AnalyticsAlarmNodeTagRef) XXX_Size() int {
	return xxx_messageInfo_AnalyticsAlarmNodeTagRef.Size(m)
}
func (m *AnalyticsAlarmNodeTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyticsAlarmNodeTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyticsAlarmNodeTagRef proto.InternalMessageInfo

func (m *AnalyticsAlarmNodeTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AnalyticsAlarmNodeTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *AnalyticsAlarmNodeTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type AnalyticsNode struct {
	Annotations            *KeyValuePairs         `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion   int64                  `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName            string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                 []string               `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                   string                 `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                *IdPermsType           `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                   string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType             string                 `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID             string                 `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                 *PermType2             `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                   string                 `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AnalyticsNodeIPAddress string                 `protobuf:"bytes,12,opt,name=analytics_node_ip_address,json=analyticsNodeIpAddress,proto3" json:"analytics_node_ip_address,omitempty" yaml:"analytics_node_ip_address,omitempty"`
	TagRefs                []*AnalyticsNodeTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *AnalyticsNode) Reset()      { *m = AnalyticsNode{} }
func (*AnalyticsNode) ProtoMessage() {}
func (*AnalyticsNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{14}
}
func (m *AnalyticsNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyticsNode.Unmarshal(m, b)
}
func (m *AnalyticsNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyticsNode.Marshal(b, m, deterministic)
}
func (m *AnalyticsNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyticsNode.Merge(m, src)
}
func (m *AnalyticsNode) XXX_Size() int {
	return xxx_messageInfo_AnalyticsNode.Size(m)
}
func (m *AnalyticsNode) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyticsNode.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyticsNode proto.InternalMessageInfo

func (m *AnalyticsNode) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *AnalyticsNode) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *AnalyticsNode) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *AnalyticsNode) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *AnalyticsNode) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *AnalyticsNode) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *AnalyticsNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AnalyticsNode) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *AnalyticsNode) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *AnalyticsNode) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *AnalyticsNode) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AnalyticsNode) GetAnalyticsNodeIPAddress() string {
	if m != nil {
		return m.AnalyticsNodeIPAddress
	}
	return ""
}

func (m *AnalyticsNode) GetTagRefs() []*AnalyticsNodeTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type AnalyticsNodeTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *AnalyticsNodeTagRef) Reset()      { *m = AnalyticsNodeTagRef{} }
func (*AnalyticsNodeTagRef) ProtoMessage() {}
func (*AnalyticsNodeTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{15}
}
func (m *AnalyticsNodeTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyticsNodeTagRef.Unmarshal(m, b)
}
func (m *AnalyticsNodeTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyticsNodeTagRef.Marshal(b, m, deterministic)
}
func (m *AnalyticsNodeTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyticsNodeTagRef.Merge(m, src)
}
func (m *AnalyticsNodeTagRef) XXX_Size() int {
	return xxx_messageInfo_AnalyticsNodeTagRef.Size(m)
}
func (m *AnalyticsNodeTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyticsNodeTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyticsNodeTagRef proto.InternalMessageInfo

func (m *AnalyticsNodeTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AnalyticsNodeTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *AnalyticsNodeTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type AnalyticsSNMPNode struct {
	Annotations                *KeyValuePairs             `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion       int64                      `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                string                     `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                     []string                   `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                       string                     `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                    *IdPermsType               `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                       string                     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                 string                     `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                 string                     `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                     *PermType2                 `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                       string                     `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AnalyticsSNMPNodeIPAddress string                     `protobuf:"bytes,12,opt,name=analytics_snmp_node_ip_address,json=analyticsSnmpNodeIpAddress,proto3" json:"analytics_snmp_node_ip_address,omitempty" yaml:"analytics_snmp_node_ip_address,omitempty"`
	TagRefs                    []*AnalyticsSNMPNodeTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *AnalyticsSNMPNode) Reset()      { *m = AnalyticsSNMPNode{} }
func (*AnalyticsSNMPNode) ProtoMessage() {}
func (*AnalyticsSNMPNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{16}
}
func (m *AnalyticsSNMPNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyticsSNMPNode.Unmarshal(m, b)
}
func (m *AnalyticsSNMPNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyticsSNMPNode.Marshal(b, m, deterministic)
}
func (m *AnalyticsSNMPNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyticsSNMPNode.Merge(m, src)
}
func (m *AnalyticsSNMPNode) XXX_Size() int {
	return xxx_messageInfo_AnalyticsSNMPNode.Size(m)
}
func (m *AnalyticsSNMPNode) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyticsSNMPNode.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyticsSNMPNode proto.InternalMessageInfo

func (m *AnalyticsSNMPNode) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *AnalyticsSNMPNode) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *AnalyticsSNMPNode) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *AnalyticsSNMPNode) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *AnalyticsSNMPNode) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *AnalyticsSNMPNode) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *AnalyticsSNMPNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AnalyticsSNMPNode) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *AnalyticsSNMPNode) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *AnalyticsSNMPNode) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *AnalyticsSNMPNode) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AnalyticsSNMPNode) GetAnalyticsSNMPNodeIPAddress() string {
	if m != nil {
		return m.AnalyticsSNMPNodeIPAddress
	}
	return ""
}

func (m *AnalyticsSNMPNode) GetTagRefs() []*AnalyticsSNMPNodeTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type AnalyticsSNMPNodeTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *AnalyticsSNMPNodeTagRef) Reset()      { *m = AnalyticsSNMPNodeTagRef{} }
func (*AnalyticsSNMPNodeTagRef) ProtoMessage() {}
func (*AnalyticsSNMPNodeTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{17}
}
func (m *AnalyticsSNMPNodeTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyticsSNMPNodeTagRef.Unmarshal(m, b)
}
func (m *AnalyticsSNMPNodeTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyticsSNMPNodeTagRef.Marshal(b, m, deterministic)
}
func (m *AnalyticsSNMPNodeTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyticsSNMPNodeTagRef.Merge(m, src)
}
func (m *AnalyticsSNMPNodeTagRef) XXX_Size() int {
	return xxx_messageInfo_AnalyticsSNMPNodeTagRef.Size(m)
}
func (m *AnalyticsSNMPNodeTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyticsSNMPNodeTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyticsSNMPNodeTagRef proto.InternalMessageInfo

func (m *AnalyticsSNMPNodeTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *AnalyticsSNMPNodeTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *AnalyticsSNMPNodeTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type APIAccessList struct {
	Annotations          *KeyValuePairs         `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                  `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string               `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string                 `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType           `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string                 `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string                 `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2             `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string                 `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	APIAccessListEntries *RbacRuleEntriesType   `protobuf:"bytes,12,opt,name=api_access_list_entries,json=apiAccessListEntries,proto3" json:"api_access_list_entries,omitempty" yaml:"api_access_list_entries,omitempty"`
	TagRefs              []*APIAccessListTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *APIAccessList) Reset()      { *m = APIAccessList{} }
func (*APIAccessList) ProtoMessage() {}
func (*APIAccessList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{18}
}
func (m *APIAccessList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_APIAccessList.Unmarshal(m, b)
}
func (m *APIAccessList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_APIAccessList.Marshal(b, m, deterministic)
}
func (m *APIAccessList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIAccessList.Merge(m, src)
}
func (m *APIAccessList) XXX_Size() int {
	return xxx_messageInfo_APIAccessList.Size(m)
}
func (m *APIAccessList) XXX_DiscardUnknown() {
	xxx_messageInfo_APIAccessList.DiscardUnknown(m)
}

var xxx_messageInfo_APIAccessList proto.InternalMessageInfo

func (m *APIAccessList) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *APIAccessList) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *APIAccessList) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *APIAccessList) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *APIAccessList) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *APIAccessList) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *APIAccessList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *APIAccessList) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *APIAccessList) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *APIAccessList) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *APIAccessList) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *APIAccessList) GetAPIAccessListEntries() *RbacRuleEntriesType {
	if m != nil {
		return m.APIAccessListEntries
	}
	return nil
}

func (m *APIAccessList) GetTagRefs() []*APIAccessListTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type APIAccessListTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *APIAccessListTagRef) Reset()      { *m = APIAccessListTagRef{} }
func (*APIAccessListTagRef) ProtoMessage() {}
func (*APIAccessListTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{19}
}
func (m *APIAccessListTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_APIAccessListTagRef.Unmarshal(m, b)
}
func (m *APIAccessListTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_APIAccessListTagRef.Marshal(b, m, deterministic)
}
func (m *APIAccessListTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIAccessListTagRef.Merge(m, src)
}
func (m *APIAccessListTagRef) XXX_Size() int {
	return xxx_messageInfo_APIAccessListTagRef.Size(m)
}
func (m *APIAccessListTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_APIAccessListTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_APIAccessListTagRef proto.InternalMessageInfo

func (m *APIAccessListTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *APIAccessListTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *APIAccessListTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ApplicationPolicySet struct {
	Annotations             *KeyValuePairs                                `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion    int64                                         `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName             string                                        `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                  []string                                      `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                    string                                        `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                 *IdPermsType                                  `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                    string                                        `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType              string                                        `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID              string                                        `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                  *PermType2                                    `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                    string                                        `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AllApplications         bool                                          `protobuf:"varint,12,opt,name=all_applications,json=allApplications,proto3" json:"all_applications,omitempty" yaml:"all_applications,omitempty"`
	DraftModeState          string                                        `protobuf:"bytes,13,opt,name=draft_mode_state,json=draftModeState,proto3" json:"draft_mode_state,omitempty" yaml:"draft_mode_state,omitempty"`
	FirewallPolicyRefs      []*ApplicationPolicySetFirewallPolicyRef      `protobuf:"bytes,1014,rep,name=firewall_policy_refs,json=firewallPolicyRefs,proto3" json:"firewall_policy_refs,omitempty" yaml:"firewall_policy_refs,omitempty"`
	GlobalVrouterConfigRefs []*ApplicationPolicySetGlobalVrouterConfigRef `protobuf:"bytes,1015,rep,name=global_vrouter_config_refs,json=globalVrouterConfigRefs,proto3" json:"global_vrouter_config_refs,omitempty" yaml:"global_vrouter_config_refs,omitempty"`
	TagRefs                 []*ApplicationPolicySetTagRef                 `protobuf:"bytes,1016,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	ProjectBackRefs         []*Project                                    `protobuf:"bytes,3017,rep,name=project_back_refs,json=projectBackRefs,proto3" json:"project_back_refs,omitempty" yaml:"project_back_refs,omitempty"`
}

func (m *ApplicationPolicySet) Reset()      { *m = ApplicationPolicySet{} }
func (*ApplicationPolicySet) ProtoMessage() {}
func (*ApplicationPolicySet) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{20}
}
func (m *ApplicationPolicySet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPolicySet.Unmarshal(m, b)
}
func (m *ApplicationPolicySet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPolicySet.Marshal(b, m, deterministic)
}
func (m *ApplicationPolicySet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPolicySet.Merge(m, src)
}
func (m *ApplicationPolicySet) XXX_Size() int {
	return xxx_messageInfo_ApplicationPolicySet.Size(m)
}
func (m *ApplicationPolicySet) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPolicySet.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPolicySet proto.InternalMessageInfo

func (m *ApplicationPolicySet) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ApplicationPolicySet) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ApplicationPolicySet) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ApplicationPolicySet) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ApplicationPolicySet) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ApplicationPolicySet) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ApplicationPolicySet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ApplicationPolicySet) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ApplicationPolicySet) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ApplicationPolicySet) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ApplicationPolicySet) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ApplicationPolicySet) GetAllApplications() bool {
	if m != nil {
		return m.AllApplications
	}
	return false
}

func (m *ApplicationPolicySet) GetDraftModeState() string {
	if m != nil {
		return m.DraftModeState
	}
	return ""
}

func (m *ApplicationPolicySet) GetFirewallPolicyRefs() []*ApplicationPolicySetFirewallPolicyRef {
	if m != nil {
		return m.FirewallPolicyRefs
	}
	return nil
}

func (m *ApplicationPolicySet) GetGlobalVrouterConfigRefs() []*ApplicationPolicySetGlobalVrouterConfigRef {
	if m != nil {
		return m.GlobalVrouterConfigRefs
	}
	return nil
}

func (m *ApplicationPolicySet) GetTagRefs() []*ApplicationPolicySetTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *ApplicationPolicySet) GetProjectBackRefs() []*Project {
	if m != nil {
		return m.ProjectBackRefs
	}
	return nil
}

type ApplicationPolicySetFirewallPolicyRef struct {
	UUID string            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string          `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string            `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *FirewallSequence `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *ApplicationPolicySetFirewallPolicyRef) Reset()      { *m = ApplicationPolicySetFirewallPolicyRef{} }
func (*ApplicationPolicySetFirewallPolicyRef) ProtoMessage() {}
func (*ApplicationPolicySetFirewallPolicyRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{21}
}
func (m *ApplicationPolicySetFirewallPolicyRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPolicySetFirewallPolicyRef.Unmarshal(m, b)
}
func (m *ApplicationPolicySetFirewallPolicyRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPolicySetFirewallPolicyRef.Marshal(b, m, deterministic)
}
func (m *ApplicationPolicySetFirewallPolicyRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPolicySetFirewallPolicyRef.Merge(m, src)
}
func (m *ApplicationPolicySetFirewallPolicyRef) XXX_Size() int {
	return xxx_messageInfo_ApplicationPolicySetFirewallPolicyRef.Size(m)
}
func (m *ApplicationPolicySetFirewallPolicyRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPolicySetFirewallPolicyRef.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPolicySetFirewallPolicyRef proto.InternalMessageInfo

func (m *ApplicationPolicySetFirewallPolicyRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ApplicationPolicySetFirewallPolicyRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ApplicationPolicySetFirewallPolicyRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ApplicationPolicySetFirewallPolicyRef) GetAttr() *FirewallSequence {
	if m != nil {
		return m.Attr
	}
	return nil
}

type ApplicationPolicySetGlobalVrouterConfigRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ApplicationPolicySetGlobalVrouterConfigRef) Reset() {
	*m = ApplicationPolicySetGlobalVrouterConfigRef{}
}
func (*ApplicationPolicySetGlobalVrouterConfigRef) ProtoMessage() {}
func (*ApplicationPolicySetGlobalVrouterConfigRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{22}
}
func (m *ApplicationPolicySetGlobalVrouterConfigRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPolicySetGlobalVrouterConfigRef.Unmarshal(m, b)
}
func (m *ApplicationPolicySetGlobalVrouterConfigRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPolicySetGlobalVrouterConfigRef.Marshal(b, m, deterministic)
}
func (m *ApplicationPolicySetGlobalVrouterConfigRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPolicySetGlobalVrouterConfigRef.Merge(m, src)
}
func (m *ApplicationPolicySetGlobalVrouterConfigRef) XXX_Size() int {
	return xxx_messageInfo_ApplicationPolicySetGlobalVrouterConfigRef.Size(m)
}
func (m *ApplicationPolicySetGlobalVrouterConfigRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPolicySetGlobalVrouterConfigRef.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPolicySetGlobalVrouterConfigRef proto.InternalMessageInfo

func (m *ApplicationPolicySetGlobalVrouterConfigRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ApplicationPolicySetGlobalVrouterConfigRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ApplicationPolicySetGlobalVrouterConfigRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ApplicationPolicySetTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ApplicationPolicySetTagRef) Reset()      { *m = ApplicationPolicySetTagRef{} }
func (*ApplicationPolicySetTagRef) ProtoMessage() {}
func (*ApplicationPolicySetTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{23}
}
func (m *ApplicationPolicySetTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplicationPolicySetTagRef.Unmarshal(m, b)
}
func (m *ApplicationPolicySetTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplicationPolicySetTagRef.Marshal(b, m, deterministic)
}
func (m *ApplicationPolicySetTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationPolicySetTagRef.Merge(m, src)
}
func (m *ApplicationPolicySetTagRef) XXX_Size() int {
	return xxx_messageInfo_ApplicationPolicySetTagRef.Size(m)
}
func (m *ApplicationPolicySetTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationPolicySetTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationPolicySetTagRef proto.InternalMessageInfo

func (m *ApplicationPolicySetTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ApplicationPolicySetTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ApplicationPolicySetTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type BGPAsAService struct {
	Annotations                      *KeyValuePairs                             `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion             int64                                      `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                      string                                     `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                           []string                                   `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                             string                                     `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                          *IdPermsType                               `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                             string                                     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                       string                                     `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                       string                                     `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                           *PermType2                                 `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                             string                                     `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AutonomousSystem                 int64                                      `protobuf:"varint,12,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty" yaml:"autonomous_system,omitempty"`
	BgpaasIPAddress                  string                                     `protobuf:"bytes,13,opt,name=bgpaas_ip_address,json=bgpaasIpAddress,proto3" json:"bgpaas_ip_address,omitempty" yaml:"bgpaas_ip_address,omitempty"`
	BgpaasIpv4MappedIpv6Nexthop      bool                                       `protobuf:"varint,14,opt,name=bgpaas_ipv4_mapped_ipv6_nexthop,json=bgpaasIpv4MappedIpv6Nexthop,proto3" json:"bgpaas_ipv4_mapped_ipv6_nexthop,omitempty" yaml:"bgpaas_ipv4_mapped_ipv6_nexthop,omitempty"`
	BgpaasSessionAttributes          *BgpSessionAttributes                      `protobuf:"bytes,15,opt,name=bgpaas_session_attributes,json=bgpaasSessionAttributes,proto3" json:"bgpaas_session_attributes,omitempty" yaml:"bgpaas_session_attributes,omitempty"`
	BgpaasShared                     bool                                       `protobuf:"varint,16,opt,name=bgpaas_shared,json=bgpaasShared,proto3" json:"bgpaas_shared,omitempty" yaml:"bgpaas_shared,omitempty"`
	BgpaasSuppressRouteAdvertisement bool                                       `protobuf:"varint,17,opt,name=bgpaas_suppress_route_advertisement,json=bgpaasSuppressRouteAdvertisement,proto3" json:"bgpaas_suppress_route_advertisement,omitempty" yaml:"bgpaas_suppress_route_advertisement,omitempty"`
	BGPRouterRefs                    []*BGPAsAServiceBGPRouterRef               `protobuf:"bytes,1018,rep,name=bgp_router_refs,json=bgpRouterRefs,proto3" json:"bgp_router_refs,omitempty" yaml:"bgp_router_refs,omitempty"`
	ControlNodeZoneRefs              []*BGPAsAServiceControlNodeZoneRef         `protobuf:"bytes,1019,rep,name=control_node_zone_refs,json=controlNodeZoneRefs,proto3" json:"control_node_zone_refs,omitempty" yaml:"control_node_zone_refs,omitempty"`
	ServiceHealthCheckRefs           []*BGPAsAServiceServiceHealthCheckRef      `protobuf:"bytes,1020,rep,name=service_health_check_refs,json=serviceHealthCheckRefs,proto3" json:"service_health_check_refs,omitempty" yaml:"service_health_check_refs,omitempty"`
	TagRefs                          []*BGPAsAServiceTagRef                     `protobuf:"bytes,1021,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceRefs      []*BGPAsAServiceVirtualMachineInterfaceRef `protobuf:"bytes,1022,rep,name=virtual_machine_interface_refs,json=virtualMachineInterfaceRefs,proto3" json:"virtual_machine_interface_refs,omitempty" yaml:"virtual_machine_interface_refs,omitempty"`
}

func (m *BGPAsAService) Reset()      { *m = BGPAsAService{} }
func (*BGPAsAService) ProtoMessage() {}
func (*BGPAsAService) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{24}
}
func (m *BGPAsAService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPAsAService.Unmarshal(m, b)
}
func (m *BGPAsAService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPAsAService.Marshal(b, m, deterministic)
}
func (m *BGPAsAService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPAsAService.Merge(m, src)
}
func (m *BGPAsAService) XXX_Size() int {
	return xxx_messageInfo_BGPAsAService.Size(m)
}
func (m *BGPAsAService) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPAsAService.DiscardUnknown(m)
}

var xxx_messageInfo_BGPAsAService proto.InternalMessageInfo

func (m *BGPAsAService) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *BGPAsAService) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *BGPAsAService) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *BGPAsAService) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *BGPAsAService) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *BGPAsAService) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *BGPAsAService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BGPAsAService) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *BGPAsAService) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *BGPAsAService) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *BGPAsAService) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BGPAsAService) GetAutonomousSystem() int64 {
	if m != nil {
		return m.AutonomousSystem
	}
	return 0
}

func (m *BGPAsAService) GetBgpaasIPAddress() string {
	if m != nil {
		return m.BgpaasIPAddress
	}
	return ""
}

func (m *BGPAsAService) GetBgpaasIpv4MappedIpv6Nexthop() bool {
	if m != nil {
		return m.BgpaasIpv4MappedIpv6Nexthop
	}
	return false
}

func (m *BGPAsAService) GetBgpaasSessionAttributes() *BgpSessionAttributes {
	if m != nil {
		return m.BgpaasSessionAttributes
	}
	return nil
}

func (m *BGPAsAService) GetBgpaasShared() bool {
	if m != nil {
		return m.BgpaasShared
	}
	return false
}

func (m *BGPAsAService) GetBgpaasSuppressRouteAdvertisement() bool {
	if m != nil {
		return m.BgpaasSuppressRouteAdvertisement
	}
	return false
}

func (m *BGPAsAService) GetBGPRouterRefs() []*BGPAsAServiceBGPRouterRef {
	if m != nil {
		return m.BGPRouterRefs
	}
	return nil
}

func (m *BGPAsAService) GetControlNodeZoneRefs() []*BGPAsAServiceControlNodeZoneRef {
	if m != nil {
		return m.ControlNodeZoneRefs
	}
	return nil
}

func (m *BGPAsAService) GetServiceHealthCheckRefs() []*BGPAsAServiceServiceHealthCheckRef {
	if m != nil {
		return m.ServiceHealthCheckRefs
	}
	return nil
}

func (m *BGPAsAService) GetTagRefs() []*BGPAsAServiceTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *BGPAsAService) GetVirtualMachineInterfaceRefs() []*BGPAsAServiceVirtualMachineInterfaceRef {
	if m != nil {
		return m.VirtualMachineInterfaceRefs
	}
	return nil
}

type BGPAsAServiceBGPRouterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *BGPAsAServiceBGPRouterRef) Reset()      { *m = BGPAsAServiceBGPRouterRef{} }
func (*BGPAsAServiceBGPRouterRef) ProtoMessage() {}
func (*BGPAsAServiceBGPRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{25}
}
func (m *BGPAsAServiceBGPRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPAsAServiceBGPRouterRef.Unmarshal(m, b)
}
func (m *BGPAsAServiceBGPRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPAsAServiceBGPRouterRef.Marshal(b, m, deterministic)
}
func (m *BGPAsAServiceBGPRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPAsAServiceBGPRouterRef.Merge(m, src)
}
func (m *BGPAsAServiceBGPRouterRef) XXX_Size() int {
	return xxx_messageInfo_BGPAsAServiceBGPRouterRef.Size(m)
}
func (m *BGPAsAServiceBGPRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPAsAServiceBGPRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_BGPAsAServiceBGPRouterRef proto.InternalMessageInfo

func (m *BGPAsAServiceBGPRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BGPAsAServiceBGPRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *BGPAsAServiceBGPRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type BGPAsAServiceControlNodeZoneRef struct {
	UUID string                           `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string                         `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string                           `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *BGPaaSControlNodeZoneAttributes `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *BGPAsAServiceControlNodeZoneRef) Reset()      { *m = BGPAsAServiceControlNodeZoneRef{} }
func (*BGPAsAServiceControlNodeZoneRef) ProtoMessage() {}
func (*BGPAsAServiceControlNodeZoneRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{26}
}
func (m *BGPAsAServiceControlNodeZoneRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPAsAServiceControlNodeZoneRef.Unmarshal(m, b)
}
func (m *BGPAsAServiceControlNodeZoneRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPAsAServiceControlNodeZoneRef.Marshal(b, m, deterministic)
}
func (m *BGPAsAServiceControlNodeZoneRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPAsAServiceControlNodeZoneRef.Merge(m, src)
}
func (m *BGPAsAServiceControlNodeZoneRef) XXX_Size() int {
	return xxx_messageInfo_BGPAsAServiceControlNodeZoneRef.Size(m)
}
func (m *BGPAsAServiceControlNodeZoneRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPAsAServiceControlNodeZoneRef.DiscardUnknown(m)
}

var xxx_messageInfo_BGPAsAServiceControlNodeZoneRef proto.InternalMessageInfo

func (m *BGPAsAServiceControlNodeZoneRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BGPAsAServiceControlNodeZoneRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *BGPAsAServiceControlNodeZoneRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *BGPAsAServiceControlNodeZoneRef) GetAttr() *BGPaaSControlNodeZoneAttributes {
	if m != nil {
		return m.Attr
	}
	return nil
}

type BGPAsAServiceServiceHealthCheckRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *BGPAsAServiceServiceHealthCheckRef) Reset()      { *m = BGPAsAServiceServiceHealthCheckRef{} }
func (*BGPAsAServiceServiceHealthCheckRef) ProtoMessage() {}
func (*BGPAsAServiceServiceHealthCheckRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{27}
}
func (m *BGPAsAServiceServiceHealthCheckRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPAsAServiceServiceHealthCheckRef.Unmarshal(m, b)
}
func (m *BGPAsAServiceServiceHealthCheckRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPAsAServiceServiceHealthCheckRef.Marshal(b, m, deterministic)
}
func (m *BGPAsAServiceServiceHealthCheckRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPAsAServiceServiceHealthCheckRef.Merge(m, src)
}
func (m *BGPAsAServiceServiceHealthCheckRef) XXX_Size() int {
	return xxx_messageInfo_BGPAsAServiceServiceHealthCheckRef.Size(m)
}
func (m *BGPAsAServiceServiceHealthCheckRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPAsAServiceServiceHealthCheckRef.DiscardUnknown(m)
}

var xxx_messageInfo_BGPAsAServiceServiceHealthCheckRef proto.InternalMessageInfo

func (m *BGPAsAServiceServiceHealthCheckRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BGPAsAServiceServiceHealthCheckRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *BGPAsAServiceServiceHealthCheckRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type BGPAsAServiceTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *BGPAsAServiceTagRef) Reset()      { *m = BGPAsAServiceTagRef{} }
func (*BGPAsAServiceTagRef) ProtoMessage() {}
func (*BGPAsAServiceTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{28}
}
func (m *BGPAsAServiceTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPAsAServiceTagRef.Unmarshal(m, b)
}
func (m *BGPAsAServiceTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPAsAServiceTagRef.Marshal(b, m, deterministic)
}
func (m *BGPAsAServiceTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPAsAServiceTagRef.Merge(m, src)
}
func (m *BGPAsAServiceTagRef) XXX_Size() int {
	return xxx_messageInfo_BGPAsAServiceTagRef.Size(m)
}
func (m *BGPAsAServiceTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPAsAServiceTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_BGPAsAServiceTagRef proto.InternalMessageInfo

func (m *BGPAsAServiceTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BGPAsAServiceTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *BGPAsAServiceTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type BGPAsAServiceVirtualMachineInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *BGPAsAServiceVirtualMachineInterfaceRef) Reset() {
	*m = BGPAsAServiceVirtualMachineInterfaceRef{}
}
func (*BGPAsAServiceVirtualMachineInterfaceRef) ProtoMessage() {}
func (*BGPAsAServiceVirtualMachineInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{29}
}
func (m *BGPAsAServiceVirtualMachineInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPAsAServiceVirtualMachineInterfaceRef.Unmarshal(m, b)
}
func (m *BGPAsAServiceVirtualMachineInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPAsAServiceVirtualMachineInterfaceRef.Marshal(b, m, deterministic)
}
func (m *BGPAsAServiceVirtualMachineInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPAsAServiceVirtualMachineInterfaceRef.Merge(m, src)
}
func (m *BGPAsAServiceVirtualMachineInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_BGPAsAServiceVirtualMachineInterfaceRef.Size(m)
}
func (m *BGPAsAServiceVirtualMachineInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPAsAServiceVirtualMachineInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_BGPAsAServiceVirtualMachineInterfaceRef proto.InternalMessageInfo

func (m *BGPAsAServiceVirtualMachineInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BGPAsAServiceVirtualMachineInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *BGPAsAServiceVirtualMachineInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type BGPRouter struct {
	Annotations                     *KeyValuePairs                 `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                          `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                         `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                       `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                         `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType                   `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                         `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                         `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                         `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                     `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                         `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	BGPRouterParameters             *BgpRouterParams               `protobuf:"bytes,12,opt,name=bgp_router_parameters,json=bgpRouterParameters,proto3" json:"bgp_router_parameters,omitempty" yaml:"bgp_router_parameters,omitempty"`
	BGPRouterRefs                   []*BGPRouterBGPRouterRef       `protobuf:"bytes,1013,rep,name=bgp_router_refs,json=bgpRouterRefs,proto3" json:"bgp_router_refs,omitempty" yaml:"bgp_router_refs,omitempty"`
	ControlNodeZoneRefs             []*BGPRouterControlNodeZoneRef `protobuf:"bytes,1014,rep,name=control_node_zone_refs,json=controlNodeZoneRefs,proto3" json:"control_node_zone_refs,omitempty" yaml:"control_node_zone_refs,omitempty"`
	SubClusterRefs                  []*BGPRouterSubClusterRef      `protobuf:"bytes,1015,rep,name=sub_cluster_refs,json=subClusterRefs,proto3" json:"sub_cluster_refs,omitempty" yaml:"sub_cluster_refs,omitempty"`
	TagRefs                         []*BGPRouterTagRef             `protobuf:"bytes,1016,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	BGPAsAServiceBackRefs           []*BGPAsAService               `protobuf:"bytes,3017,rep,name=bgp_as_a_service_back_refs,json=bgpAsAServiceBackRefs,proto3" json:"bgp_as_a_service_back_refs,omitempty" yaml:"bgp_as_a_service_back_refs,omitempty"`
	BGPRouterBackRefs               []*BGPRouter                   `protobuf:"bytes,3018,rep,name=bgp_router_back_refs,json=bgpRouterBackRefs,proto3" json:"bgp_router_back_refs,omitempty" yaml:"bgp_router_back_refs,omitempty"`
	GlobalSystemConfigBackRefs      []*GlobalSystemConfig          `protobuf:"bytes,3019,rep,name=global_system_config_back_refs,json=globalSystemConfigBackRefs,proto3" json:"global_system_config_back_refs,omitempty" yaml:"global_system_config_back_refs,omitempty"`
	PhysicalRouterBackRefs          []*PhysicalRouter              `protobuf:"bytes,3020,rep,name=physical_router_back_refs,json=physicalRouterBackRefs,proto3" json:"physical_router_back_refs,omitempty" yaml:"physical_router_back_refs,omitempty"`
	VirtualMachineInterfaceBackRefs []*VirtualMachineInterface     `protobuf:"bytes,3021,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
}

func (m *BGPRouter) Reset()      { *m = BGPRouter{} }
func (*BGPRouter) ProtoMessage() {}
func (*BGPRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{30}
}
func (m *BGPRouter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPRouter.Unmarshal(m, b)
}
func (m *BGPRouter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPRouter.Marshal(b, m, deterministic)
}
func (m *BGPRouter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPRouter.Merge(m, src)
}
func (m *BGPRouter) XXX_Size() int {
	return xxx_messageInfo_BGPRouter.Size(m)
}
func (m *BGPRouter) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPRouter.DiscardUnknown(m)
}

var xxx_messageInfo_BGPRouter proto.InternalMessageInfo

func (m *BGPRouter) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *BGPRouter) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *BGPRouter) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *BGPRouter) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *BGPRouter) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *BGPRouter) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *BGPRouter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BGPRouter) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *BGPRouter) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *BGPRouter) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *BGPRouter) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BGPRouter) GetBGPRouterParameters() *BgpRouterParams {
	if m != nil {
		return m.BGPRouterParameters
	}
	return nil
}

func (m *BGPRouter) GetBGPRouterRefs() []*BGPRouterBGPRouterRef {
	if m != nil {
		return m.BGPRouterRefs
	}
	return nil
}

func (m *BGPRouter) GetControlNodeZoneRefs() []*BGPRouterControlNodeZoneRef {
	if m != nil {
		return m.ControlNodeZoneRefs
	}
	return nil
}

func (m *BGPRouter) GetSubClusterRefs() []*BGPRouterSubClusterRef {
	if m != nil {
		return m.SubClusterRefs
	}
	return nil
}

func (m *BGPRouter) GetTagRefs() []*BGPRouterTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *BGPRouter) GetBGPAsAServiceBackRefs() []*BGPAsAService {
	if m != nil {
		return m.BGPAsAServiceBackRefs
	}
	return nil
}

func (m *BGPRouter) GetBGPRouterBackRefs() []*BGPRouter {
	if m != nil {
		return m.BGPRouterBackRefs
	}
	return nil
}

func (m *BGPRouter) GetGlobalSystemConfigBackRefs() []*GlobalSystemConfig {
	if m != nil {
		return m.GlobalSystemConfigBackRefs
	}
	return nil
}

func (m *BGPRouter) GetPhysicalRouterBackRefs() []*PhysicalRouter {
	if m != nil {
		return m.PhysicalRouterBackRefs
	}
	return nil
}

func (m *BGPRouter) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

type BGPRouterBGPRouterRef struct {
	UUID string                `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string              `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string                `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *BgpPeeringAttributes `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *BGPRouterBGPRouterRef) Reset()      { *m = BGPRouterBGPRouterRef{} }
func (*BGPRouterBGPRouterRef) ProtoMessage() {}
func (*BGPRouterBGPRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{31}
}
func (m *BGPRouterBGPRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPRouterBGPRouterRef.Unmarshal(m, b)
}
func (m *BGPRouterBGPRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPRouterBGPRouterRef.Marshal(b, m, deterministic)
}
func (m *BGPRouterBGPRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPRouterBGPRouterRef.Merge(m, src)
}
func (m *BGPRouterBGPRouterRef) XXX_Size() int {
	return xxx_messageInfo_BGPRouterBGPRouterRef.Size(m)
}
func (m *BGPRouterBGPRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPRouterBGPRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_BGPRouterBGPRouterRef proto.InternalMessageInfo

func (m *BGPRouterBGPRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BGPRouterBGPRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *BGPRouterBGPRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *BGPRouterBGPRouterRef) GetAttr() *BgpPeeringAttributes {
	if m != nil {
		return m.Attr
	}
	return nil
}

type BGPRouterControlNodeZoneRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *BGPRouterControlNodeZoneRef) Reset()      { *m = BGPRouterControlNodeZoneRef{} }
func (*BGPRouterControlNodeZoneRef) ProtoMessage() {}
func (*BGPRouterControlNodeZoneRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{32}
}
func (m *BGPRouterControlNodeZoneRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPRouterControlNodeZoneRef.Unmarshal(m, b)
}
func (m *BGPRouterControlNodeZoneRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPRouterControlNodeZoneRef.Marshal(b, m, deterministic)
}
func (m *BGPRouterControlNodeZoneRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPRouterControlNodeZoneRef.Merge(m, src)
}
func (m *BGPRouterControlNodeZoneRef) XXX_Size() int {
	return xxx_messageInfo_BGPRouterControlNodeZoneRef.Size(m)
}
func (m *BGPRouterControlNodeZoneRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPRouterControlNodeZoneRef.DiscardUnknown(m)
}

var xxx_messageInfo_BGPRouterControlNodeZoneRef proto.InternalMessageInfo

func (m *BGPRouterControlNodeZoneRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BGPRouterControlNodeZoneRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *BGPRouterControlNodeZoneRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type BGPRouterSubClusterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *BGPRouterSubClusterRef) Reset()      { *m = BGPRouterSubClusterRef{} }
func (*BGPRouterSubClusterRef) ProtoMessage() {}
func (*BGPRouterSubClusterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{33}
}
func (m *BGPRouterSubClusterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPRouterSubClusterRef.Unmarshal(m, b)
}
func (m *BGPRouterSubClusterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPRouterSubClusterRef.Marshal(b, m, deterministic)
}
func (m *BGPRouterSubClusterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPRouterSubClusterRef.Merge(m, src)
}
func (m *BGPRouterSubClusterRef) XXX_Size() int {
	return xxx_messageInfo_BGPRouterSubClusterRef.Size(m)
}
func (m *BGPRouterSubClusterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPRouterSubClusterRef.DiscardUnknown(m)
}

var xxx_messageInfo_BGPRouterSubClusterRef proto.InternalMessageInfo

func (m *BGPRouterSubClusterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BGPRouterSubClusterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *BGPRouterSubClusterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type BGPRouterTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *BGPRouterTagRef) Reset()      { *m = BGPRouterTagRef{} }
func (*BGPRouterTagRef) ProtoMessage() {}
func (*BGPRouterTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{34}
}
func (m *BGPRouterTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPRouterTagRef.Unmarshal(m, b)
}
func (m *BGPRouterTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPRouterTagRef.Marshal(b, m, deterministic)
}
func (m *BGPRouterTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPRouterTagRef.Merge(m, src)
}
func (m *BGPRouterTagRef) XXX_Size() int {
	return xxx_messageInfo_BGPRouterTagRef.Size(m)
}
func (m *BGPRouterTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPRouterTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_BGPRouterTagRef proto.InternalMessageInfo

func (m *BGPRouterTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BGPRouterTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *BGPRouterTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type BGPVPN struct {
	Annotations            *KeyValuePairs    `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion   int64             `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName            string            `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                 []string          `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                   string            `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                *IdPermsType      `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                   string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType             string            `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID             string            `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                 *PermType2        `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                   string            `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	BGPVPNType             string            `protobuf:"bytes,12,opt,name=bgpvpn_type,json=bgpvpnType,proto3" json:"bgpvpn_type,omitempty" yaml:"bgpvpn_type,omitempty"`
	ExportRouteTargetList  *RouteTargetList  `protobuf:"bytes,13,opt,name=export_route_target_list,json=exportRouteTargetList,proto3" json:"export_route_target_list,omitempty" yaml:"export_route_target_list,omitempty"`
	ImportRouteTargetList  *RouteTargetList  `protobuf:"bytes,14,opt,name=import_route_target_list,json=importRouteTargetList,proto3" json:"import_route_target_list,omitempty" yaml:"import_route_target_list,omitempty"`
	RouteTargetList        *RouteTargetList  `protobuf:"bytes,15,opt,name=route_target_list,json=routeTargetList,proto3" json:"route_target_list,omitempty" yaml:"route_target_list,omitempty"`
	TagRefs                []*BGPVPNTagRef   `protobuf:"bytes,1016,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	LogicalRouterBackRefs  []*LogicalRouter  `protobuf:"bytes,3017,rep,name=logical_router_back_refs,json=logicalRouterBackRefs,proto3" json:"logical_router_back_refs,omitempty" yaml:"logical_router_back_refs,omitempty"`
	VirtualNetworkBackRefs []*VirtualNetwork `protobuf:"bytes,3018,rep,name=virtual_network_back_refs,json=virtualNetworkBackRefs,proto3" json:"virtual_network_back_refs,omitempty" yaml:"virtual_network_back_refs,omitempty"`
}

func (m *BGPVPN) Reset()      { *m = BGPVPN{} }
func (*BGPVPN) ProtoMessage() {}
func (*BGPVPN) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{35}
}
func (m *BGPVPN) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPVPN.Unmarshal(m, b)
}
func (m *BGPVPN) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPVPN.Marshal(b, m, deterministic)
}
func (m *BGPVPN) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPVPN.Merge(m, src)
}
func (m *BGPVPN) XXX_Size() int {
	return xxx_messageInfo_BGPVPN.Size(m)
}
func (m *BGPVPN) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPVPN.DiscardUnknown(m)
}

var xxx_messageInfo_BGPVPN proto.InternalMessageInfo

func (m *BGPVPN) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *BGPVPN) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *BGPVPN) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *BGPVPN) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *BGPVPN) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *BGPVPN) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *BGPVPN) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BGPVPN) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *BGPVPN) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *BGPVPN) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *BGPVPN) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BGPVPN) GetBGPVPNType() string {
	if m != nil {
		return m.BGPVPNType
	}
	return ""
}

func (m *BGPVPN) GetExportRouteTargetList() *RouteTargetList {
	if m != nil {
		return m.ExportRouteTargetList
	}
	return nil
}

func (m *BGPVPN) GetImportRouteTargetList() *RouteTargetList {
	if m != nil {
		return m.ImportRouteTargetList
	}
	return nil
}

func (m *BGPVPN) GetRouteTargetList() *RouteTargetList {
	if m != nil {
		return m.RouteTargetList
	}
	return nil
}

func (m *BGPVPN) GetTagRefs() []*BGPVPNTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *BGPVPN) GetLogicalRouterBackRefs() []*LogicalRouter {
	if m != nil {
		return m.LogicalRouterBackRefs
	}
	return nil
}

func (m *BGPVPN) GetVirtualNetworkBackRefs() []*VirtualNetwork {
	if m != nil {
		return m.VirtualNetworkBackRefs
	}
	return nil
}

type BGPVPNTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *BGPVPNTagRef) Reset()      { *m = BGPVPNTagRef{} }
func (*BGPVPNTagRef) ProtoMessage() {}
func (*BGPVPNTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{36}
}
func (m *BGPVPNTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPVPNTagRef.Unmarshal(m, b)
}
func (m *BGPVPNTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPVPNTagRef.Marshal(b, m, deterministic)
}
func (m *BGPVPNTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPVPNTagRef.Merge(m, src)
}
func (m *BGPVPNTagRef) XXX_Size() int {
	return xxx_messageInfo_BGPVPNTagRef.Size(m)
}
func (m *BGPVPNTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPVPNTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_BGPVPNTagRef proto.InternalMessageInfo

func (m *BGPVPNTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BGPVPNTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *BGPVPNTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type BridgeDomain struct {
	Annotations                     *KeyValuePairs             `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                      `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                     `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                   `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                     `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType               `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                     `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                     `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                 `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                     `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	Isid                            int64                      `protobuf:"varint,12,opt,name=isid,proto3" json:"isid,omitempty" yaml:"isid,omitempty"`
	MacAgingTime                    int64                      `protobuf:"varint,13,opt,name=mac_aging_time,json=macAgingTime,proto3" json:"mac_aging_time,omitempty" yaml:"mac_aging_time,omitempty"`
	MacLearningEnabled              bool                       `protobuf:"varint,14,opt,name=mac_learning_enabled,json=macLearningEnabled,proto3" json:"mac_learning_enabled,omitempty" yaml:"mac_learning_enabled,omitempty"`
	MacLimitControl                 *MACLimitControlType       `protobuf:"bytes,15,opt,name=mac_limit_control,json=macLimitControl,proto3" json:"mac_limit_control,omitempty" yaml:"mac_limit_control,omitempty"`
	MacMoveControl                  *MACMoveLimitControlType   `protobuf:"bytes,16,opt,name=mac_move_control,json=macMoveControl,proto3" json:"mac_move_control,omitempty" yaml:"mac_move_control,omitempty"`
	TagRefs                         []*BridgeDomainTagRef      `protobuf:"bytes,1017,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceBackRefs []*VirtualMachineInterface `protobuf:"bytes,3018,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
}

func (m *BridgeDomain) Reset()      { *m = BridgeDomain{} }
func (*BridgeDomain) ProtoMessage() {}
func (*BridgeDomain) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{37}
}
func (m *BridgeDomain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BridgeDomain.Unmarshal(m, b)
}
func (m *BridgeDomain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BridgeDomain.Marshal(b, m, deterministic)
}
func (m *BridgeDomain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeDomain.Merge(m, src)
}
func (m *BridgeDomain) XXX_Size() int {
	return xxx_messageInfo_BridgeDomain.Size(m)
}
func (m *BridgeDomain) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeDomain.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeDomain proto.InternalMessageInfo

func (m *BridgeDomain) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *BridgeDomain) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *BridgeDomain) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *BridgeDomain) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *BridgeDomain) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *BridgeDomain) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *BridgeDomain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BridgeDomain) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *BridgeDomain) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *BridgeDomain) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *BridgeDomain) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BridgeDomain) GetIsid() int64 {
	if m != nil {
		return m.Isid
	}
	return 0
}

func (m *BridgeDomain) GetMacAgingTime() int64 {
	if m != nil {
		return m.MacAgingTime
	}
	return 0
}

func (m *BridgeDomain) GetMacLearningEnabled() bool {
	if m != nil {
		return m.MacLearningEnabled
	}
	return false
}

func (m *BridgeDomain) GetMacLimitControl() *MACLimitControlType {
	if m != nil {
		return m.MacLimitControl
	}
	return nil
}

func (m *BridgeDomain) GetMacMoveControl() *MACMoveLimitControlType {
	if m != nil {
		return m.MacMoveControl
	}
	return nil
}

func (m *BridgeDomain) GetTagRefs() []*BridgeDomainTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *BridgeDomain) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

type BridgeDomainTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *BridgeDomainTagRef) Reset()      { *m = BridgeDomainTagRef{} }
func (*BridgeDomainTagRef) ProtoMessage() {}
func (*BridgeDomainTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{38}
}
func (m *BridgeDomainTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BridgeDomainTagRef.Unmarshal(m, b)
}
func (m *BridgeDomainTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BridgeDomainTagRef.Marshal(b, m, deterministic)
}
func (m *BridgeDomainTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeDomainTagRef.Merge(m, src)
}
func (m *BridgeDomainTagRef) XXX_Size() int {
	return xxx_messageInfo_BridgeDomainTagRef.Size(m)
}
func (m *BridgeDomainTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeDomainTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeDomainTagRef proto.InternalMessageInfo

func (m *BridgeDomainTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BridgeDomainTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *BridgeDomainTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type Card struct {
	Annotations          *KeyValuePairs    `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64             `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string            `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string          `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string            `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType      `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string            `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string            `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2        `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string            `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	InterfaceMap         *InterfaceMapType `protobuf:"bytes,12,opt,name=interface_map,json=interfaceMap,proto3" json:"interface_map,omitempty" yaml:"interface_map,omitempty"`
	TagRefs              []*CardTagRef     `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	HardwareBackRefs     []*Hardware       `protobuf:"bytes,3014,rep,name=hardware_back_refs,json=hardwareBackRefs,proto3" json:"hardware_back_refs,omitempty" yaml:"hardware_back_refs,omitempty"`
}

func (m *Card) Reset()      { *m = Card{} }
func (*Card) ProtoMessage() {}
func (*Card) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{39}
}
func (m *Card) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Card.Unmarshal(m, b)
}
func (m *Card) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Card.Marshal(b, m, deterministic)
}
func (m *Card) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card.Merge(m, src)
}
func (m *Card) XXX_Size() int {
	return xxx_messageInfo_Card.Size(m)
}
func (m *Card) XXX_DiscardUnknown() {
	xxx_messageInfo_Card.DiscardUnknown(m)
}

var xxx_messageInfo_Card proto.InternalMessageInfo

func (m *Card) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Card) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *Card) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Card) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *Card) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Card) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *Card) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Card) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *Card) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *Card) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *Card) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Card) GetInterfaceMap() *InterfaceMapType {
	if m != nil {
		return m.InterfaceMap
	}
	return nil
}

func (m *Card) GetTagRefs() []*CardTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *Card) GetHardwareBackRefs() []*Hardware {
	if m != nil {
		return m.HardwareBackRefs
	}
	return nil
}

type CardTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *CardTagRef) Reset()      { *m = CardTagRef{} }
func (*CardTagRef) ProtoMessage() {}
func (*CardTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{40}
}
func (m *CardTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CardTagRef.Unmarshal(m, b)
}
func (m *CardTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CardTagRef.Marshal(b, m, deterministic)
}
func (m *CardTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardTagRef.Merge(m, src)
}
func (m *CardTagRef) XXX_Size() int {
	return xxx_messageInfo_CardTagRef.Size(m)
}
func (m *CardTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_CardTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_CardTagRef proto.InternalMessageInfo

func (m *CardTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CardTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *CardTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type CliConfig struct {
	Annotations          *KeyValuePairs     `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64              `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string             `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string           `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string             `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType       `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string             `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string             `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string             `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2         `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string             `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AcceptedCliConfig    string             `protobuf:"bytes,12,opt,name=accepted_cli_config,json=acceptedCliConfig,proto3" json:"accepted_cli_config,omitempty" yaml:"accepted_cli_config,omitempty"`
	CommitDiffList       *CliDiffListType   `protobuf:"bytes,13,opt,name=commit_diff_list,json=commitDiffList,proto3" json:"commit_diff_list,omitempty" yaml:"commit_diff_list,omitempty"`
	TagRefs              []*CliConfigTagRef `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *CliConfig) Reset()      { *m = CliConfig{} }
func (*CliConfig) ProtoMessage() {}
func (*CliConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{41}
}
func (m *CliConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CliConfig.Unmarshal(m, b)
}
func (m *CliConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CliConfig.Marshal(b, m, deterministic)
}
func (m *CliConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CliConfig.Merge(m, src)
}
func (m *CliConfig) XXX_Size() int {
	return xxx_messageInfo_CliConfig.Size(m)
}
func (m *CliConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CliConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CliConfig proto.InternalMessageInfo

func (m *CliConfig) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *CliConfig) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *CliConfig) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *CliConfig) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *CliConfig) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *CliConfig) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *CliConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CliConfig) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *CliConfig) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *CliConfig) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *CliConfig) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CliConfig) GetAcceptedCliConfig() string {
	if m != nil {
		return m.AcceptedCliConfig
	}
	return ""
}

func (m *CliConfig) GetCommitDiffList() *CliDiffListType {
	if m != nil {
		return m.CommitDiffList
	}
	return nil
}

func (m *CliConfig) GetTagRefs() []*CliConfigTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type CliConfigTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *CliConfigTagRef) Reset()      { *m = CliConfigTagRef{} }
func (*CliConfigTagRef) ProtoMessage() {}
func (*CliConfigTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{42}
}
func (m *CliConfigTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CliConfigTagRef.Unmarshal(m, b)
}
func (m *CliConfigTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CliConfigTagRef.Marshal(b, m, deterministic)
}
func (m *CliConfigTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CliConfigTagRef.Merge(m, src)
}
func (m *CliConfigTagRef) XXX_Size() int {
	return xxx_messageInfo_CliConfigTagRef.Size(m)
}
func (m *CliConfigTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_CliConfigTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_CliConfigTagRef proto.InternalMessageInfo

func (m *CliConfigTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CliConfigTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *CliConfigTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ConfigDatabaseNode struct {
	Annotations                 *KeyValuePairs              `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion        int64                       `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                 string                      `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                      []string                    `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                        string                      `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                     *IdPermsType                `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                        string                      `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                  string                      `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                  string                      `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                      *PermType2                  `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                        string                      `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	ConfigDatabaseNodeIPAddress string                      `protobuf:"bytes,12,opt,name=config_database_node_ip_address,json=configDatabaseNodeIpAddress,proto3" json:"config_database_node_ip_address,omitempty" yaml:"config_database_node_ip_address,omitempty"`
	TagRefs                     []*ConfigDatabaseNodeTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *ConfigDatabaseNode) Reset()      { *m = ConfigDatabaseNode{} }
func (*ConfigDatabaseNode) ProtoMessage() {}
func (*ConfigDatabaseNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{43}
}
func (m *ConfigDatabaseNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigDatabaseNode.Unmarshal(m, b)
}
func (m *ConfigDatabaseNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigDatabaseNode.Marshal(b, m, deterministic)
}
func (m *ConfigDatabaseNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigDatabaseNode.Merge(m, src)
}
func (m *ConfigDatabaseNode) XXX_Size() int {
	return xxx_messageInfo_ConfigDatabaseNode.Size(m)
}
func (m *ConfigDatabaseNode) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigDatabaseNode.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigDatabaseNode proto.InternalMessageInfo

func (m *ConfigDatabaseNode) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ConfigDatabaseNode) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ConfigDatabaseNode) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ConfigDatabaseNode) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ConfigDatabaseNode) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ConfigDatabaseNode) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ConfigDatabaseNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigDatabaseNode) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ConfigDatabaseNode) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ConfigDatabaseNode) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ConfigDatabaseNode) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ConfigDatabaseNode) GetConfigDatabaseNodeIPAddress() string {
	if m != nil {
		return m.ConfigDatabaseNodeIPAddress
	}
	return ""
}

func (m *ConfigDatabaseNode) GetTagRefs() []*ConfigDatabaseNodeTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type ConfigDatabaseNodeTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ConfigDatabaseNodeTagRef) Reset()      { *m = ConfigDatabaseNodeTagRef{} }
func (*ConfigDatabaseNodeTagRef) ProtoMessage() {}
func (*ConfigDatabaseNodeTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{44}
}
func (m *ConfigDatabaseNodeTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigDatabaseNodeTagRef.Unmarshal(m, b)
}
func (m *ConfigDatabaseNodeTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigDatabaseNodeTagRef.Marshal(b, m, deterministic)
}
func (m *ConfigDatabaseNodeTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigDatabaseNodeTagRef.Merge(m, src)
}
func (m *ConfigDatabaseNodeTagRef) XXX_Size() int {
	return xxx_messageInfo_ConfigDatabaseNodeTagRef.Size(m)
}
func (m *ConfigDatabaseNodeTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigDatabaseNodeTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigDatabaseNodeTagRef proto.InternalMessageInfo

func (m *ConfigDatabaseNodeTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ConfigDatabaseNodeTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ConfigDatabaseNodeTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ConfigNode struct {
	Annotations          *KeyValuePairs      `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64               `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string              `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string            `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string              `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType        `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string              `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string              `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2          `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string              `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	ConfigNodeIPAddress  string              `protobuf:"bytes,12,opt,name=config_node_ip_address,json=configNodeIpAddress,proto3" json:"config_node_ip_address,omitempty" yaml:"config_node_ip_address,omitempty"`
	TagRefs              []*ConfigNodeTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *ConfigNode) Reset()      { *m = ConfigNode{} }
func (*ConfigNode) ProtoMessage() {}
func (*ConfigNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{45}
}
func (m *ConfigNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigNode.Unmarshal(m, b)
}
func (m *ConfigNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigNode.Marshal(b, m, deterministic)
}
func (m *ConfigNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigNode.Merge(m, src)
}
func (m *ConfigNode) XXX_Size() int {
	return xxx_messageInfo_ConfigNode.Size(m)
}
func (m *ConfigNode) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigNode.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigNode proto.InternalMessageInfo

func (m *ConfigNode) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ConfigNode) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ConfigNode) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ConfigNode) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ConfigNode) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ConfigNode) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ConfigNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigNode) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ConfigNode) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ConfigNode) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ConfigNode) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ConfigNode) GetConfigNodeIPAddress() string {
	if m != nil {
		return m.ConfigNodeIPAddress
	}
	return ""
}

func (m *ConfigNode) GetTagRefs() []*ConfigNodeTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type ConfigNodeTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ConfigNodeTagRef) Reset()      { *m = ConfigNodeTagRef{} }
func (*ConfigNodeTagRef) ProtoMessage() {}
func (*ConfigNodeTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{46}
}
func (m *ConfigNodeTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigNodeTagRef.Unmarshal(m, b)
}
func (m *ConfigNodeTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigNodeTagRef.Marshal(b, m, deterministic)
}
func (m *ConfigNodeTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigNodeTagRef.Merge(m, src)
}
func (m *ConfigNodeTagRef) XXX_Size() int {
	return xxx_messageInfo_ConfigNodeTagRef.Size(m)
}
func (m *ConfigNodeTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigNodeTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigNodeTagRef proto.InternalMessageInfo

func (m *ConfigNodeTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ConfigNodeTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ConfigNodeTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ConfigRoot struct {
	Annotations          *KeyValuePairs      `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64               `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string              `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string            `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string              `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType        `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string              `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string              `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2          `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string              `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TagRefs              []*ConfigRootTagRef `protobuf:"bytes,1012,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *ConfigRoot) Reset()      { *m = ConfigRoot{} }
func (*ConfigRoot) ProtoMessage() {}
func (*ConfigRoot) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{47}
}
func (m *ConfigRoot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigRoot.Unmarshal(m, b)
}
func (m *ConfigRoot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigRoot.Marshal(b, m, deterministic)
}
func (m *ConfigRoot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigRoot.Merge(m, src)
}
func (m *ConfigRoot) XXX_Size() int {
	return xxx_messageInfo_ConfigRoot.Size(m)
}
func (m *ConfigRoot) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigRoot.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigRoot proto.InternalMessageInfo

func (m *ConfigRoot) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ConfigRoot) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ConfigRoot) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ConfigRoot) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ConfigRoot) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ConfigRoot) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ConfigRoot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigRoot) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ConfigRoot) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ConfigRoot) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ConfigRoot) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ConfigRoot) GetTagRefs() []*ConfigRootTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type ConfigRootTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ConfigRootTagRef) Reset()      { *m = ConfigRootTagRef{} }
func (*ConfigRootTagRef) ProtoMessage() {}
func (*ConfigRootTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{48}
}
func (m *ConfigRootTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigRootTagRef.Unmarshal(m, b)
}
func (m *ConfigRootTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigRootTagRef.Marshal(b, m, deterministic)
}
func (m *ConfigRootTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigRootTagRef.Merge(m, src)
}
func (m *ConfigRootTagRef) XXX_Size() int {
	return xxx_messageInfo_ConfigRootTagRef.Size(m)
}
func (m *ConfigRootTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigRootTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigRootTagRef proto.InternalMessageInfo

func (m *ConfigRootTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ConfigRootTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ConfigRootTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ControlNodeZone struct {
	Annotations           *KeyValuePairs           `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion  int64                    `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName           string                   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                []string                 `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                  string                   `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms               *IdPermsType             `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                  string                   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType            string                   `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID            string                   `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                *PermType2               `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                  string                   `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TagRefs               []*ControlNodeZoneTagRef `protobuf:"bytes,1012,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	BGPAsAServiceBackRefs []*BGPAsAService         `protobuf:"bytes,3013,rep,name=bgp_as_a_service_back_refs,json=bgpAsAServiceBackRefs,proto3" json:"bgp_as_a_service_back_refs,omitempty" yaml:"bgp_as_a_service_back_refs,omitempty"`
	BGPRouterBackRefs     []*BGPRouter             `protobuf:"bytes,3014,rep,name=bgp_router_back_refs,json=bgpRouterBackRefs,proto3" json:"bgp_router_back_refs,omitempty" yaml:"bgp_router_back_refs,omitempty"`
}

func (m *ControlNodeZone) Reset()      { *m = ControlNodeZone{} }
func (*ControlNodeZone) ProtoMessage() {}
func (*ControlNodeZone) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{49}
}
func (m *ControlNodeZone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlNodeZone.Unmarshal(m, b)
}
func (m *ControlNodeZone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlNodeZone.Marshal(b, m, deterministic)
}
func (m *ControlNodeZone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlNodeZone.Merge(m, src)
}
func (m *ControlNodeZone) XXX_Size() int {
	return xxx_messageInfo_ControlNodeZone.Size(m)
}
func (m *ControlNodeZone) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlNodeZone.DiscardUnknown(m)
}

var xxx_messageInfo_ControlNodeZone proto.InternalMessageInfo

func (m *ControlNodeZone) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ControlNodeZone) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ControlNodeZone) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ControlNodeZone) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ControlNodeZone) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ControlNodeZone) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ControlNodeZone) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ControlNodeZone) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ControlNodeZone) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ControlNodeZone) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ControlNodeZone) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ControlNodeZone) GetTagRefs() []*ControlNodeZoneTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *ControlNodeZone) GetBGPAsAServiceBackRefs() []*BGPAsAService {
	if m != nil {
		return m.BGPAsAServiceBackRefs
	}
	return nil
}

func (m *ControlNodeZone) GetBGPRouterBackRefs() []*BGPRouter {
	if m != nil {
		return m.BGPRouterBackRefs
	}
	return nil
}

type ControlNodeZoneTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ControlNodeZoneTagRef) Reset()      { *m = ControlNodeZoneTagRef{} }
func (*ControlNodeZoneTagRef) ProtoMessage() {}
func (*ControlNodeZoneTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{50}
}
func (m *ControlNodeZoneTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlNodeZoneTagRef.Unmarshal(m, b)
}
func (m *ControlNodeZoneTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlNodeZoneTagRef.Marshal(b, m, deterministic)
}
func (m *ControlNodeZoneTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlNodeZoneTagRef.Merge(m, src)
}
func (m *ControlNodeZoneTagRef) XXX_Size() int {
	return xxx_messageInfo_ControlNodeZoneTagRef.Size(m)
}
func (m *ControlNodeZoneTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlNodeZoneTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ControlNodeZoneTagRef proto.InternalMessageInfo

func (m *ControlNodeZoneTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ControlNodeZoneTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ControlNodeZoneTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type CustomerAttachment struct {
	Annotations                 *KeyValuePairs                                  `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion        int64                                           `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                 string                                          `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                      []string                                        `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                        string                                          `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                     *IdPermsType                                    `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                        string                                          `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                  string                                          `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                  string                                          `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                      *PermType2                                      `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                        string                                          `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AttachmentAddress           *AttachmentAddressType                          `protobuf:"bytes,12,opt,name=attachment_address,json=attachmentAddress,proto3" json:"attachment_address,omitempty" yaml:"attachment_address,omitempty"`
	FloatingIPRefs              []*CustomerAttachmentFloatingIPRef              `protobuf:"bytes,1013,rep,name=floating_ip_refs,json=floatingIpRefs,proto3" json:"floating_ip_refs,omitempty" yaml:"floating_ip_refs,omitempty"`
	TagRefs                     []*CustomerAttachmentTagRef                     `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceRefs []*CustomerAttachmentVirtualMachineInterfaceRef `protobuf:"bytes,1015,rep,name=virtual_machine_interface_refs,json=virtualMachineInterfaceRefs,proto3" json:"virtual_machine_interface_refs,omitempty" yaml:"virtual_machine_interface_refs,omitempty"`
}

func (m *CustomerAttachment) Reset()      { *m = CustomerAttachment{} }
func (*CustomerAttachment) ProtoMessage() {}
func (*CustomerAttachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{51}
}
func (m *CustomerAttachment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerAttachment.Unmarshal(m, b)
}
func (m *CustomerAttachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerAttachment.Marshal(b, m, deterministic)
}
func (m *CustomerAttachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerAttachment.Merge(m, src)
}
func (m *CustomerAttachment) XXX_Size() int {
	return xxx_messageInfo_CustomerAttachment.Size(m)
}
func (m *CustomerAttachment) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerAttachment.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerAttachment proto.InternalMessageInfo

func (m *CustomerAttachment) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *CustomerAttachment) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *CustomerAttachment) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *CustomerAttachment) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *CustomerAttachment) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *CustomerAttachment) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *CustomerAttachment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CustomerAttachment) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *CustomerAttachment) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *CustomerAttachment) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *CustomerAttachment) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CustomerAttachment) GetAttachmentAddress() *AttachmentAddressType {
	if m != nil {
		return m.AttachmentAddress
	}
	return nil
}

func (m *CustomerAttachment) GetFloatingIPRefs() []*CustomerAttachmentFloatingIPRef {
	if m != nil {
		return m.FloatingIPRefs
	}
	return nil
}

func (m *CustomerAttachment) GetTagRefs() []*CustomerAttachmentTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *CustomerAttachment) GetVirtualMachineInterfaceRefs() []*CustomerAttachmentVirtualMachineInterfaceRef {
	if m != nil {
		return m.VirtualMachineInterfaceRefs
	}
	return nil
}

type CustomerAttachmentFloatingIPRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *CustomerAttachmentFloatingIPRef) Reset()      { *m = CustomerAttachmentFloatingIPRef{} }
func (*CustomerAttachmentFloatingIPRef) ProtoMessage() {}
func (*CustomerAttachmentFloatingIPRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{52}
}
func (m *CustomerAttachmentFloatingIPRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerAttachmentFloatingIPRef.Unmarshal(m, b)
}
func (m *CustomerAttachmentFloatingIPRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerAttachmentFloatingIPRef.Marshal(b, m, deterministic)
}
func (m *CustomerAttachmentFloatingIPRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerAttachmentFloatingIPRef.Merge(m, src)
}
func (m *CustomerAttachmentFloatingIPRef) XXX_Size() int {
	return xxx_messageInfo_CustomerAttachmentFloatingIPRef.Size(m)
}
func (m *CustomerAttachmentFloatingIPRef) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerAttachmentFloatingIPRef.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerAttachmentFloatingIPRef proto.InternalMessageInfo

func (m *CustomerAttachmentFloatingIPRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CustomerAttachmentFloatingIPRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *CustomerAttachmentFloatingIPRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type CustomerAttachmentTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *CustomerAttachmentTagRef) Reset()      { *m = CustomerAttachmentTagRef{} }
func (*CustomerAttachmentTagRef) ProtoMessage() {}
func (*CustomerAttachmentTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{53}
}
func (m *CustomerAttachmentTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerAttachmentTagRef.Unmarshal(m, b)
}
func (m *CustomerAttachmentTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerAttachmentTagRef.Marshal(b, m, deterministic)
}
func (m *CustomerAttachmentTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerAttachmentTagRef.Merge(m, src)
}
func (m *CustomerAttachmentTagRef) XXX_Size() int {
	return xxx_messageInfo_CustomerAttachmentTagRef.Size(m)
}
func (m *CustomerAttachmentTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerAttachmentTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerAttachmentTagRef proto.InternalMessageInfo

func (m *CustomerAttachmentTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CustomerAttachmentTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *CustomerAttachmentTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type CustomerAttachmentVirtualMachineInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *CustomerAttachmentVirtualMachineInterfaceRef) Reset() {
	*m = CustomerAttachmentVirtualMachineInterfaceRef{}
}
func (*CustomerAttachmentVirtualMachineInterfaceRef) ProtoMessage() {}
func (*CustomerAttachmentVirtualMachineInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{54}
}
func (m *CustomerAttachmentVirtualMachineInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerAttachmentVirtualMachineInterfaceRef.Unmarshal(m, b)
}
func (m *CustomerAttachmentVirtualMachineInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerAttachmentVirtualMachineInterfaceRef.Marshal(b, m, deterministic)
}
func (m *CustomerAttachmentVirtualMachineInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerAttachmentVirtualMachineInterfaceRef.Merge(m, src)
}
func (m *CustomerAttachmentVirtualMachineInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_CustomerAttachmentVirtualMachineInterfaceRef.Size(m)
}
func (m *CustomerAttachmentVirtualMachineInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerAttachmentVirtualMachineInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerAttachmentVirtualMachineInterfaceRef proto.InternalMessageInfo

func (m *CustomerAttachmentVirtualMachineInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *CustomerAttachmentVirtualMachineInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *CustomerAttachmentVirtualMachineInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type DataCenterInterconnect struct {
	Annotations                                     *KeyValuePairs                             `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion                            int64                                      `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                                     string                                     `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                                          []string                                   `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                                            string                                     `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                                         *IdPermsType                               `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                                            string                                     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                                      string                                     `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                                      string                                     `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                                          *PermType2                                 `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                                            string                                     `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	DataCenterInterconnectBGPAddressFamilies        *AddressFamilies                           `protobuf:"bytes,12,opt,name=data_center_interconnect_bgp_address_families,json=dataCenterInterconnectBgpAddressFamilies,proto3" json:"data_center_interconnect_bgp_address_families,omitempty" yaml:"data_center_interconnect_bgp_address_families,omitempty"`
	DataCenterInterconnectBGPHoldTime               int64                                      `protobuf:"varint,13,opt,name=data_center_interconnect_bgp_hold_time,json=dataCenterInterconnectBgpHoldTime,proto3" json:"data_center_interconnect_bgp_hold_time,omitempty" yaml:"data_center_interconnect_bgp_hold_time,omitempty"`
	DataCenterInterconnectConfiguredRouteTargetList *RouteTargetList                           `protobuf:"bytes,14,opt,name=data_center_interconnect_configured_route_target_list,json=dataCenterInterconnectConfiguredRouteTargetList,proto3" json:"data_center_interconnect_configured_route_target_list,omitempty" yaml:"data_center_interconnect_configured_route_target_list,omitempty"`
	DataCenterInterconnectMode                      string                                     `protobuf:"bytes,15,opt,name=data_center_interconnect_mode,json=dataCenterInterconnectMode,proto3" json:"data_center_interconnect_mode,omitempty" yaml:"data_center_interconnect_mode,omitempty"`
	LogicalRouterRefs                               []*DataCenterInterconnectLogicalRouterRef  `protobuf:"bytes,1016,rep,name=logical_router_refs,json=logicalRouterRefs,proto3" json:"logical_router_refs,omitempty" yaml:"logical_router_refs,omitempty"`
	TagRefs                                         []*DataCenterInterconnectTagRef            `protobuf:"bytes,1017,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualNetworkRefs                              []*DataCenterInterconnectVirtualNetworkRef `protobuf:"bytes,1018,rep,name=virtual_network_refs,json=virtualNetworkRefs,proto3" json:"virtual_network_refs,omitempty" yaml:"virtual_network_refs,omitempty"`
}

func (m *DataCenterInterconnect) Reset()      { *m = DataCenterInterconnect{} }
func (*DataCenterInterconnect) ProtoMessage() {}
func (*DataCenterInterconnect) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{55}
}
func (m *DataCenterInterconnect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataCenterInterconnect.Unmarshal(m, b)
}
func (m *DataCenterInterconnect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataCenterInterconnect.Marshal(b, m, deterministic)
}
func (m *DataCenterInterconnect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCenterInterconnect.Merge(m, src)
}
func (m *DataCenterInterconnect) XXX_Size() int {
	return xxx_messageInfo_DataCenterInterconnect.Size(m)
}
func (m *DataCenterInterconnect) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCenterInterconnect.DiscardUnknown(m)
}

var xxx_messageInfo_DataCenterInterconnect proto.InternalMessageInfo

func (m *DataCenterInterconnect) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *DataCenterInterconnect) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *DataCenterInterconnect) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *DataCenterInterconnect) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *DataCenterInterconnect) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *DataCenterInterconnect) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *DataCenterInterconnect) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataCenterInterconnect) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *DataCenterInterconnect) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *DataCenterInterconnect) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *DataCenterInterconnect) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DataCenterInterconnect) GetDataCenterInterconnectBGPAddressFamilies() *AddressFamilies {
	if m != nil {
		return m.DataCenterInterconnectBGPAddressFamilies
	}
	return nil
}

func (m *DataCenterInterconnect) GetDataCenterInterconnectBGPHoldTime() int64 {
	if m != nil {
		return m.DataCenterInterconnectBGPHoldTime
	}
	return 0
}

func (m *DataCenterInterconnect) GetDataCenterInterconnectConfiguredRouteTargetList() *RouteTargetList {
	if m != nil {
		return m.DataCenterInterconnectConfiguredRouteTargetList
	}
	return nil
}

func (m *DataCenterInterconnect) GetDataCenterInterconnectMode() string {
	if m != nil {
		return m.DataCenterInterconnectMode
	}
	return ""
}

func (m *DataCenterInterconnect) GetLogicalRouterRefs() []*DataCenterInterconnectLogicalRouterRef {
	if m != nil {
		return m.LogicalRouterRefs
	}
	return nil
}

func (m *DataCenterInterconnect) GetTagRefs() []*DataCenterInterconnectTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *DataCenterInterconnect) GetVirtualNetworkRefs() []*DataCenterInterconnectVirtualNetworkRef {
	if m != nil {
		return m.VirtualNetworkRefs
	}
	return nil
}

type DataCenterInterconnectLogicalRouterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *DataCenterInterconnectLogicalRouterRef) Reset() {
	*m = DataCenterInterconnectLogicalRouterRef{}
}
func (*DataCenterInterconnectLogicalRouterRef) ProtoMessage() {}
func (*DataCenterInterconnectLogicalRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{56}
}
func (m *DataCenterInterconnectLogicalRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataCenterInterconnectLogicalRouterRef.Unmarshal(m, b)
}
func (m *DataCenterInterconnectLogicalRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataCenterInterconnectLogicalRouterRef.Marshal(b, m, deterministic)
}
func (m *DataCenterInterconnectLogicalRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCenterInterconnectLogicalRouterRef.Merge(m, src)
}
func (m *DataCenterInterconnectLogicalRouterRef) XXX_Size() int {
	return xxx_messageInfo_DataCenterInterconnectLogicalRouterRef.Size(m)
}
func (m *DataCenterInterconnectLogicalRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCenterInterconnectLogicalRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_DataCenterInterconnectLogicalRouterRef proto.InternalMessageInfo

func (m *DataCenterInterconnectLogicalRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DataCenterInterconnectLogicalRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DataCenterInterconnectLogicalRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type DataCenterInterconnectTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *DataCenterInterconnectTagRef) Reset()      { *m = DataCenterInterconnectTagRef{} }
func (*DataCenterInterconnectTagRef) ProtoMessage() {}
func (*DataCenterInterconnectTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{57}
}
func (m *DataCenterInterconnectTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataCenterInterconnectTagRef.Unmarshal(m, b)
}
func (m *DataCenterInterconnectTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataCenterInterconnectTagRef.Marshal(b, m, deterministic)
}
func (m *DataCenterInterconnectTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCenterInterconnectTagRef.Merge(m, src)
}
func (m *DataCenterInterconnectTagRef) XXX_Size() int {
	return xxx_messageInfo_DataCenterInterconnectTagRef.Size(m)
}
func (m *DataCenterInterconnectTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCenterInterconnectTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_DataCenterInterconnectTagRef proto.InternalMessageInfo

func (m *DataCenterInterconnectTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DataCenterInterconnectTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DataCenterInterconnectTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type DataCenterInterconnectVirtualNetworkRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *DataCenterInterconnectVirtualNetworkRef) Reset() {
	*m = DataCenterInterconnectVirtualNetworkRef{}
}
func (*DataCenterInterconnectVirtualNetworkRef) ProtoMessage() {}
func (*DataCenterInterconnectVirtualNetworkRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{58}
}
func (m *DataCenterInterconnectVirtualNetworkRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataCenterInterconnectVirtualNetworkRef.Unmarshal(m, b)
}
func (m *DataCenterInterconnectVirtualNetworkRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataCenterInterconnectVirtualNetworkRef.Marshal(b, m, deterministic)
}
func (m *DataCenterInterconnectVirtualNetworkRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataCenterInterconnectVirtualNetworkRef.Merge(m, src)
}
func (m *DataCenterInterconnectVirtualNetworkRef) XXX_Size() int {
	return xxx_messageInfo_DataCenterInterconnectVirtualNetworkRef.Size(m)
}
func (m *DataCenterInterconnectVirtualNetworkRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DataCenterInterconnectVirtualNetworkRef.DiscardUnknown(m)
}

var xxx_messageInfo_DataCenterInterconnectVirtualNetworkRef proto.InternalMessageInfo

func (m *DataCenterInterconnectVirtualNetworkRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DataCenterInterconnectVirtualNetworkRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DataCenterInterconnectVirtualNetworkRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type DatabaseNode struct {
	Annotations           *KeyValuePairs        `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion  int64                 `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName           string                `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                []string              `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                  string                `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms               *IdPermsType          `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                  string                `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType            string                `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID            string                `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                *PermType2            `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                  string                `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	DatabaseNodeIPAddress string                `protobuf:"bytes,12,opt,name=database_node_ip_address,json=databaseNodeIpAddress,proto3" json:"database_node_ip_address,omitempty" yaml:"database_node_ip_address,omitempty"`
	TagRefs               []*DatabaseNodeTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *DatabaseNode) Reset()      { *m = DatabaseNode{} }
func (*DatabaseNode) ProtoMessage() {}
func (*DatabaseNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{59}
}
func (m *DatabaseNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatabaseNode.Unmarshal(m, b)
}
func (m *DatabaseNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatabaseNode.Marshal(b, m, deterministic)
}
func (m *DatabaseNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseNode.Merge(m, src)
}
func (m *DatabaseNode) XXX_Size() int {
	return xxx_messageInfo_DatabaseNode.Size(m)
}
func (m *DatabaseNode) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseNode.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseNode proto.InternalMessageInfo

func (m *DatabaseNode) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *DatabaseNode) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *DatabaseNode) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *DatabaseNode) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *DatabaseNode) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *DatabaseNode) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *DatabaseNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DatabaseNode) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *DatabaseNode) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *DatabaseNode) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *DatabaseNode) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DatabaseNode) GetDatabaseNodeIPAddress() string {
	if m != nil {
		return m.DatabaseNodeIPAddress
	}
	return ""
}

func (m *DatabaseNode) GetTagRefs() []*DatabaseNodeTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type DatabaseNodeTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *DatabaseNodeTagRef) Reset()      { *m = DatabaseNodeTagRef{} }
func (*DatabaseNodeTagRef) ProtoMessage() {}
func (*DatabaseNodeTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{60}
}
func (m *DatabaseNodeTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatabaseNodeTagRef.Unmarshal(m, b)
}
func (m *DatabaseNodeTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatabaseNodeTagRef.Marshal(b, m, deterministic)
}
func (m *DatabaseNodeTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseNodeTagRef.Merge(m, src)
}
func (m *DatabaseNodeTagRef) XXX_Size() int {
	return xxx_messageInfo_DatabaseNodeTagRef.Size(m)
}
func (m *DatabaseNodeTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseNodeTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseNodeTagRef proto.InternalMessageInfo

func (m *DatabaseNodeTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DatabaseNodeTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DatabaseNodeTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type DeviceChassis struct {
	Annotations            *KeyValuePairs         `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion   int64                  `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName            string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                 []string               `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                   string                 `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                *IdPermsType           `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                   string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType             string                 `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID             string                 `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                 *PermType2             `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                   string                 `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	DeviceChassisType      string                 `protobuf:"bytes,12,opt,name=device_chassis_type,json=deviceChassisType,proto3" json:"device_chassis_type,omitempty" yaml:"device_chassis_type,omitempty"`
	TagRefs                []*DeviceChassisTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	PhysicalRouterBackRefs []*PhysicalRouter      `protobuf:"bytes,3014,rep,name=physical_router_back_refs,json=physicalRouterBackRefs,proto3" json:"physical_router_back_refs,omitempty" yaml:"physical_router_back_refs,omitempty"`
}

func (m *DeviceChassis) Reset()      { *m = DeviceChassis{} }
func (*DeviceChassis) ProtoMessage() {}
func (*DeviceChassis) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{61}
}
func (m *DeviceChassis) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceChassis.Unmarshal(m, b)
}
func (m *DeviceChassis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceChassis.Marshal(b, m, deterministic)
}
func (m *DeviceChassis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceChassis.Merge(m, src)
}
func (m *DeviceChassis) XXX_Size() int {
	return xxx_messageInfo_DeviceChassis.Size(m)
}
func (m *DeviceChassis) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceChassis.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceChassis proto.InternalMessageInfo

func (m *DeviceChassis) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *DeviceChassis) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *DeviceChassis) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *DeviceChassis) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *DeviceChassis) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *DeviceChassis) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *DeviceChassis) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceChassis) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *DeviceChassis) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *DeviceChassis) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *DeviceChassis) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DeviceChassis) GetDeviceChassisType() string {
	if m != nil {
		return m.DeviceChassisType
	}
	return ""
}

func (m *DeviceChassis) GetTagRefs() []*DeviceChassisTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *DeviceChassis) GetPhysicalRouterBackRefs() []*PhysicalRouter {
	if m != nil {
		return m.PhysicalRouterBackRefs
	}
	return nil
}

type DeviceChassisTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *DeviceChassisTagRef) Reset()      { *m = DeviceChassisTagRef{} }
func (*DeviceChassisTagRef) ProtoMessage() {}
func (*DeviceChassisTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{62}
}
func (m *DeviceChassisTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceChassisTagRef.Unmarshal(m, b)
}
func (m *DeviceChassisTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceChassisTagRef.Marshal(b, m, deterministic)
}
func (m *DeviceChassisTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceChassisTagRef.Merge(m, src)
}
func (m *DeviceChassisTagRef) XXX_Size() int {
	return xxx_messageInfo_DeviceChassisTagRef.Size(m)
}
func (m *DeviceChassisTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceChassisTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceChassisTagRef proto.InternalMessageInfo

func (m *DeviceChassisTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DeviceChassisTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DeviceChassisTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type DeviceFunctionalGroup struct {
	Annotations                               *KeyValuePairs                          `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion                      int64                                   `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                               string                                  `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                                    []string                                `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                                      string                                  `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                                   *IdPermsType                            `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                                      string                                  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                                string                                  `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                                string                                  `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                                    *PermType2                              `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                                      string                                  `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	DeviceFunctionalGroupDescription          string                                  `protobuf:"bytes,12,opt,name=device_functional_group_description,json=deviceFunctionalGroupDescription,proto3" json:"device_functional_group_description,omitempty" yaml:"device_functional_group_description,omitempty"`
	DeviceFunctionalGroupOsVersion            string                                  `protobuf:"bytes,13,opt,name=device_functional_group_os_version,json=deviceFunctionalGroupOsVersion,proto3" json:"device_functional_group_os_version,omitempty" yaml:"device_functional_group_os_version,omitempty"`
	DeviceFunctionalGroupRoutingBridgingRoles *RoutingBridgingRolesType               `protobuf:"bytes,14,opt,name=device_functional_group_routing_bridging_roles,json=deviceFunctionalGroupRoutingBridgingRoles,proto3" json:"device_functional_group_routing_bridging_roles,omitempty" yaml:"device_functional_group_routing_bridging_roles,omitempty"`
	PhysicalRoleRefs                          []*DeviceFunctionalGroupPhysicalRoleRef `protobuf:"bytes,1015,rep,name=physical_role_refs,json=physicalRoleRefs,proto3" json:"physical_role_refs,omitempty" yaml:"physical_role_refs,omitempty"`
	TagRefs                                   []*DeviceFunctionalGroupTagRef          `protobuf:"bytes,1016,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	PhysicalRouterBackRefs                    []*PhysicalRouter                       `protobuf:"bytes,3017,rep,name=physical_router_back_refs,json=physicalRouterBackRefs,proto3" json:"physical_router_back_refs,omitempty" yaml:"physical_router_back_refs,omitempty"`
}

func (m *DeviceFunctionalGroup) Reset()      { *m = DeviceFunctionalGroup{} }
func (*DeviceFunctionalGroup) ProtoMessage() {}
func (*DeviceFunctionalGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{63}
}
func (m *DeviceFunctionalGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceFunctionalGroup.Unmarshal(m, b)
}
func (m *DeviceFunctionalGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceFunctionalGroup.Marshal(b, m, deterministic)
}
func (m *DeviceFunctionalGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceFunctionalGroup.Merge(m, src)
}
func (m *DeviceFunctionalGroup) XXX_Size() int {
	return xxx_messageInfo_DeviceFunctionalGroup.Size(m)
}
func (m *DeviceFunctionalGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceFunctionalGroup.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceFunctionalGroup proto.InternalMessageInfo

func (m *DeviceFunctionalGroup) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *DeviceFunctionalGroup) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *DeviceFunctionalGroup) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *DeviceFunctionalGroup) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *DeviceFunctionalGroup) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *DeviceFunctionalGroup) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *DeviceFunctionalGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceFunctionalGroup) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *DeviceFunctionalGroup) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *DeviceFunctionalGroup) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *DeviceFunctionalGroup) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DeviceFunctionalGroup) GetDeviceFunctionalGroupDescription() string {
	if m != nil {
		return m.DeviceFunctionalGroupDescription
	}
	return ""
}

func (m *DeviceFunctionalGroup) GetDeviceFunctionalGroupOsVersion() string {
	if m != nil {
		return m.DeviceFunctionalGroupOsVersion
	}
	return ""
}

func (m *DeviceFunctionalGroup) GetDeviceFunctionalGroupRoutingBridgingRoles() *RoutingBridgingRolesType {
	if m != nil {
		return m.DeviceFunctionalGroupRoutingBridgingRoles
	}
	return nil
}

func (m *DeviceFunctionalGroup) GetPhysicalRoleRefs() []*DeviceFunctionalGroupPhysicalRoleRef {
	if m != nil {
		return m.PhysicalRoleRefs
	}
	return nil
}

func (m *DeviceFunctionalGroup) GetTagRefs() []*DeviceFunctionalGroupTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *DeviceFunctionalGroup) GetPhysicalRouterBackRefs() []*PhysicalRouter {
	if m != nil {
		return m.PhysicalRouterBackRefs
	}
	return nil
}

type DeviceFunctionalGroupPhysicalRoleRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *DeviceFunctionalGroupPhysicalRoleRef) Reset()      { *m = DeviceFunctionalGroupPhysicalRoleRef{} }
func (*DeviceFunctionalGroupPhysicalRoleRef) ProtoMessage() {}
func (*DeviceFunctionalGroupPhysicalRoleRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{64}
}
func (m *DeviceFunctionalGroupPhysicalRoleRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceFunctionalGroupPhysicalRoleRef.Unmarshal(m, b)
}
func (m *DeviceFunctionalGroupPhysicalRoleRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceFunctionalGroupPhysicalRoleRef.Marshal(b, m, deterministic)
}
func (m *DeviceFunctionalGroupPhysicalRoleRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceFunctionalGroupPhysicalRoleRef.Merge(m, src)
}
func (m *DeviceFunctionalGroupPhysicalRoleRef) XXX_Size() int {
	return xxx_messageInfo_DeviceFunctionalGroupPhysicalRoleRef.Size(m)
}
func (m *DeviceFunctionalGroupPhysicalRoleRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceFunctionalGroupPhysicalRoleRef.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceFunctionalGroupPhysicalRoleRef proto.InternalMessageInfo

func (m *DeviceFunctionalGroupPhysicalRoleRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DeviceFunctionalGroupPhysicalRoleRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DeviceFunctionalGroupPhysicalRoleRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type DeviceFunctionalGroupTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *DeviceFunctionalGroupTagRef) Reset()      { *m = DeviceFunctionalGroupTagRef{} }
func (*DeviceFunctionalGroupTagRef) ProtoMessage() {}
func (*DeviceFunctionalGroupTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{65}
}
func (m *DeviceFunctionalGroupTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceFunctionalGroupTagRef.Unmarshal(m, b)
}
func (m *DeviceFunctionalGroupTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceFunctionalGroupTagRef.Marshal(b, m, deterministic)
}
func (m *DeviceFunctionalGroupTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceFunctionalGroupTagRef.Merge(m, src)
}
func (m *DeviceFunctionalGroupTagRef) XXX_Size() int {
	return xxx_messageInfo_DeviceFunctionalGroupTagRef.Size(m)
}
func (m *DeviceFunctionalGroupTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceFunctionalGroupTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceFunctionalGroupTagRef proto.InternalMessageInfo

func (m *DeviceFunctionalGroupTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DeviceFunctionalGroupTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DeviceFunctionalGroupTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type DeviceImage struct {
	Annotations                   *KeyValuePairs            `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion          int64                     `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                   string                    `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                        []string                  `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                          string                    `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                       *IdPermsType              `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                          string                    `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                    string                    `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                    string                    `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                        *PermType2                `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                          string                    `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	DeviceImageDeviceFamily       string                    `protobuf:"bytes,12,opt,name=device_image_device_family,json=deviceImageDeviceFamily,proto3" json:"device_image_device_family,omitempty" yaml:"device_image_device_family,omitempty"`
	DeviceImageFileURI            string                    `protobuf:"bytes,13,opt,name=device_image_file_uri,json=deviceImageFileUri,proto3" json:"device_image_file_uri,omitempty" yaml:"device_image_file_uri,omitempty"`
	DeviceImageMD5                string                    `protobuf:"bytes,14,opt,name=device_image_md5,json=deviceImageMd5,proto3" json:"device_image_md5,omitempty" yaml:"device_image_md5,omitempty"`
	DeviceImageOsVersion          string                    `protobuf:"bytes,15,opt,name=device_image_os_version,json=deviceImageOsVersion,proto3" json:"device_image_os_version,omitempty" yaml:"device_image_os_version,omitempty"`
	DeviceImageSha1               string                    `protobuf:"bytes,16,opt,name=device_image_sha1,json=deviceImageSha1,proto3" json:"device_image_sha1,omitempty" yaml:"device_image_sha1,omitempty"`
	DeviceImageSize               int64                     `protobuf:"varint,17,opt,name=device_image_size,json=deviceImageSize,proto3" json:"device_image_size,omitempty" yaml:"device_image_size,omitempty"`
	DeviceImageSupportedPlatforms *DevicePlatformListType   `protobuf:"bytes,18,opt,name=device_image_supported_platforms,json=deviceImageSupportedPlatforms,proto3" json:"device_image_supported_platforms,omitempty" yaml:"device_image_supported_platforms,omitempty"`
	DeviceImageVendorName         string                    `protobuf:"bytes,19,opt,name=device_image_vendor_name,json=deviceImageVendorName,proto3" json:"device_image_vendor_name,omitempty" yaml:"device_image_vendor_name,omitempty"`
	HardwareRefs                  []*DeviceImageHardwareRef `protobuf:"bytes,1020,rep,name=hardware_refs,json=hardwareRefs,proto3" json:"hardware_refs,omitempty" yaml:"hardware_refs,omitempty"`
	TagRefs                       []*DeviceImageTagRef      `protobuf:"bytes,1021,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	PhysicalRouterBackRefs        []*PhysicalRouter         `protobuf:"bytes,3022,rep,name=physical_router_back_refs,json=physicalRouterBackRefs,proto3" json:"physical_router_back_refs,omitempty" yaml:"physical_router_back_refs,omitempty"`
}

func (m *DeviceImage) Reset()      { *m = DeviceImage{} }
func (*DeviceImage) ProtoMessage() {}
func (*DeviceImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{66}
}
func (m *DeviceImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceImage.Unmarshal(m, b)
}
func (m *DeviceImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceImage.Marshal(b, m, deterministic)
}
func (m *DeviceImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceImage.Merge(m, src)
}
func (m *DeviceImage) XXX_Size() int {
	return xxx_messageInfo_DeviceImage.Size(m)
}
func (m *DeviceImage) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceImage.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceImage proto.InternalMessageInfo

func (m *DeviceImage) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *DeviceImage) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *DeviceImage) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *DeviceImage) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *DeviceImage) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *DeviceImage) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *DeviceImage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeviceImage) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *DeviceImage) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *DeviceImage) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *DeviceImage) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DeviceImage) GetDeviceImageDeviceFamily() string {
	if m != nil {
		return m.DeviceImageDeviceFamily
	}
	return ""
}

func (m *DeviceImage) GetDeviceImageFileURI() string {
	if m != nil {
		return m.DeviceImageFileURI
	}
	return ""
}

func (m *DeviceImage) GetDeviceImageMD5() string {
	if m != nil {
		return m.DeviceImageMD5
	}
	return ""
}

func (m *DeviceImage) GetDeviceImageOsVersion() string {
	if m != nil {
		return m.DeviceImageOsVersion
	}
	return ""
}

func (m *DeviceImage) GetDeviceImageSha1() string {
	if m != nil {
		return m.DeviceImageSha1
	}
	return ""
}

func (m *DeviceImage) GetDeviceImageSize() int64 {
	if m != nil {
		return m.DeviceImageSize
	}
	return 0
}

func (m *DeviceImage) GetDeviceImageSupportedPlatforms() *DevicePlatformListType {
	if m != nil {
		return m.DeviceImageSupportedPlatforms
	}
	return nil
}

func (m *DeviceImage) GetDeviceImageVendorName() string {
	if m != nil {
		return m.DeviceImageVendorName
	}
	return ""
}

func (m *DeviceImage) GetHardwareRefs() []*DeviceImageHardwareRef {
	if m != nil {
		return m.HardwareRefs
	}
	return nil
}

func (m *DeviceImage) GetTagRefs() []*DeviceImageTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *DeviceImage) GetPhysicalRouterBackRefs() []*PhysicalRouter {
	if m != nil {
		return m.PhysicalRouterBackRefs
	}
	return nil
}

type DeviceImageHardwareRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *DeviceImageHardwareRef) Reset()      { *m = DeviceImageHardwareRef{} }
func (*DeviceImageHardwareRef) ProtoMessage() {}
func (*DeviceImageHardwareRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{67}
}
func (m *DeviceImageHardwareRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceImageHardwareRef.Unmarshal(m, b)
}
func (m *DeviceImageHardwareRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceImageHardwareRef.Marshal(b, m, deterministic)
}
func (m *DeviceImageHardwareRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceImageHardwareRef.Merge(m, src)
}
func (m *DeviceImageHardwareRef) XXX_Size() int {
	return xxx_messageInfo_DeviceImageHardwareRef.Size(m)
}
func (m *DeviceImageHardwareRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceImageHardwareRef.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceImageHardwareRef proto.InternalMessageInfo

func (m *DeviceImageHardwareRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DeviceImageHardwareRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DeviceImageHardwareRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type DeviceImageTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *DeviceImageTagRef) Reset()      { *m = DeviceImageTagRef{} }
func (*DeviceImageTagRef) ProtoMessage() {}
func (*DeviceImageTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{68}
}
func (m *DeviceImageTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceImageTagRef.Unmarshal(m, b)
}
func (m *DeviceImageTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceImageTagRef.Marshal(b, m, deterministic)
}
func (m *DeviceImageTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceImageTagRef.Merge(m, src)
}
func (m *DeviceImageTagRef) XXX_Size() int {
	return xxx_messageInfo_DeviceImageTagRef.Size(m)
}
func (m *DeviceImageTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceImageTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceImageTagRef proto.InternalMessageInfo

func (m *DeviceImageTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DeviceImageTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DeviceImageTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type DevicemgrNode struct {
	Annotations            *KeyValuePairs         `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion   int64                  `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName            string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                 []string               `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                   string                 `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                *IdPermsType           `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                   string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType             string                 `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID             string                 `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                 *PermType2             `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                   string                 `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	DevicemgrNodeIPAddress string                 `protobuf:"bytes,12,opt,name=devicemgr_node_ip_address,json=devicemgrNodeIpAddress,proto3" json:"devicemgr_node_ip_address,omitempty" yaml:"devicemgr_node_ip_address,omitempty"`
	TagRefs                []*DevicemgrNodeTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *DevicemgrNode) Reset()      { *m = DevicemgrNode{} }
func (*DevicemgrNode) ProtoMessage() {}
func (*DevicemgrNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{69}
}
func (m *DevicemgrNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DevicemgrNode.Unmarshal(m, b)
}
func (m *DevicemgrNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DevicemgrNode.Marshal(b, m, deterministic)
}
func (m *DevicemgrNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicemgrNode.Merge(m, src)
}
func (m *DevicemgrNode) XXX_Size() int {
	return xxx_messageInfo_DevicemgrNode.Size(m)
}
func (m *DevicemgrNode) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicemgrNode.DiscardUnknown(m)
}

var xxx_messageInfo_DevicemgrNode proto.InternalMessageInfo

func (m *DevicemgrNode) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *DevicemgrNode) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *DevicemgrNode) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *DevicemgrNode) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *DevicemgrNode) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *DevicemgrNode) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *DevicemgrNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DevicemgrNode) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *DevicemgrNode) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *DevicemgrNode) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *DevicemgrNode) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DevicemgrNode) GetDevicemgrNodeIPAddress() string {
	if m != nil {
		return m.DevicemgrNodeIPAddress
	}
	return ""
}

func (m *DevicemgrNode) GetTagRefs() []*DevicemgrNodeTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type DevicemgrNodeTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *DevicemgrNodeTagRef) Reset()      { *m = DevicemgrNodeTagRef{} }
func (*DevicemgrNodeTagRef) ProtoMessage() {}
func (*DevicemgrNodeTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{70}
}
func (m *DevicemgrNodeTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DevicemgrNodeTagRef.Unmarshal(m, b)
}
func (m *DevicemgrNodeTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DevicemgrNodeTagRef.Marshal(b, m, deterministic)
}
func (m *DevicemgrNodeTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicemgrNodeTagRef.Merge(m, src)
}
func (m *DevicemgrNodeTagRef) XXX_Size() int {
	return xxx_messageInfo_DevicemgrNodeTagRef.Size(m)
}
func (m *DevicemgrNodeTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicemgrNodeTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_DevicemgrNodeTagRef proto.InternalMessageInfo

func (m *DevicemgrNodeTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DevicemgrNodeTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DevicemgrNodeTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type DiscoveryServiceAssignment struct {
	Annotations          *KeyValuePairs                      `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                               `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string                              `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string                            `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string                              `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType                        `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string                              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string                              `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string                              `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2                          `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string                              `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TagRefs              []*DiscoveryServiceAssignmentTagRef `protobuf:"bytes,1012,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	DsaRules             []*DsaRule                          `protobuf:"bytes,2013,rep,name=dsa_rules,json=dsaRules,proto3" json:"dsa_rules,omitempty" yaml:"dsa_rules,omitempty"`
}

func (m *DiscoveryServiceAssignment) Reset()      { *m = DiscoveryServiceAssignment{} }
func (*DiscoveryServiceAssignment) ProtoMessage() {}
func (*DiscoveryServiceAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{71}
}
func (m *DiscoveryServiceAssignment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoveryServiceAssignment.Unmarshal(m, b)
}
func (m *DiscoveryServiceAssignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoveryServiceAssignment.Marshal(b, m, deterministic)
}
func (m *DiscoveryServiceAssignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveryServiceAssignment.Merge(m, src)
}
func (m *DiscoveryServiceAssignment) XXX_Size() int {
	return xxx_messageInfo_DiscoveryServiceAssignment.Size(m)
}
func (m *DiscoveryServiceAssignment) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveryServiceAssignment.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveryServiceAssignment proto.InternalMessageInfo

func (m *DiscoveryServiceAssignment) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *DiscoveryServiceAssignment) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *DiscoveryServiceAssignment) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *DiscoveryServiceAssignment) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *DiscoveryServiceAssignment) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *DiscoveryServiceAssignment) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *DiscoveryServiceAssignment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DiscoveryServiceAssignment) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *DiscoveryServiceAssignment) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *DiscoveryServiceAssignment) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *DiscoveryServiceAssignment) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DiscoveryServiceAssignment) GetTagRefs() []*DiscoveryServiceAssignmentTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *DiscoveryServiceAssignment) GetDsaRules() []*DsaRule {
	if m != nil {
		return m.DsaRules
	}
	return nil
}

type DiscoveryServiceAssignmentTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *DiscoveryServiceAssignmentTagRef) Reset()      { *m = DiscoveryServiceAssignmentTagRef{} }
func (*DiscoveryServiceAssignmentTagRef) ProtoMessage() {}
func (*DiscoveryServiceAssignmentTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{72}
}
func (m *DiscoveryServiceAssignmentTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoveryServiceAssignmentTagRef.Unmarshal(m, b)
}
func (m *DiscoveryServiceAssignmentTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoveryServiceAssignmentTagRef.Marshal(b, m, deterministic)
}
func (m *DiscoveryServiceAssignmentTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveryServiceAssignmentTagRef.Merge(m, src)
}
func (m *DiscoveryServiceAssignmentTagRef) XXX_Size() int {
	return xxx_messageInfo_DiscoveryServiceAssignmentTagRef.Size(m)
}
func (m *DiscoveryServiceAssignmentTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveryServiceAssignmentTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveryServiceAssignmentTagRef proto.InternalMessageInfo

func (m *DiscoveryServiceAssignmentTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DiscoveryServiceAssignmentTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DiscoveryServiceAssignmentTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type Domain struct {
	Annotations          *KeyValuePairs     `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64              `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string             `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string           `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string             `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType       `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string             `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string             `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string             `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2         `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string             `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	DomainLimits         *DomainLimitsType  `protobuf:"bytes,12,opt,name=domain_limits,json=domainLimits,proto3" json:"domain_limits,omitempty" yaml:"domain_limits,omitempty"`
	TagRefs              []*DomainTagRef    `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	APIAccessLists       []*APIAccessList   `protobuf:"bytes,2018,rep,name=api_access_lists,json=apiAccessLists,proto3" json:"api_access_lists,omitempty" yaml:"api_access_lists,omitempty"`
	Namespaces           []*Namespace       `protobuf:"bytes,2014,rep,name=namespaces,proto3" json:"namespaces,omitempty" yaml:"namespaces,omitempty"`
	Projects             []*Project         `protobuf:"bytes,2015,rep,name=projects,proto3" json:"projects,omitempty" yaml:"projects,omitempty"`
	ServiceTemplates     []*ServiceTemplate `protobuf:"bytes,2016,rep,name=service_templates,json=serviceTemplates,proto3" json:"service_templates,omitempty" yaml:"service_templates,omitempty"`
	VirtualDNSs          []*VirtualDNS      `protobuf:"bytes,2017,rep,name=virtual_DNSs,json=virtualDNSs,proto3" json:"virtual_DNSs,omitempty" yaml:"virtual_DNSs,omitempty"`
}

func (m *Domain) Reset()      { *m = Domain{} }
func (*Domain) ProtoMessage() {}
func (*Domain) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{73}
}
func (m *Domain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Domain.Unmarshal(m, b)
}
func (m *Domain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Domain.Marshal(b, m, deterministic)
}
func (m *Domain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Domain.Merge(m, src)
}
func (m *Domain) XXX_Size() int {
	return xxx_messageInfo_Domain.Size(m)
}
func (m *Domain) XXX_DiscardUnknown() {
	xxx_messageInfo_Domain.DiscardUnknown(m)
}

var xxx_messageInfo_Domain proto.InternalMessageInfo

func (m *Domain) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Domain) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *Domain) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Domain) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *Domain) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Domain) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *Domain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Domain) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *Domain) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *Domain) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *Domain) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Domain) GetDomainLimits() *DomainLimitsType {
	if m != nil {
		return m.DomainLimits
	}
	return nil
}

func (m *Domain) GetTagRefs() []*DomainTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *Domain) GetAPIAccessLists() []*APIAccessList {
	if m != nil {
		return m.APIAccessLists
	}
	return nil
}

func (m *Domain) GetNamespaces() []*Namespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *Domain) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *Domain) GetServiceTemplates() []*ServiceTemplate {
	if m != nil {
		return m.ServiceTemplates
	}
	return nil
}

func (m *Domain) GetVirtualDNSs() []*VirtualDNS {
	if m != nil {
		return m.VirtualDNSs
	}
	return nil
}

type DomainTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *DomainTagRef) Reset()      { *m = DomainTagRef{} }
func (*DomainTagRef) ProtoMessage() {}
func (*DomainTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{74}
}
func (m *DomainTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainTagRef.Unmarshal(m, b)
}
func (m *DomainTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainTagRef.Marshal(b, m, deterministic)
}
func (m *DomainTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainTagRef.Merge(m, src)
}
func (m *DomainTagRef) XXX_Size() int {
	return xxx_messageInfo_DomainTagRef.Size(m)
}
func (m *DomainTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_DomainTagRef proto.InternalMessageInfo

func (m *DomainTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DomainTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DomainTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type DsaRule struct {
	Annotations          *KeyValuePairs                  `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                           `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string                          `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string                        `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string                          `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType                    `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string                          `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string                          `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string                          `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2                      `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string                          `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	DsaRuleEntry         *DiscoveryServiceAssignmentType `protobuf:"bytes,12,opt,name=dsa_rule_entry,json=dsaRuleEntry,proto3" json:"dsa_rule_entry,omitempty" yaml:"dsa_rule_entry,omitempty"`
	TagRefs              []*DsaRuleTagRef                `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *DsaRule) Reset()      { *m = DsaRule{} }
func (*DsaRule) ProtoMessage() {}
func (*DsaRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{75}
}
func (m *DsaRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DsaRule.Unmarshal(m, b)
}
func (m *DsaRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DsaRule.Marshal(b, m, deterministic)
}
func (m *DsaRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DsaRule.Merge(m, src)
}
func (m *DsaRule) XXX_Size() int {
	return xxx_messageInfo_DsaRule.Size(m)
}
func (m *DsaRule) XXX_DiscardUnknown() {
	xxx_messageInfo_DsaRule.DiscardUnknown(m)
}

var xxx_messageInfo_DsaRule proto.InternalMessageInfo

func (m *DsaRule) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *DsaRule) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *DsaRule) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *DsaRule) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *DsaRule) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *DsaRule) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *DsaRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DsaRule) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *DsaRule) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *DsaRule) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *DsaRule) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DsaRule) GetDsaRuleEntry() *DiscoveryServiceAssignmentType {
	if m != nil {
		return m.DsaRuleEntry
	}
	return nil
}

func (m *DsaRule) GetTagRefs() []*DsaRuleTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type DsaRuleTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *DsaRuleTagRef) Reset()      { *m = DsaRuleTagRef{} }
func (*DsaRuleTagRef) ProtoMessage() {}
func (*DsaRuleTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{76}
}
func (m *DsaRuleTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DsaRuleTagRef.Unmarshal(m, b)
}
func (m *DsaRuleTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DsaRuleTagRef.Marshal(b, m, deterministic)
}
func (m *DsaRuleTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DsaRuleTagRef.Merge(m, src)
}
func (m *DsaRuleTagRef) XXX_Size() int {
	return xxx_messageInfo_DsaRuleTagRef.Size(m)
}
func (m *DsaRuleTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_DsaRuleTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_DsaRuleTagRef proto.InternalMessageInfo

func (m *DsaRuleTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *DsaRuleTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *DsaRuleTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type E2ServiceProvider struct {
	Annotations                  *KeyValuePairs                        `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion         int64                                 `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                  string                                `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                       []string                              `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                         string                                `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                      *IdPermsType                          `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                         string                                `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                   string                                `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                   string                                `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                       *PermType2                            `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                         string                                `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	E2ServiceProviderPromiscuous bool                                  `protobuf:"varint,12,opt,name=e2_service_provider_promiscuous,json=e2ServiceProviderPromiscuous,proto3" json:"e2_service_provider_promiscuous,omitempty" yaml:"e2_service_provider_promiscuous,omitempty"`
	PeeringPolicyRefs            []*E2ServiceProviderPeeringPolicyRef  `protobuf:"bytes,1013,rep,name=peering_policy_refs,json=peeringPolicyRefs,proto3" json:"peering_policy_refs,omitempty" yaml:"peering_policy_refs,omitempty"`
	PhysicalRouterRefs           []*E2ServiceProviderPhysicalRouterRef `protobuf:"bytes,1014,rep,name=physical_router_refs,json=physicalRouterRefs,proto3" json:"physical_router_refs,omitempty" yaml:"physical_router_refs,omitempty"`
	TagRefs                      []*E2ServiceProviderTagRef            `protobuf:"bytes,1015,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *E2ServiceProvider) Reset()      { *m = E2ServiceProvider{} }
func (*E2ServiceProvider) ProtoMessage() {}
func (*E2ServiceProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{77}
}
func (m *E2ServiceProvider) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_E2ServiceProvider.Unmarshal(m, b)
}
func (m *E2ServiceProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_E2ServiceProvider.Marshal(b, m, deterministic)
}
func (m *E2ServiceProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ServiceProvider.Merge(m, src)
}
func (m *E2ServiceProvider) XXX_Size() int {
	return xxx_messageInfo_E2ServiceProvider.Size(m)
}
func (m *E2ServiceProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ServiceProvider.DiscardUnknown(m)
}

var xxx_messageInfo_E2ServiceProvider proto.InternalMessageInfo

func (m *E2ServiceProvider) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *E2ServiceProvider) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *E2ServiceProvider) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *E2ServiceProvider) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *E2ServiceProvider) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *E2ServiceProvider) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *E2ServiceProvider) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *E2ServiceProvider) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *E2ServiceProvider) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *E2ServiceProvider) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *E2ServiceProvider) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *E2ServiceProvider) GetE2ServiceProviderPromiscuous() bool {
	if m != nil {
		return m.E2ServiceProviderPromiscuous
	}
	return false
}

func (m *E2ServiceProvider) GetPeeringPolicyRefs() []*E2ServiceProviderPeeringPolicyRef {
	if m != nil {
		return m.PeeringPolicyRefs
	}
	return nil
}

func (m *E2ServiceProvider) GetPhysicalRouterRefs() []*E2ServiceProviderPhysicalRouterRef {
	if m != nil {
		return m.PhysicalRouterRefs
	}
	return nil
}

func (m *E2ServiceProvider) GetTagRefs() []*E2ServiceProviderTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type E2ServiceProviderPeeringPolicyRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *E2ServiceProviderPeeringPolicyRef) Reset()      { *m = E2ServiceProviderPeeringPolicyRef{} }
func (*E2ServiceProviderPeeringPolicyRef) ProtoMessage() {}
func (*E2ServiceProviderPeeringPolicyRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{78}
}
func (m *E2ServiceProviderPeeringPolicyRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_E2ServiceProviderPeeringPolicyRef.Unmarshal(m, b)
}
func (m *E2ServiceProviderPeeringPolicyRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_E2ServiceProviderPeeringPolicyRef.Marshal(b, m, deterministic)
}
func (m *E2ServiceProviderPeeringPolicyRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ServiceProviderPeeringPolicyRef.Merge(m, src)
}
func (m *E2ServiceProviderPeeringPolicyRef) XXX_Size() int {
	return xxx_messageInfo_E2ServiceProviderPeeringPolicyRef.Size(m)
}
func (m *E2ServiceProviderPeeringPolicyRef) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ServiceProviderPeeringPolicyRef.DiscardUnknown(m)
}

var xxx_messageInfo_E2ServiceProviderPeeringPolicyRef proto.InternalMessageInfo

func (m *E2ServiceProviderPeeringPolicyRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *E2ServiceProviderPeeringPolicyRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *E2ServiceProviderPeeringPolicyRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type E2ServiceProviderPhysicalRouterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *E2ServiceProviderPhysicalRouterRef) Reset()      { *m = E2ServiceProviderPhysicalRouterRef{} }
func (*E2ServiceProviderPhysicalRouterRef) ProtoMessage() {}
func (*E2ServiceProviderPhysicalRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{79}
}
func (m *E2ServiceProviderPhysicalRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_E2ServiceProviderPhysicalRouterRef.Unmarshal(m, b)
}
func (m *E2ServiceProviderPhysicalRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_E2ServiceProviderPhysicalRouterRef.Marshal(b, m, deterministic)
}
func (m *E2ServiceProviderPhysicalRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ServiceProviderPhysicalRouterRef.Merge(m, src)
}
func (m *E2ServiceProviderPhysicalRouterRef) XXX_Size() int {
	return xxx_messageInfo_E2ServiceProviderPhysicalRouterRef.Size(m)
}
func (m *E2ServiceProviderPhysicalRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ServiceProviderPhysicalRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_E2ServiceProviderPhysicalRouterRef proto.InternalMessageInfo

func (m *E2ServiceProviderPhysicalRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *E2ServiceProviderPhysicalRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *E2ServiceProviderPhysicalRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type E2ServiceProviderTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *E2ServiceProviderTagRef) Reset()      { *m = E2ServiceProviderTagRef{} }
func (*E2ServiceProviderTagRef) ProtoMessage() {}
func (*E2ServiceProviderTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{80}
}
func (m *E2ServiceProviderTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_E2ServiceProviderTagRef.Unmarshal(m, b)
}
func (m *E2ServiceProviderTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_E2ServiceProviderTagRef.Marshal(b, m, deterministic)
}
func (m *E2ServiceProviderTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_E2ServiceProviderTagRef.Merge(m, src)
}
func (m *E2ServiceProviderTagRef) XXX_Size() int {
	return xxx_messageInfo_E2ServiceProviderTagRef.Size(m)
}
func (m *E2ServiceProviderTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_E2ServiceProviderTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_E2ServiceProviderTagRef proto.InternalMessageInfo

func (m *E2ServiceProviderTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *E2ServiceProviderTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *E2ServiceProviderTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FabricNamespace struct {
	Annotations          *KeyValuePairs           `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                    `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string                   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string                 `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string                   `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType             `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string                   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string                   `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string                   `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2               `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string                   `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	FabricNamespaceType  string                   `protobuf:"bytes,12,opt,name=fabric_namespace_type,json=fabricNamespaceType,proto3" json:"fabric_namespace_type,omitempty" yaml:"fabric_namespace_type,omitempty"`
	FabricNamespaceValue *NamespaceValue          `protobuf:"bytes,13,opt,name=fabric_namespace_value,json=fabricNamespaceValue,proto3" json:"fabric_namespace_value,omitempty" yaml:"fabric_namespace_value,omitempty"`
	TagRefs              []*FabricNamespaceTagRef `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *FabricNamespace) Reset()      { *m = FabricNamespace{} }
func (*FabricNamespace) ProtoMessage() {}
func (*FabricNamespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{81}
}
func (m *FabricNamespace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FabricNamespace.Unmarshal(m, b)
}
func (m *FabricNamespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FabricNamespace.Marshal(b, m, deterministic)
}
func (m *FabricNamespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FabricNamespace.Merge(m, src)
}
func (m *FabricNamespace) XXX_Size() int {
	return xxx_messageInfo_FabricNamespace.Size(m)
}
func (m *FabricNamespace) XXX_DiscardUnknown() {
	xxx_messageInfo_FabricNamespace.DiscardUnknown(m)
}

var xxx_messageInfo_FabricNamespace proto.InternalMessageInfo

func (m *FabricNamespace) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *FabricNamespace) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *FabricNamespace) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *FabricNamespace) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *FabricNamespace) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *FabricNamespace) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *FabricNamespace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FabricNamespace) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *FabricNamespace) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *FabricNamespace) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *FabricNamespace) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FabricNamespace) GetFabricNamespaceType() string {
	if m != nil {
		return m.FabricNamespaceType
	}
	return ""
}

func (m *FabricNamespace) GetFabricNamespaceValue() *NamespaceValue {
	if m != nil {
		return m.FabricNamespaceValue
	}
	return nil
}

func (m *FabricNamespace) GetTagRefs() []*FabricNamespaceTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type FabricNamespaceTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FabricNamespaceTagRef) Reset()      { *m = FabricNamespaceTagRef{} }
func (*FabricNamespaceTagRef) ProtoMessage() {}
func (*FabricNamespaceTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{82}
}
func (m *FabricNamespaceTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FabricNamespaceTagRef.Unmarshal(m, b)
}
func (m *FabricNamespaceTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FabricNamespaceTagRef.Marshal(b, m, deterministic)
}
func (m *FabricNamespaceTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FabricNamespaceTagRef.Merge(m, src)
}
func (m *FabricNamespaceTagRef) XXX_Size() int {
	return xxx_messageInfo_FabricNamespaceTagRef.Size(m)
}
func (m *FabricNamespaceTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FabricNamespaceTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_FabricNamespaceTagRef proto.InternalMessageInfo

func (m *FabricNamespaceTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FabricNamespaceTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FabricNamespaceTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type Fabric struct {
	Annotations            *KeyValuePairs             `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion   int64                      `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName            string                     `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                 []string                   `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                   string                     `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                *IdPermsType               `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                   string                     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType             string                     `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID             string                     `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                 *PermType2                 `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                   string                     `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	FabricCredentials      *DeviceCredentialList      `protobuf:"bytes,12,opt,name=fabric_credentials,json=fabricCredentials,proto3" json:"fabric_credentials,omitempty" yaml:"fabric_credentials,omitempty"`
	FabricEnterpriseStyle  bool                       `protobuf:"varint,13,opt,name=fabric_enterprise_style,json=fabricEnterpriseStyle,proto3" json:"fabric_enterprise_style,omitempty" yaml:"fabric_enterprise_style,omitempty"`
	FabricOsVersion        string                     `protobuf:"bytes,14,opt,name=fabric_os_version,json=fabricOsVersion,proto3" json:"fabric_os_version,omitempty" yaml:"fabric_os_version,omitempty"`
	FabricZTP              bool                       `protobuf:"varint,15,opt,name=fabric_ztp,json=fabricZtp,proto3" json:"fabric_ztp,omitempty" yaml:"fabric_ztp,omitempty"`
	IntentMapRefs          []*FabricIntentMapRef      `protobuf:"bytes,1016,rep,name=intent_map_refs,json=intentMapRefs,proto3" json:"intent_map_refs,omitempty" yaml:"intent_map_refs,omitempty"`
	NodeProfileRefs        []*FabricNodeProfileRef    `protobuf:"bytes,1017,rep,name=node_profile_refs,json=nodeProfileRefs,proto3" json:"node_profile_refs,omitempty" yaml:"node_profile_refs,omitempty"`
	TagRefs                []*FabricTagRef            `protobuf:"bytes,1018,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualNetworkRefs     []*FabricVirtualNetworkRef `protobuf:"bytes,1019,rep,name=virtual_network_refs,json=virtualNetworkRefs,proto3" json:"virtual_network_refs,omitempty" yaml:"virtual_network_refs,omitempty"`
	PhysicalRouterBackRefs []*PhysicalRouter          `protobuf:"bytes,3022,rep,name=physical_router_back_refs,json=physicalRouterBackRefs,proto3" json:"physical_router_back_refs,omitempty" yaml:"physical_router_back_refs,omitempty"`
	FabricNamespaces       []*FabricNamespace         `protobuf:"bytes,2020,rep,name=fabric_namespaces,json=fabricNamespaces,proto3" json:"fabric_namespaces,omitempty" yaml:"fabric_namespaces,omitempty"`
	VirtualPortGroups      []*VirtualPortGroup        `protobuf:"bytes,2021,rep,name=virtual_port_groups,json=virtualPortGroups,proto3" json:"virtual_port_groups,omitempty" yaml:"virtual_port_groups,omitempty"`
}

func (m *Fabric) Reset()      { *m = Fabric{} }
func (*Fabric) ProtoMessage() {}
func (*Fabric) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{83}
}
func (m *Fabric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fabric.Unmarshal(m, b)
}
func (m *Fabric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fabric.Marshal(b, m, deterministic)
}
func (m *Fabric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fabric.Merge(m, src)
}
func (m *Fabric) XXX_Size() int {
	return xxx_messageInfo_Fabric.Size(m)
}
func (m *Fabric) XXX_DiscardUnknown() {
	xxx_messageInfo_Fabric.DiscardUnknown(m)
}

var xxx_messageInfo_Fabric proto.InternalMessageInfo

func (m *Fabric) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Fabric) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *Fabric) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Fabric) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *Fabric) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Fabric) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *Fabric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Fabric) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *Fabric) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *Fabric) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *Fabric) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Fabric) GetFabricCredentials() *DeviceCredentialList {
	if m != nil {
		return m.FabricCredentials
	}
	return nil
}

func (m *Fabric) GetFabricEnterpriseStyle() bool {
	if m != nil {
		return m.FabricEnterpriseStyle
	}
	return false
}

func (m *Fabric) GetFabricOsVersion() string {
	if m != nil {
		return m.FabricOsVersion
	}
	return ""
}

func (m *Fabric) GetFabricZTP() bool {
	if m != nil {
		return m.FabricZTP
	}
	return false
}

func (m *Fabric) GetIntentMapRefs() []*FabricIntentMapRef {
	if m != nil {
		return m.IntentMapRefs
	}
	return nil
}

func (m *Fabric) GetNodeProfileRefs() []*FabricNodeProfileRef {
	if m != nil {
		return m.NodeProfileRefs
	}
	return nil
}

func (m *Fabric) GetTagRefs() []*FabricTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *Fabric) GetVirtualNetworkRefs() []*FabricVirtualNetworkRef {
	if m != nil {
		return m.VirtualNetworkRefs
	}
	return nil
}

func (m *Fabric) GetPhysicalRouterBackRefs() []*PhysicalRouter {
	if m != nil {
		return m.PhysicalRouterBackRefs
	}
	return nil
}

func (m *Fabric) GetFabricNamespaces() []*FabricNamespace {
	if m != nil {
		return m.FabricNamespaces
	}
	return nil
}

func (m *Fabric) GetVirtualPortGroups() []*VirtualPortGroup {
	if m != nil {
		return m.VirtualPortGroups
	}
	return nil
}

type FabricIntentMapRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FabricIntentMapRef) Reset()      { *m = FabricIntentMapRef{} }
func (*FabricIntentMapRef) ProtoMessage() {}
func (*FabricIntentMapRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{84}
}
func (m *FabricIntentMapRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FabricIntentMapRef.Unmarshal(m, b)
}
func (m *FabricIntentMapRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FabricIntentMapRef.Marshal(b, m, deterministic)
}
func (m *FabricIntentMapRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FabricIntentMapRef.Merge(m, src)
}
func (m *FabricIntentMapRef) XXX_Size() int {
	return xxx_messageInfo_FabricIntentMapRef.Size(m)
}
func (m *FabricIntentMapRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FabricIntentMapRef.DiscardUnknown(m)
}

var xxx_messageInfo_FabricIntentMapRef proto.InternalMessageInfo

func (m *FabricIntentMapRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FabricIntentMapRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FabricIntentMapRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FabricNodeProfileRef struct {
	UUID string             `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string           `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string             `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *SerialNumListType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *FabricNodeProfileRef) Reset()      { *m = FabricNodeProfileRef{} }
func (*FabricNodeProfileRef) ProtoMessage() {}
func (*FabricNodeProfileRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{85}
}
func (m *FabricNodeProfileRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FabricNodeProfileRef.Unmarshal(m, b)
}
func (m *FabricNodeProfileRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FabricNodeProfileRef.Marshal(b, m, deterministic)
}
func (m *FabricNodeProfileRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FabricNodeProfileRef.Merge(m, src)
}
func (m *FabricNodeProfileRef) XXX_Size() int {
	return xxx_messageInfo_FabricNodeProfileRef.Size(m)
}
func (m *FabricNodeProfileRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FabricNodeProfileRef.DiscardUnknown(m)
}

var xxx_messageInfo_FabricNodeProfileRef proto.InternalMessageInfo

func (m *FabricNodeProfileRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FabricNodeProfileRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FabricNodeProfileRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *FabricNodeProfileRef) GetAttr() *SerialNumListType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type FabricTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FabricTagRef) Reset()      { *m = FabricTagRef{} }
func (*FabricTagRef) ProtoMessage() {}
func (*FabricTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{86}
}
func (m *FabricTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FabricTagRef.Unmarshal(m, b)
}
func (m *FabricTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FabricTagRef.Marshal(b, m, deterministic)
}
func (m *FabricTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FabricTagRef.Merge(m, src)
}
func (m *FabricTagRef) XXX_Size() int {
	return xxx_messageInfo_FabricTagRef.Size(m)
}
func (m *FabricTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FabricTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_FabricTagRef proto.InternalMessageInfo

func (m *FabricTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FabricTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FabricTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FabricVirtualNetworkRef struct {
	UUID string            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string          `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string            `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *FabricNetworkTag `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *FabricVirtualNetworkRef) Reset()      { *m = FabricVirtualNetworkRef{} }
func (*FabricVirtualNetworkRef) ProtoMessage() {}
func (*FabricVirtualNetworkRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{87}
}
func (m *FabricVirtualNetworkRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FabricVirtualNetworkRef.Unmarshal(m, b)
}
func (m *FabricVirtualNetworkRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FabricVirtualNetworkRef.Marshal(b, m, deterministic)
}
func (m *FabricVirtualNetworkRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FabricVirtualNetworkRef.Merge(m, src)
}
func (m *FabricVirtualNetworkRef) XXX_Size() int {
	return xxx_messageInfo_FabricVirtualNetworkRef.Size(m)
}
func (m *FabricVirtualNetworkRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FabricVirtualNetworkRef.DiscardUnknown(m)
}

var xxx_messageInfo_FabricVirtualNetworkRef proto.InternalMessageInfo

func (m *FabricVirtualNetworkRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FabricVirtualNetworkRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FabricVirtualNetworkRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *FabricVirtualNetworkRef) GetAttr() *FabricNetworkTag {
	if m != nil {
		return m.Attr
	}
	return nil
}

type FeatureConfig struct {
	Annotations                   *KeyValuePairs         `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion          int64                  `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                   string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                        []string               `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                          string                 `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                       *IdPermsType           `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                    string                 `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                    string                 `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                        *PermType2             `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                          string                 `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	FeatureConfigAdditionalParams *KeyValuePairs         `protobuf:"bytes,12,opt,name=feature_config_additional_params,json=featureConfigAdditionalParams,proto3" json:"feature_config_additional_params,omitempty" yaml:"feature_config_additional_params,omitempty"`
	FeatureConfigVendorConfig     *KeyValuePairs         `protobuf:"bytes,13,opt,name=feature_config_vendor_config,json=featureConfigVendorConfig,proto3" json:"feature_config_vendor_config,omitempty" yaml:"feature_config_vendor_config,omitempty"`
	TagRefs                       []*FeatureConfigTagRef `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *FeatureConfig) Reset()      { *m = FeatureConfig{} }
func (*FeatureConfig) ProtoMessage() {}
func (*FeatureConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{88}
}
func (m *FeatureConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureConfig.Unmarshal(m, b)
}
func (m *FeatureConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureConfig.Marshal(b, m, deterministic)
}
func (m *FeatureConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureConfig.Merge(m, src)
}
func (m *FeatureConfig) XXX_Size() int {
	return xxx_messageInfo_FeatureConfig.Size(m)
}
func (m *FeatureConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureConfig proto.InternalMessageInfo

func (m *FeatureConfig) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *FeatureConfig) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *FeatureConfig) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *FeatureConfig) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *FeatureConfig) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *FeatureConfig) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *FeatureConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FeatureConfig) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *FeatureConfig) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *FeatureConfig) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *FeatureConfig) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FeatureConfig) GetFeatureConfigAdditionalParams() *KeyValuePairs {
	if m != nil {
		return m.FeatureConfigAdditionalParams
	}
	return nil
}

func (m *FeatureConfig) GetFeatureConfigVendorConfig() *KeyValuePairs {
	if m != nil {
		return m.FeatureConfigVendorConfig
	}
	return nil
}

func (m *FeatureConfig) GetTagRefs() []*FeatureConfigTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type FeatureConfigTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FeatureConfigTagRef) Reset()      { *m = FeatureConfigTagRef{} }
func (*FeatureConfigTagRef) ProtoMessage() {}
func (*FeatureConfigTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{89}
}
func (m *FeatureConfigTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureConfigTagRef.Unmarshal(m, b)
}
func (m *FeatureConfigTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureConfigTagRef.Marshal(b, m, deterministic)
}
func (m *FeatureConfigTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureConfigTagRef.Merge(m, src)
}
func (m *FeatureConfigTagRef) XXX_Size() int {
	return xxx_messageInfo_FeatureConfigTagRef.Size(m)
}
func (m *FeatureConfigTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureConfigTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureConfigTagRef proto.InternalMessageInfo

func (m *FeatureConfigTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FeatureConfigTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FeatureConfigTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FeatureFlag struct {
	Annotations          *KeyValuePairs       `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string             `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string               `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType         `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string               `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string               `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2           `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string               `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	EnableFeature        bool                 `protobuf:"varint,12,opt,name=enable_feature,json=enableFeature,proto3" json:"enable_feature,omitempty" yaml:"enable_feature,omitempty"`
	FeatureDescription   string               `protobuf:"bytes,13,opt,name=feature_description,json=featureDescription,proto3" json:"feature_description,omitempty" yaml:"feature_description,omitempty"`
	FeatureFlagVersion   string               `protobuf:"bytes,14,opt,name=feature_flag_version,json=featureFlagVersion,proto3" json:"feature_flag_version,omitempty" yaml:"feature_flag_version,omitempty"`
	FeatureID            string               `protobuf:"bytes,15,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty" yaml:"feature_id,omitempty"`
	FeatureRelease       string               `protobuf:"bytes,16,opt,name=feature_release,json=featureRelease,proto3" json:"feature_release,omitempty" yaml:"feature_release,omitempty"`
	FeatureState         string               `protobuf:"bytes,17,opt,name=feature_state,json=featureState,proto3" json:"feature_state,omitempty" yaml:"feature_state,omitempty"`
	TagRefs              []*FeatureFlagTagRef `protobuf:"bytes,1018,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *FeatureFlag) Reset()      { *m = FeatureFlag{} }
func (*FeatureFlag) ProtoMessage() {}
func (*FeatureFlag) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{90}
}
func (m *FeatureFlag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureFlag.Unmarshal(m, b)
}
func (m *FeatureFlag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureFlag.Marshal(b, m, deterministic)
}
func (m *FeatureFlag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureFlag.Merge(m, src)
}
func (m *FeatureFlag) XXX_Size() int {
	return xxx_messageInfo_FeatureFlag.Size(m)
}
func (m *FeatureFlag) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureFlag.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureFlag proto.InternalMessageInfo

func (m *FeatureFlag) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *FeatureFlag) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *FeatureFlag) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *FeatureFlag) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *FeatureFlag) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *FeatureFlag) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *FeatureFlag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FeatureFlag) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *FeatureFlag) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *FeatureFlag) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *FeatureFlag) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FeatureFlag) GetEnableFeature() bool {
	if m != nil {
		return m.EnableFeature
	}
	return false
}

func (m *FeatureFlag) GetFeatureDescription() string {
	if m != nil {
		return m.FeatureDescription
	}
	return ""
}

func (m *FeatureFlag) GetFeatureFlagVersion() string {
	if m != nil {
		return m.FeatureFlagVersion
	}
	return ""
}

func (m *FeatureFlag) GetFeatureID() string {
	if m != nil {
		return m.FeatureID
	}
	return ""
}

func (m *FeatureFlag) GetFeatureRelease() string {
	if m != nil {
		return m.FeatureRelease
	}
	return ""
}

func (m *FeatureFlag) GetFeatureState() string {
	if m != nil {
		return m.FeatureState
	}
	return ""
}

func (m *FeatureFlag) GetTagRefs() []*FeatureFlagTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type FeatureFlagTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FeatureFlagTagRef) Reset()      { *m = FeatureFlagTagRef{} }
func (*FeatureFlagTagRef) ProtoMessage() {}
func (*FeatureFlagTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{91}
}
func (m *FeatureFlagTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureFlagTagRef.Unmarshal(m, b)
}
func (m *FeatureFlagTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureFlagTagRef.Marshal(b, m, deterministic)
}
func (m *FeatureFlagTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureFlagTagRef.Merge(m, src)
}
func (m *FeatureFlagTagRef) XXX_Size() int {
	return xxx_messageInfo_FeatureFlagTagRef.Size(m)
}
func (m *FeatureFlagTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureFlagTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureFlagTagRef proto.InternalMessageInfo

func (m *FeatureFlagTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FeatureFlagTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FeatureFlagTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type Feature struct {
	Annotations            *KeyValuePairs       `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion   int64                `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName            string               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                 []string             `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                   string               `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                *IdPermsType         `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                   string               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType             string               `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID             string               `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                 *PermType2           `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                   string               `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	FeatureRefs            []*FeatureFeatureRef `protobuf:"bytes,1012,rep,name=feature_refs,json=featureRefs,proto3" json:"feature_refs,omitempty" yaml:"feature_refs,omitempty"`
	TagRefs                []*FeatureTagRef     `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	FeatureBackRefs        []*Feature           `protobuf:"bytes,3014,rep,name=feature_back_refs,json=featureBackRefs,proto3" json:"feature_back_refs,omitempty" yaml:"feature_back_refs,omitempty"`
	RoleDefinitionBackRefs []*RoleDefinition    `protobuf:"bytes,3015,rep,name=role_definition_back_refs,json=roleDefinitionBackRefs,proto3" json:"role_definition_back_refs,omitempty" yaml:"role_definition_back_refs,omitempty"`
}

func (m *Feature) Reset()      { *m = Feature{} }
func (*Feature) ProtoMessage() {}
func (*Feature) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{92}
}
func (m *Feature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Feature.Unmarshal(m, b)
}
func (m *Feature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Feature.Marshal(b, m, deterministic)
}
func (m *Feature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feature.Merge(m, src)
}
func (m *Feature) XXX_Size() int {
	return xxx_messageInfo_Feature.Size(m)
}
func (m *Feature) XXX_DiscardUnknown() {
	xxx_messageInfo_Feature.DiscardUnknown(m)
}

var xxx_messageInfo_Feature proto.InternalMessageInfo

func (m *Feature) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Feature) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *Feature) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Feature) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *Feature) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Feature) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *Feature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Feature) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *Feature) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *Feature) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *Feature) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Feature) GetFeatureRefs() []*FeatureFeatureRef {
	if m != nil {
		return m.FeatureRefs
	}
	return nil
}

func (m *Feature) GetTagRefs() []*FeatureTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *Feature) GetFeatureBackRefs() []*Feature {
	if m != nil {
		return m.FeatureBackRefs
	}
	return nil
}

func (m *Feature) GetRoleDefinitionBackRefs() []*RoleDefinition {
	if m != nil {
		return m.RoleDefinitionBackRefs
	}
	return nil
}

type FeatureFeatureRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FeatureFeatureRef) Reset()      { *m = FeatureFeatureRef{} }
func (*FeatureFeatureRef) ProtoMessage() {}
func (*FeatureFeatureRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{93}
}
func (m *FeatureFeatureRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureFeatureRef.Unmarshal(m, b)
}
func (m *FeatureFeatureRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureFeatureRef.Marshal(b, m, deterministic)
}
func (m *FeatureFeatureRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureFeatureRef.Merge(m, src)
}
func (m *FeatureFeatureRef) XXX_Size() int {
	return xxx_messageInfo_FeatureFeatureRef.Size(m)
}
func (m *FeatureFeatureRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureFeatureRef.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureFeatureRef proto.InternalMessageInfo

func (m *FeatureFeatureRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FeatureFeatureRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FeatureFeatureRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FeatureTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FeatureTagRef) Reset()      { *m = FeatureTagRef{} }
func (*FeatureTagRef) ProtoMessage() {}
func (*FeatureTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{94}
}
func (m *FeatureTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureTagRef.Unmarshal(m, b)
}
func (m *FeatureTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureTagRef.Marshal(b, m, deterministic)
}
func (m *FeatureTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureTagRef.Merge(m, src)
}
func (m *FeatureTagRef) XXX_Size() int {
	return xxx_messageInfo_FeatureTagRef.Size(m)
}
func (m *FeatureTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureTagRef proto.InternalMessageInfo

func (m *FeatureTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FeatureTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FeatureTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FirewallPolicy struct {
	Annotations                  *KeyValuePairs                            `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion         int64                                     `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                  string                                    `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                       []string                                  `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                         string                                    `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                      *IdPermsType                              `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                         string                                    `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                   string                                    `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                   string                                    `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                       *PermType2                                `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                         string                                    `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	DraftModeState               string                                    `protobuf:"bytes,12,opt,name=draft_mode_state,json=draftModeState,proto3" json:"draft_mode_state,omitempty" yaml:"draft_mode_state,omitempty"`
	FirewallRuleRefs             []*FirewallPolicyFirewallRuleRef          `protobuf:"bytes,1013,rep,name=firewall_rule_refs,json=firewallRuleRefs,proto3" json:"firewall_rule_refs,omitempty" yaml:"firewall_rule_refs,omitempty"`
	SecurityLoggingObjectRefs    []*FirewallPolicySecurityLoggingObjectRef `protobuf:"bytes,1014,rep,name=security_logging_object_refs,json=securityLoggingObjectRefs,proto3" json:"security_logging_object_refs,omitempty" yaml:"security_logging_object_refs,omitempty"`
	TagRefs                      []*FirewallPolicyTagRef                   `protobuf:"bytes,1015,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	ApplicationPolicySetBackRefs []*ApplicationPolicySet                   `protobuf:"bytes,3016,rep,name=application_policy_set_back_refs,json=applicationPolicySetBackRefs,proto3" json:"application_policy_set_back_refs,omitempty" yaml:"application_policy_set_back_refs,omitempty"`
}

func (m *FirewallPolicy) Reset()      { *m = FirewallPolicy{} }
func (*FirewallPolicy) ProtoMessage() {}
func (*FirewallPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{95}
}
func (m *FirewallPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallPolicy.Unmarshal(m, b)
}
func (m *FirewallPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallPolicy.Marshal(b, m, deterministic)
}
func (m *FirewallPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallPolicy.Merge(m, src)
}
func (m *FirewallPolicy) XXX_Size() int {
	return xxx_messageInfo_FirewallPolicy.Size(m)
}
func (m *FirewallPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallPolicy proto.InternalMessageInfo

func (m *FirewallPolicy) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *FirewallPolicy) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *FirewallPolicy) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *FirewallPolicy) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *FirewallPolicy) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *FirewallPolicy) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *FirewallPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FirewallPolicy) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *FirewallPolicy) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *FirewallPolicy) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *FirewallPolicy) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FirewallPolicy) GetDraftModeState() string {
	if m != nil {
		return m.DraftModeState
	}
	return ""
}

func (m *FirewallPolicy) GetFirewallRuleRefs() []*FirewallPolicyFirewallRuleRef {
	if m != nil {
		return m.FirewallRuleRefs
	}
	return nil
}

func (m *FirewallPolicy) GetSecurityLoggingObjectRefs() []*FirewallPolicySecurityLoggingObjectRef {
	if m != nil {
		return m.SecurityLoggingObjectRefs
	}
	return nil
}

func (m *FirewallPolicy) GetTagRefs() []*FirewallPolicyTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *FirewallPolicy) GetApplicationPolicySetBackRefs() []*ApplicationPolicySet {
	if m != nil {
		return m.ApplicationPolicySetBackRefs
	}
	return nil
}

type FirewallPolicyFirewallRuleRef struct {
	UUID string            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string          `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string            `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *FirewallSequence `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *FirewallPolicyFirewallRuleRef) Reset()      { *m = FirewallPolicyFirewallRuleRef{} }
func (*FirewallPolicyFirewallRuleRef) ProtoMessage() {}
func (*FirewallPolicyFirewallRuleRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{96}
}
func (m *FirewallPolicyFirewallRuleRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallPolicyFirewallRuleRef.Unmarshal(m, b)
}
func (m *FirewallPolicyFirewallRuleRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallPolicyFirewallRuleRef.Marshal(b, m, deterministic)
}
func (m *FirewallPolicyFirewallRuleRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallPolicyFirewallRuleRef.Merge(m, src)
}
func (m *FirewallPolicyFirewallRuleRef) XXX_Size() int {
	return xxx_messageInfo_FirewallPolicyFirewallRuleRef.Size(m)
}
func (m *FirewallPolicyFirewallRuleRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallPolicyFirewallRuleRef.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallPolicyFirewallRuleRef proto.InternalMessageInfo

func (m *FirewallPolicyFirewallRuleRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FirewallPolicyFirewallRuleRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FirewallPolicyFirewallRuleRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *FirewallPolicyFirewallRuleRef) GetAttr() *FirewallSequence {
	if m != nil {
		return m.Attr
	}
	return nil
}

type FirewallPolicySecurityLoggingObjectRef struct {
	UUID string       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string     `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string       `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *SloRateType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *FirewallPolicySecurityLoggingObjectRef) Reset() {
	*m = FirewallPolicySecurityLoggingObjectRef{}
}
func (*FirewallPolicySecurityLoggingObjectRef) ProtoMessage() {}
func (*FirewallPolicySecurityLoggingObjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{97}
}
func (m *FirewallPolicySecurityLoggingObjectRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallPolicySecurityLoggingObjectRef.Unmarshal(m, b)
}
func (m *FirewallPolicySecurityLoggingObjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallPolicySecurityLoggingObjectRef.Marshal(b, m, deterministic)
}
func (m *FirewallPolicySecurityLoggingObjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallPolicySecurityLoggingObjectRef.Merge(m, src)
}
func (m *FirewallPolicySecurityLoggingObjectRef) XXX_Size() int {
	return xxx_messageInfo_FirewallPolicySecurityLoggingObjectRef.Size(m)
}
func (m *FirewallPolicySecurityLoggingObjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallPolicySecurityLoggingObjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallPolicySecurityLoggingObjectRef proto.InternalMessageInfo

func (m *FirewallPolicySecurityLoggingObjectRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FirewallPolicySecurityLoggingObjectRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FirewallPolicySecurityLoggingObjectRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *FirewallPolicySecurityLoggingObjectRef) GetAttr() *SloRateType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type FirewallPolicyTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FirewallPolicyTagRef) Reset()      { *m = FirewallPolicyTagRef{} }
func (*FirewallPolicyTagRef) ProtoMessage() {}
func (*FirewallPolicyTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{98}
}
func (m *FirewallPolicyTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallPolicyTagRef.Unmarshal(m, b)
}
func (m *FirewallPolicyTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallPolicyTagRef.Marshal(b, m, deterministic)
}
func (m *FirewallPolicyTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallPolicyTagRef.Merge(m, src)
}
func (m *FirewallPolicyTagRef) XXX_Size() int {
	return xxx_messageInfo_FirewallPolicyTagRef.Size(m)
}
func (m *FirewallPolicyTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallPolicyTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallPolicyTagRef proto.InternalMessageInfo

func (m *FirewallPolicyTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FirewallPolicyTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FirewallPolicyTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FirewallRule struct {
	Annotations               *KeyValuePairs                          `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion      int64                                   `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName               string                                  `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                    []string                                `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                      string                                  `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                   *IdPermsType                            `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                      string                                  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                string                                  `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                string                                  `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                    *PermType2                              `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                      string                                  `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	ActionList                *ActionListType                         `protobuf:"bytes,12,opt,name=action_list,json=actionList,proto3" json:"action_list,omitempty" yaml:"action_list,omitempty"`
	Direction                 string                                  `protobuf:"bytes,13,opt,name=direction,proto3" json:"direction,omitempty" yaml:"direction,omitempty"`
	DraftModeState            string                                  `protobuf:"bytes,14,opt,name=draft_mode_state,json=draftModeState,proto3" json:"draft_mode_state,omitempty" yaml:"draft_mode_state,omitempty"`
	Endpoint1                 *FirewallRuleEndpointType               `protobuf:"bytes,15,opt,name=endpoint_1,json=endpoint1,proto3" json:"endpoint_1,omitempty" yaml:"endpoint_1,omitempty"`
	Endpoint2                 *FirewallRuleEndpointType               `protobuf:"bytes,16,opt,name=endpoint_2,json=endpoint2,proto3" json:"endpoint_2,omitempty" yaml:"endpoint_2,omitempty"`
	MatchTagTypes             *FirewallRuleMatchTagsTypeIdList        `protobuf:"bytes,17,opt,name=match_tag_types,json=matchTagTypes,proto3" json:"match_tag_types,omitempty" yaml:"match_tag_types,omitempty"`
	MatchTags                 *FirewallRuleMatchTagsType              `protobuf:"bytes,18,opt,name=match_tags,json=matchTags,proto3" json:"match_tags,omitempty" yaml:"match_tags,omitempty"`
	Service                   *FirewallServiceType                    `protobuf:"bytes,19,opt,name=service,proto3" json:"service,omitempty" yaml:"service,omitempty"`
	AddressGroupRefs          []*FirewallRuleAddressGroupRef          `protobuf:"bytes,1020,rep,name=address_group_refs,json=addressGroupRefs,proto3" json:"address_group_refs,omitempty" yaml:"address_group_refs,omitempty"`
	SecurityLoggingObjectRefs []*FirewallRuleSecurityLoggingObjectRef `protobuf:"bytes,1021,rep,name=security_logging_object_refs,json=securityLoggingObjectRefs,proto3" json:"security_logging_object_refs,omitempty" yaml:"security_logging_object_refs,omitempty"`
	ServiceGroupRefs          []*FirewallRuleServiceGroupRef          `protobuf:"bytes,1022,rep,name=service_group_refs,json=serviceGroupRefs,proto3" json:"service_group_refs,omitempty" yaml:"service_group_refs,omitempty"`
	TagRefs                   []*FirewallRuleTagRef                   `protobuf:"bytes,1023,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualNetworkRefs        []*FirewallRuleVirtualNetworkRef        `protobuf:"bytes,1024,rep,name=virtual_network_refs,json=virtualNetworkRefs,proto3" json:"virtual_network_refs,omitempty" yaml:"virtual_network_refs,omitempty"`
	FirewallPolicyBackRefs    []*FirewallPolicy                       `protobuf:"bytes,3025,rep,name=firewall_policy_back_refs,json=firewallPolicyBackRefs,proto3" json:"firewall_policy_back_refs,omitempty" yaml:"firewall_policy_back_refs,omitempty"`
}

func (m *FirewallRule) Reset()      { *m = FirewallRule{} }
func (*FirewallRule) ProtoMessage() {}
func (*FirewallRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{99}
}
func (m *FirewallRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallRule.Unmarshal(m, b)
}
func (m *FirewallRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallRule.Marshal(b, m, deterministic)
}
func (m *FirewallRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallRule.Merge(m, src)
}
func (m *FirewallRule) XXX_Size() int {
	return xxx_messageInfo_FirewallRule.Size(m)
}
func (m *FirewallRule) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallRule.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallRule proto.InternalMessageInfo

func (m *FirewallRule) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *FirewallRule) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *FirewallRule) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *FirewallRule) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *FirewallRule) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *FirewallRule) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *FirewallRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FirewallRule) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *FirewallRule) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *FirewallRule) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *FirewallRule) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FirewallRule) GetActionList() *ActionListType {
	if m != nil {
		return m.ActionList
	}
	return nil
}

func (m *FirewallRule) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *FirewallRule) GetDraftModeState() string {
	if m != nil {
		return m.DraftModeState
	}
	return ""
}

func (m *FirewallRule) GetEndpoint1() *FirewallRuleEndpointType {
	if m != nil {
		return m.Endpoint1
	}
	return nil
}

func (m *FirewallRule) GetEndpoint2() *FirewallRuleEndpointType {
	if m != nil {
		return m.Endpoint2
	}
	return nil
}

func (m *FirewallRule) GetMatchTagTypes() *FirewallRuleMatchTagsTypeIdList {
	if m != nil {
		return m.MatchTagTypes
	}
	return nil
}

func (m *FirewallRule) GetMatchTags() *FirewallRuleMatchTagsType {
	if m != nil {
		return m.MatchTags
	}
	return nil
}

func (m *FirewallRule) GetService() *FirewallServiceType {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *FirewallRule) GetAddressGroupRefs() []*FirewallRuleAddressGroupRef {
	if m != nil {
		return m.AddressGroupRefs
	}
	return nil
}

func (m *FirewallRule) GetSecurityLoggingObjectRefs() []*FirewallRuleSecurityLoggingObjectRef {
	if m != nil {
		return m.SecurityLoggingObjectRefs
	}
	return nil
}

func (m *FirewallRule) GetServiceGroupRefs() []*FirewallRuleServiceGroupRef {
	if m != nil {
		return m.ServiceGroupRefs
	}
	return nil
}

func (m *FirewallRule) GetTagRefs() []*FirewallRuleTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *FirewallRule) GetVirtualNetworkRefs() []*FirewallRuleVirtualNetworkRef {
	if m != nil {
		return m.VirtualNetworkRefs
	}
	return nil
}

func (m *FirewallRule) GetFirewallPolicyBackRefs() []*FirewallPolicy {
	if m != nil {
		return m.FirewallPolicyBackRefs
	}
	return nil
}

type FirewallRuleAddressGroupRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FirewallRuleAddressGroupRef) Reset()      { *m = FirewallRuleAddressGroupRef{} }
func (*FirewallRuleAddressGroupRef) ProtoMessage() {}
func (*FirewallRuleAddressGroupRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{100}
}
func (m *FirewallRuleAddressGroupRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallRuleAddressGroupRef.Unmarshal(m, b)
}
func (m *FirewallRuleAddressGroupRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallRuleAddressGroupRef.Marshal(b, m, deterministic)
}
func (m *FirewallRuleAddressGroupRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallRuleAddressGroupRef.Merge(m, src)
}
func (m *FirewallRuleAddressGroupRef) XXX_Size() int {
	return xxx_messageInfo_FirewallRuleAddressGroupRef.Size(m)
}
func (m *FirewallRuleAddressGroupRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallRuleAddressGroupRef.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallRuleAddressGroupRef proto.InternalMessageInfo

func (m *FirewallRuleAddressGroupRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FirewallRuleAddressGroupRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FirewallRuleAddressGroupRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FirewallRuleSecurityLoggingObjectRef struct {
	UUID string       `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string     `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string       `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *SloRateType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *FirewallRuleSecurityLoggingObjectRef) Reset()      { *m = FirewallRuleSecurityLoggingObjectRef{} }
func (*FirewallRuleSecurityLoggingObjectRef) ProtoMessage() {}
func (*FirewallRuleSecurityLoggingObjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{101}
}
func (m *FirewallRuleSecurityLoggingObjectRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallRuleSecurityLoggingObjectRef.Unmarshal(m, b)
}
func (m *FirewallRuleSecurityLoggingObjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallRuleSecurityLoggingObjectRef.Marshal(b, m, deterministic)
}
func (m *FirewallRuleSecurityLoggingObjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallRuleSecurityLoggingObjectRef.Merge(m, src)
}
func (m *FirewallRuleSecurityLoggingObjectRef) XXX_Size() int {
	return xxx_messageInfo_FirewallRuleSecurityLoggingObjectRef.Size(m)
}
func (m *FirewallRuleSecurityLoggingObjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallRuleSecurityLoggingObjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallRuleSecurityLoggingObjectRef proto.InternalMessageInfo

func (m *FirewallRuleSecurityLoggingObjectRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FirewallRuleSecurityLoggingObjectRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FirewallRuleSecurityLoggingObjectRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *FirewallRuleSecurityLoggingObjectRef) GetAttr() *SloRateType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type FirewallRuleServiceGroupRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FirewallRuleServiceGroupRef) Reset()      { *m = FirewallRuleServiceGroupRef{} }
func (*FirewallRuleServiceGroupRef) ProtoMessage() {}
func (*FirewallRuleServiceGroupRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{102}
}
func (m *FirewallRuleServiceGroupRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallRuleServiceGroupRef.Unmarshal(m, b)
}
func (m *FirewallRuleServiceGroupRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallRuleServiceGroupRef.Marshal(b, m, deterministic)
}
func (m *FirewallRuleServiceGroupRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallRuleServiceGroupRef.Merge(m, src)
}
func (m *FirewallRuleServiceGroupRef) XXX_Size() int {
	return xxx_messageInfo_FirewallRuleServiceGroupRef.Size(m)
}
func (m *FirewallRuleServiceGroupRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallRuleServiceGroupRef.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallRuleServiceGroupRef proto.InternalMessageInfo

func (m *FirewallRuleServiceGroupRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FirewallRuleServiceGroupRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FirewallRuleServiceGroupRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FirewallRuleTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FirewallRuleTagRef) Reset()      { *m = FirewallRuleTagRef{} }
func (*FirewallRuleTagRef) ProtoMessage() {}
func (*FirewallRuleTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{103}
}
func (m *FirewallRuleTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallRuleTagRef.Unmarshal(m, b)
}
func (m *FirewallRuleTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallRuleTagRef.Marshal(b, m, deterministic)
}
func (m *FirewallRuleTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallRuleTagRef.Merge(m, src)
}
func (m *FirewallRuleTagRef) XXX_Size() int {
	return xxx_messageInfo_FirewallRuleTagRef.Size(m)
}
func (m *FirewallRuleTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallRuleTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallRuleTagRef proto.InternalMessageInfo

func (m *FirewallRuleTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FirewallRuleTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FirewallRuleTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FirewallRuleVirtualNetworkRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FirewallRuleVirtualNetworkRef) Reset()      { *m = FirewallRuleVirtualNetworkRef{} }
func (*FirewallRuleVirtualNetworkRef) ProtoMessage() {}
func (*FirewallRuleVirtualNetworkRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{104}
}
func (m *FirewallRuleVirtualNetworkRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallRuleVirtualNetworkRef.Unmarshal(m, b)
}
func (m *FirewallRuleVirtualNetworkRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallRuleVirtualNetworkRef.Marshal(b, m, deterministic)
}
func (m *FirewallRuleVirtualNetworkRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallRuleVirtualNetworkRef.Merge(m, src)
}
func (m *FirewallRuleVirtualNetworkRef) XXX_Size() int {
	return xxx_messageInfo_FirewallRuleVirtualNetworkRef.Size(m)
}
func (m *FirewallRuleVirtualNetworkRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallRuleVirtualNetworkRef.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallRuleVirtualNetworkRef proto.InternalMessageInfo

func (m *FirewallRuleVirtualNetworkRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FirewallRuleVirtualNetworkRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FirewallRuleVirtualNetworkRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FloatingIPPool struct {
	Annotations           *KeyValuePairs            `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion  int64                     `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName           string                    `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                []string                  `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                  string                    `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms               *IdPermsType              `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                  string                    `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType            string                    `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID            string                    `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                *PermType2                `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                  string                    `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	FloatingIPPoolSubnets *FloatingIpPoolSubnetType `protobuf:"bytes,12,opt,name=floating_ip_pool_subnets,json=floatingIpPoolSubnets,proto3" json:"floating_ip_pool_subnets,omitempty" yaml:"floating_ip_pool_subnets,omitempty"`
	TagRefs               []*FloatingIPPoolTagRef   `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	ProjectBackRefs       []*Project                `protobuf:"bytes,3015,rep,name=project_back_refs,json=projectBackRefs,proto3" json:"project_back_refs,omitempty" yaml:"project_back_refs,omitempty"`
	FloatingIPs           []*FloatingIP             `protobuf:"bytes,2014,rep,name=floating_ips,json=floatingIps,proto3" json:"floating_ips,omitempty" yaml:"floating_ips,omitempty"`
}

func (m *FloatingIPPool) Reset()      { *m = FloatingIPPool{} }
func (*FloatingIPPool) ProtoMessage() {}
func (*FloatingIPPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{105}
}
func (m *FloatingIPPool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FloatingIPPool.Unmarshal(m, b)
}
func (m *FloatingIPPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FloatingIPPool.Marshal(b, m, deterministic)
}
func (m *FloatingIPPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FloatingIPPool.Merge(m, src)
}
func (m *FloatingIPPool) XXX_Size() int {
	return xxx_messageInfo_FloatingIPPool.Size(m)
}
func (m *FloatingIPPool) XXX_DiscardUnknown() {
	xxx_messageInfo_FloatingIPPool.DiscardUnknown(m)
}

var xxx_messageInfo_FloatingIPPool proto.InternalMessageInfo

func (m *FloatingIPPool) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *FloatingIPPool) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *FloatingIPPool) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *FloatingIPPool) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *FloatingIPPool) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *FloatingIPPool) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *FloatingIPPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FloatingIPPool) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *FloatingIPPool) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *FloatingIPPool) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *FloatingIPPool) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FloatingIPPool) GetFloatingIPPoolSubnets() *FloatingIpPoolSubnetType {
	if m != nil {
		return m.FloatingIPPoolSubnets
	}
	return nil
}

func (m *FloatingIPPool) GetTagRefs() []*FloatingIPPoolTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *FloatingIPPool) GetProjectBackRefs() []*Project {
	if m != nil {
		return m.ProjectBackRefs
	}
	return nil
}

func (m *FloatingIPPool) GetFloatingIPs() []*FloatingIP {
	if m != nil {
		return m.FloatingIPs
	}
	return nil
}

type FloatingIPPoolTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FloatingIPPoolTagRef) Reset()      { *m = FloatingIPPoolTagRef{} }
func (*FloatingIPPoolTagRef) ProtoMessage() {}
func (*FloatingIPPoolTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{106}
}
func (m *FloatingIPPoolTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FloatingIPPoolTagRef.Unmarshal(m, b)
}
func (m *FloatingIPPoolTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FloatingIPPoolTagRef.Marshal(b, m, deterministic)
}
func (m *FloatingIPPoolTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FloatingIPPoolTagRef.Merge(m, src)
}
func (m *FloatingIPPoolTagRef) XXX_Size() int {
	return xxx_messageInfo_FloatingIPPoolTagRef.Size(m)
}
func (m *FloatingIPPoolTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FloatingIPPoolTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_FloatingIPPoolTagRef proto.InternalMessageInfo

func (m *FloatingIPPoolTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FloatingIPPoolTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FloatingIPPoolTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FloatingIP struct {
	Annotations                  *KeyValuePairs                          `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion         int64                                   `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                  string                                  `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                       []string                                `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                         string                                  `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                      *IdPermsType                            `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                         string                                  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                   string                                  `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                   string                                  `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                       *PermType2                              `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                         string                                  `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	FloatingIPAddress            string                                  `protobuf:"bytes,12,opt,name=floating_ip_address,json=floatingIpAddress,proto3" json:"floating_ip_address,omitempty" yaml:"floating_ip_address,omitempty"`
	FloatingIPAddressFamily      string                                  `protobuf:"bytes,13,opt,name=floating_ip_address_family,json=floatingIpAddressFamily,proto3" json:"floating_ip_address_family,omitempty" yaml:"floating_ip_address_family,omitempty"`
	FloatingIPFixedIPAddress     string                                  `protobuf:"bytes,14,opt,name=floating_ip_fixed_ip_address,json=floatingIpFixedIpAddress,proto3" json:"floating_ip_fixed_ip_address,omitempty" yaml:"floating_ip_fixed_ip_address,omitempty"`
	FloatingIPIsVirtualIP        bool                                    `protobuf:"varint,15,opt,name=floating_ip_is_virtual_ip,json=floatingIpIsVirtualIp,proto3" json:"floating_ip_is_virtual_ip,omitempty" yaml:"floating_ip_is_virtual_ip,omitempty"`
	FloatingIPPortMappings       *PortMappings                           `protobuf:"bytes,16,opt,name=floating_ip_port_mappings,json=floatingIpPortMappings,proto3" json:"floating_ip_port_mappings,omitempty" yaml:"floating_ip_port_mappings,omitempty"`
	FloatingIPPortMappingsEnable bool                                    `protobuf:"varint,17,opt,name=floating_ip_port_mappings_enable,json=floatingIpPortMappingsEnable,proto3" json:"floating_ip_port_mappings_enable,omitempty" yaml:"floating_ip_port_mappings_enable,omitempty"`
	FloatingIPTrafficDirection   string                                  `protobuf:"bytes,18,opt,name=floating_ip_traffic_direction,json=floatingIpTrafficDirection,proto3" json:"floating_ip_traffic_direction,omitempty" yaml:"floating_ip_traffic_direction,omitempty"`
	ProjectRefs                  []*FloatingIPProjectRef                 `protobuf:"bytes,1019,rep,name=project_refs,json=projectRefs,proto3" json:"project_refs,omitempty" yaml:"project_refs,omitempty"`
	TagRefs                      []*FloatingIPTagRef                     `protobuf:"bytes,1020,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceRefs  []*FloatingIPVirtualMachineInterfaceRef `protobuf:"bytes,1021,rep,name=virtual_machine_interface_refs,json=virtualMachineInterfaceRefs,proto3" json:"virtual_machine_interface_refs,omitempty" yaml:"virtual_machine_interface_refs,omitempty"`
	CustomerAttachmentBackRefs   []*CustomerAttachment                   `protobuf:"bytes,3022,rep,name=customer_attachment_back_refs,json=customerAttachmentBackRefs,proto3" json:"customer_attachment_back_refs,omitempty" yaml:"customer_attachment_back_refs,omitempty"`
}

func (m *FloatingIP) Reset()      { *m = FloatingIP{} }
func (*FloatingIP) ProtoMessage() {}
func (*FloatingIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{107}
}
func (m *FloatingIP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FloatingIP.Unmarshal(m, b)
}
func (m *FloatingIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FloatingIP.Marshal(b, m, deterministic)
}
func (m *FloatingIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FloatingIP.Merge(m, src)
}
func (m *FloatingIP) XXX_Size() int {
	return xxx_messageInfo_FloatingIP.Size(m)
}
func (m *FloatingIP) XXX_DiscardUnknown() {
	xxx_messageInfo_FloatingIP.DiscardUnknown(m)
}

var xxx_messageInfo_FloatingIP proto.InternalMessageInfo

func (m *FloatingIP) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *FloatingIP) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *FloatingIP) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *FloatingIP) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *FloatingIP) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *FloatingIP) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *FloatingIP) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FloatingIP) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *FloatingIP) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *FloatingIP) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *FloatingIP) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FloatingIP) GetFloatingIPAddress() string {
	if m != nil {
		return m.FloatingIPAddress
	}
	return ""
}

func (m *FloatingIP) GetFloatingIPAddressFamily() string {
	if m != nil {
		return m.FloatingIPAddressFamily
	}
	return ""
}

func (m *FloatingIP) GetFloatingIPFixedIPAddress() string {
	if m != nil {
		return m.FloatingIPFixedIPAddress
	}
	return ""
}

func (m *FloatingIP) GetFloatingIPIsVirtualIP() bool {
	if m != nil {
		return m.FloatingIPIsVirtualIP
	}
	return false
}

func (m *FloatingIP) GetFloatingIPPortMappings() *PortMappings {
	if m != nil {
		return m.FloatingIPPortMappings
	}
	return nil
}

func (m *FloatingIP) GetFloatingIPPortMappingsEnable() bool {
	if m != nil {
		return m.FloatingIPPortMappingsEnable
	}
	return false
}

func (m *FloatingIP) GetFloatingIPTrafficDirection() string {
	if m != nil {
		return m.FloatingIPTrafficDirection
	}
	return ""
}

func (m *FloatingIP) GetProjectRefs() []*FloatingIPProjectRef {
	if m != nil {
		return m.ProjectRefs
	}
	return nil
}

func (m *FloatingIP) GetTagRefs() []*FloatingIPTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *FloatingIP) GetVirtualMachineInterfaceRefs() []*FloatingIPVirtualMachineInterfaceRef {
	if m != nil {
		return m.VirtualMachineInterfaceRefs
	}
	return nil
}

func (m *FloatingIP) GetCustomerAttachmentBackRefs() []*CustomerAttachment {
	if m != nil {
		return m.CustomerAttachmentBackRefs
	}
	return nil
}

type FloatingIPProjectRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FloatingIPProjectRef) Reset()      { *m = FloatingIPProjectRef{} }
func (*FloatingIPProjectRef) ProtoMessage() {}
func (*FloatingIPProjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{108}
}
func (m *FloatingIPProjectRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FloatingIPProjectRef.Unmarshal(m, b)
}
func (m *FloatingIPProjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FloatingIPProjectRef.Marshal(b, m, deterministic)
}
func (m *FloatingIPProjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FloatingIPProjectRef.Merge(m, src)
}
func (m *FloatingIPProjectRef) XXX_Size() int {
	return xxx_messageInfo_FloatingIPProjectRef.Size(m)
}
func (m *FloatingIPProjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FloatingIPProjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_FloatingIPProjectRef proto.InternalMessageInfo

func (m *FloatingIPProjectRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FloatingIPProjectRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FloatingIPProjectRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FloatingIPTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FloatingIPTagRef) Reset()      { *m = FloatingIPTagRef{} }
func (*FloatingIPTagRef) ProtoMessage() {}
func (*FloatingIPTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{109}
}
func (m *FloatingIPTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FloatingIPTagRef.Unmarshal(m, b)
}
func (m *FloatingIPTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FloatingIPTagRef.Marshal(b, m, deterministic)
}
func (m *FloatingIPTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FloatingIPTagRef.Merge(m, src)
}
func (m *FloatingIPTagRef) XXX_Size() int {
	return xxx_messageInfo_FloatingIPTagRef.Size(m)
}
func (m *FloatingIPTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FloatingIPTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_FloatingIPTagRef proto.InternalMessageInfo

func (m *FloatingIPTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FloatingIPTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FloatingIPTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FloatingIPVirtualMachineInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FloatingIPVirtualMachineInterfaceRef) Reset()      { *m = FloatingIPVirtualMachineInterfaceRef{} }
func (*FloatingIPVirtualMachineInterfaceRef) ProtoMessage() {}
func (*FloatingIPVirtualMachineInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{110}
}
func (m *FloatingIPVirtualMachineInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FloatingIPVirtualMachineInterfaceRef.Unmarshal(m, b)
}
func (m *FloatingIPVirtualMachineInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FloatingIPVirtualMachineInterfaceRef.Marshal(b, m, deterministic)
}
func (m *FloatingIPVirtualMachineInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FloatingIPVirtualMachineInterfaceRef.Merge(m, src)
}
func (m *FloatingIPVirtualMachineInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_FloatingIPVirtualMachineInterfaceRef.Size(m)
}
func (m *FloatingIPVirtualMachineInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FloatingIPVirtualMachineInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_FloatingIPVirtualMachineInterfaceRef proto.InternalMessageInfo

func (m *FloatingIPVirtualMachineInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FloatingIPVirtualMachineInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FloatingIPVirtualMachineInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FlowNode struct {
	Annotations             *KeyValuePairs               `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion    int64                        `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName             string                       `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                  []string                     `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                    string                       `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                 *IdPermsType                 `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                    string                       `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType              string                       `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID              string                       `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                  *PermType2                   `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                    string                       `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	FlowNodeInbandInterface string                       `protobuf:"bytes,12,opt,name=flow_node_inband_interface,json=flowNodeInbandInterface,proto3" json:"flow_node_inband_interface,omitempty" yaml:"flow_node_inband_interface,omitempty"`
	FlowNodeIPAddress       string                       `protobuf:"bytes,13,opt,name=flow_node_ip_address,json=flowNodeIpAddress,proto3" json:"flow_node_ip_address,omitempty" yaml:"flow_node_ip_address,omitempty"`
	FlowNodeLoadBalancerIP  string                       `protobuf:"bytes,14,opt,name=flow_node_load_balancer_ip,json=flowNodeLoadBalancerIp,proto3" json:"flow_node_load_balancer_ip,omitempty" yaml:"flow_node_load_balancer_ip,omitempty"`
	TagRefs                 []*FlowNodeTagRef            `protobuf:"bytes,1015,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualNetworkRefs      []*FlowNodeVirtualNetworkRef `protobuf:"bytes,1016,rep,name=virtual_network_refs,json=virtualNetworkRefs,proto3" json:"virtual_network_refs,omitempty" yaml:"virtual_network_refs,omitempty"`
	InstanceIPBackRefs      []*InstanceIP                `protobuf:"bytes,3017,rep,name=instance_ip_back_refs,json=instanceIpBackRefs,proto3" json:"instance_ip_back_refs,omitempty" yaml:"instance_ip_back_refs,omitempty"`
}

func (m *FlowNode) Reset()      { *m = FlowNode{} }
func (*FlowNode) ProtoMessage() {}
func (*FlowNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{111}
}
func (m *FlowNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowNode.Unmarshal(m, b)
}
func (m *FlowNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowNode.Marshal(b, m, deterministic)
}
func (m *FlowNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowNode.Merge(m, src)
}
func (m *FlowNode) XXX_Size() int {
	return xxx_messageInfo_FlowNode.Size(m)
}
func (m *FlowNode) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowNode.DiscardUnknown(m)
}

var xxx_messageInfo_FlowNode proto.InternalMessageInfo

func (m *FlowNode) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *FlowNode) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *FlowNode) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *FlowNode) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *FlowNode) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *FlowNode) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *FlowNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FlowNode) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *FlowNode) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *FlowNode) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *FlowNode) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FlowNode) GetFlowNodeInbandInterface() string {
	if m != nil {
		return m.FlowNodeInbandInterface
	}
	return ""
}

func (m *FlowNode) GetFlowNodeIPAddress() string {
	if m != nil {
		return m.FlowNodeIPAddress
	}
	return ""
}

func (m *FlowNode) GetFlowNodeLoadBalancerIP() string {
	if m != nil {
		return m.FlowNodeLoadBalancerIP
	}
	return ""
}

func (m *FlowNode) GetTagRefs() []*FlowNodeTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *FlowNode) GetVirtualNetworkRefs() []*FlowNodeVirtualNetworkRef {
	if m != nil {
		return m.VirtualNetworkRefs
	}
	return nil
}

func (m *FlowNode) GetInstanceIPBackRefs() []*InstanceIP {
	if m != nil {
		return m.InstanceIPBackRefs
	}
	return nil
}

type FlowNodeTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FlowNodeTagRef) Reset()      { *m = FlowNodeTagRef{} }
func (*FlowNodeTagRef) ProtoMessage() {}
func (*FlowNodeTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{112}
}
func (m *FlowNodeTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowNodeTagRef.Unmarshal(m, b)
}
func (m *FlowNodeTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowNodeTagRef.Marshal(b, m, deterministic)
}
func (m *FlowNodeTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowNodeTagRef.Merge(m, src)
}
func (m *FlowNodeTagRef) XXX_Size() int {
	return xxx_messageInfo_FlowNodeTagRef.Size(m)
}
func (m *FlowNodeTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowNodeTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_FlowNodeTagRef proto.InternalMessageInfo

func (m *FlowNodeTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FlowNodeTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FlowNodeTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type FlowNodeVirtualNetworkRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *FlowNodeVirtualNetworkRef) Reset()      { *m = FlowNodeVirtualNetworkRef{} }
func (*FlowNodeVirtualNetworkRef) ProtoMessage() {}
func (*FlowNodeVirtualNetworkRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{113}
}
func (m *FlowNodeVirtualNetworkRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowNodeVirtualNetworkRef.Unmarshal(m, b)
}
func (m *FlowNodeVirtualNetworkRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowNodeVirtualNetworkRef.Marshal(b, m, deterministic)
}
func (m *FlowNodeVirtualNetworkRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowNodeVirtualNetworkRef.Merge(m, src)
}
func (m *FlowNodeVirtualNetworkRef) XXX_Size() int {
	return xxx_messageInfo_FlowNodeVirtualNetworkRef.Size(m)
}
func (m *FlowNodeVirtualNetworkRef) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowNodeVirtualNetworkRef.DiscardUnknown(m)
}

var xxx_messageInfo_FlowNodeVirtualNetworkRef proto.InternalMessageInfo

func (m *FlowNodeVirtualNetworkRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *FlowNodeVirtualNetworkRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *FlowNodeVirtualNetworkRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ForwardingClass struct {
	Annotations                 *KeyValuePairs                `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion        int64                         `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                 string                        `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                      []string                      `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                        string                        `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                     *IdPermsType                  `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                        string                        `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                  string                        `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                  string                        `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                      *PermType2                    `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                        string                        `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	ForwardingClassDSCP         int64                         `protobuf:"varint,12,opt,name=forwarding_class_dscp,json=forwardingClassDscp,proto3" json:"forwarding_class_dscp,omitempty" yaml:"forwarding_class_dscp,omitempty"`
	ForwardingClassID           int64                         `protobuf:"varint,13,opt,name=forwarding_class_id,json=forwardingClassId,proto3" json:"forwarding_class_id,omitempty" yaml:"forwarding_class_id,omitempty"`
	ForwardingClassMPLSExp      int64                         `protobuf:"varint,14,opt,name=forwarding_class_mpls_exp,json=forwardingClassMplsExp,proto3" json:"forwarding_class_mpls_exp,omitempty" yaml:"forwarding_class_mpls_exp,omitempty"`
	ForwardingClassVlanPriority int64                         `protobuf:"varint,15,opt,name=forwarding_class_vlan_priority,json=forwardingClassVlanPriority,proto3" json:"forwarding_class_vlan_priority,omitempty" yaml:"forwarding_class_vlan_priority,omitempty"`
	QosQueueRefs                []*ForwardingClassQosQueueRef `protobuf:"bytes,1016,rep,name=qos_queue_refs,json=qosQueueRefs,proto3" json:"qos_queue_refs,omitempty" yaml:"qos_queue_refs,omitempty"`
	TagRefs                     []*ForwardingClassTagRef      `protobuf:"bytes,1017,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *ForwardingClass) Reset()      { *m = ForwardingClass{} }
func (*ForwardingClass) ProtoMessage() {}
func (*ForwardingClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{114}
}
func (m *ForwardingClass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForwardingClass.Unmarshal(m, b)
}
func (m *ForwardingClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForwardingClass.Marshal(b, m, deterministic)
}
func (m *ForwardingClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardingClass.Merge(m, src)
}
func (m *ForwardingClass) XXX_Size() int {
	return xxx_messageInfo_ForwardingClass.Size(m)
}
func (m *ForwardingClass) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardingClass.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardingClass proto.InternalMessageInfo

func (m *ForwardingClass) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ForwardingClass) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ForwardingClass) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ForwardingClass) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ForwardingClass) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ForwardingClass) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ForwardingClass) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ForwardingClass) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ForwardingClass) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ForwardingClass) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ForwardingClass) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ForwardingClass) GetForwardingClassDSCP() int64 {
	if m != nil {
		return m.ForwardingClassDSCP
	}
	return 0
}

func (m *ForwardingClass) GetForwardingClassID() int64 {
	if m != nil {
		return m.ForwardingClassID
	}
	return 0
}

func (m *ForwardingClass) GetForwardingClassMPLSExp() int64 {
	if m != nil {
		return m.ForwardingClassMPLSExp
	}
	return 0
}

func (m *ForwardingClass) GetForwardingClassVlanPriority() int64 {
	if m != nil {
		return m.ForwardingClassVlanPriority
	}
	return 0
}

func (m *ForwardingClass) GetQosQueueRefs() []*ForwardingClassQosQueueRef {
	if m != nil {
		return m.QosQueueRefs
	}
	return nil
}

func (m *ForwardingClass) GetTagRefs() []*ForwardingClassTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type ForwardingClassQosQueueRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ForwardingClassQosQueueRef) Reset()      { *m = ForwardingClassQosQueueRef{} }
func (*ForwardingClassQosQueueRef) ProtoMessage() {}
func (*ForwardingClassQosQueueRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{115}
}
func (m *ForwardingClassQosQueueRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForwardingClassQosQueueRef.Unmarshal(m, b)
}
func (m *ForwardingClassQosQueueRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForwardingClassQosQueueRef.Marshal(b, m, deterministic)
}
func (m *ForwardingClassQosQueueRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardingClassQosQueueRef.Merge(m, src)
}
func (m *ForwardingClassQosQueueRef) XXX_Size() int {
	return xxx_messageInfo_ForwardingClassQosQueueRef.Size(m)
}
func (m *ForwardingClassQosQueueRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardingClassQosQueueRef.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardingClassQosQueueRef proto.InternalMessageInfo

func (m *ForwardingClassQosQueueRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ForwardingClassQosQueueRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ForwardingClassQosQueueRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ForwardingClassTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ForwardingClassTagRef) Reset()      { *m = ForwardingClassTagRef{} }
func (*ForwardingClassTagRef) ProtoMessage() {}
func (*ForwardingClassTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{116}
}
func (m *ForwardingClassTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForwardingClassTagRef.Unmarshal(m, b)
}
func (m *ForwardingClassTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForwardingClassTagRef.Marshal(b, m, deterministic)
}
func (m *ForwardingClassTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardingClassTagRef.Merge(m, src)
}
func (m *ForwardingClassTagRef) XXX_Size() int {
	return xxx_messageInfo_ForwardingClassTagRef.Size(m)
}
func (m *ForwardingClassTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardingClassTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardingClassTagRef proto.InternalMessageInfo

func (m *ForwardingClassTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ForwardingClassTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ForwardingClassTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type GlobalAnalyticsConfig struct {
	Annotations             *KeyValuePairs                 `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion    int64                          `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName             string                         `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                  []string                       `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                    string                         `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                 *IdPermsType                   `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                    string                         `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType              string                         `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID              string                         `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                  *PermType2                     `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                    string                         `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TagRefs                 []*GlobalAnalyticsConfigTagRef `protobuf:"bytes,1012,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	StructuredSyslogConfigs []*StructuredSyslogConfig      `protobuf:"bytes,2013,rep,name=structured_syslog_configs,json=structuredSyslogConfigs,proto3" json:"structured_syslog_configs,omitempty" yaml:"structured_syslog_configs,omitempty"`
}

func (m *GlobalAnalyticsConfig) Reset()      { *m = GlobalAnalyticsConfig{} }
func (*GlobalAnalyticsConfig) ProtoMessage() {}
func (*GlobalAnalyticsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{117}
}
func (m *GlobalAnalyticsConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalAnalyticsConfig.Unmarshal(m, b)
}
func (m *GlobalAnalyticsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalAnalyticsConfig.Marshal(b, m, deterministic)
}
func (m *GlobalAnalyticsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalAnalyticsConfig.Merge(m, src)
}
func (m *GlobalAnalyticsConfig) XXX_Size() int {
	return xxx_messageInfo_GlobalAnalyticsConfig.Size(m)
}
func (m *GlobalAnalyticsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalAnalyticsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalAnalyticsConfig proto.InternalMessageInfo

func (m *GlobalAnalyticsConfig) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *GlobalAnalyticsConfig) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *GlobalAnalyticsConfig) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *GlobalAnalyticsConfig) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *GlobalAnalyticsConfig) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *GlobalAnalyticsConfig) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *GlobalAnalyticsConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GlobalAnalyticsConfig) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *GlobalAnalyticsConfig) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *GlobalAnalyticsConfig) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *GlobalAnalyticsConfig) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *GlobalAnalyticsConfig) GetTagRefs() []*GlobalAnalyticsConfigTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *GlobalAnalyticsConfig) GetStructuredSyslogConfigs() []*StructuredSyslogConfig {
	if m != nil {
		return m.StructuredSyslogConfigs
	}
	return nil
}

type GlobalAnalyticsConfigTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *GlobalAnalyticsConfigTagRef) Reset()      { *m = GlobalAnalyticsConfigTagRef{} }
func (*GlobalAnalyticsConfigTagRef) ProtoMessage() {}
func (*GlobalAnalyticsConfigTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{118}
}
func (m *GlobalAnalyticsConfigTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalAnalyticsConfigTagRef.Unmarshal(m, b)
}
func (m *GlobalAnalyticsConfigTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalAnalyticsConfigTagRef.Marshal(b, m, deterministic)
}
func (m *GlobalAnalyticsConfigTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalAnalyticsConfigTagRef.Merge(m, src)
}
func (m *GlobalAnalyticsConfigTagRef) XXX_Size() int {
	return xxx_messageInfo_GlobalAnalyticsConfigTagRef.Size(m)
}
func (m *GlobalAnalyticsConfigTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalAnalyticsConfigTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalAnalyticsConfigTagRef proto.InternalMessageInfo

func (m *GlobalAnalyticsConfigTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *GlobalAnalyticsConfigTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *GlobalAnalyticsConfigTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type GlobalQosConfig struct {
	Annotations          *KeyValuePairs           `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                    `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string                   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string                 `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string                   `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType             `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string                   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string                   `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string                   `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2               `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string                   `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	ControlTrafficDSCP   *ControlTrafficDscpType  `protobuf:"bytes,12,opt,name=control_traffic_dscp,json=controlTrafficDscp,proto3" json:"control_traffic_dscp,omitempty" yaml:"control_traffic_dscp,omitempty"`
	TagRefs              []*GlobalQosConfigTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	ForwardingClasss     []*ForwardingClass       `protobuf:"bytes,2016,rep,name=forwarding_classs,json=forwardingClasss,proto3" json:"forwarding_classs,omitempty" yaml:"forwarding_classs,omitempty"`
	QosConfigs           []*QosConfig             `protobuf:"bytes,2014,rep,name=qos_configs,json=qosConfigs,proto3" json:"qos_configs,omitempty" yaml:"qos_configs,omitempty"`
	QosQueues            []*QosQueue              `protobuf:"bytes,2015,rep,name=qos_queues,json=qosQueues,proto3" json:"qos_queues,omitempty" yaml:"qos_queues,omitempty"`
}

func (m *GlobalQosConfig) Reset()      { *m = GlobalQosConfig{} }
func (*GlobalQosConfig) ProtoMessage() {}
func (*GlobalQosConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{119}
}
func (m *GlobalQosConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalQosConfig.Unmarshal(m, b)
}
func (m *GlobalQosConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalQosConfig.Marshal(b, m, deterministic)
}
func (m *GlobalQosConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalQosConfig.Merge(m, src)
}
func (m *GlobalQosConfig) XXX_Size() int {
	return xxx_messageInfo_GlobalQosConfig.Size(m)
}
func (m *GlobalQosConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalQosConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalQosConfig proto.InternalMessageInfo

func (m *GlobalQosConfig) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *GlobalQosConfig) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *GlobalQosConfig) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *GlobalQosConfig) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *GlobalQosConfig) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *GlobalQosConfig) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *GlobalQosConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GlobalQosConfig) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *GlobalQosConfig) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *GlobalQosConfig) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *GlobalQosConfig) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *GlobalQosConfig) GetControlTrafficDSCP() *ControlTrafficDscpType {
	if m != nil {
		return m.ControlTrafficDSCP
	}
	return nil
}

func (m *GlobalQosConfig) GetTagRefs() []*GlobalQosConfigTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *GlobalQosConfig) GetForwardingClasss() []*ForwardingClass {
	if m != nil {
		return m.ForwardingClasss
	}
	return nil
}

func (m *GlobalQosConfig) GetQosConfigs() []*QosConfig {
	if m != nil {
		return m.QosConfigs
	}
	return nil
}

func (m *GlobalQosConfig) GetQosQueues() []*QosQueue {
	if m != nil {
		return m.QosQueues
	}
	return nil
}

type GlobalQosConfigTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *GlobalQosConfigTagRef) Reset()      { *m = GlobalQosConfigTagRef{} }
func (*GlobalQosConfigTagRef) ProtoMessage() {}
func (*GlobalQosConfigTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{120}
}
func (m *GlobalQosConfigTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalQosConfigTagRef.Unmarshal(m, b)
}
func (m *GlobalQosConfigTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalQosConfigTagRef.Marshal(b, m, deterministic)
}
func (m *GlobalQosConfigTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalQosConfigTagRef.Merge(m, src)
}
func (m *GlobalQosConfigTagRef) XXX_Size() int {
	return xxx_messageInfo_GlobalQosConfigTagRef.Size(m)
}
func (m *GlobalQosConfigTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalQosConfigTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalQosConfigTagRef proto.InternalMessageInfo

func (m *GlobalQosConfigTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *GlobalQosConfigTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *GlobalQosConfigTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type GlobalSystemConfig struct {
	Annotations                             *KeyValuePairs                    `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion                    int64                             `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                             string                            `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                                  []string                          `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                                    string                            `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                                 *IdPermsType                      `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                                    string                            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                              string                            `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                              string                            `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                                  *PermType2                        `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                                    string                            `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AlarmEnable                             bool                              `protobuf:"varint,12,opt,name=alarm_enable,json=alarmEnable,proto3" json:"alarm_enable,omitempty" yaml:"alarm_enable,omitempty"`
	AutonomousSystem                        int64                             `protobuf:"varint,13,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty" yaml:"autonomous_system,omitempty"`
	BGPAlwaysCompareMed                     bool                              `protobuf:"varint,14,opt,name=bgp_always_compare_med,json=bgpAlwaysCompareMed,proto3" json:"bgp_always_compare_med,omitempty" yaml:"bgp_always_compare_med,omitempty"`
	BgpaasParameters                        *BGPaaServiceParametersType       `protobuf:"bytes,15,opt,name=bgpaas_parameters,json=bgpaasParameters,proto3" json:"bgpaas_parameters,omitempty" yaml:"bgpaas_parameters,omitempty"`
	ConfigVersion                           string                            `protobuf:"bytes,16,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty" yaml:"config_version,omitempty"`
	DataCenterInterconnectAsnNamespace      *AsnRangeType                     `protobuf:"bytes,17,opt,name=data_center_interconnect_asn_namespace,json=dataCenterInterconnectAsnNamespace,proto3" json:"data_center_interconnect_asn_namespace,omitempty" yaml:"data_center_interconnect_asn_namespace,omitempty"`
	DataCenterInterconnectLoopbackNamespace *SubnetListType                   `protobuf:"bytes,18,opt,name=data_center_interconnect_loopback_namespace,json=dataCenterInterconnectLoopbackNamespace,proto3" json:"data_center_interconnect_loopback_namespace,omitempty" yaml:"data_center_interconnect_loopback_namespace,omitempty"`
	Enable4byteAs                           bool                              `protobuf:"varint,19,opt,name=enable_4byte_as,json=enable4byteAs,proto3" json:"enable_4byte_as,omitempty" yaml:"enable_4byte_as,omitempty"`
	EnableSecurityPolicyDraft               bool                              `protobuf:"varint,20,opt,name=enable_security_policy_draft,json=enableSecurityPolicyDraft,proto3" json:"enable_security_policy_draft,omitempty" yaml:"enable_security_policy_draft,omitempty"`
	GracefulRestartParameters               *GracefulRestartParametersType    `protobuf:"bytes,21,opt,name=graceful_restart_parameters,json=gracefulRestartParameters,proto3" json:"graceful_restart_parameters,omitempty" yaml:"graceful_restart_parameters,omitempty"`
	IbgpAutoMesh                            bool                              `protobuf:"varint,22,opt,name=ibgp_auto_mesh,json=ibgpAutoMesh,proto3" json:"ibgp_auto_mesh,omitempty" yaml:"ibgp_auto_mesh,omitempty"`
	IgmpEnable                              bool                              `protobuf:"varint,23,opt,name=igmp_enable,json=igmpEnable,proto3" json:"igmp_enable,omitempty" yaml:"igmp_enable,omitempty"`
	IPFabricSubnets                         *SubnetListType                   `protobuf:"bytes,24,opt,name=ip_fabric_subnets,json=ipFabricSubnets,proto3" json:"ip_fabric_subnets,omitempty" yaml:"ip_fabric_subnets,omitempty"`
	MacAgingTime                            int64                             `protobuf:"varint,25,opt,name=mac_aging_time,json=macAgingTime,proto3" json:"mac_aging_time,omitempty" yaml:"mac_aging_time,omitempty"`
	MacLimitControl                         *MACLimitControlType              `protobuf:"bytes,26,opt,name=mac_limit_control,json=macLimitControl,proto3" json:"mac_limit_control,omitempty" yaml:"mac_limit_control,omitempty"`
	MacMoveControl                          *MACMoveLimitControlType          `protobuf:"bytes,27,opt,name=mac_move_control,json=macMoveControl,proto3" json:"mac_move_control,omitempty" yaml:"mac_move_control,omitempty"`
	PluginTuning                            *PluginProperties                 `protobuf:"bytes,28,opt,name=plugin_tuning,json=pluginTuning,proto3" json:"plugin_tuning,omitempty" yaml:"plugin_tuning,omitempty"`
	RDClusterSeed                           int64                             `protobuf:"varint,29,opt,name=rd_cluster_seed,json=rdClusterSeed,proto3" json:"rd_cluster_seed,omitempty" yaml:"rd_cluster_seed,omitempty"`
	SupportedDeviceFamilies                 *DeviceFamilyListType             `protobuf:"bytes,30,opt,name=supported_device_families,json=supportedDeviceFamilies,proto3" json:"supported_device_families,omitempty" yaml:"supported_device_families,omitempty"`
	SupportedFabricAnnotations              *KeyValuePairs                    `protobuf:"bytes,31,opt,name=supported_fabric_annotations,json=supportedFabricAnnotations,proto3" json:"supported_fabric_annotations,omitempty" yaml:"supported_fabric_annotations,omitempty"`
	SupportedVendorHardwares                *VendorHardwaresType              `protobuf:"bytes,32,opt,name=supported_vendor_hardwares,json=supportedVendorHardwares,proto3" json:"supported_vendor_hardwares,omitempty" yaml:"supported_vendor_hardwares,omitempty"`
	UserDefinedLogStatistics                *UserDefinedLogStatList           `protobuf:"bytes,33,opt,name=user_defined_log_statistics,json=userDefinedLogStatistics,proto3" json:"user_defined_log_statistics,omitempty" yaml:"user_defined_log_statistics,omitempty"`
	BGPRouterRefs                           []*GlobalSystemConfigBGPRouterRef `protobuf:"bytes,1034,rep,name=bgp_router_refs,json=bgpRouterRefs,proto3" json:"bgp_router_refs,omitempty" yaml:"bgp_router_refs,omitempty"`
	TagRefs                                 []*GlobalSystemConfigTagRef       `protobuf:"bytes,1035,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	QosConfigBackRefs                       []*QosConfig                      `protobuf:"bytes,3066,rep,name=qos_config_back_refs,json=qosConfigBackRefs,proto3" json:"qos_config_back_refs,omitempty" yaml:"qos_config_back_refs,omitempty"`
	Alarms                                  []*Alarm                          `protobuf:"bytes,2062,rep,name=alarms,proto3" json:"alarms,omitempty" yaml:"alarms,omitempty"`
	AnalyticsAlarmNodes                     []*AnalyticsAlarmNode             `protobuf:"bytes,2058,rep,name=analytics_alarm_nodes,json=analyticsAlarmNodes,proto3" json:"analytics_alarm_nodes,omitempty" yaml:"analytics_alarm_nodes,omitempty"`
	AnalyticsNodes                          []*AnalyticsNode                  `protobuf:"bytes,2054,rep,name=analytics_nodes,json=analyticsNodes,proto3" json:"analytics_nodes,omitempty" yaml:"analytics_nodes,omitempty"`
	AnalyticsSNMPNodes                      []*AnalyticsSNMPNode              `protobuf:"bytes,2036,rep,name=analytics_snmp_nodes,json=analyticsSnmpNodes,proto3" json:"analytics_snmp_nodes,omitempty" yaml:"analytics_snmp_nodes,omitempty"`
	APIAccessLists                          []*APIAccessList                  `protobuf:"bytes,2042,rep,name=api_access_lists,json=apiAccessLists,proto3" json:"api_access_lists,omitempty" yaml:"api_access_lists,omitempty"`
	ConfigDatabaseNodes                     []*ConfigDatabaseNode             `protobuf:"bytes,2049,rep,name=config_database_nodes,json=configDatabaseNodes,proto3" json:"config_database_nodes,omitempty" yaml:"config_database_nodes,omitempty"`
	ConfigNodes                             []*ConfigNode                     `protobuf:"bytes,2037,rep,name=config_nodes,json=configNodes,proto3" json:"config_nodes,omitempty" yaml:"config_nodes,omitempty"`
	ControlNodeZones                        []*ControlNodeZone                `protobuf:"bytes,2055,rep,name=control_node_zones,json=controlNodeZones,proto3" json:"control_node_zones,omitempty" yaml:"control_node_zones,omitempty"`
	DataCenterInterconnects                 []*DataCenterInterconnect         `protobuf:"bytes,2050,rep,name=data_center_interconnects,json=dataCenterInterconnects,proto3" json:"data_center_interconnects,omitempty" yaml:"data_center_interconnects,omitempty"`
	DatabaseNodes                           []*DatabaseNode                   `protobuf:"bytes,2051,rep,name=database_nodes,json=databaseNodes,proto3" json:"database_nodes,omitempty" yaml:"database_nodes,omitempty"`
	DeviceImages                            []*DeviceImage                    `protobuf:"bytes,2059,rep,name=device_images,json=deviceImages,proto3" json:"device_images,omitempty" yaml:"device_images,omitempty"`
	DevicemgrNodes                          []*DevicemgrNode                  `protobuf:"bytes,2061,rep,name=devicemgr_nodes,json=devicemgrNodes,proto3" json:"devicemgr_nodes,omitempty" yaml:"devicemgr_nodes,omitempty"`
	Fabrics                                 []*Fabric                         `protobuf:"bytes,2052,rep,name=fabrics,proto3" json:"fabrics,omitempty" yaml:"fabrics,omitempty"`
	Features                                []*Feature                        `protobuf:"bytes,2063,rep,name=features,proto3" json:"features,omitempty" yaml:"features,omitempty"`
	FeatureFlags                            []*FeatureFlag                    `protobuf:"bytes,2038,rep,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty" yaml:"feature_flags,omitempty"`
	FlowNodes                               []*FlowNode                       `protobuf:"bytes,2039,rep,name=flow_nodes,json=flowNodes,proto3" json:"flow_nodes,omitempty" yaml:"flow_nodes,omitempty"`
	GlobalAnalyticsConfigs                  []*GlobalAnalyticsConfig          `protobuf:"bytes,2060,rep,name=global_analytics_configs,json=globalAnalyticsConfigs,proto3" json:"global_analytics_configs,omitempty" yaml:"global_analytics_configs,omitempty"`
	GlobalQosConfigs                        []*GlobalQosConfig                `protobuf:"bytes,2040,rep,name=global_qos_configs,json=globalQosConfigs,proto3" json:"global_qos_configs,omitempty" yaml:"global_qos_configs,omitempty"`
	GlobalVrouterConfigs                    []*GlobalVrouterConfig            `protobuf:"bytes,2056,rep,name=global_vrouter_configs,json=globalVrouterConfigs,proto3" json:"global_vrouter_configs,omitempty" yaml:"global_vrouter_configs,omitempty"`
	IntentMaps                              []*IntentMap                      `protobuf:"bytes,2041,rep,name=intent_maps,json=intentMaps,proto3" json:"intent_maps,omitempty" yaml:"intent_maps,omitempty"`
	JobTemplates                            []*JobTemplate                    `protobuf:"bytes,2043,rep,name=job_templates,json=jobTemplates,proto3" json:"job_templates,omitempty" yaml:"job_templates,omitempty"`
	Nodes                                   []*Node                           `protobuf:"bytes,2044,rep,name=nodes,proto3" json:"nodes,omitempty" yaml:"nodes,omitempty"`
	NodeProfiles                            []*NodeProfile                    `protobuf:"bytes,2064,rep,name=node_profiles,json=nodeProfiles,proto3" json:"node_profiles,omitempty" yaml:"node_profiles,omitempty"`
	OverlayRoles                            []*OverlayRole                    `protobuf:"bytes,2045,rep,name=overlay_roles,json=overlayRoles,proto3" json:"overlay_roles,omitempty" yaml:"overlay_roles,omitempty"`
	PhysicalRoles                           []*PhysicalRole                   `protobuf:"bytes,2065,rep,name=physical_roles,json=physicalRoles,proto3" json:"physical_roles,omitempty" yaml:"physical_roles,omitempty"`
	PhysicalRouters                         []*PhysicalRouter                 `protobuf:"bytes,2053,rep,name=physical_routers,json=physicalRouters,proto3" json:"physical_routers,omitempty" yaml:"physical_routers,omitempty"`
	RoleDefinitions                         []*RoleDefinition                 `protobuf:"bytes,2046,rep,name=role_definitions,json=roleDefinitions,proto3" json:"role_definitions,omitempty" yaml:"role_definitions,omitempty"`
	ServiceApplianceSets                    []*ServiceApplianceSet            `protobuf:"bytes,2057,rep,name=service_appliance_sets,json=serviceApplianceSets,proto3" json:"service_appliance_sets,omitempty" yaml:"service_appliance_sets,omitempty"`
	VirtualRouters                          []*VirtualRouter                  `protobuf:"bytes,2048,rep,name=virtual_routers,json=virtualRouters,proto3" json:"virtual_routers,omitempty" yaml:"virtual_routers,omitempty"`
	WebuiNodes                              []*WebuiNode                      `protobuf:"bytes,2047,rep,name=webui_nodes,json=webuiNodes,proto3" json:"webui_nodes,omitempty" yaml:"webui_nodes,omitempty"`
}

func (m *GlobalSystemConfig) Reset()      { *m = GlobalSystemConfig{} }
func (*GlobalSystemConfig) ProtoMessage() {}
func (*GlobalSystemConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{121}
}
func (m *GlobalSystemConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalSystemConfig.Unmarshal(m, b)
}
func (m *GlobalSystemConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalSystemConfig.Marshal(b, m, deterministic)
}
func (m *GlobalSystemConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSystemConfig.Merge(m, src)
}
func (m *GlobalSystemConfig) XXX_Size() int {
	return xxx_messageInfo_GlobalSystemConfig.Size(m)
}
func (m *GlobalSystemConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSystemConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSystemConfig proto.InternalMessageInfo

func (m *GlobalSystemConfig) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *GlobalSystemConfig) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *GlobalSystemConfig) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *GlobalSystemConfig) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *GlobalSystemConfig) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *GlobalSystemConfig) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *GlobalSystemConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GlobalSystemConfig) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *GlobalSystemConfig) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *GlobalSystemConfig) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *GlobalSystemConfig) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *GlobalSystemConfig) GetAlarmEnable() bool {
	if m != nil {
		return m.AlarmEnable
	}
	return false
}

func (m *GlobalSystemConfig) GetAutonomousSystem() int64 {
	if m != nil {
		return m.AutonomousSystem
	}
	return 0
}

func (m *GlobalSystemConfig) GetBGPAlwaysCompareMed() bool {
	if m != nil {
		return m.BGPAlwaysCompareMed
	}
	return false
}

func (m *GlobalSystemConfig) GetBgpaasParameters() *BGPaaServiceParametersType {
	if m != nil {
		return m.BgpaasParameters
	}
	return nil
}

func (m *GlobalSystemConfig) GetConfigVersion() string {
	if m != nil {
		return m.ConfigVersion
	}
	return ""
}

func (m *GlobalSystemConfig) GetDataCenterInterconnectAsnNamespace() *AsnRangeType {
	if m != nil {
		return m.DataCenterInterconnectAsnNamespace
	}
	return nil
}

func (m *GlobalSystemConfig) GetDataCenterInterconnectLoopbackNamespace() *SubnetListType {
	if m != nil {
		return m.DataCenterInterconnectLoopbackNamespace
	}
	return nil
}

func (m *GlobalSystemConfig) GetEnable4byteAs() bool {
	if m != nil {
		return m.Enable4byteAs
	}
	return false
}

func (m *GlobalSystemConfig) GetEnableSecurityPolicyDraft() bool {
	if m != nil {
		return m.EnableSecurityPolicyDraft
	}
	return false
}

func (m *GlobalSystemConfig) GetGracefulRestartParameters() *GracefulRestartParametersType {
	if m != nil {
		return m.GracefulRestartParameters
	}
	return nil
}

func (m *GlobalSystemConfig) GetIbgpAutoMesh() bool {
	if m != nil {
		return m.IbgpAutoMesh
	}
	return false
}

func (m *GlobalSystemConfig) GetIgmpEnable() bool {
	if m != nil {
		return m.IgmpEnable
	}
	return false
}

func (m *GlobalSystemConfig) GetIPFabricSubnets() *SubnetListType {
	if m != nil {
		return m.IPFabricSubnets
	}
	return nil
}

func (m *GlobalSystemConfig) GetMacAgingTime() int64 {
	if m != nil {
		return m.MacAgingTime
	}
	return 0
}

func (m *GlobalSystemConfig) GetMacLimitControl() *MACLimitControlType {
	if m != nil {
		return m.MacLimitControl
	}
	return nil
}

func (m *GlobalSystemConfig) GetMacMoveControl() *MACMoveLimitControlType {
	if m != nil {
		return m.MacMoveControl
	}
	return nil
}

func (m *GlobalSystemConfig) GetPluginTuning() *PluginProperties {
	if m != nil {
		return m.PluginTuning
	}
	return nil
}

func (m *GlobalSystemConfig) GetRDClusterSeed() int64 {
	if m != nil {
		return m.RDClusterSeed
	}
	return 0
}

func (m *GlobalSystemConfig) GetSupportedDeviceFamilies() *DeviceFamilyListType {
	if m != nil {
		return m.SupportedDeviceFamilies
	}
	return nil
}

func (m *GlobalSystemConfig) GetSupportedFabricAnnotations() *KeyValuePairs {
	if m != nil {
		return m.SupportedFabricAnnotations
	}
	return nil
}

func (m *GlobalSystemConfig) GetSupportedVendorHardwares() *VendorHardwaresType {
	if m != nil {
		return m.SupportedVendorHardwares
	}
	return nil
}

func (m *GlobalSystemConfig) GetUserDefinedLogStatistics() *UserDefinedLogStatList {
	if m != nil {
		return m.UserDefinedLogStatistics
	}
	return nil
}

func (m *GlobalSystemConfig) GetBGPRouterRefs() []*GlobalSystemConfigBGPRouterRef {
	if m != nil {
		return m.BGPRouterRefs
	}
	return nil
}

func (m *GlobalSystemConfig) GetTagRefs() []*GlobalSystemConfigTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *GlobalSystemConfig) GetQosConfigBackRefs() []*QosConfig {
	if m != nil {
		return m.QosConfigBackRefs
	}
	return nil
}

func (m *GlobalSystemConfig) GetAlarms() []*Alarm {
	if m != nil {
		return m.Alarms
	}
	return nil
}

func (m *GlobalSystemConfig) GetAnalyticsAlarmNodes() []*AnalyticsAlarmNode {
	if m != nil {
		return m.AnalyticsAlarmNodes
	}
	return nil
}

func (m *GlobalSystemConfig) GetAnalyticsNodes() []*AnalyticsNode {
	if m != nil {
		return m.AnalyticsNodes
	}
	return nil
}

func (m *GlobalSystemConfig) GetAnalyticsSNMPNodes() []*AnalyticsSNMPNode {
	if m != nil {
		return m.AnalyticsSNMPNodes
	}
	return nil
}

func (m *GlobalSystemConfig) GetAPIAccessLists() []*APIAccessList {
	if m != nil {
		return m.APIAccessLists
	}
	return nil
}

func (m *GlobalSystemConfig) GetConfigDatabaseNodes() []*ConfigDatabaseNode {
	if m != nil {
		return m.ConfigDatabaseNodes
	}
	return nil
}

func (m *GlobalSystemConfig) GetConfigNodes() []*ConfigNode {
	if m != nil {
		return m.ConfigNodes
	}
	return nil
}

func (m *GlobalSystemConfig) GetControlNodeZones() []*ControlNodeZone {
	if m != nil {
		return m.ControlNodeZones
	}
	return nil
}

func (m *GlobalSystemConfig) GetDataCenterInterconnects() []*DataCenterInterconnect {
	if m != nil {
		return m.DataCenterInterconnects
	}
	return nil
}

func (m *GlobalSystemConfig) GetDatabaseNodes() []*DatabaseNode {
	if m != nil {
		return m.DatabaseNodes
	}
	return nil
}

func (m *GlobalSystemConfig) GetDeviceImages() []*DeviceImage {
	if m != nil {
		return m.DeviceImages
	}
	return nil
}

func (m *GlobalSystemConfig) GetDevicemgrNodes() []*DevicemgrNode {
	if m != nil {
		return m.DevicemgrNodes
	}
	return nil
}

func (m *GlobalSystemConfig) GetFabrics() []*Fabric {
	if m != nil {
		return m.Fabrics
	}
	return nil
}

func (m *GlobalSystemConfig) GetFeatures() []*Feature {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *GlobalSystemConfig) GetFeatureFlags() []*FeatureFlag {
	if m != nil {
		return m.FeatureFlags
	}
	return nil
}

func (m *GlobalSystemConfig) GetFlowNodes() []*FlowNode {
	if m != nil {
		return m.FlowNodes
	}
	return nil
}

func (m *GlobalSystemConfig) GetGlobalAnalyticsConfigs() []*GlobalAnalyticsConfig {
	if m != nil {
		return m.GlobalAnalyticsConfigs
	}
	return nil
}

func (m *GlobalSystemConfig) GetGlobalQosConfigs() []*GlobalQosConfig {
	if m != nil {
		return m.GlobalQosConfigs
	}
	return nil
}

func (m *GlobalSystemConfig) GetGlobalVrouterConfigs() []*GlobalVrouterConfig {
	if m != nil {
		return m.GlobalVrouterConfigs
	}
	return nil
}

func (m *GlobalSystemConfig) GetIntentMaps() []*IntentMap {
	if m != nil {
		return m.IntentMaps
	}
	return nil
}

func (m *GlobalSystemConfig) GetJobTemplates() []*JobTemplate {
	if m != nil {
		return m.JobTemplates
	}
	return nil
}

func (m *GlobalSystemConfig) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *GlobalSystemConfig) GetNodeProfiles() []*NodeProfile {
	if m != nil {
		return m.NodeProfiles
	}
	return nil
}

func (m *GlobalSystemConfig) GetOverlayRoles() []*OverlayRole {
	if m != nil {
		return m.OverlayRoles
	}
	return nil
}

func (m *GlobalSystemConfig) GetPhysicalRoles() []*PhysicalRole {
	if m != nil {
		return m.PhysicalRoles
	}
	return nil
}

func (m *GlobalSystemConfig) GetPhysicalRouters() []*PhysicalRouter {
	if m != nil {
		return m.PhysicalRouters
	}
	return nil
}

func (m *GlobalSystemConfig) GetRoleDefinitions() []*RoleDefinition {
	if m != nil {
		return m.RoleDefinitions
	}
	return nil
}

func (m *GlobalSystemConfig) GetServiceApplianceSets() []*ServiceApplianceSet {
	if m != nil {
		return m.ServiceApplianceSets
	}
	return nil
}

func (m *GlobalSystemConfig) GetVirtualRouters() []*VirtualRouter {
	if m != nil {
		return m.VirtualRouters
	}
	return nil
}

func (m *GlobalSystemConfig) GetWebuiNodes() []*WebuiNode {
	if m != nil {
		return m.WebuiNodes
	}
	return nil
}

type GlobalSystemConfigBGPRouterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *GlobalSystemConfigBGPRouterRef) Reset()      { *m = GlobalSystemConfigBGPRouterRef{} }
func (*GlobalSystemConfigBGPRouterRef) ProtoMessage() {}
func (*GlobalSystemConfigBGPRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{122}
}
func (m *GlobalSystemConfigBGPRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalSystemConfigBGPRouterRef.Unmarshal(m, b)
}
func (m *GlobalSystemConfigBGPRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalSystemConfigBGPRouterRef.Marshal(b, m, deterministic)
}
func (m *GlobalSystemConfigBGPRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSystemConfigBGPRouterRef.Merge(m, src)
}
func (m *GlobalSystemConfigBGPRouterRef) XXX_Size() int {
	return xxx_messageInfo_GlobalSystemConfigBGPRouterRef.Size(m)
}
func (m *GlobalSystemConfigBGPRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSystemConfigBGPRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSystemConfigBGPRouterRef proto.InternalMessageInfo

func (m *GlobalSystemConfigBGPRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *GlobalSystemConfigBGPRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *GlobalSystemConfigBGPRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type GlobalSystemConfigTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *GlobalSystemConfigTagRef) Reset()      { *m = GlobalSystemConfigTagRef{} }
func (*GlobalSystemConfigTagRef) ProtoMessage() {}
func (*GlobalSystemConfigTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{123}
}
func (m *GlobalSystemConfigTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalSystemConfigTagRef.Unmarshal(m, b)
}
func (m *GlobalSystemConfigTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalSystemConfigTagRef.Marshal(b, m, deterministic)
}
func (m *GlobalSystemConfigTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalSystemConfigTagRef.Merge(m, src)
}
func (m *GlobalSystemConfigTagRef) XXX_Size() int {
	return xxx_messageInfo_GlobalSystemConfigTagRef.Size(m)
}
func (m *GlobalSystemConfigTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalSystemConfigTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalSystemConfigTagRef proto.InternalMessageInfo

func (m *GlobalSystemConfigTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *GlobalSystemConfigTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *GlobalSystemConfigTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type GlobalVrouterConfig struct {
	Annotations                  *KeyValuePairs                `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion         int64                         `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                  string                        `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                       []string                      `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                         string                        `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                      *IdPermsType                  `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                         string                        `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                   string                        `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                   string                        `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                       *PermType2                    `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                         string                        `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	EcmpHashingIncludeFields     *EcmpHashingIncludeFields     `protobuf:"bytes,12,opt,name=ecmp_hashing_include_fields,json=ecmpHashingIncludeFields,proto3" json:"ecmp_hashing_include_fields,omitempty" yaml:"ecmp_hashing_include_fields,omitempty"`
	EnableSecurityLogging        bool                          `protobuf:"varint,13,opt,name=enable_security_logging,json=enableSecurityLogging,proto3" json:"enable_security_logging,omitempty" yaml:"enable_security_logging,omitempty"`
	EncapsulationPriorities      *EncapsulationPrioritiesType  `protobuf:"bytes,14,opt,name=encapsulation_priorities,json=encapsulationPriorities,proto3" json:"encapsulation_priorities,omitempty" yaml:"encapsulation_priorities,omitempty"`
	EncryptionMode               string                        `protobuf:"bytes,15,opt,name=encryption_mode,json=encryptionMode,proto3" json:"encryption_mode,omitempty" yaml:"encryption_mode,omitempty"`
	EncryptionTunnelEndpoints    *EncryptionTunnelEndpointList `protobuf:"bytes,16,opt,name=encryption_tunnel_endpoints,json=encryptionTunnelEndpoints,proto3" json:"encryption_tunnel_endpoints,omitempty" yaml:"encryption_tunnel_endpoints,omitempty"`
	FlowAgingTimeoutList         *FlowAgingTimeoutList         `protobuf:"bytes,17,opt,name=flow_aging_timeout_list,json=flowAgingTimeoutList,proto3" json:"flow_aging_timeout_list,omitempty" yaml:"flow_aging_timeout_list,omitempty"`
	FlowExportRate               int64                         `protobuf:"varint,18,opt,name=flow_export_rate,json=flowExportRate,proto3" json:"flow_export_rate,omitempty" yaml:"flow_export_rate,omitempty"`
	ForwardingMode               string                        `protobuf:"bytes,19,opt,name=forwarding_mode,json=forwardingMode,proto3" json:"forwarding_mode,omitempty" yaml:"forwarding_mode,omitempty"`
	LinklocalServices            *LinklocalServicesTypes       `protobuf:"bytes,20,opt,name=linklocal_services,json=linklocalServices,proto3" json:"linklocal_services,omitempty" yaml:"linklocal_services,omitempty"`
	PortTranslationPools         *PortTranslationPools         `protobuf:"bytes,21,opt,name=port_translation_pools,json=portTranslationPools,proto3" json:"port_translation_pools,omitempty" yaml:"port_translation_pools,omitempty"`
	VxlanNetworkIdentifierMode   string                        `protobuf:"bytes,22,opt,name=vxlan_network_identifier_mode,json=vxlanNetworkIdentifierMode,proto3" json:"vxlan_network_identifier_mode,omitempty" yaml:"vxlan_network_identifier_mode,omitempty"`
	TagRefs                      []*GlobalVrouterConfigTagRef  `protobuf:"bytes,1023,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	ApplicationPolicySetBackRefs []*ApplicationPolicySet       `protobuf:"bytes,3025,rep,name=application_policy_set_back_refs,json=applicationPolicySetBackRefs,proto3" json:"application_policy_set_back_refs,omitempty" yaml:"application_policy_set_back_refs,omitempty"`
	SecurityLoggingObjects       []*SecurityLoggingObject      `protobuf:"bytes,2024,rep,name=security_logging_objects,json=securityLoggingObjects,proto3" json:"security_logging_objects,omitempty" yaml:"security_logging_objects,omitempty"`
}

func (m *GlobalVrouterConfig) Reset()      { *m = GlobalVrouterConfig{} }
func (*GlobalVrouterConfig) ProtoMessage() {}
func (*GlobalVrouterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{124}
}
func (m *GlobalVrouterConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalVrouterConfig.Unmarshal(m, b)
}
func (m *GlobalVrouterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalVrouterConfig.Marshal(b, m, deterministic)
}
func (m *GlobalVrouterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalVrouterConfig.Merge(m, src)
}
func (m *GlobalVrouterConfig) XXX_Size() int {
	return xxx_messageInfo_GlobalVrouterConfig.Size(m)
}
func (m *GlobalVrouterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalVrouterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalVrouterConfig proto.InternalMessageInfo

func (m *GlobalVrouterConfig) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *GlobalVrouterConfig) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *GlobalVrouterConfig) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *GlobalVrouterConfig) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *GlobalVrouterConfig) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *GlobalVrouterConfig) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *GlobalVrouterConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GlobalVrouterConfig) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *GlobalVrouterConfig) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *GlobalVrouterConfig) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *GlobalVrouterConfig) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *GlobalVrouterConfig) GetEcmpHashingIncludeFields() *EcmpHashingIncludeFields {
	if m != nil {
		return m.EcmpHashingIncludeFields
	}
	return nil
}

func (m *GlobalVrouterConfig) GetEnableSecurityLogging() bool {
	if m != nil {
		return m.EnableSecurityLogging
	}
	return false
}

func (m *GlobalVrouterConfig) GetEncapsulationPriorities() *EncapsulationPrioritiesType {
	if m != nil {
		return m.EncapsulationPriorities
	}
	return nil
}

func (m *GlobalVrouterConfig) GetEncryptionMode() string {
	if m != nil {
		return m.EncryptionMode
	}
	return ""
}

func (m *GlobalVrouterConfig) GetEncryptionTunnelEndpoints() *EncryptionTunnelEndpointList {
	if m != nil {
		return m.EncryptionTunnelEndpoints
	}
	return nil
}

func (m *GlobalVrouterConfig) GetFlowAgingTimeoutList() *FlowAgingTimeoutList {
	if m != nil {
		return m.FlowAgingTimeoutList
	}
	return nil
}

func (m *GlobalVrouterConfig) GetFlowExportRate() int64 {
	if m != nil {
		return m.FlowExportRate
	}
	return 0
}

func (m *GlobalVrouterConfig) GetForwardingMode() string {
	if m != nil {
		return m.ForwardingMode
	}
	return ""
}

func (m *GlobalVrouterConfig) GetLinklocalServices() *LinklocalServicesTypes {
	if m != nil {
		return m.LinklocalServices
	}
	return nil
}

func (m *GlobalVrouterConfig) GetPortTranslationPools() *PortTranslationPools {
	if m != nil {
		return m.PortTranslationPools
	}
	return nil
}

func (m *GlobalVrouterConfig) GetVxlanNetworkIdentifierMode() string {
	if m != nil {
		return m.VxlanNetworkIdentifierMode
	}
	return ""
}

func (m *GlobalVrouterConfig) GetTagRefs() []*GlobalVrouterConfigTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *GlobalVrouterConfig) GetApplicationPolicySetBackRefs() []*ApplicationPolicySet {
	if m != nil {
		return m.ApplicationPolicySetBackRefs
	}
	return nil
}

func (m *GlobalVrouterConfig) GetSecurityLoggingObjects() []*SecurityLoggingObject {
	if m != nil {
		return m.SecurityLoggingObjects
	}
	return nil
}

type GlobalVrouterConfigTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *GlobalVrouterConfigTagRef) Reset()      { *m = GlobalVrouterConfigTagRef{} }
func (*GlobalVrouterConfigTagRef) ProtoMessage() {}
func (*GlobalVrouterConfigTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{125}
}
func (m *GlobalVrouterConfigTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalVrouterConfigTagRef.Unmarshal(m, b)
}
func (m *GlobalVrouterConfigTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalVrouterConfigTagRef.Marshal(b, m, deterministic)
}
func (m *GlobalVrouterConfigTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalVrouterConfigTagRef.Merge(m, src)
}
func (m *GlobalVrouterConfigTagRef) XXX_Size() int {
	return xxx_messageInfo_GlobalVrouterConfigTagRef.Size(m)
}
func (m *GlobalVrouterConfigTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalVrouterConfigTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalVrouterConfigTagRef proto.InternalMessageInfo

func (m *GlobalVrouterConfigTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *GlobalVrouterConfigTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *GlobalVrouterConfigTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type HardwareInventory struct {
	Annotations                    *KeyValuePairs             `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion           int64                      `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                    string                     `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                         []string                   `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                           string                     `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                        *IdPermsType               `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                           string                     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                     string                     `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                     string                     `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                         *PermType2                 `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                           string                     `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	HardwareInventoryInventoryInfo string                     `protobuf:"bytes,12,opt,name=hardware_inventory_inventory_info,json=hardwareInventoryInventoryInfo,proto3" json:"hardware_inventory_inventory_info,omitempty" yaml:"hardware_inventory_inventory_info,omitempty"`
	TagRefs                        []*HardwareInventoryTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *HardwareInventory) Reset()      { *m = HardwareInventory{} }
func (*HardwareInventory) ProtoMessage() {}
func (*HardwareInventory) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{126}
}
func (m *HardwareInventory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareInventory.Unmarshal(m, b)
}
func (m *HardwareInventory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareInventory.Marshal(b, m, deterministic)
}
func (m *HardwareInventory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareInventory.Merge(m, src)
}
func (m *HardwareInventory) XXX_Size() int {
	return xxx_messageInfo_HardwareInventory.Size(m)
}
func (m *HardwareInventory) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareInventory.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareInventory proto.InternalMessageInfo

func (m *HardwareInventory) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *HardwareInventory) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *HardwareInventory) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *HardwareInventory) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *HardwareInventory) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *HardwareInventory) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *HardwareInventory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HardwareInventory) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *HardwareInventory) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *HardwareInventory) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *HardwareInventory) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *HardwareInventory) GetHardwareInventoryInventoryInfo() string {
	if m != nil {
		return m.HardwareInventoryInventoryInfo
	}
	return ""
}

func (m *HardwareInventory) GetTagRefs() []*HardwareInventoryTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type HardwareInventoryTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *HardwareInventoryTagRef) Reset()      { *m = HardwareInventoryTagRef{} }
func (*HardwareInventoryTagRef) ProtoMessage() {}
func (*HardwareInventoryTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{127}
}
func (m *HardwareInventoryTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareInventoryTagRef.Unmarshal(m, b)
}
func (m *HardwareInventoryTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareInventoryTagRef.Marshal(b, m, deterministic)
}
func (m *HardwareInventoryTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareInventoryTagRef.Merge(m, src)
}
func (m *HardwareInventoryTagRef) XXX_Size() int {
	return xxx_messageInfo_HardwareInventoryTagRef.Size(m)
}
func (m *HardwareInventoryTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareInventoryTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareInventoryTagRef proto.InternalMessageInfo

func (m *HardwareInventoryTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *HardwareInventoryTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *HardwareInventoryTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type Hardware struct {
	Annotations          *KeyValuePairs     `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64              `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string             `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string           `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string             `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType       `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string             `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string             `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string             `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2         `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string             `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	CardRefs             []*HardwareCardRef `protobuf:"bytes,1012,rep,name=card_refs,json=cardRefs,proto3" json:"card_refs,omitempty" yaml:"card_refs,omitempty"`
	TagRefs              []*HardwareTagRef  `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	DeviceImageBackRefs  []*DeviceImage     `protobuf:"bytes,3014,rep,name=device_image_back_refs,json=deviceImageBackRefs,proto3" json:"device_image_back_refs,omitempty" yaml:"device_image_back_refs,omitempty"`
	NodeProfileBackRefs  []*NodeProfile     `protobuf:"bytes,3015,rep,name=node_profile_back_refs,json=nodeProfileBackRefs,proto3" json:"node_profile_back_refs,omitempty" yaml:"node_profile_back_refs,omitempty"`
}

func (m *Hardware) Reset()      { *m = Hardware{} }
func (*Hardware) ProtoMessage() {}
func (*Hardware) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{128}
}
func (m *Hardware) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hardware.Unmarshal(m, b)
}
func (m *Hardware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hardware.Marshal(b, m, deterministic)
}
func (m *Hardware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hardware.Merge(m, src)
}
func (m *Hardware) XXX_Size() int {
	return xxx_messageInfo_Hardware.Size(m)
}
func (m *Hardware) XXX_DiscardUnknown() {
	xxx_messageInfo_Hardware.DiscardUnknown(m)
}

var xxx_messageInfo_Hardware proto.InternalMessageInfo

func (m *Hardware) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Hardware) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *Hardware) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Hardware) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *Hardware) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Hardware) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *Hardware) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Hardware) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *Hardware) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *Hardware) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *Hardware) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Hardware) GetCardRefs() []*HardwareCardRef {
	if m != nil {
		return m.CardRefs
	}
	return nil
}

func (m *Hardware) GetTagRefs() []*HardwareTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *Hardware) GetDeviceImageBackRefs() []*DeviceImage {
	if m != nil {
		return m.DeviceImageBackRefs
	}
	return nil
}

func (m *Hardware) GetNodeProfileBackRefs() []*NodeProfile {
	if m != nil {
		return m.NodeProfileBackRefs
	}
	return nil
}

type HardwareCardRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *HardwareCardRef) Reset()      { *m = HardwareCardRef{} }
func (*HardwareCardRef) ProtoMessage() {}
func (*HardwareCardRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{129}
}
func (m *HardwareCardRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareCardRef.Unmarshal(m, b)
}
func (m *HardwareCardRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareCardRef.Marshal(b, m, deterministic)
}
func (m *HardwareCardRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareCardRef.Merge(m, src)
}
func (m *HardwareCardRef) XXX_Size() int {
	return xxx_messageInfo_HardwareCardRef.Size(m)
}
func (m *HardwareCardRef) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareCardRef.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareCardRef proto.InternalMessageInfo

func (m *HardwareCardRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *HardwareCardRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *HardwareCardRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type HardwareTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *HardwareTagRef) Reset()      { *m = HardwareTagRef{} }
func (*HardwareTagRef) ProtoMessage() {}
func (*HardwareTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{130}
}
func (m *HardwareTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HardwareTagRef.Unmarshal(m, b)
}
func (m *HardwareTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HardwareTagRef.Marshal(b, m, deterministic)
}
func (m *HardwareTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardwareTagRef.Merge(m, src)
}
func (m *HardwareTagRef) XXX_Size() int {
	return xxx_messageInfo_HardwareTagRef.Size(m)
}
func (m *HardwareTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_HardwareTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_HardwareTagRef proto.InternalMessageInfo

func (m *HardwareTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *HardwareTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *HardwareTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type HostBasedService struct {
	Annotations          *KeyValuePairs                       `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                                `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string                               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string                             `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string                               `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType                         `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string                               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string                               `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string                               `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2                           `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string                               `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	HostBasedServiceType string                               `protobuf:"bytes,12,opt,name=host_based_service_type,json=hostBasedServiceType,proto3" json:"host_based_service_type,omitempty" yaml:"host_based_service_type,omitempty"`
	TagRefs              []*HostBasedServiceTagRef            `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualNetworkRefs   []*HostBasedServiceVirtualNetworkRef `protobuf:"bytes,1014,rep,name=virtual_network_refs,json=virtualNetworkRefs,proto3" json:"virtual_network_refs,omitempty" yaml:"virtual_network_refs,omitempty"`
}

func (m *HostBasedService) Reset()      { *m = HostBasedService{} }
func (*HostBasedService) ProtoMessage() {}
func (*HostBasedService) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{131}
}
func (m *HostBasedService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostBasedService.Unmarshal(m, b)
}
func (m *HostBasedService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostBasedService.Marshal(b, m, deterministic)
}
func (m *HostBasedService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostBasedService.Merge(m, src)
}
func (m *HostBasedService) XXX_Size() int {
	return xxx_messageInfo_HostBasedService.Size(m)
}
func (m *HostBasedService) XXX_DiscardUnknown() {
	xxx_messageInfo_HostBasedService.DiscardUnknown(m)
}

var xxx_messageInfo_HostBasedService proto.InternalMessageInfo

func (m *HostBasedService) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *HostBasedService) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *HostBasedService) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *HostBasedService) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *HostBasedService) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *HostBasedService) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *HostBasedService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HostBasedService) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *HostBasedService) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *HostBasedService) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *HostBasedService) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *HostBasedService) GetHostBasedServiceType() string {
	if m != nil {
		return m.HostBasedServiceType
	}
	return ""
}

func (m *HostBasedService) GetTagRefs() []*HostBasedServiceTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *HostBasedService) GetVirtualNetworkRefs() []*HostBasedServiceVirtualNetworkRef {
	if m != nil {
		return m.VirtualNetworkRefs
	}
	return nil
}

type HostBasedServiceTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *HostBasedServiceTagRef) Reset()      { *m = HostBasedServiceTagRef{} }
func (*HostBasedServiceTagRef) ProtoMessage() {}
func (*HostBasedServiceTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{132}
}
func (m *HostBasedServiceTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostBasedServiceTagRef.Unmarshal(m, b)
}
func (m *HostBasedServiceTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostBasedServiceTagRef.Marshal(b, m, deterministic)
}
func (m *HostBasedServiceTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostBasedServiceTagRef.Merge(m, src)
}
func (m *HostBasedServiceTagRef) XXX_Size() int {
	return xxx_messageInfo_HostBasedServiceTagRef.Size(m)
}
func (m *HostBasedServiceTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_HostBasedServiceTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_HostBasedServiceTagRef proto.InternalMessageInfo

func (m *HostBasedServiceTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *HostBasedServiceTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *HostBasedServiceTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type HostBasedServiceVirtualNetworkRef struct {
	UUID string                     `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string                   `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string                     `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *ServiceVirtualNetworkType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *HostBasedServiceVirtualNetworkRef) Reset()      { *m = HostBasedServiceVirtualNetworkRef{} }
func (*HostBasedServiceVirtualNetworkRef) ProtoMessage() {}
func (*HostBasedServiceVirtualNetworkRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{133}
}
func (m *HostBasedServiceVirtualNetworkRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostBasedServiceVirtualNetworkRef.Unmarshal(m, b)
}
func (m *HostBasedServiceVirtualNetworkRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostBasedServiceVirtualNetworkRef.Marshal(b, m, deterministic)
}
func (m *HostBasedServiceVirtualNetworkRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostBasedServiceVirtualNetworkRef.Merge(m, src)
}
func (m *HostBasedServiceVirtualNetworkRef) XXX_Size() int {
	return xxx_messageInfo_HostBasedServiceVirtualNetworkRef.Size(m)
}
func (m *HostBasedServiceVirtualNetworkRef) XXX_DiscardUnknown() {
	xxx_messageInfo_HostBasedServiceVirtualNetworkRef.DiscardUnknown(m)
}

var xxx_messageInfo_HostBasedServiceVirtualNetworkRef proto.InternalMessageInfo

func (m *HostBasedServiceVirtualNetworkRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *HostBasedServiceVirtualNetworkRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *HostBasedServiceVirtualNetworkRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *HostBasedServiceVirtualNetworkRef) GetAttr() *ServiceVirtualNetworkType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type InstanceIP struct {
	Annotations                 *KeyValuePairs                          `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion        int64                                   `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                 string                                  `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                      []string                                `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                        string                                  `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                     *IdPermsType                            `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                        string                                  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                  string                                  `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                  string                                  `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                      *PermType2                              `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                        string                                  `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	InstanceIPAddress           string                                  `protobuf:"bytes,12,opt,name=instance_ip_address,json=instanceIpAddress,proto3" json:"instance_ip_address,omitempty" yaml:"instance_ip_address,omitempty"`
	InstanceIPFamily            string                                  `protobuf:"bytes,13,opt,name=instance_ip_family,json=instanceIpFamily,proto3" json:"instance_ip_family,omitempty" yaml:"instance_ip_family,omitempty"`
	InstanceIPLocalIP           bool                                    `protobuf:"varint,14,opt,name=instance_ip_local_ip,json=instanceIpLocalIp,proto3" json:"instance_ip_local_ip,omitempty" yaml:"instance_ip_local_ip,omitempty"`
	InstanceIPMode              string                                  `protobuf:"bytes,15,opt,name=instance_ip_mode,json=instanceIpMode,proto3" json:"instance_ip_mode,omitempty" yaml:"instance_ip_mode,omitempty"`
	InstanceIPSecondary         bool                                    `protobuf:"varint,16,opt,name=instance_ip_secondary,json=instanceIpSecondary,proto3" json:"instance_ip_secondary,omitempty" yaml:"instance_ip_secondary,omitempty"`
	InstanceIPSubnet            *SubnetType                             `protobuf:"bytes,17,opt,name=instance_ip_subnet,json=instanceIpSubnet,proto3" json:"instance_ip_subnet,omitempty" yaml:"instance_ip_subnet,omitempty"`
	InstanceIPSubscriberTag     string                                  `protobuf:"bytes,18,opt,name=instance_ip_subscriber_tag,json=instanceIpSubscriberTag,proto3" json:"instance_ip_subscriber_tag,omitempty" yaml:"instance_ip_subscriber_tag,omitempty"`
	SecondaryIPTrackingIP       *SubnetType                             `protobuf:"bytes,19,opt,name=secondary_ip_tracking_ip,json=secondaryIpTrackingIp,proto3" json:"secondary_ip_tracking_ip,omitempty" yaml:"secondary_ip_tracking_ip,omitempty"`
	ServiceHealthCheckIP        bool                                    `protobuf:"varint,20,opt,name=service_health_check_ip,json=serviceHealthCheckIp,proto3" json:"service_health_check_ip,omitempty" yaml:"service_health_check_ip,omitempty"`
	ServiceInstanceIP           bool                                    `protobuf:"varint,21,opt,name=service_instance_ip,json=serviceInstanceIp,proto3" json:"service_instance_ip,omitempty" yaml:"service_instance_ip,omitempty"`
	SubnetUUID                  string                                  `protobuf:"bytes,22,opt,name=subnet_uuid,json=subnetUuid,proto3" json:"subnet_uuid,omitempty" yaml:"subnet_uuid,omitempty"`
	FlowNodeRefs                []*InstanceIPFlowNodeRef                `protobuf:"bytes,1023,rep,name=flow_node_refs,json=flowNodeRefs,proto3" json:"flow_node_refs,omitempty" yaml:"flow_node_refs,omitempty"`
	LogicalInterfaceRefs        []*InstanceIPLogicalInterfaceRef        `protobuf:"bytes,1024,rep,name=logical_interface_refs,json=logicalInterfaceRefs,proto3" json:"logical_interface_refs,omitempty" yaml:"logical_interface_refs,omitempty"`
	NetworkIpamRefs             []*InstanceIPNetworkIpamRef             `protobuf:"bytes,1025,rep,name=network_ipam_refs,json=networkIpamRefs,proto3" json:"network_ipam_refs,omitempty" yaml:"network_ipam_refs,omitempty"`
	PhysicalRouterRefs          []*InstanceIPPhysicalRouterRef          `protobuf:"bytes,1026,rep,name=physical_router_refs,json=physicalRouterRefs,proto3" json:"physical_router_refs,omitempty" yaml:"physical_router_refs,omitempty"`
	TagRefs                     []*InstanceIPTagRef                     `protobuf:"bytes,1027,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceRefs []*InstanceIPVirtualMachineInterfaceRef `protobuf:"bytes,1028,rep,name=virtual_machine_interface_refs,json=virtualMachineInterfaceRefs,proto3" json:"virtual_machine_interface_refs,omitempty" yaml:"virtual_machine_interface_refs,omitempty"`
	VirtualNetworkRefs          []*InstanceIPVirtualNetworkRef          `protobuf:"bytes,1029,rep,name=virtual_network_refs,json=virtualNetworkRefs,proto3" json:"virtual_network_refs,omitempty" yaml:"virtual_network_refs,omitempty"`
	VirtualRouterRefs           []*InstanceIPVirtualRouterRef           `protobuf:"bytes,1030,rep,name=virtual_router_refs,json=virtualRouterRefs,proto3" json:"virtual_router_refs,omitempty" yaml:"virtual_router_refs,omitempty"`
	ServiceInstanceBackRefs     []*ServiceInstance                      `protobuf:"bytes,3032,rep,name=service_instance_back_refs,json=serviceInstanceBackRefs,proto3" json:"service_instance_back_refs,omitempty" yaml:"service_instance_back_refs,omitempty"`
	FloatingIPs                 []*FloatingIP                           `protobuf:"bytes,2031,rep,name=floating_ips,json=floatingIps,proto3" json:"floating_ips,omitempty" yaml:"floating_ips,omitempty"`
}

func (m *InstanceIP) Reset()      { *m = InstanceIP{} }
func (*InstanceIP) ProtoMessage() {}
func (*InstanceIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{134}
}
func (m *InstanceIP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceIP.Unmarshal(m, b)
}
func (m *InstanceIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceIP.Marshal(b, m, deterministic)
}
func (m *InstanceIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceIP.Merge(m, src)
}
func (m *InstanceIP) XXX_Size() int {
	return xxx_messageInfo_InstanceIP.Size(m)
}
func (m *InstanceIP) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceIP.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceIP proto.InternalMessageInfo

func (m *InstanceIP) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *InstanceIP) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *InstanceIP) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *InstanceIP) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *InstanceIP) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *InstanceIP) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *InstanceIP) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstanceIP) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *InstanceIP) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *InstanceIP) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *InstanceIP) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *InstanceIP) GetInstanceIPAddress() string {
	if m != nil {
		return m.InstanceIPAddress
	}
	return ""
}

func (m *InstanceIP) GetInstanceIPFamily() string {
	if m != nil {
		return m.InstanceIPFamily
	}
	return ""
}

func (m *InstanceIP) GetInstanceIPLocalIP() bool {
	if m != nil {
		return m.InstanceIPLocalIP
	}
	return false
}

func (m *InstanceIP) GetInstanceIPMode() string {
	if m != nil {
		return m.InstanceIPMode
	}
	return ""
}

func (m *InstanceIP) GetInstanceIPSecondary() bool {
	if m != nil {
		return m.InstanceIPSecondary
	}
	return false
}

func (m *InstanceIP) GetInstanceIPSubnet() *SubnetType {
	if m != nil {
		return m.InstanceIPSubnet
	}
	return nil
}

func (m *InstanceIP) GetInstanceIPSubscriberTag() string {
	if m != nil {
		return m.InstanceIPSubscriberTag
	}
	return ""
}

func (m *InstanceIP) GetSecondaryIPTrackingIP() *SubnetType {
	if m != nil {
		return m.SecondaryIPTrackingIP
	}
	return nil
}

func (m *InstanceIP) GetServiceHealthCheckIP() bool {
	if m != nil {
		return m.ServiceHealthCheckIP
	}
	return false
}

func (m *InstanceIP) GetServiceInstanceIP() bool {
	if m != nil {
		return m.ServiceInstanceIP
	}
	return false
}

func (m *InstanceIP) GetSubnetUUID() string {
	if m != nil {
		return m.SubnetUUID
	}
	return ""
}

func (m *InstanceIP) GetFlowNodeRefs() []*InstanceIPFlowNodeRef {
	if m != nil {
		return m.FlowNodeRefs
	}
	return nil
}

func (m *InstanceIP) GetLogicalInterfaceRefs() []*InstanceIPLogicalInterfaceRef {
	if m != nil {
		return m.LogicalInterfaceRefs
	}
	return nil
}

func (m *InstanceIP) GetNetworkIpamRefs() []*InstanceIPNetworkIpamRef {
	if m != nil {
		return m.NetworkIpamRefs
	}
	return nil
}

func (m *InstanceIP) GetPhysicalRouterRefs() []*InstanceIPPhysicalRouterRef {
	if m != nil {
		return m.PhysicalRouterRefs
	}
	return nil
}

func (m *InstanceIP) GetTagRefs() []*InstanceIPTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *InstanceIP) GetVirtualMachineInterfaceRefs() []*InstanceIPVirtualMachineInterfaceRef {
	if m != nil {
		return m.VirtualMachineInterfaceRefs
	}
	return nil
}

func (m *InstanceIP) GetVirtualNetworkRefs() []*InstanceIPVirtualNetworkRef {
	if m != nil {
		return m.VirtualNetworkRefs
	}
	return nil
}

func (m *InstanceIP) GetVirtualRouterRefs() []*InstanceIPVirtualRouterRef {
	if m != nil {
		return m.VirtualRouterRefs
	}
	return nil
}

func (m *InstanceIP) GetServiceInstanceBackRefs() []*ServiceInstance {
	if m != nil {
		return m.ServiceInstanceBackRefs
	}
	return nil
}

func (m *InstanceIP) GetFloatingIPs() []*FloatingIP {
	if m != nil {
		return m.FloatingIPs
	}
	return nil
}

type InstanceIPFlowNodeRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *InstanceIPFlowNodeRef) Reset()      { *m = InstanceIPFlowNodeRef{} }
func (*InstanceIPFlowNodeRef) ProtoMessage() {}
func (*InstanceIPFlowNodeRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{135}
}
func (m *InstanceIPFlowNodeRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceIPFlowNodeRef.Unmarshal(m, b)
}
func (m *InstanceIPFlowNodeRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceIPFlowNodeRef.Marshal(b, m, deterministic)
}
func (m *InstanceIPFlowNodeRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceIPFlowNodeRef.Merge(m, src)
}
func (m *InstanceIPFlowNodeRef) XXX_Size() int {
	return xxx_messageInfo_InstanceIPFlowNodeRef.Size(m)
}
func (m *InstanceIPFlowNodeRef) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceIPFlowNodeRef.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceIPFlowNodeRef proto.InternalMessageInfo

func (m *InstanceIPFlowNodeRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *InstanceIPFlowNodeRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *InstanceIPFlowNodeRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type InstanceIPLogicalInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *InstanceIPLogicalInterfaceRef) Reset()      { *m = InstanceIPLogicalInterfaceRef{} }
func (*InstanceIPLogicalInterfaceRef) ProtoMessage() {}
func (*InstanceIPLogicalInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{136}
}
func (m *InstanceIPLogicalInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceIPLogicalInterfaceRef.Unmarshal(m, b)
}
func (m *InstanceIPLogicalInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceIPLogicalInterfaceRef.Marshal(b, m, deterministic)
}
func (m *InstanceIPLogicalInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceIPLogicalInterfaceRef.Merge(m, src)
}
func (m *InstanceIPLogicalInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_InstanceIPLogicalInterfaceRef.Size(m)
}
func (m *InstanceIPLogicalInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceIPLogicalInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceIPLogicalInterfaceRef proto.InternalMessageInfo

func (m *InstanceIPLogicalInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *InstanceIPLogicalInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *InstanceIPLogicalInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type InstanceIPNetworkIpamRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *InstanceIPNetworkIpamRef) Reset()      { *m = InstanceIPNetworkIpamRef{} }
func (*InstanceIPNetworkIpamRef) ProtoMessage() {}
func (*InstanceIPNetworkIpamRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{137}
}
func (m *InstanceIPNetworkIpamRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceIPNetworkIpamRef.Unmarshal(m, b)
}
func (m *InstanceIPNetworkIpamRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceIPNetworkIpamRef.Marshal(b, m, deterministic)
}
func (m *InstanceIPNetworkIpamRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceIPNetworkIpamRef.Merge(m, src)
}
func (m *InstanceIPNetworkIpamRef) XXX_Size() int {
	return xxx_messageInfo_InstanceIPNetworkIpamRef.Size(m)
}
func (m *InstanceIPNetworkIpamRef) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceIPNetworkIpamRef.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceIPNetworkIpamRef proto.InternalMessageInfo

func (m *InstanceIPNetworkIpamRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *InstanceIPNetworkIpamRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *InstanceIPNetworkIpamRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type InstanceIPPhysicalRouterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *InstanceIPPhysicalRouterRef) Reset()      { *m = InstanceIPPhysicalRouterRef{} }
func (*InstanceIPPhysicalRouterRef) ProtoMessage() {}
func (*InstanceIPPhysicalRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{138}
}
func (m *InstanceIPPhysicalRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceIPPhysicalRouterRef.Unmarshal(m, b)
}
func (m *InstanceIPPhysicalRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceIPPhysicalRouterRef.Marshal(b, m, deterministic)
}
func (m *InstanceIPPhysicalRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceIPPhysicalRouterRef.Merge(m, src)
}
func (m *InstanceIPPhysicalRouterRef) XXX_Size() int {
	return xxx_messageInfo_InstanceIPPhysicalRouterRef.Size(m)
}
func (m *InstanceIPPhysicalRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceIPPhysicalRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceIPPhysicalRouterRef proto.InternalMessageInfo

func (m *InstanceIPPhysicalRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *InstanceIPPhysicalRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *InstanceIPPhysicalRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type InstanceIPTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *InstanceIPTagRef) Reset()      { *m = InstanceIPTagRef{} }
func (*InstanceIPTagRef) ProtoMessage() {}
func (*InstanceIPTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{139}
}
func (m *InstanceIPTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceIPTagRef.Unmarshal(m, b)
}
func (m *InstanceIPTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceIPTagRef.Marshal(b, m, deterministic)
}
func (m *InstanceIPTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceIPTagRef.Merge(m, src)
}
func (m *InstanceIPTagRef) XXX_Size() int {
	return xxx_messageInfo_InstanceIPTagRef.Size(m)
}
func (m *InstanceIPTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceIPTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceIPTagRef proto.InternalMessageInfo

func (m *InstanceIPTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *InstanceIPTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *InstanceIPTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type InstanceIPVirtualMachineInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *InstanceIPVirtualMachineInterfaceRef) Reset()      { *m = InstanceIPVirtualMachineInterfaceRef{} }
func (*InstanceIPVirtualMachineInterfaceRef) ProtoMessage() {}
func (*InstanceIPVirtualMachineInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{140}
}
func (m *InstanceIPVirtualMachineInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceIPVirtualMachineInterfaceRef.Unmarshal(m, b)
}
func (m *InstanceIPVirtualMachineInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceIPVirtualMachineInterfaceRef.Marshal(b, m, deterministic)
}
func (m *InstanceIPVirtualMachineInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceIPVirtualMachineInterfaceRef.Merge(m, src)
}
func (m *InstanceIPVirtualMachineInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_InstanceIPVirtualMachineInterfaceRef.Size(m)
}
func (m *InstanceIPVirtualMachineInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceIPVirtualMachineInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceIPVirtualMachineInterfaceRef proto.InternalMessageInfo

func (m *InstanceIPVirtualMachineInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *InstanceIPVirtualMachineInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *InstanceIPVirtualMachineInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type InstanceIPVirtualNetworkRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *InstanceIPVirtualNetworkRef) Reset()      { *m = InstanceIPVirtualNetworkRef{} }
func (*InstanceIPVirtualNetworkRef) ProtoMessage() {}
func (*InstanceIPVirtualNetworkRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{141}
}
func (m *InstanceIPVirtualNetworkRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceIPVirtualNetworkRef.Unmarshal(m, b)
}
func (m *InstanceIPVirtualNetworkRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceIPVirtualNetworkRef.Marshal(b, m, deterministic)
}
func (m *InstanceIPVirtualNetworkRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceIPVirtualNetworkRef.Merge(m, src)
}
func (m *InstanceIPVirtualNetworkRef) XXX_Size() int {
	return xxx_messageInfo_InstanceIPVirtualNetworkRef.Size(m)
}
func (m *InstanceIPVirtualNetworkRef) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceIPVirtualNetworkRef.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceIPVirtualNetworkRef proto.InternalMessageInfo

func (m *InstanceIPVirtualNetworkRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *InstanceIPVirtualNetworkRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *InstanceIPVirtualNetworkRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type InstanceIPVirtualRouterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *InstanceIPVirtualRouterRef) Reset()      { *m = InstanceIPVirtualRouterRef{} }
func (*InstanceIPVirtualRouterRef) ProtoMessage() {}
func (*InstanceIPVirtualRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{142}
}
func (m *InstanceIPVirtualRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceIPVirtualRouterRef.Unmarshal(m, b)
}
func (m *InstanceIPVirtualRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceIPVirtualRouterRef.Marshal(b, m, deterministic)
}
func (m *InstanceIPVirtualRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceIPVirtualRouterRef.Merge(m, src)
}
func (m *InstanceIPVirtualRouterRef) XXX_Size() int {
	return xxx_messageInfo_InstanceIPVirtualRouterRef.Size(m)
}
func (m *InstanceIPVirtualRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceIPVirtualRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceIPVirtualRouterRef proto.InternalMessageInfo

func (m *InstanceIPVirtualRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *InstanceIPVirtualRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *InstanceIPVirtualRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type IntentMap struct {
	Annotations            *KeyValuePairs     `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion   int64              `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName            string             `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                 []string           `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                   string             `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                *IdPermsType       `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                   string             `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType             string             `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID             string             `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                 *PermType2         `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                   string             `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	IntentMapIntentType    string             `protobuf:"bytes,12,opt,name=intent_map_intent_type,json=intentMapIntentType,proto3" json:"intent_map_intent_type,omitempty" yaml:"intent_map_intent_type,omitempty"`
	TagRefs                []*IntentMapTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	FabricBackRefs         []*Fabric          `protobuf:"bytes,3014,rep,name=fabric_back_refs,json=fabricBackRefs,proto3" json:"fabric_back_refs,omitempty" yaml:"fabric_back_refs,omitempty"`
	PhysicalRouterBackRefs []*PhysicalRouter  `protobuf:"bytes,3015,rep,name=physical_router_back_refs,json=physicalRouterBackRefs,proto3" json:"physical_router_back_refs,omitempty" yaml:"physical_router_back_refs,omitempty"`
	VirtualNetworkBackRefs []*VirtualNetwork  `protobuf:"bytes,3016,rep,name=virtual_network_back_refs,json=virtualNetworkBackRefs,proto3" json:"virtual_network_back_refs,omitempty" yaml:"virtual_network_back_refs,omitempty"`
}

func (m *IntentMap) Reset()      { *m = IntentMap{} }
func (*IntentMap) ProtoMessage() {}
func (*IntentMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{143}
}
func (m *IntentMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntentMap.Unmarshal(m, b)
}
func (m *IntentMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntentMap.Marshal(b, m, deterministic)
}
func (m *IntentMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntentMap.Merge(m, src)
}
func (m *IntentMap) XXX_Size() int {
	return xxx_messageInfo_IntentMap.Size(m)
}
func (m *IntentMap) XXX_DiscardUnknown() {
	xxx_messageInfo_IntentMap.DiscardUnknown(m)
}

var xxx_messageInfo_IntentMap proto.InternalMessageInfo

func (m *IntentMap) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *IntentMap) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *IntentMap) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *IntentMap) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *IntentMap) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *IntentMap) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *IntentMap) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IntentMap) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *IntentMap) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *IntentMap) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *IntentMap) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *IntentMap) GetIntentMapIntentType() string {
	if m != nil {
		return m.IntentMapIntentType
	}
	return ""
}

func (m *IntentMap) GetTagRefs() []*IntentMapTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *IntentMap) GetFabricBackRefs() []*Fabric {
	if m != nil {
		return m.FabricBackRefs
	}
	return nil
}

func (m *IntentMap) GetPhysicalRouterBackRefs() []*PhysicalRouter {
	if m != nil {
		return m.PhysicalRouterBackRefs
	}
	return nil
}

func (m *IntentMap) GetVirtualNetworkBackRefs() []*VirtualNetwork {
	if m != nil {
		return m.VirtualNetworkBackRefs
	}
	return nil
}

type IntentMapTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *IntentMapTagRef) Reset()      { *m = IntentMapTagRef{} }
func (*IntentMapTagRef) ProtoMessage() {}
func (*IntentMapTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{144}
}
func (m *IntentMapTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntentMapTagRef.Unmarshal(m, b)
}
func (m *IntentMapTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntentMapTagRef.Marshal(b, m, deterministic)
}
func (m *IntentMapTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntentMapTagRef.Merge(m, src)
}
func (m *IntentMapTagRef) XXX_Size() int {
	return xxx_messageInfo_IntentMapTagRef.Size(m)
}
func (m *IntentMapTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_IntentMapTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_IntentMapTagRef proto.InternalMessageInfo

func (m *IntentMapTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *IntentMapTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *IntentMapTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type InterfaceRouteTable struct {
	Annotations                     *KeyValuePairs                           `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                                    `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                                   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                                 `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                                   `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType                             `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                                   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                                   `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                                   `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                               `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                                   `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	InterfaceRouteTableRoutes       *RouteTableType                          `protobuf:"bytes,12,opt,name=interface_route_table_routes,json=interfaceRouteTableRoutes,proto3" json:"interface_route_table_routes,omitempty" yaml:"interface_route_table_routes,omitempty"`
	ServiceInstanceRefs             []*InterfaceRouteTableServiceInstanceRef `protobuf:"bytes,1013,rep,name=service_instance_refs,json=serviceInstanceRefs,proto3" json:"service_instance_refs,omitempty" yaml:"service_instance_refs,omitempty"`
	TagRefs                         []*InterfaceRouteTableTagRef             `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceBackRefs []*VirtualMachineInterface               `protobuf:"bytes,3015,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
}

func (m *InterfaceRouteTable) Reset()      { *m = InterfaceRouteTable{} }
func (*InterfaceRouteTable) ProtoMessage() {}
func (*InterfaceRouteTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{145}
}
func (m *InterfaceRouteTable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InterfaceRouteTable.Unmarshal(m, b)
}
func (m *InterfaceRouteTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InterfaceRouteTable.Marshal(b, m, deterministic)
}
func (m *InterfaceRouteTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceRouteTable.Merge(m, src)
}
func (m *InterfaceRouteTable) XXX_Size() int {
	return xxx_messageInfo_InterfaceRouteTable.Size(m)
}
func (m *InterfaceRouteTable) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceRouteTable.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceRouteTable proto.InternalMessageInfo

func (m *InterfaceRouteTable) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *InterfaceRouteTable) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *InterfaceRouteTable) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *InterfaceRouteTable) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *InterfaceRouteTable) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *InterfaceRouteTable) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *InterfaceRouteTable) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InterfaceRouteTable) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *InterfaceRouteTable) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *InterfaceRouteTable) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *InterfaceRouteTable) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *InterfaceRouteTable) GetInterfaceRouteTableRoutes() *RouteTableType {
	if m != nil {
		return m.InterfaceRouteTableRoutes
	}
	return nil
}

func (m *InterfaceRouteTable) GetServiceInstanceRefs() []*InterfaceRouteTableServiceInstanceRef {
	if m != nil {
		return m.ServiceInstanceRefs
	}
	return nil
}

func (m *InterfaceRouteTable) GetTagRefs() []*InterfaceRouteTableTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *InterfaceRouteTable) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

type InterfaceRouteTableServiceInstanceRef struct {
	UUID string               `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string             `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string               `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *ServiceInterfaceTag `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *InterfaceRouteTableServiceInstanceRef) Reset()      { *m = InterfaceRouteTableServiceInstanceRef{} }
func (*InterfaceRouteTableServiceInstanceRef) ProtoMessage() {}
func (*InterfaceRouteTableServiceInstanceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{146}
}
func (m *InterfaceRouteTableServiceInstanceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InterfaceRouteTableServiceInstanceRef.Unmarshal(m, b)
}
func (m *InterfaceRouteTableServiceInstanceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InterfaceRouteTableServiceInstanceRef.Marshal(b, m, deterministic)
}
func (m *InterfaceRouteTableServiceInstanceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceRouteTableServiceInstanceRef.Merge(m, src)
}
func (m *InterfaceRouteTableServiceInstanceRef) XXX_Size() int {
	return xxx_messageInfo_InterfaceRouteTableServiceInstanceRef.Size(m)
}
func (m *InterfaceRouteTableServiceInstanceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceRouteTableServiceInstanceRef.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceRouteTableServiceInstanceRef proto.InternalMessageInfo

func (m *InterfaceRouteTableServiceInstanceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *InterfaceRouteTableServiceInstanceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *InterfaceRouteTableServiceInstanceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *InterfaceRouteTableServiceInstanceRef) GetAttr() *ServiceInterfaceTag {
	if m != nil {
		return m.Attr
	}
	return nil
}

type InterfaceRouteTableTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *InterfaceRouteTableTagRef) Reset()      { *m = InterfaceRouteTableTagRef{} }
func (*InterfaceRouteTableTagRef) ProtoMessage() {}
func (*InterfaceRouteTableTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{147}
}
func (m *InterfaceRouteTableTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InterfaceRouteTableTagRef.Unmarshal(m, b)
}
func (m *InterfaceRouteTableTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InterfaceRouteTableTagRef.Marshal(b, m, deterministic)
}
func (m *InterfaceRouteTableTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceRouteTableTagRef.Merge(m, src)
}
func (m *InterfaceRouteTableTagRef) XXX_Size() int {
	return xxx_messageInfo_InterfaceRouteTableTagRef.Size(m)
}
func (m *InterfaceRouteTableTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceRouteTableTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceRouteTableTagRef proto.InternalMessageInfo

func (m *InterfaceRouteTableTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *InterfaceRouteTableTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *InterfaceRouteTableTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type JobTemplate struct {
	Annotations                 *KeyValuePairs          `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion        int64                   `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                 string                  `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                      []string                `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                        string                  `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                     *IdPermsType            `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                        string                  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                  string                  `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                  string                  `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                      *PermType2              `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                        string                  `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	JobTemplateConcurrencyLevel string                  `protobuf:"bytes,12,opt,name=job_template_concurrency_level,json=jobTemplateConcurrencyLevel,proto3" json:"job_template_concurrency_level,omitempty" yaml:"job_template_concurrency_level,omitempty"`
	JobTemplateDescription      string                  `protobuf:"bytes,13,opt,name=job_template_description,json=jobTemplateDescription,proto3" json:"job_template_description,omitempty" yaml:"job_template_description,omitempty"`
	JobTemplateExecutables      *ExecutableInfoListType `protobuf:"bytes,14,opt,name=job_template_executables,json=jobTemplateExecutables,proto3" json:"job_template_executables,omitempty" yaml:"job_template_executables,omitempty"`
	JobTemplateInputSchema      string                  `protobuf:"bytes,15,opt,name=job_template_input_schema,json=jobTemplateInputSchema,proto3" json:"job_template_input_schema,omitempty" yaml:"job_template_input_schema,omitempty"`
	JobTemplateInputUISchema    string                  `protobuf:"bytes,16,opt,name=job_template_input_ui_schema,json=jobTemplateInputUiSchema,proto3" json:"job_template_input_ui_schema,omitempty" yaml:"job_template_input_ui_schema,omitempty"`
	JobTemplateOutputSchema     string                  `protobuf:"bytes,17,opt,name=job_template_output_schema,json=jobTemplateOutputSchema,proto3" json:"job_template_output_schema,omitempty" yaml:"job_template_output_schema,omitempty"`
	JobTemplateOutputUISchema   string                  `protobuf:"bytes,18,opt,name=job_template_output_ui_schema,json=jobTemplateOutputUiSchema,proto3" json:"job_template_output_ui_schema,omitempty" yaml:"job_template_output_ui_schema,omitempty"`
	JobTemplatePlaybooks        *PlaybookInfoListType   `protobuf:"bytes,19,opt,name=job_template_playbooks,json=jobTemplatePlaybooks,proto3" json:"job_template_playbooks,omitempty" yaml:"job_template_playbooks,omitempty"`
	JobTemplateSynchronousJob   bool                    `protobuf:"varint,20,opt,name=job_template_synchronous_job,json=jobTemplateSynchronousJob,proto3" json:"job_template_synchronous_job,omitempty" yaml:"job_template_synchronous_job,omitempty"`
	JobTemplateType             string                  `protobuf:"bytes,21,opt,name=job_template_type,json=jobTemplateType,proto3" json:"job_template_type,omitempty" yaml:"job_template_type,omitempty"`
	TagRefs                     []*JobTemplateTagRef    `protobuf:"bytes,1022,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	NodeProfileBackRefs         []*NodeProfile          `protobuf:"bytes,3023,rep,name=node_profile_back_refs,json=nodeProfileBackRefs,proto3" json:"node_profile_back_refs,omitempty" yaml:"node_profile_back_refs,omitempty"`
}

func (m *JobTemplate) Reset()      { *m = JobTemplate{} }
func (*JobTemplate) ProtoMessage() {}
func (*JobTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{148}
}
func (m *JobTemplate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobTemplate.Unmarshal(m, b)
}
func (m *JobTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobTemplate.Marshal(b, m, deterministic)
}
func (m *JobTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobTemplate.Merge(m, src)
}
func (m *JobTemplate) XXX_Size() int {
	return xxx_messageInfo_JobTemplate.Size(m)
}
func (m *JobTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_JobTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_JobTemplate proto.InternalMessageInfo

func (m *JobTemplate) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *JobTemplate) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *JobTemplate) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *JobTemplate) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *JobTemplate) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *JobTemplate) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *JobTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobTemplate) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *JobTemplate) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *JobTemplate) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *JobTemplate) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *JobTemplate) GetJobTemplateConcurrencyLevel() string {
	if m != nil {
		return m.JobTemplateConcurrencyLevel
	}
	return ""
}

func (m *JobTemplate) GetJobTemplateDescription() string {
	if m != nil {
		return m.JobTemplateDescription
	}
	return ""
}

func (m *JobTemplate) GetJobTemplateExecutables() *ExecutableInfoListType {
	if m != nil {
		return m.JobTemplateExecutables
	}
	return nil
}

func (m *JobTemplate) GetJobTemplateInputSchema() string {
	if m != nil {
		return m.JobTemplateInputSchema
	}
	return ""
}

func (m *JobTemplate) GetJobTemplateInputUISchema() string {
	if m != nil {
		return m.JobTemplateInputUISchema
	}
	return ""
}

func (m *JobTemplate) GetJobTemplateOutputSchema() string {
	if m != nil {
		return m.JobTemplateOutputSchema
	}
	return ""
}

func (m *JobTemplate) GetJobTemplateOutputUISchema() string {
	if m != nil {
		return m.JobTemplateOutputUISchema
	}
	return ""
}

func (m *JobTemplate) GetJobTemplatePlaybooks() *PlaybookInfoListType {
	if m != nil {
		return m.JobTemplatePlaybooks
	}
	return nil
}

func (m *JobTemplate) GetJobTemplateSynchronousJob() bool {
	if m != nil {
		return m.JobTemplateSynchronousJob
	}
	return false
}

func (m *JobTemplate) GetJobTemplateType() string {
	if m != nil {
		return m.JobTemplateType
	}
	return ""
}

func (m *JobTemplate) GetTagRefs() []*JobTemplateTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *JobTemplate) GetNodeProfileBackRefs() []*NodeProfile {
	if m != nil {
		return m.NodeProfileBackRefs
	}
	return nil
}

type JobTemplateTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *JobTemplateTagRef) Reset()      { *m = JobTemplateTagRef{} }
func (*JobTemplateTagRef) ProtoMessage() {}
func (*JobTemplateTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{149}
}
func (m *JobTemplateTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobTemplateTagRef.Unmarshal(m, b)
}
func (m *JobTemplateTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobTemplateTagRef.Marshal(b, m, deterministic)
}
func (m *JobTemplateTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobTemplateTagRef.Merge(m, src)
}
func (m *JobTemplateTagRef) XXX_Size() int {
	return xxx_messageInfo_JobTemplateTagRef.Size(m)
}
func (m *JobTemplateTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_JobTemplateTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_JobTemplateTagRef proto.InternalMessageInfo

func (m *JobTemplateTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *JobTemplateTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *JobTemplateTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LinkAggregationGroup struct {
	Annotations                     *KeyValuePairs                                    `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                                             `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                                            `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                                          `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                                            `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType                                      `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                                            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                                            `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                                            `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                                        `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                                            `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	LinkAggregationGroupLacpEnabled bool                                              `protobuf:"varint,12,opt,name=link_aggregation_group_lacp_enabled,json=linkAggregationGroupLacpEnabled,proto3" json:"link_aggregation_group_lacp_enabled,omitempty" yaml:"link_aggregation_group_lacp_enabled,omitempty"`
	PhysicalInterfaceRefs           []*LinkAggregationGroupPhysicalInterfaceRef       `protobuf:"bytes,1013,rep,name=physical_interface_refs,json=physicalInterfaceRefs,proto3" json:"physical_interface_refs,omitempty" yaml:"physical_interface_refs,omitempty"`
	TagRefs                         []*LinkAggregationGroupTagRef                     `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceRefs     []*LinkAggregationGroupVirtualMachineInterfaceRef `protobuf:"bytes,1015,rep,name=virtual_machine_interface_refs,json=virtualMachineInterfaceRefs,proto3" json:"virtual_machine_interface_refs,omitempty" yaml:"virtual_machine_interface_refs,omitempty"`
}

func (m *LinkAggregationGroup) Reset()      { *m = LinkAggregationGroup{} }
func (*LinkAggregationGroup) ProtoMessage() {}
func (*LinkAggregationGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{150}
}
func (m *LinkAggregationGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkAggregationGroup.Unmarshal(m, b)
}
func (m *LinkAggregationGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkAggregationGroup.Marshal(b, m, deterministic)
}
func (m *LinkAggregationGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkAggregationGroup.Merge(m, src)
}
func (m *LinkAggregationGroup) XXX_Size() int {
	return xxx_messageInfo_LinkAggregationGroup.Size(m)
}
func (m *LinkAggregationGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkAggregationGroup.DiscardUnknown(m)
}

var xxx_messageInfo_LinkAggregationGroup proto.InternalMessageInfo

func (m *LinkAggregationGroup) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *LinkAggregationGroup) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *LinkAggregationGroup) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *LinkAggregationGroup) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *LinkAggregationGroup) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *LinkAggregationGroup) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *LinkAggregationGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LinkAggregationGroup) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *LinkAggregationGroup) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *LinkAggregationGroup) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *LinkAggregationGroup) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LinkAggregationGroup) GetLinkAggregationGroupLacpEnabled() bool {
	if m != nil {
		return m.LinkAggregationGroupLacpEnabled
	}
	return false
}

func (m *LinkAggregationGroup) GetPhysicalInterfaceRefs() []*LinkAggregationGroupPhysicalInterfaceRef {
	if m != nil {
		return m.PhysicalInterfaceRefs
	}
	return nil
}

func (m *LinkAggregationGroup) GetTagRefs() []*LinkAggregationGroupTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *LinkAggregationGroup) GetVirtualMachineInterfaceRefs() []*LinkAggregationGroupVirtualMachineInterfaceRef {
	if m != nil {
		return m.VirtualMachineInterfaceRefs
	}
	return nil
}

type LinkAggregationGroupPhysicalInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LinkAggregationGroupPhysicalInterfaceRef) Reset() {
	*m = LinkAggregationGroupPhysicalInterfaceRef{}
}
func (*LinkAggregationGroupPhysicalInterfaceRef) ProtoMessage() {}
func (*LinkAggregationGroupPhysicalInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{151}
}
func (m *LinkAggregationGroupPhysicalInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkAggregationGroupPhysicalInterfaceRef.Unmarshal(m, b)
}
func (m *LinkAggregationGroupPhysicalInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkAggregationGroupPhysicalInterfaceRef.Marshal(b, m, deterministic)
}
func (m *LinkAggregationGroupPhysicalInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkAggregationGroupPhysicalInterfaceRef.Merge(m, src)
}
func (m *LinkAggregationGroupPhysicalInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_LinkAggregationGroupPhysicalInterfaceRef.Size(m)
}
func (m *LinkAggregationGroupPhysicalInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkAggregationGroupPhysicalInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_LinkAggregationGroupPhysicalInterfaceRef proto.InternalMessageInfo

func (m *LinkAggregationGroupPhysicalInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LinkAggregationGroupPhysicalInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LinkAggregationGroupPhysicalInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LinkAggregationGroupTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LinkAggregationGroupTagRef) Reset()      { *m = LinkAggregationGroupTagRef{} }
func (*LinkAggregationGroupTagRef) ProtoMessage() {}
func (*LinkAggregationGroupTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{152}
}
func (m *LinkAggregationGroupTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkAggregationGroupTagRef.Unmarshal(m, b)
}
func (m *LinkAggregationGroupTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkAggregationGroupTagRef.Marshal(b, m, deterministic)
}
func (m *LinkAggregationGroupTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkAggregationGroupTagRef.Merge(m, src)
}
func (m *LinkAggregationGroupTagRef) XXX_Size() int {
	return xxx_messageInfo_LinkAggregationGroupTagRef.Size(m)
}
func (m *LinkAggregationGroupTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkAggregationGroupTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_LinkAggregationGroupTagRef proto.InternalMessageInfo

func (m *LinkAggregationGroupTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LinkAggregationGroupTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LinkAggregationGroupTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LinkAggregationGroupVirtualMachineInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LinkAggregationGroupVirtualMachineInterfaceRef) Reset() {
	*m = LinkAggregationGroupVirtualMachineInterfaceRef{}
}
func (*LinkAggregationGroupVirtualMachineInterfaceRef) ProtoMessage() {}
func (*LinkAggregationGroupVirtualMachineInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{153}
}
func (m *LinkAggregationGroupVirtualMachineInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinkAggregationGroupVirtualMachineInterfaceRef.Unmarshal(m, b)
}
func (m *LinkAggregationGroupVirtualMachineInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinkAggregationGroupVirtualMachineInterfaceRef.Marshal(b, m, deterministic)
}
func (m *LinkAggregationGroupVirtualMachineInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkAggregationGroupVirtualMachineInterfaceRef.Merge(m, src)
}
func (m *LinkAggregationGroupVirtualMachineInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_LinkAggregationGroupVirtualMachineInterfaceRef.Size(m)
}
func (m *LinkAggregationGroupVirtualMachineInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkAggregationGroupVirtualMachineInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_LinkAggregationGroupVirtualMachineInterfaceRef proto.InternalMessageInfo

func (m *LinkAggregationGroupVirtualMachineInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LinkAggregationGroupVirtualMachineInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LinkAggregationGroupVirtualMachineInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LoadbalancerHealthmonitor struct {
	Annotations                         *KeyValuePairs                     `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion                int64                              `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                         string                             `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                              []string                           `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                                string                             `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                             *IdPermsType                       `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                                string                             `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                          string                             `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                          string                             `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                              *PermType2                         `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                                string                             `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	LoadbalancerHealthmonitorProperties *LoadbalancerHealthmonitorType     `protobuf:"bytes,12,opt,name=loadbalancer_healthmonitor_properties,json=loadbalancerHealthmonitorProperties,proto3" json:"loadbalancer_healthmonitor_properties,omitempty" yaml:"loadbalancer_healthmonitor_properties,omitempty"`
	TagRefs                             []*LoadbalancerHealthmonitorTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	LoadbalancerPoolBackRefs            []*LoadbalancerPool                `protobuf:"bytes,3014,rep,name=loadbalancer_pool_back_refs,json=loadbalancerPoolBackRefs,proto3" json:"loadbalancer_pool_back_refs,omitempty" yaml:"loadbalancer_pool_back_refs,omitempty"`
}

func (m *LoadbalancerHealthmonitor) Reset()      { *m = LoadbalancerHealthmonitor{} }
func (*LoadbalancerHealthmonitor) ProtoMessage() {}
func (*LoadbalancerHealthmonitor) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{154}
}
func (m *LoadbalancerHealthmonitor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerHealthmonitor.Unmarshal(m, b)
}
func (m *LoadbalancerHealthmonitor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerHealthmonitor.Marshal(b, m, deterministic)
}
func (m *LoadbalancerHealthmonitor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerHealthmonitor.Merge(m, src)
}
func (m *LoadbalancerHealthmonitor) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerHealthmonitor.Size(m)
}
func (m *LoadbalancerHealthmonitor) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerHealthmonitor.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerHealthmonitor proto.InternalMessageInfo

func (m *LoadbalancerHealthmonitor) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *LoadbalancerHealthmonitor) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *LoadbalancerHealthmonitor) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *LoadbalancerHealthmonitor) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *LoadbalancerHealthmonitor) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *LoadbalancerHealthmonitor) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *LoadbalancerHealthmonitor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LoadbalancerHealthmonitor) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *LoadbalancerHealthmonitor) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *LoadbalancerHealthmonitor) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *LoadbalancerHealthmonitor) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerHealthmonitor) GetLoadbalancerHealthmonitorProperties() *LoadbalancerHealthmonitorType {
	if m != nil {
		return m.LoadbalancerHealthmonitorProperties
	}
	return nil
}

func (m *LoadbalancerHealthmonitor) GetTagRefs() []*LoadbalancerHealthmonitorTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *LoadbalancerHealthmonitor) GetLoadbalancerPoolBackRefs() []*LoadbalancerPool {
	if m != nil {
		return m.LoadbalancerPoolBackRefs
	}
	return nil
}

type LoadbalancerHealthmonitorTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LoadbalancerHealthmonitorTagRef) Reset()      { *m = LoadbalancerHealthmonitorTagRef{} }
func (*LoadbalancerHealthmonitorTagRef) ProtoMessage() {}
func (*LoadbalancerHealthmonitorTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{155}
}
func (m *LoadbalancerHealthmonitorTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerHealthmonitorTagRef.Unmarshal(m, b)
}
func (m *LoadbalancerHealthmonitorTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerHealthmonitorTagRef.Marshal(b, m, deterministic)
}
func (m *LoadbalancerHealthmonitorTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerHealthmonitorTagRef.Merge(m, src)
}
func (m *LoadbalancerHealthmonitorTagRef) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerHealthmonitorTagRef.Size(m)
}
func (m *LoadbalancerHealthmonitorTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerHealthmonitorTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerHealthmonitorTagRef proto.InternalMessageInfo

func (m *LoadbalancerHealthmonitorTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerHealthmonitorTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LoadbalancerHealthmonitorTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LoadbalancerListener struct {
	Annotations                    *KeyValuePairs                         `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion           int64                                  `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                    string                                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                         []string                               `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                           string                                 `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                        *IdPermsType                           `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                           string                                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                     string                                 `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                     string                                 `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                         *PermType2                             `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                           string                                 `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	LoadbalancerListenerProperties *LoadbalancerListenerType              `protobuf:"bytes,12,opt,name=loadbalancer_listener_properties,json=loadbalancerListenerProperties,proto3" json:"loadbalancer_listener_properties,omitempty" yaml:"loadbalancer_listener_properties,omitempty"`
	LoadbalancerRefs               []*LoadbalancerListenerLoadbalancerRef `protobuf:"bytes,1013,rep,name=loadbalancer_refs,json=loadbalancerRefs,proto3" json:"loadbalancer_refs,omitempty" yaml:"loadbalancer_refs,omitempty"`
	TagRefs                        []*LoadbalancerListenerTagRef          `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	LoadbalancerPoolBackRefs       []*LoadbalancerPool                    `protobuf:"bytes,3015,rep,name=loadbalancer_pool_back_refs,json=loadbalancerPoolBackRefs,proto3" json:"loadbalancer_pool_back_refs,omitempty" yaml:"loadbalancer_pool_back_refs,omitempty"`
}

func (m *LoadbalancerListener) Reset()      { *m = LoadbalancerListener{} }
func (*LoadbalancerListener) ProtoMessage() {}
func (*LoadbalancerListener) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{156}
}
func (m *LoadbalancerListener) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerListener.Unmarshal(m, b)
}
func (m *LoadbalancerListener) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerListener.Marshal(b, m, deterministic)
}
func (m *LoadbalancerListener) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerListener.Merge(m, src)
}
func (m *LoadbalancerListener) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerListener.Size(m)
}
func (m *LoadbalancerListener) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerListener.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerListener proto.InternalMessageInfo

func (m *LoadbalancerListener) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *LoadbalancerListener) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *LoadbalancerListener) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *LoadbalancerListener) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *LoadbalancerListener) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *LoadbalancerListener) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *LoadbalancerListener) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LoadbalancerListener) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *LoadbalancerListener) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *LoadbalancerListener) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *LoadbalancerListener) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerListener) GetLoadbalancerListenerProperties() *LoadbalancerListenerType {
	if m != nil {
		return m.LoadbalancerListenerProperties
	}
	return nil
}

func (m *LoadbalancerListener) GetLoadbalancerRefs() []*LoadbalancerListenerLoadbalancerRef {
	if m != nil {
		return m.LoadbalancerRefs
	}
	return nil
}

func (m *LoadbalancerListener) GetTagRefs() []*LoadbalancerListenerTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *LoadbalancerListener) GetLoadbalancerPoolBackRefs() []*LoadbalancerPool {
	if m != nil {
		return m.LoadbalancerPoolBackRefs
	}
	return nil
}

type LoadbalancerListenerLoadbalancerRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LoadbalancerListenerLoadbalancerRef) Reset()      { *m = LoadbalancerListenerLoadbalancerRef{} }
func (*LoadbalancerListenerLoadbalancerRef) ProtoMessage() {}
func (*LoadbalancerListenerLoadbalancerRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{157}
}
func (m *LoadbalancerListenerLoadbalancerRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerListenerLoadbalancerRef.Unmarshal(m, b)
}
func (m *LoadbalancerListenerLoadbalancerRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerListenerLoadbalancerRef.Marshal(b, m, deterministic)
}
func (m *LoadbalancerListenerLoadbalancerRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerListenerLoadbalancerRef.Merge(m, src)
}
func (m *LoadbalancerListenerLoadbalancerRef) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerListenerLoadbalancerRef.Size(m)
}
func (m *LoadbalancerListenerLoadbalancerRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerListenerLoadbalancerRef.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerListenerLoadbalancerRef proto.InternalMessageInfo

func (m *LoadbalancerListenerLoadbalancerRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerListenerLoadbalancerRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LoadbalancerListenerLoadbalancerRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LoadbalancerListenerTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LoadbalancerListenerTagRef) Reset()      { *m = LoadbalancerListenerTagRef{} }
func (*LoadbalancerListenerTagRef) ProtoMessage() {}
func (*LoadbalancerListenerTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{158}
}
func (m *LoadbalancerListenerTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerListenerTagRef.Unmarshal(m, b)
}
func (m *LoadbalancerListenerTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerListenerTagRef.Marshal(b, m, deterministic)
}
func (m *LoadbalancerListenerTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerListenerTagRef.Merge(m, src)
}
func (m *LoadbalancerListenerTagRef) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerListenerTagRef.Size(m)
}
func (m *LoadbalancerListenerTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerListenerTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerListenerTagRef proto.InternalMessageInfo

func (m *LoadbalancerListenerTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerListenerTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LoadbalancerListenerTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LoadbalancerMember struct {
	Annotations                  *KeyValuePairs              `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion         int64                       `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                  string                      `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                       []string                    `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                         string                      `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                      *IdPermsType                `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                         string                      `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                   string                      `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                   string                      `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                       *PermType2                  `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                         string                      `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	LoadbalancerMemberProperties *LoadbalancerMemberType     `protobuf:"bytes,12,opt,name=loadbalancer_member_properties,json=loadbalancerMemberProperties,proto3" json:"loadbalancer_member_properties,omitempty" yaml:"loadbalancer_member_properties,omitempty"`
	TagRefs                      []*LoadbalancerMemberTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *LoadbalancerMember) Reset()      { *m = LoadbalancerMember{} }
func (*LoadbalancerMember) ProtoMessage() {}
func (*LoadbalancerMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{159}
}
func (m *LoadbalancerMember) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerMember.Unmarshal(m, b)
}
func (m *LoadbalancerMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerMember.Marshal(b, m, deterministic)
}
func (m *LoadbalancerMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerMember.Merge(m, src)
}
func (m *LoadbalancerMember) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerMember.Size(m)
}
func (m *LoadbalancerMember) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerMember.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerMember proto.InternalMessageInfo

func (m *LoadbalancerMember) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *LoadbalancerMember) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *LoadbalancerMember) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *LoadbalancerMember) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *LoadbalancerMember) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *LoadbalancerMember) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *LoadbalancerMember) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LoadbalancerMember) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *LoadbalancerMember) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *LoadbalancerMember) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *LoadbalancerMember) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerMember) GetLoadbalancerMemberProperties() *LoadbalancerMemberType {
	if m != nil {
		return m.LoadbalancerMemberProperties
	}
	return nil
}

func (m *LoadbalancerMember) GetTagRefs() []*LoadbalancerMemberTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type LoadbalancerMemberTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LoadbalancerMemberTagRef) Reset()      { *m = LoadbalancerMemberTagRef{} }
func (*LoadbalancerMemberTagRef) ProtoMessage() {}
func (*LoadbalancerMemberTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{160}
}
func (m *LoadbalancerMemberTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerMemberTagRef.Unmarshal(m, b)
}
func (m *LoadbalancerMemberTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerMemberTagRef.Marshal(b, m, deterministic)
}
func (m *LoadbalancerMemberTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerMemberTagRef.Merge(m, src)
}
func (m *LoadbalancerMemberTagRef) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerMemberTagRef.Size(m)
}
func (m *LoadbalancerMemberTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerMemberTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerMemberTagRef proto.InternalMessageInfo

func (m *LoadbalancerMemberTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerMemberTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LoadbalancerMemberTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LoadbalancerPool struct {
	Annotations                      *KeyValuePairs                                  `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion             int64                                           `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                      string                                          `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                           []string                                        `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                             string                                          `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                          *IdPermsType                                    `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                             string                                          `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                       string                                          `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                       string                                          `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                           *PermType2                                      `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                             string                                          `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	LoadbalancerPoolCustomAttributes *KeyValuePairs                                  `protobuf:"bytes,12,opt,name=loadbalancer_pool_custom_attributes,json=loadbalancerPoolCustomAttributes,proto3" json:"loadbalancer_pool_custom_attributes,omitempty" yaml:"loadbalancer_pool_custom_attributes,omitempty"`
	LoadbalancerPoolProperties       *LoadbalancerPoolType                           `protobuf:"bytes,13,opt,name=loadbalancer_pool_properties,json=loadbalancerPoolProperties,proto3" json:"loadbalancer_pool_properties,omitempty" yaml:"loadbalancer_pool_properties,omitempty"`
	LoadbalancerPoolProvider         string                                          `protobuf:"bytes,14,opt,name=loadbalancer_pool_provider,json=loadbalancerPoolProvider,proto3" json:"loadbalancer_pool_provider,omitempty" yaml:"loadbalancer_pool_provider,omitempty"`
	LoadbalancerHealthmonitorRefs    []*LoadbalancerPoolLoadbalancerHealthmonitorRef `protobuf:"bytes,1015,rep,name=loadbalancer_healthmonitor_refs,json=loadbalancerHealthmonitorRefs,proto3" json:"loadbalancer_healthmonitor_refs,omitempty" yaml:"loadbalancer_healthmonitor_refs,omitempty"`
	LoadbalancerListenerRefs         []*LoadbalancerPoolLoadbalancerListenerRef      `protobuf:"bytes,1016,rep,name=loadbalancer_listener_refs,json=loadbalancerListenerRefs,proto3" json:"loadbalancer_listener_refs,omitempty" yaml:"loadbalancer_listener_refs,omitempty"`
	ServiceApplianceSetRefs          []*LoadbalancerPoolServiceApplianceSetRef       `protobuf:"bytes,1017,rep,name=service_appliance_set_refs,json=serviceApplianceSetRefs,proto3" json:"service_appliance_set_refs,omitempty" yaml:"service_appliance_set_refs,omitempty"`
	ServiceInstanceRefs              []*LoadbalancerPoolServiceInstanceRef           `protobuf:"bytes,1018,rep,name=service_instance_refs,json=serviceInstanceRefs,proto3" json:"service_instance_refs,omitempty" yaml:"service_instance_refs,omitempty"`
	TagRefs                          []*LoadbalancerPoolTagRef                       `protobuf:"bytes,1019,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceRefs      []*LoadbalancerPoolVirtualMachineInterfaceRef   `protobuf:"bytes,1020,rep,name=virtual_machine_interface_refs,json=virtualMachineInterfaceRefs,proto3" json:"virtual_machine_interface_refs,omitempty" yaml:"virtual_machine_interface_refs,omitempty"`
	VirtualIPBackRefs                []*VirtualIP                                    `protobuf:"bytes,3022,rep,name=virtual_ip_back_refs,json=virtualIpBackRefs,proto3" json:"virtual_ip_back_refs,omitempty" yaml:"virtual_ip_back_refs,omitempty"`
	LoadbalancerMembers              []*LoadbalancerMember                           `protobuf:"bytes,2021,rep,name=loadbalancer_members,json=loadbalancerMembers,proto3" json:"loadbalancer_members,omitempty" yaml:"loadbalancer_members,omitempty"`
}

func (m *LoadbalancerPool) Reset()      { *m = LoadbalancerPool{} }
func (*LoadbalancerPool) ProtoMessage() {}
func (*LoadbalancerPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{161}
}
func (m *LoadbalancerPool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerPool.Unmarshal(m, b)
}
func (m *LoadbalancerPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerPool.Marshal(b, m, deterministic)
}
func (m *LoadbalancerPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerPool.Merge(m, src)
}
func (m *LoadbalancerPool) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerPool.Size(m)
}
func (m *LoadbalancerPool) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerPool.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerPool proto.InternalMessageInfo

func (m *LoadbalancerPool) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *LoadbalancerPool) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *LoadbalancerPool) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *LoadbalancerPool) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *LoadbalancerPool) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *LoadbalancerPool) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *LoadbalancerPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LoadbalancerPool) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *LoadbalancerPool) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *LoadbalancerPool) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *LoadbalancerPool) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerPool) GetLoadbalancerPoolCustomAttributes() *KeyValuePairs {
	if m != nil {
		return m.LoadbalancerPoolCustomAttributes
	}
	return nil
}

func (m *LoadbalancerPool) GetLoadbalancerPoolProperties() *LoadbalancerPoolType {
	if m != nil {
		return m.LoadbalancerPoolProperties
	}
	return nil
}

func (m *LoadbalancerPool) GetLoadbalancerPoolProvider() string {
	if m != nil {
		return m.LoadbalancerPoolProvider
	}
	return ""
}

func (m *LoadbalancerPool) GetLoadbalancerHealthmonitorRefs() []*LoadbalancerPoolLoadbalancerHealthmonitorRef {
	if m != nil {
		return m.LoadbalancerHealthmonitorRefs
	}
	return nil
}

func (m *LoadbalancerPool) GetLoadbalancerListenerRefs() []*LoadbalancerPoolLoadbalancerListenerRef {
	if m != nil {
		return m.LoadbalancerListenerRefs
	}
	return nil
}

func (m *LoadbalancerPool) GetServiceApplianceSetRefs() []*LoadbalancerPoolServiceApplianceSetRef {
	if m != nil {
		return m.ServiceApplianceSetRefs
	}
	return nil
}

func (m *LoadbalancerPool) GetServiceInstanceRefs() []*LoadbalancerPoolServiceInstanceRef {
	if m != nil {
		return m.ServiceInstanceRefs
	}
	return nil
}

func (m *LoadbalancerPool) GetTagRefs() []*LoadbalancerPoolTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *LoadbalancerPool) GetVirtualMachineInterfaceRefs() []*LoadbalancerPoolVirtualMachineInterfaceRef {
	if m != nil {
		return m.VirtualMachineInterfaceRefs
	}
	return nil
}

func (m *LoadbalancerPool) GetVirtualIPBackRefs() []*VirtualIP {
	if m != nil {
		return m.VirtualIPBackRefs
	}
	return nil
}

func (m *LoadbalancerPool) GetLoadbalancerMembers() []*LoadbalancerMember {
	if m != nil {
		return m.LoadbalancerMembers
	}
	return nil
}

type LoadbalancerPoolLoadbalancerHealthmonitorRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LoadbalancerPoolLoadbalancerHealthmonitorRef) Reset() {
	*m = LoadbalancerPoolLoadbalancerHealthmonitorRef{}
}
func (*LoadbalancerPoolLoadbalancerHealthmonitorRef) ProtoMessage() {}
func (*LoadbalancerPoolLoadbalancerHealthmonitorRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{162}
}
func (m *LoadbalancerPoolLoadbalancerHealthmonitorRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerPoolLoadbalancerHealthmonitorRef.Unmarshal(m, b)
}
func (m *LoadbalancerPoolLoadbalancerHealthmonitorRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerPoolLoadbalancerHealthmonitorRef.Marshal(b, m, deterministic)
}
func (m *LoadbalancerPoolLoadbalancerHealthmonitorRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerPoolLoadbalancerHealthmonitorRef.Merge(m, src)
}
func (m *LoadbalancerPoolLoadbalancerHealthmonitorRef) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerPoolLoadbalancerHealthmonitorRef.Size(m)
}
func (m *LoadbalancerPoolLoadbalancerHealthmonitorRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerPoolLoadbalancerHealthmonitorRef.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerPoolLoadbalancerHealthmonitorRef proto.InternalMessageInfo

func (m *LoadbalancerPoolLoadbalancerHealthmonitorRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerPoolLoadbalancerHealthmonitorRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LoadbalancerPoolLoadbalancerHealthmonitorRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LoadbalancerPoolLoadbalancerListenerRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LoadbalancerPoolLoadbalancerListenerRef) Reset() {
	*m = LoadbalancerPoolLoadbalancerListenerRef{}
}
func (*LoadbalancerPoolLoadbalancerListenerRef) ProtoMessage() {}
func (*LoadbalancerPoolLoadbalancerListenerRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{163}
}
func (m *LoadbalancerPoolLoadbalancerListenerRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerPoolLoadbalancerListenerRef.Unmarshal(m, b)
}
func (m *LoadbalancerPoolLoadbalancerListenerRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerPoolLoadbalancerListenerRef.Marshal(b, m, deterministic)
}
func (m *LoadbalancerPoolLoadbalancerListenerRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerPoolLoadbalancerListenerRef.Merge(m, src)
}
func (m *LoadbalancerPoolLoadbalancerListenerRef) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerPoolLoadbalancerListenerRef.Size(m)
}
func (m *LoadbalancerPoolLoadbalancerListenerRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerPoolLoadbalancerListenerRef.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerPoolLoadbalancerListenerRef proto.InternalMessageInfo

func (m *LoadbalancerPoolLoadbalancerListenerRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerPoolLoadbalancerListenerRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LoadbalancerPoolLoadbalancerListenerRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LoadbalancerPoolServiceApplianceSetRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LoadbalancerPoolServiceApplianceSetRef) Reset() {
	*m = LoadbalancerPoolServiceApplianceSetRef{}
}
func (*LoadbalancerPoolServiceApplianceSetRef) ProtoMessage() {}
func (*LoadbalancerPoolServiceApplianceSetRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{164}
}
func (m *LoadbalancerPoolServiceApplianceSetRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerPoolServiceApplianceSetRef.Unmarshal(m, b)
}
func (m *LoadbalancerPoolServiceApplianceSetRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerPoolServiceApplianceSetRef.Marshal(b, m, deterministic)
}
func (m *LoadbalancerPoolServiceApplianceSetRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerPoolServiceApplianceSetRef.Merge(m, src)
}
func (m *LoadbalancerPoolServiceApplianceSetRef) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerPoolServiceApplianceSetRef.Size(m)
}
func (m *LoadbalancerPoolServiceApplianceSetRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerPoolServiceApplianceSetRef.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerPoolServiceApplianceSetRef proto.InternalMessageInfo

func (m *LoadbalancerPoolServiceApplianceSetRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerPoolServiceApplianceSetRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LoadbalancerPoolServiceApplianceSetRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LoadbalancerPoolServiceInstanceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LoadbalancerPoolServiceInstanceRef) Reset()      { *m = LoadbalancerPoolServiceInstanceRef{} }
func (*LoadbalancerPoolServiceInstanceRef) ProtoMessage() {}
func (*LoadbalancerPoolServiceInstanceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{165}
}
func (m *LoadbalancerPoolServiceInstanceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerPoolServiceInstanceRef.Unmarshal(m, b)
}
func (m *LoadbalancerPoolServiceInstanceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerPoolServiceInstanceRef.Marshal(b, m, deterministic)
}
func (m *LoadbalancerPoolServiceInstanceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerPoolServiceInstanceRef.Merge(m, src)
}
func (m *LoadbalancerPoolServiceInstanceRef) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerPoolServiceInstanceRef.Size(m)
}
func (m *LoadbalancerPoolServiceInstanceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerPoolServiceInstanceRef.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerPoolServiceInstanceRef proto.InternalMessageInfo

func (m *LoadbalancerPoolServiceInstanceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerPoolServiceInstanceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LoadbalancerPoolServiceInstanceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LoadbalancerPoolTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LoadbalancerPoolTagRef) Reset()      { *m = LoadbalancerPoolTagRef{} }
func (*LoadbalancerPoolTagRef) ProtoMessage() {}
func (*LoadbalancerPoolTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{166}
}
func (m *LoadbalancerPoolTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerPoolTagRef.Unmarshal(m, b)
}
func (m *LoadbalancerPoolTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerPoolTagRef.Marshal(b, m, deterministic)
}
func (m *LoadbalancerPoolTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerPoolTagRef.Merge(m, src)
}
func (m *LoadbalancerPoolTagRef) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerPoolTagRef.Size(m)
}
func (m *LoadbalancerPoolTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerPoolTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerPoolTagRef proto.InternalMessageInfo

func (m *LoadbalancerPoolTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerPoolTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LoadbalancerPoolTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LoadbalancerPoolVirtualMachineInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LoadbalancerPoolVirtualMachineInterfaceRef) Reset() {
	*m = LoadbalancerPoolVirtualMachineInterfaceRef{}
}
func (*LoadbalancerPoolVirtualMachineInterfaceRef) ProtoMessage() {}
func (*LoadbalancerPoolVirtualMachineInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{167}
}
func (m *LoadbalancerPoolVirtualMachineInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerPoolVirtualMachineInterfaceRef.Unmarshal(m, b)
}
func (m *LoadbalancerPoolVirtualMachineInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerPoolVirtualMachineInterfaceRef.Marshal(b, m, deterministic)
}
func (m *LoadbalancerPoolVirtualMachineInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerPoolVirtualMachineInterfaceRef.Merge(m, src)
}
func (m *LoadbalancerPoolVirtualMachineInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerPoolVirtualMachineInterfaceRef.Size(m)
}
func (m *LoadbalancerPoolVirtualMachineInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerPoolVirtualMachineInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerPoolVirtualMachineInterfaceRef proto.InternalMessageInfo

func (m *LoadbalancerPoolVirtualMachineInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerPoolVirtualMachineInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LoadbalancerPoolVirtualMachineInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type Loadbalancer struct {
	Annotations                  *KeyValuePairs                            `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion         int64                                     `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                  string                                    `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                       []string                                  `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                         string                                    `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                      *IdPermsType                              `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                         string                                    `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                   string                                    `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                   string                                    `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                       *PermType2                                `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                         string                                    `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	LoadbalancerProperties       *LoadbalancerType                         `protobuf:"bytes,12,opt,name=loadbalancer_properties,json=loadbalancerProperties,proto3" json:"loadbalancer_properties,omitempty" yaml:"loadbalancer_properties,omitempty"`
	LoadbalancerProvider         string                                    `protobuf:"bytes,13,opt,name=loadbalancer_provider,json=loadbalancerProvider,proto3" json:"loadbalancer_provider,omitempty" yaml:"loadbalancer_provider,omitempty"`
	ServiceApplianceSetRefs      []*LoadbalancerServiceApplianceSetRef     `protobuf:"bytes,1014,rep,name=service_appliance_set_refs,json=serviceApplianceSetRefs,proto3" json:"service_appliance_set_refs,omitempty" yaml:"service_appliance_set_refs,omitempty"`
	ServiceInstanceRefs          []*LoadbalancerServiceInstanceRef         `protobuf:"bytes,1015,rep,name=service_instance_refs,json=serviceInstanceRefs,proto3" json:"service_instance_refs,omitempty" yaml:"service_instance_refs,omitempty"`
	TagRefs                      []*LoadbalancerTagRef                     `protobuf:"bytes,1016,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceRefs  []*LoadbalancerVirtualMachineInterfaceRef `protobuf:"bytes,1017,rep,name=virtual_machine_interface_refs,json=virtualMachineInterfaceRefs,proto3" json:"virtual_machine_interface_refs,omitempty" yaml:"virtual_machine_interface_refs,omitempty"`
	LoadbalancerListenerBackRefs []*LoadbalancerListener                   `protobuf:"bytes,3018,rep,name=loadbalancer_listener_back_refs,json=loadbalancerListenerBackRefs,proto3" json:"loadbalancer_listener_back_refs,omitempty" yaml:"loadbalancer_listener_back_refs,omitempty"`
}

func (m *Loadbalancer) Reset()      { *m = Loadbalancer{} }
func (*Loadbalancer) ProtoMessage() {}
func (*Loadbalancer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{168}
}
func (m *Loadbalancer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Loadbalancer.Unmarshal(m, b)
}
func (m *Loadbalancer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Loadbalancer.Marshal(b, m, deterministic)
}
func (m *Loadbalancer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loadbalancer.Merge(m, src)
}
func (m *Loadbalancer) XXX_Size() int {
	return xxx_messageInfo_Loadbalancer.Size(m)
}
func (m *Loadbalancer) XXX_DiscardUnknown() {
	xxx_messageInfo_Loadbalancer.DiscardUnknown(m)
}

var xxx_messageInfo_Loadbalancer proto.InternalMessageInfo

func (m *Loadbalancer) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Loadbalancer) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *Loadbalancer) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Loadbalancer) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *Loadbalancer) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Loadbalancer) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *Loadbalancer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Loadbalancer) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *Loadbalancer) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *Loadbalancer) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *Loadbalancer) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Loadbalancer) GetLoadbalancerProperties() *LoadbalancerType {
	if m != nil {
		return m.LoadbalancerProperties
	}
	return nil
}

func (m *Loadbalancer) GetLoadbalancerProvider() string {
	if m != nil {
		return m.LoadbalancerProvider
	}
	return ""
}

func (m *Loadbalancer) GetServiceApplianceSetRefs() []*LoadbalancerServiceApplianceSetRef {
	if m != nil {
		return m.ServiceApplianceSetRefs
	}
	return nil
}

func (m *Loadbalancer) GetServiceInstanceRefs() []*LoadbalancerServiceInstanceRef {
	if m != nil {
		return m.ServiceInstanceRefs
	}
	return nil
}

func (m *Loadbalancer) GetTagRefs() []*LoadbalancerTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *Loadbalancer) GetVirtualMachineInterfaceRefs() []*LoadbalancerVirtualMachineInterfaceRef {
	if m != nil {
		return m.VirtualMachineInterfaceRefs
	}
	return nil
}

func (m *Loadbalancer) GetLoadbalancerListenerBackRefs() []*LoadbalancerListener {
	if m != nil {
		return m.LoadbalancerListenerBackRefs
	}
	return nil
}

type LoadbalancerServiceApplianceSetRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LoadbalancerServiceApplianceSetRef) Reset()      { *m = LoadbalancerServiceApplianceSetRef{} }
func (*LoadbalancerServiceApplianceSetRef) ProtoMessage() {}
func (*LoadbalancerServiceApplianceSetRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{169}
}
func (m *LoadbalancerServiceApplianceSetRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerServiceApplianceSetRef.Unmarshal(m, b)
}
func (m *LoadbalancerServiceApplianceSetRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerServiceApplianceSetRef.Marshal(b, m, deterministic)
}
func (m *LoadbalancerServiceApplianceSetRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerServiceApplianceSetRef.Merge(m, src)
}
func (m *LoadbalancerServiceApplianceSetRef) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerServiceApplianceSetRef.Size(m)
}
func (m *LoadbalancerServiceApplianceSetRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerServiceApplianceSetRef.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerServiceApplianceSetRef proto.InternalMessageInfo

func (m *LoadbalancerServiceApplianceSetRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerServiceApplianceSetRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LoadbalancerServiceApplianceSetRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LoadbalancerServiceInstanceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LoadbalancerServiceInstanceRef) Reset()      { *m = LoadbalancerServiceInstanceRef{} }
func (*LoadbalancerServiceInstanceRef) ProtoMessage() {}
func (*LoadbalancerServiceInstanceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{170}
}
func (m *LoadbalancerServiceInstanceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerServiceInstanceRef.Unmarshal(m, b)
}
func (m *LoadbalancerServiceInstanceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerServiceInstanceRef.Marshal(b, m, deterministic)
}
func (m *LoadbalancerServiceInstanceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerServiceInstanceRef.Merge(m, src)
}
func (m *LoadbalancerServiceInstanceRef) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerServiceInstanceRef.Size(m)
}
func (m *LoadbalancerServiceInstanceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerServiceInstanceRef.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerServiceInstanceRef proto.InternalMessageInfo

func (m *LoadbalancerServiceInstanceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerServiceInstanceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LoadbalancerServiceInstanceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LoadbalancerTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LoadbalancerTagRef) Reset()      { *m = LoadbalancerTagRef{} }
func (*LoadbalancerTagRef) ProtoMessage() {}
func (*LoadbalancerTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{171}
}
func (m *LoadbalancerTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerTagRef.Unmarshal(m, b)
}
func (m *LoadbalancerTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerTagRef.Marshal(b, m, deterministic)
}
func (m *LoadbalancerTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerTagRef.Merge(m, src)
}
func (m *LoadbalancerTagRef) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerTagRef.Size(m)
}
func (m *LoadbalancerTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerTagRef proto.InternalMessageInfo

func (m *LoadbalancerTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LoadbalancerTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LoadbalancerVirtualMachineInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LoadbalancerVirtualMachineInterfaceRef) Reset() {
	*m = LoadbalancerVirtualMachineInterfaceRef{}
}
func (*LoadbalancerVirtualMachineInterfaceRef) ProtoMessage() {}
func (*LoadbalancerVirtualMachineInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{172}
}
func (m *LoadbalancerVirtualMachineInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerVirtualMachineInterfaceRef.Unmarshal(m, b)
}
func (m *LoadbalancerVirtualMachineInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerVirtualMachineInterfaceRef.Marshal(b, m, deterministic)
}
func (m *LoadbalancerVirtualMachineInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerVirtualMachineInterfaceRef.Merge(m, src)
}
func (m *LoadbalancerVirtualMachineInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerVirtualMachineInterfaceRef.Size(m)
}
func (m *LoadbalancerVirtualMachineInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerVirtualMachineInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerVirtualMachineInterfaceRef proto.InternalMessageInfo

func (m *LoadbalancerVirtualMachineInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LoadbalancerVirtualMachineInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LoadbalancerVirtualMachineInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LogicalInterface struct {
	Annotations                 *KeyValuePairs                                `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion        int64                                         `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                 string                                        `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                      []string                                      `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                        string                                        `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                     *IdPermsType                                  `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                        string                                        `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                  string                                        `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                  string                                        `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                      *PermType2                                    `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                        string                                        `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	LogicalInterfaceType        string                                        `protobuf:"bytes,12,opt,name=logical_interface_type,json=logicalInterfaceType,proto3" json:"logical_interface_type,omitempty" yaml:"logical_interface_type,omitempty"`
	LogicalInterfaceVlanTag     int64                                         `protobuf:"varint,13,opt,name=logical_interface_vlan_tag,json=logicalInterfaceVlanTag,proto3" json:"logical_interface_vlan_tag,omitempty" yaml:"logical_interface_vlan_tag,omitempty"`
	TagRefs                     []*LogicalInterfaceTagRef                     `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceRefs []*LogicalInterfaceVirtualMachineInterfaceRef `protobuf:"bytes,1015,rep,name=virtual_machine_interface_refs,json=virtualMachineInterfaceRefs,proto3" json:"virtual_machine_interface_refs,omitempty" yaml:"virtual_machine_interface_refs,omitempty"`
	InstanceIPBackRefs          []*InstanceIP                                 `protobuf:"bytes,3016,rep,name=instance_ip_back_refs,json=instanceIpBackRefs,proto3" json:"instance_ip_back_refs,omitempty" yaml:"instance_ip_back_refs,omitempty"`
}

func (m *LogicalInterface) Reset()      { *m = LogicalInterface{} }
func (*LogicalInterface) ProtoMessage() {}
func (*LogicalInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{173}
}
func (m *LogicalInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalInterface.Unmarshal(m, b)
}
func (m *LogicalInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalInterface.Marshal(b, m, deterministic)
}
func (m *LogicalInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalInterface.Merge(m, src)
}
func (m *LogicalInterface) XXX_Size() int {
	return xxx_messageInfo_LogicalInterface.Size(m)
}
func (m *LogicalInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalInterface.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalInterface proto.InternalMessageInfo

func (m *LogicalInterface) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *LogicalInterface) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *LogicalInterface) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *LogicalInterface) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *LogicalInterface) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *LogicalInterface) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *LogicalInterface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LogicalInterface) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *LogicalInterface) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *LogicalInterface) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *LogicalInterface) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogicalInterface) GetLogicalInterfaceType() string {
	if m != nil {
		return m.LogicalInterfaceType
	}
	return ""
}

func (m *LogicalInterface) GetLogicalInterfaceVlanTag() int64 {
	if m != nil {
		return m.LogicalInterfaceVlanTag
	}
	return 0
}

func (m *LogicalInterface) GetTagRefs() []*LogicalInterfaceTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *LogicalInterface) GetVirtualMachineInterfaceRefs() []*LogicalInterfaceVirtualMachineInterfaceRef {
	if m != nil {
		return m.VirtualMachineInterfaceRefs
	}
	return nil
}

func (m *LogicalInterface) GetInstanceIPBackRefs() []*InstanceIP {
	if m != nil {
		return m.InstanceIPBackRefs
	}
	return nil
}

type LogicalInterfaceTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LogicalInterfaceTagRef) Reset()      { *m = LogicalInterfaceTagRef{} }
func (*LogicalInterfaceTagRef) ProtoMessage() {}
func (*LogicalInterfaceTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{174}
}
func (m *LogicalInterfaceTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalInterfaceTagRef.Unmarshal(m, b)
}
func (m *LogicalInterfaceTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalInterfaceTagRef.Marshal(b, m, deterministic)
}
func (m *LogicalInterfaceTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalInterfaceTagRef.Merge(m, src)
}
func (m *LogicalInterfaceTagRef) XXX_Size() int {
	return xxx_messageInfo_LogicalInterfaceTagRef.Size(m)
}
func (m *LogicalInterfaceTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalInterfaceTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalInterfaceTagRef proto.InternalMessageInfo

func (m *LogicalInterfaceTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogicalInterfaceTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LogicalInterfaceTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LogicalInterfaceVirtualMachineInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LogicalInterfaceVirtualMachineInterfaceRef) Reset() {
	*m = LogicalInterfaceVirtualMachineInterfaceRef{}
}
func (*LogicalInterfaceVirtualMachineInterfaceRef) ProtoMessage() {}
func (*LogicalInterfaceVirtualMachineInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{175}
}
func (m *LogicalInterfaceVirtualMachineInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalInterfaceVirtualMachineInterfaceRef.Unmarshal(m, b)
}
func (m *LogicalInterfaceVirtualMachineInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalInterfaceVirtualMachineInterfaceRef.Marshal(b, m, deterministic)
}
func (m *LogicalInterfaceVirtualMachineInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalInterfaceVirtualMachineInterfaceRef.Merge(m, src)
}
func (m *LogicalInterfaceVirtualMachineInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_LogicalInterfaceVirtualMachineInterfaceRef.Size(m)
}
func (m *LogicalInterfaceVirtualMachineInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalInterfaceVirtualMachineInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalInterfaceVirtualMachineInterfaceRef proto.InternalMessageInfo

func (m *LogicalInterfaceVirtualMachineInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogicalInterfaceVirtualMachineInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LogicalInterfaceVirtualMachineInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LogicalRouter struct {
	Annotations                    *KeyValuePairs                             `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion           int64                                      `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                    string                                     `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                         []string                                   `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                           string                                     `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                        *IdPermsType                               `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                           string                                     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                     string                                     `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                     string                                     `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                         *PermType2                                 `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                           string                                     `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	ConfiguredRouteTargetList      *RouteTargetList                           `protobuf:"bytes,12,opt,name=configured_route_target_list,json=configuredRouteTargetList,proto3" json:"configured_route_target_list,omitempty" yaml:"configured_route_target_list,omitempty"`
	LogicalRouterDHCPRelayServer   *IpAddressesType                           `protobuf:"bytes,13,opt,name=logical_router_dhcp_relay_server,json=logicalRouterDhcpRelayServer,proto3" json:"logical_router_dhcp_relay_server,omitempty" yaml:"logical_router_dhcp_relay_server,omitempty"`
	LogicalRouterGatewayExternal   bool                                       `protobuf:"varint,14,opt,name=logical_router_gateway_external,json=logicalRouterGatewayExternal,proto3" json:"logical_router_gateway_external,omitempty" yaml:"logical_router_gateway_external,omitempty"`
	LogicalRouterType              string                                     `protobuf:"bytes,15,opt,name=logical_router_type,json=logicalRouterType,proto3" json:"logical_router_type,omitempty" yaml:"logical_router_type,omitempty"`
	VxlanNetworkIdentifier         string                                     `protobuf:"bytes,16,opt,name=vxlan_network_identifier,json=vxlanNetworkIdentifier,proto3" json:"vxlan_network_identifier,omitempty" yaml:"vxlan_network_identifier,omitempty"`
	BGPVPNRefs                     []*LogicalRouterBGPVPNRef                  `protobuf:"bytes,1017,rep,name=bgpvpn_refs,json=bgpvpnRefs,proto3" json:"bgpvpn_refs,omitempty" yaml:"bgpvpn_refs,omitempty"`
	PhysicalRouterRefs             []*LogicalRouterPhysicalRouterRef          `protobuf:"bytes,1018,rep,name=physical_router_refs,json=physicalRouterRefs,proto3" json:"physical_router_refs,omitempty" yaml:"physical_router_refs,omitempty"`
	RouteTableRefs                 []*LogicalRouterRouteTableRef              `protobuf:"bytes,1019,rep,name=route_table_refs,json=routeTableRefs,proto3" json:"route_table_refs,omitempty" yaml:"route_table_refs,omitempty"`
	RouteTargetRefs                []*LogicalRouterRouteTargetRef             `protobuf:"bytes,1020,rep,name=route_target_refs,json=routeTargetRefs,proto3" json:"route_target_refs,omitempty" yaml:"route_target_refs,omitempty"`
	ServiceInstanceRefs            []*LogicalRouterServiceInstanceRef         `protobuf:"bytes,1021,rep,name=service_instance_refs,json=serviceInstanceRefs,proto3" json:"service_instance_refs,omitempty" yaml:"service_instance_refs,omitempty"`
	TagRefs                        []*LogicalRouterTagRef                     `protobuf:"bytes,1022,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceRefs    []*LogicalRouterVirtualMachineInterfaceRef `protobuf:"bytes,1023,rep,name=virtual_machine_interface_refs,json=virtualMachineInterfaceRefs,proto3" json:"virtual_machine_interface_refs,omitempty" yaml:"virtual_machine_interface_refs,omitempty"`
	VirtualNetworkRefs             []*LogicalRouterVirtualNetworkRef          `protobuf:"bytes,1024,rep,name=virtual_network_refs,json=virtualNetworkRefs,proto3" json:"virtual_network_refs,omitempty" yaml:"virtual_network_refs,omitempty"`
	DataCenterInterconnectBackRefs []*DataCenterInterconnect                  `protobuf:"bytes,3026,rep,name=data_center_interconnect_back_refs,json=dataCenterInterconnectBackRefs,proto3" json:"data_center_interconnect_back_refs,omitempty" yaml:"data_center_interconnect_back_refs,omitempty"`
	PortTupleBackRefs              []*PortTuple                               `protobuf:"bytes,3025,rep,name=port_tuple_back_refs,json=portTupleBackRefs,proto3" json:"port_tuple_back_refs,omitempty" yaml:"port_tuple_back_refs,omitempty"`
}

func (m *LogicalRouter) Reset()      { *m = LogicalRouter{} }
func (*LogicalRouter) ProtoMessage() {}
func (*LogicalRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{176}
}
func (m *LogicalRouter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalRouter.Unmarshal(m, b)
}
func (m *LogicalRouter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalRouter.Marshal(b, m, deterministic)
}
func (m *LogicalRouter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalRouter.Merge(m, src)
}
func (m *LogicalRouter) XXX_Size() int {
	return xxx_messageInfo_LogicalRouter.Size(m)
}
func (m *LogicalRouter) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalRouter.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalRouter proto.InternalMessageInfo

func (m *LogicalRouter) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *LogicalRouter) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *LogicalRouter) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *LogicalRouter) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *LogicalRouter) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *LogicalRouter) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *LogicalRouter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LogicalRouter) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *LogicalRouter) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *LogicalRouter) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *LogicalRouter) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogicalRouter) GetConfiguredRouteTargetList() *RouteTargetList {
	if m != nil {
		return m.ConfiguredRouteTargetList
	}
	return nil
}

func (m *LogicalRouter) GetLogicalRouterDHCPRelayServer() *IpAddressesType {
	if m != nil {
		return m.LogicalRouterDHCPRelayServer
	}
	return nil
}

func (m *LogicalRouter) GetLogicalRouterGatewayExternal() bool {
	if m != nil {
		return m.LogicalRouterGatewayExternal
	}
	return false
}

func (m *LogicalRouter) GetLogicalRouterType() string {
	if m != nil {
		return m.LogicalRouterType
	}
	return ""
}

func (m *LogicalRouter) GetVxlanNetworkIdentifier() string {
	if m != nil {
		return m.VxlanNetworkIdentifier
	}
	return ""
}

func (m *LogicalRouter) GetBGPVPNRefs() []*LogicalRouterBGPVPNRef {
	if m != nil {
		return m.BGPVPNRefs
	}
	return nil
}

func (m *LogicalRouter) GetPhysicalRouterRefs() []*LogicalRouterPhysicalRouterRef {
	if m != nil {
		return m.PhysicalRouterRefs
	}
	return nil
}

func (m *LogicalRouter) GetRouteTableRefs() []*LogicalRouterRouteTableRef {
	if m != nil {
		return m.RouteTableRefs
	}
	return nil
}

func (m *LogicalRouter) GetRouteTargetRefs() []*LogicalRouterRouteTargetRef {
	if m != nil {
		return m.RouteTargetRefs
	}
	return nil
}

func (m *LogicalRouter) GetServiceInstanceRefs() []*LogicalRouterServiceInstanceRef {
	if m != nil {
		return m.ServiceInstanceRefs
	}
	return nil
}

func (m *LogicalRouter) GetTagRefs() []*LogicalRouterTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *LogicalRouter) GetVirtualMachineInterfaceRefs() []*LogicalRouterVirtualMachineInterfaceRef {
	if m != nil {
		return m.VirtualMachineInterfaceRefs
	}
	return nil
}

func (m *LogicalRouter) GetVirtualNetworkRefs() []*LogicalRouterVirtualNetworkRef {
	if m != nil {
		return m.VirtualNetworkRefs
	}
	return nil
}

func (m *LogicalRouter) GetDataCenterInterconnectBackRefs() []*DataCenterInterconnect {
	if m != nil {
		return m.DataCenterInterconnectBackRefs
	}
	return nil
}

func (m *LogicalRouter) GetPortTupleBackRefs() []*PortTuple {
	if m != nil {
		return m.PortTupleBackRefs
	}
	return nil
}

type LogicalRouterBGPVPNRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LogicalRouterBGPVPNRef) Reset()      { *m = LogicalRouterBGPVPNRef{} }
func (*LogicalRouterBGPVPNRef) ProtoMessage() {}
func (*LogicalRouterBGPVPNRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{177}
}
func (m *LogicalRouterBGPVPNRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalRouterBGPVPNRef.Unmarshal(m, b)
}
func (m *LogicalRouterBGPVPNRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalRouterBGPVPNRef.Marshal(b, m, deterministic)
}
func (m *LogicalRouterBGPVPNRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalRouterBGPVPNRef.Merge(m, src)
}
func (m *LogicalRouterBGPVPNRef) XXX_Size() int {
	return xxx_messageInfo_LogicalRouterBGPVPNRef.Size(m)
}
func (m *LogicalRouterBGPVPNRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalRouterBGPVPNRef.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalRouterBGPVPNRef proto.InternalMessageInfo

func (m *LogicalRouterBGPVPNRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogicalRouterBGPVPNRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LogicalRouterBGPVPNRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LogicalRouterPhysicalRouterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LogicalRouterPhysicalRouterRef) Reset()      { *m = LogicalRouterPhysicalRouterRef{} }
func (*LogicalRouterPhysicalRouterRef) ProtoMessage() {}
func (*LogicalRouterPhysicalRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{178}
}
func (m *LogicalRouterPhysicalRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalRouterPhysicalRouterRef.Unmarshal(m, b)
}
func (m *LogicalRouterPhysicalRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalRouterPhysicalRouterRef.Marshal(b, m, deterministic)
}
func (m *LogicalRouterPhysicalRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalRouterPhysicalRouterRef.Merge(m, src)
}
func (m *LogicalRouterPhysicalRouterRef) XXX_Size() int {
	return xxx_messageInfo_LogicalRouterPhysicalRouterRef.Size(m)
}
func (m *LogicalRouterPhysicalRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalRouterPhysicalRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalRouterPhysicalRouterRef proto.InternalMessageInfo

func (m *LogicalRouterPhysicalRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogicalRouterPhysicalRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LogicalRouterPhysicalRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LogicalRouterRouteTableRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LogicalRouterRouteTableRef) Reset()      { *m = LogicalRouterRouteTableRef{} }
func (*LogicalRouterRouteTableRef) ProtoMessage() {}
func (*LogicalRouterRouteTableRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{179}
}
func (m *LogicalRouterRouteTableRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalRouterRouteTableRef.Unmarshal(m, b)
}
func (m *LogicalRouterRouteTableRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalRouterRouteTableRef.Marshal(b, m, deterministic)
}
func (m *LogicalRouterRouteTableRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalRouterRouteTableRef.Merge(m, src)
}
func (m *LogicalRouterRouteTableRef) XXX_Size() int {
	return xxx_messageInfo_LogicalRouterRouteTableRef.Size(m)
}
func (m *LogicalRouterRouteTableRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalRouterRouteTableRef.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalRouterRouteTableRef proto.InternalMessageInfo

func (m *LogicalRouterRouteTableRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogicalRouterRouteTableRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LogicalRouterRouteTableRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LogicalRouterRouteTargetRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LogicalRouterRouteTargetRef) Reset()      { *m = LogicalRouterRouteTargetRef{} }
func (*LogicalRouterRouteTargetRef) ProtoMessage() {}
func (*LogicalRouterRouteTargetRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{180}
}
func (m *LogicalRouterRouteTargetRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalRouterRouteTargetRef.Unmarshal(m, b)
}
func (m *LogicalRouterRouteTargetRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalRouterRouteTargetRef.Marshal(b, m, deterministic)
}
func (m *LogicalRouterRouteTargetRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalRouterRouteTargetRef.Merge(m, src)
}
func (m *LogicalRouterRouteTargetRef) XXX_Size() int {
	return xxx_messageInfo_LogicalRouterRouteTargetRef.Size(m)
}
func (m *LogicalRouterRouteTargetRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalRouterRouteTargetRef.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalRouterRouteTargetRef proto.InternalMessageInfo

func (m *LogicalRouterRouteTargetRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogicalRouterRouteTargetRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LogicalRouterRouteTargetRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LogicalRouterServiceInstanceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LogicalRouterServiceInstanceRef) Reset()      { *m = LogicalRouterServiceInstanceRef{} }
func (*LogicalRouterServiceInstanceRef) ProtoMessage() {}
func (*LogicalRouterServiceInstanceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{181}
}
func (m *LogicalRouterServiceInstanceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalRouterServiceInstanceRef.Unmarshal(m, b)
}
func (m *LogicalRouterServiceInstanceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalRouterServiceInstanceRef.Marshal(b, m, deterministic)
}
func (m *LogicalRouterServiceInstanceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalRouterServiceInstanceRef.Merge(m, src)
}
func (m *LogicalRouterServiceInstanceRef) XXX_Size() int {
	return xxx_messageInfo_LogicalRouterServiceInstanceRef.Size(m)
}
func (m *LogicalRouterServiceInstanceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalRouterServiceInstanceRef.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalRouterServiceInstanceRef proto.InternalMessageInfo

func (m *LogicalRouterServiceInstanceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogicalRouterServiceInstanceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LogicalRouterServiceInstanceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LogicalRouterTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LogicalRouterTagRef) Reset()      { *m = LogicalRouterTagRef{} }
func (*LogicalRouterTagRef) ProtoMessage() {}
func (*LogicalRouterTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{182}
}
func (m *LogicalRouterTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalRouterTagRef.Unmarshal(m, b)
}
func (m *LogicalRouterTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalRouterTagRef.Marshal(b, m, deterministic)
}
func (m *LogicalRouterTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalRouterTagRef.Merge(m, src)
}
func (m *LogicalRouterTagRef) XXX_Size() int {
	return xxx_messageInfo_LogicalRouterTagRef.Size(m)
}
func (m *LogicalRouterTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalRouterTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalRouterTagRef proto.InternalMessageInfo

func (m *LogicalRouterTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogicalRouterTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LogicalRouterTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LogicalRouterVirtualMachineInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *LogicalRouterVirtualMachineInterfaceRef) Reset() {
	*m = LogicalRouterVirtualMachineInterfaceRef{}
}
func (*LogicalRouterVirtualMachineInterfaceRef) ProtoMessage() {}
func (*LogicalRouterVirtualMachineInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{183}
}
func (m *LogicalRouterVirtualMachineInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalRouterVirtualMachineInterfaceRef.Unmarshal(m, b)
}
func (m *LogicalRouterVirtualMachineInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalRouterVirtualMachineInterfaceRef.Marshal(b, m, deterministic)
}
func (m *LogicalRouterVirtualMachineInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalRouterVirtualMachineInterfaceRef.Merge(m, src)
}
func (m *LogicalRouterVirtualMachineInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_LogicalRouterVirtualMachineInterfaceRef.Size(m)
}
func (m *LogicalRouterVirtualMachineInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalRouterVirtualMachineInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalRouterVirtualMachineInterfaceRef proto.InternalMessageInfo

func (m *LogicalRouterVirtualMachineInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogicalRouterVirtualMachineInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LogicalRouterVirtualMachineInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type LogicalRouterVirtualNetworkRef struct {
	UUID string                           `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string                         `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string                           `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *LogicalRouterVirtualNetworkType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *LogicalRouterVirtualNetworkRef) Reset()      { *m = LogicalRouterVirtualNetworkRef{} }
func (*LogicalRouterVirtualNetworkRef) ProtoMessage() {}
func (*LogicalRouterVirtualNetworkRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{184}
}
func (m *LogicalRouterVirtualNetworkRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalRouterVirtualNetworkRef.Unmarshal(m, b)
}
func (m *LogicalRouterVirtualNetworkRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalRouterVirtualNetworkRef.Marshal(b, m, deterministic)
}
func (m *LogicalRouterVirtualNetworkRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalRouterVirtualNetworkRef.Merge(m, src)
}
func (m *LogicalRouterVirtualNetworkRef) XXX_Size() int {
	return xxx_messageInfo_LogicalRouterVirtualNetworkRef.Size(m)
}
func (m *LogicalRouterVirtualNetworkRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalRouterVirtualNetworkRef.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalRouterVirtualNetworkRef proto.InternalMessageInfo

func (m *LogicalRouterVirtualNetworkRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *LogicalRouterVirtualNetworkRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LogicalRouterVirtualNetworkRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *LogicalRouterVirtualNetworkRef) GetAttr() *LogicalRouterVirtualNetworkType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type MulticastPolicy struct {
	Annotations            *KeyValuePairs           `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion   int64                    `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName            string                   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                 []string                 `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                   string                   `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                *IdPermsType             `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                   string                   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType             string                   `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID             string                   `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                 *PermType2               `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                   string                   `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	MulticastSourceGroups  *MulticastSourceGroups   `protobuf:"bytes,12,opt,name=multicast_source_groups,json=multicastSourceGroups,proto3" json:"multicast_source_groups,omitempty" yaml:"multicast_source_groups,omitempty"`
	TagRefs                []*MulticastPolicyTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualNetworkBackRefs []*VirtualNetwork        `protobuf:"bytes,3014,rep,name=virtual_network_back_refs,json=virtualNetworkBackRefs,proto3" json:"virtual_network_back_refs,omitempty" yaml:"virtual_network_back_refs,omitempty"`
}

func (m *MulticastPolicy) Reset()      { *m = MulticastPolicy{} }
func (*MulticastPolicy) ProtoMessage() {}
func (*MulticastPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{185}
}
func (m *MulticastPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MulticastPolicy.Unmarshal(m, b)
}
func (m *MulticastPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MulticastPolicy.Marshal(b, m, deterministic)
}
func (m *MulticastPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MulticastPolicy.Merge(m, src)
}
func (m *MulticastPolicy) XXX_Size() int {
	return xxx_messageInfo_MulticastPolicy.Size(m)
}
func (m *MulticastPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_MulticastPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_MulticastPolicy proto.InternalMessageInfo

func (m *MulticastPolicy) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *MulticastPolicy) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *MulticastPolicy) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *MulticastPolicy) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *MulticastPolicy) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *MulticastPolicy) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *MulticastPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MulticastPolicy) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *MulticastPolicy) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *MulticastPolicy) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *MulticastPolicy) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *MulticastPolicy) GetMulticastSourceGroups() *MulticastSourceGroups {
	if m != nil {
		return m.MulticastSourceGroups
	}
	return nil
}

func (m *MulticastPolicy) GetTagRefs() []*MulticastPolicyTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *MulticastPolicy) GetVirtualNetworkBackRefs() []*VirtualNetwork {
	if m != nil {
		return m.VirtualNetworkBackRefs
	}
	return nil
}

type MulticastPolicyTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *MulticastPolicyTagRef) Reset()      { *m = MulticastPolicyTagRef{} }
func (*MulticastPolicyTagRef) ProtoMessage() {}
func (*MulticastPolicyTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{186}
}
func (m *MulticastPolicyTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MulticastPolicyTagRef.Unmarshal(m, b)
}
func (m *MulticastPolicyTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MulticastPolicyTagRef.Marshal(b, m, deterministic)
}
func (m *MulticastPolicyTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MulticastPolicyTagRef.Merge(m, src)
}
func (m *MulticastPolicyTagRef) XXX_Size() int {
	return xxx_messageInfo_MulticastPolicyTagRef.Size(m)
}
func (m *MulticastPolicyTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_MulticastPolicyTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_MulticastPolicyTagRef proto.InternalMessageInfo

func (m *MulticastPolicyTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *MulticastPolicyTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *MulticastPolicyTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type Namespace struct {
	Annotations          *KeyValuePairs     `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64              `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string             `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string           `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string             `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType       `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string             `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string             `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string             `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2         `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string             `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	NamespaceCidr        *SubnetType        `protobuf:"bytes,12,opt,name=namespace_cidr,json=namespaceCidr,proto3" json:"namespace_cidr,omitempty" yaml:"namespace_cidr,omitempty"`
	TagRefs              []*NamespaceTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	ProjectBackRefs      []*Project         `protobuf:"bytes,3014,rep,name=project_back_refs,json=projectBackRefs,proto3" json:"project_back_refs,omitempty" yaml:"project_back_refs,omitempty"`
}

func (m *Namespace) Reset()      { *m = Namespace{} }
func (*Namespace) ProtoMessage() {}
func (*Namespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{187}
}
func (m *Namespace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Namespace.Unmarshal(m, b)
}
func (m *Namespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Namespace.Marshal(b, m, deterministic)
}
func (m *Namespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Namespace.Merge(m, src)
}
func (m *Namespace) XXX_Size() int {
	return xxx_messageInfo_Namespace.Size(m)
}
func (m *Namespace) XXX_DiscardUnknown() {
	xxx_messageInfo_Namespace.DiscardUnknown(m)
}

var xxx_messageInfo_Namespace proto.InternalMessageInfo

func (m *Namespace) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Namespace) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *Namespace) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Namespace) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *Namespace) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Namespace) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *Namespace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Namespace) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *Namespace) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *Namespace) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *Namespace) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Namespace) GetNamespaceCidr() *SubnetType {
	if m != nil {
		return m.NamespaceCidr
	}
	return nil
}

func (m *Namespace) GetTagRefs() []*NamespaceTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *Namespace) GetProjectBackRefs() []*Project {
	if m != nil {
		return m.ProjectBackRefs
	}
	return nil
}

type NamespaceTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *NamespaceTagRef) Reset()      { *m = NamespaceTagRef{} }
func (*NamespaceTagRef) ProtoMessage() {}
func (*NamespaceTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{188}
}
func (m *NamespaceTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NamespaceTagRef.Unmarshal(m, b)
}
func (m *NamespaceTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NamespaceTagRef.Marshal(b, m, deterministic)
}
func (m *NamespaceTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceTagRef.Merge(m, src)
}
func (m *NamespaceTagRef) XXX_Size() int {
	return xxx_messageInfo_NamespaceTagRef.Size(m)
}
func (m *NamespaceTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceTagRef proto.InternalMessageInfo

func (m *NamespaceTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NamespaceTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NamespaceTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type NetworkDeviceConfig struct {
	Annotations          *KeyValuePairs                          `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                                   `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string                                  `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string                                `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string                                  `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType                            `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string                                  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string                                  `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string                                  `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2                              `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string                                  `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	PhysicalRouterRefs   []*NetworkDeviceConfigPhysicalRouterRef `protobuf:"bytes,1012,rep,name=physical_router_refs,json=physicalRouterRefs,proto3" json:"physical_router_refs,omitempty" yaml:"physical_router_refs,omitempty"`
	TagRefs              []*NetworkDeviceConfigTagRef            `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *NetworkDeviceConfig) Reset()      { *m = NetworkDeviceConfig{} }
func (*NetworkDeviceConfig) ProtoMessage() {}
func (*NetworkDeviceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{189}
}
func (m *NetworkDeviceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkDeviceConfig.Unmarshal(m, b)
}
func (m *NetworkDeviceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkDeviceConfig.Marshal(b, m, deterministic)
}
func (m *NetworkDeviceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkDeviceConfig.Merge(m, src)
}
func (m *NetworkDeviceConfig) XXX_Size() int {
	return xxx_messageInfo_NetworkDeviceConfig.Size(m)
}
func (m *NetworkDeviceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkDeviceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkDeviceConfig proto.InternalMessageInfo

func (m *NetworkDeviceConfig) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *NetworkDeviceConfig) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *NetworkDeviceConfig) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *NetworkDeviceConfig) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *NetworkDeviceConfig) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *NetworkDeviceConfig) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *NetworkDeviceConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkDeviceConfig) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *NetworkDeviceConfig) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *NetworkDeviceConfig) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *NetworkDeviceConfig) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NetworkDeviceConfig) GetPhysicalRouterRefs() []*NetworkDeviceConfigPhysicalRouterRef {
	if m != nil {
		return m.PhysicalRouterRefs
	}
	return nil
}

func (m *NetworkDeviceConfig) GetTagRefs() []*NetworkDeviceConfigTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type NetworkDeviceConfigPhysicalRouterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *NetworkDeviceConfigPhysicalRouterRef) Reset()      { *m = NetworkDeviceConfigPhysicalRouterRef{} }
func (*NetworkDeviceConfigPhysicalRouterRef) ProtoMessage() {}
func (*NetworkDeviceConfigPhysicalRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{190}
}
func (m *NetworkDeviceConfigPhysicalRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkDeviceConfigPhysicalRouterRef.Unmarshal(m, b)
}
func (m *NetworkDeviceConfigPhysicalRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkDeviceConfigPhysicalRouterRef.Marshal(b, m, deterministic)
}
func (m *NetworkDeviceConfigPhysicalRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkDeviceConfigPhysicalRouterRef.Merge(m, src)
}
func (m *NetworkDeviceConfigPhysicalRouterRef) XXX_Size() int {
	return xxx_messageInfo_NetworkDeviceConfigPhysicalRouterRef.Size(m)
}
func (m *NetworkDeviceConfigPhysicalRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkDeviceConfigPhysicalRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkDeviceConfigPhysicalRouterRef proto.InternalMessageInfo

func (m *NetworkDeviceConfigPhysicalRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NetworkDeviceConfigPhysicalRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NetworkDeviceConfigPhysicalRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type NetworkDeviceConfigTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *NetworkDeviceConfigTagRef) Reset()      { *m = NetworkDeviceConfigTagRef{} }
func (*NetworkDeviceConfigTagRef) ProtoMessage() {}
func (*NetworkDeviceConfigTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{191}
}
func (m *NetworkDeviceConfigTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkDeviceConfigTagRef.Unmarshal(m, b)
}
func (m *NetworkDeviceConfigTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkDeviceConfigTagRef.Marshal(b, m, deterministic)
}
func (m *NetworkDeviceConfigTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkDeviceConfigTagRef.Merge(m, src)
}
func (m *NetworkDeviceConfigTagRef) XXX_Size() int {
	return xxx_messageInfo_NetworkDeviceConfigTagRef.Size(m)
}
func (m *NetworkDeviceConfigTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkDeviceConfigTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkDeviceConfigTagRef proto.InternalMessageInfo

func (m *NetworkDeviceConfigTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NetworkDeviceConfigTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NetworkDeviceConfigTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type NetworkIpam struct {
	Annotations            *KeyValuePairs              `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion   int64                       `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName            string                      `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                 []string                    `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                   string                      `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                *IdPermsType                `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                   string                      `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType             string                      `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID             string                      `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                 *PermType2                  `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                   string                      `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	IpamSubnetMethod       string                      `protobuf:"bytes,12,opt,name=ipam_subnet_method,json=ipamSubnetMethod,proto3" json:"ipam_subnet_method,omitempty" yaml:"ipam_subnet_method,omitempty"`
	IpamSubnets            *IpamSubnets                `protobuf:"bytes,13,opt,name=ipam_subnets,json=ipamSubnets,proto3" json:"ipam_subnets,omitempty" yaml:"ipam_subnets,omitempty"`
	IpamSubnetting         bool                        `protobuf:"varint,14,opt,name=ipam_subnetting,json=ipamSubnetting,proto3" json:"ipam_subnetting,omitempty" yaml:"ipam_subnetting,omitempty"`
	NetworkIpamMGMT        *IpamType                   `protobuf:"bytes,15,opt,name=network_ipam_mgmt,json=networkIpamMgmt,proto3" json:"network_ipam_mgmt,omitempty" yaml:"network_ipam_mgmt,omitempty"`
	TagRefs                []*NetworkIpamTagRef        `protobuf:"bytes,1016,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualDNSRefs         []*NetworkIpamVirtualDNSRef `protobuf:"bytes,1017,rep,name=virtual_DNS_refs,json=virtualDNSRefs,proto3" json:"virtual_DNS_refs,omitempty" yaml:"virtual_DNS_refs,omitempty"`
	InstanceIPBackRefs     []*InstanceIP               `protobuf:"bytes,3019,rep,name=instance_ip_back_refs,json=instanceIpBackRefs,proto3" json:"instance_ip_back_refs,omitempty" yaml:"instance_ip_back_refs,omitempty"`
	VirtualNetworkBackRefs []*VirtualNetwork           `protobuf:"bytes,3020,rep,name=virtual_network_back_refs,json=virtualNetworkBackRefs,proto3" json:"virtual_network_back_refs,omitempty" yaml:"virtual_network_back_refs,omitempty"`
	VirtualRouterBackRefs  []*VirtualRouter            `protobuf:"bytes,3018,rep,name=virtual_router_back_refs,json=virtualRouterBackRefs,proto3" json:"virtual_router_back_refs,omitempty" yaml:"virtual_router_back_refs,omitempty"`
}

func (m *NetworkIpam) Reset()      { *m = NetworkIpam{} }
func (*NetworkIpam) ProtoMessage() {}
func (*NetworkIpam) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{192}
}
func (m *NetworkIpam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkIpam.Unmarshal(m, b)
}
func (m *NetworkIpam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkIpam.Marshal(b, m, deterministic)
}
func (m *NetworkIpam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkIpam.Merge(m, src)
}
func (m *NetworkIpam) XXX_Size() int {
	return xxx_messageInfo_NetworkIpam.Size(m)
}
func (m *NetworkIpam) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkIpam.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkIpam proto.InternalMessageInfo

func (m *NetworkIpam) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *NetworkIpam) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *NetworkIpam) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *NetworkIpam) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *NetworkIpam) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *NetworkIpam) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *NetworkIpam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkIpam) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *NetworkIpam) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *NetworkIpam) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *NetworkIpam) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NetworkIpam) GetIpamSubnetMethod() string {
	if m != nil {
		return m.IpamSubnetMethod
	}
	return ""
}

func (m *NetworkIpam) GetIpamSubnets() *IpamSubnets {
	if m != nil {
		return m.IpamSubnets
	}
	return nil
}

func (m *NetworkIpam) GetIpamSubnetting() bool {
	if m != nil {
		return m.IpamSubnetting
	}
	return false
}

func (m *NetworkIpam) GetNetworkIpamMGMT() *IpamType {
	if m != nil {
		return m.NetworkIpamMGMT
	}
	return nil
}

func (m *NetworkIpam) GetTagRefs() []*NetworkIpamTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *NetworkIpam) GetVirtualDNSRefs() []*NetworkIpamVirtualDNSRef {
	if m != nil {
		return m.VirtualDNSRefs
	}
	return nil
}

func (m *NetworkIpam) GetInstanceIPBackRefs() []*InstanceIP {
	if m != nil {
		return m.InstanceIPBackRefs
	}
	return nil
}

func (m *NetworkIpam) GetVirtualNetworkBackRefs() []*VirtualNetwork {
	if m != nil {
		return m.VirtualNetworkBackRefs
	}
	return nil
}

func (m *NetworkIpam) GetVirtualRouterBackRefs() []*VirtualRouter {
	if m != nil {
		return m.VirtualRouterBackRefs
	}
	return nil
}

type NetworkIpamTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *NetworkIpamTagRef) Reset()      { *m = NetworkIpamTagRef{} }
func (*NetworkIpamTagRef) ProtoMessage() {}
func (*NetworkIpamTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{193}
}
func (m *NetworkIpamTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkIpamTagRef.Unmarshal(m, b)
}
func (m *NetworkIpamTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkIpamTagRef.Marshal(b, m, deterministic)
}
func (m *NetworkIpamTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkIpamTagRef.Merge(m, src)
}
func (m *NetworkIpamTagRef) XXX_Size() int {
	return xxx_messageInfo_NetworkIpamTagRef.Size(m)
}
func (m *NetworkIpamTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkIpamTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkIpamTagRef proto.InternalMessageInfo

func (m *NetworkIpamTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NetworkIpamTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NetworkIpamTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type NetworkIpamVirtualDNSRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *NetworkIpamVirtualDNSRef) Reset()      { *m = NetworkIpamVirtualDNSRef{} }
func (*NetworkIpamVirtualDNSRef) ProtoMessage() {}
func (*NetworkIpamVirtualDNSRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{194}
}
func (m *NetworkIpamVirtualDNSRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkIpamVirtualDNSRef.Unmarshal(m, b)
}
func (m *NetworkIpamVirtualDNSRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkIpamVirtualDNSRef.Marshal(b, m, deterministic)
}
func (m *NetworkIpamVirtualDNSRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkIpamVirtualDNSRef.Merge(m, src)
}
func (m *NetworkIpamVirtualDNSRef) XXX_Size() int {
	return xxx_messageInfo_NetworkIpamVirtualDNSRef.Size(m)
}
func (m *NetworkIpamVirtualDNSRef) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkIpamVirtualDNSRef.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkIpamVirtualDNSRef proto.InternalMessageInfo

func (m *NetworkIpamVirtualDNSRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NetworkIpamVirtualDNSRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NetworkIpamVirtualDNSRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type NetworkPolicy struct {
	Annotations                   *KeyValuePairs           `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion          int64                    `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                   string                   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                        []string                 `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                          string                   `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                       *IdPermsType             `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                          string                   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                    string                   `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                    string                   `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                        *PermType2               `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                          string                   `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	NetworkPolicyEntries          *PolicyEntriesType       `protobuf:"bytes,12,opt,name=network_policy_entries,json=networkPolicyEntries,proto3" json:"network_policy_entries,omitempty" yaml:"network_policy_entries,omitempty"`
	TagRefs                       []*NetworkPolicyTagRef   `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	SecurityLoggingObjectBackRefs []*SecurityLoggingObject `protobuf:"bytes,3014,rep,name=security_logging_object_back_refs,json=securityLoggingObjectBackRefs,proto3" json:"security_logging_object_back_refs,omitempty" yaml:"security_logging_object_back_refs,omitempty"`
	VirtualNetworkBackRefs        []*VirtualNetwork        `protobuf:"bytes,3015,rep,name=virtual_network_back_refs,json=virtualNetworkBackRefs,proto3" json:"virtual_network_back_refs,omitempty" yaml:"virtual_network_back_refs,omitempty"`
}

func (m *NetworkPolicy) Reset()      { *m = NetworkPolicy{} }
func (*NetworkPolicy) ProtoMessage() {}
func (*NetworkPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{195}
}
func (m *NetworkPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkPolicy.Unmarshal(m, b)
}
func (m *NetworkPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkPolicy.Marshal(b, m, deterministic)
}
func (m *NetworkPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicy.Merge(m, src)
}
func (m *NetworkPolicy) XXX_Size() int {
	return xxx_messageInfo_NetworkPolicy.Size(m)
}
func (m *NetworkPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicy proto.InternalMessageInfo

func (m *NetworkPolicy) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *NetworkPolicy) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *NetworkPolicy) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *NetworkPolicy) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *NetworkPolicy) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *NetworkPolicy) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *NetworkPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkPolicy) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *NetworkPolicy) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *NetworkPolicy) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *NetworkPolicy) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NetworkPolicy) GetNetworkPolicyEntries() *PolicyEntriesType {
	if m != nil {
		return m.NetworkPolicyEntries
	}
	return nil
}

func (m *NetworkPolicy) GetTagRefs() []*NetworkPolicyTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *NetworkPolicy) GetSecurityLoggingObjectBackRefs() []*SecurityLoggingObject {
	if m != nil {
		return m.SecurityLoggingObjectBackRefs
	}
	return nil
}

func (m *NetworkPolicy) GetVirtualNetworkBackRefs() []*VirtualNetwork {
	if m != nil {
		return m.VirtualNetworkBackRefs
	}
	return nil
}

type NetworkPolicyTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *NetworkPolicyTagRef) Reset()      { *m = NetworkPolicyTagRef{} }
func (*NetworkPolicyTagRef) ProtoMessage() {}
func (*NetworkPolicyTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{196}
}
func (m *NetworkPolicyTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkPolicyTagRef.Unmarshal(m, b)
}
func (m *NetworkPolicyTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkPolicyTagRef.Marshal(b, m, deterministic)
}
func (m *NetworkPolicyTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPolicyTagRef.Merge(m, src)
}
func (m *NetworkPolicyTagRef) XXX_Size() int {
	return xxx_messageInfo_NetworkPolicyTagRef.Size(m)
}
func (m *NetworkPolicyTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPolicyTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPolicyTagRef proto.InternalMessageInfo

func (m *NetworkPolicyTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NetworkPolicyTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NetworkPolicyTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type NodeProfile struct {
	Annotations               *KeyValuePairs                  `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion      int64                           `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName               string                          `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                    []string                        `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                      string                          `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                   *IdPermsType                    `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                      string                          `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                string                          `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                string                          `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                    *PermType2                      `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                      string                          `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	NodeProfileDeviceFamily   string                          `protobuf:"bytes,12,opt,name=node_profile_device_family,json=nodeProfileDeviceFamily,proto3" json:"node_profile_device_family,omitempty" yaml:"node_profile_device_family,omitempty"`
	NodeProfileHitlessUpgrade bool                            `protobuf:"varint,13,opt,name=node_profile_hitless_upgrade,json=nodeProfileHitlessUpgrade,proto3" json:"node_profile_hitless_upgrade,omitempty" yaml:"node_profile_hitless_upgrade,omitempty"`
	NodeProfileRoles          *NodeProfileRolesType           `protobuf:"bytes,14,opt,name=node_profile_roles,json=nodeProfileRoles,proto3" json:"node_profile_roles,omitempty" yaml:"node_profile_roles,omitempty"`
	NodeProfileType           string                          `protobuf:"bytes,15,opt,name=node_profile_type,json=nodeProfileType,proto3" json:"node_profile_type,omitempty" yaml:"node_profile_type,omitempty"`
	NodeProfileVendor         string                          `protobuf:"bytes,16,opt,name=node_profile_vendor,json=nodeProfileVendor,proto3" json:"node_profile_vendor,omitempty" yaml:"node_profile_vendor,omitempty"`
	HardwareRefs              []*NodeProfileHardwareRef       `protobuf:"bytes,1017,rep,name=hardware_refs,json=hardwareRefs,proto3" json:"hardware_refs,omitempty" yaml:"hardware_refs,omitempty"`
	JobTemplateRefs           []*NodeProfileJobTemplateRef    `protobuf:"bytes,1018,rep,name=job_template_refs,json=jobTemplateRefs,proto3" json:"job_template_refs,omitempty" yaml:"job_template_refs,omitempty"`
	RoleDefinitionRefs        []*NodeProfileRoleDefinitionRef `protobuf:"bytes,1019,rep,name=role_definition_refs,json=roleDefinitionRefs,proto3" json:"role_definition_refs,omitempty" yaml:"role_definition_refs,omitempty"`
	TagRefs                   []*NodeProfileTagRef            `protobuf:"bytes,1020,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	FabricBackRefs            []*Fabric                       `protobuf:"bytes,3022,rep,name=fabric_back_refs,json=fabricBackRefs,proto3" json:"fabric_back_refs,omitempty" yaml:"fabric_back_refs,omitempty"`
	NodeBackRefs              []*Node                         `protobuf:"bytes,3023,rep,name=node_back_refs,json=nodeBackRefs,proto3" json:"node_back_refs,omitempty" yaml:"node_back_refs,omitempty"`
	PhysicalRouterBackRefs    []*PhysicalRouter               `protobuf:"bytes,3024,rep,name=physical_router_back_refs,json=physicalRouterBackRefs,proto3" json:"physical_router_back_refs,omitempty" yaml:"physical_router_back_refs,omitempty"`
	RoleConfigs               []*RoleConfig                   `protobuf:"bytes,2021,rep,name=role_configs,json=roleConfigs,proto3" json:"role_configs,omitempty" yaml:"role_configs,omitempty"`
}

func (m *NodeProfile) Reset()      { *m = NodeProfile{} }
func (*NodeProfile) ProtoMessage() {}
func (*NodeProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{197}
}
func (m *NodeProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeProfile.Unmarshal(m, b)
}
func (m *NodeProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeProfile.Marshal(b, m, deterministic)
}
func (m *NodeProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeProfile.Merge(m, src)
}
func (m *NodeProfile) XXX_Size() int {
	return xxx_messageInfo_NodeProfile.Size(m)
}
func (m *NodeProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeProfile.DiscardUnknown(m)
}

var xxx_messageInfo_NodeProfile proto.InternalMessageInfo

func (m *NodeProfile) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *NodeProfile) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *NodeProfile) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *NodeProfile) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *NodeProfile) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *NodeProfile) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *NodeProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodeProfile) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *NodeProfile) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *NodeProfile) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *NodeProfile) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NodeProfile) GetNodeProfileDeviceFamily() string {
	if m != nil {
		return m.NodeProfileDeviceFamily
	}
	return ""
}

func (m *NodeProfile) GetNodeProfileHitlessUpgrade() bool {
	if m != nil {
		return m.NodeProfileHitlessUpgrade
	}
	return false
}

func (m *NodeProfile) GetNodeProfileRoles() *NodeProfileRolesType {
	if m != nil {
		return m.NodeProfileRoles
	}
	return nil
}

func (m *NodeProfile) GetNodeProfileType() string {
	if m != nil {
		return m.NodeProfileType
	}
	return ""
}

func (m *NodeProfile) GetNodeProfileVendor() string {
	if m != nil {
		return m.NodeProfileVendor
	}
	return ""
}

func (m *NodeProfile) GetHardwareRefs() []*NodeProfileHardwareRef {
	if m != nil {
		return m.HardwareRefs
	}
	return nil
}

func (m *NodeProfile) GetJobTemplateRefs() []*NodeProfileJobTemplateRef {
	if m != nil {
		return m.JobTemplateRefs
	}
	return nil
}

func (m *NodeProfile) GetRoleDefinitionRefs() []*NodeProfileRoleDefinitionRef {
	if m != nil {
		return m.RoleDefinitionRefs
	}
	return nil
}

func (m *NodeProfile) GetTagRefs() []*NodeProfileTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *NodeProfile) GetFabricBackRefs() []*Fabric {
	if m != nil {
		return m.FabricBackRefs
	}
	return nil
}

func (m *NodeProfile) GetNodeBackRefs() []*Node {
	if m != nil {
		return m.NodeBackRefs
	}
	return nil
}

func (m *NodeProfile) GetPhysicalRouterBackRefs() []*PhysicalRouter {
	if m != nil {
		return m.PhysicalRouterBackRefs
	}
	return nil
}

func (m *NodeProfile) GetRoleConfigs() []*RoleConfig {
	if m != nil {
		return m.RoleConfigs
	}
	return nil
}

type NodeProfileHardwareRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *NodeProfileHardwareRef) Reset()      { *m = NodeProfileHardwareRef{} }
func (*NodeProfileHardwareRef) ProtoMessage() {}
func (*NodeProfileHardwareRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{198}
}
func (m *NodeProfileHardwareRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeProfileHardwareRef.Unmarshal(m, b)
}
func (m *NodeProfileHardwareRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeProfileHardwareRef.Marshal(b, m, deterministic)
}
func (m *NodeProfileHardwareRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeProfileHardwareRef.Merge(m, src)
}
func (m *NodeProfileHardwareRef) XXX_Size() int {
	return xxx_messageInfo_NodeProfileHardwareRef.Size(m)
}
func (m *NodeProfileHardwareRef) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeProfileHardwareRef.DiscardUnknown(m)
}

var xxx_messageInfo_NodeProfileHardwareRef proto.InternalMessageInfo

func (m *NodeProfileHardwareRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NodeProfileHardwareRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NodeProfileHardwareRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type NodeProfileJobTemplateRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *NodeProfileJobTemplateRef) Reset()      { *m = NodeProfileJobTemplateRef{} }
func (*NodeProfileJobTemplateRef) ProtoMessage() {}
func (*NodeProfileJobTemplateRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{199}
}
func (m *NodeProfileJobTemplateRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeProfileJobTemplateRef.Unmarshal(m, b)
}
func (m *NodeProfileJobTemplateRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeProfileJobTemplateRef.Marshal(b, m, deterministic)
}
func (m *NodeProfileJobTemplateRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeProfileJobTemplateRef.Merge(m, src)
}
func (m *NodeProfileJobTemplateRef) XXX_Size() int {
	return xxx_messageInfo_NodeProfileJobTemplateRef.Size(m)
}
func (m *NodeProfileJobTemplateRef) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeProfileJobTemplateRef.DiscardUnknown(m)
}

var xxx_messageInfo_NodeProfileJobTemplateRef proto.InternalMessageInfo

func (m *NodeProfileJobTemplateRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NodeProfileJobTemplateRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NodeProfileJobTemplateRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type NodeProfileRoleDefinitionRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *NodeProfileRoleDefinitionRef) Reset()      { *m = NodeProfileRoleDefinitionRef{} }
func (*NodeProfileRoleDefinitionRef) ProtoMessage() {}
func (*NodeProfileRoleDefinitionRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{200}
}
func (m *NodeProfileRoleDefinitionRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeProfileRoleDefinitionRef.Unmarshal(m, b)
}
func (m *NodeProfileRoleDefinitionRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeProfileRoleDefinitionRef.Marshal(b, m, deterministic)
}
func (m *NodeProfileRoleDefinitionRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeProfileRoleDefinitionRef.Merge(m, src)
}
func (m *NodeProfileRoleDefinitionRef) XXX_Size() int {
	return xxx_messageInfo_NodeProfileRoleDefinitionRef.Size(m)
}
func (m *NodeProfileRoleDefinitionRef) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeProfileRoleDefinitionRef.DiscardUnknown(m)
}

var xxx_messageInfo_NodeProfileRoleDefinitionRef proto.InternalMessageInfo

func (m *NodeProfileRoleDefinitionRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NodeProfileRoleDefinitionRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NodeProfileRoleDefinitionRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type NodeProfileTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *NodeProfileTagRef) Reset()      { *m = NodeProfileTagRef{} }
func (*NodeProfileTagRef) ProtoMessage() {}
func (*NodeProfileTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{201}
}
func (m *NodeProfileTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeProfileTagRef.Unmarshal(m, b)
}
func (m *NodeProfileTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeProfileTagRef.Marshal(b, m, deterministic)
}
func (m *NodeProfileTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeProfileTagRef.Merge(m, src)
}
func (m *NodeProfileTagRef) XXX_Size() int {
	return xxx_messageInfo_NodeProfileTagRef.Size(m)
}
func (m *NodeProfileTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeProfileTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_NodeProfileTagRef proto.InternalMessageInfo

func (m *NodeProfileTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NodeProfileTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NodeProfileTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type Node struct {
	Annotations          *KeyValuePairs        `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                 `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string                `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string              `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string                `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType          `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string                `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string                `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string                `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2            `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string                `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	BMSInfo              *BaremetalServerInfo  `protobuf:"bytes,12,opt,name=bms_info,json=bmsInfo,proto3" json:"bms_info,omitempty" yaml:"bms_info,omitempty"`
	CloudInfo            *CloudInstanceInfo    `protobuf:"bytes,13,opt,name=cloud_info,json=cloudInfo,proto3" json:"cloud_info,omitempty" yaml:"cloud_info,omitempty"`
	DiskPartition        string                `protobuf:"bytes,14,opt,name=disk_partition,json=diskPartition,proto3" json:"disk_partition,omitempty" yaml:"disk_partition,omitempty"`
	EsxiInfo             *ESXIHostInfo         `protobuf:"bytes,15,opt,name=esxi_info,json=esxiInfo,proto3" json:"esxi_info,omitempty" yaml:"esxi_info,omitempty"`
	Hostname             string                `protobuf:"bytes,16,opt,name=hostname,proto3" json:"hostname,omitempty" yaml:"hostname,omitempty"`
	InterfaceName        string                `protobuf:"bytes,17,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty" yaml:"interface_name,omitempty"`
	IPAddress            string                `protobuf:"bytes,18,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty" yaml:"ip_address,omitempty"`
	MacAddress           string                `protobuf:"bytes,19,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty" yaml:"mac_address,omitempty"`
	NodeType             string                `protobuf:"bytes,20,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty" yaml:"node_type,omitempty"`
	NodeProfileRefs      []*NodeNodeProfileRef `protobuf:"bytes,1021,rep,name=node_profile_refs,json=nodeProfileRefs,proto3" json:"node_profile_refs,omitempty" yaml:"node_profile_refs,omitempty"`
	TagRefs              []*NodeTagRef         `protobuf:"bytes,1022,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	Ports                []*Port               `protobuf:"bytes,2023,rep,name=ports,proto3" json:"ports,omitempty" yaml:"ports,omitempty"`
	PortGroups           []*PortGroup          `protobuf:"bytes,2024,rep,name=port_groups,json=portGroups,proto3" json:"port_groups,omitempty" yaml:"port_groups,omitempty"`
}

func (m *Node) Reset()      { *m = Node{} }
func (*Node) ProtoMessage() {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{202}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Node) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *Node) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Node) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *Node) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Node) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *Node) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *Node) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *Node) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Node) GetBMSInfo() *BaremetalServerInfo {
	if m != nil {
		return m.BMSInfo
	}
	return nil
}

func (m *Node) GetCloudInfo() *CloudInstanceInfo {
	if m != nil {
		return m.CloudInfo
	}
	return nil
}

func (m *Node) GetDiskPartition() string {
	if m != nil {
		return m.DiskPartition
	}
	return ""
}

func (m *Node) GetEsxiInfo() *ESXIHostInfo {
	if m != nil {
		return m.EsxiInfo
	}
	return nil
}

func (m *Node) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Node) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *Node) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *Node) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *Node) GetNodeType() string {
	if m != nil {
		return m.NodeType
	}
	return ""
}

func (m *Node) GetNodeProfileRefs() []*NodeNodeProfileRef {
	if m != nil {
		return m.NodeProfileRefs
	}
	return nil
}

func (m *Node) GetTagRefs() []*NodeTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *Node) GetPorts() []*Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Node) GetPortGroups() []*PortGroup {
	if m != nil {
		return m.PortGroups
	}
	return nil
}

type NodeNodeProfileRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *NodeNodeProfileRef) Reset()      { *m = NodeNodeProfileRef{} }
func (*NodeNodeProfileRef) ProtoMessage() {}
func (*NodeNodeProfileRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{203}
}
func (m *NodeNodeProfileRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeNodeProfileRef.Unmarshal(m, b)
}
func (m *NodeNodeProfileRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeNodeProfileRef.Marshal(b, m, deterministic)
}
func (m *NodeNodeProfileRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeNodeProfileRef.Merge(m, src)
}
func (m *NodeNodeProfileRef) XXX_Size() int {
	return xxx_messageInfo_NodeNodeProfileRef.Size(m)
}
func (m *NodeNodeProfileRef) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeNodeProfileRef.DiscardUnknown(m)
}

var xxx_messageInfo_NodeNodeProfileRef proto.InternalMessageInfo

func (m *NodeNodeProfileRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NodeNodeProfileRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NodeNodeProfileRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type NodeTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *NodeTagRef) Reset()      { *m = NodeTagRef{} }
func (*NodeTagRef) ProtoMessage() {}
func (*NodeTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{204}
}
func (m *NodeTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeTagRef.Unmarshal(m, b)
}
func (m *NodeTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeTagRef.Marshal(b, m, deterministic)
}
func (m *NodeTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeTagRef.Merge(m, src)
}
func (m *NodeTagRef) XXX_Size() int {
	return xxx_messageInfo_NodeTagRef.Size(m)
}
func (m *NodeTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_NodeTagRef proto.InternalMessageInfo

func (m *NodeTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *NodeTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NodeTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type OverlayRole struct {
	Annotations            *KeyValuePairs       `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion   int64                `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName            string               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                 []string             `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                   string               `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                *IdPermsType         `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                   string               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType             string               `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID             string               `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                 *PermType2           `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                   string               `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TagRefs                []*OverlayRoleTagRef `protobuf:"bytes,1012,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	PhysicalRouterBackRefs []*PhysicalRouter    `protobuf:"bytes,3013,rep,name=physical_router_back_refs,json=physicalRouterBackRefs,proto3" json:"physical_router_back_refs,omitempty" yaml:"physical_router_back_refs,omitempty"`
	RoleDefinitionBackRefs []*RoleDefinition    `protobuf:"bytes,3014,rep,name=role_definition_back_refs,json=roleDefinitionBackRefs,proto3" json:"role_definition_back_refs,omitempty" yaml:"role_definition_back_refs,omitempty"`
}

func (m *OverlayRole) Reset()      { *m = OverlayRole{} }
func (*OverlayRole) ProtoMessage() {}
func (*OverlayRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{205}
}
func (m *OverlayRole) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OverlayRole.Unmarshal(m, b)
}
func (m *OverlayRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OverlayRole.Marshal(b, m, deterministic)
}
func (m *OverlayRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OverlayRole.Merge(m, src)
}
func (m *OverlayRole) XXX_Size() int {
	return xxx_messageInfo_OverlayRole.Size(m)
}
func (m *OverlayRole) XXX_DiscardUnknown() {
	xxx_messageInfo_OverlayRole.DiscardUnknown(m)
}

var xxx_messageInfo_OverlayRole proto.InternalMessageInfo

func (m *OverlayRole) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *OverlayRole) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *OverlayRole) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *OverlayRole) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *OverlayRole) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *OverlayRole) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *OverlayRole) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OverlayRole) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *OverlayRole) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *OverlayRole) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *OverlayRole) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *OverlayRole) GetTagRefs() []*OverlayRoleTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *OverlayRole) GetPhysicalRouterBackRefs() []*PhysicalRouter {
	if m != nil {
		return m.PhysicalRouterBackRefs
	}
	return nil
}

func (m *OverlayRole) GetRoleDefinitionBackRefs() []*RoleDefinition {
	if m != nil {
		return m.RoleDefinitionBackRefs
	}
	return nil
}

type OverlayRoleTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *OverlayRoleTagRef) Reset()      { *m = OverlayRoleTagRef{} }
func (*OverlayRoleTagRef) ProtoMessage() {}
func (*OverlayRoleTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{206}
}
func (m *OverlayRoleTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OverlayRoleTagRef.Unmarshal(m, b)
}
func (m *OverlayRoleTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OverlayRoleTagRef.Marshal(b, m, deterministic)
}
func (m *OverlayRoleTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OverlayRoleTagRef.Merge(m, src)
}
func (m *OverlayRoleTagRef) XXX_Size() int {
	return xxx_messageInfo_OverlayRoleTagRef.Size(m)
}
func (m *OverlayRoleTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_OverlayRoleTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_OverlayRoleTagRef proto.InternalMessageInfo

func (m *OverlayRoleTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *OverlayRoleTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *OverlayRoleTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PeeringPolicy struct {
	Annotations               *KeyValuePairs         `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion      int64                  `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName               string                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                    []string               `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                      string                 `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                   *IdPermsType           `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                      string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                string                 `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                string                 `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                    *PermType2             `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                      string                 `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	PeeringService            string                 `protobuf:"bytes,12,opt,name=peering_service,json=peeringService,proto3" json:"peering_service,omitempty" yaml:"peering_service,omitempty"`
	TagRefs                   []*PeeringPolicyTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	E2ServiceProviderBackRefs []*E2ServiceProvider   `protobuf:"bytes,3014,rep,name=e2_service_provider_back_refs,json=e2ServiceProviderBackRefs,proto3" json:"e2_service_provider_back_refs,omitempty" yaml:"e2_service_provider_back_refs,omitempty"`
}

func (m *PeeringPolicy) Reset()      { *m = PeeringPolicy{} }
func (*PeeringPolicy) ProtoMessage() {}
func (*PeeringPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{207}
}
func (m *PeeringPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeeringPolicy.Unmarshal(m, b)
}
func (m *PeeringPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeeringPolicy.Marshal(b, m, deterministic)
}
func (m *PeeringPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeeringPolicy.Merge(m, src)
}
func (m *PeeringPolicy) XXX_Size() int {
	return xxx_messageInfo_PeeringPolicy.Size(m)
}
func (m *PeeringPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_PeeringPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_PeeringPolicy proto.InternalMessageInfo

func (m *PeeringPolicy) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *PeeringPolicy) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *PeeringPolicy) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *PeeringPolicy) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *PeeringPolicy) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *PeeringPolicy) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *PeeringPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PeeringPolicy) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *PeeringPolicy) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *PeeringPolicy) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *PeeringPolicy) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PeeringPolicy) GetPeeringService() string {
	if m != nil {
		return m.PeeringService
	}
	return ""
}

func (m *PeeringPolicy) GetTagRefs() []*PeeringPolicyTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *PeeringPolicy) GetE2ServiceProviderBackRefs() []*E2ServiceProvider {
	if m != nil {
		return m.E2ServiceProviderBackRefs
	}
	return nil
}

type PeeringPolicyTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PeeringPolicyTagRef) Reset()      { *m = PeeringPolicyTagRef{} }
func (*PeeringPolicyTagRef) ProtoMessage() {}
func (*PeeringPolicyTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{208}
}
func (m *PeeringPolicyTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeeringPolicyTagRef.Unmarshal(m, b)
}
func (m *PeeringPolicyTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeeringPolicyTagRef.Marshal(b, m, deterministic)
}
func (m *PeeringPolicyTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeeringPolicyTagRef.Merge(m, src)
}
func (m *PeeringPolicyTagRef) XXX_Size() int {
	return xxx_messageInfo_PeeringPolicyTagRef.Size(m)
}
func (m *PeeringPolicyTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PeeringPolicyTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_PeeringPolicyTagRef proto.InternalMessageInfo

func (m *PeeringPolicyTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PeeringPolicyTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PeeringPolicyTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalInterface struct {
	Annotations                     *KeyValuePairs                           `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                                    `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                                   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                                 `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                                   `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType                             `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                                   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                                   `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                                   `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                               `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                                   `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	EthernetSegmentIdentifier       string                                   `protobuf:"bytes,12,opt,name=ethernet_segment_identifier,json=ethernetSegmentIdentifier,proto3" json:"ethernet_segment_identifier,omitempty" yaml:"ethernet_segment_identifier,omitempty"`
	PhysicalInterfaceMacAddresses   *MacAddressesType                        `protobuf:"bytes,13,opt,name=physical_interface_mac_addresses,json=physicalInterfaceMacAddresses,proto3" json:"physical_interface_mac_addresses,omitempty" yaml:"physical_interface_mac_addresses,omitempty"`
	PhysicalInterfacePortID         string                                   `protobuf:"bytes,14,opt,name=physical_interface_port_id,json=physicalInterfacePortId,proto3" json:"physical_interface_port_id,omitempty" yaml:"physical_interface_port_id,omitempty"`
	PhysicalInterfaceType           string                                   `protobuf:"bytes,15,opt,name=physical_interface_type,json=physicalInterfaceType,proto3" json:"physical_interface_type,omitempty" yaml:"physical_interface_type,omitempty"`
	PhysicalInterfaceRefs           []*PhysicalInterfacePhysicalInterfaceRef `protobuf:"bytes,1016,rep,name=physical_interface_refs,json=physicalInterfaceRefs,proto3" json:"physical_interface_refs,omitempty" yaml:"physical_interface_refs,omitempty"`
	PortRefs                        []*PhysicalInterfacePortRef              `protobuf:"bytes,1017,rep,name=port_refs,json=portRefs,proto3" json:"port_refs,omitempty" yaml:"port_refs,omitempty"`
	TagRefs                         []*PhysicalInterfaceTagRef               `protobuf:"bytes,1018,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	LinkAggregationGroupBackRefs    []*LinkAggregationGroup                  `protobuf:"bytes,3020,rep,name=link_aggregation_group_back_refs,json=linkAggregationGroupBackRefs,proto3" json:"link_aggregation_group_back_refs,omitempty" yaml:"link_aggregation_group_back_refs,omitempty"`
	PhysicalInterfaceBackRefs       []*PhysicalInterface                     `protobuf:"bytes,3021,rep,name=physical_interface_back_refs,json=physicalInterfaceBackRefs,proto3" json:"physical_interface_back_refs,omitempty" yaml:"physical_interface_back_refs,omitempty"`
	ServiceApplianceBackRefs        []*ServiceAppliance                      `protobuf:"bytes,3022,rep,name=service_appliance_back_refs,json=serviceApplianceBackRefs,proto3" json:"service_appliance_back_refs,omitempty" yaml:"service_appliance_back_refs,omitempty"`
	VirtualMachineInterfaceBackRefs []*VirtualMachineInterface               `protobuf:"bytes,3023,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
	VirtualPortGroupBackRefs        []*VirtualPortGroup                      `protobuf:"bytes,3024,rep,name=virtual_port_group_back_refs,json=virtualPortGroupBackRefs,proto3" json:"virtual_port_group_back_refs,omitempty" yaml:"virtual_port_group_back_refs,omitempty"`
	LogicalInterfaces               []*LogicalInterface                      `protobuf:"bytes,2019,rep,name=logical_interfaces,json=logicalInterfaces,proto3" json:"logical_interfaces,omitempty" yaml:"logical_interfaces,omitempty"`
}

func (m *PhysicalInterface) Reset()      { *m = PhysicalInterface{} }
func (*PhysicalInterface) ProtoMessage() {}
func (*PhysicalInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{209}
}
func (m *PhysicalInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalInterface.Unmarshal(m, b)
}
func (m *PhysicalInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalInterface.Marshal(b, m, deterministic)
}
func (m *PhysicalInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalInterface.Merge(m, src)
}
func (m *PhysicalInterface) XXX_Size() int {
	return xxx_messageInfo_PhysicalInterface.Size(m)
}
func (m *PhysicalInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalInterface.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalInterface proto.InternalMessageInfo

func (m *PhysicalInterface) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *PhysicalInterface) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *PhysicalInterface) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *PhysicalInterface) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *PhysicalInterface) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *PhysicalInterface) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *PhysicalInterface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PhysicalInterface) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *PhysicalInterface) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *PhysicalInterface) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *PhysicalInterface) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalInterface) GetEthernetSegmentIdentifier() string {
	if m != nil {
		return m.EthernetSegmentIdentifier
	}
	return ""
}

func (m *PhysicalInterface) GetPhysicalInterfaceMacAddresses() *MacAddressesType {
	if m != nil {
		return m.PhysicalInterfaceMacAddresses
	}
	return nil
}

func (m *PhysicalInterface) GetPhysicalInterfacePortID() string {
	if m != nil {
		return m.PhysicalInterfacePortID
	}
	return ""
}

func (m *PhysicalInterface) GetPhysicalInterfaceType() string {
	if m != nil {
		return m.PhysicalInterfaceType
	}
	return ""
}

func (m *PhysicalInterface) GetPhysicalInterfaceRefs() []*PhysicalInterfacePhysicalInterfaceRef {
	if m != nil {
		return m.PhysicalInterfaceRefs
	}
	return nil
}

func (m *PhysicalInterface) GetPortRefs() []*PhysicalInterfacePortRef {
	if m != nil {
		return m.PortRefs
	}
	return nil
}

func (m *PhysicalInterface) GetTagRefs() []*PhysicalInterfaceTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *PhysicalInterface) GetLinkAggregationGroupBackRefs() []*LinkAggregationGroup {
	if m != nil {
		return m.LinkAggregationGroupBackRefs
	}
	return nil
}

func (m *PhysicalInterface) GetPhysicalInterfaceBackRefs() []*PhysicalInterface {
	if m != nil {
		return m.PhysicalInterfaceBackRefs
	}
	return nil
}

func (m *PhysicalInterface) GetServiceApplianceBackRefs() []*ServiceAppliance {
	if m != nil {
		return m.ServiceApplianceBackRefs
	}
	return nil
}

func (m *PhysicalInterface) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

func (m *PhysicalInterface) GetVirtualPortGroupBackRefs() []*VirtualPortGroup {
	if m != nil {
		return m.VirtualPortGroupBackRefs
	}
	return nil
}

func (m *PhysicalInterface) GetLogicalInterfaces() []*LogicalInterface {
	if m != nil {
		return m.LogicalInterfaces
	}
	return nil
}

type PhysicalInterfacePhysicalInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalInterfacePhysicalInterfaceRef) Reset()      { *m = PhysicalInterfacePhysicalInterfaceRef{} }
func (*PhysicalInterfacePhysicalInterfaceRef) ProtoMessage() {}
func (*PhysicalInterfacePhysicalInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{210}
}
func (m *PhysicalInterfacePhysicalInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalInterfacePhysicalInterfaceRef.Unmarshal(m, b)
}
func (m *PhysicalInterfacePhysicalInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalInterfacePhysicalInterfaceRef.Marshal(b, m, deterministic)
}
func (m *PhysicalInterfacePhysicalInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalInterfacePhysicalInterfaceRef.Merge(m, src)
}
func (m *PhysicalInterfacePhysicalInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalInterfacePhysicalInterfaceRef.Size(m)
}
func (m *PhysicalInterfacePhysicalInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalInterfacePhysicalInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalInterfacePhysicalInterfaceRef proto.InternalMessageInfo

func (m *PhysicalInterfacePhysicalInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalInterfacePhysicalInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalInterfacePhysicalInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalInterfacePortRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalInterfacePortRef) Reset()      { *m = PhysicalInterfacePortRef{} }
func (*PhysicalInterfacePortRef) ProtoMessage() {}
func (*PhysicalInterfacePortRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{211}
}
func (m *PhysicalInterfacePortRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalInterfacePortRef.Unmarshal(m, b)
}
func (m *PhysicalInterfacePortRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalInterfacePortRef.Marshal(b, m, deterministic)
}
func (m *PhysicalInterfacePortRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalInterfacePortRef.Merge(m, src)
}
func (m *PhysicalInterfacePortRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalInterfacePortRef.Size(m)
}
func (m *PhysicalInterfacePortRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalInterfacePortRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalInterfacePortRef proto.InternalMessageInfo

func (m *PhysicalInterfacePortRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalInterfacePortRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalInterfacePortRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalInterfaceTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalInterfaceTagRef) Reset()      { *m = PhysicalInterfaceTagRef{} }
func (*PhysicalInterfaceTagRef) ProtoMessage() {}
func (*PhysicalInterfaceTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{212}
}
func (m *PhysicalInterfaceTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalInterfaceTagRef.Unmarshal(m, b)
}
func (m *PhysicalInterfaceTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalInterfaceTagRef.Marshal(b, m, deterministic)
}
func (m *PhysicalInterfaceTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalInterfaceTagRef.Merge(m, src)
}
func (m *PhysicalInterfaceTagRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalInterfaceTagRef.Size(m)
}
func (m *PhysicalInterfaceTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalInterfaceTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalInterfaceTagRef proto.InternalMessageInfo

func (m *PhysicalInterfaceTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalInterfaceTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalInterfaceTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalRole struct {
	Annotations                   *KeyValuePairs           `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion          int64                    `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                   string                   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                        []string                 `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                          string                   `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                       *IdPermsType             `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                          string                   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                    string                   `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                    string                   `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                        *PermType2               `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                          string                   `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TagRefs                       []*PhysicalRoleTagRef    `protobuf:"bytes,1012,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	DeviceFunctionalGroupBackRefs []*DeviceFunctionalGroup `protobuf:"bytes,3013,rep,name=device_functional_group_back_refs,json=deviceFunctionalGroupBackRefs,proto3" json:"device_functional_group_back_refs,omitempty" yaml:"device_functional_group_back_refs,omitempty"`
	PhysicalRouterBackRefs        []*PhysicalRouter        `protobuf:"bytes,3014,rep,name=physical_router_back_refs,json=physicalRouterBackRefs,proto3" json:"physical_router_back_refs,omitempty" yaml:"physical_router_back_refs,omitempty"`
	RoleDefinitionBackRefs        []*RoleDefinition        `protobuf:"bytes,3015,rep,name=role_definition_back_refs,json=roleDefinitionBackRefs,proto3" json:"role_definition_back_refs,omitempty" yaml:"role_definition_back_refs,omitempty"`
}

func (m *PhysicalRole) Reset()      { *m = PhysicalRole{} }
func (*PhysicalRole) ProtoMessage() {}
func (*PhysicalRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{213}
}
func (m *PhysicalRole) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRole.Unmarshal(m, b)
}
func (m *PhysicalRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRole.Marshal(b, m, deterministic)
}
func (m *PhysicalRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRole.Merge(m, src)
}
func (m *PhysicalRole) XXX_Size() int {
	return xxx_messageInfo_PhysicalRole.Size(m)
}
func (m *PhysicalRole) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRole.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRole proto.InternalMessageInfo

func (m *PhysicalRole) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *PhysicalRole) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *PhysicalRole) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *PhysicalRole) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *PhysicalRole) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *PhysicalRole) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *PhysicalRole) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PhysicalRole) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *PhysicalRole) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *PhysicalRole) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *PhysicalRole) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRole) GetTagRefs() []*PhysicalRoleTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *PhysicalRole) GetDeviceFunctionalGroupBackRefs() []*DeviceFunctionalGroup {
	if m != nil {
		return m.DeviceFunctionalGroupBackRefs
	}
	return nil
}

func (m *PhysicalRole) GetPhysicalRouterBackRefs() []*PhysicalRouter {
	if m != nil {
		return m.PhysicalRouterBackRefs
	}
	return nil
}

func (m *PhysicalRole) GetRoleDefinitionBackRefs() []*RoleDefinition {
	if m != nil {
		return m.RoleDefinitionBackRefs
	}
	return nil
}

type PhysicalRoleTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalRoleTagRef) Reset()      { *m = PhysicalRoleTagRef{} }
func (*PhysicalRoleTagRef) ProtoMessage() {}
func (*PhysicalRoleTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{214}
}
func (m *PhysicalRoleTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRoleTagRef.Unmarshal(m, b)
}
func (m *PhysicalRoleTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRoleTagRef.Marshal(b, m, deterministic)
}
func (m *PhysicalRoleTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRoleTagRef.Merge(m, src)
}
func (m *PhysicalRoleTagRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalRoleTagRef.Size(m)
}
func (m *PhysicalRoleTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRoleTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRoleTagRef proto.InternalMessageInfo

func (m *PhysicalRoleTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRoleTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalRoleTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalRouter struct {
	Annotations                        *KeyValuePairs                            `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion               int64                                     `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                        string                                    `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                             []string                                  `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                               string                                    `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                            *IdPermsType                              `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                               string                                    `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                         string                                    `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                         string                                    `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                             *PermType2                                `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                               string                                    `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	PhysicalRouterAutonomousSystem     *AutonomousSystemsType                    `protobuf:"bytes,12,opt,name=physical_router_autonomous_system,json=physicalRouterAutonomousSystem,proto3" json:"physical_router_autonomous_system,omitempty" yaml:"physical_router_autonomous_system,omitempty"`
	PhysicalRouterCliCommitState       string                                    `protobuf:"bytes,13,opt,name=physical_router_cli_commit_state,json=physicalRouterCliCommitState,proto3" json:"physical_router_cli_commit_state,omitempty" yaml:"physical_router_cli_commit_state,omitempty"`
	PhysicalRouterDataplaneIP          string                                    `protobuf:"bytes,14,opt,name=physical_router_dataplane_ip,json=physicalRouterDataplaneIp,proto3" json:"physical_router_dataplane_ip,omitempty" yaml:"physical_router_dataplane_ip,omitempty"`
	PhysicalRouterDeviceFamily         string                                    `protobuf:"bytes,15,opt,name=physical_router_device_family,json=physicalRouterDeviceFamily,proto3" json:"physical_router_device_family,omitempty" yaml:"physical_router_device_family,omitempty"`
	PhysicalRouterDHCPParameters       *DnsmasqLeaseParameters                   `protobuf:"bytes,16,opt,name=physical_router_dhcp_parameters,json=physicalRouterDhcpParameters,proto3" json:"physical_router_dhcp_parameters,omitempty" yaml:"physical_router_dhcp_parameters,omitempty"`
	PhysicalRouterEncryptionType       string                                    `protobuf:"bytes,17,opt,name=physical_router_encryption_type,json=physicalRouterEncryptionType,proto3" json:"physical_router_encryption_type,omitempty" yaml:"physical_router_encryption_type,omitempty"`
	PhysicalRouterHostname             string                                    `protobuf:"bytes,18,opt,name=physical_router_hostname,json=physicalRouterHostname,proto3" json:"physical_router_hostname,omitempty" yaml:"physical_router_hostname,omitempty"`
	PhysicalRouterJunosServicePorts    *JunosServicePorts                        `protobuf:"bytes,19,opt,name=physical_router_junos_service_ports,json=physicalRouterJunosServicePorts,proto3" json:"physical_router_junos_service_ports,omitempty" yaml:"physical_router_junos_service_ports,omitempty"`
	PhysicalRouterLLDP                 bool                                      `protobuf:"varint,20,opt,name=physical_router_lldp,json=physicalRouterLldp,proto3" json:"physical_router_lldp,omitempty" yaml:"physical_router_lldp,omitempty"`
	PhysicalRouterLoopbackIP           string                                    `protobuf:"bytes,21,opt,name=physical_router_loopback_ip,json=physicalRouterLoopbackIp,proto3" json:"physical_router_loopback_ip,omitempty" yaml:"physical_router_loopback_ip,omitempty"`
	PhysicalRouterManagedState         string                                    `protobuf:"bytes,22,opt,name=physical_router_managed_state,json=physicalRouterManagedState,proto3" json:"physical_router_managed_state,omitempty" yaml:"physical_router_managed_state,omitempty"`
	PhysicalRouterManagementIP         string                                    `protobuf:"bytes,23,opt,name=physical_router_management_ip,json=physicalRouterManagementIp,proto3" json:"physical_router_management_ip,omitempty" yaml:"physical_router_management_ip,omitempty"`
	PhysicalRouterManagementMac        string                                    `protobuf:"bytes,24,opt,name=physical_router_management_mac,json=physicalRouterManagementMac,proto3" json:"physical_router_management_mac,omitempty" yaml:"physical_router_management_mac,omitempty"`
	PhysicalRouterOsVersion            string                                    `protobuf:"bytes,25,opt,name=physical_router_os_version,json=physicalRouterOsVersion,proto3" json:"physical_router_os_version,omitempty" yaml:"physical_router_os_version,omitempty"`
	PhysicalRouterProductName          string                                    `protobuf:"bytes,26,opt,name=physical_router_product_name,json=physicalRouterProductName,proto3" json:"physical_router_product_name,omitempty" yaml:"physical_router_product_name,omitempty"`
	PhysicalRouterReplicatorLoopbackIP string                                    `protobuf:"bytes,27,opt,name=physical_router_replicator_loopback_ip,json=physicalRouterReplicatorLoopbackIp,proto3" json:"physical_router_replicator_loopback_ip,omitempty" yaml:"physical_router_replicator_loopback_ip,omitempty"`
	PhysicalRouterRole                 string                                    `protobuf:"bytes,28,opt,name=physical_router_role,json=physicalRouterRole,proto3" json:"physical_router_role,omitempty" yaml:"physical_router_role,omitempty"`
	PhysicalRouterSerialNumber         string                                    `protobuf:"bytes,29,opt,name=physical_router_serial_number,json=physicalRouterSerialNumber,proto3" json:"physical_router_serial_number,omitempty" yaml:"physical_router_serial_number,omitempty"`
	PhysicalRouterSNMP                 bool                                      `protobuf:"varint,30,opt,name=physical_router_snmp,json=physicalRouterSnmp,proto3" json:"physical_router_snmp,omitempty" yaml:"physical_router_snmp,omitempty"`
	PhysicalRouterSNMPCredentials      *SNMPCredentials                          `protobuf:"bytes,31,opt,name=physical_router_snmp_credentials,json=physicalRouterSnmpCredentials,proto3" json:"physical_router_snmp_credentials,omitempty" yaml:"physical_router_snmp_credentials,omitempty"`
	PhysicalRouterSupplementalConfig   string                                    `protobuf:"bytes,32,opt,name=physical_router_supplemental_config,json=physicalRouterSupplementalConfig,proto3" json:"physical_router_supplemental_config,omitempty" yaml:"physical_router_supplemental_config,omitempty"`
	PhysicalRouterUnderlayConfig       string                                    `protobuf:"bytes,33,opt,name=physical_router_underlay_config,json=physicalRouterUnderlayConfig,proto3" json:"physical_router_underlay_config,omitempty" yaml:"physical_router_underlay_config,omitempty"`
	PhysicalRouterUnderlayManaged      bool                                      `protobuf:"varint,34,opt,name=physical_router_underlay_managed,json=physicalRouterUnderlayManaged,proto3" json:"physical_router_underlay_managed,omitempty" yaml:"physical_router_underlay_managed,omitempty"`
	PhysicalRouterUserCredentials      *UserCredentials                          `protobuf:"bytes,35,opt,name=physical_router_user_credentials,json=physicalRouterUserCredentials,proto3" json:"physical_router_user_credentials,omitempty" yaml:"physical_router_user_credentials,omitempty"`
	PhysicalRouterVendorName           string                                    `protobuf:"bytes,36,opt,name=physical_router_vendor_name,json=physicalRouterVendorName,proto3" json:"physical_router_vendor_name,omitempty" yaml:"physical_router_vendor_name,omitempty"`
	PhysicalRouterVNCManaged           bool                                      `protobuf:"varint,37,opt,name=physical_router_vnc_managed,json=physicalRouterVncManaged,proto3" json:"physical_router_vnc_managed,omitempty" yaml:"physical_router_vnc_managed,omitempty"`
	RoutingBridgingRoles               *RoutingBridgingRolesType                 `protobuf:"bytes,38,opt,name=routing_bridging_roles,json=routingBridgingRoles,proto3" json:"routing_bridging_roles,omitempty" yaml:"routing_bridging_roles,omitempty"`
	TelemetryInfo                      *TelemetryStateInfo                       `protobuf:"bytes,39,opt,name=telemetry_info,json=telemetryInfo,proto3" json:"telemetry_info,omitempty" yaml:"telemetry_info,omitempty"`
	BGPRouterRefs                      []*PhysicalRouterBGPRouterRef             `protobuf:"bytes,1040,rep,name=bgp_router_refs,json=bgpRouterRefs,proto3" json:"bgp_router_refs,omitempty" yaml:"bgp_router_refs,omitempty"`
	DeviceChassisRefs                  []*PhysicalRouterDeviceChassisRef         `protobuf:"bytes,1041,rep,name=device_chassis_refs,json=deviceChassisRefs,proto3" json:"device_chassis_refs,omitempty" yaml:"device_chassis_refs,omitempty"`
	DeviceFunctionalGroupRefs          []*PhysicalRouterDeviceFunctionalGroupRef `protobuf:"bytes,1042,rep,name=device_functional_group_refs,json=deviceFunctionalGroupRefs,proto3" json:"device_functional_group_refs,omitempty" yaml:"device_functional_group_refs,omitempty"`
	DeviceImageRefs                    []*PhysicalRouterDeviceImageRef           `protobuf:"bytes,1043,rep,name=device_image_refs,json=deviceImageRefs,proto3" json:"device_image_refs,omitempty" yaml:"device_image_refs,omitempty"`
	FabricRefs                         []*PhysicalRouterFabricRef                `protobuf:"bytes,1044,rep,name=fabric_refs,json=fabricRefs,proto3" json:"fabric_refs,omitempty" yaml:"fabric_refs,omitempty"`
	IntentMapRefs                      []*PhysicalRouterIntentMapRef             `protobuf:"bytes,1045,rep,name=intent_map_refs,json=intentMapRefs,proto3" json:"intent_map_refs,omitempty" yaml:"intent_map_refs,omitempty"`
	NodeProfileRefs                    []*PhysicalRouterNodeProfileRef           `protobuf:"bytes,1046,rep,name=node_profile_refs,json=nodeProfileRefs,proto3" json:"node_profile_refs,omitempty" yaml:"node_profile_refs,omitempty"`
	OverlayRoleRefs                    []*PhysicalRouterOverlayRoleRef           `protobuf:"bytes,1047,rep,name=overlay_role_refs,json=overlayRoleRefs,proto3" json:"overlay_role_refs,omitempty" yaml:"overlay_role_refs,omitempty"`
	PhysicalRoleRefs                   []*PhysicalRouterPhysicalRoleRef          `protobuf:"bytes,1048,rep,name=physical_role_refs,json=physicalRoleRefs,proto3" json:"physical_role_refs,omitempty" yaml:"physical_role_refs,omitempty"`
	TagRefs                            []*PhysicalRouterTagRef                   `protobuf:"bytes,1049,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	TelemetryProfileRefs               []*PhysicalRouterTelemetryProfileRef      `protobuf:"bytes,1050,rep,name=telemetry_profile_refs,json=telemetryProfileRefs,proto3" json:"telemetry_profile_refs,omitempty" yaml:"telemetry_profile_refs,omitempty"`
	VirtualNetworkRefs                 []*PhysicalRouterVirtualNetworkRef        `protobuf:"bytes,1051,rep,name=virtual_network_refs,json=virtualNetworkRefs,proto3" json:"virtual_network_refs,omitempty" yaml:"virtual_network_refs,omitempty"`
	VirtualRouterRefs                  []*PhysicalRouterVirtualRouterRef         `protobuf:"bytes,1052,rep,name=virtual_router_refs,json=virtualRouterRefs,proto3" json:"virtual_router_refs,omitempty" yaml:"virtual_router_refs,omitempty"`
	E2ServiceProviderBackRefs          []*E2ServiceProvider                      `protobuf:"bytes,3058,rep,name=e2_service_provider_back_refs,json=e2ServiceProviderBackRefs,proto3" json:"e2_service_provider_back_refs,omitempty" yaml:"e2_service_provider_back_refs,omitempty"`
	InstanceIPBackRefs                 []*InstanceIP                             `protobuf:"bytes,3059,rep,name=instance_ip_back_refs,json=instanceIpBackRefs,proto3" json:"instance_ip_back_refs,omitempty" yaml:"instance_ip_back_refs,omitempty"`
	LogicalRouterBackRefs              []*LogicalRouter                          `protobuf:"bytes,3060,rep,name=logical_router_back_refs,json=logicalRouterBackRefs,proto3" json:"logical_router_back_refs,omitempty" yaml:"logical_router_back_refs,omitempty"`
	NetworkDeviceConfigBackRefs        []*NetworkDeviceConfig                    `protobuf:"bytes,3061,rep,name=network_device_config_back_refs,json=networkDeviceConfigBackRefs,proto3" json:"network_device_config_back_refs,omitempty" yaml:"network_device_config_back_refs,omitempty"`
	ServiceEndpointBackRefs            []*ServiceEndpoint                        `protobuf:"bytes,3062,rep,name=service_endpoint_back_refs,json=serviceEndpointBackRefs,proto3" json:"service_endpoint_back_refs,omitempty" yaml:"service_endpoint_back_refs,omitempty"`
	CliConfigs                         []*CliConfig                              `protobuf:"bytes,2053,rep,name=cli_configs,json=cliConfigs,proto3" json:"cli_configs,omitempty" yaml:"cli_configs,omitempty"`
	HardwareInventorys                 []*HardwareInventory                      `protobuf:"bytes,2054,rep,name=hardware_inventorys,json=hardwareInventorys,proto3" json:"hardware_inventorys,omitempty" yaml:"hardware_inventorys,omitempty"`
	LinkAggregationGroups              []*LinkAggregationGroup                   `protobuf:"bytes,2055,rep,name=link_aggregation_groups,json=linkAggregationGroups,proto3" json:"link_aggregation_groups,omitempty" yaml:"link_aggregation_groups,omitempty"`
	LogicalInterfaces                  []*LogicalInterface                       `protobuf:"bytes,2056,rep,name=logical_interfaces,json=logicalInterfaces,proto3" json:"logical_interfaces,omitempty" yaml:"logical_interfaces,omitempty"`
	PhysicalInterfaces                 []*PhysicalInterface                      `protobuf:"bytes,2057,rep,name=physical_interfaces,json=physicalInterfaces,proto3" json:"physical_interfaces,omitempty" yaml:"physical_interfaces,omitempty"`
}

func (m *PhysicalRouter) Reset()      { *m = PhysicalRouter{} }
func (*PhysicalRouter) ProtoMessage() {}
func (*PhysicalRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{215}
}
func (m *PhysicalRouter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRouter.Unmarshal(m, b)
}
func (m *PhysicalRouter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRouter.Marshal(b, m, deterministic)
}
func (m *PhysicalRouter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRouter.Merge(m, src)
}
func (m *PhysicalRouter) XXX_Size() int {
	return xxx_messageInfo_PhysicalRouter.Size(m)
}
func (m *PhysicalRouter) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRouter.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRouter proto.InternalMessageInfo

func (m *PhysicalRouter) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *PhysicalRouter) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *PhysicalRouter) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *PhysicalRouter) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *PhysicalRouter) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *PhysicalRouter) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *PhysicalRouter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PhysicalRouter) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *PhysicalRouter) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *PhysicalRouter) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *PhysicalRouter) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterAutonomousSystem() *AutonomousSystemsType {
	if m != nil {
		return m.PhysicalRouterAutonomousSystem
	}
	return nil
}

func (m *PhysicalRouter) GetPhysicalRouterCliCommitState() string {
	if m != nil {
		return m.PhysicalRouterCliCommitState
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterDataplaneIP() string {
	if m != nil {
		return m.PhysicalRouterDataplaneIP
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterDeviceFamily() string {
	if m != nil {
		return m.PhysicalRouterDeviceFamily
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterDHCPParameters() *DnsmasqLeaseParameters {
	if m != nil {
		return m.PhysicalRouterDHCPParameters
	}
	return nil
}

func (m *PhysicalRouter) GetPhysicalRouterEncryptionType() string {
	if m != nil {
		return m.PhysicalRouterEncryptionType
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterHostname() string {
	if m != nil {
		return m.PhysicalRouterHostname
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterJunosServicePorts() *JunosServicePorts {
	if m != nil {
		return m.PhysicalRouterJunosServicePorts
	}
	return nil
}

func (m *PhysicalRouter) GetPhysicalRouterLLDP() bool {
	if m != nil {
		return m.PhysicalRouterLLDP
	}
	return false
}

func (m *PhysicalRouter) GetPhysicalRouterLoopbackIP() string {
	if m != nil {
		return m.PhysicalRouterLoopbackIP
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterManagedState() string {
	if m != nil {
		return m.PhysicalRouterManagedState
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterManagementIP() string {
	if m != nil {
		return m.PhysicalRouterManagementIP
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterManagementMac() string {
	if m != nil {
		return m.PhysicalRouterManagementMac
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterOsVersion() string {
	if m != nil {
		return m.PhysicalRouterOsVersion
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterProductName() string {
	if m != nil {
		return m.PhysicalRouterProductName
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterReplicatorLoopbackIP() string {
	if m != nil {
		return m.PhysicalRouterReplicatorLoopbackIP
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterRole() string {
	if m != nil {
		return m.PhysicalRouterRole
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterSerialNumber() string {
	if m != nil {
		return m.PhysicalRouterSerialNumber
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterSNMP() bool {
	if m != nil {
		return m.PhysicalRouterSNMP
	}
	return false
}

func (m *PhysicalRouter) GetPhysicalRouterSNMPCredentials() *SNMPCredentials {
	if m != nil {
		return m.PhysicalRouterSNMPCredentials
	}
	return nil
}

func (m *PhysicalRouter) GetPhysicalRouterSupplementalConfig() string {
	if m != nil {
		return m.PhysicalRouterSupplementalConfig
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterUnderlayConfig() string {
	if m != nil {
		return m.PhysicalRouterUnderlayConfig
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterUnderlayManaged() bool {
	if m != nil {
		return m.PhysicalRouterUnderlayManaged
	}
	return false
}

func (m *PhysicalRouter) GetPhysicalRouterUserCredentials() *UserCredentials {
	if m != nil {
		return m.PhysicalRouterUserCredentials
	}
	return nil
}

func (m *PhysicalRouter) GetPhysicalRouterVendorName() string {
	if m != nil {
		return m.PhysicalRouterVendorName
	}
	return ""
}

func (m *PhysicalRouter) GetPhysicalRouterVNCManaged() bool {
	if m != nil {
		return m.PhysicalRouterVNCManaged
	}
	return false
}

func (m *PhysicalRouter) GetRoutingBridgingRoles() *RoutingBridgingRolesType {
	if m != nil {
		return m.RoutingBridgingRoles
	}
	return nil
}

func (m *PhysicalRouter) GetTelemetryInfo() *TelemetryStateInfo {
	if m != nil {
		return m.TelemetryInfo
	}
	return nil
}

func (m *PhysicalRouter) GetBGPRouterRefs() []*PhysicalRouterBGPRouterRef {
	if m != nil {
		return m.BGPRouterRefs
	}
	return nil
}

func (m *PhysicalRouter) GetDeviceChassisRefs() []*PhysicalRouterDeviceChassisRef {
	if m != nil {
		return m.DeviceChassisRefs
	}
	return nil
}

func (m *PhysicalRouter) GetDeviceFunctionalGroupRefs() []*PhysicalRouterDeviceFunctionalGroupRef {
	if m != nil {
		return m.DeviceFunctionalGroupRefs
	}
	return nil
}

func (m *PhysicalRouter) GetDeviceImageRefs() []*PhysicalRouterDeviceImageRef {
	if m != nil {
		return m.DeviceImageRefs
	}
	return nil
}

func (m *PhysicalRouter) GetFabricRefs() []*PhysicalRouterFabricRef {
	if m != nil {
		return m.FabricRefs
	}
	return nil
}

func (m *PhysicalRouter) GetIntentMapRefs() []*PhysicalRouterIntentMapRef {
	if m != nil {
		return m.IntentMapRefs
	}
	return nil
}

func (m *PhysicalRouter) GetNodeProfileRefs() []*PhysicalRouterNodeProfileRef {
	if m != nil {
		return m.NodeProfileRefs
	}
	return nil
}

func (m *PhysicalRouter) GetOverlayRoleRefs() []*PhysicalRouterOverlayRoleRef {
	if m != nil {
		return m.OverlayRoleRefs
	}
	return nil
}

func (m *PhysicalRouter) GetPhysicalRoleRefs() []*PhysicalRouterPhysicalRoleRef {
	if m != nil {
		return m.PhysicalRoleRefs
	}
	return nil
}

func (m *PhysicalRouter) GetTagRefs() []*PhysicalRouterTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *PhysicalRouter) GetTelemetryProfileRefs() []*PhysicalRouterTelemetryProfileRef {
	if m != nil {
		return m.TelemetryProfileRefs
	}
	return nil
}

func (m *PhysicalRouter) GetVirtualNetworkRefs() []*PhysicalRouterVirtualNetworkRef {
	if m != nil {
		return m.VirtualNetworkRefs
	}
	return nil
}

func (m *PhysicalRouter) GetVirtualRouterRefs() []*PhysicalRouterVirtualRouterRef {
	if m != nil {
		return m.VirtualRouterRefs
	}
	return nil
}

func (m *PhysicalRouter) GetE2ServiceProviderBackRefs() []*E2ServiceProvider {
	if m != nil {
		return m.E2ServiceProviderBackRefs
	}
	return nil
}

func (m *PhysicalRouter) GetInstanceIPBackRefs() []*InstanceIP {
	if m != nil {
		return m.InstanceIPBackRefs
	}
	return nil
}

func (m *PhysicalRouter) GetLogicalRouterBackRefs() []*LogicalRouter {
	if m != nil {
		return m.LogicalRouterBackRefs
	}
	return nil
}

func (m *PhysicalRouter) GetNetworkDeviceConfigBackRefs() []*NetworkDeviceConfig {
	if m != nil {
		return m.NetworkDeviceConfigBackRefs
	}
	return nil
}

func (m *PhysicalRouter) GetServiceEndpointBackRefs() []*ServiceEndpoint {
	if m != nil {
		return m.ServiceEndpointBackRefs
	}
	return nil
}

func (m *PhysicalRouter) GetCliConfigs() []*CliConfig {
	if m != nil {
		return m.CliConfigs
	}
	return nil
}

func (m *PhysicalRouter) GetHardwareInventorys() []*HardwareInventory {
	if m != nil {
		return m.HardwareInventorys
	}
	return nil
}

func (m *PhysicalRouter) GetLinkAggregationGroups() []*LinkAggregationGroup {
	if m != nil {
		return m.LinkAggregationGroups
	}
	return nil
}

func (m *PhysicalRouter) GetLogicalInterfaces() []*LogicalInterface {
	if m != nil {
		return m.LogicalInterfaces
	}
	return nil
}

func (m *PhysicalRouter) GetPhysicalInterfaces() []*PhysicalInterface {
	if m != nil {
		return m.PhysicalInterfaces
	}
	return nil
}

type PhysicalRouterBGPRouterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalRouterBGPRouterRef) Reset()      { *m = PhysicalRouterBGPRouterRef{} }
func (*PhysicalRouterBGPRouterRef) ProtoMessage() {}
func (*PhysicalRouterBGPRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{216}
}
func (m *PhysicalRouterBGPRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRouterBGPRouterRef.Unmarshal(m, b)
}
func (m *PhysicalRouterBGPRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRouterBGPRouterRef.Marshal(b, m, deterministic)
}
func (m *PhysicalRouterBGPRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRouterBGPRouterRef.Merge(m, src)
}
func (m *PhysicalRouterBGPRouterRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalRouterBGPRouterRef.Size(m)
}
func (m *PhysicalRouterBGPRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRouterBGPRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRouterBGPRouterRef proto.InternalMessageInfo

func (m *PhysicalRouterBGPRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRouterBGPRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalRouterBGPRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalRouterDeviceChassisRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalRouterDeviceChassisRef) Reset()      { *m = PhysicalRouterDeviceChassisRef{} }
func (*PhysicalRouterDeviceChassisRef) ProtoMessage() {}
func (*PhysicalRouterDeviceChassisRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{217}
}
func (m *PhysicalRouterDeviceChassisRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRouterDeviceChassisRef.Unmarshal(m, b)
}
func (m *PhysicalRouterDeviceChassisRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRouterDeviceChassisRef.Marshal(b, m, deterministic)
}
func (m *PhysicalRouterDeviceChassisRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRouterDeviceChassisRef.Merge(m, src)
}
func (m *PhysicalRouterDeviceChassisRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalRouterDeviceChassisRef.Size(m)
}
func (m *PhysicalRouterDeviceChassisRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRouterDeviceChassisRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRouterDeviceChassisRef proto.InternalMessageInfo

func (m *PhysicalRouterDeviceChassisRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRouterDeviceChassisRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalRouterDeviceChassisRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalRouterDeviceFunctionalGroupRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalRouterDeviceFunctionalGroupRef) Reset() {
	*m = PhysicalRouterDeviceFunctionalGroupRef{}
}
func (*PhysicalRouterDeviceFunctionalGroupRef) ProtoMessage() {}
func (*PhysicalRouterDeviceFunctionalGroupRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{218}
}
func (m *PhysicalRouterDeviceFunctionalGroupRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRouterDeviceFunctionalGroupRef.Unmarshal(m, b)
}
func (m *PhysicalRouterDeviceFunctionalGroupRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRouterDeviceFunctionalGroupRef.Marshal(b, m, deterministic)
}
func (m *PhysicalRouterDeviceFunctionalGroupRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRouterDeviceFunctionalGroupRef.Merge(m, src)
}
func (m *PhysicalRouterDeviceFunctionalGroupRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalRouterDeviceFunctionalGroupRef.Size(m)
}
func (m *PhysicalRouterDeviceFunctionalGroupRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRouterDeviceFunctionalGroupRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRouterDeviceFunctionalGroupRef proto.InternalMessageInfo

func (m *PhysicalRouterDeviceFunctionalGroupRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRouterDeviceFunctionalGroupRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalRouterDeviceFunctionalGroupRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalRouterDeviceImageRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalRouterDeviceImageRef) Reset()      { *m = PhysicalRouterDeviceImageRef{} }
func (*PhysicalRouterDeviceImageRef) ProtoMessage() {}
func (*PhysicalRouterDeviceImageRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{219}
}
func (m *PhysicalRouterDeviceImageRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRouterDeviceImageRef.Unmarshal(m, b)
}
func (m *PhysicalRouterDeviceImageRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRouterDeviceImageRef.Marshal(b, m, deterministic)
}
func (m *PhysicalRouterDeviceImageRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRouterDeviceImageRef.Merge(m, src)
}
func (m *PhysicalRouterDeviceImageRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalRouterDeviceImageRef.Size(m)
}
func (m *PhysicalRouterDeviceImageRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRouterDeviceImageRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRouterDeviceImageRef proto.InternalMessageInfo

func (m *PhysicalRouterDeviceImageRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRouterDeviceImageRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalRouterDeviceImageRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalRouterFabricRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalRouterFabricRef) Reset()      { *m = PhysicalRouterFabricRef{} }
func (*PhysicalRouterFabricRef) ProtoMessage() {}
func (*PhysicalRouterFabricRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{220}
}
func (m *PhysicalRouterFabricRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRouterFabricRef.Unmarshal(m, b)
}
func (m *PhysicalRouterFabricRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRouterFabricRef.Marshal(b, m, deterministic)
}
func (m *PhysicalRouterFabricRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRouterFabricRef.Merge(m, src)
}
func (m *PhysicalRouterFabricRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalRouterFabricRef.Size(m)
}
func (m *PhysicalRouterFabricRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRouterFabricRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRouterFabricRef proto.InternalMessageInfo

func (m *PhysicalRouterFabricRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRouterFabricRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalRouterFabricRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalRouterIntentMapRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalRouterIntentMapRef) Reset()      { *m = PhysicalRouterIntentMapRef{} }
func (*PhysicalRouterIntentMapRef) ProtoMessage() {}
func (*PhysicalRouterIntentMapRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{221}
}
func (m *PhysicalRouterIntentMapRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRouterIntentMapRef.Unmarshal(m, b)
}
func (m *PhysicalRouterIntentMapRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRouterIntentMapRef.Marshal(b, m, deterministic)
}
func (m *PhysicalRouterIntentMapRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRouterIntentMapRef.Merge(m, src)
}
func (m *PhysicalRouterIntentMapRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalRouterIntentMapRef.Size(m)
}
func (m *PhysicalRouterIntentMapRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRouterIntentMapRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRouterIntentMapRef proto.InternalMessageInfo

func (m *PhysicalRouterIntentMapRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRouterIntentMapRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalRouterIntentMapRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalRouterNodeProfileRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalRouterNodeProfileRef) Reset()      { *m = PhysicalRouterNodeProfileRef{} }
func (*PhysicalRouterNodeProfileRef) ProtoMessage() {}
func (*PhysicalRouterNodeProfileRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{222}
}
func (m *PhysicalRouterNodeProfileRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRouterNodeProfileRef.Unmarshal(m, b)
}
func (m *PhysicalRouterNodeProfileRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRouterNodeProfileRef.Marshal(b, m, deterministic)
}
func (m *PhysicalRouterNodeProfileRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRouterNodeProfileRef.Merge(m, src)
}
func (m *PhysicalRouterNodeProfileRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalRouterNodeProfileRef.Size(m)
}
func (m *PhysicalRouterNodeProfileRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRouterNodeProfileRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRouterNodeProfileRef proto.InternalMessageInfo

func (m *PhysicalRouterNodeProfileRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRouterNodeProfileRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalRouterNodeProfileRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalRouterOverlayRoleRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalRouterOverlayRoleRef) Reset()      { *m = PhysicalRouterOverlayRoleRef{} }
func (*PhysicalRouterOverlayRoleRef) ProtoMessage() {}
func (*PhysicalRouterOverlayRoleRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{223}
}
func (m *PhysicalRouterOverlayRoleRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRouterOverlayRoleRef.Unmarshal(m, b)
}
func (m *PhysicalRouterOverlayRoleRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRouterOverlayRoleRef.Marshal(b, m, deterministic)
}
func (m *PhysicalRouterOverlayRoleRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRouterOverlayRoleRef.Merge(m, src)
}
func (m *PhysicalRouterOverlayRoleRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalRouterOverlayRoleRef.Size(m)
}
func (m *PhysicalRouterOverlayRoleRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRouterOverlayRoleRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRouterOverlayRoleRef proto.InternalMessageInfo

func (m *PhysicalRouterOverlayRoleRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRouterOverlayRoleRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalRouterOverlayRoleRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalRouterPhysicalRoleRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalRouterPhysicalRoleRef) Reset()      { *m = PhysicalRouterPhysicalRoleRef{} }
func (*PhysicalRouterPhysicalRoleRef) ProtoMessage() {}
func (*PhysicalRouterPhysicalRoleRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{224}
}
func (m *PhysicalRouterPhysicalRoleRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRouterPhysicalRoleRef.Unmarshal(m, b)
}
func (m *PhysicalRouterPhysicalRoleRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRouterPhysicalRoleRef.Marshal(b, m, deterministic)
}
func (m *PhysicalRouterPhysicalRoleRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRouterPhysicalRoleRef.Merge(m, src)
}
func (m *PhysicalRouterPhysicalRoleRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalRouterPhysicalRoleRef.Size(m)
}
func (m *PhysicalRouterPhysicalRoleRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRouterPhysicalRoleRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRouterPhysicalRoleRef proto.InternalMessageInfo

func (m *PhysicalRouterPhysicalRoleRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRouterPhysicalRoleRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalRouterPhysicalRoleRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalRouterTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalRouterTagRef) Reset()      { *m = PhysicalRouterTagRef{} }
func (*PhysicalRouterTagRef) ProtoMessage() {}
func (*PhysicalRouterTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{225}
}
func (m *PhysicalRouterTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRouterTagRef.Unmarshal(m, b)
}
func (m *PhysicalRouterTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRouterTagRef.Marshal(b, m, deterministic)
}
func (m *PhysicalRouterTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRouterTagRef.Merge(m, src)
}
func (m *PhysicalRouterTagRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalRouterTagRef.Size(m)
}
func (m *PhysicalRouterTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRouterTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRouterTagRef proto.InternalMessageInfo

func (m *PhysicalRouterTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRouterTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalRouterTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalRouterTelemetryProfileRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalRouterTelemetryProfileRef) Reset()      { *m = PhysicalRouterTelemetryProfileRef{} }
func (*PhysicalRouterTelemetryProfileRef) ProtoMessage() {}
func (*PhysicalRouterTelemetryProfileRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{226}
}
func (m *PhysicalRouterTelemetryProfileRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRouterTelemetryProfileRef.Unmarshal(m, b)
}
func (m *PhysicalRouterTelemetryProfileRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRouterTelemetryProfileRef.Marshal(b, m, deterministic)
}
func (m *PhysicalRouterTelemetryProfileRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRouterTelemetryProfileRef.Merge(m, src)
}
func (m *PhysicalRouterTelemetryProfileRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalRouterTelemetryProfileRef.Size(m)
}
func (m *PhysicalRouterTelemetryProfileRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRouterTelemetryProfileRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRouterTelemetryProfileRef proto.InternalMessageInfo

func (m *PhysicalRouterTelemetryProfileRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRouterTelemetryProfileRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalRouterTelemetryProfileRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalRouterVirtualNetworkRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalRouterVirtualNetworkRef) Reset()      { *m = PhysicalRouterVirtualNetworkRef{} }
func (*PhysicalRouterVirtualNetworkRef) ProtoMessage() {}
func (*PhysicalRouterVirtualNetworkRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{227}
}
func (m *PhysicalRouterVirtualNetworkRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRouterVirtualNetworkRef.Unmarshal(m, b)
}
func (m *PhysicalRouterVirtualNetworkRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRouterVirtualNetworkRef.Marshal(b, m, deterministic)
}
func (m *PhysicalRouterVirtualNetworkRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRouterVirtualNetworkRef.Merge(m, src)
}
func (m *PhysicalRouterVirtualNetworkRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalRouterVirtualNetworkRef.Size(m)
}
func (m *PhysicalRouterVirtualNetworkRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRouterVirtualNetworkRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRouterVirtualNetworkRef proto.InternalMessageInfo

func (m *PhysicalRouterVirtualNetworkRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRouterVirtualNetworkRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalRouterVirtualNetworkRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PhysicalRouterVirtualRouterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PhysicalRouterVirtualRouterRef) Reset()      { *m = PhysicalRouterVirtualRouterRef{} }
func (*PhysicalRouterVirtualRouterRef) ProtoMessage() {}
func (*PhysicalRouterVirtualRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{228}
}
func (m *PhysicalRouterVirtualRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalRouterVirtualRouterRef.Unmarshal(m, b)
}
func (m *PhysicalRouterVirtualRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalRouterVirtualRouterRef.Marshal(b, m, deterministic)
}
func (m *PhysicalRouterVirtualRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalRouterVirtualRouterRef.Merge(m, src)
}
func (m *PhysicalRouterVirtualRouterRef) XXX_Size() int {
	return xxx_messageInfo_PhysicalRouterVirtualRouterRef.Size(m)
}
func (m *PhysicalRouterVirtualRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalRouterVirtualRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalRouterVirtualRouterRef proto.InternalMessageInfo

func (m *PhysicalRouterVirtualRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PhysicalRouterVirtualRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PhysicalRouterVirtualRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PolicyManagement struct {
	Annotations           *KeyValuePairs            `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion  int64                     `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName           string                    `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                []string                  `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                  string                    `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms               *IdPermsType              `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                  string                    `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType            string                    `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID            string                    `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                *PermType2                `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                  string                    `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TagRefs               []*PolicyManagementTagRef `protobuf:"bytes,1012,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	AddressGroups         []*AddressGroup           `protobuf:"bytes,2013,rep,name=address_groups,json=addressGroups,proto3" json:"address_groups,omitempty" yaml:"address_groups,omitempty"`
	ApplicationPolicySets []*ApplicationPolicySet   `protobuf:"bytes,2014,rep,name=application_policy_sets,json=applicationPolicySets,proto3" json:"application_policy_sets,omitempty" yaml:"application_policy_sets,omitempty"`
	FirewallPolicys       []*FirewallPolicy         `protobuf:"bytes,2015,rep,name=firewall_policys,json=firewallPolicys,proto3" json:"firewall_policys,omitempty" yaml:"firewall_policys,omitempty"`
	FirewallRules         []*FirewallRule           `protobuf:"bytes,2016,rep,name=firewall_rules,json=firewallRules,proto3" json:"firewall_rules,omitempty" yaml:"firewall_rules,omitempty"`
	ServiceGroups         []*ServiceGroup           `protobuf:"bytes,2017,rep,name=service_groups,json=serviceGroups,proto3" json:"service_groups,omitempty" yaml:"service_groups,omitempty"`
}

func (m *PolicyManagement) Reset()      { *m = PolicyManagement{} }
func (*PolicyManagement) ProtoMessage() {}
func (*PolicyManagement) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{229}
}
func (m *PolicyManagement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyManagement.Unmarshal(m, b)
}
func (m *PolicyManagement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyManagement.Marshal(b, m, deterministic)
}
func (m *PolicyManagement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyManagement.Merge(m, src)
}
func (m *PolicyManagement) XXX_Size() int {
	return xxx_messageInfo_PolicyManagement.Size(m)
}
func (m *PolicyManagement) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyManagement.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyManagement proto.InternalMessageInfo

func (m *PolicyManagement) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *PolicyManagement) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *PolicyManagement) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *PolicyManagement) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *PolicyManagement) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *PolicyManagement) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *PolicyManagement) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PolicyManagement) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *PolicyManagement) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *PolicyManagement) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *PolicyManagement) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PolicyManagement) GetTagRefs() []*PolicyManagementTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *PolicyManagement) GetAddressGroups() []*AddressGroup {
	if m != nil {
		return m.AddressGroups
	}
	return nil
}

func (m *PolicyManagement) GetApplicationPolicySets() []*ApplicationPolicySet {
	if m != nil {
		return m.ApplicationPolicySets
	}
	return nil
}

func (m *PolicyManagement) GetFirewallPolicys() []*FirewallPolicy {
	if m != nil {
		return m.FirewallPolicys
	}
	return nil
}

func (m *PolicyManagement) GetFirewallRules() []*FirewallRule {
	if m != nil {
		return m.FirewallRules
	}
	return nil
}

func (m *PolicyManagement) GetServiceGroups() []*ServiceGroup {
	if m != nil {
		return m.ServiceGroups
	}
	return nil
}

type PolicyManagementTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PolicyManagementTagRef) Reset()      { *m = PolicyManagementTagRef{} }
func (*PolicyManagementTagRef) ProtoMessage() {}
func (*PolicyManagementTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{230}
}
func (m *PolicyManagementTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyManagementTagRef.Unmarshal(m, b)
}
func (m *PolicyManagementTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyManagementTagRef.Marshal(b, m, deterministic)
}
func (m *PolicyManagementTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyManagementTagRef.Merge(m, src)
}
func (m *PolicyManagementTagRef) XXX_Size() int {
	return xxx_messageInfo_PolicyManagementTagRef.Size(m)
}
func (m *PolicyManagementTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyManagementTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyManagementTagRef proto.InternalMessageInfo

func (m *PolicyManagementTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PolicyManagementTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PolicyManagementTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PortGroup struct {
	Annotations          *KeyValuePairs          `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                   `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string                  `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string                `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string                  `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType            `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string                  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string                  `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string                  `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2              `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string                  `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	BMSPortGroupInfo     *BaremetalPortGroupInfo `protobuf:"bytes,12,opt,name=bms_port_group_info,json=bmsPortGroupInfo,proto3" json:"bms_port_group_info,omitempty" yaml:"bms_port_group_info,omitempty"`
	PortRefs             []*PortGroupPortRef     `protobuf:"bytes,1013,rep,name=port_refs,json=portRefs,proto3" json:"port_refs,omitempty" yaml:"port_refs,omitempty"`
	TagRefs              []*PortGroupTagRef      `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *PortGroup) Reset()      { *m = PortGroup{} }
func (*PortGroup) ProtoMessage() {}
func (*PortGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{231}
}
func (m *PortGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortGroup.Unmarshal(m, b)
}
func (m *PortGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortGroup.Marshal(b, m, deterministic)
}
func (m *PortGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortGroup.Merge(m, src)
}
func (m *PortGroup) XXX_Size() int {
	return xxx_messageInfo_PortGroup.Size(m)
}
func (m *PortGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_PortGroup.DiscardUnknown(m)
}

var xxx_messageInfo_PortGroup proto.InternalMessageInfo

func (m *PortGroup) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *PortGroup) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *PortGroup) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *PortGroup) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *PortGroup) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *PortGroup) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *PortGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PortGroup) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *PortGroup) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *PortGroup) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *PortGroup) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PortGroup) GetBMSPortGroupInfo() *BaremetalPortGroupInfo {
	if m != nil {
		return m.BMSPortGroupInfo
	}
	return nil
}

func (m *PortGroup) GetPortRefs() []*PortGroupPortRef {
	if m != nil {
		return m.PortRefs
	}
	return nil
}

func (m *PortGroup) GetTagRefs() []*PortGroupTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type PortGroupPortRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PortGroupPortRef) Reset()      { *m = PortGroupPortRef{} }
func (*PortGroupPortRef) ProtoMessage() {}
func (*PortGroupPortRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{232}
}
func (m *PortGroupPortRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortGroupPortRef.Unmarshal(m, b)
}
func (m *PortGroupPortRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortGroupPortRef.Marshal(b, m, deterministic)
}
func (m *PortGroupPortRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortGroupPortRef.Merge(m, src)
}
func (m *PortGroupPortRef) XXX_Size() int {
	return xxx_messageInfo_PortGroupPortRef.Size(m)
}
func (m *PortGroupPortRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PortGroupPortRef.DiscardUnknown(m)
}

var xxx_messageInfo_PortGroupPortRef proto.InternalMessageInfo

func (m *PortGroupPortRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PortGroupPortRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PortGroupPortRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PortGroupTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PortGroupTagRef) Reset()      { *m = PortGroupTagRef{} }
func (*PortGroupTagRef) ProtoMessage() {}
func (*PortGroupTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{233}
}
func (m *PortGroupTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortGroupTagRef.Unmarshal(m, b)
}
func (m *PortGroupTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortGroupTagRef.Marshal(b, m, deterministic)
}
func (m *PortGroupTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortGroupTagRef.Merge(m, src)
}
func (m *PortGroupTagRef) XXX_Size() int {
	return xxx_messageInfo_PortGroupTagRef.Size(m)
}
func (m *PortGroupTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PortGroupTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_PortGroupTagRef proto.InternalMessageInfo

func (m *PortGroupTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PortGroupTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PortGroupTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PortProfile struct {
	Annotations                     *KeyValuePairs                       `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                                `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                             `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                               `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType                         `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                               `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                               `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                           `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                               `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	StormControlProfileRefs         []*PortProfileStormControlProfileRef `protobuf:"bytes,1012,rep,name=storm_control_profile_refs,json=stormControlProfileRefs,proto3" json:"storm_control_profile_refs,omitempty" yaml:"storm_control_profile_refs,omitempty"`
	TagRefs                         []*PortProfileTagRef                 `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceBackRefs []*VirtualMachineInterface           `protobuf:"bytes,3014,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
	VirtualPortGroupBackRefs        []*VirtualPortGroup                  `protobuf:"bytes,3015,rep,name=virtual_port_group_back_refs,json=virtualPortGroupBackRefs,proto3" json:"virtual_port_group_back_refs,omitempty" yaml:"virtual_port_group_back_refs,omitempty"`
}

func (m *PortProfile) Reset()      { *m = PortProfile{} }
func (*PortProfile) ProtoMessage() {}
func (*PortProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{234}
}
func (m *PortProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortProfile.Unmarshal(m, b)
}
func (m *PortProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortProfile.Marshal(b, m, deterministic)
}
func (m *PortProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortProfile.Merge(m, src)
}
func (m *PortProfile) XXX_Size() int {
	return xxx_messageInfo_PortProfile.Size(m)
}
func (m *PortProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_PortProfile.DiscardUnknown(m)
}

var xxx_messageInfo_PortProfile proto.InternalMessageInfo

func (m *PortProfile) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *PortProfile) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *PortProfile) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *PortProfile) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *PortProfile) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *PortProfile) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *PortProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PortProfile) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *PortProfile) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *PortProfile) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *PortProfile) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PortProfile) GetStormControlProfileRefs() []*PortProfileStormControlProfileRef {
	if m != nil {
		return m.StormControlProfileRefs
	}
	return nil
}

func (m *PortProfile) GetTagRefs() []*PortProfileTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *PortProfile) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

func (m *PortProfile) GetVirtualPortGroupBackRefs() []*VirtualPortGroup {
	if m != nil {
		return m.VirtualPortGroupBackRefs
	}
	return nil
}

type PortProfileStormControlProfileRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PortProfileStormControlProfileRef) Reset()      { *m = PortProfileStormControlProfileRef{} }
func (*PortProfileStormControlProfileRef) ProtoMessage() {}
func (*PortProfileStormControlProfileRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{235}
}
func (m *PortProfileStormControlProfileRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortProfileStormControlProfileRef.Unmarshal(m, b)
}
func (m *PortProfileStormControlProfileRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortProfileStormControlProfileRef.Marshal(b, m, deterministic)
}
func (m *PortProfileStormControlProfileRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortProfileStormControlProfileRef.Merge(m, src)
}
func (m *PortProfileStormControlProfileRef) XXX_Size() int {
	return xxx_messageInfo_PortProfileStormControlProfileRef.Size(m)
}
func (m *PortProfileStormControlProfileRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PortProfileStormControlProfileRef.DiscardUnknown(m)
}

var xxx_messageInfo_PortProfileStormControlProfileRef proto.InternalMessageInfo

func (m *PortProfileStormControlProfileRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PortProfileStormControlProfileRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PortProfileStormControlProfileRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PortProfileTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PortProfileTagRef) Reset()      { *m = PortProfileTagRef{} }
func (*PortProfileTagRef) ProtoMessage() {}
func (*PortProfileTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{236}
}
func (m *PortProfileTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortProfileTagRef.Unmarshal(m, b)
}
func (m *PortProfileTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortProfileTagRef.Marshal(b, m, deterministic)
}
func (m *PortProfileTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortProfileTagRef.Merge(m, src)
}
func (m *PortProfileTagRef) XXX_Size() int {
	return xxx_messageInfo_PortProfileTagRef.Size(m)
}
func (m *PortProfileTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PortProfileTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_PortProfileTagRef proto.InternalMessageInfo

func (m *PortProfileTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PortProfileTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PortProfileTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type Port struct {
	Annotations               *KeyValuePairs       `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion      int64                `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName               string               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                    []string             `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                      string               `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                   *IdPermsType         `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                      string               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                string               `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                string               `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                    *PermType2           `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                      string               `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	BMSPortInfo               *BaremetalPortInfo   `protobuf:"bytes,12,opt,name=bms_port_info,json=bmsPortInfo,proto3" json:"bms_port_info,omitempty" yaml:"bms_port_info,omitempty"`
	EsxiPortInfo              *ESXIProperties      `protobuf:"bytes,13,opt,name=esxi_port_info,json=esxiPortInfo,proto3" json:"esxi_port_info,omitempty" yaml:"esxi_port_info,omitempty"`
	Label                     string               `protobuf:"bytes,14,opt,name=label,proto3" json:"label,omitempty" yaml:"label,omitempty"`
	PortGroupUUID             string               `protobuf:"bytes,15,opt,name=port_group_uuid,json=portGroupUuid,proto3" json:"port_group_uuid,omitempty" yaml:"port_group_uuid,omitempty"`
	TagRefs                   []*PortTagRef        `protobuf:"bytes,1016,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	PhysicalInterfaceBackRefs []*PhysicalInterface `protobuf:"bytes,3018,rep,name=physical_interface_back_refs,json=physicalInterfaceBackRefs,proto3" json:"physical_interface_back_refs,omitempty" yaml:"physical_interface_back_refs,omitempty"`
	PortGroupBackRefs         []*PortGroup         `protobuf:"bytes,3017,rep,name=port_group_back_refs,json=portGroupBackRefs,proto3" json:"port_group_back_refs,omitempty" yaml:"port_group_back_refs,omitempty"`
}

func (m *Port) Reset()      { *m = Port{} }
func (*Port) ProtoMessage() {}
func (*Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{237}
}
func (m *Port) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Port.Unmarshal(m, b)
}
func (m *Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Port.Marshal(b, m, deterministic)
}
func (m *Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Port.Merge(m, src)
}
func (m *Port) XXX_Size() int {
	return xxx_messageInfo_Port.Size(m)
}
func (m *Port) XXX_DiscardUnknown() {
	xxx_messageInfo_Port.DiscardUnknown(m)
}

var xxx_messageInfo_Port proto.InternalMessageInfo

func (m *Port) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Port) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *Port) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Port) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *Port) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Port) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *Port) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Port) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *Port) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *Port) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *Port) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Port) GetBMSPortInfo() *BaremetalPortInfo {
	if m != nil {
		return m.BMSPortInfo
	}
	return nil
}

func (m *Port) GetEsxiPortInfo() *ESXIProperties {
	if m != nil {
		return m.EsxiPortInfo
	}
	return nil
}

func (m *Port) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Port) GetPortGroupUUID() string {
	if m != nil {
		return m.PortGroupUUID
	}
	return ""
}

func (m *Port) GetTagRefs() []*PortTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *Port) GetPhysicalInterfaceBackRefs() []*PhysicalInterface {
	if m != nil {
		return m.PhysicalInterfaceBackRefs
	}
	return nil
}

func (m *Port) GetPortGroupBackRefs() []*PortGroup {
	if m != nil {
		return m.PortGroupBackRefs
	}
	return nil
}

type PortTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PortTagRef) Reset()      { *m = PortTagRef{} }
func (*PortTagRef) ProtoMessage() {}
func (*PortTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{238}
}
func (m *PortTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortTagRef.Unmarshal(m, b)
}
func (m *PortTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortTagRef.Marshal(b, m, deterministic)
}
func (m *PortTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortTagRef.Merge(m, src)
}
func (m *PortTagRef) XXX_Size() int {
	return xxx_messageInfo_PortTagRef.Size(m)
}
func (m *PortTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PortTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_PortTagRef proto.InternalMessageInfo

func (m *PortTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PortTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PortTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PortTuple struct {
	Annotations                     *KeyValuePairs                `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                         `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                        `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                      `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                        `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType                  `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                        `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                        `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                        `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                    `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                        `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	LogicalRouterRefs               []*PortTupleLogicalRouterRef  `protobuf:"bytes,1012,rep,name=logical_router_refs,json=logicalRouterRefs,proto3" json:"logical_router_refs,omitempty" yaml:"logical_router_refs,omitempty"`
	TagRefs                         []*PortTupleTagRef            `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualNetworkRefs              []*PortTupleVirtualNetworkRef `protobuf:"bytes,1014,rep,name=virtual_network_refs,json=virtualNetworkRefs,proto3" json:"virtual_network_refs,omitempty" yaml:"virtual_network_refs,omitempty"`
	VirtualMachineInterfaceBackRefs []*VirtualMachineInterface    `protobuf:"bytes,3015,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
}

func (m *PortTuple) Reset()      { *m = PortTuple{} }
func (*PortTuple) ProtoMessage() {}
func (*PortTuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{239}
}
func (m *PortTuple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortTuple.Unmarshal(m, b)
}
func (m *PortTuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortTuple.Marshal(b, m, deterministic)
}
func (m *PortTuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortTuple.Merge(m, src)
}
func (m *PortTuple) XXX_Size() int {
	return xxx_messageInfo_PortTuple.Size(m)
}
func (m *PortTuple) XXX_DiscardUnknown() {
	xxx_messageInfo_PortTuple.DiscardUnknown(m)
}

var xxx_messageInfo_PortTuple proto.InternalMessageInfo

func (m *PortTuple) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *PortTuple) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *PortTuple) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *PortTuple) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *PortTuple) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *PortTuple) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *PortTuple) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PortTuple) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *PortTuple) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *PortTuple) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *PortTuple) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PortTuple) GetLogicalRouterRefs() []*PortTupleLogicalRouterRef {
	if m != nil {
		return m.LogicalRouterRefs
	}
	return nil
}

func (m *PortTuple) GetTagRefs() []*PortTupleTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *PortTuple) GetVirtualNetworkRefs() []*PortTupleVirtualNetworkRef {
	if m != nil {
		return m.VirtualNetworkRefs
	}
	return nil
}

func (m *PortTuple) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

type PortTupleLogicalRouterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PortTupleLogicalRouterRef) Reset()      { *m = PortTupleLogicalRouterRef{} }
func (*PortTupleLogicalRouterRef) ProtoMessage() {}
func (*PortTupleLogicalRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{240}
}
func (m *PortTupleLogicalRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortTupleLogicalRouterRef.Unmarshal(m, b)
}
func (m *PortTupleLogicalRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortTupleLogicalRouterRef.Marshal(b, m, deterministic)
}
func (m *PortTupleLogicalRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortTupleLogicalRouterRef.Merge(m, src)
}
func (m *PortTupleLogicalRouterRef) XXX_Size() int {
	return xxx_messageInfo_PortTupleLogicalRouterRef.Size(m)
}
func (m *PortTupleLogicalRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PortTupleLogicalRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_PortTupleLogicalRouterRef proto.InternalMessageInfo

func (m *PortTupleLogicalRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PortTupleLogicalRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PortTupleLogicalRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PortTupleTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PortTupleTagRef) Reset()      { *m = PortTupleTagRef{} }
func (*PortTupleTagRef) ProtoMessage() {}
func (*PortTupleTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{241}
}
func (m *PortTupleTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortTupleTagRef.Unmarshal(m, b)
}
func (m *PortTupleTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortTupleTagRef.Marshal(b, m, deterministic)
}
func (m *PortTupleTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortTupleTagRef.Merge(m, src)
}
func (m *PortTupleTagRef) XXX_Size() int {
	return xxx_messageInfo_PortTupleTagRef.Size(m)
}
func (m *PortTupleTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PortTupleTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_PortTupleTagRef proto.InternalMessageInfo

func (m *PortTupleTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PortTupleTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PortTupleTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type PortTupleVirtualNetworkRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *PortTupleVirtualNetworkRef) Reset()      { *m = PortTupleVirtualNetworkRef{} }
func (*PortTupleVirtualNetworkRef) ProtoMessage() {}
func (*PortTupleVirtualNetworkRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{242}
}
func (m *PortTupleVirtualNetworkRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortTupleVirtualNetworkRef.Unmarshal(m, b)
}
func (m *PortTupleVirtualNetworkRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortTupleVirtualNetworkRef.Marshal(b, m, deterministic)
}
func (m *PortTupleVirtualNetworkRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortTupleVirtualNetworkRef.Merge(m, src)
}
func (m *PortTupleVirtualNetworkRef) XXX_Size() int {
	return xxx_messageInfo_PortTupleVirtualNetworkRef.Size(m)
}
func (m *PortTupleVirtualNetworkRef) XXX_DiscardUnknown() {
	xxx_messageInfo_PortTupleVirtualNetworkRef.DiscardUnknown(m)
}

var xxx_messageInfo_PortTupleVirtualNetworkRef proto.InternalMessageInfo

func (m *PortTupleVirtualNetworkRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *PortTupleVirtualNetworkRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PortTupleVirtualNetworkRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type Project struct {
	Annotations                *KeyValuePairs                    `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion       int64                             `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                string                            `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                     []string                          `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                       string                            `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                    *IdPermsType                      `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                       string                            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                 string                            `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                 string                            `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                     *PermType2                        `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                       string                            `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AlarmEnable                bool                              `protobuf:"varint,12,opt,name=alarm_enable,json=alarmEnable,proto3" json:"alarm_enable,omitempty" yaml:"alarm_enable,omitempty"`
	EnableSecurityPolicyDraft  bool                              `protobuf:"varint,13,opt,name=enable_security_policy_draft,json=enableSecurityPolicyDraft,proto3" json:"enable_security_policy_draft,omitempty" yaml:"enable_security_policy_draft,omitempty"`
	Quota                      *QuotaType                        `protobuf:"bytes,14,opt,name=quota,proto3" json:"quota,omitempty" yaml:"quota,omitempty"`
	VxlanRouting               bool                              `protobuf:"varint,15,opt,name=vxlan_routing,json=vxlanRouting,proto3" json:"vxlan_routing,omitempty" yaml:"vxlan_routing,omitempty"`
	AliasIPPoolRefs            []*ProjectAliasIPPoolRef          `protobuf:"bytes,1016,rep,name=alias_ip_pool_refs,json=aliasIpPoolRefs,proto3" json:"alias_ip_pool_refs,omitempty" yaml:"alias_ip_pool_refs,omitempty"`
	ApplicationPolicySetRefs   []*ProjectApplicationPolicySetRef `protobuf:"bytes,1017,rep,name=application_policy_set_refs,json=applicationPolicySetRefs,proto3" json:"application_policy_set_refs,omitempty" yaml:"application_policy_set_refs,omitempty"`
	FloatingIPPoolRefs         []*ProjectFloatingIPPoolRef       `protobuf:"bytes,1018,rep,name=floating_ip_pool_refs,json=floatingIpPoolRefs,proto3" json:"floating_ip_pool_refs,omitempty" yaml:"floating_ip_pool_refs,omitempty"`
	NamespaceRefs              []*ProjectNamespaceRef            `protobuf:"bytes,1019,rep,name=namespace_refs,json=namespaceRefs,proto3" json:"namespace_refs,omitempty" yaml:"namespace_refs,omitempty"`
	TagRefs                    []*ProjectTagRef                  `protobuf:"bytes,1020,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	AliasIPBackRefs            []*AliasIP                        `protobuf:"bytes,3060,rep,name=alias_ip_back_refs,json=aliasIpBackRefs,proto3" json:"alias_ip_back_refs,omitempty" yaml:"alias_ip_back_refs,omitempty"`
	FloatingIPBackRefs         []*FloatingIP                     `protobuf:"bytes,3061,rep,name=floating_ip_back_refs,json=floatingIpBackRefs,proto3" json:"floating_ip_back_refs,omitempty" yaml:"floating_ip_back_refs,omitempty"`
	AddressGroups              []*AddressGroup                   `protobuf:"bytes,2033,rep,name=address_groups,json=addressGroups,proto3" json:"address_groups,omitempty" yaml:"address_groups,omitempty"`
	Alarms                     []*Alarm                          `protobuf:"bytes,2027,rep,name=alarms,proto3" json:"alarms,omitempty" yaml:"alarms,omitempty"`
	APIAccessLists             []*APIAccessList                  `protobuf:"bytes,2034,rep,name=api_access_lists,json=apiAccessLists,proto3" json:"api_access_lists,omitempty" yaml:"api_access_lists,omitempty"`
	ApplicationPolicySets      []*ApplicationPolicySet           `protobuf:"bytes,2029,rep,name=application_policy_sets,json=applicationPolicySets,proto3" json:"application_policy_sets,omitempty" yaml:"application_policy_sets,omitempty"`
	BGPAsAServices             []*BGPAsAService                  `protobuf:"bytes,2041,rep,name=bgp_as_a_services,json=bgpAsAServices,proto3" json:"bgp_as_a_services,omitempty" yaml:"bgp_as_a_services,omitempty"`
	BGPVPNs                    []*BGPVPN                         `protobuf:"bytes,2045,rep,name=bgpvpns,proto3" json:"bgpvpns,omitempty" yaml:"bgpvpns,omitempty"`
	DeviceFunctionalGroups     []*DeviceFunctionalGroup          `protobuf:"bytes,2036,rep,name=device_functional_groups,json=deviceFunctionalGroups,proto3" json:"device_functional_groups,omitempty" yaml:"device_functional_groups,omitempty"`
	FirewallPolicys            []*FirewallPolicy                 `protobuf:"bytes,2042,rep,name=firewall_policys,json=firewallPolicys,proto3" json:"firewall_policys,omitempty" yaml:"firewall_policys,omitempty"`
	FirewallRules              []*FirewallRule                   `protobuf:"bytes,2050,rep,name=firewall_rules,json=firewallRules,proto3" json:"firewall_rules,omitempty" yaml:"firewall_rules,omitempty"`
	HostBasedServices          []*HostBasedService               `protobuf:"bytes,2056,rep,name=host_based_services,json=hostBasedServices,proto3" json:"host_based_services,omitempty" yaml:"host_based_services,omitempty"`
	InterfaceRouteTables       []*InterfaceRouteTable            `protobuf:"bytes,2030,rep,name=interface_route_tables,json=interfaceRouteTables,proto3" json:"interface_route_tables,omitempty" yaml:"interface_route_tables,omitempty"`
	Loadbalancers              []*Loadbalancer                   `protobuf:"bytes,2021,rep,name=loadbalancers,proto3" json:"loadbalancers,omitempty" yaml:"loadbalancers,omitempty"`
	LoadbalancerHealthmonitors []*LoadbalancerHealthmonitor      `protobuf:"bytes,2057,rep,name=loadbalancer_healthmonitors,json=loadbalancerHealthmonitors,proto3" json:"loadbalancer_healthmonitors,omitempty" yaml:"loadbalancer_healthmonitors,omitempty"`
	LoadbalancerListeners      []*LoadbalancerListener           `protobuf:"bytes,2028,rep,name=loadbalancer_listeners,json=loadbalancerListeners,proto3" json:"loadbalancer_listeners,omitempty" yaml:"loadbalancer_listeners,omitempty"`
	LoadbalancerPools          []*LoadbalancerPool               `protobuf:"bytes,2038,rep,name=loadbalancer_pools,json=loadbalancerPools,proto3" json:"loadbalancer_pools,omitempty" yaml:"loadbalancer_pools,omitempty"`
	LogicalRouters             []*LogicalRouter                  `protobuf:"bytes,2022,rep,name=logical_routers,json=logicalRouters,proto3" json:"logical_routers,omitempty" yaml:"logical_routers,omitempty"`
	MulticastPolicys           []*MulticastPolicy                `protobuf:"bytes,2052,rep,name=multicast_policys,json=multicastPolicys,proto3" json:"multicast_policys,omitempty" yaml:"multicast_policys,omitempty"`
	NetworkIpams               []*NetworkIpam                    `protobuf:"bytes,2039,rep,name=network_ipams,json=networkIpams,proto3" json:"network_ipams,omitempty" yaml:"network_ipams,omitempty"`
	NetworkPolicys             []*NetworkPolicy                  `protobuf:"bytes,2053,rep,name=network_policys,json=networkPolicys,proto3" json:"network_policys,omitempty" yaml:"network_policys,omitempty"`
	PolicyManagements          []*PolicyManagement               `protobuf:"bytes,2037,rep,name=policy_managements,json=policyManagements,proto3" json:"policy_managements,omitempty" yaml:"policy_managements,omitempty"`
	PortProfiles               []*PortProfile                    `protobuf:"bytes,2051,rep,name=port_profiles,json=portProfiles,proto3" json:"port_profiles,omitempty" yaml:"port_profiles,omitempty"`
	QosConfigs                 []*QosConfig                      `protobuf:"bytes,2054,rep,name=qos_configs,json=qosConfigs,proto3" json:"qos_configs,omitempty" yaml:"qos_configs,omitempty"`
	RouteAggregates            []*RouteAggregate                 `protobuf:"bytes,2031,rep,name=route_aggregates,json=routeAggregates,proto3" json:"route_aggregates,omitempty" yaml:"route_aggregates,omitempty"`
	RouteTables                []*RouteTable                     `protobuf:"bytes,2023,rep,name=route_tables,json=routeTables,proto3" json:"route_tables,omitempty" yaml:"route_tables,omitempty"`
	RoutingPolicys             []*RoutingPolicy                  `protobuf:"bytes,2046,rep,name=routing_policys,json=routingPolicys,proto3" json:"routing_policys,omitempty" yaml:"routing_policys,omitempty"`
	SecurityGroups             []*SecurityGroup                  `protobuf:"bytes,2024,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty" yaml:"security_groups,omitempty"`
	SecurityLoggingObjects     []*SecurityLoggingObject          `protobuf:"bytes,2032,rep,name=security_logging_objects,json=securityLoggingObjects,proto3" json:"security_logging_objects,omitempty" yaml:"security_logging_objects,omitempty"`
	ServiceGroups              []*ServiceGroup                   `protobuf:"bytes,2025,rep,name=service_groups,json=serviceGroups,proto3" json:"service_groups,omitempty" yaml:"service_groups,omitempty"`
	ServiceHealthChecks        []*ServiceHealthCheck             `protobuf:"bytes,2047,rep,name=service_health_checks,json=serviceHealthChecks,proto3" json:"service_health_checks,omitempty" yaml:"service_health_checks,omitempty"`
	ServiceInstances           []*ServiceInstance                `protobuf:"bytes,2058,rep,name=service_instances,json=serviceInstances,proto3" json:"service_instances,omitempty" yaml:"service_instances,omitempty"`
	SflowProfiles              []*SflowProfile                   `protobuf:"bytes,2040,rep,name=sflow_profiles,json=sflowProfiles,proto3" json:"sflow_profiles,omitempty" yaml:"sflow_profiles,omitempty"`
	StormControlProfiles       []*StormControlProfile            `protobuf:"bytes,2048,rep,name=storm_control_profiles,json=stormControlProfiles,proto3" json:"storm_control_profiles,omitempty" yaml:"storm_control_profiles,omitempty"`
	StructuredSyslogConfigs    []*StructuredSyslogConfig         `protobuf:"bytes,2055,rep,name=structured_syslog_configs,json=structuredSyslogConfigs,proto3" json:"structured_syslog_configs,omitempty" yaml:"structured_syslog_configs,omitempty"`
	Tags                       []*Tag                            `protobuf:"bytes,2043,rep,name=tags,proto3" json:"tags,omitempty" yaml:"tags,omitempty"`
	TelemetryProfiles          []*TelemetryProfile               `protobuf:"bytes,2035,rep,name=telemetry_profiles,json=telemetryProfiles,proto3" json:"telemetry_profiles,omitempty" yaml:"telemetry_profiles,omitempty"`
	VirtualIPs                 []*VirtualIP                      `protobuf:"bytes,2049,rep,name=virtual_ips,json=virtualIps,proto3" json:"virtual_ips,omitempty" yaml:"virtual_ips,omitempty"`
	VirtualMachineInterfaces   []*VirtualMachineInterface        `protobuf:"bytes,2059,rep,name=virtual_machine_interfaces,json=virtualMachineInterfaces,proto3" json:"virtual_machine_interfaces,omitempty" yaml:"virtual_machine_interfaces,omitempty"`
	VirtualNetworks            []*VirtualNetwork                 `protobuf:"bytes,2026,rep,name=virtual_networks,json=virtualNetworks,proto3" json:"virtual_networks,omitempty" yaml:"virtual_networks,omitempty"`
	VirtualPortGroups          []*VirtualPortGroup               `protobuf:"bytes,2044,rep,name=virtual_port_groups,json=virtualPortGroups,proto3" json:"virtual_port_groups,omitempty" yaml:"virtual_port_groups,omitempty"`
}

func (m *Project) Reset()      { *m = Project{} }
func (*Project) ProtoMessage() {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{243}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Project.Unmarshal(m, b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Project.Marshal(b, m, deterministic)
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return xxx_messageInfo_Project.Size(m)
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Project) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *Project) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Project) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *Project) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Project) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *Project) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *Project) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *Project) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Project) GetAlarmEnable() bool {
	if m != nil {
		return m.AlarmEnable
	}
	return false
}

func (m *Project) GetEnableSecurityPolicyDraft() bool {
	if m != nil {
		return m.EnableSecurityPolicyDraft
	}
	return false
}

func (m *Project) GetQuota() *QuotaType {
	if m != nil {
		return m.Quota
	}
	return nil
}

func (m *Project) GetVxlanRouting() bool {
	if m != nil {
		return m.VxlanRouting
	}
	return false
}

func (m *Project) GetAliasIPPoolRefs() []*ProjectAliasIPPoolRef {
	if m != nil {
		return m.AliasIPPoolRefs
	}
	return nil
}

func (m *Project) GetApplicationPolicySetRefs() []*ProjectApplicationPolicySetRef {
	if m != nil {
		return m.ApplicationPolicySetRefs
	}
	return nil
}

func (m *Project) GetFloatingIPPoolRefs() []*ProjectFloatingIPPoolRef {
	if m != nil {
		return m.FloatingIPPoolRefs
	}
	return nil
}

func (m *Project) GetNamespaceRefs() []*ProjectNamespaceRef {
	if m != nil {
		return m.NamespaceRefs
	}
	return nil
}

func (m *Project) GetTagRefs() []*ProjectTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *Project) GetAliasIPBackRefs() []*AliasIP {
	if m != nil {
		return m.AliasIPBackRefs
	}
	return nil
}

func (m *Project) GetFloatingIPBackRefs() []*FloatingIP {
	if m != nil {
		return m.FloatingIPBackRefs
	}
	return nil
}

func (m *Project) GetAddressGroups() []*AddressGroup {
	if m != nil {
		return m.AddressGroups
	}
	return nil
}

func (m *Project) GetAlarms() []*Alarm {
	if m != nil {
		return m.Alarms
	}
	return nil
}

func (m *Project) GetAPIAccessLists() []*APIAccessList {
	if m != nil {
		return m.APIAccessLists
	}
	return nil
}

func (m *Project) GetApplicationPolicySets() []*ApplicationPolicySet {
	if m != nil {
		return m.ApplicationPolicySets
	}
	return nil
}

func (m *Project) GetBGPAsAServices() []*BGPAsAService {
	if m != nil {
		return m.BGPAsAServices
	}
	return nil
}

func (m *Project) GetBGPVPNs() []*BGPVPN {
	if m != nil {
		return m.BGPVPNs
	}
	return nil
}

func (m *Project) GetDeviceFunctionalGroups() []*DeviceFunctionalGroup {
	if m != nil {
		return m.DeviceFunctionalGroups
	}
	return nil
}

func (m *Project) GetFirewallPolicys() []*FirewallPolicy {
	if m != nil {
		return m.FirewallPolicys
	}
	return nil
}

func (m *Project) GetFirewallRules() []*FirewallRule {
	if m != nil {
		return m.FirewallRules
	}
	return nil
}

func (m *Project) GetHostBasedServices() []*HostBasedService {
	if m != nil {
		return m.HostBasedServices
	}
	return nil
}

func (m *Project) GetInterfaceRouteTables() []*InterfaceRouteTable {
	if m != nil {
		return m.InterfaceRouteTables
	}
	return nil
}

func (m *Project) GetLoadbalancers() []*Loadbalancer {
	if m != nil {
		return m.Loadbalancers
	}
	return nil
}

func (m *Project) GetLoadbalancerHealthmonitors() []*LoadbalancerHealthmonitor {
	if m != nil {
		return m.LoadbalancerHealthmonitors
	}
	return nil
}

func (m *Project) GetLoadbalancerListeners() []*LoadbalancerListener {
	if m != nil {
		return m.LoadbalancerListeners
	}
	return nil
}

func (m *Project) GetLoadbalancerPools() []*LoadbalancerPool {
	if m != nil {
		return m.LoadbalancerPools
	}
	return nil
}

func (m *Project) GetLogicalRouters() []*LogicalRouter {
	if m != nil {
		return m.LogicalRouters
	}
	return nil
}

func (m *Project) GetMulticastPolicys() []*MulticastPolicy {
	if m != nil {
		return m.MulticastPolicys
	}
	return nil
}

func (m *Project) GetNetworkIpams() []*NetworkIpam {
	if m != nil {
		return m.NetworkIpams
	}
	return nil
}

func (m *Project) GetNetworkPolicys() []*NetworkPolicy {
	if m != nil {
		return m.NetworkPolicys
	}
	return nil
}

func (m *Project) GetPolicyManagements() []*PolicyManagement {
	if m != nil {
		return m.PolicyManagements
	}
	return nil
}

func (m *Project) GetPortProfiles() []*PortProfile {
	if m != nil {
		return m.PortProfiles
	}
	return nil
}

func (m *Project) GetQosConfigs() []*QosConfig {
	if m != nil {
		return m.QosConfigs
	}
	return nil
}

func (m *Project) GetRouteAggregates() []*RouteAggregate {
	if m != nil {
		return m.RouteAggregates
	}
	return nil
}

func (m *Project) GetRouteTables() []*RouteTable {
	if m != nil {
		return m.RouteTables
	}
	return nil
}

func (m *Project) GetRoutingPolicys() []*RoutingPolicy {
	if m != nil {
		return m.RoutingPolicys
	}
	return nil
}

func (m *Project) GetSecurityGroups() []*SecurityGroup {
	if m != nil {
		return m.SecurityGroups
	}
	return nil
}

func (m *Project) GetSecurityLoggingObjects() []*SecurityLoggingObject {
	if m != nil {
		return m.SecurityLoggingObjects
	}
	return nil
}

func (m *Project) GetServiceGroups() []*ServiceGroup {
	if m != nil {
		return m.ServiceGroups
	}
	return nil
}

func (m *Project) GetServiceHealthChecks() []*ServiceHealthCheck {
	if m != nil {
		return m.ServiceHealthChecks
	}
	return nil
}

func (m *Project) GetServiceInstances() []*ServiceInstance {
	if m != nil {
		return m.ServiceInstances
	}
	return nil
}

func (m *Project) GetSflowProfiles() []*SflowProfile {
	if m != nil {
		return m.SflowProfiles
	}
	return nil
}

func (m *Project) GetStormControlProfiles() []*StormControlProfile {
	if m != nil {
		return m.StormControlProfiles
	}
	return nil
}

func (m *Project) GetStructuredSyslogConfigs() []*StructuredSyslogConfig {
	if m != nil {
		return m.StructuredSyslogConfigs
	}
	return nil
}

func (m *Project) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Project) GetTelemetryProfiles() []*TelemetryProfile {
	if m != nil {
		return m.TelemetryProfiles
	}
	return nil
}

func (m *Project) GetVirtualIPs() []*VirtualIP {
	if m != nil {
		return m.VirtualIPs
	}
	return nil
}

func (m *Project) GetVirtualMachineInterfaces() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaces
	}
	return nil
}

func (m *Project) GetVirtualNetworks() []*VirtualNetwork {
	if m != nil {
		return m.VirtualNetworks
	}
	return nil
}

func (m *Project) GetVirtualPortGroups() []*VirtualPortGroup {
	if m != nil {
		return m.VirtualPortGroups
	}
	return nil
}

type ProjectAliasIPPoolRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ProjectAliasIPPoolRef) Reset()      { *m = ProjectAliasIPPoolRef{} }
func (*ProjectAliasIPPoolRef) ProtoMessage() {}
func (*ProjectAliasIPPoolRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{244}
}
func (m *ProjectAliasIPPoolRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectAliasIPPoolRef.Unmarshal(m, b)
}
func (m *ProjectAliasIPPoolRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectAliasIPPoolRef.Marshal(b, m, deterministic)
}
func (m *ProjectAliasIPPoolRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectAliasIPPoolRef.Merge(m, src)
}
func (m *ProjectAliasIPPoolRef) XXX_Size() int {
	return xxx_messageInfo_ProjectAliasIPPoolRef.Size(m)
}
func (m *ProjectAliasIPPoolRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectAliasIPPoolRef.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectAliasIPPoolRef proto.InternalMessageInfo

func (m *ProjectAliasIPPoolRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ProjectAliasIPPoolRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ProjectAliasIPPoolRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ProjectApplicationPolicySetRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ProjectApplicationPolicySetRef) Reset()      { *m = ProjectApplicationPolicySetRef{} }
func (*ProjectApplicationPolicySetRef) ProtoMessage() {}
func (*ProjectApplicationPolicySetRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{245}
}
func (m *ProjectApplicationPolicySetRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectApplicationPolicySetRef.Unmarshal(m, b)
}
func (m *ProjectApplicationPolicySetRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectApplicationPolicySetRef.Marshal(b, m, deterministic)
}
func (m *ProjectApplicationPolicySetRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectApplicationPolicySetRef.Merge(m, src)
}
func (m *ProjectApplicationPolicySetRef) XXX_Size() int {
	return xxx_messageInfo_ProjectApplicationPolicySetRef.Size(m)
}
func (m *ProjectApplicationPolicySetRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectApplicationPolicySetRef.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectApplicationPolicySetRef proto.InternalMessageInfo

func (m *ProjectApplicationPolicySetRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ProjectApplicationPolicySetRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ProjectApplicationPolicySetRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ProjectFloatingIPPoolRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ProjectFloatingIPPoolRef) Reset()      { *m = ProjectFloatingIPPoolRef{} }
func (*ProjectFloatingIPPoolRef) ProtoMessage() {}
func (*ProjectFloatingIPPoolRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{246}
}
func (m *ProjectFloatingIPPoolRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectFloatingIPPoolRef.Unmarshal(m, b)
}
func (m *ProjectFloatingIPPoolRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectFloatingIPPoolRef.Marshal(b, m, deterministic)
}
func (m *ProjectFloatingIPPoolRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectFloatingIPPoolRef.Merge(m, src)
}
func (m *ProjectFloatingIPPoolRef) XXX_Size() int {
	return xxx_messageInfo_ProjectFloatingIPPoolRef.Size(m)
}
func (m *ProjectFloatingIPPoolRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectFloatingIPPoolRef.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectFloatingIPPoolRef proto.InternalMessageInfo

func (m *ProjectFloatingIPPoolRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ProjectFloatingIPPoolRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ProjectFloatingIPPoolRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ProjectNamespaceRef struct {
	UUID string      `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string    `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string      `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *SubnetType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *ProjectNamespaceRef) Reset()      { *m = ProjectNamespaceRef{} }
func (*ProjectNamespaceRef) ProtoMessage() {}
func (*ProjectNamespaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{247}
}
func (m *ProjectNamespaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectNamespaceRef.Unmarshal(m, b)
}
func (m *ProjectNamespaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectNamespaceRef.Marshal(b, m, deterministic)
}
func (m *ProjectNamespaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectNamespaceRef.Merge(m, src)
}
func (m *ProjectNamespaceRef) XXX_Size() int {
	return xxx_messageInfo_ProjectNamespaceRef.Size(m)
}
func (m *ProjectNamespaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectNamespaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectNamespaceRef proto.InternalMessageInfo

func (m *ProjectNamespaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ProjectNamespaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ProjectNamespaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ProjectNamespaceRef) GetAttr() *SubnetType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type ProjectTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ProjectTagRef) Reset()      { *m = ProjectTagRef{} }
func (*ProjectTagRef) ProtoMessage() {}
func (*ProjectTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{248}
}
func (m *ProjectTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProjectTagRef.Unmarshal(m, b)
}
func (m *ProjectTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProjectTagRef.Marshal(b, m, deterministic)
}
func (m *ProjectTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectTagRef.Merge(m, src)
}
func (m *ProjectTagRef) XXX_Size() int {
	return xxx_messageInfo_ProjectTagRef.Size(m)
}
func (m *ProjectTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectTagRef proto.InternalMessageInfo

func (m *ProjectTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ProjectTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ProjectTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ProviderAttachment struct {
	Annotations          *KeyValuePairs                        `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                                 `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string                                `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string                              `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string                                `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType                          `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string                                `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string                                `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string                                `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2                            `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string                                `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TagRefs              []*ProviderAttachmentTagRef           `protobuf:"bytes,1012,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualRouterRefs    []*ProviderAttachmentVirtualRouterRef `protobuf:"bytes,1013,rep,name=virtual_router_refs,json=virtualRouterRefs,proto3" json:"virtual_router_refs,omitempty" yaml:"virtual_router_refs,omitempty"`
}

func (m *ProviderAttachment) Reset()      { *m = ProviderAttachment{} }
func (*ProviderAttachment) ProtoMessage() {}
func (*ProviderAttachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{249}
}
func (m *ProviderAttachment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProviderAttachment.Unmarshal(m, b)
}
func (m *ProviderAttachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProviderAttachment.Marshal(b, m, deterministic)
}
func (m *ProviderAttachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderAttachment.Merge(m, src)
}
func (m *ProviderAttachment) XXX_Size() int {
	return xxx_messageInfo_ProviderAttachment.Size(m)
}
func (m *ProviderAttachment) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderAttachment.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderAttachment proto.InternalMessageInfo

func (m *ProviderAttachment) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ProviderAttachment) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ProviderAttachment) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ProviderAttachment) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ProviderAttachment) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ProviderAttachment) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ProviderAttachment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProviderAttachment) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ProviderAttachment) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ProviderAttachment) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ProviderAttachment) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ProviderAttachment) GetTagRefs() []*ProviderAttachmentTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *ProviderAttachment) GetVirtualRouterRefs() []*ProviderAttachmentVirtualRouterRef {
	if m != nil {
		return m.VirtualRouterRefs
	}
	return nil
}

type ProviderAttachmentTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ProviderAttachmentTagRef) Reset()      { *m = ProviderAttachmentTagRef{} }
func (*ProviderAttachmentTagRef) ProtoMessage() {}
func (*ProviderAttachmentTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{250}
}
func (m *ProviderAttachmentTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProviderAttachmentTagRef.Unmarshal(m, b)
}
func (m *ProviderAttachmentTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProviderAttachmentTagRef.Marshal(b, m, deterministic)
}
func (m *ProviderAttachmentTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderAttachmentTagRef.Merge(m, src)
}
func (m *ProviderAttachmentTagRef) XXX_Size() int {
	return xxx_messageInfo_ProviderAttachmentTagRef.Size(m)
}
func (m *ProviderAttachmentTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderAttachmentTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderAttachmentTagRef proto.InternalMessageInfo

func (m *ProviderAttachmentTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ProviderAttachmentTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ProviderAttachmentTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ProviderAttachmentVirtualRouterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ProviderAttachmentVirtualRouterRef) Reset()      { *m = ProviderAttachmentVirtualRouterRef{} }
func (*ProviderAttachmentVirtualRouterRef) ProtoMessage() {}
func (*ProviderAttachmentVirtualRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{251}
}
func (m *ProviderAttachmentVirtualRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProviderAttachmentVirtualRouterRef.Unmarshal(m, b)
}
func (m *ProviderAttachmentVirtualRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProviderAttachmentVirtualRouterRef.Marshal(b, m, deterministic)
}
func (m *ProviderAttachmentVirtualRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderAttachmentVirtualRouterRef.Merge(m, src)
}
func (m *ProviderAttachmentVirtualRouterRef) XXX_Size() int {
	return xxx_messageInfo_ProviderAttachmentVirtualRouterRef.Size(m)
}
func (m *ProviderAttachmentVirtualRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderAttachmentVirtualRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderAttachmentVirtualRouterRef proto.InternalMessageInfo

func (m *ProviderAttachmentVirtualRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ProviderAttachmentVirtualRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ProviderAttachmentVirtualRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type QosConfig struct {
	Annotations                     *KeyValuePairs                    `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                             `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                            `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                          `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                            `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType                      `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                            `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                            `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                        `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                            `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	DefaultForwardingClassID        int64                             `protobuf:"varint,12,opt,name=default_forwarding_class_id,json=defaultForwardingClassId,proto3" json:"default_forwarding_class_id,omitempty" yaml:"default_forwarding_class_id,omitempty"`
	DSCPEntries                     *QosIdForwardingClassPairs        `protobuf:"bytes,13,opt,name=dscp_entries,json=dscpEntries,proto3" json:"dscp_entries,omitempty" yaml:"dscp_entries,omitempty"`
	MPLSExpEntries                  *QosIdForwardingClassPairs        `protobuf:"bytes,14,opt,name=mpls_exp_entries,json=mplsExpEntries,proto3" json:"mpls_exp_entries,omitempty" yaml:"mpls_exp_entries,omitempty"`
	QosConfigType                   string                            `protobuf:"bytes,15,opt,name=qos_config_type,json=qosConfigType,proto3" json:"qos_config_type,omitempty" yaml:"qos_config_type,omitempty"`
	VlanPriorityEntries             *QosIdForwardingClassPairs        `protobuf:"bytes,16,opt,name=vlan_priority_entries,json=vlanPriorityEntries,proto3" json:"vlan_priority_entries,omitempty" yaml:"vlan_priority_entries,omitempty"`
	GlobalSystemConfigRefs          []*QosConfigGlobalSystemConfigRef `protobuf:"bytes,1017,rep,name=global_system_config_refs,json=globalSystemConfigRefs,proto3" json:"global_system_config_refs,omitempty" yaml:"global_system_config_refs,omitempty"`
	TagRefs                         []*QosConfigTagRef                `protobuf:"bytes,1018,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceBackRefs []*VirtualMachineInterface        `protobuf:"bytes,3019,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
	VirtualNetworkBackRefs          []*VirtualNetwork                 `protobuf:"bytes,3020,rep,name=virtual_network_back_refs,json=virtualNetworkBackRefs,proto3" json:"virtual_network_back_refs,omitempty" yaml:"virtual_network_back_refs,omitempty"`
}

func (m *QosConfig) Reset()      { *m = QosConfig{} }
func (*QosConfig) ProtoMessage() {}
func (*QosConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{252}
}
func (m *QosConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QosConfig.Unmarshal(m, b)
}
func (m *QosConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QosConfig.Marshal(b, m, deterministic)
}
func (m *QosConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QosConfig.Merge(m, src)
}
func (m *QosConfig) XXX_Size() int {
	return xxx_messageInfo_QosConfig.Size(m)
}
func (m *QosConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_QosConfig.DiscardUnknown(m)
}

var xxx_messageInfo_QosConfig proto.InternalMessageInfo

func (m *QosConfig) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *QosConfig) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *QosConfig) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *QosConfig) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *QosConfig) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *QosConfig) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *QosConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QosConfig) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *QosConfig) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *QosConfig) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *QosConfig) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *QosConfig) GetDefaultForwardingClassID() int64 {
	if m != nil {
		return m.DefaultForwardingClassID
	}
	return 0
}

func (m *QosConfig) GetDSCPEntries() *QosIdForwardingClassPairs {
	if m != nil {
		return m.DSCPEntries
	}
	return nil
}

func (m *QosConfig) GetMPLSExpEntries() *QosIdForwardingClassPairs {
	if m != nil {
		return m.MPLSExpEntries
	}
	return nil
}

func (m *QosConfig) GetQosConfigType() string {
	if m != nil {
		return m.QosConfigType
	}
	return ""
}

func (m *QosConfig) GetVlanPriorityEntries() *QosIdForwardingClassPairs {
	if m != nil {
		return m.VlanPriorityEntries
	}
	return nil
}

func (m *QosConfig) GetGlobalSystemConfigRefs() []*QosConfigGlobalSystemConfigRef {
	if m != nil {
		return m.GlobalSystemConfigRefs
	}
	return nil
}

func (m *QosConfig) GetTagRefs() []*QosConfigTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *QosConfig) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

func (m *QosConfig) GetVirtualNetworkBackRefs() []*VirtualNetwork {
	if m != nil {
		return m.VirtualNetworkBackRefs
	}
	return nil
}

type QosConfigGlobalSystemConfigRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *QosConfigGlobalSystemConfigRef) Reset()      { *m = QosConfigGlobalSystemConfigRef{} }
func (*QosConfigGlobalSystemConfigRef) ProtoMessage() {}
func (*QosConfigGlobalSystemConfigRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{253}
}
func (m *QosConfigGlobalSystemConfigRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QosConfigGlobalSystemConfigRef.Unmarshal(m, b)
}
func (m *QosConfigGlobalSystemConfigRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QosConfigGlobalSystemConfigRef.Marshal(b, m, deterministic)
}
func (m *QosConfigGlobalSystemConfigRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QosConfigGlobalSystemConfigRef.Merge(m, src)
}
func (m *QosConfigGlobalSystemConfigRef) XXX_Size() int {
	return xxx_messageInfo_QosConfigGlobalSystemConfigRef.Size(m)
}
func (m *QosConfigGlobalSystemConfigRef) XXX_DiscardUnknown() {
	xxx_messageInfo_QosConfigGlobalSystemConfigRef.DiscardUnknown(m)
}

var xxx_messageInfo_QosConfigGlobalSystemConfigRef proto.InternalMessageInfo

func (m *QosConfigGlobalSystemConfigRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *QosConfigGlobalSystemConfigRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *QosConfigGlobalSystemConfigRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type QosConfigTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *QosConfigTagRef) Reset()      { *m = QosConfigTagRef{} }
func (*QosConfigTagRef) ProtoMessage() {}
func (*QosConfigTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{254}
}
func (m *QosConfigTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QosConfigTagRef.Unmarshal(m, b)
}
func (m *QosConfigTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QosConfigTagRef.Marshal(b, m, deterministic)
}
func (m *QosConfigTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QosConfigTagRef.Merge(m, src)
}
func (m *QosConfigTagRef) XXX_Size() int {
	return xxx_messageInfo_QosConfigTagRef.Size(m)
}
func (m *QosConfigTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_QosConfigTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_QosConfigTagRef proto.InternalMessageInfo

func (m *QosConfigTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *QosConfigTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *QosConfigTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type QosQueue struct {
	Annotations             *KeyValuePairs     `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion    int64              `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName             string             `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                  []string           `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                    string             `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                 *IdPermsType       `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                    string             `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType              string             `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID              string             `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                  *PermType2         `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                    string             `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	MaxBandwidth            int64              `protobuf:"varint,12,opt,name=max_bandwidth,json=maxBandwidth,proto3" json:"max_bandwidth,omitempty" yaml:"max_bandwidth,omitempty"`
	MinBandwidth            int64              `protobuf:"varint,13,opt,name=min_bandwidth,json=minBandwidth,proto3" json:"min_bandwidth,omitempty" yaml:"min_bandwidth,omitempty"`
	QosQueueIdentifier      int64              `protobuf:"varint,14,opt,name=qos_queue_identifier,json=qosQueueIdentifier,proto3" json:"qos_queue_identifier,omitempty" yaml:"qos_queue_identifier,omitempty"`
	TagRefs                 []*QosQueueTagRef  `protobuf:"bytes,1015,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	ForwardingClassBackRefs []*ForwardingClass `protobuf:"bytes,3016,rep,name=forwarding_class_back_refs,json=forwardingClassBackRefs,proto3" json:"forwarding_class_back_refs,omitempty" yaml:"forwarding_class_back_refs,omitempty"`
}

func (m *QosQueue) Reset()      { *m = QosQueue{} }
func (*QosQueue) ProtoMessage() {}
func (*QosQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{255}
}
func (m *QosQueue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QosQueue.Unmarshal(m, b)
}
func (m *QosQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QosQueue.Marshal(b, m, deterministic)
}
func (m *QosQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QosQueue.Merge(m, src)
}
func (m *QosQueue) XXX_Size() int {
	return xxx_messageInfo_QosQueue.Size(m)
}
func (m *QosQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_QosQueue.DiscardUnknown(m)
}

var xxx_messageInfo_QosQueue proto.InternalMessageInfo

func (m *QosQueue) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *QosQueue) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *QosQueue) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *QosQueue) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *QosQueue) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *QosQueue) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *QosQueue) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QosQueue) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *QosQueue) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *QosQueue) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *QosQueue) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *QosQueue) GetMaxBandwidth() int64 {
	if m != nil {
		return m.MaxBandwidth
	}
	return 0
}

func (m *QosQueue) GetMinBandwidth() int64 {
	if m != nil {
		return m.MinBandwidth
	}
	return 0
}

func (m *QosQueue) GetQosQueueIdentifier() int64 {
	if m != nil {
		return m.QosQueueIdentifier
	}
	return 0
}

func (m *QosQueue) GetTagRefs() []*QosQueueTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *QosQueue) GetForwardingClassBackRefs() []*ForwardingClass {
	if m != nil {
		return m.ForwardingClassBackRefs
	}
	return nil
}

type QosQueueTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *QosQueueTagRef) Reset()      { *m = QosQueueTagRef{} }
func (*QosQueueTagRef) ProtoMessage() {}
func (*QosQueueTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{256}
}
func (m *QosQueueTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QosQueueTagRef.Unmarshal(m, b)
}
func (m *QosQueueTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QosQueueTagRef.Marshal(b, m, deterministic)
}
func (m *QosQueueTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QosQueueTagRef.Merge(m, src)
}
func (m *QosQueueTagRef) XXX_Size() int {
	return xxx_messageInfo_QosQueueTagRef.Size(m)
}
func (m *QosQueueTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_QosQueueTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_QosQueueTagRef proto.InternalMessageInfo

func (m *QosQueueTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *QosQueueTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *QosQueueTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type RoleConfig struct {
	Annotations          *KeyValuePairs      `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64               `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string              `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string            `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string              `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType        `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string              `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string              `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2          `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string              `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	RoleConfigConfig     string              `protobuf:"bytes,12,opt,name=role_config_config,json=roleConfigConfig,proto3" json:"role_config_config,omitempty" yaml:"role_config_config,omitempty"`
	TagRefs              []*RoleConfigTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *RoleConfig) Reset()      { *m = RoleConfig{} }
func (*RoleConfig) ProtoMessage() {}
func (*RoleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{257}
}
func (m *RoleConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleConfig.Unmarshal(m, b)
}
func (m *RoleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleConfig.Marshal(b, m, deterministic)
}
func (m *RoleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleConfig.Merge(m, src)
}
func (m *RoleConfig) XXX_Size() int {
	return xxx_messageInfo_RoleConfig.Size(m)
}
func (m *RoleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RoleConfig proto.InternalMessageInfo

func (m *RoleConfig) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *RoleConfig) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *RoleConfig) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *RoleConfig) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *RoleConfig) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *RoleConfig) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *RoleConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoleConfig) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *RoleConfig) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *RoleConfig) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *RoleConfig) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoleConfig) GetRoleConfigConfig() string {
	if m != nil {
		return m.RoleConfigConfig
	}
	return ""
}

func (m *RoleConfig) GetTagRefs() []*RoleConfigTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type RoleConfigTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *RoleConfigTagRef) Reset()      { *m = RoleConfigTagRef{} }
func (*RoleConfigTagRef) ProtoMessage() {}
func (*RoleConfigTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{258}
}
func (m *RoleConfigTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleConfigTagRef.Unmarshal(m, b)
}
func (m *RoleConfigTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleConfigTagRef.Marshal(b, m, deterministic)
}
func (m *RoleConfigTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleConfigTagRef.Merge(m, src)
}
func (m *RoleConfigTagRef) XXX_Size() int {
	return xxx_messageInfo_RoleConfigTagRef.Size(m)
}
func (m *RoleConfigTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleConfigTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_RoleConfigTagRef proto.InternalMessageInfo

func (m *RoleConfigTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoleConfigTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RoleConfigTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type RoleDefinition struct {
	Annotations          *KeyValuePairs                   `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                            `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string                           `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string                         `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string                           `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType                     `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string                           `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string                           `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string                           `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2                       `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string                           `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	FeatureRefs          []*RoleDefinitionFeatureRef      `protobuf:"bytes,1012,rep,name=feature_refs,json=featureRefs,proto3" json:"feature_refs,omitempty" yaml:"feature_refs,omitempty"`
	OverlayRoleRefs      []*RoleDefinitionOverlayRoleRef  `protobuf:"bytes,1013,rep,name=overlay_role_refs,json=overlayRoleRefs,proto3" json:"overlay_role_refs,omitempty" yaml:"overlay_role_refs,omitempty"`
	PhysicalRoleRefs     []*RoleDefinitionPhysicalRoleRef `protobuf:"bytes,1014,rep,name=physical_role_refs,json=physicalRoleRefs,proto3" json:"physical_role_refs,omitempty" yaml:"physical_role_refs,omitempty"`
	TagRefs              []*RoleDefinitionTagRef          `protobuf:"bytes,1015,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	NodeProfileBackRefs  []*NodeProfile                   `protobuf:"bytes,3017,rep,name=node_profile_back_refs,json=nodeProfileBackRefs,proto3" json:"node_profile_back_refs,omitempty" yaml:"node_profile_back_refs,omitempty"`
	FeatureConfigs       []*FeatureConfig                 `protobuf:"bytes,2016,rep,name=feature_configs,json=featureConfigs,proto3" json:"feature_configs,omitempty" yaml:"feature_configs,omitempty"`
}

func (m *RoleDefinition) Reset()      { *m = RoleDefinition{} }
func (*RoleDefinition) ProtoMessage() {}
func (*RoleDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{259}
}
func (m *RoleDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleDefinition.Unmarshal(m, b)
}
func (m *RoleDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleDefinition.Marshal(b, m, deterministic)
}
func (m *RoleDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleDefinition.Merge(m, src)
}
func (m *RoleDefinition) XXX_Size() int {
	return xxx_messageInfo_RoleDefinition.Size(m)
}
func (m *RoleDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_RoleDefinition proto.InternalMessageInfo

func (m *RoleDefinition) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *RoleDefinition) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *RoleDefinition) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *RoleDefinition) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *RoleDefinition) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *RoleDefinition) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *RoleDefinition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoleDefinition) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *RoleDefinition) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *RoleDefinition) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *RoleDefinition) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoleDefinition) GetFeatureRefs() []*RoleDefinitionFeatureRef {
	if m != nil {
		return m.FeatureRefs
	}
	return nil
}

func (m *RoleDefinition) GetOverlayRoleRefs() []*RoleDefinitionOverlayRoleRef {
	if m != nil {
		return m.OverlayRoleRefs
	}
	return nil
}

func (m *RoleDefinition) GetPhysicalRoleRefs() []*RoleDefinitionPhysicalRoleRef {
	if m != nil {
		return m.PhysicalRoleRefs
	}
	return nil
}

func (m *RoleDefinition) GetTagRefs() []*RoleDefinitionTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *RoleDefinition) GetNodeProfileBackRefs() []*NodeProfile {
	if m != nil {
		return m.NodeProfileBackRefs
	}
	return nil
}

func (m *RoleDefinition) GetFeatureConfigs() []*FeatureConfig {
	if m != nil {
		return m.FeatureConfigs
	}
	return nil
}

type RoleDefinitionFeatureRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *RoleDefinitionFeatureRef) Reset()      { *m = RoleDefinitionFeatureRef{} }
func (*RoleDefinitionFeatureRef) ProtoMessage() {}
func (*RoleDefinitionFeatureRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{260}
}
func (m *RoleDefinitionFeatureRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleDefinitionFeatureRef.Unmarshal(m, b)
}
func (m *RoleDefinitionFeatureRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleDefinitionFeatureRef.Marshal(b, m, deterministic)
}
func (m *RoleDefinitionFeatureRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleDefinitionFeatureRef.Merge(m, src)
}
func (m *RoleDefinitionFeatureRef) XXX_Size() int {
	return xxx_messageInfo_RoleDefinitionFeatureRef.Size(m)
}
func (m *RoleDefinitionFeatureRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleDefinitionFeatureRef.DiscardUnknown(m)
}

var xxx_messageInfo_RoleDefinitionFeatureRef proto.InternalMessageInfo

func (m *RoleDefinitionFeatureRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoleDefinitionFeatureRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RoleDefinitionFeatureRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type RoleDefinitionOverlayRoleRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *RoleDefinitionOverlayRoleRef) Reset()      { *m = RoleDefinitionOverlayRoleRef{} }
func (*RoleDefinitionOverlayRoleRef) ProtoMessage() {}
func (*RoleDefinitionOverlayRoleRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{261}
}
func (m *RoleDefinitionOverlayRoleRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleDefinitionOverlayRoleRef.Unmarshal(m, b)
}
func (m *RoleDefinitionOverlayRoleRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleDefinitionOverlayRoleRef.Marshal(b, m, deterministic)
}
func (m *RoleDefinitionOverlayRoleRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleDefinitionOverlayRoleRef.Merge(m, src)
}
func (m *RoleDefinitionOverlayRoleRef) XXX_Size() int {
	return xxx_messageInfo_RoleDefinitionOverlayRoleRef.Size(m)
}
func (m *RoleDefinitionOverlayRoleRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleDefinitionOverlayRoleRef.DiscardUnknown(m)
}

var xxx_messageInfo_RoleDefinitionOverlayRoleRef proto.InternalMessageInfo

func (m *RoleDefinitionOverlayRoleRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoleDefinitionOverlayRoleRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RoleDefinitionOverlayRoleRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type RoleDefinitionPhysicalRoleRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *RoleDefinitionPhysicalRoleRef) Reset()      { *m = RoleDefinitionPhysicalRoleRef{} }
func (*RoleDefinitionPhysicalRoleRef) ProtoMessage() {}
func (*RoleDefinitionPhysicalRoleRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{262}
}
func (m *RoleDefinitionPhysicalRoleRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleDefinitionPhysicalRoleRef.Unmarshal(m, b)
}
func (m *RoleDefinitionPhysicalRoleRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleDefinitionPhysicalRoleRef.Marshal(b, m, deterministic)
}
func (m *RoleDefinitionPhysicalRoleRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleDefinitionPhysicalRoleRef.Merge(m, src)
}
func (m *RoleDefinitionPhysicalRoleRef) XXX_Size() int {
	return xxx_messageInfo_RoleDefinitionPhysicalRoleRef.Size(m)
}
func (m *RoleDefinitionPhysicalRoleRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleDefinitionPhysicalRoleRef.DiscardUnknown(m)
}

var xxx_messageInfo_RoleDefinitionPhysicalRoleRef proto.InternalMessageInfo

func (m *RoleDefinitionPhysicalRoleRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoleDefinitionPhysicalRoleRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RoleDefinitionPhysicalRoleRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type RoleDefinitionTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *RoleDefinitionTagRef) Reset()      { *m = RoleDefinitionTagRef{} }
func (*RoleDefinitionTagRef) ProtoMessage() {}
func (*RoleDefinitionTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{263}
}
func (m *RoleDefinitionTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleDefinitionTagRef.Unmarshal(m, b)
}
func (m *RoleDefinitionTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleDefinitionTagRef.Marshal(b, m, deterministic)
}
func (m *RoleDefinitionTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleDefinitionTagRef.Merge(m, src)
}
func (m *RoleDefinitionTagRef) XXX_Size() int {
	return xxx_messageInfo_RoleDefinitionTagRef.Size(m)
}
func (m *RoleDefinitionTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleDefinitionTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_RoleDefinitionTagRef proto.InternalMessageInfo

func (m *RoleDefinitionTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoleDefinitionTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RoleDefinitionTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type RouteAggregate struct {
	Annotations           *KeyValuePairs                      `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion  int64                               `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName           string                              `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                []string                            `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                  string                              `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms               *IdPermsType                        `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                  string                              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType            string                              `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID            string                              `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                *PermType2                          `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                  string                              `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AggregateRouteEntries *RouteListType                      `protobuf:"bytes,12,opt,name=aggregate_route_entries,json=aggregateRouteEntries,proto3" json:"aggregate_route_entries,omitempty" yaml:"aggregate_route_entries,omitempty"`
	AggregateRouteNexthop string                              `protobuf:"bytes,13,opt,name=aggregate_route_nexthop,json=aggregateRouteNexthop,proto3" json:"aggregate_route_nexthop,omitempty" yaml:"aggregate_route_nexthop,omitempty"`
	RoutingInstanceRefs   []*RouteAggregateRoutingInstanceRef `protobuf:"bytes,1014,rep,name=routing_instance_refs,json=routingInstanceRefs,proto3" json:"routing_instance_refs,omitempty" yaml:"routing_instance_refs,omitempty"`
	ServiceInstanceRefs   []*RouteAggregateServiceInstanceRef `protobuf:"bytes,1015,rep,name=service_instance_refs,json=serviceInstanceRefs,proto3" json:"service_instance_refs,omitempty" yaml:"service_instance_refs,omitempty"`
	TagRefs               []*RouteAggregateTagRef             `protobuf:"bytes,1016,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *RouteAggregate) Reset()      { *m = RouteAggregate{} }
func (*RouteAggregate) ProtoMessage() {}
func (*RouteAggregate) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{264}
}
func (m *RouteAggregate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteAggregate.Unmarshal(m, b)
}
func (m *RouteAggregate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteAggregate.Marshal(b, m, deterministic)
}
func (m *RouteAggregate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteAggregate.Merge(m, src)
}
func (m *RouteAggregate) XXX_Size() int {
	return xxx_messageInfo_RouteAggregate.Size(m)
}
func (m *RouteAggregate) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteAggregate.DiscardUnknown(m)
}

var xxx_messageInfo_RouteAggregate proto.InternalMessageInfo

func (m *RouteAggregate) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *RouteAggregate) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *RouteAggregate) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *RouteAggregate) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *RouteAggregate) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *RouteAggregate) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *RouteAggregate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RouteAggregate) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *RouteAggregate) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *RouteAggregate) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *RouteAggregate) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RouteAggregate) GetAggregateRouteEntries() *RouteListType {
	if m != nil {
		return m.AggregateRouteEntries
	}
	return nil
}

func (m *RouteAggregate) GetAggregateRouteNexthop() string {
	if m != nil {
		return m.AggregateRouteNexthop
	}
	return ""
}

func (m *RouteAggregate) GetRoutingInstanceRefs() []*RouteAggregateRoutingInstanceRef {
	if m != nil {
		return m.RoutingInstanceRefs
	}
	return nil
}

func (m *RouteAggregate) GetServiceInstanceRefs() []*RouteAggregateServiceInstanceRef {
	if m != nil {
		return m.ServiceInstanceRefs
	}
	return nil
}

func (m *RouteAggregate) GetTagRefs() []*RouteAggregateTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type RouteAggregateRoutingInstanceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *RouteAggregateRoutingInstanceRef) Reset()      { *m = RouteAggregateRoutingInstanceRef{} }
func (*RouteAggregateRoutingInstanceRef) ProtoMessage() {}
func (*RouteAggregateRoutingInstanceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{265}
}
func (m *RouteAggregateRoutingInstanceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteAggregateRoutingInstanceRef.Unmarshal(m, b)
}
func (m *RouteAggregateRoutingInstanceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteAggregateRoutingInstanceRef.Marshal(b, m, deterministic)
}
func (m *RouteAggregateRoutingInstanceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteAggregateRoutingInstanceRef.Merge(m, src)
}
func (m *RouteAggregateRoutingInstanceRef) XXX_Size() int {
	return xxx_messageInfo_RouteAggregateRoutingInstanceRef.Size(m)
}
func (m *RouteAggregateRoutingInstanceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteAggregateRoutingInstanceRef.DiscardUnknown(m)
}

var xxx_messageInfo_RouteAggregateRoutingInstanceRef proto.InternalMessageInfo

func (m *RouteAggregateRoutingInstanceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RouteAggregateRoutingInstanceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RouteAggregateRoutingInstanceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type RouteAggregateServiceInstanceRef struct {
	UUID string               `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string             `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string               `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *ServiceInterfaceTag `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *RouteAggregateServiceInstanceRef) Reset()      { *m = RouteAggregateServiceInstanceRef{} }
func (*RouteAggregateServiceInstanceRef) ProtoMessage() {}
func (*RouteAggregateServiceInstanceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{266}
}
func (m *RouteAggregateServiceInstanceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteAggregateServiceInstanceRef.Unmarshal(m, b)
}
func (m *RouteAggregateServiceInstanceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteAggregateServiceInstanceRef.Marshal(b, m, deterministic)
}
func (m *RouteAggregateServiceInstanceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteAggregateServiceInstanceRef.Merge(m, src)
}
func (m *RouteAggregateServiceInstanceRef) XXX_Size() int {
	return xxx_messageInfo_RouteAggregateServiceInstanceRef.Size(m)
}
func (m *RouteAggregateServiceInstanceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteAggregateServiceInstanceRef.DiscardUnknown(m)
}

var xxx_messageInfo_RouteAggregateServiceInstanceRef proto.InternalMessageInfo

func (m *RouteAggregateServiceInstanceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RouteAggregateServiceInstanceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RouteAggregateServiceInstanceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *RouteAggregateServiceInstanceRef) GetAttr() *ServiceInterfaceTag {
	if m != nil {
		return m.Attr
	}
	return nil
}

type RouteAggregateTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *RouteAggregateTagRef) Reset()      { *m = RouteAggregateTagRef{} }
func (*RouteAggregateTagRef) ProtoMessage() {}
func (*RouteAggregateTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{267}
}
func (m *RouteAggregateTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteAggregateTagRef.Unmarshal(m, b)
}
func (m *RouteAggregateTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteAggregateTagRef.Marshal(b, m, deterministic)
}
func (m *RouteAggregateTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteAggregateTagRef.Merge(m, src)
}
func (m *RouteAggregateTagRef) XXX_Size() int {
	return xxx_messageInfo_RouteAggregateTagRef.Size(m)
}
func (m *RouteAggregateTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteAggregateTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_RouteAggregateTagRef proto.InternalMessageInfo

func (m *RouteAggregateTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RouteAggregateTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RouteAggregateTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type RouteTable struct {
	Annotations            *KeyValuePairs      `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion   int64               `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName            string              `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                 []string            `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                   string              `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                *IdPermsType        `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                   string              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType             string              `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID             string              `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                 *PermType2          `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                   string              `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	Routes                 *RouteTableType     `protobuf:"bytes,12,opt,name=routes,proto3" json:"routes,omitempty" yaml:"routes,omitempty"`
	TagRefs                []*RouteTableTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	LogicalRouterBackRefs  []*LogicalRouter    `protobuf:"bytes,3014,rep,name=logical_router_back_refs,json=logicalRouterBackRefs,proto3" json:"logical_router_back_refs,omitempty" yaml:"logical_router_back_refs,omitempty"`
	VirtualNetworkBackRefs []*VirtualNetwork   `protobuf:"bytes,3015,rep,name=virtual_network_back_refs,json=virtualNetworkBackRefs,proto3" json:"virtual_network_back_refs,omitempty" yaml:"virtual_network_back_refs,omitempty"`
}

func (m *RouteTable) Reset()      { *m = RouteTable{} }
func (*RouteTable) ProtoMessage() {}
func (*RouteTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{268}
}
func (m *RouteTable) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTable.Unmarshal(m, b)
}
func (m *RouteTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTable.Marshal(b, m, deterministic)
}
func (m *RouteTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTable.Merge(m, src)
}
func (m *RouteTable) XXX_Size() int {
	return xxx_messageInfo_RouteTable.Size(m)
}
func (m *RouteTable) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTable.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTable proto.InternalMessageInfo

func (m *RouteTable) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *RouteTable) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *RouteTable) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *RouteTable) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *RouteTable) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *RouteTable) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *RouteTable) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RouteTable) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *RouteTable) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *RouteTable) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *RouteTable) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RouteTable) GetRoutes() *RouteTableType {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *RouteTable) GetTagRefs() []*RouteTableTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *RouteTable) GetLogicalRouterBackRefs() []*LogicalRouter {
	if m != nil {
		return m.LogicalRouterBackRefs
	}
	return nil
}

func (m *RouteTable) GetVirtualNetworkBackRefs() []*VirtualNetwork {
	if m != nil {
		return m.VirtualNetworkBackRefs
	}
	return nil
}

type RouteTableTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *RouteTableTagRef) Reset()      { *m = RouteTableTagRef{} }
func (*RouteTableTagRef) ProtoMessage() {}
func (*RouteTableTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{269}
}
func (m *RouteTableTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableTagRef.Unmarshal(m, b)
}
func (m *RouteTableTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableTagRef.Marshal(b, m, deterministic)
}
func (m *RouteTableTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableTagRef.Merge(m, src)
}
func (m *RouteTableTagRef) XXX_Size() int {
	return xxx_messageInfo_RouteTableTagRef.Size(m)
}
func (m *RouteTableTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableTagRef proto.InternalMessageInfo

func (m *RouteTableTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RouteTableTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RouteTableTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type RouteTarget struct {
	Annotations             *KeyValuePairs       `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion    int64                `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName             string               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                  []string             `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                    string               `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                 *IdPermsType         `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                    string               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType              string               `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID              string               `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                  *PermType2           `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                    string               `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TagRefs                 []*RouteTargetTagRef `protobuf:"bytes,1012,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	LogicalRouterBackRefs   []*LogicalRouter     `protobuf:"bytes,3013,rep,name=logical_router_back_refs,json=logicalRouterBackRefs,proto3" json:"logical_router_back_refs,omitempty" yaml:"logical_router_back_refs,omitempty"`
	RoutingInstanceBackRefs []*RoutingInstance   `protobuf:"bytes,3014,rep,name=routing_instance_back_refs,json=routingInstanceBackRefs,proto3" json:"routing_instance_back_refs,omitempty" yaml:"routing_instance_back_refs,omitempty"`
}

func (m *RouteTarget) Reset()      { *m = RouteTarget{} }
func (*RouteTarget) ProtoMessage() {}
func (*RouteTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{270}
}
func (m *RouteTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTarget.Unmarshal(m, b)
}
func (m *RouteTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTarget.Marshal(b, m, deterministic)
}
func (m *RouteTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTarget.Merge(m, src)
}
func (m *RouteTarget) XXX_Size() int {
	return xxx_messageInfo_RouteTarget.Size(m)
}
func (m *RouteTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTarget.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTarget proto.InternalMessageInfo

func (m *RouteTarget) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *RouteTarget) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *RouteTarget) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *RouteTarget) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *RouteTarget) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *RouteTarget) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *RouteTarget) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RouteTarget) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *RouteTarget) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *RouteTarget) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *RouteTarget) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RouteTarget) GetTagRefs() []*RouteTargetTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *RouteTarget) GetLogicalRouterBackRefs() []*LogicalRouter {
	if m != nil {
		return m.LogicalRouterBackRefs
	}
	return nil
}

func (m *RouteTarget) GetRoutingInstanceBackRefs() []*RoutingInstance {
	if m != nil {
		return m.RoutingInstanceBackRefs
	}
	return nil
}

type RouteTargetTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *RouteTargetTagRef) Reset()      { *m = RouteTargetTagRef{} }
func (*RouteTargetTagRef) ProtoMessage() {}
func (*RouteTargetTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{271}
}
func (m *RouteTargetTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTargetTagRef.Unmarshal(m, b)
}
func (m *RouteTargetTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTargetTagRef.Marshal(b, m, deterministic)
}
func (m *RouteTargetTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTargetTagRef.Merge(m, src)
}
func (m *RouteTargetTagRef) XXX_Size() int {
	return xxx_messageInfo_RouteTargetTagRef.Size(m)
}
func (m *RouteTargetTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTargetTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTargetTagRef proto.InternalMessageInfo

func (m *RouteTargetTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RouteTargetTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RouteTargetTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type RoutingInstance struct {
	Annotations                     *KeyValuePairs                       `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                                `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                             `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                               `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType                         `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                               `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                               `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                           `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                               `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	DefaultCeProtocol               *DefaultProtocolType                 `protobuf:"bytes,12,opt,name=default_ce_protocol,json=defaultCeProtocol,proto3" json:"default_ce_protocol,omitempty" yaml:"default_ce_protocol,omitempty"`
	EvpnIpv6ServiceChainInformation *ServiceChainInfo                    `protobuf:"bytes,13,opt,name=evpn_ipv6_service_chain_information,json=evpnIpv6ServiceChainInformation,proto3" json:"evpn_ipv6_service_chain_information,omitempty" yaml:"evpn_ipv6_service_chain_information,omitempty"`
	EvpnServiceChainInformation     *ServiceChainInfo                    `protobuf:"bytes,14,opt,name=evpn_service_chain_information,json=evpnServiceChainInformation,proto3" json:"evpn_service_chain_information,omitempty" yaml:"evpn_service_chain_information,omitempty"`
	Ipv6ServiceChainInformation     *ServiceChainInfo                    `protobuf:"bytes,15,opt,name=ipv6_service_chain_information,json=ipv6ServiceChainInformation,proto3" json:"ipv6_service_chain_information,omitempty" yaml:"ipv6_service_chain_information,omitempty"`
	RoutingInstanceFabricSnat       bool                                 `protobuf:"varint,16,opt,name=routing_instance_fabric_snat,json=routingInstanceFabricSnat,proto3" json:"routing_instance_fabric_snat,omitempty" yaml:"routing_instance_fabric_snat,omitempty"`
	RoutingInstanceHasPNF           bool                                 `protobuf:"varint,17,opt,name=routing_instance_has_pnf,json=routingInstanceHasPnf,proto3" json:"routing_instance_has_pnf,omitempty" yaml:"routing_instance_has_pnf,omitempty"`
	RoutingInstanceIsDefault        bool                                 `protobuf:"varint,18,opt,name=routing_instance_is_default,json=routingInstanceIsDefault,proto3" json:"routing_instance_is_default,omitempty" yaml:"routing_instance_is_default,omitempty"`
	ServiceChainInformation         *ServiceChainInfo                    `protobuf:"bytes,19,opt,name=service_chain_information,json=serviceChainInformation,proto3" json:"service_chain_information,omitempty" yaml:"service_chain_information,omitempty"`
	StaticRouteEntries              *StaticRouteEntriesType              `protobuf:"bytes,20,opt,name=static_route_entries,json=staticRouteEntries,proto3" json:"static_route_entries,omitempty" yaml:"static_route_entries,omitempty"`
	RouteTargetRefs                 []*RoutingInstanceRouteTargetRef     `protobuf:"bytes,1021,rep,name=route_target_refs,json=routeTargetRefs,proto3" json:"route_target_refs,omitempty" yaml:"route_target_refs,omitempty"`
	RoutingInstanceRefs             []*RoutingInstanceRoutingInstanceRef `protobuf:"bytes,1022,rep,name=routing_instance_refs,json=routingInstanceRefs,proto3" json:"routing_instance_refs,omitempty" yaml:"routing_instance_refs,omitempty"`
	TagRefs                         []*RoutingInstanceTagRef             `protobuf:"bytes,1023,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	RouteAggregateBackRefs          []*RouteAggregate                    `protobuf:"bytes,3026,rep,name=route_aggregate_back_refs,json=routeAggregateBackRefs,proto3" json:"route_aggregate_back_refs,omitempty" yaml:"route_aggregate_back_refs,omitempty"`
	RoutingInstanceBackRefs         []*RoutingInstance                   `protobuf:"bytes,3027,rep,name=routing_instance_back_refs,json=routingInstanceBackRefs,proto3" json:"routing_instance_back_refs,omitempty" yaml:"routing_instance_back_refs,omitempty"`
	RoutingPolicyBackRefs           []*RoutingPolicy                     `protobuf:"bytes,3028,rep,name=routing_policy_back_refs,json=routingPolicyBackRefs,proto3" json:"routing_policy_back_refs,omitempty" yaml:"routing_policy_back_refs,omitempty"`
	VirtualMachineInterfaceBackRefs []*VirtualMachineInterface           `protobuf:"bytes,3025,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
	BGPRouters                      []*BGPRouter                         `protobuf:"bytes,2024,rep,name=bgp_routers,json=bgpRouters,proto3" json:"bgp_routers,omitempty" yaml:"bgp_routers,omitempty"`
}

func (m *RoutingInstance) Reset()      { *m = RoutingInstance{} }
func (*RoutingInstance) ProtoMessage() {}
func (*RoutingInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{272}
}
func (m *RoutingInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingInstance.Unmarshal(m, b)
}
func (m *RoutingInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingInstance.Marshal(b, m, deterministic)
}
func (m *RoutingInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingInstance.Merge(m, src)
}
func (m *RoutingInstance) XXX_Size() int {
	return xxx_messageInfo_RoutingInstance.Size(m)
}
func (m *RoutingInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingInstance.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingInstance proto.InternalMessageInfo

func (m *RoutingInstance) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *RoutingInstance) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *RoutingInstance) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *RoutingInstance) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *RoutingInstance) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *RoutingInstance) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *RoutingInstance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoutingInstance) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *RoutingInstance) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *RoutingInstance) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *RoutingInstance) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoutingInstance) GetDefaultCeProtocol() *DefaultProtocolType {
	if m != nil {
		return m.DefaultCeProtocol
	}
	return nil
}

func (m *RoutingInstance) GetEvpnIpv6ServiceChainInformation() *ServiceChainInfo {
	if m != nil {
		return m.EvpnIpv6ServiceChainInformation
	}
	return nil
}

func (m *RoutingInstance) GetEvpnServiceChainInformation() *ServiceChainInfo {
	if m != nil {
		return m.EvpnServiceChainInformation
	}
	return nil
}

func (m *RoutingInstance) GetIpv6ServiceChainInformation() *ServiceChainInfo {
	if m != nil {
		return m.Ipv6ServiceChainInformation
	}
	return nil
}

func (m *RoutingInstance) GetRoutingInstanceFabricSnat() bool {
	if m != nil {
		return m.RoutingInstanceFabricSnat
	}
	return false
}

func (m *RoutingInstance) GetRoutingInstanceHasPNF() bool {
	if m != nil {
		return m.RoutingInstanceHasPNF
	}
	return false
}

func (m *RoutingInstance) GetRoutingInstanceIsDefault() bool {
	if m != nil {
		return m.RoutingInstanceIsDefault
	}
	return false
}

func (m *RoutingInstance) GetServiceChainInformation() *ServiceChainInfo {
	if m != nil {
		return m.ServiceChainInformation
	}
	return nil
}

func (m *RoutingInstance) GetStaticRouteEntries() *StaticRouteEntriesType {
	if m != nil {
		return m.StaticRouteEntries
	}
	return nil
}

func (m *RoutingInstance) GetRouteTargetRefs() []*RoutingInstanceRouteTargetRef {
	if m != nil {
		return m.RouteTargetRefs
	}
	return nil
}

func (m *RoutingInstance) GetRoutingInstanceRefs() []*RoutingInstanceRoutingInstanceRef {
	if m != nil {
		return m.RoutingInstanceRefs
	}
	return nil
}

func (m *RoutingInstance) GetTagRefs() []*RoutingInstanceTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *RoutingInstance) GetRouteAggregateBackRefs() []*RouteAggregate {
	if m != nil {
		return m.RouteAggregateBackRefs
	}
	return nil
}

func (m *RoutingInstance) GetRoutingInstanceBackRefs() []*RoutingInstance {
	if m != nil {
		return m.RoutingInstanceBackRefs
	}
	return nil
}

func (m *RoutingInstance) GetRoutingPolicyBackRefs() []*RoutingPolicy {
	if m != nil {
		return m.RoutingPolicyBackRefs
	}
	return nil
}

func (m *RoutingInstance) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

func (m *RoutingInstance) GetBGPRouters() []*BGPRouter {
	if m != nil {
		return m.BGPRouters
	}
	return nil
}

type RoutingInstanceRouteTargetRef struct {
	UUID string              `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string            `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string              `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *InstanceTargetType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *RoutingInstanceRouteTargetRef) Reset()      { *m = RoutingInstanceRouteTargetRef{} }
func (*RoutingInstanceRouteTargetRef) ProtoMessage() {}
func (*RoutingInstanceRouteTargetRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{273}
}
func (m *RoutingInstanceRouteTargetRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingInstanceRouteTargetRef.Unmarshal(m, b)
}
func (m *RoutingInstanceRouteTargetRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingInstanceRouteTargetRef.Marshal(b, m, deterministic)
}
func (m *RoutingInstanceRouteTargetRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingInstanceRouteTargetRef.Merge(m, src)
}
func (m *RoutingInstanceRouteTargetRef) XXX_Size() int {
	return xxx_messageInfo_RoutingInstanceRouteTargetRef.Size(m)
}
func (m *RoutingInstanceRouteTargetRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingInstanceRouteTargetRef.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingInstanceRouteTargetRef proto.InternalMessageInfo

func (m *RoutingInstanceRouteTargetRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoutingInstanceRouteTargetRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RoutingInstanceRouteTargetRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *RoutingInstanceRouteTargetRef) GetAttr() *InstanceTargetType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type RoutingInstanceRoutingInstanceRef struct {
	UUID string          `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string        `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string          `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *ConnectionType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *RoutingInstanceRoutingInstanceRef) Reset()      { *m = RoutingInstanceRoutingInstanceRef{} }
func (*RoutingInstanceRoutingInstanceRef) ProtoMessage() {}
func (*RoutingInstanceRoutingInstanceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{274}
}
func (m *RoutingInstanceRoutingInstanceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingInstanceRoutingInstanceRef.Unmarshal(m, b)
}
func (m *RoutingInstanceRoutingInstanceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingInstanceRoutingInstanceRef.Marshal(b, m, deterministic)
}
func (m *RoutingInstanceRoutingInstanceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingInstanceRoutingInstanceRef.Merge(m, src)
}
func (m *RoutingInstanceRoutingInstanceRef) XXX_Size() int {
	return xxx_messageInfo_RoutingInstanceRoutingInstanceRef.Size(m)
}
func (m *RoutingInstanceRoutingInstanceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingInstanceRoutingInstanceRef.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingInstanceRoutingInstanceRef proto.InternalMessageInfo

func (m *RoutingInstanceRoutingInstanceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoutingInstanceRoutingInstanceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RoutingInstanceRoutingInstanceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *RoutingInstanceRoutingInstanceRef) GetAttr() *ConnectionType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type RoutingInstanceTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *RoutingInstanceTagRef) Reset()      { *m = RoutingInstanceTagRef{} }
func (*RoutingInstanceTagRef) ProtoMessage() {}
func (*RoutingInstanceTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{275}
}
func (m *RoutingInstanceTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingInstanceTagRef.Unmarshal(m, b)
}
func (m *RoutingInstanceTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingInstanceTagRef.Marshal(b, m, deterministic)
}
func (m *RoutingInstanceTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingInstanceTagRef.Merge(m, src)
}
func (m *RoutingInstanceTagRef) XXX_Size() int {
	return xxx_messageInfo_RoutingInstanceTagRef.Size(m)
}
func (m *RoutingInstanceTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingInstanceTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingInstanceTagRef proto.InternalMessageInfo

func (m *RoutingInstanceTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoutingInstanceTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RoutingInstanceTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type RoutingPolicy struct {
	Annotations            *KeyValuePairs                     `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion   int64                              `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName            string                             `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                 []string                           `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                   string                             `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                *IdPermsType                       `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                   string                             `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType             string                             `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID             string                             `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                 *PermType2                         `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                   string                             `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	RoutingPolicyEntries   *PolicyStatementType               `protobuf:"bytes,12,opt,name=routing_policy_entries,json=routingPolicyEntries,proto3" json:"routing_policy_entries,omitempty" yaml:"routing_policy_entries,omitempty"`
	RoutingInstanceRefs    []*RoutingPolicyRoutingInstanceRef `protobuf:"bytes,1013,rep,name=routing_instance_refs,json=routingInstanceRefs,proto3" json:"routing_instance_refs,omitempty" yaml:"routing_instance_refs,omitempty"`
	ServiceInstanceRefs    []*RoutingPolicyServiceInstanceRef `protobuf:"bytes,1014,rep,name=service_instance_refs,json=serviceInstanceRefs,proto3" json:"service_instance_refs,omitempty" yaml:"service_instance_refs,omitempty"`
	TagRefs                []*RoutingPolicyTagRef             `protobuf:"bytes,1015,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualNetworkBackRefs []*VirtualNetwork                  `protobuf:"bytes,3016,rep,name=virtual_network_back_refs,json=virtualNetworkBackRefs,proto3" json:"virtual_network_back_refs,omitempty" yaml:"virtual_network_back_refs,omitempty"`
}

func (m *RoutingPolicy) Reset()      { *m = RoutingPolicy{} }
func (*RoutingPolicy) ProtoMessage() {}
func (*RoutingPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{276}
}
func (m *RoutingPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingPolicy.Unmarshal(m, b)
}
func (m *RoutingPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingPolicy.Marshal(b, m, deterministic)
}
func (m *RoutingPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingPolicy.Merge(m, src)
}
func (m *RoutingPolicy) XXX_Size() int {
	return xxx_messageInfo_RoutingPolicy.Size(m)
}
func (m *RoutingPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingPolicy proto.InternalMessageInfo

func (m *RoutingPolicy) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *RoutingPolicy) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *RoutingPolicy) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *RoutingPolicy) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *RoutingPolicy) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *RoutingPolicy) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *RoutingPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoutingPolicy) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *RoutingPolicy) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *RoutingPolicy) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *RoutingPolicy) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoutingPolicy) GetRoutingPolicyEntries() *PolicyStatementType {
	if m != nil {
		return m.RoutingPolicyEntries
	}
	return nil
}

func (m *RoutingPolicy) GetRoutingInstanceRefs() []*RoutingPolicyRoutingInstanceRef {
	if m != nil {
		return m.RoutingInstanceRefs
	}
	return nil
}

func (m *RoutingPolicy) GetServiceInstanceRefs() []*RoutingPolicyServiceInstanceRef {
	if m != nil {
		return m.ServiceInstanceRefs
	}
	return nil
}

func (m *RoutingPolicy) GetTagRefs() []*RoutingPolicyTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *RoutingPolicy) GetVirtualNetworkBackRefs() []*VirtualNetwork {
	if m != nil {
		return m.VirtualNetworkBackRefs
	}
	return nil
}

type RoutingPolicyRoutingInstanceRef struct {
	UUID string             `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string           `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string             `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *RoutingPolicyType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *RoutingPolicyRoutingInstanceRef) Reset()      { *m = RoutingPolicyRoutingInstanceRef{} }
func (*RoutingPolicyRoutingInstanceRef) ProtoMessage() {}
func (*RoutingPolicyRoutingInstanceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{277}
}
func (m *RoutingPolicyRoutingInstanceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingPolicyRoutingInstanceRef.Unmarshal(m, b)
}
func (m *RoutingPolicyRoutingInstanceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingPolicyRoutingInstanceRef.Marshal(b, m, deterministic)
}
func (m *RoutingPolicyRoutingInstanceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingPolicyRoutingInstanceRef.Merge(m, src)
}
func (m *RoutingPolicyRoutingInstanceRef) XXX_Size() int {
	return xxx_messageInfo_RoutingPolicyRoutingInstanceRef.Size(m)
}
func (m *RoutingPolicyRoutingInstanceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingPolicyRoutingInstanceRef.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingPolicyRoutingInstanceRef proto.InternalMessageInfo

func (m *RoutingPolicyRoutingInstanceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoutingPolicyRoutingInstanceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RoutingPolicyRoutingInstanceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *RoutingPolicyRoutingInstanceRef) GetAttr() *RoutingPolicyType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type RoutingPolicyServiceInstanceRef struct {
	UUID string                            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string                          `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string                            `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *RoutingPolicyServiceInstanceType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *RoutingPolicyServiceInstanceRef) Reset()      { *m = RoutingPolicyServiceInstanceRef{} }
func (*RoutingPolicyServiceInstanceRef) ProtoMessage() {}
func (*RoutingPolicyServiceInstanceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{278}
}
func (m *RoutingPolicyServiceInstanceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingPolicyServiceInstanceRef.Unmarshal(m, b)
}
func (m *RoutingPolicyServiceInstanceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingPolicyServiceInstanceRef.Marshal(b, m, deterministic)
}
func (m *RoutingPolicyServiceInstanceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingPolicyServiceInstanceRef.Merge(m, src)
}
func (m *RoutingPolicyServiceInstanceRef) XXX_Size() int {
	return xxx_messageInfo_RoutingPolicyServiceInstanceRef.Size(m)
}
func (m *RoutingPolicyServiceInstanceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingPolicyServiceInstanceRef.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingPolicyServiceInstanceRef proto.InternalMessageInfo

func (m *RoutingPolicyServiceInstanceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoutingPolicyServiceInstanceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RoutingPolicyServiceInstanceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *RoutingPolicyServiceInstanceRef) GetAttr() *RoutingPolicyServiceInstanceType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type RoutingPolicyTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *RoutingPolicyTagRef) Reset()      { *m = RoutingPolicyTagRef{} }
func (*RoutingPolicyTagRef) ProtoMessage() {}
func (*RoutingPolicyTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{279}
}
func (m *RoutingPolicyTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingPolicyTagRef.Unmarshal(m, b)
}
func (m *RoutingPolicyTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingPolicyTagRef.Marshal(b, m, deterministic)
}
func (m *RoutingPolicyTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingPolicyTagRef.Merge(m, src)
}
func (m *RoutingPolicyTagRef) XXX_Size() int {
	return xxx_messageInfo_RoutingPolicyTagRef.Size(m)
}
func (m *RoutingPolicyTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingPolicyTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingPolicyTagRef proto.InternalMessageInfo

func (m *RoutingPolicyTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *RoutingPolicyTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RoutingPolicyTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type SecurityGroup struct {
	Annotations                     *KeyValuePairs             `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                      `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                     `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                   `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                     `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType               `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                     `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                     `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                 `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                     `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	ConfiguredSecurityGroupID       int64                      `protobuf:"varint,12,opt,name=configured_security_group_id,json=configuredSecurityGroupId,proto3" json:"configured_security_group_id,omitempty" yaml:"configured_security_group_id,omitempty"`
	SecurityGroupEntries            *PolicyEntriesType         `protobuf:"bytes,13,opt,name=security_group_entries,json=securityGroupEntries,proto3" json:"security_group_entries,omitempty" yaml:"security_group_entries,omitempty"`
	SecurityGroupID                 int64                      `protobuf:"varint,14,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty" yaml:"security_group_id,omitempty"`
	TagRefs                         []*SecurityGroupTagRef     `protobuf:"bytes,1015,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	SecurityLoggingObjectBackRefs   []*SecurityLoggingObject   `protobuf:"bytes,3017,rep,name=security_logging_object_back_refs,json=securityLoggingObjectBackRefs,proto3" json:"security_logging_object_back_refs,omitempty" yaml:"security_logging_object_back_refs,omitempty"`
	VirtualMachineInterfaceBackRefs []*VirtualMachineInterface `protobuf:"bytes,3018,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
	VirtualPortGroupBackRefs        []*VirtualPortGroup        `protobuf:"bytes,3019,rep,name=virtual_port_group_back_refs,json=virtualPortGroupBackRefs,proto3" json:"virtual_port_group_back_refs,omitempty" yaml:"virtual_port_group_back_refs,omitempty"`
	AccessControlLists              []*AccessControlList       `protobuf:"bytes,2016,rep,name=access_control_lists,json=accessControlLists,proto3" json:"access_control_lists,omitempty" yaml:"access_control_lists,omitempty"`
}

func (m *SecurityGroup) Reset()      { *m = SecurityGroup{} }
func (*SecurityGroup) ProtoMessage() {}
func (*SecurityGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{280}
}
func (m *SecurityGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityGroup.Unmarshal(m, b)
}
func (m *SecurityGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityGroup.Marshal(b, m, deterministic)
}
func (m *SecurityGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityGroup.Merge(m, src)
}
func (m *SecurityGroup) XXX_Size() int {
	return xxx_messageInfo_SecurityGroup.Size(m)
}
func (m *SecurityGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityGroup.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityGroup proto.InternalMessageInfo

func (m *SecurityGroup) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *SecurityGroup) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *SecurityGroup) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *SecurityGroup) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *SecurityGroup) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *SecurityGroup) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *SecurityGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecurityGroup) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *SecurityGroup) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *SecurityGroup) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *SecurityGroup) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *SecurityGroup) GetConfiguredSecurityGroupID() int64 {
	if m != nil {
		return m.ConfiguredSecurityGroupID
	}
	return 0
}

func (m *SecurityGroup) GetSecurityGroupEntries() *PolicyEntriesType {
	if m != nil {
		return m.SecurityGroupEntries
	}
	return nil
}

func (m *SecurityGroup) GetSecurityGroupID() int64 {
	if m != nil {
		return m.SecurityGroupID
	}
	return 0
}

func (m *SecurityGroup) GetTagRefs() []*SecurityGroupTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *SecurityGroup) GetSecurityLoggingObjectBackRefs() []*SecurityLoggingObject {
	if m != nil {
		return m.SecurityLoggingObjectBackRefs
	}
	return nil
}

func (m *SecurityGroup) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

func (m *SecurityGroup) GetVirtualPortGroupBackRefs() []*VirtualPortGroup {
	if m != nil {
		return m.VirtualPortGroupBackRefs
	}
	return nil
}

func (m *SecurityGroup) GetAccessControlLists() []*AccessControlList {
	if m != nil {
		return m.AccessControlLists
	}
	return nil
}

type SecurityGroupTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *SecurityGroupTagRef) Reset()      { *m = SecurityGroupTagRef{} }
func (*SecurityGroupTagRef) ProtoMessage() {}
func (*SecurityGroupTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{281}
}
func (m *SecurityGroupTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityGroupTagRef.Unmarshal(m, b)
}
func (m *SecurityGroupTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityGroupTagRef.Marshal(b, m, deterministic)
}
func (m *SecurityGroupTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityGroupTagRef.Merge(m, src)
}
func (m *SecurityGroupTagRef) XXX_Size() int {
	return xxx_messageInfo_SecurityGroupTagRef.Size(m)
}
func (m *SecurityGroupTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityGroupTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityGroupTagRef proto.InternalMessageInfo

func (m *SecurityGroupTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *SecurityGroupTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SecurityGroupTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type SecurityLoggingObject struct {
	Annotations                     *KeyValuePairs                           `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                                    `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                                   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                                 `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                                   `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType                             `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                                   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                                   `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                                   `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                               `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                                   `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	SecurityLoggingObjectRate       int64                                    `protobuf:"varint,12,opt,name=security_logging_object_rate,json=securityLoggingObjectRate,proto3" json:"security_logging_object_rate,omitempty" yaml:"security_logging_object_rate,omitempty"`
	SecurityLoggingObjectRules      *SecurityLoggingObjectRuleListType       `protobuf:"bytes,13,opt,name=security_logging_object_rules,json=securityLoggingObjectRules,proto3" json:"security_logging_object_rules,omitempty" yaml:"security_logging_object_rules,omitempty"`
	NetworkPolicyRefs               []*SecurityLoggingObjectNetworkPolicyRef `protobuf:"bytes,1014,rep,name=network_policy_refs,json=networkPolicyRefs,proto3" json:"network_policy_refs,omitempty" yaml:"network_policy_refs,omitempty"`
	SecurityGroupRefs               []*SecurityLoggingObjectSecurityGroupRef `protobuf:"bytes,1015,rep,name=security_group_refs,json=securityGroupRefs,proto3" json:"security_group_refs,omitempty" yaml:"security_group_refs,omitempty"`
	TagRefs                         []*SecurityLoggingObjectTagRef           `protobuf:"bytes,1016,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	FirewallPolicyBackRefs          []*FirewallPolicy                        `protobuf:"bytes,3017,rep,name=firewall_policy_back_refs,json=firewallPolicyBackRefs,proto3" json:"firewall_policy_back_refs,omitempty" yaml:"firewall_policy_back_refs,omitempty"`
	FirewallRuleBackRefs            []*FirewallRule                          `protobuf:"bytes,3018,rep,name=firewall_rule_back_refs,json=firewallRuleBackRefs,proto3" json:"firewall_rule_back_refs,omitempty" yaml:"firewall_rule_back_refs,omitempty"`
	VirtualMachineInterfaceBackRefs []*VirtualMachineInterface               `protobuf:"bytes,3019,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
	VirtualNetworkBackRefs          []*VirtualNetwork                        `protobuf:"bytes,3020,rep,name=virtual_network_back_refs,json=virtualNetworkBackRefs,proto3" json:"virtual_network_back_refs,omitempty" yaml:"virtual_network_back_refs,omitempty"`
}

func (m *SecurityLoggingObject) Reset()      { *m = SecurityLoggingObject{} }
func (*SecurityLoggingObject) ProtoMessage() {}
func (*SecurityLoggingObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{282}
}
func (m *SecurityLoggingObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityLoggingObject.Unmarshal(m, b)
}
func (m *SecurityLoggingObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityLoggingObject.Marshal(b, m, deterministic)
}
func (m *SecurityLoggingObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityLoggingObject.Merge(m, src)
}
func (m *SecurityLoggingObject) XXX_Size() int {
	return xxx_messageInfo_SecurityLoggingObject.Size(m)
}
func (m *SecurityLoggingObject) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityLoggingObject.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityLoggingObject proto.InternalMessageInfo

func (m *SecurityLoggingObject) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *SecurityLoggingObject) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *SecurityLoggingObject) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *SecurityLoggingObject) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *SecurityLoggingObject) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *SecurityLoggingObject) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *SecurityLoggingObject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SecurityLoggingObject) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *SecurityLoggingObject) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *SecurityLoggingObject) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *SecurityLoggingObject) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *SecurityLoggingObject) GetSecurityLoggingObjectRate() int64 {
	if m != nil {
		return m.SecurityLoggingObjectRate
	}
	return 0
}

func (m *SecurityLoggingObject) GetSecurityLoggingObjectRules() *SecurityLoggingObjectRuleListType {
	if m != nil {
		return m.SecurityLoggingObjectRules
	}
	return nil
}

func (m *SecurityLoggingObject) GetNetworkPolicyRefs() []*SecurityLoggingObjectNetworkPolicyRef {
	if m != nil {
		return m.NetworkPolicyRefs
	}
	return nil
}

func (m *SecurityLoggingObject) GetSecurityGroupRefs() []*SecurityLoggingObjectSecurityGroupRef {
	if m != nil {
		return m.SecurityGroupRefs
	}
	return nil
}

func (m *SecurityLoggingObject) GetTagRefs() []*SecurityLoggingObjectTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *SecurityLoggingObject) GetFirewallPolicyBackRefs() []*FirewallPolicy {
	if m != nil {
		return m.FirewallPolicyBackRefs
	}
	return nil
}

func (m *SecurityLoggingObject) GetFirewallRuleBackRefs() []*FirewallRule {
	if m != nil {
		return m.FirewallRuleBackRefs
	}
	return nil
}

func (m *SecurityLoggingObject) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

func (m *SecurityLoggingObject) GetVirtualNetworkBackRefs() []*VirtualNetwork {
	if m != nil {
		return m.VirtualNetworkBackRefs
	}
	return nil
}

type SecurityLoggingObjectNetworkPolicyRef struct {
	UUID string                             `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string                           `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string                             `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *SecurityLoggingObjectRuleListType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *SecurityLoggingObjectNetworkPolicyRef) Reset()      { *m = SecurityLoggingObjectNetworkPolicyRef{} }
func (*SecurityLoggingObjectNetworkPolicyRef) ProtoMessage() {}
func (*SecurityLoggingObjectNetworkPolicyRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{283}
}
func (m *SecurityLoggingObjectNetworkPolicyRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityLoggingObjectNetworkPolicyRef.Unmarshal(m, b)
}
func (m *SecurityLoggingObjectNetworkPolicyRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityLoggingObjectNetworkPolicyRef.Marshal(b, m, deterministic)
}
func (m *SecurityLoggingObjectNetworkPolicyRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityLoggingObjectNetworkPolicyRef.Merge(m, src)
}
func (m *SecurityLoggingObjectNetworkPolicyRef) XXX_Size() int {
	return xxx_messageInfo_SecurityLoggingObjectNetworkPolicyRef.Size(m)
}
func (m *SecurityLoggingObjectNetworkPolicyRef) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityLoggingObjectNetworkPolicyRef.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityLoggingObjectNetworkPolicyRef proto.InternalMessageInfo

func (m *SecurityLoggingObjectNetworkPolicyRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *SecurityLoggingObjectNetworkPolicyRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SecurityLoggingObjectNetworkPolicyRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *SecurityLoggingObjectNetworkPolicyRef) GetAttr() *SecurityLoggingObjectRuleListType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type SecurityLoggingObjectSecurityGroupRef struct {
	UUID string                             `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string                           `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string                             `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *SecurityLoggingObjectRuleListType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *SecurityLoggingObjectSecurityGroupRef) Reset()      { *m = SecurityLoggingObjectSecurityGroupRef{} }
func (*SecurityLoggingObjectSecurityGroupRef) ProtoMessage() {}
func (*SecurityLoggingObjectSecurityGroupRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{284}
}
func (m *SecurityLoggingObjectSecurityGroupRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityLoggingObjectSecurityGroupRef.Unmarshal(m, b)
}
func (m *SecurityLoggingObjectSecurityGroupRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityLoggingObjectSecurityGroupRef.Marshal(b, m, deterministic)
}
func (m *SecurityLoggingObjectSecurityGroupRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityLoggingObjectSecurityGroupRef.Merge(m, src)
}
func (m *SecurityLoggingObjectSecurityGroupRef) XXX_Size() int {
	return xxx_messageInfo_SecurityLoggingObjectSecurityGroupRef.Size(m)
}
func (m *SecurityLoggingObjectSecurityGroupRef) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityLoggingObjectSecurityGroupRef.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityLoggingObjectSecurityGroupRef proto.InternalMessageInfo

func (m *SecurityLoggingObjectSecurityGroupRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *SecurityLoggingObjectSecurityGroupRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SecurityLoggingObjectSecurityGroupRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *SecurityLoggingObjectSecurityGroupRef) GetAttr() *SecurityLoggingObjectRuleListType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type SecurityLoggingObjectTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *SecurityLoggingObjectTagRef) Reset()      { *m = SecurityLoggingObjectTagRef{} }
func (*SecurityLoggingObjectTagRef) ProtoMessage() {}
func (*SecurityLoggingObjectTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{285}
}
func (m *SecurityLoggingObjectTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityLoggingObjectTagRef.Unmarshal(m, b)
}
func (m *SecurityLoggingObjectTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityLoggingObjectTagRef.Marshal(b, m, deterministic)
}
func (m *SecurityLoggingObjectTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityLoggingObjectTagRef.Merge(m, src)
}
func (m *SecurityLoggingObjectTagRef) XXX_Size() int {
	return xxx_messageInfo_SecurityLoggingObjectTagRef.Size(m)
}
func (m *SecurityLoggingObjectTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityLoggingObjectTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityLoggingObjectTagRef proto.InternalMessageInfo

func (m *SecurityLoggingObjectTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *SecurityLoggingObjectTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SecurityLoggingObjectTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceAppliance struct {
	Annotations                        *KeyValuePairs                          `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion               int64                                   `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                        string                                  `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                             []string                                `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                               string                                  `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                            *IdPermsType                            `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                               string                                  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                         string                                  `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                         string                                  `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                             *PermType2                              `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                               string                                  `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	ServiceApplianceIPAddress          string                                  `protobuf:"bytes,12,opt,name=service_appliance_ip_address,json=serviceApplianceIpAddress,proto3" json:"service_appliance_ip_address,omitempty" yaml:"service_appliance_ip_address,omitempty"`
	ServiceApplianceProperties         *KeyValuePairs                          `protobuf:"bytes,13,opt,name=service_appliance_properties,json=serviceApplianceProperties,proto3" json:"service_appliance_properties,omitempty" yaml:"service_appliance_properties,omitempty"`
	ServiceApplianceUserCredentials    *UserCredentials                        `protobuf:"bytes,14,opt,name=service_appliance_user_credentials,json=serviceApplianceUserCredentials,proto3" json:"service_appliance_user_credentials,omitempty" yaml:"service_appliance_user_credentials,omitempty"`
	ServiceApplianceVirtualizationType string                                  `protobuf:"bytes,15,opt,name=service_appliance_virtualization_type,json=serviceApplianceVirtualizationType,proto3" json:"service_appliance_virtualization_type,omitempty" yaml:"service_appliance_virtualization_type,omitempty"`
	PhysicalInterfaceRefs              []*ServiceAppliancePhysicalInterfaceRef `protobuf:"bytes,1016,rep,name=physical_interface_refs,json=physicalInterfaceRefs,proto3" json:"physical_interface_refs,omitempty" yaml:"physical_interface_refs,omitempty"`
	TagRefs                            []*ServiceApplianceTagRef               `protobuf:"bytes,1017,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *ServiceAppliance) Reset()      { *m = ServiceAppliance{} }
func (*ServiceAppliance) ProtoMessage() {}
func (*ServiceAppliance) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{286}
}
func (m *ServiceAppliance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAppliance.Unmarshal(m, b)
}
func (m *ServiceAppliance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAppliance.Marshal(b, m, deterministic)
}
func (m *ServiceAppliance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAppliance.Merge(m, src)
}
func (m *ServiceAppliance) XXX_Size() int {
	return xxx_messageInfo_ServiceAppliance.Size(m)
}
func (m *ServiceAppliance) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAppliance.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAppliance proto.InternalMessageInfo

func (m *ServiceAppliance) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ServiceAppliance) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ServiceAppliance) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ServiceAppliance) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ServiceAppliance) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ServiceAppliance) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ServiceAppliance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceAppliance) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ServiceAppliance) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ServiceAppliance) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ServiceAppliance) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceAppliance) GetServiceApplianceIPAddress() string {
	if m != nil {
		return m.ServiceApplianceIPAddress
	}
	return ""
}

func (m *ServiceAppliance) GetServiceApplianceProperties() *KeyValuePairs {
	if m != nil {
		return m.ServiceApplianceProperties
	}
	return nil
}

func (m *ServiceAppliance) GetServiceApplianceUserCredentials() *UserCredentials {
	if m != nil {
		return m.ServiceApplianceUserCredentials
	}
	return nil
}

func (m *ServiceAppliance) GetServiceApplianceVirtualizationType() string {
	if m != nil {
		return m.ServiceApplianceVirtualizationType
	}
	return ""
}

func (m *ServiceAppliance) GetPhysicalInterfaceRefs() []*ServiceAppliancePhysicalInterfaceRef {
	if m != nil {
		return m.PhysicalInterfaceRefs
	}
	return nil
}

func (m *ServiceAppliance) GetTagRefs() []*ServiceApplianceTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type ServiceAppliancePhysicalInterfaceRef struct {
	UUID string                         `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string                       `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string                         `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *ServiceApplianceInterfaceType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *ServiceAppliancePhysicalInterfaceRef) Reset()      { *m = ServiceAppliancePhysicalInterfaceRef{} }
func (*ServiceAppliancePhysicalInterfaceRef) ProtoMessage() {}
func (*ServiceAppliancePhysicalInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{287}
}
func (m *ServiceAppliancePhysicalInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAppliancePhysicalInterfaceRef.Unmarshal(m, b)
}
func (m *ServiceAppliancePhysicalInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAppliancePhysicalInterfaceRef.Marshal(b, m, deterministic)
}
func (m *ServiceAppliancePhysicalInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAppliancePhysicalInterfaceRef.Merge(m, src)
}
func (m *ServiceAppliancePhysicalInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_ServiceAppliancePhysicalInterfaceRef.Size(m)
}
func (m *ServiceAppliancePhysicalInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAppliancePhysicalInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAppliancePhysicalInterfaceRef proto.InternalMessageInfo

func (m *ServiceAppliancePhysicalInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceAppliancePhysicalInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceAppliancePhysicalInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ServiceAppliancePhysicalInterfaceRef) GetAttr() *ServiceApplianceInterfaceType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type ServiceApplianceTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceApplianceTagRef) Reset()      { *m = ServiceApplianceTagRef{} }
func (*ServiceApplianceTagRef) ProtoMessage() {}
func (*ServiceApplianceTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{288}
}
func (m *ServiceApplianceTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceApplianceTagRef.Unmarshal(m, b)
}
func (m *ServiceApplianceTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceApplianceTagRef.Marshal(b, m, deterministic)
}
func (m *ServiceApplianceTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceApplianceTagRef.Merge(m, src)
}
func (m *ServiceApplianceTagRef) XXX_Size() int {
	return xxx_messageInfo_ServiceApplianceTagRef.Size(m)
}
func (m *ServiceApplianceTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceApplianceTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceApplianceTagRef proto.InternalMessageInfo

func (m *ServiceApplianceTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceApplianceTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceApplianceTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceApplianceSet struct {
	Annotations                           *KeyValuePairs               `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion                  int64                        `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                           string                       `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                                []string                     `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                                  string                       `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                               *IdPermsType                 `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                                  string                       `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                            string                       `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                            string                       `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                                *PermType2                   `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                                  string                       `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	ServiceApplianceDriver                string                       `protobuf:"bytes,12,opt,name=service_appliance_driver,json=serviceApplianceDriver,proto3" json:"service_appliance_driver,omitempty" yaml:"service_appliance_driver,omitempty"`
	ServiceApplianceHaMode                string                       `protobuf:"bytes,13,opt,name=service_appliance_ha_mode,json=serviceApplianceHaMode,proto3" json:"service_appliance_ha_mode,omitempty" yaml:"service_appliance_ha_mode,omitempty"`
	ServiceApplianceSetProperties         *KeyValuePairs               `protobuf:"bytes,14,opt,name=service_appliance_set_properties,json=serviceApplianceSetProperties,proto3" json:"service_appliance_set_properties,omitempty" yaml:"service_appliance_set_properties,omitempty"`
	ServiceApplianceSetVirtualizationType string                       `protobuf:"bytes,15,opt,name=service_appliance_set_virtualization_type,json=serviceApplianceSetVirtualizationType,proto3" json:"service_appliance_set_virtualization_type,omitempty" yaml:"service_appliance_set_virtualization_type,omitempty"`
	TagRefs                               []*ServiceApplianceSetTagRef `protobuf:"bytes,1016,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	LoadbalancerBackRefs                  []*Loadbalancer              `protobuf:"bytes,3019,rep,name=loadbalancer_back_refs,json=loadbalancerBackRefs,proto3" json:"loadbalancer_back_refs,omitempty" yaml:"loadbalancer_back_refs,omitempty"`
	LoadbalancerPoolBackRefs              []*LoadbalancerPool          `protobuf:"bytes,3018,rep,name=loadbalancer_pool_back_refs,json=loadbalancerPoolBackRefs,proto3" json:"loadbalancer_pool_back_refs,omitempty" yaml:"loadbalancer_pool_back_refs,omitempty"`
	ServiceTemplateBackRefs               []*ServiceTemplate           `protobuf:"bytes,3020,rep,name=service_template_back_refs,json=serviceTemplateBackRefs,proto3" json:"service_template_back_refs,omitempty" yaml:"service_template_back_refs,omitempty"`
	ServiceAppliances                     []*ServiceAppliance          `protobuf:"bytes,2017,rep,name=service_appliances,json=serviceAppliances,proto3" json:"service_appliances,omitempty" yaml:"service_appliances,omitempty"`
}

func (m *ServiceApplianceSet) Reset()      { *m = ServiceApplianceSet{} }
func (*ServiceApplianceSet) ProtoMessage() {}
func (*ServiceApplianceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{289}
}
func (m *ServiceApplianceSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceApplianceSet.Unmarshal(m, b)
}
func (m *ServiceApplianceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceApplianceSet.Marshal(b, m, deterministic)
}
func (m *ServiceApplianceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceApplianceSet.Merge(m, src)
}
func (m *ServiceApplianceSet) XXX_Size() int {
	return xxx_messageInfo_ServiceApplianceSet.Size(m)
}
func (m *ServiceApplianceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceApplianceSet.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceApplianceSet proto.InternalMessageInfo

func (m *ServiceApplianceSet) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ServiceApplianceSet) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ServiceApplianceSet) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ServiceApplianceSet) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ServiceApplianceSet) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ServiceApplianceSet) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ServiceApplianceSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceApplianceSet) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ServiceApplianceSet) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ServiceApplianceSet) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ServiceApplianceSet) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceApplianceSet) GetServiceApplianceDriver() string {
	if m != nil {
		return m.ServiceApplianceDriver
	}
	return ""
}

func (m *ServiceApplianceSet) GetServiceApplianceHaMode() string {
	if m != nil {
		return m.ServiceApplianceHaMode
	}
	return ""
}

func (m *ServiceApplianceSet) GetServiceApplianceSetProperties() *KeyValuePairs {
	if m != nil {
		return m.ServiceApplianceSetProperties
	}
	return nil
}

func (m *ServiceApplianceSet) GetServiceApplianceSetVirtualizationType() string {
	if m != nil {
		return m.ServiceApplianceSetVirtualizationType
	}
	return ""
}

func (m *ServiceApplianceSet) GetTagRefs() []*ServiceApplianceSetTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *ServiceApplianceSet) GetLoadbalancerBackRefs() []*Loadbalancer {
	if m != nil {
		return m.LoadbalancerBackRefs
	}
	return nil
}

func (m *ServiceApplianceSet) GetLoadbalancerPoolBackRefs() []*LoadbalancerPool {
	if m != nil {
		return m.LoadbalancerPoolBackRefs
	}
	return nil
}

func (m *ServiceApplianceSet) GetServiceTemplateBackRefs() []*ServiceTemplate {
	if m != nil {
		return m.ServiceTemplateBackRefs
	}
	return nil
}

func (m *ServiceApplianceSet) GetServiceAppliances() []*ServiceAppliance {
	if m != nil {
		return m.ServiceAppliances
	}
	return nil
}

type ServiceApplianceSetTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceApplianceSetTagRef) Reset()      { *m = ServiceApplianceSetTagRef{} }
func (*ServiceApplianceSetTagRef) ProtoMessage() {}
func (*ServiceApplianceSetTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{290}
}
func (m *ServiceApplianceSetTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceApplianceSetTagRef.Unmarshal(m, b)
}
func (m *ServiceApplianceSetTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceApplianceSetTagRef.Marshal(b, m, deterministic)
}
func (m *ServiceApplianceSetTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceApplianceSetTagRef.Merge(m, src)
}
func (m *ServiceApplianceSetTagRef) XXX_Size() int {
	return xxx_messageInfo_ServiceApplianceSetTagRef.Size(m)
}
func (m *ServiceApplianceSetTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceApplianceSetTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceApplianceSetTagRef proto.InternalMessageInfo

func (m *ServiceApplianceSetTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceApplianceSetTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceApplianceSetTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceConnectionModule struct {
	Annotations             *KeyValuePairs                             `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion    int64                                      `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName             string                                     `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                  []string                                   `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                    string                                     `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                 *IdPermsType                               `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                    string                                     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType              string                                     `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID              string                                     `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                  *PermType2                                 `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                    string                                     `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	E2Service               string                                     `protobuf:"bytes,12,opt,name=e2_service,json=e2Service,proto3" json:"e2_service,omitempty" yaml:"e2_service,omitempty"`
	ServiceType             string                                     `protobuf:"bytes,13,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty" yaml:"service_type,omitempty"`
	ServiceObjectRefs       []*ServiceConnectionModuleServiceObjectRef `protobuf:"bytes,1014,rep,name=service_object_refs,json=serviceObjectRefs,proto3" json:"service_object_refs,omitempty" yaml:"service_object_refs,omitempty"`
	TagRefs                 []*ServiceConnectionModuleTagRef           `protobuf:"bytes,1015,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	ServiceEndpointBackRefs []*ServiceEndpoint                         `protobuf:"bytes,3016,rep,name=service_endpoint_back_refs,json=serviceEndpointBackRefs,proto3" json:"service_endpoint_back_refs,omitempty" yaml:"service_endpoint_back_refs,omitempty"`
}

func (m *ServiceConnectionModule) Reset()      { *m = ServiceConnectionModule{} }
func (*ServiceConnectionModule) ProtoMessage() {}
func (*ServiceConnectionModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{291}
}
func (m *ServiceConnectionModule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceConnectionModule.Unmarshal(m, b)
}
func (m *ServiceConnectionModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceConnectionModule.Marshal(b, m, deterministic)
}
func (m *ServiceConnectionModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceConnectionModule.Merge(m, src)
}
func (m *ServiceConnectionModule) XXX_Size() int {
	return xxx_messageInfo_ServiceConnectionModule.Size(m)
}
func (m *ServiceConnectionModule) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceConnectionModule.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceConnectionModule proto.InternalMessageInfo

func (m *ServiceConnectionModule) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ServiceConnectionModule) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ServiceConnectionModule) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ServiceConnectionModule) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ServiceConnectionModule) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ServiceConnectionModule) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ServiceConnectionModule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceConnectionModule) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ServiceConnectionModule) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ServiceConnectionModule) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ServiceConnectionModule) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceConnectionModule) GetE2Service() string {
	if m != nil {
		return m.E2Service
	}
	return ""
}

func (m *ServiceConnectionModule) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *ServiceConnectionModule) GetServiceObjectRefs() []*ServiceConnectionModuleServiceObjectRef {
	if m != nil {
		return m.ServiceObjectRefs
	}
	return nil
}

func (m *ServiceConnectionModule) GetTagRefs() []*ServiceConnectionModuleTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *ServiceConnectionModule) GetServiceEndpointBackRefs() []*ServiceEndpoint {
	if m != nil {
		return m.ServiceEndpointBackRefs
	}
	return nil
}

type ServiceConnectionModuleServiceObjectRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceConnectionModuleServiceObjectRef) Reset() {
	*m = ServiceConnectionModuleServiceObjectRef{}
}
func (*ServiceConnectionModuleServiceObjectRef) ProtoMessage() {}
func (*ServiceConnectionModuleServiceObjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{292}
}
func (m *ServiceConnectionModuleServiceObjectRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceConnectionModuleServiceObjectRef.Unmarshal(m, b)
}
func (m *ServiceConnectionModuleServiceObjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceConnectionModuleServiceObjectRef.Marshal(b, m, deterministic)
}
func (m *ServiceConnectionModuleServiceObjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceConnectionModuleServiceObjectRef.Merge(m, src)
}
func (m *ServiceConnectionModuleServiceObjectRef) XXX_Size() int {
	return xxx_messageInfo_ServiceConnectionModuleServiceObjectRef.Size(m)
}
func (m *ServiceConnectionModuleServiceObjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceConnectionModuleServiceObjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceConnectionModuleServiceObjectRef proto.InternalMessageInfo

func (m *ServiceConnectionModuleServiceObjectRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceConnectionModuleServiceObjectRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceConnectionModuleServiceObjectRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceConnectionModuleTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceConnectionModuleTagRef) Reset()      { *m = ServiceConnectionModuleTagRef{} }
func (*ServiceConnectionModuleTagRef) ProtoMessage() {}
func (*ServiceConnectionModuleTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{293}
}
func (m *ServiceConnectionModuleTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceConnectionModuleTagRef.Unmarshal(m, b)
}
func (m *ServiceConnectionModuleTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceConnectionModuleTagRef.Marshal(b, m, deterministic)
}
func (m *ServiceConnectionModuleTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceConnectionModuleTagRef.Merge(m, src)
}
func (m *ServiceConnectionModuleTagRef) XXX_Size() int {
	return xxx_messageInfo_ServiceConnectionModuleTagRef.Size(m)
}
func (m *ServiceConnectionModuleTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceConnectionModuleTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceConnectionModuleTagRef proto.InternalMessageInfo

func (m *ServiceConnectionModuleTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceConnectionModuleTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceConnectionModuleTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceEndpoint struct {
	Annotations                     *KeyValuePairs                               `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                                        `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                                       `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                                     `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                                       `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType                                 `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                                       `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                                       `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                                       `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                                   `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                                       `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	PhysicalRouterRefs              []*ServiceEndpointPhysicalRouterRef          `protobuf:"bytes,1012,rep,name=physical_router_refs,json=physicalRouterRefs,proto3" json:"physical_router_refs,omitempty" yaml:"physical_router_refs,omitempty"`
	ServiceConnectionModuleRefs     []*ServiceEndpointServiceConnectionModuleRef `protobuf:"bytes,1013,rep,name=service_connection_module_refs,json=serviceConnectionModuleRefs,proto3" json:"service_connection_module_refs,omitempty" yaml:"service_connection_module_refs,omitempty"`
	ServiceObjectRefs               []*ServiceEndpointServiceObjectRef           `protobuf:"bytes,1014,rep,name=service_object_refs,json=serviceObjectRefs,proto3" json:"service_object_refs,omitempty" yaml:"service_object_refs,omitempty"`
	TagRefs                         []*ServiceEndpointTagRef                     `protobuf:"bytes,1015,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceBackRefs []*VirtualMachineInterface                   `protobuf:"bytes,3016,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
}

func (m *ServiceEndpoint) Reset()      { *m = ServiceEndpoint{} }
func (*ServiceEndpoint) ProtoMessage() {}
func (*ServiceEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{294}
}
func (m *ServiceEndpoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceEndpoint.Unmarshal(m, b)
}
func (m *ServiceEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceEndpoint.Marshal(b, m, deterministic)
}
func (m *ServiceEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceEndpoint.Merge(m, src)
}
func (m *ServiceEndpoint) XXX_Size() int {
	return xxx_messageInfo_ServiceEndpoint.Size(m)
}
func (m *ServiceEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceEndpoint proto.InternalMessageInfo

func (m *ServiceEndpoint) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ServiceEndpoint) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ServiceEndpoint) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ServiceEndpoint) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ServiceEndpoint) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ServiceEndpoint) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ServiceEndpoint) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceEndpoint) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ServiceEndpoint) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ServiceEndpoint) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ServiceEndpoint) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceEndpoint) GetPhysicalRouterRefs() []*ServiceEndpointPhysicalRouterRef {
	if m != nil {
		return m.PhysicalRouterRefs
	}
	return nil
}

func (m *ServiceEndpoint) GetServiceConnectionModuleRefs() []*ServiceEndpointServiceConnectionModuleRef {
	if m != nil {
		return m.ServiceConnectionModuleRefs
	}
	return nil
}

func (m *ServiceEndpoint) GetServiceObjectRefs() []*ServiceEndpointServiceObjectRef {
	if m != nil {
		return m.ServiceObjectRefs
	}
	return nil
}

func (m *ServiceEndpoint) GetTagRefs() []*ServiceEndpointTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *ServiceEndpoint) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

type ServiceEndpointPhysicalRouterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceEndpointPhysicalRouterRef) Reset()      { *m = ServiceEndpointPhysicalRouterRef{} }
func (*ServiceEndpointPhysicalRouterRef) ProtoMessage() {}
func (*ServiceEndpointPhysicalRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{295}
}
func (m *ServiceEndpointPhysicalRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceEndpointPhysicalRouterRef.Unmarshal(m, b)
}
func (m *ServiceEndpointPhysicalRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceEndpointPhysicalRouterRef.Marshal(b, m, deterministic)
}
func (m *ServiceEndpointPhysicalRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceEndpointPhysicalRouterRef.Merge(m, src)
}
func (m *ServiceEndpointPhysicalRouterRef) XXX_Size() int {
	return xxx_messageInfo_ServiceEndpointPhysicalRouterRef.Size(m)
}
func (m *ServiceEndpointPhysicalRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceEndpointPhysicalRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceEndpointPhysicalRouterRef proto.InternalMessageInfo

func (m *ServiceEndpointPhysicalRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceEndpointPhysicalRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceEndpointPhysicalRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceEndpointServiceConnectionModuleRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceEndpointServiceConnectionModuleRef) Reset() {
	*m = ServiceEndpointServiceConnectionModuleRef{}
}
func (*ServiceEndpointServiceConnectionModuleRef) ProtoMessage() {}
func (*ServiceEndpointServiceConnectionModuleRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{296}
}
func (m *ServiceEndpointServiceConnectionModuleRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceEndpointServiceConnectionModuleRef.Unmarshal(m, b)
}
func (m *ServiceEndpointServiceConnectionModuleRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceEndpointServiceConnectionModuleRef.Marshal(b, m, deterministic)
}
func (m *ServiceEndpointServiceConnectionModuleRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceEndpointServiceConnectionModuleRef.Merge(m, src)
}
func (m *ServiceEndpointServiceConnectionModuleRef) XXX_Size() int {
	return xxx_messageInfo_ServiceEndpointServiceConnectionModuleRef.Size(m)
}
func (m *ServiceEndpointServiceConnectionModuleRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceEndpointServiceConnectionModuleRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceEndpointServiceConnectionModuleRef proto.InternalMessageInfo

func (m *ServiceEndpointServiceConnectionModuleRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceEndpointServiceConnectionModuleRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceEndpointServiceConnectionModuleRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceEndpointServiceObjectRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceEndpointServiceObjectRef) Reset()      { *m = ServiceEndpointServiceObjectRef{} }
func (*ServiceEndpointServiceObjectRef) ProtoMessage() {}
func (*ServiceEndpointServiceObjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{297}
}
func (m *ServiceEndpointServiceObjectRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceEndpointServiceObjectRef.Unmarshal(m, b)
}
func (m *ServiceEndpointServiceObjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceEndpointServiceObjectRef.Marshal(b, m, deterministic)
}
func (m *ServiceEndpointServiceObjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceEndpointServiceObjectRef.Merge(m, src)
}
func (m *ServiceEndpointServiceObjectRef) XXX_Size() int {
	return xxx_messageInfo_ServiceEndpointServiceObjectRef.Size(m)
}
func (m *ServiceEndpointServiceObjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceEndpointServiceObjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceEndpointServiceObjectRef proto.InternalMessageInfo

func (m *ServiceEndpointServiceObjectRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceEndpointServiceObjectRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceEndpointServiceObjectRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceEndpointTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceEndpointTagRef) Reset()      { *m = ServiceEndpointTagRef{} }
func (*ServiceEndpointTagRef) ProtoMessage() {}
func (*ServiceEndpointTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{298}
}
func (m *ServiceEndpointTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceEndpointTagRef.Unmarshal(m, b)
}
func (m *ServiceEndpointTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceEndpointTagRef.Marshal(b, m, deterministic)
}
func (m *ServiceEndpointTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceEndpointTagRef.Merge(m, src)
}
func (m *ServiceEndpointTagRef) XXX_Size() int {
	return xxx_messageInfo_ServiceEndpointTagRef.Size(m)
}
func (m *ServiceEndpointTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceEndpointTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceEndpointTagRef proto.InternalMessageInfo

func (m *ServiceEndpointTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceEndpointTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceEndpointTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceGroup struct {
	Annotations                     *KeyValuePairs            `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                     `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                    `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                  `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                    `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType              `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                    `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                    `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                    `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                    `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	DraftModeState                  string                    `protobuf:"bytes,12,opt,name=draft_mode_state,json=draftModeState,proto3" json:"draft_mode_state,omitempty" yaml:"draft_mode_state,omitempty"`
	ServiceGroupFirewallServiceList *FirewallServiceGroupType `protobuf:"bytes,13,opt,name=service_group_firewall_service_list,json=serviceGroupFirewallServiceList,proto3" json:"service_group_firewall_service_list,omitempty" yaml:"service_group_firewall_service_list,omitempty"`
	TagRefs                         []*ServiceGroupTagRef     `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	FirewallRuleBackRefs            []*FirewallRule           `protobuf:"bytes,3015,rep,name=firewall_rule_back_refs,json=firewallRuleBackRefs,proto3" json:"firewall_rule_back_refs,omitempty" yaml:"firewall_rule_back_refs,omitempty"`
}

func (m *ServiceGroup) Reset()      { *m = ServiceGroup{} }
func (*ServiceGroup) ProtoMessage() {}
func (*ServiceGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{299}
}
func (m *ServiceGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceGroup.Unmarshal(m, b)
}
func (m *ServiceGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceGroup.Marshal(b, m, deterministic)
}
func (m *ServiceGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceGroup.Merge(m, src)
}
func (m *ServiceGroup) XXX_Size() int {
	return xxx_messageInfo_ServiceGroup.Size(m)
}
func (m *ServiceGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceGroup proto.InternalMessageInfo

func (m *ServiceGroup) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ServiceGroup) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ServiceGroup) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ServiceGroup) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ServiceGroup) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ServiceGroup) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ServiceGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceGroup) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ServiceGroup) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ServiceGroup) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ServiceGroup) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceGroup) GetDraftModeState() string {
	if m != nil {
		return m.DraftModeState
	}
	return ""
}

func (m *ServiceGroup) GetServiceGroupFirewallServiceList() *FirewallServiceGroupType {
	if m != nil {
		return m.ServiceGroupFirewallServiceList
	}
	return nil
}

func (m *ServiceGroup) GetTagRefs() []*ServiceGroupTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *ServiceGroup) GetFirewallRuleBackRefs() []*FirewallRule {
	if m != nil {
		return m.FirewallRuleBackRefs
	}
	return nil
}

type ServiceGroupTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceGroupTagRef) Reset()      { *m = ServiceGroupTagRef{} }
func (*ServiceGroupTagRef) ProtoMessage() {}
func (*ServiceGroupTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{300}
}
func (m *ServiceGroupTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceGroupTagRef.Unmarshal(m, b)
}
func (m *ServiceGroupTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceGroupTagRef.Marshal(b, m, deterministic)
}
func (m *ServiceGroupTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceGroupTagRef.Merge(m, src)
}
func (m *ServiceGroupTagRef) XXX_Size() int {
	return xxx_messageInfo_ServiceGroupTagRef.Size(m)
}
func (m *ServiceGroupTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceGroupTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceGroupTagRef proto.InternalMessageInfo

func (m *ServiceGroupTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceGroupTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceGroupTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceHealthCheck struct {
	Annotations                     *KeyValuePairs                          `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                                   `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                                  `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                                `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                                  `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType                            `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                                  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                                  `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                                  `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                              `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                                  `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	ServiceHealthCheckProperties    *ServiceHealthCheckType                 `protobuf:"bytes,12,opt,name=service_health_check_properties,json=serviceHealthCheckProperties,proto3" json:"service_health_check_properties,omitempty" yaml:"service_health_check_properties,omitempty"`
	ServiceInstanceRefs             []*ServiceHealthCheckServiceInstanceRef `protobuf:"bytes,1013,rep,name=service_instance_refs,json=serviceInstanceRefs,proto3" json:"service_instance_refs,omitempty" yaml:"service_instance_refs,omitempty"`
	TagRefs                         []*ServiceHealthCheckTagRef             `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	BGPAsAServiceBackRefs           []*BGPAsAService                        `protobuf:"bytes,3015,rep,name=bgp_as_a_service_back_refs,json=bgpAsAServiceBackRefs,proto3" json:"bgp_as_a_service_back_refs,omitempty" yaml:"bgp_as_a_service_back_refs,omitempty"`
	VirtualMachineInterfaceBackRefs []*VirtualMachineInterface              `protobuf:"bytes,3016,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
}

func (m *ServiceHealthCheck) Reset()      { *m = ServiceHealthCheck{} }
func (*ServiceHealthCheck) ProtoMessage() {}
func (*ServiceHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{301}
}
func (m *ServiceHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceHealthCheck.Unmarshal(m, b)
}
func (m *ServiceHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceHealthCheck.Marshal(b, m, deterministic)
}
func (m *ServiceHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceHealthCheck.Merge(m, src)
}
func (m *ServiceHealthCheck) XXX_Size() int {
	return xxx_messageInfo_ServiceHealthCheck.Size(m)
}
func (m *ServiceHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceHealthCheck proto.InternalMessageInfo

func (m *ServiceHealthCheck) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ServiceHealthCheck) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ServiceHealthCheck) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ServiceHealthCheck) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ServiceHealthCheck) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ServiceHealthCheck) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ServiceHealthCheck) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceHealthCheck) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ServiceHealthCheck) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ServiceHealthCheck) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ServiceHealthCheck) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceHealthCheck) GetServiceHealthCheckProperties() *ServiceHealthCheckType {
	if m != nil {
		return m.ServiceHealthCheckProperties
	}
	return nil
}

func (m *ServiceHealthCheck) GetServiceInstanceRefs() []*ServiceHealthCheckServiceInstanceRef {
	if m != nil {
		return m.ServiceInstanceRefs
	}
	return nil
}

func (m *ServiceHealthCheck) GetTagRefs() []*ServiceHealthCheckTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *ServiceHealthCheck) GetBGPAsAServiceBackRefs() []*BGPAsAService {
	if m != nil {
		return m.BGPAsAServiceBackRefs
	}
	return nil
}

func (m *ServiceHealthCheck) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

type ServiceHealthCheckServiceInstanceRef struct {
	UUID string               `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string             `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string               `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *ServiceInterfaceTag `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *ServiceHealthCheckServiceInstanceRef) Reset()      { *m = ServiceHealthCheckServiceInstanceRef{} }
func (*ServiceHealthCheckServiceInstanceRef) ProtoMessage() {}
func (*ServiceHealthCheckServiceInstanceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{302}
}
func (m *ServiceHealthCheckServiceInstanceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceHealthCheckServiceInstanceRef.Unmarshal(m, b)
}
func (m *ServiceHealthCheckServiceInstanceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceHealthCheckServiceInstanceRef.Marshal(b, m, deterministic)
}
func (m *ServiceHealthCheckServiceInstanceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceHealthCheckServiceInstanceRef.Merge(m, src)
}
func (m *ServiceHealthCheckServiceInstanceRef) XXX_Size() int {
	return xxx_messageInfo_ServiceHealthCheckServiceInstanceRef.Size(m)
}
func (m *ServiceHealthCheckServiceInstanceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceHealthCheckServiceInstanceRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceHealthCheckServiceInstanceRef proto.InternalMessageInfo

func (m *ServiceHealthCheckServiceInstanceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceHealthCheckServiceInstanceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceHealthCheckServiceInstanceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ServiceHealthCheckServiceInstanceRef) GetAttr() *ServiceInterfaceTag {
	if m != nil {
		return m.Attr
	}
	return nil
}

type ServiceHealthCheckTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceHealthCheckTagRef) Reset()      { *m = ServiceHealthCheckTagRef{} }
func (*ServiceHealthCheckTagRef) ProtoMessage() {}
func (*ServiceHealthCheckTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{303}
}
func (m *ServiceHealthCheckTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceHealthCheckTagRef.Unmarshal(m, b)
}
func (m *ServiceHealthCheckTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceHealthCheckTagRef.Marshal(b, m, deterministic)
}
func (m *ServiceHealthCheckTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceHealthCheckTagRef.Merge(m, src)
}
func (m *ServiceHealthCheckTagRef) XXX_Size() int {
	return xxx_messageInfo_ServiceHealthCheckTagRef.Size(m)
}
func (m *ServiceHealthCheckTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceHealthCheckTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceHealthCheckTagRef proto.InternalMessageInfo

func (m *ServiceHealthCheckTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceHealthCheckTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceHealthCheckTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceInstance struct {
	Annotations                 *KeyValuePairs                       `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion        int64                                `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                 string                               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                      []string                             `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                        string                               `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                     *IdPermsType                         `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                        string                               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                  string                               `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                  string                               `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                      *PermType2                           `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                        string                               `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	ServiceInstanceBGPEnabled   bool                                 `protobuf:"varint,12,opt,name=service_instance_bgp_enabled,json=serviceInstanceBgpEnabled,proto3" json:"service_instance_bgp_enabled,omitempty" yaml:"service_instance_bgp_enabled,omitempty"`
	ServiceInstanceBindings     *KeyValuePairs                       `protobuf:"bytes,13,opt,name=service_instance_bindings,json=serviceInstanceBindings,proto3" json:"service_instance_bindings,omitempty" yaml:"service_instance_bindings,omitempty"`
	ServiceInstanceProperties   *ServiceInstanceType                 `protobuf:"bytes,14,opt,name=service_instance_properties,json=serviceInstanceProperties,proto3" json:"service_instance_properties,omitempty" yaml:"service_instance_properties,omitempty"`
	InstanceIPRefs              []*ServiceInstanceInstanceIPRef      `protobuf:"bytes,1015,rep,name=instance_ip_refs,json=instanceIpRefs,proto3" json:"instance_ip_refs,omitempty" yaml:"instance_ip_refs,omitempty"`
	ServiceTemplateRefs         []*ServiceInstanceServiceTemplateRef `protobuf:"bytes,1016,rep,name=service_template_refs,json=serviceTemplateRefs,proto3" json:"service_template_refs,omitempty" yaml:"service_template_refs,omitempty"`
	TagRefs                     []*ServiceInstanceTagRef             `protobuf:"bytes,1017,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	InterfaceRouteTableBackRefs []*InterfaceRouteTable               `protobuf:"bytes,3026,rep,name=interface_route_table_back_refs,json=interfaceRouteTableBackRefs,proto3" json:"interface_route_table_back_refs,omitempty" yaml:"interface_route_table_back_refs,omitempty"`
	LoadbalancerBackRefs        []*Loadbalancer                      `protobuf:"bytes,3020,rep,name=loadbalancer_back_refs,json=loadbalancerBackRefs,proto3" json:"loadbalancer_back_refs,omitempty" yaml:"loadbalancer_back_refs,omitempty"`
	LoadbalancerPoolBackRefs    []*LoadbalancerPool                  `protobuf:"bytes,3019,rep,name=loadbalancer_pool_back_refs,json=loadbalancerPoolBackRefs,proto3" json:"loadbalancer_pool_back_refs,omitempty" yaml:"loadbalancer_pool_back_refs,omitempty"`
	LogicalRouterBackRefs       []*LogicalRouter                     `protobuf:"bytes,3021,rep,name=logical_router_back_refs,json=logicalRouterBackRefs,proto3" json:"logical_router_back_refs,omitempty" yaml:"logical_router_back_refs,omitempty"`
	RouteAggregateBackRefs      []*RouteAggregate                    `protobuf:"bytes,3022,rep,name=route_aggregate_back_refs,json=routeAggregateBackRefs,proto3" json:"route_aggregate_back_refs,omitempty" yaml:"route_aggregate_back_refs,omitempty"`
	RoutingPolicyBackRefs       []*RoutingPolicy                     `protobuf:"bytes,3023,rep,name=routing_policy_back_refs,json=routingPolicyBackRefs,proto3" json:"routing_policy_back_refs,omitempty" yaml:"routing_policy_back_refs,omitempty"`
	ServiceHealthCheckBackRefs  []*ServiceHealthCheck                `protobuf:"bytes,3024,rep,name=service_health_check_back_refs,json=serviceHealthCheckBackRefs,proto3" json:"service_health_check_back_refs,omitempty" yaml:"service_health_check_back_refs,omitempty"`
	VirtualMachineBackRefs      []*VirtualMachine                    `protobuf:"bytes,3025,rep,name=virtual_machine_back_refs,json=virtualMachineBackRefs,proto3" json:"virtual_machine_back_refs,omitempty" yaml:"virtual_machine_back_refs,omitempty"`
	PortTuples                  []*PortTuple                         `protobuf:"bytes,2018,rep,name=port_tuples,json=portTuples,proto3" json:"port_tuples,omitempty" yaml:"port_tuples,omitempty"`
}

func (m *ServiceInstance) Reset()      { *m = ServiceInstance{} }
func (*ServiceInstance) ProtoMessage() {}
func (*ServiceInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{304}
}
func (m *ServiceInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceInstance.Unmarshal(m, b)
}
func (m *ServiceInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceInstance.Marshal(b, m, deterministic)
}
func (m *ServiceInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceInstance.Merge(m, src)
}
func (m *ServiceInstance) XXX_Size() int {
	return xxx_messageInfo_ServiceInstance.Size(m)
}
func (m *ServiceInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceInstance.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceInstance proto.InternalMessageInfo

func (m *ServiceInstance) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ServiceInstance) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ServiceInstance) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ServiceInstance) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ServiceInstance) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ServiceInstance) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ServiceInstance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceInstance) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ServiceInstance) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ServiceInstance) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ServiceInstance) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceInstance) GetServiceInstanceBGPEnabled() bool {
	if m != nil {
		return m.ServiceInstanceBGPEnabled
	}
	return false
}

func (m *ServiceInstance) GetServiceInstanceBindings() *KeyValuePairs {
	if m != nil {
		return m.ServiceInstanceBindings
	}
	return nil
}

func (m *ServiceInstance) GetServiceInstanceProperties() *ServiceInstanceType {
	if m != nil {
		return m.ServiceInstanceProperties
	}
	return nil
}

func (m *ServiceInstance) GetInstanceIPRefs() []*ServiceInstanceInstanceIPRef {
	if m != nil {
		return m.InstanceIPRefs
	}
	return nil
}

func (m *ServiceInstance) GetServiceTemplateRefs() []*ServiceInstanceServiceTemplateRef {
	if m != nil {
		return m.ServiceTemplateRefs
	}
	return nil
}

func (m *ServiceInstance) GetTagRefs() []*ServiceInstanceTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *ServiceInstance) GetInterfaceRouteTableBackRefs() []*InterfaceRouteTable {
	if m != nil {
		return m.InterfaceRouteTableBackRefs
	}
	return nil
}

func (m *ServiceInstance) GetLoadbalancerBackRefs() []*Loadbalancer {
	if m != nil {
		return m.LoadbalancerBackRefs
	}
	return nil
}

func (m *ServiceInstance) GetLoadbalancerPoolBackRefs() []*LoadbalancerPool {
	if m != nil {
		return m.LoadbalancerPoolBackRefs
	}
	return nil
}

func (m *ServiceInstance) GetLogicalRouterBackRefs() []*LogicalRouter {
	if m != nil {
		return m.LogicalRouterBackRefs
	}
	return nil
}

func (m *ServiceInstance) GetRouteAggregateBackRefs() []*RouteAggregate {
	if m != nil {
		return m.RouteAggregateBackRefs
	}
	return nil
}

func (m *ServiceInstance) GetRoutingPolicyBackRefs() []*RoutingPolicy {
	if m != nil {
		return m.RoutingPolicyBackRefs
	}
	return nil
}

func (m *ServiceInstance) GetServiceHealthCheckBackRefs() []*ServiceHealthCheck {
	if m != nil {
		return m.ServiceHealthCheckBackRefs
	}
	return nil
}

func (m *ServiceInstance) GetVirtualMachineBackRefs() []*VirtualMachine {
	if m != nil {
		return m.VirtualMachineBackRefs
	}
	return nil
}

func (m *ServiceInstance) GetPortTuples() []*PortTuple {
	if m != nil {
		return m.PortTuples
	}
	return nil
}

type ServiceInstanceInstanceIPRef struct {
	UUID string               `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string             `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string               `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *ServiceInterfaceTag `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *ServiceInstanceInstanceIPRef) Reset()      { *m = ServiceInstanceInstanceIPRef{} }
func (*ServiceInstanceInstanceIPRef) ProtoMessage() {}
func (*ServiceInstanceInstanceIPRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{305}
}
func (m *ServiceInstanceInstanceIPRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceInstanceInstanceIPRef.Unmarshal(m, b)
}
func (m *ServiceInstanceInstanceIPRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceInstanceInstanceIPRef.Marshal(b, m, deterministic)
}
func (m *ServiceInstanceInstanceIPRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceInstanceInstanceIPRef.Merge(m, src)
}
func (m *ServiceInstanceInstanceIPRef) XXX_Size() int {
	return xxx_messageInfo_ServiceInstanceInstanceIPRef.Size(m)
}
func (m *ServiceInstanceInstanceIPRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceInstanceInstanceIPRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceInstanceInstanceIPRef proto.InternalMessageInfo

func (m *ServiceInstanceInstanceIPRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceInstanceInstanceIPRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceInstanceInstanceIPRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ServiceInstanceInstanceIPRef) GetAttr() *ServiceInterfaceTag {
	if m != nil {
		return m.Attr
	}
	return nil
}

type ServiceInstanceServiceTemplateRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceInstanceServiceTemplateRef) Reset()      { *m = ServiceInstanceServiceTemplateRef{} }
func (*ServiceInstanceServiceTemplateRef) ProtoMessage() {}
func (*ServiceInstanceServiceTemplateRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{306}
}
func (m *ServiceInstanceServiceTemplateRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceInstanceServiceTemplateRef.Unmarshal(m, b)
}
func (m *ServiceInstanceServiceTemplateRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceInstanceServiceTemplateRef.Marshal(b, m, deterministic)
}
func (m *ServiceInstanceServiceTemplateRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceInstanceServiceTemplateRef.Merge(m, src)
}
func (m *ServiceInstanceServiceTemplateRef) XXX_Size() int {
	return xxx_messageInfo_ServiceInstanceServiceTemplateRef.Size(m)
}
func (m *ServiceInstanceServiceTemplateRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceInstanceServiceTemplateRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceInstanceServiceTemplateRef proto.InternalMessageInfo

func (m *ServiceInstanceServiceTemplateRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceInstanceServiceTemplateRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceInstanceServiceTemplateRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceInstanceTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceInstanceTagRef) Reset()      { *m = ServiceInstanceTagRef{} }
func (*ServiceInstanceTagRef) ProtoMessage() {}
func (*ServiceInstanceTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{307}
}
func (m *ServiceInstanceTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceInstanceTagRef.Unmarshal(m, b)
}
func (m *ServiceInstanceTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceInstanceTagRef.Marshal(b, m, deterministic)
}
func (m *ServiceInstanceTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceInstanceTagRef.Merge(m, src)
}
func (m *ServiceInstanceTagRef) XXX_Size() int {
	return xxx_messageInfo_ServiceInstanceTagRef.Size(m)
}
func (m *ServiceInstanceTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceInstanceTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceInstanceTagRef proto.InternalMessageInfo

func (m *ServiceInstanceTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceInstanceTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceInstanceTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceObject struct {
	Annotations                     *KeyValuePairs             `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                      `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                     `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                   `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                     `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType               `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                     `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                     `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                 `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                     `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TagRefs                         []*ServiceObjectTagRef     `protobuf:"bytes,1012,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	ServiceConnectionModuleBackRefs []*ServiceConnectionModule `protobuf:"bytes,3013,rep,name=service_connection_module_back_refs,json=serviceConnectionModuleBackRefs,proto3" json:"service_connection_module_back_refs,omitempty" yaml:"service_connection_module_back_refs,omitempty"`
	ServiceEndpointBackRefs         []*ServiceEndpoint         `protobuf:"bytes,3014,rep,name=service_endpoint_back_refs,json=serviceEndpointBackRefs,proto3" json:"service_endpoint_back_refs,omitempty" yaml:"service_endpoint_back_refs,omitempty"`
}

func (m *ServiceObject) Reset()      { *m = ServiceObject{} }
func (*ServiceObject) ProtoMessage() {}
func (*ServiceObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{308}
}
func (m *ServiceObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceObject.Unmarshal(m, b)
}
func (m *ServiceObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceObject.Marshal(b, m, deterministic)
}
func (m *ServiceObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceObject.Merge(m, src)
}
func (m *ServiceObject) XXX_Size() int {
	return xxx_messageInfo_ServiceObject.Size(m)
}
func (m *ServiceObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceObject.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceObject proto.InternalMessageInfo

func (m *ServiceObject) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ServiceObject) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ServiceObject) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ServiceObject) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ServiceObject) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ServiceObject) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ServiceObject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceObject) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ServiceObject) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ServiceObject) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ServiceObject) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceObject) GetTagRefs() []*ServiceObjectTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *ServiceObject) GetServiceConnectionModuleBackRefs() []*ServiceConnectionModule {
	if m != nil {
		return m.ServiceConnectionModuleBackRefs
	}
	return nil
}

func (m *ServiceObject) GetServiceEndpointBackRefs() []*ServiceEndpoint {
	if m != nil {
		return m.ServiceEndpointBackRefs
	}
	return nil
}

type ServiceObjectTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceObjectTagRef) Reset()      { *m = ServiceObjectTagRef{} }
func (*ServiceObjectTagRef) ProtoMessage() {}
func (*ServiceObjectTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{309}
}
func (m *ServiceObjectTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceObjectTagRef.Unmarshal(m, b)
}
func (m *ServiceObjectTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceObjectTagRef.Marshal(b, m, deterministic)
}
func (m *ServiceObjectTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceObjectTagRef.Merge(m, src)
}
func (m *ServiceObjectTagRef) XXX_Size() int {
	return xxx_messageInfo_ServiceObjectTagRef.Size(m)
}
func (m *ServiceObjectTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceObjectTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceObjectTagRef proto.InternalMessageInfo

func (m *ServiceObjectTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceObjectTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceObjectTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceTemplate struct {
	Annotations               *KeyValuePairs                           `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion      int64                                    `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName               string                                   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                    []string                                 `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                      string                                   `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                   *IdPermsType                             `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                      string                                   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                string                                   `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                string                                   `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                    *PermType2                               `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                      string                                   `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	ServiceConfigManaged      bool                                     `protobuf:"varint,12,opt,name=service_config_managed,json=serviceConfigManaged,proto3" json:"service_config_managed,omitempty" yaml:"service_config_managed,omitempty"`
	ServiceTemplateProperties *ServiceTemplateType                     `protobuf:"bytes,13,opt,name=service_template_properties,json=serviceTemplateProperties,proto3" json:"service_template_properties,omitempty" yaml:"service_template_properties,omitempty"`
	ServiceApplianceSetRefs   []*ServiceTemplateServiceApplianceSetRef `protobuf:"bytes,1014,rep,name=service_appliance_set_refs,json=serviceApplianceSetRefs,proto3" json:"service_appliance_set_refs,omitempty" yaml:"service_appliance_set_refs,omitempty"`
	TagRefs                   []*ServiceTemplateTagRef                 `protobuf:"bytes,1015,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	ServiceInstanceBackRefs   []*ServiceInstance                       `protobuf:"bytes,3016,rep,name=service_instance_back_refs,json=serviceInstanceBackRefs,proto3" json:"service_instance_back_refs,omitempty" yaml:"service_instance_back_refs,omitempty"`
}

func (m *ServiceTemplate) Reset()      { *m = ServiceTemplate{} }
func (*ServiceTemplate) ProtoMessage() {}
func (*ServiceTemplate) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{310}
}
func (m *ServiceTemplate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceTemplate.Unmarshal(m, b)
}
func (m *ServiceTemplate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceTemplate.Marshal(b, m, deterministic)
}
func (m *ServiceTemplate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceTemplate.Merge(m, src)
}
func (m *ServiceTemplate) XXX_Size() int {
	return xxx_messageInfo_ServiceTemplate.Size(m)
}
func (m *ServiceTemplate) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceTemplate.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceTemplate proto.InternalMessageInfo

func (m *ServiceTemplate) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *ServiceTemplate) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *ServiceTemplate) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ServiceTemplate) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *ServiceTemplate) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *ServiceTemplate) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *ServiceTemplate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceTemplate) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *ServiceTemplate) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *ServiceTemplate) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *ServiceTemplate) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceTemplate) GetServiceConfigManaged() bool {
	if m != nil {
		return m.ServiceConfigManaged
	}
	return false
}

func (m *ServiceTemplate) GetServiceTemplateProperties() *ServiceTemplateType {
	if m != nil {
		return m.ServiceTemplateProperties
	}
	return nil
}

func (m *ServiceTemplate) GetServiceApplianceSetRefs() []*ServiceTemplateServiceApplianceSetRef {
	if m != nil {
		return m.ServiceApplianceSetRefs
	}
	return nil
}

func (m *ServiceTemplate) GetTagRefs() []*ServiceTemplateTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *ServiceTemplate) GetServiceInstanceBackRefs() []*ServiceInstance {
	if m != nil {
		return m.ServiceInstanceBackRefs
	}
	return nil
}

type ServiceTemplateServiceApplianceSetRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceTemplateServiceApplianceSetRef) Reset()      { *m = ServiceTemplateServiceApplianceSetRef{} }
func (*ServiceTemplateServiceApplianceSetRef) ProtoMessage() {}
func (*ServiceTemplateServiceApplianceSetRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{311}
}
func (m *ServiceTemplateServiceApplianceSetRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceTemplateServiceApplianceSetRef.Unmarshal(m, b)
}
func (m *ServiceTemplateServiceApplianceSetRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceTemplateServiceApplianceSetRef.Marshal(b, m, deterministic)
}
func (m *ServiceTemplateServiceApplianceSetRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceTemplateServiceApplianceSetRef.Merge(m, src)
}
func (m *ServiceTemplateServiceApplianceSetRef) XXX_Size() int {
	return xxx_messageInfo_ServiceTemplateServiceApplianceSetRef.Size(m)
}
func (m *ServiceTemplateServiceApplianceSetRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceTemplateServiceApplianceSetRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceTemplateServiceApplianceSetRef proto.InternalMessageInfo

func (m *ServiceTemplateServiceApplianceSetRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceTemplateServiceApplianceSetRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceTemplateServiceApplianceSetRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type ServiceTemplateTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *ServiceTemplateTagRef) Reset()      { *m = ServiceTemplateTagRef{} }
func (*ServiceTemplateTagRef) ProtoMessage() {}
func (*ServiceTemplateTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{312}
}
func (m *ServiceTemplateTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceTemplateTagRef.Unmarshal(m, b)
}
func (m *ServiceTemplateTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceTemplateTagRef.Marshal(b, m, deterministic)
}
func (m *ServiceTemplateTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceTemplateTagRef.Merge(m, src)
}
func (m *ServiceTemplateTagRef) XXX_Size() int {
	return xxx_messageInfo_ServiceTemplateTagRef.Size(m)
}
func (m *ServiceTemplateTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceTemplateTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceTemplateTagRef proto.InternalMessageInfo

func (m *ServiceTemplateTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ServiceTemplateTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ServiceTemplateTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type SflowProfile struct {
	Annotations              *KeyValuePairs        `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion     int64                 `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName              string                `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                   []string              `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                     string                `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                  *IdPermsType          `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                     string                `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType               string                `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID               string                `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                   *PermType2            `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                     string                `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	SflowParameters          *SflowParameters      `protobuf:"bytes,12,opt,name=sflow_parameters,json=sflowParameters,proto3" json:"sflow_parameters,omitempty" yaml:"sflow_parameters,omitempty"`
	SflowProfileIsDefault    bool                  `protobuf:"varint,13,opt,name=sflow_profile_is_default,json=sflowProfileIsDefault,proto3" json:"sflow_profile_is_default,omitempty" yaml:"sflow_profile_is_default,omitempty"`
	TagRefs                  []*SflowProfileTagRef `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	TelemetryProfileBackRefs []*TelemetryProfile   `protobuf:"bytes,3015,rep,name=telemetry_profile_back_refs,json=telemetryProfileBackRefs,proto3" json:"telemetry_profile_back_refs,omitempty" yaml:"telemetry_profile_back_refs,omitempty"`
}

func (m *SflowProfile) Reset()      { *m = SflowProfile{} }
func (*SflowProfile) ProtoMessage() {}
func (*SflowProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{313}
}
func (m *SflowProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SflowProfile.Unmarshal(m, b)
}
func (m *SflowProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SflowProfile.Marshal(b, m, deterministic)
}
func (m *SflowProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SflowProfile.Merge(m, src)
}
func (m *SflowProfile) XXX_Size() int {
	return xxx_messageInfo_SflowProfile.Size(m)
}
func (m *SflowProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_SflowProfile.DiscardUnknown(m)
}

var xxx_messageInfo_SflowProfile proto.InternalMessageInfo

func (m *SflowProfile) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *SflowProfile) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *SflowProfile) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *SflowProfile) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *SflowProfile) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *SflowProfile) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *SflowProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SflowProfile) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *SflowProfile) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *SflowProfile) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *SflowProfile) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *SflowProfile) GetSflowParameters() *SflowParameters {
	if m != nil {
		return m.SflowParameters
	}
	return nil
}

func (m *SflowProfile) GetSflowProfileIsDefault() bool {
	if m != nil {
		return m.SflowProfileIsDefault
	}
	return false
}

func (m *SflowProfile) GetTagRefs() []*SflowProfileTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *SflowProfile) GetTelemetryProfileBackRefs() []*TelemetryProfile {
	if m != nil {
		return m.TelemetryProfileBackRefs
	}
	return nil
}

type SflowProfileTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *SflowProfileTagRef) Reset()      { *m = SflowProfileTagRef{} }
func (*SflowProfileTagRef) ProtoMessage() {}
func (*SflowProfileTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{314}
}
func (m *SflowProfileTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SflowProfileTagRef.Unmarshal(m, b)
}
func (m *SflowProfileTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SflowProfileTagRef.Marshal(b, m, deterministic)
}
func (m *SflowProfileTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SflowProfileTagRef.Merge(m, src)
}
func (m *SflowProfileTagRef) XXX_Size() int {
	return xxx_messageInfo_SflowProfileTagRef.Size(m)
}
func (m *SflowProfileTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_SflowProfileTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_SflowProfileTagRef proto.InternalMessageInfo

func (m *SflowProfileTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *SflowProfileTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SflowProfileTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type StormControlProfile struct {
	Annotations            *KeyValuePairs               `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion   int64                        `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName            string                       `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                 []string                     `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                   string                       `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                *IdPermsType                 `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                   string                       `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType             string                       `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID             string                       `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                 *PermType2                   `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                   string                       `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	StormControlParameters *StormControlParameters      `protobuf:"bytes,12,opt,name=storm_control_parameters,json=stormControlParameters,proto3" json:"storm_control_parameters,omitempty" yaml:"storm_control_parameters,omitempty"`
	TagRefs                []*StormControlProfileTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	PortProfileBackRefs    []*PortProfile               `protobuf:"bytes,3014,rep,name=port_profile_back_refs,json=portProfileBackRefs,proto3" json:"port_profile_back_refs,omitempty" yaml:"port_profile_back_refs,omitempty"`
}

func (m *StormControlProfile) Reset()      { *m = StormControlProfile{} }
func (*StormControlProfile) ProtoMessage() {}
func (*StormControlProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{315}
}
func (m *StormControlProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StormControlProfile.Unmarshal(m, b)
}
func (m *StormControlProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StormControlProfile.Marshal(b, m, deterministic)
}
func (m *StormControlProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StormControlProfile.Merge(m, src)
}
func (m *StormControlProfile) XXX_Size() int {
	return xxx_messageInfo_StormControlProfile.Size(m)
}
func (m *StormControlProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_StormControlProfile.DiscardUnknown(m)
}

var xxx_messageInfo_StormControlProfile proto.InternalMessageInfo

func (m *StormControlProfile) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *StormControlProfile) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *StormControlProfile) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *StormControlProfile) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *StormControlProfile) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *StormControlProfile) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *StormControlProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StormControlProfile) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *StormControlProfile) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *StormControlProfile) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *StormControlProfile) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *StormControlProfile) GetStormControlParameters() *StormControlParameters {
	if m != nil {
		return m.StormControlParameters
	}
	return nil
}

func (m *StormControlProfile) GetTagRefs() []*StormControlProfileTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *StormControlProfile) GetPortProfileBackRefs() []*PortProfile {
	if m != nil {
		return m.PortProfileBackRefs
	}
	return nil
}

type StormControlProfileTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *StormControlProfileTagRef) Reset()      { *m = StormControlProfileTagRef{} }
func (*StormControlProfileTagRef) ProtoMessage() {}
func (*StormControlProfileTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{316}
}
func (m *StormControlProfileTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StormControlProfileTagRef.Unmarshal(m, b)
}
func (m *StormControlProfileTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StormControlProfileTagRef.Marshal(b, m, deterministic)
}
func (m *StormControlProfileTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StormControlProfileTagRef.Merge(m, src)
}
func (m *StormControlProfileTagRef) XXX_Size() int {
	return xxx_messageInfo_StormControlProfileTagRef.Size(m)
}
func (m *StormControlProfileTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_StormControlProfileTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_StormControlProfileTagRef proto.InternalMessageInfo

func (m *StormControlProfileTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *StormControlProfileTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *StormControlProfileTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type StructuredSyslogApplicationRecord struct {
	Annotations                    *KeyValuePairs                             `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion           int64                                      `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                    string                                     `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                         []string                                   `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                           string                                     `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                        *IdPermsType                               `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                           string                                     `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                     string                                     `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                     string                                     `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                         *PermType2                                 `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                           string                                     `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	StructuredSyslogAppCategory    string                                     `protobuf:"bytes,12,opt,name=structured_syslog_app_category,json=structuredSyslogAppCategory,proto3" json:"structured_syslog_app_category,omitempty" yaml:"structured_syslog_app_category,omitempty"`
	StructuredSyslogAppGroups      string                                     `protobuf:"bytes,13,opt,name=structured_syslog_app_groups,json=structuredSyslogAppGroups,proto3" json:"structured_syslog_app_groups,omitempty" yaml:"structured_syslog_app_groups,omitempty"`
	StructuredSyslogAppRisk        string                                     `protobuf:"bytes,14,opt,name=structured_syslog_app_risk,json=structuredSyslogAppRisk,proto3" json:"structured_syslog_app_risk,omitempty" yaml:"structured_syslog_app_risk,omitempty"`
	StructuredSyslogAppServiceTags string                                     `protobuf:"bytes,15,opt,name=structured_syslog_app_service_tags,json=structuredSyslogAppServiceTags,proto3" json:"structured_syslog_app_service_tags,omitempty" yaml:"structured_syslog_app_service_tags,omitempty"`
	StructuredSyslogAppSubcategory string                                     `protobuf:"bytes,16,opt,name=structured_syslog_app_subcategory,json=structuredSyslogAppSubcategory,proto3" json:"structured_syslog_app_subcategory,omitempty" yaml:"structured_syslog_app_subcategory,omitempty"`
	TagRefs                        []*StructuredSyslogApplicationRecordTagRef `protobuf:"bytes,1017,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *StructuredSyslogApplicationRecord) Reset()      { *m = StructuredSyslogApplicationRecord{} }
func (*StructuredSyslogApplicationRecord) ProtoMessage() {}
func (*StructuredSyslogApplicationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{317}
}
func (m *StructuredSyslogApplicationRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredSyslogApplicationRecord.Unmarshal(m, b)
}
func (m *StructuredSyslogApplicationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredSyslogApplicationRecord.Marshal(b, m, deterministic)
}
func (m *StructuredSyslogApplicationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredSyslogApplicationRecord.Merge(m, src)
}
func (m *StructuredSyslogApplicationRecord) XXX_Size() int {
	return xxx_messageInfo_StructuredSyslogApplicationRecord.Size(m)
}
func (m *StructuredSyslogApplicationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredSyslogApplicationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredSyslogApplicationRecord proto.InternalMessageInfo

func (m *StructuredSyslogApplicationRecord) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *StructuredSyslogApplicationRecord) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *StructuredSyslogApplicationRecord) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *StructuredSyslogApplicationRecord) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *StructuredSyslogApplicationRecord) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *StructuredSyslogApplicationRecord) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *StructuredSyslogApplicationRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StructuredSyslogApplicationRecord) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *StructuredSyslogApplicationRecord) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *StructuredSyslogApplicationRecord) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *StructuredSyslogApplicationRecord) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *StructuredSyslogApplicationRecord) GetStructuredSyslogAppCategory() string {
	if m != nil {
		return m.StructuredSyslogAppCategory
	}
	return ""
}

func (m *StructuredSyslogApplicationRecord) GetStructuredSyslogAppGroups() string {
	if m != nil {
		return m.StructuredSyslogAppGroups
	}
	return ""
}

func (m *StructuredSyslogApplicationRecord) GetStructuredSyslogAppRisk() string {
	if m != nil {
		return m.StructuredSyslogAppRisk
	}
	return ""
}

func (m *StructuredSyslogApplicationRecord) GetStructuredSyslogAppServiceTags() string {
	if m != nil {
		return m.StructuredSyslogAppServiceTags
	}
	return ""
}

func (m *StructuredSyslogApplicationRecord) GetStructuredSyslogAppSubcategory() string {
	if m != nil {
		return m.StructuredSyslogAppSubcategory
	}
	return ""
}

func (m *StructuredSyslogApplicationRecord) GetTagRefs() []*StructuredSyslogApplicationRecordTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type StructuredSyslogApplicationRecordTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *StructuredSyslogApplicationRecordTagRef) Reset() {
	*m = StructuredSyslogApplicationRecordTagRef{}
}
func (*StructuredSyslogApplicationRecordTagRef) ProtoMessage() {}
func (*StructuredSyslogApplicationRecordTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{318}
}
func (m *StructuredSyslogApplicationRecordTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredSyslogApplicationRecordTagRef.Unmarshal(m, b)
}
func (m *StructuredSyslogApplicationRecordTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredSyslogApplicationRecordTagRef.Marshal(b, m, deterministic)
}
func (m *StructuredSyslogApplicationRecordTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredSyslogApplicationRecordTagRef.Merge(m, src)
}
func (m *StructuredSyslogApplicationRecordTagRef) XXX_Size() int {
	return xxx_messageInfo_StructuredSyslogApplicationRecordTagRef.Size(m)
}
func (m *StructuredSyslogApplicationRecordTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredSyslogApplicationRecordTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredSyslogApplicationRecordTagRef proto.InternalMessageInfo

func (m *StructuredSyslogApplicationRecordTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *StructuredSyslogApplicationRecordTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *StructuredSyslogApplicationRecordTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type StructuredSyslogConfig struct {
	Annotations                        *KeyValuePairs                       `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion               int64                                `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                        string                               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                             []string                             `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                               string                               `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                            *IdPermsType                         `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                               string                               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                         string                               `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                         string                               `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                             *PermType2                           `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                               string                               `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TagRefs                            []*StructuredSyslogConfigTagRef      `protobuf:"bytes,1012,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	StructuredSyslogApplicationRecords []*StructuredSyslogApplicationRecord `protobuf:"bytes,2015,rep,name=structured_syslog_application_records,json=structuredSyslogApplicationRecords,proto3" json:"structured_syslog_application_records,omitempty" yaml:"structured_syslog_application_records,omitempty"`
	StructuredSyslogHostnameRecords    []*StructuredSyslogHostnameRecord    `protobuf:"bytes,2016,rep,name=structured_syslog_hostname_records,json=structuredSyslogHostnameRecords,proto3" json:"structured_syslog_hostname_records,omitempty" yaml:"structured_syslog_hostname_records,omitempty"`
	StructuredSyslogMessages           []*StructuredSyslogMessage           `protobuf:"bytes,2013,rep,name=structured_syslog_messages,json=structuredSyslogMessages,proto3" json:"structured_syslog_messages,omitempty" yaml:"structured_syslog_messages,omitempty"`
	StructuredSyslogSLAProfiles        []*StructuredSyslogSLAProfile        `protobuf:"bytes,2014,rep,name=structured_syslog_sla_profiles,json=structuredSyslogSlaProfiles,proto3" json:"structured_syslog_sla_profiles,omitempty" yaml:"structured_syslog_sla_profiles,omitempty"`
}

func (m *StructuredSyslogConfig) Reset()      { *m = StructuredSyslogConfig{} }
func (*StructuredSyslogConfig) ProtoMessage() {}
func (*StructuredSyslogConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{319}
}
func (m *StructuredSyslogConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredSyslogConfig.Unmarshal(m, b)
}
func (m *StructuredSyslogConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredSyslogConfig.Marshal(b, m, deterministic)
}
func (m *StructuredSyslogConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredSyslogConfig.Merge(m, src)
}
func (m *StructuredSyslogConfig) XXX_Size() int {
	return xxx_messageInfo_StructuredSyslogConfig.Size(m)
}
func (m *StructuredSyslogConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredSyslogConfig.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredSyslogConfig proto.InternalMessageInfo

func (m *StructuredSyslogConfig) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *StructuredSyslogConfig) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *StructuredSyslogConfig) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *StructuredSyslogConfig) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *StructuredSyslogConfig) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *StructuredSyslogConfig) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *StructuredSyslogConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StructuredSyslogConfig) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *StructuredSyslogConfig) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *StructuredSyslogConfig) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *StructuredSyslogConfig) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *StructuredSyslogConfig) GetTagRefs() []*StructuredSyslogConfigTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *StructuredSyslogConfig) GetStructuredSyslogApplicationRecords() []*StructuredSyslogApplicationRecord {
	if m != nil {
		return m.StructuredSyslogApplicationRecords
	}
	return nil
}

func (m *StructuredSyslogConfig) GetStructuredSyslogHostnameRecords() []*StructuredSyslogHostnameRecord {
	if m != nil {
		return m.StructuredSyslogHostnameRecords
	}
	return nil
}

func (m *StructuredSyslogConfig) GetStructuredSyslogMessages() []*StructuredSyslogMessage {
	if m != nil {
		return m.StructuredSyslogMessages
	}
	return nil
}

func (m *StructuredSyslogConfig) GetStructuredSyslogSLAProfiles() []*StructuredSyslogSLAProfile {
	if m != nil {
		return m.StructuredSyslogSLAProfiles
	}
	return nil
}

type StructuredSyslogConfigTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *StructuredSyslogConfigTagRef) Reset()      { *m = StructuredSyslogConfigTagRef{} }
func (*StructuredSyslogConfigTagRef) ProtoMessage() {}
func (*StructuredSyslogConfigTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{320}
}
func (m *StructuredSyslogConfigTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredSyslogConfigTagRef.Unmarshal(m, b)
}
func (m *StructuredSyslogConfigTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredSyslogConfigTagRef.Marshal(b, m, deterministic)
}
func (m *StructuredSyslogConfigTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredSyslogConfigTagRef.Merge(m, src)
}
func (m *StructuredSyslogConfigTagRef) XXX_Size() int {
	return xxx_messageInfo_StructuredSyslogConfigTagRef.Size(m)
}
func (m *StructuredSyslogConfigTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredSyslogConfigTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredSyslogConfigTagRef proto.InternalMessageInfo

func (m *StructuredSyslogConfigTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *StructuredSyslogConfigTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *StructuredSyslogConfigTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type StructuredSyslogHostnameRecord struct {
	Annotations                  *KeyValuePairs                          `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion         int64                                   `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                  string                                  `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                       []string                                `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                         string                                  `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                      *IdPermsType                            `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                         string                                  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                   string                                  `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                   string                                  `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                       *PermType2                              `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                         string                                  `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	StructuredSyslogDevice       string                                  `protobuf:"bytes,12,opt,name=structured_syslog_device,json=structuredSyslogDevice,proto3" json:"structured_syslog_device,omitempty" yaml:"structured_syslog_device,omitempty"`
	StructuredSyslogHostaddr     string                                  `protobuf:"bytes,13,opt,name=structured_syslog_hostaddr,json=structuredSyslogHostaddr,proto3" json:"structured_syslog_hostaddr,omitempty" yaml:"structured_syslog_hostaddr,omitempty"`
	StructuredSyslogHostnameTags string                                  `protobuf:"bytes,14,opt,name=structured_syslog_hostname_tags,json=structuredSyslogHostnameTags,proto3" json:"structured_syslog_hostname_tags,omitempty" yaml:"structured_syslog_hostname_tags,omitempty"`
	StructuredSyslogLinkmap      *StructuredSyslogLinkmap                `protobuf:"bytes,15,opt,name=structured_syslog_linkmap,json=structuredSyslogLinkmap,proto3" json:"structured_syslog_linkmap,omitempty" yaml:"structured_syslog_linkmap,omitempty"`
	StructuredSyslogLocation     string                                  `protobuf:"bytes,16,opt,name=structured_syslog_location,json=structuredSyslogLocation,proto3" json:"structured_syslog_location,omitempty" yaml:"structured_syslog_location,omitempty"`
	StructuredSyslogTenant       string                                  `protobuf:"bytes,17,opt,name=structured_syslog_tenant,json=structuredSyslogTenant,proto3" json:"structured_syslog_tenant,omitempty" yaml:"structured_syslog_tenant,omitempty"`
	TagRefs                      []*StructuredSyslogHostnameRecordTagRef `protobuf:"bytes,1018,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *StructuredSyslogHostnameRecord) Reset()      { *m = StructuredSyslogHostnameRecord{} }
func (*StructuredSyslogHostnameRecord) ProtoMessage() {}
func (*StructuredSyslogHostnameRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{321}
}
func (m *StructuredSyslogHostnameRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredSyslogHostnameRecord.Unmarshal(m, b)
}
func (m *StructuredSyslogHostnameRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredSyslogHostnameRecord.Marshal(b, m, deterministic)
}
func (m *StructuredSyslogHostnameRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredSyslogHostnameRecord.Merge(m, src)
}
func (m *StructuredSyslogHostnameRecord) XXX_Size() int {
	return xxx_messageInfo_StructuredSyslogHostnameRecord.Size(m)
}
func (m *StructuredSyslogHostnameRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredSyslogHostnameRecord.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredSyslogHostnameRecord proto.InternalMessageInfo

func (m *StructuredSyslogHostnameRecord) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *StructuredSyslogHostnameRecord) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *StructuredSyslogHostnameRecord) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *StructuredSyslogHostnameRecord) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *StructuredSyslogHostnameRecord) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *StructuredSyslogHostnameRecord) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *StructuredSyslogHostnameRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StructuredSyslogHostnameRecord) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *StructuredSyslogHostnameRecord) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *StructuredSyslogHostnameRecord) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *StructuredSyslogHostnameRecord) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *StructuredSyslogHostnameRecord) GetStructuredSyslogDevice() string {
	if m != nil {
		return m.StructuredSyslogDevice
	}
	return ""
}

func (m *StructuredSyslogHostnameRecord) GetStructuredSyslogHostaddr() string {
	if m != nil {
		return m.StructuredSyslogHostaddr
	}
	return ""
}

func (m *StructuredSyslogHostnameRecord) GetStructuredSyslogHostnameTags() string {
	if m != nil {
		return m.StructuredSyslogHostnameTags
	}
	return ""
}

func (m *StructuredSyslogHostnameRecord) GetStructuredSyslogLinkmap() *StructuredSyslogLinkmap {
	if m != nil {
		return m.StructuredSyslogLinkmap
	}
	return nil
}

func (m *StructuredSyslogHostnameRecord) GetStructuredSyslogLocation() string {
	if m != nil {
		return m.StructuredSyslogLocation
	}
	return ""
}

func (m *StructuredSyslogHostnameRecord) GetStructuredSyslogTenant() string {
	if m != nil {
		return m.StructuredSyslogTenant
	}
	return ""
}

func (m *StructuredSyslogHostnameRecord) GetTagRefs() []*StructuredSyslogHostnameRecordTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type StructuredSyslogHostnameRecordTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *StructuredSyslogHostnameRecordTagRef) Reset()      { *m = StructuredSyslogHostnameRecordTagRef{} }
func (*StructuredSyslogHostnameRecordTagRef) ProtoMessage() {}
func (*StructuredSyslogHostnameRecordTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{322}
}
func (m *StructuredSyslogHostnameRecordTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredSyslogHostnameRecordTagRef.Unmarshal(m, b)
}
func (m *StructuredSyslogHostnameRecordTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredSyslogHostnameRecordTagRef.Marshal(b, m, deterministic)
}
func (m *StructuredSyslogHostnameRecordTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredSyslogHostnameRecordTagRef.Merge(m, src)
}
func (m *StructuredSyslogHostnameRecordTagRef) XXX_Size() int {
	return xxx_messageInfo_StructuredSyslogHostnameRecordTagRef.Size(m)
}
func (m *StructuredSyslogHostnameRecordTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredSyslogHostnameRecordTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredSyslogHostnameRecordTagRef proto.InternalMessageInfo

func (m *StructuredSyslogHostnameRecordTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *StructuredSyslogHostnameRecordTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *StructuredSyslogHostnameRecordTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type StructuredSyslogMessage struct {
	Annotations                                    *KeyValuePairs                   `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion                           int64                            `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                                    string                           `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                                         []string                         `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                                           string                           `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                                        *IdPermsType                     `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                                           string                           `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                                     string                           `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                                     string                           `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                                         *PermType2                       `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                                           string                           `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	StructuredSyslogMessageForward                 string                           `protobuf:"bytes,12,opt,name=structured_syslog_message_forward,json=structuredSyslogMessageForward,proto3" json:"structured_syslog_message_forward,omitempty" yaml:"structured_syslog_message_forward,omitempty"`
	StructuredSyslogMessageIntegerFields           *FieldNamesList                  `protobuf:"bytes,13,opt,name=structured_syslog_message_integer_fields,json=structuredSyslogMessageIntegerFields,proto3" json:"structured_syslog_message_integer_fields,omitempty" yaml:"structured_syslog_message_integer_fields,omitempty"`
	StructuredSyslogMessageProcessAndStore         bool                             `protobuf:"varint,14,opt,name=structured_syslog_message_process_and_store,json=structuredSyslogMessageProcessAndStore,proto3" json:"structured_syslog_message_process_and_store,omitempty" yaml:"structured_syslog_message_process_and_store,omitempty"`
	StructuredSyslogMessageProcessAndSummarize     bool                             `protobuf:"varint,15,opt,name=structured_syslog_message_process_and_summarize,json=structuredSyslogMessageProcessAndSummarize,proto3" json:"structured_syslog_message_process_and_summarize,omitempty" yaml:"structured_syslog_message_process_and_summarize,omitempty"`
	StructuredSyslogMessageProcessAndSummarizeUser bool                             `protobuf:"varint,16,opt,name=structured_syslog_message_process_and_summarize_user,json=structuredSyslogMessageProcessAndSummarizeUser,proto3" json:"structured_syslog_message_process_and_summarize_user,omitempty" yaml:"structured_syslog_message_process_and_summarize_user,omitempty"`
	StructuredSyslogMessageTaggedFields            *FieldNamesList                  `protobuf:"bytes,17,opt,name=structured_syslog_message_tagged_fields,json=structuredSyslogMessageTaggedFields,proto3" json:"structured_syslog_message_tagged_fields,omitempty" yaml:"structured_syslog_message_tagged_fields,omitempty"`
	TagRefs                                        []*StructuredSyslogMessageTagRef `protobuf:"bytes,1018,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *StructuredSyslogMessage) Reset()      { *m = StructuredSyslogMessage{} }
func (*StructuredSyslogMessage) ProtoMessage() {}
func (*StructuredSyslogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{323}
}
func (m *StructuredSyslogMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredSyslogMessage.Unmarshal(m, b)
}
func (m *StructuredSyslogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredSyslogMessage.Marshal(b, m, deterministic)
}
func (m *StructuredSyslogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredSyslogMessage.Merge(m, src)
}
func (m *StructuredSyslogMessage) XXX_Size() int {
	return xxx_messageInfo_StructuredSyslogMessage.Size(m)
}
func (m *StructuredSyslogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredSyslogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredSyslogMessage proto.InternalMessageInfo

func (m *StructuredSyslogMessage) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *StructuredSyslogMessage) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *StructuredSyslogMessage) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *StructuredSyslogMessage) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *StructuredSyslogMessage) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *StructuredSyslogMessage) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *StructuredSyslogMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StructuredSyslogMessage) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *StructuredSyslogMessage) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *StructuredSyslogMessage) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *StructuredSyslogMessage) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *StructuredSyslogMessage) GetStructuredSyslogMessageForward() string {
	if m != nil {
		return m.StructuredSyslogMessageForward
	}
	return ""
}

func (m *StructuredSyslogMessage) GetStructuredSyslogMessageIntegerFields() *FieldNamesList {
	if m != nil {
		return m.StructuredSyslogMessageIntegerFields
	}
	return nil
}

func (m *StructuredSyslogMessage) GetStructuredSyslogMessageProcessAndStore() bool {
	if m != nil {
		return m.StructuredSyslogMessageProcessAndStore
	}
	return false
}

func (m *StructuredSyslogMessage) GetStructuredSyslogMessageProcessAndSummarize() bool {
	if m != nil {
		return m.StructuredSyslogMessageProcessAndSummarize
	}
	return false
}

func (m *StructuredSyslogMessage) GetStructuredSyslogMessageProcessAndSummarizeUser() bool {
	if m != nil {
		return m.StructuredSyslogMessageProcessAndSummarizeUser
	}
	return false
}

func (m *StructuredSyslogMessage) GetStructuredSyslogMessageTaggedFields() *FieldNamesList {
	if m != nil {
		return m.StructuredSyslogMessageTaggedFields
	}
	return nil
}

func (m *StructuredSyslogMessage) GetTagRefs() []*StructuredSyslogMessageTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type StructuredSyslogMessageTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *StructuredSyslogMessageTagRef) Reset()      { *m = StructuredSyslogMessageTagRef{} }
func (*StructuredSyslogMessageTagRef) ProtoMessage() {}
func (*StructuredSyslogMessageTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{324}
}
func (m *StructuredSyslogMessageTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredSyslogMessageTagRef.Unmarshal(m, b)
}
func (m *StructuredSyslogMessageTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredSyslogMessageTagRef.Marshal(b, m, deterministic)
}
func (m *StructuredSyslogMessageTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredSyslogMessageTagRef.Merge(m, src)
}
func (m *StructuredSyslogMessageTagRef) XXX_Size() int {
	return xxx_messageInfo_StructuredSyslogMessageTagRef.Size(m)
}
func (m *StructuredSyslogMessageTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredSyslogMessageTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredSyslogMessageTagRef proto.InternalMessageInfo

func (m *StructuredSyslogMessageTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *StructuredSyslogMessageTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *StructuredSyslogMessageTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type StructuredSyslogSLAProfile struct {
	Annotations               *KeyValuePairs                      `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion      int64                               `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName               string                              `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                    []string                            `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                      string                              `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                   *IdPermsType                        `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                      string                              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                string                              `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                string                              `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                    *PermType2                          `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                      string                              `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	StructuredSyslogSLAParams string                              `protobuf:"bytes,12,opt,name=structured_syslog_sla_params,json=structuredSyslogSlaParams,proto3" json:"structured_syslog_sla_params,omitempty" yaml:"structured_syslog_sla_params,omitempty"`
	TagRefs                   []*StructuredSyslogSLAProfileTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *StructuredSyslogSLAProfile) Reset()      { *m = StructuredSyslogSLAProfile{} }
func (*StructuredSyslogSLAProfile) ProtoMessage() {}
func (*StructuredSyslogSLAProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{325}
}
func (m *StructuredSyslogSLAProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredSyslogSLAProfile.Unmarshal(m, b)
}
func (m *StructuredSyslogSLAProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredSyslogSLAProfile.Marshal(b, m, deterministic)
}
func (m *StructuredSyslogSLAProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredSyslogSLAProfile.Merge(m, src)
}
func (m *StructuredSyslogSLAProfile) XXX_Size() int {
	return xxx_messageInfo_StructuredSyslogSLAProfile.Size(m)
}
func (m *StructuredSyslogSLAProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredSyslogSLAProfile.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredSyslogSLAProfile proto.InternalMessageInfo

func (m *StructuredSyslogSLAProfile) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *StructuredSyslogSLAProfile) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *StructuredSyslogSLAProfile) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *StructuredSyslogSLAProfile) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *StructuredSyslogSLAProfile) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *StructuredSyslogSLAProfile) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *StructuredSyslogSLAProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StructuredSyslogSLAProfile) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *StructuredSyslogSLAProfile) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *StructuredSyslogSLAProfile) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *StructuredSyslogSLAProfile) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *StructuredSyslogSLAProfile) GetStructuredSyslogSLAParams() string {
	if m != nil {
		return m.StructuredSyslogSLAParams
	}
	return ""
}

func (m *StructuredSyslogSLAProfile) GetTagRefs() []*StructuredSyslogSLAProfileTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type StructuredSyslogSLAProfileTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *StructuredSyslogSLAProfileTagRef) Reset()      { *m = StructuredSyslogSLAProfileTagRef{} }
func (*StructuredSyslogSLAProfileTagRef) ProtoMessage() {}
func (*StructuredSyslogSLAProfileTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{326}
}
func (m *StructuredSyslogSLAProfileTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredSyslogSLAProfileTagRef.Unmarshal(m, b)
}
func (m *StructuredSyslogSLAProfileTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredSyslogSLAProfileTagRef.Marshal(b, m, deterministic)
}
func (m *StructuredSyslogSLAProfileTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredSyslogSLAProfileTagRef.Merge(m, src)
}
func (m *StructuredSyslogSLAProfileTagRef) XXX_Size() int {
	return xxx_messageInfo_StructuredSyslogSLAProfileTagRef.Size(m)
}
func (m *StructuredSyslogSLAProfileTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredSyslogSLAProfileTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredSyslogSLAProfileTagRef proto.InternalMessageInfo

func (m *StructuredSyslogSLAProfileTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *StructuredSyslogSLAProfileTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *StructuredSyslogSLAProfileTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type SubCluster struct {
	Annotations           *KeyValuePairs      `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion  int64               `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName           string              `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                []string            `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                  string              `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms               *IdPermsType        `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                  string              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType            string              `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID            string              `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                *PermType2          `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                  string              `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	SubClusterAsn         int64               `protobuf:"varint,12,opt,name=sub_cluster_asn,json=subClusterAsn,proto3" json:"sub_cluster_asn,omitempty" yaml:"sub_cluster_asn,omitempty"`
	SubClusterID          int64               `protobuf:"varint,13,opt,name=sub_cluster_id,json=subClusterId,proto3" json:"sub_cluster_id,omitempty" yaml:"sub_cluster_id,omitempty"`
	TagRefs               []*SubClusterTagRef `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	BGPRouterBackRefs     []*BGPRouter        `protobuf:"bytes,3015,rep,name=bgp_router_back_refs,json=bgpRouterBackRefs,proto3" json:"bgp_router_back_refs,omitempty" yaml:"bgp_router_back_refs,omitempty"`
	VirtualRouterBackRefs []*VirtualRouter    `protobuf:"bytes,3016,rep,name=virtual_router_back_refs,json=virtualRouterBackRefs,proto3" json:"virtual_router_back_refs,omitempty" yaml:"virtual_router_back_refs,omitempty"`
}

func (m *SubCluster) Reset()      { *m = SubCluster{} }
func (*SubCluster) ProtoMessage() {}
func (*SubCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{327}
}
func (m *SubCluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubCluster.Unmarshal(m, b)
}
func (m *SubCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubCluster.Marshal(b, m, deterministic)
}
func (m *SubCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubCluster.Merge(m, src)
}
func (m *SubCluster) XXX_Size() int {
	return xxx_messageInfo_SubCluster.Size(m)
}
func (m *SubCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_SubCluster.DiscardUnknown(m)
}

var xxx_messageInfo_SubCluster proto.InternalMessageInfo

func (m *SubCluster) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *SubCluster) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *SubCluster) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *SubCluster) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *SubCluster) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *SubCluster) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *SubCluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubCluster) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *SubCluster) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *SubCluster) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *SubCluster) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *SubCluster) GetSubClusterAsn() int64 {
	if m != nil {
		return m.SubClusterAsn
	}
	return 0
}

func (m *SubCluster) GetSubClusterID() int64 {
	if m != nil {
		return m.SubClusterID
	}
	return 0
}

func (m *SubCluster) GetTagRefs() []*SubClusterTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *SubCluster) GetBGPRouterBackRefs() []*BGPRouter {
	if m != nil {
		return m.BGPRouterBackRefs
	}
	return nil
}

func (m *SubCluster) GetVirtualRouterBackRefs() []*VirtualRouter {
	if m != nil {
		return m.VirtualRouterBackRefs
	}
	return nil
}

type SubClusterTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *SubClusterTagRef) Reset()      { *m = SubClusterTagRef{} }
func (*SubClusterTagRef) ProtoMessage() {}
func (*SubClusterTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{328}
}
func (m *SubClusterTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubClusterTagRef.Unmarshal(m, b)
}
func (m *SubClusterTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubClusterTagRef.Marshal(b, m, deterministic)
}
func (m *SubClusterTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubClusterTagRef.Merge(m, src)
}
func (m *SubClusterTagRef) XXX_Size() int {
	return xxx_messageInfo_SubClusterTagRef.Size(m)
}
func (m *SubClusterTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_SubClusterTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_SubClusterTagRef proto.InternalMessageInfo

func (m *SubClusterTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *SubClusterTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SubClusterTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type Subnet struct {
	Annotations                 *KeyValuePairs                      `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion        int64                               `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                 string                              `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                      []string                            `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                        string                              `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                     *IdPermsType                        `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                        string                              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                  string                              `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                  string                              `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                      *PermType2                          `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                        string                              `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	SubnetIPPrefix              *SubnetType                         `protobuf:"bytes,12,opt,name=subnet_ip_prefix,json=subnetIpPrefix,proto3" json:"subnet_ip_prefix,omitempty" yaml:"subnet_ip_prefix,omitempty"`
	TagRefs                     []*SubnetTagRef                     `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceRefs []*SubnetVirtualMachineInterfaceRef `protobuf:"bytes,1014,rep,name=virtual_machine_interface_refs,json=virtualMachineInterfaceRefs,proto3" json:"virtual_machine_interface_refs,omitempty" yaml:"virtual_machine_interface_refs,omitempty"`
}

func (m *Subnet) Reset()      { *m = Subnet{} }
func (*Subnet) ProtoMessage() {}
func (*Subnet) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{329}
}
func (m *Subnet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subnet.Unmarshal(m, b)
}
func (m *Subnet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subnet.Marshal(b, m, deterministic)
}
func (m *Subnet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subnet.Merge(m, src)
}
func (m *Subnet) XXX_Size() int {
	return xxx_messageInfo_Subnet.Size(m)
}
func (m *Subnet) XXX_DiscardUnknown() {
	xxx_messageInfo_Subnet.DiscardUnknown(m)
}

var xxx_messageInfo_Subnet proto.InternalMessageInfo

func (m *Subnet) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Subnet) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *Subnet) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Subnet) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *Subnet) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Subnet) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *Subnet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subnet) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *Subnet) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *Subnet) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *Subnet) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Subnet) GetSubnetIPPrefix() *SubnetType {
	if m != nil {
		return m.SubnetIPPrefix
	}
	return nil
}

func (m *Subnet) GetTagRefs() []*SubnetTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *Subnet) GetVirtualMachineInterfaceRefs() []*SubnetVirtualMachineInterfaceRef {
	if m != nil {
		return m.VirtualMachineInterfaceRefs
	}
	return nil
}

type SubnetTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *SubnetTagRef) Reset()      { *m = SubnetTagRef{} }
func (*SubnetTagRef) ProtoMessage() {}
func (*SubnetTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{330}
}
func (m *SubnetTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubnetTagRef.Unmarshal(m, b)
}
func (m *SubnetTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubnetTagRef.Marshal(b, m, deterministic)
}
func (m *SubnetTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetTagRef.Merge(m, src)
}
func (m *SubnetTagRef) XXX_Size() int {
	return xxx_messageInfo_SubnetTagRef.Size(m)
}
func (m *SubnetTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetTagRef proto.InternalMessageInfo

func (m *SubnetTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *SubnetTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SubnetTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type SubnetVirtualMachineInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *SubnetVirtualMachineInterfaceRef) Reset()      { *m = SubnetVirtualMachineInterfaceRef{} }
func (*SubnetVirtualMachineInterfaceRef) ProtoMessage() {}
func (*SubnetVirtualMachineInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{331}
}
func (m *SubnetVirtualMachineInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubnetVirtualMachineInterfaceRef.Unmarshal(m, b)
}
func (m *SubnetVirtualMachineInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubnetVirtualMachineInterfaceRef.Marshal(b, m, deterministic)
}
func (m *SubnetVirtualMachineInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetVirtualMachineInterfaceRef.Merge(m, src)
}
func (m *SubnetVirtualMachineInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_SubnetVirtualMachineInterfaceRef.Size(m)
}
func (m *SubnetVirtualMachineInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetVirtualMachineInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetVirtualMachineInterfaceRef proto.InternalMessageInfo

func (m *SubnetVirtualMachineInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *SubnetVirtualMachineInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SubnetVirtualMachineInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type Tag struct {
	Annotations                               *KeyValuePairs                       `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion                      int64                                `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                               string                               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                                    []string                             `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                                      string                               `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                                   *IdPermsType                         `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                                      string                               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                                string                               `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                                string                               `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                                    *PermType2                           `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                                      string                               `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TagID                                     string                               `protobuf:"bytes,12,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty" yaml:"tag_id,omitempty"`
	TagPredefined                             bool                                 `protobuf:"varint,13,opt,name=tag_predefined,json=tagPredefined,proto3" json:"tag_predefined,omitempty" yaml:"tag_predefined,omitempty"`
	TagTypeName                               string                               `protobuf:"bytes,14,opt,name=tag_type_name,json=tagTypeName,proto3" json:"tag_type_name,omitempty" yaml:"tag_type_name,omitempty"`
	TagValue                                  string                               `protobuf:"bytes,15,opt,name=tag_value,json=tagValue,proto3" json:"tag_value,omitempty" yaml:"tag_value,omitempty"`
	TagRefs                                   []*TagTagRef                         `protobuf:"bytes,1016,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	TagTypeRefs                               []*TagTagTypeRef                     `protobuf:"bytes,1017,rep,name=tag_type_refs,json=tagTypeRefs,proto3" json:"tag_type_refs,omitempty" yaml:"tag_type_refs,omitempty"`
	AccessControlListBackRefs                 []*AccessControlList                 `protobuf:"bytes,3059,rep,name=access_control_list_back_refs,json=accessControlListBackRefs,proto3" json:"access_control_list_back_refs,omitempty" yaml:"access_control_list_back_refs,omitempty"`
	AddressGroupBackRefs                      []*AddressGroup                      `protobuf:"bytes,3079,rep,name=address_group_back_refs,json=addressGroupBackRefs,proto3" json:"address_group_back_refs,omitempty" yaml:"address_group_back_refs,omitempty"`
	AlarmBackRefs                             []*Alarm                             `protobuf:"bytes,3043,rep,name=alarm_back_refs,json=alarmBackRefs,proto3" json:"alarm_back_refs,omitempty" yaml:"alarm_back_refs,omitempty"`
	AliasIPBackRefs                           []*AliasIP                           `protobuf:"bytes,3065,rep,name=alias_ip_back_refs,json=aliasIpBackRefs,proto3" json:"alias_ip_back_refs,omitempty" yaml:"alias_ip_back_refs,omitempty"`
	AliasIPPoolBackRefs                       []*AliasIPPool                       `protobuf:"bytes,3080,rep,name=alias_ip_pool_back_refs,json=aliasIpPoolBackRefs,proto3" json:"alias_ip_pool_back_refs,omitempty" yaml:"alias_ip_pool_back_refs,omitempty"`
	AnalyticsAlarmNodeBackRefs                []*AnalyticsAlarmNode                `protobuf:"bytes,3130,rep,name=analytics_alarm_node_back_refs,json=analyticsAlarmNodeBackRefs,proto3" json:"analytics_alarm_node_back_refs,omitempty" yaml:"analytics_alarm_node_back_refs,omitempty"`
	AnalyticsNodeBackRefs                     []*AnalyticsNode                     `protobuf:"bytes,3108,rep,name=analytics_node_back_refs,json=analyticsNodeBackRefs,proto3" json:"analytics_node_back_refs,omitempty" yaml:"analytics_node_back_refs,omitempty"`
	AnalyticsSNMPNodeBackRefs                 []*AnalyticsSNMPNode                 `protobuf:"bytes,3118,rep,name=analytics_snmp_node_back_refs,json=analyticsSnmpNodeBackRefs,proto3" json:"analytics_snmp_node_back_refs,omitempty" yaml:"analytics_snmp_node_back_refs,omitempty"`
	APIAccessListBackRefs                     []*APIAccessList                     `protobuf:"bytes,3129,rep,name=api_access_list_back_refs,json=apiAccessListBackRefs,proto3" json:"api_access_list_back_refs,omitempty" yaml:"api_access_list_back_refs,omitempty"`
	ApplicationPolicySetBackRefs              []*ApplicationPolicySet              `protobuf:"bytes,3115,rep,name=application_policy_set_back_refs,json=applicationPolicySetBackRefs,proto3" json:"application_policy_set_back_refs,omitempty" yaml:"application_policy_set_back_refs,omitempty"`
	BGPAsAServiceBackRefs                     []*BGPAsAService                     `protobuf:"bytes,3061,rep,name=bgp_as_a_service_back_refs,json=bgpAsAServiceBackRefs,proto3" json:"bgp_as_a_service_back_refs,omitempty" yaml:"bgp_as_a_service_back_refs,omitempty"`
	BGPRouterBackRefs                         []*BGPRouter                         `protobuf:"bytes,3023,rep,name=bgp_router_back_refs,json=bgpRouterBackRefs,proto3" json:"bgp_router_back_refs,omitempty" yaml:"bgp_router_back_refs,omitempty"`
	BGPVPNBackRefs                            []*BGPVPN                            `protobuf:"bytes,3044,rep,name=bgpvpn_back_refs,json=bgpvpnBackRefs,proto3" json:"bgpvpn_back_refs,omitempty" yaml:"bgpvpn_back_refs,omitempty"`
	BridgeDomainBackRefs                      []*BridgeDomain                      `protobuf:"bytes,3056,rep,name=bridge_domain_back_refs,json=bridgeDomainBackRefs,proto3" json:"bridge_domain_back_refs,omitempty" yaml:"bridge_domain_back_refs,omitempty"`
	CardBackRefs                              []*Card                              `protobuf:"bytes,3095,rep,name=card_back_refs,json=cardBackRefs,proto3" json:"card_back_refs,omitempty" yaml:"card_back_refs,omitempty"`
	CliConfigBackRefs                         []*CliConfig                         `protobuf:"bytes,3036,rep,name=cli_config_back_refs,json=cliConfigBackRefs,proto3" json:"cli_config_back_refs,omitempty" yaml:"cli_config_back_refs,omitempty"`
	ConfigDatabaseNodeBackRefs                []*ConfigDatabaseNode                `protobuf:"bytes,3037,rep,name=config_database_node_back_refs,json=configDatabaseNodeBackRefs,proto3" json:"config_database_node_back_refs,omitempty" yaml:"config_database_node_back_refs,omitempty"`
	ConfigNodeBackRefs                        []*ConfigNode                        `protobuf:"bytes,3104,rep,name=config_node_back_refs,json=configNodeBackRefs,proto3" json:"config_node_back_refs,omitempty" yaml:"config_node_back_refs,omitempty"`
	ConfigRootBackRefs                        []*ConfigRoot                        `protobuf:"bytes,3075,rep,name=config_root_back_refs,json=configRootBackRefs,proto3" json:"config_root_back_refs,omitempty" yaml:"config_root_back_refs,omitempty"`
	ControlNodeZoneBackRefs                   []*ControlNodeZone                   `protobuf:"bytes,3045,rep,name=control_node_zone_back_refs,json=controlNodeZoneBackRefs,proto3" json:"control_node_zone_back_refs,omitempty" yaml:"control_node_zone_back_refs,omitempty"`
	CustomerAttachmentBackRefs                []*CustomerAttachment                `protobuf:"bytes,3122,rep,name=customer_attachment_back_refs,json=customerAttachmentBackRefs,proto3" json:"customer_attachment_back_refs,omitempty" yaml:"customer_attachment_back_refs,omitempty"`
	DataCenterInterconnectBackRefs            []*DataCenterInterconnect            `protobuf:"bytes,3131,rep,name=data_center_interconnect_back_refs,json=dataCenterInterconnectBackRefs,proto3" json:"data_center_interconnect_back_refs,omitempty" yaml:"data_center_interconnect_back_refs,omitempty"`
	DatabaseNodeBackRefs                      []*DatabaseNode                      `protobuf:"bytes,3123,rep,name=database_node_back_refs,json=databaseNodeBackRefs,proto3" json:"database_node_back_refs,omitempty" yaml:"database_node_back_refs,omitempty"`
	DeviceChassisBackRefs                     []*DeviceChassis                     `protobuf:"bytes,3126,rep,name=device_chassis_back_refs,json=deviceChassisBackRefs,proto3" json:"device_chassis_back_refs,omitempty" yaml:"device_chassis_back_refs,omitempty"`
	DeviceFunctionalGroupBackRefs             []*DeviceFunctionalGroup             `protobuf:"bytes,3051,rep,name=device_functional_group_back_refs,json=deviceFunctionalGroupBackRefs,proto3" json:"device_functional_group_back_refs,omitempty" yaml:"device_functional_group_back_refs,omitempty"`
	DeviceImageBackRefs                       []*DeviceImage                       `protobuf:"bytes,3101,rep,name=device_image_back_refs,json=deviceImageBackRefs,proto3" json:"device_image_back_refs,omitempty" yaml:"device_image_back_refs,omitempty"`
	DevicemgrNodeBackRefs                     []*DevicemgrNode                     `protobuf:"bytes,3096,rep,name=devicemgr_node_back_refs,json=devicemgrNodeBackRefs,proto3" json:"devicemgr_node_back_refs,omitempty" yaml:"devicemgr_node_back_refs,omitempty"`
	DiscoveryServiceAssignmentBackRefs        []*DiscoveryServiceAssignment        `protobuf:"bytes,3076,rep,name=discovery_service_assignment_back_refs,json=discoveryServiceAssignmentBackRefs,proto3" json:"discovery_service_assignment_back_refs,omitempty" yaml:"discovery_service_assignment_back_refs,omitempty"`
	DomainBackRefs                            []*Domain                            `protobuf:"bytes,3081,rep,name=domain_back_refs,json=domainBackRefs,proto3" json:"domain_back_refs,omitempty" yaml:"domain_back_refs,omitempty"`
	DsaRuleBackRefs                           []*DsaRule                           `protobuf:"bytes,3018,rep,name=dsa_rule_back_refs,json=dsaRuleBackRefs,proto3" json:"dsa_rule_back_refs,omitempty" yaml:"dsa_rule_back_refs,omitempty"`
	E2ServiceProviderBackRefs                 []*E2ServiceProvider                 `protobuf:"bytes,3066,rep,name=e2_service_provider_back_refs,json=e2ServiceProviderBackRefs,proto3" json:"e2_service_provider_back_refs,omitempty" yaml:"e2_service_provider_back_refs,omitempty"`
	FabricBackRefs                            []*Fabric                            `protobuf:"bytes,3134,rep,name=fabric_back_refs,json=fabricBackRefs,proto3" json:"fabric_back_refs,omitempty" yaml:"fabric_back_refs,omitempty"`
	FabricNamespaceBackRefs                   []*FabricNamespace                   `protobuf:"bytes,3052,rep,name=fabric_namespace_back_refs,json=fabricNamespaceBackRefs,proto3" json:"fabric_namespace_back_refs,omitempty" yaml:"fabric_namespace_back_refs,omitempty"`
	FeatureBackRefs                           []*Feature                           `protobuf:"bytes,3087,rep,name=feature_back_refs,json=featureBackRefs,proto3" json:"feature_back_refs,omitempty" yaml:"feature_back_refs,omitempty"`
	FeatureConfigBackRefs                     []*FeatureConfig                     `protobuf:"bytes,3135,rep,name=feature_config_back_refs,json=featureConfigBackRefs,proto3" json:"feature_config_back_refs,omitempty" yaml:"feature_config_back_refs,omitempty"`
	FeatureFlagBackRefs                       []*FeatureFlag                       `protobuf:"bytes,3132,rep,name=feature_flag_back_refs,json=featureFlagBackRefs,proto3" json:"feature_flag_back_refs,omitempty" yaml:"feature_flag_back_refs,omitempty"`
	FirewallPolicyBackRefs                    []*FirewallPolicy                    `protobuf:"bytes,3028,rep,name=firewall_policy_back_refs,json=firewallPolicyBackRefs,proto3" json:"firewall_policy_back_refs,omitempty" yaml:"firewall_policy_back_refs,omitempty"`
	FirewallRuleBackRefs                      []*FirewallRule                      `protobuf:"bytes,3039,rep,name=firewall_rule_back_refs,json=firewallRuleBackRefs,proto3" json:"firewall_rule_back_refs,omitempty" yaml:"firewall_rule_back_refs,omitempty"`
	FloatingIPBackRefs                        []*FloatingIP                        `protobuf:"bytes,3040,rep,name=floating_ip_back_refs,json=floatingIpBackRefs,proto3" json:"floating_ip_back_refs,omitempty" yaml:"floating_ip_back_refs,omitempty"`
	FloatingIPPoolBackRefs                    []*FloatingIPPool                    `protobuf:"bytes,3057,rep,name=floating_ip_pool_back_refs,json=floatingIpPoolBackRefs,proto3" json:"floating_ip_pool_back_refs,omitempty" yaml:"floating_ip_pool_back_refs,omitempty"`
	FlowNodeBackRefs                          []*FlowNode                          `protobuf:"bytes,3062,rep,name=flow_node_back_refs,json=flowNodeBackRefs,proto3" json:"flow_node_back_refs,omitempty" yaml:"flow_node_back_refs,omitempty"`
	ForwardingClassBackRefs                   []*ForwardingClass                   `protobuf:"bytes,3082,rep,name=forwarding_class_back_refs,json=forwardingClassBackRefs,proto3" json:"forwarding_class_back_refs,omitempty" yaml:"forwarding_class_back_refs,omitempty"`
	GlobalAnalyticsConfigBackRefs             []*GlobalAnalyticsConfig             `protobuf:"bytes,3053,rep,name=global_analytics_config_back_refs,json=globalAnalyticsConfigBackRefs,proto3" json:"global_analytics_config_back_refs,omitempty" yaml:"global_analytics_config_back_refs,omitempty"`
	GlobalQosConfigBackRefs                   []*GlobalQosConfig                   `protobuf:"bytes,3083,rep,name=global_qos_config_back_refs,json=globalQosConfigBackRefs,proto3" json:"global_qos_config_back_refs,omitempty" yaml:"global_qos_config_back_refs,omitempty"`
	GlobalSystemConfigBackRefs                []*GlobalSystemConfig                `protobuf:"bytes,3097,rep,name=global_system_config_back_refs,json=globalSystemConfigBackRefs,proto3" json:"global_system_config_back_refs,omitempty" yaml:"global_system_config_back_refs,omitempty"`
	GlobalVrouterConfigBackRefs               []*GlobalVrouterConfig               `protobuf:"bytes,3113,rep,name=global_vrouter_config_back_refs,json=globalVrouterConfigBackRefs,proto3" json:"global_vrouter_config_back_refs,omitempty" yaml:"global_vrouter_config_back_refs,omitempty"`
	HardwareBackRefs                          []*Hardware                          `protobuf:"bytes,3136,rep,name=hardware_back_refs,json=hardwareBackRefs,proto3" json:"hardware_back_refs,omitempty" yaml:"hardware_back_refs,omitempty"`
	HardwareInventoryBackRefs                 []*HardwareInventory                 `protobuf:"bytes,3030,rep,name=hardware_inventory_back_refs,json=hardwareInventoryBackRefs,proto3" json:"hardware_inventory_back_refs,omitempty" yaml:"hardware_inventory_back_refs,omitempty"`
	HostBasedServiceBackRefs                  []*HostBasedService                  `protobuf:"bytes,3031,rep,name=host_based_service_back_refs,json=hostBasedServiceBackRefs,proto3" json:"host_based_service_back_refs,omitempty" yaml:"host_based_service_back_refs,omitempty"`
	InstanceIPBackRefs                        []*InstanceIP                        `protobuf:"bytes,3067,rep,name=instance_ip_back_refs,json=instanceIpBackRefs,proto3" json:"instance_ip_back_refs,omitempty" yaml:"instance_ip_back_refs,omitempty"`
	IntentMapBackRefs                         []*IntentMap                         `protobuf:"bytes,3088,rep,name=intent_map_back_refs,json=intentMapBackRefs,proto3" json:"intent_map_back_refs,omitempty" yaml:"intent_map_back_refs,omitempty"`
	InterfaceRouteTableBackRefs               []*InterfaceRouteTable               `protobuf:"bytes,3048,rep,name=interface_route_table_back_refs,json=interfaceRouteTableBackRefs,proto3" json:"interface_route_table_back_refs,omitempty" yaml:"interface_route_table_back_refs,omitempty"`
	JobTemplateBackRefs                       []*JobTemplate                       `protobuf:"bytes,3029,rep,name=job_template_back_refs,json=jobTemplateBackRefs,proto3" json:"job_template_back_refs,omitempty" yaml:"job_template_back_refs,omitempty"`
	LinkAggregationGroupBackRefs              []*LinkAggregationGroup              `protobuf:"bytes,3068,rep,name=link_aggregation_group_back_refs,json=linkAggregationGroupBackRefs,proto3" json:"link_aggregation_group_back_refs,omitempty" yaml:"link_aggregation_group_back_refs,omitempty"`
	LoadbalancerBackRefs                      []*Loadbalancer                      `protobuf:"bytes,3038,rep,name=loadbalancer_back_refs,json=loadbalancerBackRefs,proto3" json:"loadbalancer_back_refs,omitempty" yaml:"loadbalancer_back_refs,omitempty"`
	LoadbalancerHealthmonitorBackRefs         []*LoadbalancerHealthmonitor         `protobuf:"bytes,3049,rep,name=loadbalancer_healthmonitor_back_refs,json=loadbalancerHealthmonitorBackRefs,proto3" json:"loadbalancer_healthmonitor_back_refs,omitempty" yaml:"loadbalancer_healthmonitor_back_refs,omitempty"`
	LoadbalancerListenerBackRefs              []*LoadbalancerListener              `protobuf:"bytes,3019,rep,name=loadbalancer_listener_back_refs,json=loadbalancerListenerBackRefs,proto3" json:"loadbalancer_listener_back_refs,omitempty" yaml:"loadbalancer_listener_back_refs,omitempty"`
	LoadbalancerMemberBackRefs                []*LoadbalancerMember                `protobuf:"bytes,3024,rep,name=loadbalancer_member_back_refs,json=loadbalancerMemberBackRefs,proto3" json:"loadbalancer_member_back_refs,omitempty" yaml:"loadbalancer_member_back_refs,omitempty"`
	LoadbalancerPoolBackRefs                  []*LoadbalancerPool                  `protobuf:"bytes,3098,rep,name=loadbalancer_pool_back_refs,json=loadbalancerPoolBackRefs,proto3" json:"loadbalancer_pool_back_refs,omitempty" yaml:"loadbalancer_pool_back_refs,omitempty"`
	LogicalInterfaceBackRefs                  []*LogicalInterface                  `protobuf:"bytes,3109,rep,name=logical_interface_back_refs,json=logicalInterfaceBackRefs,proto3" json:"logical_interface_back_refs,omitempty" yaml:"logical_interface_back_refs,omitempty"`
	LogicalRouterBackRefs                     []*LogicalRouter                     `protobuf:"bytes,3032,rep,name=logical_router_back_refs,json=logicalRouterBackRefs,proto3" json:"logical_router_back_refs,omitempty" yaml:"logical_router_back_refs,omitempty"`
	MulticastPolicyBackRefs                   []*MulticastPolicy                   `protobuf:"bytes,3050,rep,name=multicast_policy_back_refs,json=multicastPolicyBackRefs,proto3" json:"multicast_policy_back_refs,omitempty" yaml:"multicast_policy_back_refs,omitempty"`
	NamespaceBackRefs                         []*Namespace                         `protobuf:"bytes,3119,rep,name=namespace_back_refs,json=namespaceBackRefs,proto3" json:"namespace_back_refs,omitempty" yaml:"namespace_back_refs,omitempty"`
	NetworkDeviceConfigBackRefs               []*NetworkDeviceConfig               `protobuf:"bytes,3089,rep,name=network_device_config_back_refs,json=networkDeviceConfigBackRefs,proto3" json:"network_device_config_back_refs,omitempty" yaml:"network_device_config_back_refs,omitempty"`
	NetworkIpamBackRefs                       []*NetworkIpam                       `protobuf:"bytes,3102,rep,name=network_ipam_back_refs,json=networkIpamBackRefs,proto3" json:"network_ipam_back_refs,omitempty" yaml:"network_ipam_back_refs,omitempty"`
	NetworkPolicyBackRefs                     []*NetworkPolicy                     `protobuf:"bytes,3090,rep,name=network_policy_back_refs,json=networkPolicyBackRefs,proto3" json:"network_policy_back_refs,omitempty" yaml:"network_policy_back_refs,omitempty"`
	NodeBackRefs                              []*Node                              `protobuf:"bytes,3073,rep,name=node_back_refs,json=nodeBackRefs,proto3" json:"node_back_refs,omitempty" yaml:"node_back_refs,omitempty"`
	NodeProfileBackRefs                       []*NodeProfile                       `protobuf:"bytes,3127,rep,name=node_profile_back_refs,json=nodeProfileBackRefs,proto3" json:"node_profile_back_refs,omitempty" yaml:"node_profile_back_refs,omitempty"`
	OverlayRoleBackRefs                       []*OverlayRole                       `protobuf:"bytes,3063,rep,name=overlay_role_back_refs,json=overlayRoleBackRefs,proto3" json:"overlay_role_back_refs,omitempty" yaml:"overlay_role_back_refs,omitempty"`
	PeeringPolicyBackRefs                     []*PeeringPolicy                     `protobuf:"bytes,3099,rep,name=peering_policy_back_refs,json=peeringPolicyBackRefs,proto3" json:"peering_policy_back_refs,omitempty" yaml:"peering_policy_back_refs,omitempty"`
	PhysicalInterfaceBackRefs                 []*PhysicalInterface                 `protobuf:"bytes,3124,rep,name=physical_interface_back_refs,json=physicalInterfaceBackRefs,proto3" json:"physical_interface_back_refs,omitempty" yaml:"physical_interface_back_refs,omitempty"`
	PhysicalRoleBackRefs                      []*PhysicalRole                      `protobuf:"bytes,3041,rep,name=physical_role_back_refs,json=physicalRoleBackRefs,proto3" json:"physical_role_back_refs,omitempty" yaml:"physical_role_back_refs,omitempty"`
	PhysicalRouterBackRefs                    []*PhysicalRouter                    `protobuf:"bytes,3137,rep,name=physical_router_back_refs,json=physicalRouterBackRefs,proto3" json:"physical_router_back_refs,omitempty" yaml:"physical_router_back_refs,omitempty"`
	PolicyManagementBackRefs                  []*PolicyManagement                  `protobuf:"bytes,3025,rep,name=policy_management_back_refs,json=policyManagementBackRefs,proto3" json:"policy_management_back_refs,omitempty" yaml:"policy_management_back_refs,omitempty"`
	PortBackRefs                              []*Port                              `protobuf:"bytes,3091,rep,name=port_back_refs,json=portBackRefs,proto3" json:"port_back_refs,omitempty" yaml:"port_back_refs,omitempty"`
	PortGroupBackRefs                         []*PortGroup                         `protobuf:"bytes,3033,rep,name=port_group_back_refs,json=portGroupBackRefs,proto3" json:"port_group_back_refs,omitempty" yaml:"port_group_back_refs,omitempty"`
	PortProfileBackRefs                       []*PortProfile                       `protobuf:"bytes,3020,rep,name=port_profile_back_refs,json=portProfileBackRefs,proto3" json:"port_profile_back_refs,omitempty" yaml:"port_profile_back_refs,omitempty"`
	PortTupleBackRefs                         []*PortTuple                         `protobuf:"bytes,3105,rep,name=port_tuple_back_refs,json=portTupleBackRefs,proto3" json:"port_tuple_back_refs,omitempty" yaml:"port_tuple_back_refs,omitempty"`
	ProjectBackRefs                           []*Project                           `protobuf:"bytes,3128,rep,name=project_back_refs,json=projectBackRefs,proto3" json:"project_back_refs,omitempty" yaml:"project_back_refs,omitempty"`
	ProviderAttachmentBackRefs                []*ProviderAttachment                `protobuf:"bytes,3106,rep,name=provider_attachment_back_refs,json=providerAttachmentBackRefs,proto3" json:"provider_attachment_back_refs,omitempty" yaml:"provider_attachment_back_refs,omitempty"`
	QosConfigBackRefs                         []*QosConfig                         `protobuf:"bytes,3120,rep,name=qos_config_back_refs,json=qosConfigBackRefs,proto3" json:"qos_config_back_refs,omitempty" yaml:"qos_config_back_refs,omitempty"`
	QosQueueBackRefs                          []*QosQueue                          `protobuf:"bytes,3110,rep,name=qos_queue_back_refs,json=qosQueueBackRefs,proto3" json:"qos_queue_back_refs,omitempty" yaml:"qos_queue_back_refs,omitempty"`
	RoleConfigBackRefs                        []*RoleConfig                        `protobuf:"bytes,3077,rep,name=role_config_back_refs,json=roleConfigBackRefs,proto3" json:"role_config_back_refs,omitempty" yaml:"role_config_back_refs,omitempty"`
	RoleDefinitionBackRefs                    []*RoleDefinition                    `protobuf:"bytes,3069,rep,name=role_definition_back_refs,json=roleDefinitionBackRefs,proto3" json:"role_definition_back_refs,omitempty" yaml:"role_definition_back_refs,omitempty"`
	RouteAggregateBackRefs                    []*RouteAggregate                    `protobuf:"bytes,3046,rep,name=route_aggregate_back_refs,json=routeAggregateBackRefs,proto3" json:"route_aggregate_back_refs,omitempty" yaml:"route_aggregate_back_refs,omitempty"`
	RouteTableBackRefs                        []*RouteTable                        `protobuf:"bytes,3021,rep,name=route_table_back_refs,json=routeTableBackRefs,proto3" json:"route_table_back_refs,omitempty" yaml:"route_table_back_refs,omitempty"`
	RouteTargetBackRefs                       []*RouteTarget                       `protobuf:"bytes,3114,rep,name=route_target_back_refs,json=routeTargetBackRefs,proto3" json:"route_target_back_refs,omitempty" yaml:"route_target_back_refs,omitempty"`
	RoutingInstanceBackRefs                   []*RoutingInstance                   `protobuf:"bytes,3107,rep,name=routing_instance_back_refs,json=routingInstanceBackRefs,proto3" json:"routing_instance_back_refs,omitempty" yaml:"routing_instance_back_refs,omitempty"`
	RoutingPolicyBackRefs                     []*RoutingPolicy                     `protobuf:"bytes,3084,rep,name=routing_policy_back_refs,json=routingPolicyBackRefs,proto3" json:"routing_policy_back_refs,omitempty" yaml:"routing_policy_back_refs,omitempty"`
	SecurityGroupBackRefs                     []*SecurityGroup                     `protobuf:"bytes,3133,rep,name=security_group_back_refs,json=securityGroupBackRefs,proto3" json:"security_group_back_refs,omitempty" yaml:"security_group_back_refs,omitempty"`
	SecurityLoggingObjectBackRefs             []*SecurityLoggingObject             `protobuf:"bytes,3054,rep,name=security_logging_object_back_refs,json=securityLoggingObjectBackRefs,proto3" json:"security_logging_object_back_refs,omitempty" yaml:"security_logging_object_back_refs,omitempty"`
	ServiceApplianceBackRefs                  []*ServiceAppliance                  `protobuf:"bytes,3116,rep,name=service_appliance_back_refs,json=serviceApplianceBackRefs,proto3" json:"service_appliance_back_refs,omitempty" yaml:"service_appliance_back_refs,omitempty"`
	ServiceApplianceSetBackRefs               []*ServiceApplianceSet               `protobuf:"bytes,3070,rep,name=service_appliance_set_back_refs,json=serviceApplianceSetBackRefs,proto3" json:"service_appliance_set_back_refs,omitempty" yaml:"service_appliance_set_back_refs,omitempty"`
	ServiceConnectionModuleBackRefs           []*ServiceConnectionModule           `protobuf:"bytes,3092,rep,name=service_connection_module_back_refs,json=serviceConnectionModuleBackRefs,proto3" json:"service_connection_module_back_refs,omitempty" yaml:"service_connection_module_back_refs,omitempty"`
	ServiceEndpointBackRefs                   []*ServiceEndpoint                   `protobuf:"bytes,3111,rep,name=service_endpoint_back_refs,json=serviceEndpointBackRefs,proto3" json:"service_endpoint_back_refs,omitempty" yaml:"service_endpoint_back_refs,omitempty"`
	ServiceGroupBackRefs                      []*ServiceGroup                      `protobuf:"bytes,3034,rep,name=service_group_back_refs,json=serviceGroupBackRefs,proto3" json:"service_group_back_refs,omitempty" yaml:"service_group_back_refs,omitempty"`
	ServiceHealthCheckBackRefs                []*ServiceHealthCheck                `protobuf:"bytes,3035,rep,name=service_health_check_back_refs,json=serviceHealthCheckBackRefs,proto3" json:"service_health_check_back_refs,omitempty" yaml:"service_health_check_back_refs,omitempty"`
	ServiceInstanceBackRefs                   []*ServiceInstance                   `protobuf:"bytes,3112,rep,name=service_instance_back_refs,json=serviceInstanceBackRefs,proto3" json:"service_instance_back_refs,omitempty" yaml:"service_instance_back_refs,omitempty"`
	ServiceObjectBackRefs                     []*ServiceObject                     `protobuf:"bytes,3058,rep,name=service_object_back_refs,json=serviceObjectBackRefs,proto3" json:"service_object_back_refs,omitempty" yaml:"service_object_back_refs,omitempty"`
	ServiceTemplateBackRefs                   []*ServiceTemplate                   `protobuf:"bytes,3072,rep,name=service_template_back_refs,json=serviceTemplateBackRefs,proto3" json:"service_template_back_refs,omitempty" yaml:"service_template_back_refs,omitempty"`
	SflowProfileBackRefs                      []*SflowProfile                      `protobuf:"bytes,3026,rep,name=sflow_profile_back_refs,json=sflowProfileBackRefs,proto3" json:"sflow_profile_back_refs,omitempty" yaml:"sflow_profile_back_refs,omitempty"`
	StormControlProfileBackRefs               []*StormControlProfile               `protobuf:"bytes,3138,rep,name=storm_control_profile_back_refs,json=stormControlProfileBackRefs,proto3" json:"storm_control_profile_back_refs,omitempty" yaml:"storm_control_profile_back_refs,omitempty"`
	StructuredSyslogApplicationRecordBackRefs []*StructuredSyslogApplicationRecord `protobuf:"bytes,3055,rep,name=structured_syslog_application_record_back_refs,json=structuredSyslogApplicationRecordBackRefs,proto3" json:"structured_syslog_application_record_back_refs,omitempty" yaml:"structured_syslog_application_record_back_refs,omitempty"`
	StructuredSyslogConfigBackRefs            []*StructuredSyslogConfig            `protobuf:"bytes,3093,rep,name=structured_syslog_config_back_refs,json=structuredSyslogConfigBackRefs,proto3" json:"structured_syslog_config_back_refs,omitempty" yaml:"structured_syslog_config_back_refs,omitempty"`
	StructuredSyslogHostnameRecordBackRefs    []*StructuredSyslogHostnameRecord    `protobuf:"bytes,3060,rep,name=structured_syslog_hostname_record_back_refs,json=structuredSyslogHostnameRecordBackRefs,proto3" json:"structured_syslog_hostname_record_back_refs,omitempty" yaml:"structured_syslog_hostname_record_back_refs,omitempty"`
	StructuredSyslogMessageBackRefs           []*StructuredSyslogMessage           `protobuf:"bytes,3121,rep,name=structured_syslog_message_back_refs,json=structuredSyslogMessageBackRefs,proto3" json:"structured_syslog_message_back_refs,omitempty" yaml:"structured_syslog_message_back_refs,omitempty"`
	StructuredSyslogSLAProfileBackRefs        []*StructuredSyslogSLAProfile        `protobuf:"bytes,3125,rep,name=structured_syslog_sla_profile_back_refs,json=structuredSyslogSlaProfileBackRefs,proto3" json:"structured_syslog_sla_profile_back_refs,omitempty" yaml:"structured_syslog_sla_profile_back_refs,omitempty"`
	SubClusterBackRefs                        []*SubCluster                        `protobuf:"bytes,3047,rep,name=sub_cluster_back_refs,json=subClusterBackRefs,proto3" json:"sub_cluster_back_refs,omitempty" yaml:"sub_cluster_back_refs,omitempty"`
	SubnetBackRefs                            []*Subnet                            `protobuf:"bytes,3071,rep,name=subnet_back_refs,json=subnetBackRefs,proto3" json:"subnet_back_refs,omitempty" yaml:"subnet_back_refs,omitempty"`
	TagBackRefs                               []*Tag                               `protobuf:"bytes,3117,rep,name=tag_back_refs,json=tagBackRefs,proto3" json:"tag_back_refs,omitempty" yaml:"tag_back_refs,omitempty"`
	TagTypeBackRefs                           []*TagType                           `protobuf:"bytes,3022,rep,name=tag_type_back_refs,json=tagTypeBackRefs,proto3" json:"tag_type_back_refs,omitempty" yaml:"tag_type_back_refs,omitempty"`
	TelemetryProfileBackRefs                  []*TelemetryProfile                  `protobuf:"bytes,3100,rep,name=telemetry_profile_back_refs,json=telemetryProfileBackRefs,proto3" json:"telemetry_profile_back_refs,omitempty" yaml:"telemetry_profile_back_refs,omitempty"`
	VirtualDNSBackRefs                        []*VirtualDNS                        `protobuf:"bytes,3042,rep,name=virtual_DNS_back_refs,json=virtualDNSBackRefs,proto3" json:"virtual_DNS_back_refs,omitempty" yaml:"virtual_DNS_back_refs,omitempty"`
	VirtualDNSRecordBackRefs                  []*VirtualDNSRecord                  `protobuf:"bytes,3078,rep,name=virtual_DNS_record_back_refs,json=virtualDNSRecordBackRefs,proto3" json:"virtual_DNS_record_back_refs,omitempty" yaml:"virtual_DNS_record_back_refs,omitempty"`
	VirtualIPBackRefs                         []*VirtualIP                         `protobuf:"bytes,3027,rep,name=virtual_ip_back_refs,json=virtualIpBackRefs,proto3" json:"virtual_ip_back_refs,omitempty" yaml:"virtual_ip_back_refs,omitempty"`
	VirtualMachineBackRefs                    []*VirtualMachine                    `protobuf:"bytes,3064,rep,name=virtual_machine_back_refs,json=virtualMachineBackRefs,proto3" json:"virtual_machine_back_refs,omitempty" yaml:"virtual_machine_back_refs,omitempty"`
	VirtualMachineInterfaceBackRefs           []*VirtualMachineInterface           `protobuf:"bytes,3086,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
	VirtualNetworkBackRefs                    []*VirtualNetwork                    `protobuf:"bytes,3085,rep,name=virtual_network_back_refs,json=virtualNetworkBackRefs,proto3" json:"virtual_network_back_refs,omitempty" yaml:"virtual_network_back_refs,omitempty"`
	VirtualPortGroupBackRefs                  []*VirtualPortGroup                  `protobuf:"bytes,3094,rep,name=virtual_port_group_back_refs,json=virtualPortGroupBackRefs,proto3" json:"virtual_port_group_back_refs,omitempty" yaml:"virtual_port_group_back_refs,omitempty"`
	VirtualRouterBackRefs                     []*VirtualRouter                     `protobuf:"bytes,3103,rep,name=virtual_router_back_refs,json=virtualRouterBackRefs,proto3" json:"virtual_router_back_refs,omitempty" yaml:"virtual_router_back_refs,omitempty"`
	WebuiNodeBackRefs                         []*WebuiNode                         `protobuf:"bytes,3074,rep,name=webui_node_back_refs,json=webuiNodeBackRefs,proto3" json:"webui_node_back_refs,omitempty" yaml:"webui_node_back_refs,omitempty"`
}

func (m *Tag) Reset()      { *m = Tag{} }
func (*Tag) ProtoMessage() {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{332}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tag.Unmarshal(m, b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return xxx_messageInfo_Tag.Size(m)
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Tag) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *Tag) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Tag) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *Tag) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Tag) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *Tag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tag) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *Tag) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *Tag) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *Tag) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *Tag) GetTagID() string {
	if m != nil {
		return m.TagID
	}
	return ""
}

func (m *Tag) GetTagPredefined() bool {
	if m != nil {
		return m.TagPredefined
	}
	return false
}

func (m *Tag) GetTagTypeName() string {
	if m != nil {
		return m.TagTypeName
	}
	return ""
}

func (m *Tag) GetTagValue() string {
	if m != nil {
		return m.TagValue
	}
	return ""
}

func (m *Tag) GetTagRefs() []*TagTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *Tag) GetTagTypeRefs() []*TagTagTypeRef {
	if m != nil {
		return m.TagTypeRefs
	}
	return nil
}

func (m *Tag) GetAccessControlListBackRefs() []*AccessControlList {
	if m != nil {
		return m.AccessControlListBackRefs
	}
	return nil
}

func (m *Tag) GetAddressGroupBackRefs() []*AddressGroup {
	if m != nil {
		return m.AddressGroupBackRefs
	}
	return nil
}

func (m *Tag) GetAlarmBackRefs() []*Alarm {
	if m != nil {
		return m.AlarmBackRefs
	}
	return nil
}

func (m *Tag) GetAliasIPBackRefs() []*AliasIP {
	if m != nil {
		return m.AliasIPBackRefs
	}
	return nil
}

func (m *Tag) GetAliasIPPoolBackRefs() []*AliasIPPool {
	if m != nil {
		return m.AliasIPPoolBackRefs
	}
	return nil
}

func (m *Tag) GetAnalyticsAlarmNodeBackRefs() []*AnalyticsAlarmNode {
	if m != nil {
		return m.AnalyticsAlarmNodeBackRefs
	}
	return nil
}

func (m *Tag) GetAnalyticsNodeBackRefs() []*AnalyticsNode {
	if m != nil {
		return m.AnalyticsNodeBackRefs
	}
	return nil
}

func (m *Tag) GetAnalyticsSNMPNodeBackRefs() []*AnalyticsSNMPNode {
	if m != nil {
		return m.AnalyticsSNMPNodeBackRefs
	}
	return nil
}

func (m *Tag) GetAPIAccessListBackRefs() []*APIAccessList {
	if m != nil {
		return m.APIAccessListBackRefs
	}
	return nil
}

func (m *Tag) GetApplicationPolicySetBackRefs() []*ApplicationPolicySet {
	if m != nil {
		return m.ApplicationPolicySetBackRefs
	}
	return nil
}

func (m *Tag) GetBGPAsAServiceBackRefs() []*BGPAsAService {
	if m != nil {
		return m.BGPAsAServiceBackRefs
	}
	return nil
}

func (m *Tag) GetBGPRouterBackRefs() []*BGPRouter {
	if m != nil {
		return m.BGPRouterBackRefs
	}
	return nil
}

func (m *Tag) GetBGPVPNBackRefs() []*BGPVPN {
	if m != nil {
		return m.BGPVPNBackRefs
	}
	return nil
}

func (m *Tag) GetBridgeDomainBackRefs() []*BridgeDomain {
	if m != nil {
		return m.BridgeDomainBackRefs
	}
	return nil
}

func (m *Tag) GetCardBackRefs() []*Card {
	if m != nil {
		return m.CardBackRefs
	}
	return nil
}

func (m *Tag) GetCliConfigBackRefs() []*CliConfig {
	if m != nil {
		return m.CliConfigBackRefs
	}
	return nil
}

func (m *Tag) GetConfigDatabaseNodeBackRefs() []*ConfigDatabaseNode {
	if m != nil {
		return m.ConfigDatabaseNodeBackRefs
	}
	return nil
}

func (m *Tag) GetConfigNodeBackRefs() []*ConfigNode {
	if m != nil {
		return m.ConfigNodeBackRefs
	}
	return nil
}

func (m *Tag) GetConfigRootBackRefs() []*ConfigRoot {
	if m != nil {
		return m.ConfigRootBackRefs
	}
	return nil
}

func (m *Tag) GetControlNodeZoneBackRefs() []*ControlNodeZone {
	if m != nil {
		return m.ControlNodeZoneBackRefs
	}
	return nil
}

func (m *Tag) GetCustomerAttachmentBackRefs() []*CustomerAttachment {
	if m != nil {
		return m.CustomerAttachmentBackRefs
	}
	return nil
}

func (m *Tag) GetDataCenterInterconnectBackRefs() []*DataCenterInterconnect {
	if m != nil {
		return m.DataCenterInterconnectBackRefs
	}
	return nil
}

func (m *Tag) GetDatabaseNodeBackRefs() []*DatabaseNode {
	if m != nil {
		return m.DatabaseNodeBackRefs
	}
	return nil
}

func (m *Tag) GetDeviceChassisBackRefs() []*DeviceChassis {
	if m != nil {
		return m.DeviceChassisBackRefs
	}
	return nil
}

func (m *Tag) GetDeviceFunctionalGroupBackRefs() []*DeviceFunctionalGroup {
	if m != nil {
		return m.DeviceFunctionalGroupBackRefs
	}
	return nil
}

func (m *Tag) GetDeviceImageBackRefs() []*DeviceImage {
	if m != nil {
		return m.DeviceImageBackRefs
	}
	return nil
}

func (m *Tag) GetDevicemgrNodeBackRefs() []*DevicemgrNode {
	if m != nil {
		return m.DevicemgrNodeBackRefs
	}
	return nil
}

func (m *Tag) GetDiscoveryServiceAssignmentBackRefs() []*DiscoveryServiceAssignment {
	if m != nil {
		return m.DiscoveryServiceAssignmentBackRefs
	}
	return nil
}

func (m *Tag) GetDomainBackRefs() []*Domain {
	if m != nil {
		return m.DomainBackRefs
	}
	return nil
}

func (m *Tag) GetDsaRuleBackRefs() []*DsaRule {
	if m != nil {
		return m.DsaRuleBackRefs
	}
	return nil
}

func (m *Tag) GetE2ServiceProviderBackRefs() []*E2ServiceProvider {
	if m != nil {
		return m.E2ServiceProviderBackRefs
	}
	return nil
}

func (m *Tag) GetFabricBackRefs() []*Fabric {
	if m != nil {
		return m.FabricBackRefs
	}
	return nil
}

func (m *Tag) GetFabricNamespaceBackRefs() []*FabricNamespace {
	if m != nil {
		return m.FabricNamespaceBackRefs
	}
	return nil
}

func (m *Tag) GetFeatureBackRefs() []*Feature {
	if m != nil {
		return m.FeatureBackRefs
	}
	return nil
}

func (m *Tag) GetFeatureConfigBackRefs() []*FeatureConfig {
	if m != nil {
		return m.FeatureConfigBackRefs
	}
	return nil
}

func (m *Tag) GetFeatureFlagBackRefs() []*FeatureFlag {
	if m != nil {
		return m.FeatureFlagBackRefs
	}
	return nil
}

func (m *Tag) GetFirewallPolicyBackRefs() []*FirewallPolicy {
	if m != nil {
		return m.FirewallPolicyBackRefs
	}
	return nil
}

func (m *Tag) GetFirewallRuleBackRefs() []*FirewallRule {
	if m != nil {
		return m.FirewallRuleBackRefs
	}
	return nil
}

func (m *Tag) GetFloatingIPBackRefs() []*FloatingIP {
	if m != nil {
		return m.FloatingIPBackRefs
	}
	return nil
}

func (m *Tag) GetFloatingIPPoolBackRefs() []*FloatingIPPool {
	if m != nil {
		return m.FloatingIPPoolBackRefs
	}
	return nil
}

func (m *Tag) GetFlowNodeBackRefs() []*FlowNode {
	if m != nil {
		return m.FlowNodeBackRefs
	}
	return nil
}

func (m *Tag) GetForwardingClassBackRefs() []*ForwardingClass {
	if m != nil {
		return m.ForwardingClassBackRefs
	}
	return nil
}

func (m *Tag) GetGlobalAnalyticsConfigBackRefs() []*GlobalAnalyticsConfig {
	if m != nil {
		return m.GlobalAnalyticsConfigBackRefs
	}
	return nil
}

func (m *Tag) GetGlobalQosConfigBackRefs() []*GlobalQosConfig {
	if m != nil {
		return m.GlobalQosConfigBackRefs
	}
	return nil
}

func (m *Tag) GetGlobalSystemConfigBackRefs() []*GlobalSystemConfig {
	if m != nil {
		return m.GlobalSystemConfigBackRefs
	}
	return nil
}

func (m *Tag) GetGlobalVrouterConfigBackRefs() []*GlobalVrouterConfig {
	if m != nil {
		return m.GlobalVrouterConfigBackRefs
	}
	return nil
}

func (m *Tag) GetHardwareBackRefs() []*Hardware {
	if m != nil {
		return m.HardwareBackRefs
	}
	return nil
}

func (m *Tag) GetHardwareInventoryBackRefs() []*HardwareInventory {
	if m != nil {
		return m.HardwareInventoryBackRefs
	}
	return nil
}

func (m *Tag) GetHostBasedServiceBackRefs() []*HostBasedService {
	if m != nil {
		return m.HostBasedServiceBackRefs
	}
	return nil
}

func (m *Tag) GetInstanceIPBackRefs() []*InstanceIP {
	if m != nil {
		return m.InstanceIPBackRefs
	}
	return nil
}

func (m *Tag) GetIntentMapBackRefs() []*IntentMap {
	if m != nil {
		return m.IntentMapBackRefs
	}
	return nil
}

func (m *Tag) GetInterfaceRouteTableBackRefs() []*InterfaceRouteTable {
	if m != nil {
		return m.InterfaceRouteTableBackRefs
	}
	return nil
}

func (m *Tag) GetJobTemplateBackRefs() []*JobTemplate {
	if m != nil {
		return m.JobTemplateBackRefs
	}
	return nil
}

func (m *Tag) GetLinkAggregationGroupBackRefs() []*LinkAggregationGroup {
	if m != nil {
		return m.LinkAggregationGroupBackRefs
	}
	return nil
}

func (m *Tag) GetLoadbalancerBackRefs() []*Loadbalancer {
	if m != nil {
		return m.LoadbalancerBackRefs
	}
	return nil
}

func (m *Tag) GetLoadbalancerHealthmonitorBackRefs() []*LoadbalancerHealthmonitor {
	if m != nil {
		return m.LoadbalancerHealthmonitorBackRefs
	}
	return nil
}

func (m *Tag) GetLoadbalancerListenerBackRefs() []*LoadbalancerListener {
	if m != nil {
		return m.LoadbalancerListenerBackRefs
	}
	return nil
}

func (m *Tag) GetLoadbalancerMemberBackRefs() []*LoadbalancerMember {
	if m != nil {
		return m.LoadbalancerMemberBackRefs
	}
	return nil
}

func (m *Tag) GetLoadbalancerPoolBackRefs() []*LoadbalancerPool {
	if m != nil {
		return m.LoadbalancerPoolBackRefs
	}
	return nil
}

func (m *Tag) GetLogicalInterfaceBackRefs() []*LogicalInterface {
	if m != nil {
		return m.LogicalInterfaceBackRefs
	}
	return nil
}

func (m *Tag) GetLogicalRouterBackRefs() []*LogicalRouter {
	if m != nil {
		return m.LogicalRouterBackRefs
	}
	return nil
}

func (m *Tag) GetMulticastPolicyBackRefs() []*MulticastPolicy {
	if m != nil {
		return m.MulticastPolicyBackRefs
	}
	return nil
}

func (m *Tag) GetNamespaceBackRefs() []*Namespace {
	if m != nil {
		return m.NamespaceBackRefs
	}
	return nil
}

func (m *Tag) GetNetworkDeviceConfigBackRefs() []*NetworkDeviceConfig {
	if m != nil {
		return m.NetworkDeviceConfigBackRefs
	}
	return nil
}

func (m *Tag) GetNetworkIpamBackRefs() []*NetworkIpam {
	if m != nil {
		return m.NetworkIpamBackRefs
	}
	return nil
}

func (m *Tag) GetNetworkPolicyBackRefs() []*NetworkPolicy {
	if m != nil {
		return m.NetworkPolicyBackRefs
	}
	return nil
}

func (m *Tag) GetNodeBackRefs() []*Node {
	if m != nil {
		return m.NodeBackRefs
	}
	return nil
}

func (m *Tag) GetNodeProfileBackRefs() []*NodeProfile {
	if m != nil {
		return m.NodeProfileBackRefs
	}
	return nil
}

func (m *Tag) GetOverlayRoleBackRefs() []*OverlayRole {
	if m != nil {
		return m.OverlayRoleBackRefs
	}
	return nil
}

func (m *Tag) GetPeeringPolicyBackRefs() []*PeeringPolicy {
	if m != nil {
		return m.PeeringPolicyBackRefs
	}
	return nil
}

func (m *Tag) GetPhysicalInterfaceBackRefs() []*PhysicalInterface {
	if m != nil {
		return m.PhysicalInterfaceBackRefs
	}
	return nil
}

func (m *Tag) GetPhysicalRoleBackRefs() []*PhysicalRole {
	if m != nil {
		return m.PhysicalRoleBackRefs
	}
	return nil
}

func (m *Tag) GetPhysicalRouterBackRefs() []*PhysicalRouter {
	if m != nil {
		return m.PhysicalRouterBackRefs
	}
	return nil
}

func (m *Tag) GetPolicyManagementBackRefs() []*PolicyManagement {
	if m != nil {
		return m.PolicyManagementBackRefs
	}
	return nil
}

func (m *Tag) GetPortBackRefs() []*Port {
	if m != nil {
		return m.PortBackRefs
	}
	return nil
}

func (m *Tag) GetPortGroupBackRefs() []*PortGroup {
	if m != nil {
		return m.PortGroupBackRefs
	}
	return nil
}

func (m *Tag) GetPortProfileBackRefs() []*PortProfile {
	if m != nil {
		return m.PortProfileBackRefs
	}
	return nil
}

func (m *Tag) GetPortTupleBackRefs() []*PortTuple {
	if m != nil {
		return m.PortTupleBackRefs
	}
	return nil
}

func (m *Tag) GetProjectBackRefs() []*Project {
	if m != nil {
		return m.ProjectBackRefs
	}
	return nil
}

func (m *Tag) GetProviderAttachmentBackRefs() []*ProviderAttachment {
	if m != nil {
		return m.ProviderAttachmentBackRefs
	}
	return nil
}

func (m *Tag) GetQosConfigBackRefs() []*QosConfig {
	if m != nil {
		return m.QosConfigBackRefs
	}
	return nil
}

func (m *Tag) GetQosQueueBackRefs() []*QosQueue {
	if m != nil {
		return m.QosQueueBackRefs
	}
	return nil
}

func (m *Tag) GetRoleConfigBackRefs() []*RoleConfig {
	if m != nil {
		return m.RoleConfigBackRefs
	}
	return nil
}

func (m *Tag) GetRoleDefinitionBackRefs() []*RoleDefinition {
	if m != nil {
		return m.RoleDefinitionBackRefs
	}
	return nil
}

func (m *Tag) GetRouteAggregateBackRefs() []*RouteAggregate {
	if m != nil {
		return m.RouteAggregateBackRefs
	}
	return nil
}

func (m *Tag) GetRouteTableBackRefs() []*RouteTable {
	if m != nil {
		return m.RouteTableBackRefs
	}
	return nil
}

func (m *Tag) GetRouteTargetBackRefs() []*RouteTarget {
	if m != nil {
		return m.RouteTargetBackRefs
	}
	return nil
}

func (m *Tag) GetRoutingInstanceBackRefs() []*RoutingInstance {
	if m != nil {
		return m.RoutingInstanceBackRefs
	}
	return nil
}

func (m *Tag) GetRoutingPolicyBackRefs() []*RoutingPolicy {
	if m != nil {
		return m.RoutingPolicyBackRefs
	}
	return nil
}

func (m *Tag) GetSecurityGroupBackRefs() []*SecurityGroup {
	if m != nil {
		return m.SecurityGroupBackRefs
	}
	return nil
}

func (m *Tag) GetSecurityLoggingObjectBackRefs() []*SecurityLoggingObject {
	if m != nil {
		return m.SecurityLoggingObjectBackRefs
	}
	return nil
}

func (m *Tag) GetServiceApplianceBackRefs() []*ServiceAppliance {
	if m != nil {
		return m.ServiceApplianceBackRefs
	}
	return nil
}

func (m *Tag) GetServiceApplianceSetBackRefs() []*ServiceApplianceSet {
	if m != nil {
		return m.ServiceApplianceSetBackRefs
	}
	return nil
}

func (m *Tag) GetServiceConnectionModuleBackRefs() []*ServiceConnectionModule {
	if m != nil {
		return m.ServiceConnectionModuleBackRefs
	}
	return nil
}

func (m *Tag) GetServiceEndpointBackRefs() []*ServiceEndpoint {
	if m != nil {
		return m.ServiceEndpointBackRefs
	}
	return nil
}

func (m *Tag) GetServiceGroupBackRefs() []*ServiceGroup {
	if m != nil {
		return m.ServiceGroupBackRefs
	}
	return nil
}

func (m *Tag) GetServiceHealthCheckBackRefs() []*ServiceHealthCheck {
	if m != nil {
		return m.ServiceHealthCheckBackRefs
	}
	return nil
}

func (m *Tag) GetServiceInstanceBackRefs() []*ServiceInstance {
	if m != nil {
		return m.ServiceInstanceBackRefs
	}
	return nil
}

func (m *Tag) GetServiceObjectBackRefs() []*ServiceObject {
	if m != nil {
		return m.ServiceObjectBackRefs
	}
	return nil
}

func (m *Tag) GetServiceTemplateBackRefs() []*ServiceTemplate {
	if m != nil {
		return m.ServiceTemplateBackRefs
	}
	return nil
}

func (m *Tag) GetSflowProfileBackRefs() []*SflowProfile {
	if m != nil {
		return m.SflowProfileBackRefs
	}
	return nil
}

func (m *Tag) GetStormControlProfileBackRefs() []*StormControlProfile {
	if m != nil {
		return m.StormControlProfileBackRefs
	}
	return nil
}

func (m *Tag) GetStructuredSyslogApplicationRecordBackRefs() []*StructuredSyslogApplicationRecord {
	if m != nil {
		return m.StructuredSyslogApplicationRecordBackRefs
	}
	return nil
}

func (m *Tag) GetStructuredSyslogConfigBackRefs() []*StructuredSyslogConfig {
	if m != nil {
		return m.StructuredSyslogConfigBackRefs
	}
	return nil
}

func (m *Tag) GetStructuredSyslogHostnameRecordBackRefs() []*StructuredSyslogHostnameRecord {
	if m != nil {
		return m.StructuredSyslogHostnameRecordBackRefs
	}
	return nil
}

func (m *Tag) GetStructuredSyslogMessageBackRefs() []*StructuredSyslogMessage {
	if m != nil {
		return m.StructuredSyslogMessageBackRefs
	}
	return nil
}

func (m *Tag) GetStructuredSyslogSLAProfileBackRefs() []*StructuredSyslogSLAProfile {
	if m != nil {
		return m.StructuredSyslogSLAProfileBackRefs
	}
	return nil
}

func (m *Tag) GetSubClusterBackRefs() []*SubCluster {
	if m != nil {
		return m.SubClusterBackRefs
	}
	return nil
}

func (m *Tag) GetSubnetBackRefs() []*Subnet {
	if m != nil {
		return m.SubnetBackRefs
	}
	return nil
}

func (m *Tag) GetTagBackRefs() []*Tag {
	if m != nil {
		return m.TagBackRefs
	}
	return nil
}

func (m *Tag) GetTagTypeBackRefs() []*TagType {
	if m != nil {
		return m.TagTypeBackRefs
	}
	return nil
}

func (m *Tag) GetTelemetryProfileBackRefs() []*TelemetryProfile {
	if m != nil {
		return m.TelemetryProfileBackRefs
	}
	return nil
}

func (m *Tag) GetVirtualDNSBackRefs() []*VirtualDNS {
	if m != nil {
		return m.VirtualDNSBackRefs
	}
	return nil
}

func (m *Tag) GetVirtualDNSRecordBackRefs() []*VirtualDNSRecord {
	if m != nil {
		return m.VirtualDNSRecordBackRefs
	}
	return nil
}

func (m *Tag) GetVirtualIPBackRefs() []*VirtualIP {
	if m != nil {
		return m.VirtualIPBackRefs
	}
	return nil
}

func (m *Tag) GetVirtualMachineBackRefs() []*VirtualMachine {
	if m != nil {
		return m.VirtualMachineBackRefs
	}
	return nil
}

func (m *Tag) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

func (m *Tag) GetVirtualNetworkBackRefs() []*VirtualNetwork {
	if m != nil {
		return m.VirtualNetworkBackRefs
	}
	return nil
}

func (m *Tag) GetVirtualPortGroupBackRefs() []*VirtualPortGroup {
	if m != nil {
		return m.VirtualPortGroupBackRefs
	}
	return nil
}

func (m *Tag) GetVirtualRouterBackRefs() []*VirtualRouter {
	if m != nil {
		return m.VirtualRouterBackRefs
	}
	return nil
}

func (m *Tag) GetWebuiNodeBackRefs() []*WebuiNode {
	if m != nil {
		return m.WebuiNodeBackRefs
	}
	return nil
}

type TagTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *TagTagRef) Reset()      { *m = TagTagRef{} }
func (*TagTagRef) ProtoMessage() {}
func (*TagTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{333}
}
func (m *TagTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagTagRef.Unmarshal(m, b)
}
func (m *TagTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagTagRef.Marshal(b, m, deterministic)
}
func (m *TagTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagTagRef.Merge(m, src)
}
func (m *TagTagRef) XXX_Size() int {
	return xxx_messageInfo_TagTagRef.Size(m)
}
func (m *TagTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_TagTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_TagTagRef proto.InternalMessageInfo

func (m *TagTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *TagTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *TagTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type TagTagTypeRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *TagTagTypeRef) Reset()      { *m = TagTagTypeRef{} }
func (*TagTagTypeRef) ProtoMessage() {}
func (*TagTagTypeRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{334}
}
func (m *TagTagTypeRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagTagTypeRef.Unmarshal(m, b)
}
func (m *TagTagTypeRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagTagTypeRef.Marshal(b, m, deterministic)
}
func (m *TagTagTypeRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagTagTypeRef.Merge(m, src)
}
func (m *TagTagTypeRef) XXX_Size() int {
	return xxx_messageInfo_TagTagTypeRef.Size(m)
}
func (m *TagTagTypeRef) XXX_DiscardUnknown() {
	xxx_messageInfo_TagTagTypeRef.DiscardUnknown(m)
}

var xxx_messageInfo_TagTagTypeRef proto.InternalMessageInfo

func (m *TagTagTypeRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *TagTagTypeRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *TagTagTypeRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type TagType struct {
	Annotations          *KeyValuePairs   `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64            `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string           `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string         `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string           `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType     `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string           `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string           `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string           `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2       `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string           `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TagTypeID            string           `protobuf:"bytes,12,opt,name=tag_type_id,json=tagTypeId,proto3" json:"tag_type_id,omitempty" yaml:"tag_type_id,omitempty"`
	TagRefs              []*TagTypeTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	TagBackRefs          []*Tag           `protobuf:"bytes,3014,rep,name=tag_back_refs,json=tagBackRefs,proto3" json:"tag_back_refs,omitempty" yaml:"tag_back_refs,omitempty"`
}

func (m *TagType) Reset()      { *m = TagType{} }
func (*TagType) ProtoMessage() {}
func (*TagType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{335}
}
func (m *TagType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagType.Unmarshal(m, b)
}
func (m *TagType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagType.Marshal(b, m, deterministic)
}
func (m *TagType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagType.Merge(m, src)
}
func (m *TagType) XXX_Size() int {
	return xxx_messageInfo_TagType.Size(m)
}
func (m *TagType) XXX_DiscardUnknown() {
	xxx_messageInfo_TagType.DiscardUnknown(m)
}

var xxx_messageInfo_TagType proto.InternalMessageInfo

func (m *TagType) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *TagType) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *TagType) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *TagType) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *TagType) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *TagType) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *TagType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TagType) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *TagType) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *TagType) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *TagType) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *TagType) GetTagTypeID() string {
	if m != nil {
		return m.TagTypeID
	}
	return ""
}

func (m *TagType) GetTagRefs() []*TagTypeTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *TagType) GetTagBackRefs() []*Tag {
	if m != nil {
		return m.TagBackRefs
	}
	return nil
}

type TagTypeTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *TagTypeTagRef) Reset()      { *m = TagTypeTagRef{} }
func (*TagTypeTagRef) ProtoMessage() {}
func (*TagTypeTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{336}
}
func (m *TagTypeTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagTypeTagRef.Unmarshal(m, b)
}
func (m *TagTypeTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagTypeTagRef.Marshal(b, m, deterministic)
}
func (m *TagTypeTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagTypeTagRef.Merge(m, src)
}
func (m *TagTypeTagRef) XXX_Size() int {
	return xxx_messageInfo_TagTypeTagRef.Size(m)
}
func (m *TagTypeTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_TagTypeTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_TagTypeTagRef proto.InternalMessageInfo

func (m *TagTypeTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *TagTypeTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *TagTypeTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type TelemetryProfile struct {
	Annotations               *KeyValuePairs                     `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion      int64                              `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName               string                             `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                    []string                           `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                      string                             `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                   *IdPermsType                       `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                      string                             `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                string                             `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                string                             `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                    *PermType2                         `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                      string                             `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	TelemetryProfileIsDefault bool                               `protobuf:"varint,12,opt,name=telemetry_profile_is_default,json=telemetryProfileIsDefault,proto3" json:"telemetry_profile_is_default,omitempty" yaml:"telemetry_profile_is_default,omitempty"`
	SflowProfileRefs          []*TelemetryProfileSflowProfileRef `protobuf:"bytes,1013,rep,name=sflow_profile_refs,json=sflowProfileRefs,proto3" json:"sflow_profile_refs,omitempty" yaml:"sflow_profile_refs,omitempty"`
	TagRefs                   []*TelemetryProfileTagRef          `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	PhysicalRouterBackRefs    []*PhysicalRouter                  `protobuf:"bytes,3015,rep,name=physical_router_back_refs,json=physicalRouterBackRefs,proto3" json:"physical_router_back_refs,omitempty" yaml:"physical_router_back_refs,omitempty"`
}

func (m *TelemetryProfile) Reset()      { *m = TelemetryProfile{} }
func (*TelemetryProfile) ProtoMessage() {}
func (*TelemetryProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{337}
}
func (m *TelemetryProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryProfile.Unmarshal(m, b)
}
func (m *TelemetryProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryProfile.Marshal(b, m, deterministic)
}
func (m *TelemetryProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryProfile.Merge(m, src)
}
func (m *TelemetryProfile) XXX_Size() int {
	return xxx_messageInfo_TelemetryProfile.Size(m)
}
func (m *TelemetryProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryProfile.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryProfile proto.InternalMessageInfo

func (m *TelemetryProfile) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *TelemetryProfile) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *TelemetryProfile) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *TelemetryProfile) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *TelemetryProfile) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *TelemetryProfile) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *TelemetryProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TelemetryProfile) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *TelemetryProfile) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *TelemetryProfile) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *TelemetryProfile) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *TelemetryProfile) GetTelemetryProfileIsDefault() bool {
	if m != nil {
		return m.TelemetryProfileIsDefault
	}
	return false
}

func (m *TelemetryProfile) GetSflowProfileRefs() []*TelemetryProfileSflowProfileRef {
	if m != nil {
		return m.SflowProfileRefs
	}
	return nil
}

func (m *TelemetryProfile) GetTagRefs() []*TelemetryProfileTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *TelemetryProfile) GetPhysicalRouterBackRefs() []*PhysicalRouter {
	if m != nil {
		return m.PhysicalRouterBackRefs
	}
	return nil
}

type TelemetryProfileSflowProfileRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *TelemetryProfileSflowProfileRef) Reset()      { *m = TelemetryProfileSflowProfileRef{} }
func (*TelemetryProfileSflowProfileRef) ProtoMessage() {}
func (*TelemetryProfileSflowProfileRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{338}
}
func (m *TelemetryProfileSflowProfileRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryProfileSflowProfileRef.Unmarshal(m, b)
}
func (m *TelemetryProfileSflowProfileRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryProfileSflowProfileRef.Marshal(b, m, deterministic)
}
func (m *TelemetryProfileSflowProfileRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryProfileSflowProfileRef.Merge(m, src)
}
func (m *TelemetryProfileSflowProfileRef) XXX_Size() int {
	return xxx_messageInfo_TelemetryProfileSflowProfileRef.Size(m)
}
func (m *TelemetryProfileSflowProfileRef) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryProfileSflowProfileRef.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryProfileSflowProfileRef proto.InternalMessageInfo

func (m *TelemetryProfileSflowProfileRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *TelemetryProfileSflowProfileRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *TelemetryProfileSflowProfileRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type TelemetryProfileTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *TelemetryProfileTagRef) Reset()      { *m = TelemetryProfileTagRef{} }
func (*TelemetryProfileTagRef) ProtoMessage() {}
func (*TelemetryProfileTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{339}
}
func (m *TelemetryProfileTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryProfileTagRef.Unmarshal(m, b)
}
func (m *TelemetryProfileTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryProfileTagRef.Marshal(b, m, deterministic)
}
func (m *TelemetryProfileTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryProfileTagRef.Merge(m, src)
}
func (m *TelemetryProfileTagRef) XXX_Size() int {
	return xxx_messageInfo_TelemetryProfileTagRef.Size(m)
}
func (m *TelemetryProfileTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryProfileTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryProfileTagRef proto.InternalMessageInfo

func (m *TelemetryProfileTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *TelemetryProfileTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *TelemetryProfileTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualDNSRecord struct {
	Annotations          *KeyValuePairs            `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64                     `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string                    `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string                  `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string                    `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType              `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string                    `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string                    `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string                    `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2                `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string                    `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	VirtualDNSRecordData *VirtualDnsRecordType     `protobuf:"bytes,12,opt,name=virtual_DNS_record_data,json=virtualDNSRecordData,proto3" json:"virtual_DNS_record_data,omitempty" yaml:"virtual_DNS_record_data,omitempty"`
	TagRefs              []*VirtualDNSRecordTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *VirtualDNSRecord) Reset()      { *m = VirtualDNSRecord{} }
func (*VirtualDNSRecord) ProtoMessage() {}
func (*VirtualDNSRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{340}
}
func (m *VirtualDNSRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualDNSRecord.Unmarshal(m, b)
}
func (m *VirtualDNSRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualDNSRecord.Marshal(b, m, deterministic)
}
func (m *VirtualDNSRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualDNSRecord.Merge(m, src)
}
func (m *VirtualDNSRecord) XXX_Size() int {
	return xxx_messageInfo_VirtualDNSRecord.Size(m)
}
func (m *VirtualDNSRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualDNSRecord.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualDNSRecord proto.InternalMessageInfo

func (m *VirtualDNSRecord) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *VirtualDNSRecord) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *VirtualDNSRecord) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *VirtualDNSRecord) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *VirtualDNSRecord) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualDNSRecord) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *VirtualDNSRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualDNSRecord) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *VirtualDNSRecord) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *VirtualDNSRecord) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *VirtualDNSRecord) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualDNSRecord) GetVirtualDNSRecordData() *VirtualDnsRecordType {
	if m != nil {
		return m.VirtualDNSRecordData
	}
	return nil
}

func (m *VirtualDNSRecord) GetTagRefs() []*VirtualDNSRecordTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type VirtualDNSRecordTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualDNSRecordTagRef) Reset()      { *m = VirtualDNSRecordTagRef{} }
func (*VirtualDNSRecordTagRef) ProtoMessage() {}
func (*VirtualDNSRecordTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{341}
}
func (m *VirtualDNSRecordTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualDNSRecordTagRef.Unmarshal(m, b)
}
func (m *VirtualDNSRecordTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualDNSRecordTagRef.Marshal(b, m, deterministic)
}
func (m *VirtualDNSRecordTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualDNSRecordTagRef.Merge(m, src)
}
func (m *VirtualDNSRecordTagRef) XXX_Size() int {
	return xxx_messageInfo_VirtualDNSRecordTagRef.Size(m)
}
func (m *VirtualDNSRecordTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualDNSRecordTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualDNSRecordTagRef proto.InternalMessageInfo

func (m *VirtualDNSRecordTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualDNSRecordTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualDNSRecordTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualDNS struct {
	Annotations          *KeyValuePairs      `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64               `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string              `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string            `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string              `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType        `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string              `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string              `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2          `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string              `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	VirtualDNSData       *VirtualDnsType     `protobuf:"bytes,12,opt,name=virtual_DNS_data,json=virtualDNSData,proto3" json:"virtual_DNS_data,omitempty" yaml:"virtual_DNS_data,omitempty"`
	TagRefs              []*VirtualDNSTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	NetworkIpamBackRefs  []*NetworkIpam      `protobuf:"bytes,3015,rep,name=network_ipam_back_refs,json=networkIpamBackRefs,proto3" json:"network_ipam_back_refs,omitempty" yaml:"network_ipam_back_refs,omitempty"`
	VirtualDNSRecords    []*VirtualDNSRecord `protobuf:"bytes,2014,rep,name=virtual_DNS_records,json=virtualDNSRecords,proto3" json:"virtual_DNS_records,omitempty" yaml:"virtual_DNS_records,omitempty"`
}

func (m *VirtualDNS) Reset()      { *m = VirtualDNS{} }
func (*VirtualDNS) ProtoMessage() {}
func (*VirtualDNS) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{342}
}
func (m *VirtualDNS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualDNS.Unmarshal(m, b)
}
func (m *VirtualDNS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualDNS.Marshal(b, m, deterministic)
}
func (m *VirtualDNS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualDNS.Merge(m, src)
}
func (m *VirtualDNS) XXX_Size() int {
	return xxx_messageInfo_VirtualDNS.Size(m)
}
func (m *VirtualDNS) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualDNS.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualDNS proto.InternalMessageInfo

func (m *VirtualDNS) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *VirtualDNS) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *VirtualDNS) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *VirtualDNS) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *VirtualDNS) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualDNS) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *VirtualDNS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualDNS) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *VirtualDNS) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *VirtualDNS) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *VirtualDNS) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualDNS) GetVirtualDNSData() *VirtualDnsType {
	if m != nil {
		return m.VirtualDNSData
	}
	return nil
}

func (m *VirtualDNS) GetTagRefs() []*VirtualDNSTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *VirtualDNS) GetNetworkIpamBackRefs() []*NetworkIpam {
	if m != nil {
		return m.NetworkIpamBackRefs
	}
	return nil
}

func (m *VirtualDNS) GetVirtualDNSRecords() []*VirtualDNSRecord {
	if m != nil {
		return m.VirtualDNSRecords
	}
	return nil
}

type VirtualDNSTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualDNSTagRef) Reset()      { *m = VirtualDNSTagRef{} }
func (*VirtualDNSTagRef) ProtoMessage() {}
func (*VirtualDNSTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{343}
}
func (m *VirtualDNSTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualDNSTagRef.Unmarshal(m, b)
}
func (m *VirtualDNSTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualDNSTagRef.Marshal(b, m, deterministic)
}
func (m *VirtualDNSTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualDNSTagRef.Merge(m, src)
}
func (m *VirtualDNSTagRef) XXX_Size() int {
	return xxx_messageInfo_VirtualDNSTagRef.Size(m)
}
func (m *VirtualDNSTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualDNSTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualDNSTagRef proto.InternalMessageInfo

func (m *VirtualDNSTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualDNSTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualDNSTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualIP struct {
	Annotations                 *KeyValuePairs                         `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion        int64                                  `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                 string                                 `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                      []string                               `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                        string                                 `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                     *IdPermsType                           `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                        string                                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                  string                                 `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                  string                                 `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                      *PermType2                             `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                        string                                 `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	VirtualIPProperties         *VirtualIpType                         `protobuf:"bytes,12,opt,name=virtual_ip_properties,json=virtualIpProperties,proto3" json:"virtual_ip_properties,omitempty" yaml:"virtual_ip_properties,omitempty"`
	LoadbalancerPoolRefs        []*VirtualIPLoadbalancerPoolRef        `protobuf:"bytes,1013,rep,name=loadbalancer_pool_refs,json=loadbalancerPoolRefs,proto3" json:"loadbalancer_pool_refs,omitempty" yaml:"loadbalancer_pool_refs,omitempty"`
	TagRefs                     []*VirtualIPTagRef                     `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceRefs []*VirtualIPVirtualMachineInterfaceRef `protobuf:"bytes,1015,rep,name=virtual_machine_interface_refs,json=virtualMachineInterfaceRefs,proto3" json:"virtual_machine_interface_refs,omitempty" yaml:"virtual_machine_interface_refs,omitempty"`
}

func (m *VirtualIP) Reset()      { *m = VirtualIP{} }
func (*VirtualIP) ProtoMessage() {}
func (*VirtualIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{344}
}
func (m *VirtualIP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualIP.Unmarshal(m, b)
}
func (m *VirtualIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualIP.Marshal(b, m, deterministic)
}
func (m *VirtualIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualIP.Merge(m, src)
}
func (m *VirtualIP) XXX_Size() int {
	return xxx_messageInfo_VirtualIP.Size(m)
}
func (m *VirtualIP) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualIP.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualIP proto.InternalMessageInfo

func (m *VirtualIP) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *VirtualIP) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *VirtualIP) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *VirtualIP) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *VirtualIP) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualIP) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *VirtualIP) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualIP) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *VirtualIP) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *VirtualIP) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *VirtualIP) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualIP) GetVirtualIPProperties() *VirtualIpType {
	if m != nil {
		return m.VirtualIPProperties
	}
	return nil
}

func (m *VirtualIP) GetLoadbalancerPoolRefs() []*VirtualIPLoadbalancerPoolRef {
	if m != nil {
		return m.LoadbalancerPoolRefs
	}
	return nil
}

func (m *VirtualIP) GetTagRefs() []*VirtualIPTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *VirtualIP) GetVirtualMachineInterfaceRefs() []*VirtualIPVirtualMachineInterfaceRef {
	if m != nil {
		return m.VirtualMachineInterfaceRefs
	}
	return nil
}

type VirtualIPLoadbalancerPoolRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualIPLoadbalancerPoolRef) Reset()      { *m = VirtualIPLoadbalancerPoolRef{} }
func (*VirtualIPLoadbalancerPoolRef) ProtoMessage() {}
func (*VirtualIPLoadbalancerPoolRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{345}
}
func (m *VirtualIPLoadbalancerPoolRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualIPLoadbalancerPoolRef.Unmarshal(m, b)
}
func (m *VirtualIPLoadbalancerPoolRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualIPLoadbalancerPoolRef.Marshal(b, m, deterministic)
}
func (m *VirtualIPLoadbalancerPoolRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualIPLoadbalancerPoolRef.Merge(m, src)
}
func (m *VirtualIPLoadbalancerPoolRef) XXX_Size() int {
	return xxx_messageInfo_VirtualIPLoadbalancerPoolRef.Size(m)
}
func (m *VirtualIPLoadbalancerPoolRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualIPLoadbalancerPoolRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualIPLoadbalancerPoolRef proto.InternalMessageInfo

func (m *VirtualIPLoadbalancerPoolRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualIPLoadbalancerPoolRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualIPLoadbalancerPoolRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualIPTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualIPTagRef) Reset()      { *m = VirtualIPTagRef{} }
func (*VirtualIPTagRef) ProtoMessage() {}
func (*VirtualIPTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{346}
}
func (m *VirtualIPTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualIPTagRef.Unmarshal(m, b)
}
func (m *VirtualIPTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualIPTagRef.Marshal(b, m, deterministic)
}
func (m *VirtualIPTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualIPTagRef.Merge(m, src)
}
func (m *VirtualIPTagRef) XXX_Size() int {
	return xxx_messageInfo_VirtualIPTagRef.Size(m)
}
func (m *VirtualIPTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualIPTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualIPTagRef proto.InternalMessageInfo

func (m *VirtualIPTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualIPTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualIPTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualIPVirtualMachineInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualIPVirtualMachineInterfaceRef) Reset()      { *m = VirtualIPVirtualMachineInterfaceRef{} }
func (*VirtualIPVirtualMachineInterfaceRef) ProtoMessage() {}
func (*VirtualIPVirtualMachineInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{347}
}
func (m *VirtualIPVirtualMachineInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualIPVirtualMachineInterfaceRef.Unmarshal(m, b)
}
func (m *VirtualIPVirtualMachineInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualIPVirtualMachineInterfaceRef.Marshal(b, m, deterministic)
}
func (m *VirtualIPVirtualMachineInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualIPVirtualMachineInterfaceRef.Merge(m, src)
}
func (m *VirtualIPVirtualMachineInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_VirtualIPVirtualMachineInterfaceRef.Size(m)
}
func (m *VirtualIPVirtualMachineInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualIPVirtualMachineInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualIPVirtualMachineInterfaceRef proto.InternalMessageInfo

func (m *VirtualIPVirtualMachineInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualIPVirtualMachineInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualIPVirtualMachineInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineInterface struct {
	Annotations                                *KeyValuePairs                                       `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion                       int64                                                `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                                string                                               `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                                     []string                                             `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                                       string                                               `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                                    *IdPermsType                                         `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                                       string                                               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                                 string                                               `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                                 string                                               `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                                     *PermType2                                           `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                                       string                                               `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	EcmpHashingIncludeFields                   *EcmpHashingIncludeFields                            `protobuf:"bytes,12,opt,name=ecmp_hashing_include_fields,json=ecmpHashingIncludeFields,proto3" json:"ecmp_hashing_include_fields,omitempty" yaml:"ecmp_hashing_include_fields,omitempty"`
	IgmpEnable                                 bool                                                 `protobuf:"varint,13,opt,name=igmp_enable,json=igmpEnable,proto3" json:"igmp_enable,omitempty" yaml:"igmp_enable,omitempty"`
	PortSecurityEnabled                        bool                                                 `protobuf:"varint,14,opt,name=port_security_enabled,json=portSecurityEnabled,proto3" json:"port_security_enabled,omitempty" yaml:"port_security_enabled,omitempty"`
	VirtualMachineInterfaceAllowedAddressPairs *AllowedAddressPairs                                 `protobuf:"bytes,15,opt,name=virtual_machine_interface_allowed_address_pairs,json=virtualMachineInterfaceAllowedAddressPairs,proto3" json:"virtual_machine_interface_allowed_address_pairs,omitempty" yaml:"virtual_machine_interface_allowed_address_pairs,omitempty"`
	VirtualMachineInterfaceBindings            *KeyValuePairs                                       `protobuf:"bytes,16,opt,name=virtual_machine_interface_bindings,json=virtualMachineInterfaceBindings,proto3" json:"virtual_machine_interface_bindings,omitempty" yaml:"virtual_machine_interface_bindings,omitempty"`
	VirtualMachineInterfaceDeviceOwner         string                                               `protobuf:"bytes,17,opt,name=virtual_machine_interface_device_owner,json=virtualMachineInterfaceDeviceOwner,proto3" json:"virtual_machine_interface_device_owner,omitempty" yaml:"virtual_machine_interface_device_owner,omitempty"`
	VirtualMachineInterfaceDHCPOptionList      *DhcpOptionsListType                                 `protobuf:"bytes,18,opt,name=virtual_machine_interface_dhcp_option_list,json=virtualMachineInterfaceDhcpOptionList,proto3" json:"virtual_machine_interface_dhcp_option_list,omitempty" yaml:"virtual_machine_interface_dhcp_option_list,omitempty"`
	VirtualMachineInterfaceDisablePolicy       bool                                                 `protobuf:"varint,19,opt,name=virtual_machine_interface_disable_policy,json=virtualMachineInterfaceDisablePolicy,proto3" json:"virtual_machine_interface_disable_policy,omitempty" yaml:"virtual_machine_interface_disable_policy,omitempty"`
	VirtualMachineInterfaceFatFlowProtocols    *FatFlowProtocols                                    `protobuf:"bytes,20,opt,name=virtual_machine_interface_fat_flow_protocols,json=virtualMachineInterfaceFatFlowProtocols,proto3" json:"virtual_machine_interface_fat_flow_protocols,omitempty" yaml:"virtual_machine_interface_fat_flow_protocols,omitempty"`
	VirtualMachineInterfaceHostRoutes          *RouteTableType                                      `protobuf:"bytes,21,opt,name=virtual_machine_interface_host_routes,json=virtualMachineInterfaceHostRoutes,proto3" json:"virtual_machine_interface_host_routes,omitempty" yaml:"virtual_machine_interface_host_routes,omitempty"`
	VirtualMachineInterfaceMacAddresses        *MacAddressesType                                    `protobuf:"bytes,22,opt,name=virtual_machine_interface_mac_addresses,json=virtualMachineInterfaceMacAddresses,proto3" json:"virtual_machine_interface_mac_addresses,omitempty" yaml:"virtual_machine_interface_mac_addresses,omitempty"`
	VirtualMachineInterfaceProperties          *VirtualMachineInterfacePropertiesType               `protobuf:"bytes,23,opt,name=virtual_machine_interface_properties,json=virtualMachineInterfaceProperties,proto3" json:"virtual_machine_interface_properties,omitempty" yaml:"virtual_machine_interface_properties,omitempty"`
	VlanTagBasedBridgeDomain                   bool                                                 `protobuf:"varint,24,opt,name=vlan_tag_based_bridge_domain,json=vlanTagBasedBridgeDomain,proto3" json:"vlan_tag_based_bridge_domain,omitempty" yaml:"vlan_tag_based_bridge_domain,omitempty"`
	VRFAssignTable                             *VrfAssignTableType                                  `protobuf:"bytes,25,opt,name=vrf_assign_table,json=vrfAssignTable,proto3" json:"vrf_assign_table,omitempty" yaml:"vrf_assign_table,omitempty"`
	BGPRouterRefs                              []*VirtualMachineInterfaceBGPRouterRef               `protobuf:"bytes,1026,rep,name=bgp_router_refs,json=bgpRouterRefs,proto3" json:"bgp_router_refs,omitempty" yaml:"bgp_router_refs,omitempty"`
	BridgeDomainRefs                           []*VirtualMachineInterfaceBridgeDomainRef            `protobuf:"bytes,1027,rep,name=bridge_domain_refs,json=bridgeDomainRefs,proto3" json:"bridge_domain_refs,omitempty" yaml:"bridge_domain_refs,omitempty"`
	InterfaceRouteTableRefs                    []*VirtualMachineInterfaceInterfaceRouteTableRef     `protobuf:"bytes,1028,rep,name=interface_route_table_refs,json=interfaceRouteTableRefs,proto3" json:"interface_route_table_refs,omitempty" yaml:"interface_route_table_refs,omitempty"`
	PhysicalInterfaceRefs                      []*VirtualMachineInterfacePhysicalInterfaceRef       `protobuf:"bytes,1029,rep,name=physical_interface_refs,json=physicalInterfaceRefs,proto3" json:"physical_interface_refs,omitempty" yaml:"physical_interface_refs,omitempty"`
	PortProfileRefs                            []*VirtualMachineInterfacePortProfileRef             `protobuf:"bytes,1030,rep,name=port_profile_refs,json=portProfileRefs,proto3" json:"port_profile_refs,omitempty" yaml:"port_profile_refs,omitempty"`
	PortTupleRefs                              []*VirtualMachineInterfacePortTupleRef               `protobuf:"bytes,1031,rep,name=port_tuple_refs,json=portTupleRefs,proto3" json:"port_tuple_refs,omitempty" yaml:"port_tuple_refs,omitempty"`
	QosConfigRefs                              []*VirtualMachineInterfaceQosConfigRef               `protobuf:"bytes,1032,rep,name=qos_config_refs,json=qosConfigRefs,proto3" json:"qos_config_refs,omitempty" yaml:"qos_config_refs,omitempty"`
	RoutingInstanceRefs                        []*VirtualMachineInterfaceRoutingInstanceRef         `protobuf:"bytes,1033,rep,name=routing_instance_refs,json=routingInstanceRefs,proto3" json:"routing_instance_refs,omitempty" yaml:"routing_instance_refs,omitempty"`
	SecurityGroupRefs                          []*VirtualMachineInterfaceSecurityGroupRef           `protobuf:"bytes,1034,rep,name=security_group_refs,json=securityGroupRefs,proto3" json:"security_group_refs,omitempty" yaml:"security_group_refs,omitempty"`
	SecurityLoggingObjectRefs                  []*VirtualMachineInterfaceSecurityLoggingObjectRef   `protobuf:"bytes,1035,rep,name=security_logging_object_refs,json=securityLoggingObjectRefs,proto3" json:"security_logging_object_refs,omitempty" yaml:"security_logging_object_refs,omitempty"`
	ServiceEndpointRefs                        []*VirtualMachineInterfaceServiceEndpointRef         `protobuf:"bytes,1036,rep,name=service_endpoint_refs,json=serviceEndpointRefs,proto3" json:"service_endpoint_refs,omitempty" yaml:"service_endpoint_refs,omitempty"`
	ServiceHealthCheckRefs                     []*VirtualMachineInterfaceServiceHealthCheckRef      `protobuf:"bytes,1037,rep,name=service_health_check_refs,json=serviceHealthCheckRefs,proto3" json:"service_health_check_refs,omitempty" yaml:"service_health_check_refs,omitempty"`
	TagRefs                                    []*VirtualMachineInterfaceTagRef                     `protobuf:"bytes,1038,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineRefs                         []*VirtualMachineInterfaceVirtualMachineRef          `protobuf:"bytes,1039,rep,name=virtual_machine_refs,json=virtualMachineRefs,proto3" json:"virtual_machine_refs,omitempty" yaml:"virtual_machine_refs,omitempty"`
	VirtualMachineInterfaceRefs                []*VirtualMachineInterfaceVirtualMachineInterfaceRef `protobuf:"bytes,1040,rep,name=virtual_machine_interface_refs,json=virtualMachineInterfaceRefs,proto3" json:"virtual_machine_interface_refs,omitempty" yaml:"virtual_machine_interface_refs,omitempty"`
	VirtualNetworkRefs                         []*VirtualMachineInterfaceVirtualNetworkRef          `protobuf:"bytes,1041,rep,name=virtual_network_refs,json=virtualNetworkRefs,proto3" json:"virtual_network_refs,omitempty" yaml:"virtual_network_refs,omitempty"`
	AliasIPBackRefs                            []*AliasIP                                           `protobuf:"bytes,3043,rep,name=alias_ip_back_refs,json=aliasIpBackRefs,proto3" json:"alias_ip_back_refs,omitempty" yaml:"alias_ip_back_refs,omitempty"`
	BGPAsAServiceBackRefs                      []*BGPAsAService                                     `protobuf:"bytes,3051,rep,name=bgp_as_a_service_back_refs,json=bgpAsAServiceBackRefs,proto3" json:"bgp_as_a_service_back_refs,omitempty" yaml:"bgp_as_a_service_back_refs,omitempty"`
	CustomerAttachmentBackRefs                 []*CustomerAttachment                                `protobuf:"bytes,3052,rep,name=customer_attachment_back_refs,json=customerAttachmentBackRefs,proto3" json:"customer_attachment_back_refs,omitempty" yaml:"customer_attachment_back_refs,omitempty"`
	FloatingIPBackRefs                         []*FloatingIP                                        `protobuf:"bytes,3053,rep,name=floating_ip_back_refs,json=floatingIpBackRefs,proto3" json:"floating_ip_back_refs,omitempty" yaml:"floating_ip_back_refs,omitempty"`
	InstanceIPBackRefs                         []*InstanceIP                                        `protobuf:"bytes,3047,rep,name=instance_ip_back_refs,json=instanceIpBackRefs,proto3" json:"instance_ip_back_refs,omitempty" yaml:"instance_ip_back_refs,omitempty"`
	LinkAggregationGroupBackRefs               []*LinkAggregationGroup                              `protobuf:"bytes,3044,rep,name=link_aggregation_group_back_refs,json=linkAggregationGroupBackRefs,proto3" json:"link_aggregation_group_back_refs,omitempty" yaml:"link_aggregation_group_back_refs,omitempty"`
	LoadbalancerBackRefs                       []*Loadbalancer                                      `protobuf:"bytes,3048,rep,name=loadbalancer_back_refs,json=loadbalancerBackRefs,proto3" json:"loadbalancer_back_refs,omitempty" yaml:"loadbalancer_back_refs,omitempty"`
	LoadbalancerPoolBackRefs                   []*LoadbalancerPool                                  `protobuf:"bytes,3054,rep,name=loadbalancer_pool_back_refs,json=loadbalancerPoolBackRefs,proto3" json:"loadbalancer_pool_back_refs,omitempty" yaml:"loadbalancer_pool_back_refs,omitempty"`
	LogicalInterfaceBackRefs                   []*LogicalInterface                                  `protobuf:"bytes,3045,rep,name=logical_interface_back_refs,json=logicalInterfaceBackRefs,proto3" json:"logical_interface_back_refs,omitempty" yaml:"logical_interface_back_refs,omitempty"`
	LogicalRouterBackRefs                      []*LogicalRouter                                     `protobuf:"bytes,3049,rep,name=logical_router_back_refs,json=logicalRouterBackRefs,proto3" json:"logical_router_back_refs,omitempty" yaml:"logical_router_back_refs,omitempty"`
	SubnetBackRefs                             []*Subnet                                            `protobuf:"bytes,3046,rep,name=subnet_back_refs,json=subnetBackRefs,proto3" json:"subnet_back_refs,omitempty" yaml:"subnet_back_refs,omitempty"`
	VirtualIPBackRefs                          []*VirtualIP                                         `protobuf:"bytes,3042,rep,name=virtual_ip_back_refs,json=virtualIpBackRefs,proto3" json:"virtual_ip_back_refs,omitempty" yaml:"virtual_ip_back_refs,omitempty"`
	VirtualMachineInterfaceBackRefs            []*VirtualMachineInterface                           `protobuf:"bytes,3055,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
	VirtualPortGroupBackRefs                   []*VirtualPortGroup                                  `protobuf:"bytes,3050,rep,name=virtual_port_group_back_refs,json=virtualPortGroupBackRefs,proto3" json:"virtual_port_group_back_refs,omitempty" yaml:"virtual_port_group_back_refs,omitempty"`
}

func (m *VirtualMachineInterface) Reset()      { *m = VirtualMachineInterface{} }
func (*VirtualMachineInterface) ProtoMessage() {}
func (*VirtualMachineInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{348}
}
func (m *VirtualMachineInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterface.Unmarshal(m, b)
}
func (m *VirtualMachineInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterface.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterface.Merge(m, src)
}
func (m *VirtualMachineInterface) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterface.Size(m)
}
func (m *VirtualMachineInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterface.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterface proto.InternalMessageInfo

func (m *VirtualMachineInterface) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *VirtualMachineInterface) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *VirtualMachineInterface) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *VirtualMachineInterface) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *VirtualMachineInterface) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualMachineInterface) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *VirtualMachineInterface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualMachineInterface) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *VirtualMachineInterface) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *VirtualMachineInterface) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *VirtualMachineInterface) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterface) GetEcmpHashingIncludeFields() *EcmpHashingIncludeFields {
	if m != nil {
		return m.EcmpHashingIncludeFields
	}
	return nil
}

func (m *VirtualMachineInterface) GetIgmpEnable() bool {
	if m != nil {
		return m.IgmpEnable
	}
	return false
}

func (m *VirtualMachineInterface) GetPortSecurityEnabled() bool {
	if m != nil {
		return m.PortSecurityEnabled
	}
	return false
}

func (m *VirtualMachineInterface) GetVirtualMachineInterfaceAllowedAddressPairs() *AllowedAddressPairs {
	if m != nil {
		return m.VirtualMachineInterfaceAllowedAddressPairs
	}
	return nil
}

func (m *VirtualMachineInterface) GetVirtualMachineInterfaceBindings() *KeyValuePairs {
	if m != nil {
		return m.VirtualMachineInterfaceBindings
	}
	return nil
}

func (m *VirtualMachineInterface) GetVirtualMachineInterfaceDeviceOwner() string {
	if m != nil {
		return m.VirtualMachineInterfaceDeviceOwner
	}
	return ""
}

func (m *VirtualMachineInterface) GetVirtualMachineInterfaceDHCPOptionList() *DhcpOptionsListType {
	if m != nil {
		return m.VirtualMachineInterfaceDHCPOptionList
	}
	return nil
}

func (m *VirtualMachineInterface) GetVirtualMachineInterfaceDisablePolicy() bool {
	if m != nil {
		return m.VirtualMachineInterfaceDisablePolicy
	}
	return false
}

func (m *VirtualMachineInterface) GetVirtualMachineInterfaceFatFlowProtocols() *FatFlowProtocols {
	if m != nil {
		return m.VirtualMachineInterfaceFatFlowProtocols
	}
	return nil
}

func (m *VirtualMachineInterface) GetVirtualMachineInterfaceHostRoutes() *RouteTableType {
	if m != nil {
		return m.VirtualMachineInterfaceHostRoutes
	}
	return nil
}

func (m *VirtualMachineInterface) GetVirtualMachineInterfaceMacAddresses() *MacAddressesType {
	if m != nil {
		return m.VirtualMachineInterfaceMacAddresses
	}
	return nil
}

func (m *VirtualMachineInterface) GetVirtualMachineInterfaceProperties() *VirtualMachineInterfacePropertiesType {
	if m != nil {
		return m.VirtualMachineInterfaceProperties
	}
	return nil
}

func (m *VirtualMachineInterface) GetVlanTagBasedBridgeDomain() bool {
	if m != nil {
		return m.VlanTagBasedBridgeDomain
	}
	return false
}

func (m *VirtualMachineInterface) GetVRFAssignTable() *VrfAssignTableType {
	if m != nil {
		return m.VRFAssignTable
	}
	return nil
}

func (m *VirtualMachineInterface) GetBGPRouterRefs() []*VirtualMachineInterfaceBGPRouterRef {
	if m != nil {
		return m.BGPRouterRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetBridgeDomainRefs() []*VirtualMachineInterfaceBridgeDomainRef {
	if m != nil {
		return m.BridgeDomainRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetInterfaceRouteTableRefs() []*VirtualMachineInterfaceInterfaceRouteTableRef {
	if m != nil {
		return m.InterfaceRouteTableRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetPhysicalInterfaceRefs() []*VirtualMachineInterfacePhysicalInterfaceRef {
	if m != nil {
		return m.PhysicalInterfaceRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetPortProfileRefs() []*VirtualMachineInterfacePortProfileRef {
	if m != nil {
		return m.PortProfileRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetPortTupleRefs() []*VirtualMachineInterfacePortTupleRef {
	if m != nil {
		return m.PortTupleRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetQosConfigRefs() []*VirtualMachineInterfaceQosConfigRef {
	if m != nil {
		return m.QosConfigRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetRoutingInstanceRefs() []*VirtualMachineInterfaceRoutingInstanceRef {
	if m != nil {
		return m.RoutingInstanceRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetSecurityGroupRefs() []*VirtualMachineInterfaceSecurityGroupRef {
	if m != nil {
		return m.SecurityGroupRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetSecurityLoggingObjectRefs() []*VirtualMachineInterfaceSecurityLoggingObjectRef {
	if m != nil {
		return m.SecurityLoggingObjectRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetServiceEndpointRefs() []*VirtualMachineInterfaceServiceEndpointRef {
	if m != nil {
		return m.ServiceEndpointRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetServiceHealthCheckRefs() []*VirtualMachineInterfaceServiceHealthCheckRef {
	if m != nil {
		return m.ServiceHealthCheckRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetTagRefs() []*VirtualMachineInterfaceTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetVirtualMachineRefs() []*VirtualMachineInterfaceVirtualMachineRef {
	if m != nil {
		return m.VirtualMachineRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetVirtualMachineInterfaceRefs() []*VirtualMachineInterfaceVirtualMachineInterfaceRef {
	if m != nil {
		return m.VirtualMachineInterfaceRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetVirtualNetworkRefs() []*VirtualMachineInterfaceVirtualNetworkRef {
	if m != nil {
		return m.VirtualNetworkRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetAliasIPBackRefs() []*AliasIP {
	if m != nil {
		return m.AliasIPBackRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetBGPAsAServiceBackRefs() []*BGPAsAService {
	if m != nil {
		return m.BGPAsAServiceBackRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetCustomerAttachmentBackRefs() []*CustomerAttachment {
	if m != nil {
		return m.CustomerAttachmentBackRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetFloatingIPBackRefs() []*FloatingIP {
	if m != nil {
		return m.FloatingIPBackRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetInstanceIPBackRefs() []*InstanceIP {
	if m != nil {
		return m.InstanceIPBackRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetLinkAggregationGroupBackRefs() []*LinkAggregationGroup {
	if m != nil {
		return m.LinkAggregationGroupBackRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetLoadbalancerBackRefs() []*Loadbalancer {
	if m != nil {
		return m.LoadbalancerBackRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetLoadbalancerPoolBackRefs() []*LoadbalancerPool {
	if m != nil {
		return m.LoadbalancerPoolBackRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetLogicalInterfaceBackRefs() []*LogicalInterface {
	if m != nil {
		return m.LogicalInterfaceBackRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetLogicalRouterBackRefs() []*LogicalRouter {
	if m != nil {
		return m.LogicalRouterBackRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetSubnetBackRefs() []*Subnet {
	if m != nil {
		return m.SubnetBackRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetVirtualIPBackRefs() []*VirtualIP {
	if m != nil {
		return m.VirtualIPBackRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

func (m *VirtualMachineInterface) GetVirtualPortGroupBackRefs() []*VirtualPortGroup {
	if m != nil {
		return m.VirtualPortGroupBackRefs
	}
	return nil
}

type VirtualMachineInterfaceBGPRouterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineInterfaceBGPRouterRef) Reset()      { *m = VirtualMachineInterfaceBGPRouterRef{} }
func (*VirtualMachineInterfaceBGPRouterRef) ProtoMessage() {}
func (*VirtualMachineInterfaceBGPRouterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{349}
}
func (m *VirtualMachineInterfaceBGPRouterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfaceBGPRouterRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfaceBGPRouterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfaceBGPRouterRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfaceBGPRouterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfaceBGPRouterRef.Merge(m, src)
}
func (m *VirtualMachineInterfaceBGPRouterRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfaceBGPRouterRef.Size(m)
}
func (m *VirtualMachineInterfaceBGPRouterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfaceBGPRouterRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfaceBGPRouterRef proto.InternalMessageInfo

func (m *VirtualMachineInterfaceBGPRouterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfaceBGPRouterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfaceBGPRouterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineInterfaceBridgeDomainRef struct {
	UUID string                      `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string                    `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string                      `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *BridgeDomainMembershipType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *VirtualMachineInterfaceBridgeDomainRef) Reset() {
	*m = VirtualMachineInterfaceBridgeDomainRef{}
}
func (*VirtualMachineInterfaceBridgeDomainRef) ProtoMessage() {}
func (*VirtualMachineInterfaceBridgeDomainRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{350}
}
func (m *VirtualMachineInterfaceBridgeDomainRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfaceBridgeDomainRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfaceBridgeDomainRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfaceBridgeDomainRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfaceBridgeDomainRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfaceBridgeDomainRef.Merge(m, src)
}
func (m *VirtualMachineInterfaceBridgeDomainRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfaceBridgeDomainRef.Size(m)
}
func (m *VirtualMachineInterfaceBridgeDomainRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfaceBridgeDomainRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfaceBridgeDomainRef proto.InternalMessageInfo

func (m *VirtualMachineInterfaceBridgeDomainRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfaceBridgeDomainRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfaceBridgeDomainRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualMachineInterfaceBridgeDomainRef) GetAttr() *BridgeDomainMembershipType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type VirtualMachineInterfaceInterfaceRouteTableRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineInterfaceInterfaceRouteTableRef) Reset() {
	*m = VirtualMachineInterfaceInterfaceRouteTableRef{}
}
func (*VirtualMachineInterfaceInterfaceRouteTableRef) ProtoMessage() {}
func (*VirtualMachineInterfaceInterfaceRouteTableRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{351}
}
func (m *VirtualMachineInterfaceInterfaceRouteTableRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfaceInterfaceRouteTableRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfaceInterfaceRouteTableRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfaceInterfaceRouteTableRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfaceInterfaceRouteTableRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfaceInterfaceRouteTableRef.Merge(m, src)
}
func (m *VirtualMachineInterfaceInterfaceRouteTableRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfaceInterfaceRouteTableRef.Size(m)
}
func (m *VirtualMachineInterfaceInterfaceRouteTableRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfaceInterfaceRouteTableRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfaceInterfaceRouteTableRef proto.InternalMessageInfo

func (m *VirtualMachineInterfaceInterfaceRouteTableRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfaceInterfaceRouteTableRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfaceInterfaceRouteTableRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineInterfacePhysicalInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineInterfacePhysicalInterfaceRef) Reset() {
	*m = VirtualMachineInterfacePhysicalInterfaceRef{}
}
func (*VirtualMachineInterfacePhysicalInterfaceRef) ProtoMessage() {}
func (*VirtualMachineInterfacePhysicalInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{352}
}
func (m *VirtualMachineInterfacePhysicalInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfacePhysicalInterfaceRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfacePhysicalInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfacePhysicalInterfaceRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfacePhysicalInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfacePhysicalInterfaceRef.Merge(m, src)
}
func (m *VirtualMachineInterfacePhysicalInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfacePhysicalInterfaceRef.Size(m)
}
func (m *VirtualMachineInterfacePhysicalInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfacePhysicalInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfacePhysicalInterfaceRef proto.InternalMessageInfo

func (m *VirtualMachineInterfacePhysicalInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfacePhysicalInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfacePhysicalInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineInterfacePortProfileRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineInterfacePortProfileRef) Reset()      { *m = VirtualMachineInterfacePortProfileRef{} }
func (*VirtualMachineInterfacePortProfileRef) ProtoMessage() {}
func (*VirtualMachineInterfacePortProfileRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{353}
}
func (m *VirtualMachineInterfacePortProfileRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfacePortProfileRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfacePortProfileRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfacePortProfileRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfacePortProfileRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfacePortProfileRef.Merge(m, src)
}
func (m *VirtualMachineInterfacePortProfileRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfacePortProfileRef.Size(m)
}
func (m *VirtualMachineInterfacePortProfileRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfacePortProfileRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfacePortProfileRef proto.InternalMessageInfo

func (m *VirtualMachineInterfacePortProfileRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfacePortProfileRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfacePortProfileRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineInterfacePortTupleRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineInterfacePortTupleRef) Reset()      { *m = VirtualMachineInterfacePortTupleRef{} }
func (*VirtualMachineInterfacePortTupleRef) ProtoMessage() {}
func (*VirtualMachineInterfacePortTupleRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{354}
}
func (m *VirtualMachineInterfacePortTupleRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfacePortTupleRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfacePortTupleRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfacePortTupleRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfacePortTupleRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfacePortTupleRef.Merge(m, src)
}
func (m *VirtualMachineInterfacePortTupleRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfacePortTupleRef.Size(m)
}
func (m *VirtualMachineInterfacePortTupleRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfacePortTupleRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfacePortTupleRef proto.InternalMessageInfo

func (m *VirtualMachineInterfacePortTupleRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfacePortTupleRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfacePortTupleRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineInterfaceQosConfigRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineInterfaceQosConfigRef) Reset()      { *m = VirtualMachineInterfaceQosConfigRef{} }
func (*VirtualMachineInterfaceQosConfigRef) ProtoMessage() {}
func (*VirtualMachineInterfaceQosConfigRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{355}
}
func (m *VirtualMachineInterfaceQosConfigRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfaceQosConfigRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfaceQosConfigRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfaceQosConfigRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfaceQosConfigRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfaceQosConfigRef.Merge(m, src)
}
func (m *VirtualMachineInterfaceQosConfigRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfaceQosConfigRef.Size(m)
}
func (m *VirtualMachineInterfaceQosConfigRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfaceQosConfigRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfaceQosConfigRef proto.InternalMessageInfo

func (m *VirtualMachineInterfaceQosConfigRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfaceQosConfigRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfaceQosConfigRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineInterfaceRoutingInstanceRef struct {
	UUID string                         `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string                       `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string                         `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *PolicyBasedForwardingRuleType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *VirtualMachineInterfaceRoutingInstanceRef) Reset() {
	*m = VirtualMachineInterfaceRoutingInstanceRef{}
}
func (*VirtualMachineInterfaceRoutingInstanceRef) ProtoMessage() {}
func (*VirtualMachineInterfaceRoutingInstanceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{356}
}
func (m *VirtualMachineInterfaceRoutingInstanceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfaceRoutingInstanceRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfaceRoutingInstanceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfaceRoutingInstanceRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfaceRoutingInstanceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfaceRoutingInstanceRef.Merge(m, src)
}
func (m *VirtualMachineInterfaceRoutingInstanceRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfaceRoutingInstanceRef.Size(m)
}
func (m *VirtualMachineInterfaceRoutingInstanceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfaceRoutingInstanceRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfaceRoutingInstanceRef proto.InternalMessageInfo

func (m *VirtualMachineInterfaceRoutingInstanceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfaceRoutingInstanceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfaceRoutingInstanceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualMachineInterfaceRoutingInstanceRef) GetAttr() *PolicyBasedForwardingRuleType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type VirtualMachineInterfaceSecurityGroupRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineInterfaceSecurityGroupRef) Reset() {
	*m = VirtualMachineInterfaceSecurityGroupRef{}
}
func (*VirtualMachineInterfaceSecurityGroupRef) ProtoMessage() {}
func (*VirtualMachineInterfaceSecurityGroupRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{357}
}
func (m *VirtualMachineInterfaceSecurityGroupRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfaceSecurityGroupRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfaceSecurityGroupRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfaceSecurityGroupRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfaceSecurityGroupRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfaceSecurityGroupRef.Merge(m, src)
}
func (m *VirtualMachineInterfaceSecurityGroupRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfaceSecurityGroupRef.Size(m)
}
func (m *VirtualMachineInterfaceSecurityGroupRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfaceSecurityGroupRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfaceSecurityGroupRef proto.InternalMessageInfo

func (m *VirtualMachineInterfaceSecurityGroupRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfaceSecurityGroupRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfaceSecurityGroupRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineInterfaceSecurityLoggingObjectRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineInterfaceSecurityLoggingObjectRef) Reset() {
	*m = VirtualMachineInterfaceSecurityLoggingObjectRef{}
}
func (*VirtualMachineInterfaceSecurityLoggingObjectRef) ProtoMessage() {}
func (*VirtualMachineInterfaceSecurityLoggingObjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{358}
}
func (m *VirtualMachineInterfaceSecurityLoggingObjectRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfaceSecurityLoggingObjectRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfaceSecurityLoggingObjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfaceSecurityLoggingObjectRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfaceSecurityLoggingObjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfaceSecurityLoggingObjectRef.Merge(m, src)
}
func (m *VirtualMachineInterfaceSecurityLoggingObjectRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfaceSecurityLoggingObjectRef.Size(m)
}
func (m *VirtualMachineInterfaceSecurityLoggingObjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfaceSecurityLoggingObjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfaceSecurityLoggingObjectRef proto.InternalMessageInfo

func (m *VirtualMachineInterfaceSecurityLoggingObjectRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfaceSecurityLoggingObjectRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfaceSecurityLoggingObjectRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineInterfaceServiceEndpointRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineInterfaceServiceEndpointRef) Reset() {
	*m = VirtualMachineInterfaceServiceEndpointRef{}
}
func (*VirtualMachineInterfaceServiceEndpointRef) ProtoMessage() {}
func (*VirtualMachineInterfaceServiceEndpointRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{359}
}
func (m *VirtualMachineInterfaceServiceEndpointRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfaceServiceEndpointRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfaceServiceEndpointRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfaceServiceEndpointRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfaceServiceEndpointRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfaceServiceEndpointRef.Merge(m, src)
}
func (m *VirtualMachineInterfaceServiceEndpointRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfaceServiceEndpointRef.Size(m)
}
func (m *VirtualMachineInterfaceServiceEndpointRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfaceServiceEndpointRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfaceServiceEndpointRef proto.InternalMessageInfo

func (m *VirtualMachineInterfaceServiceEndpointRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfaceServiceEndpointRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfaceServiceEndpointRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineInterfaceServiceHealthCheckRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineInterfaceServiceHealthCheckRef) Reset() {
	*m = VirtualMachineInterfaceServiceHealthCheckRef{}
}
func (*VirtualMachineInterfaceServiceHealthCheckRef) ProtoMessage() {}
func (*VirtualMachineInterfaceServiceHealthCheckRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{360}
}
func (m *VirtualMachineInterfaceServiceHealthCheckRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfaceServiceHealthCheckRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfaceServiceHealthCheckRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfaceServiceHealthCheckRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfaceServiceHealthCheckRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfaceServiceHealthCheckRef.Merge(m, src)
}
func (m *VirtualMachineInterfaceServiceHealthCheckRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfaceServiceHealthCheckRef.Size(m)
}
func (m *VirtualMachineInterfaceServiceHealthCheckRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfaceServiceHealthCheckRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfaceServiceHealthCheckRef proto.InternalMessageInfo

func (m *VirtualMachineInterfaceServiceHealthCheckRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfaceServiceHealthCheckRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfaceServiceHealthCheckRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineInterfaceTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineInterfaceTagRef) Reset()      { *m = VirtualMachineInterfaceTagRef{} }
func (*VirtualMachineInterfaceTagRef) ProtoMessage() {}
func (*VirtualMachineInterfaceTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{361}
}
func (m *VirtualMachineInterfaceTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfaceTagRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfaceTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfaceTagRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfaceTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfaceTagRef.Merge(m, src)
}
func (m *VirtualMachineInterfaceTagRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfaceTagRef.Size(m)
}
func (m *VirtualMachineInterfaceTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfaceTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfaceTagRef proto.InternalMessageInfo

func (m *VirtualMachineInterfaceTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfaceTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfaceTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineInterfaceVirtualMachineRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineInterfaceVirtualMachineRef) Reset() {
	*m = VirtualMachineInterfaceVirtualMachineRef{}
}
func (*VirtualMachineInterfaceVirtualMachineRef) ProtoMessage() {}
func (*VirtualMachineInterfaceVirtualMachineRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{362}
}
func (m *VirtualMachineInterfaceVirtualMachineRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfaceVirtualMachineRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfaceVirtualMachineRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfaceVirtualMachineRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfaceVirtualMachineRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfaceVirtualMachineRef.Merge(m, src)
}
func (m *VirtualMachineInterfaceVirtualMachineRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfaceVirtualMachineRef.Size(m)
}
func (m *VirtualMachineInterfaceVirtualMachineRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfaceVirtualMachineRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfaceVirtualMachineRef proto.InternalMessageInfo

func (m *VirtualMachineInterfaceVirtualMachineRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfaceVirtualMachineRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfaceVirtualMachineRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineInterfaceVirtualMachineInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineInterfaceVirtualMachineInterfaceRef) Reset() {
	*m = VirtualMachineInterfaceVirtualMachineInterfaceRef{}
}
func (*VirtualMachineInterfaceVirtualMachineInterfaceRef) ProtoMessage() {}
func (*VirtualMachineInterfaceVirtualMachineInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{363}
}
func (m *VirtualMachineInterfaceVirtualMachineInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfaceVirtualMachineInterfaceRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfaceVirtualMachineInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfaceVirtualMachineInterfaceRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfaceVirtualMachineInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfaceVirtualMachineInterfaceRef.Merge(m, src)
}
func (m *VirtualMachineInterfaceVirtualMachineInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfaceVirtualMachineInterfaceRef.Size(m)
}
func (m *VirtualMachineInterfaceVirtualMachineInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfaceVirtualMachineInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfaceVirtualMachineInterfaceRef proto.InternalMessageInfo

func (m *VirtualMachineInterfaceVirtualMachineInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfaceVirtualMachineInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfaceVirtualMachineInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineInterfaceVirtualNetworkRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineInterfaceVirtualNetworkRef) Reset() {
	*m = VirtualMachineInterfaceVirtualNetworkRef{}
}
func (*VirtualMachineInterfaceVirtualNetworkRef) ProtoMessage() {}
func (*VirtualMachineInterfaceVirtualNetworkRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{364}
}
func (m *VirtualMachineInterfaceVirtualNetworkRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfaceVirtualNetworkRef.Unmarshal(m, b)
}
func (m *VirtualMachineInterfaceVirtualNetworkRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfaceVirtualNetworkRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfaceVirtualNetworkRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfaceVirtualNetworkRef.Merge(m, src)
}
func (m *VirtualMachineInterfaceVirtualNetworkRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfaceVirtualNetworkRef.Size(m)
}
func (m *VirtualMachineInterfaceVirtualNetworkRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfaceVirtualNetworkRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfaceVirtualNetworkRef proto.InternalMessageInfo

func (m *VirtualMachineInterfaceVirtualNetworkRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineInterfaceVirtualNetworkRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineInterfaceVirtualNetworkRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachine struct {
	Annotations                     *KeyValuePairs                      `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                               `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                              `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                            `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                              `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType                        `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                              `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                              `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                          `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                              `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	ServerType                      string                              `protobuf:"bytes,12,opt,name=server_type,json=serverType,proto3" json:"server_type,omitempty" yaml:"server_type,omitempty"`
	ServiceInstanceRefs             []*VirtualMachineServiceInstanceRef `protobuf:"bytes,1013,rep,name=service_instance_refs,json=serviceInstanceRefs,proto3" json:"service_instance_refs,omitempty" yaml:"service_instance_refs,omitempty"`
	TagRefs                         []*VirtualMachineTagRef             `protobuf:"bytes,1014,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceBackRefs []*VirtualMachineInterface          `protobuf:"bytes,3017,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
	VirtualRouterBackRefs           []*VirtualRouter                    `protobuf:"bytes,3016,rep,name=virtual_router_back_refs,json=virtualRouterBackRefs,proto3" json:"virtual_router_back_refs,omitempty" yaml:"virtual_router_back_refs,omitempty"`
	VirtualMachineInterfaces        []*VirtualMachineInterface          `protobuf:"bytes,2015,rep,name=virtual_machine_interfaces,json=virtualMachineInterfaces,proto3" json:"virtual_machine_interfaces,omitempty" yaml:"virtual_machine_interfaces,omitempty"`
}

func (m *VirtualMachine) Reset()      { *m = VirtualMachine{} }
func (*VirtualMachine) ProtoMessage() {}
func (*VirtualMachine) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{365}
}
func (m *VirtualMachine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachine.Unmarshal(m, b)
}
func (m *VirtualMachine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachine.Marshal(b, m, deterministic)
}
func (m *VirtualMachine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachine.Merge(m, src)
}
func (m *VirtualMachine) XXX_Size() int {
	return xxx_messageInfo_VirtualMachine.Size(m)
}
func (m *VirtualMachine) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachine.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachine proto.InternalMessageInfo

func (m *VirtualMachine) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *VirtualMachine) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *VirtualMachine) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *VirtualMachine) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *VirtualMachine) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualMachine) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *VirtualMachine) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualMachine) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *VirtualMachine) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *VirtualMachine) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *VirtualMachine) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachine) GetServerType() string {
	if m != nil {
		return m.ServerType
	}
	return ""
}

func (m *VirtualMachine) GetServiceInstanceRefs() []*VirtualMachineServiceInstanceRef {
	if m != nil {
		return m.ServiceInstanceRefs
	}
	return nil
}

func (m *VirtualMachine) GetTagRefs() []*VirtualMachineTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *VirtualMachine) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

func (m *VirtualMachine) GetVirtualRouterBackRefs() []*VirtualRouter {
	if m != nil {
		return m.VirtualRouterBackRefs
	}
	return nil
}

func (m *VirtualMachine) GetVirtualMachineInterfaces() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaces
	}
	return nil
}

type VirtualMachineServiceInstanceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineServiceInstanceRef) Reset()      { *m = VirtualMachineServiceInstanceRef{} }
func (*VirtualMachineServiceInstanceRef) ProtoMessage() {}
func (*VirtualMachineServiceInstanceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{366}
}
func (m *VirtualMachineServiceInstanceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineServiceInstanceRef.Unmarshal(m, b)
}
func (m *VirtualMachineServiceInstanceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineServiceInstanceRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineServiceInstanceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineServiceInstanceRef.Merge(m, src)
}
func (m *VirtualMachineServiceInstanceRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineServiceInstanceRef.Size(m)
}
func (m *VirtualMachineServiceInstanceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineServiceInstanceRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineServiceInstanceRef proto.InternalMessageInfo

func (m *VirtualMachineServiceInstanceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineServiceInstanceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineServiceInstanceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualMachineTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualMachineTagRef) Reset()      { *m = VirtualMachineTagRef{} }
func (*VirtualMachineTagRef) ProtoMessage() {}
func (*VirtualMachineTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{367}
}
func (m *VirtualMachineTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineTagRef.Unmarshal(m, b)
}
func (m *VirtualMachineTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineTagRef.Marshal(b, m, deterministic)
}
func (m *VirtualMachineTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineTagRef.Merge(m, src)
}
func (m *VirtualMachineTagRef) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineTagRef.Size(m)
}
func (m *VirtualMachineTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineTagRef proto.InternalMessageInfo

func (m *VirtualMachineTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualMachineTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualMachineTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualNetwork struct {
	Annotations                     *KeyValuePairs                            `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion            int64                                     `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                     string                                    `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                          []string                                  `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                            string                                    `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                         *IdPermsType                              `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                            string                                    `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                      string                                    `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                      string                                    `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                          *PermType2                                `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                            string                                    `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	AddressAllocationMode           string                                    `protobuf:"bytes,12,opt,name=address_allocation_mode,json=addressAllocationMode,proto3" json:"address_allocation_mode,omitempty" yaml:"address_allocation_mode,omitempty"`
	EcmpHashingIncludeFields        *EcmpHashingIncludeFields                 `protobuf:"bytes,13,opt,name=ecmp_hashing_include_fields,json=ecmpHashingIncludeFields,proto3" json:"ecmp_hashing_include_fields,omitempty" yaml:"ecmp_hashing_include_fields,omitempty"`
	ExportRouteTargetList           *RouteTargetList                          `protobuf:"bytes,14,opt,name=export_route_target_list,json=exportRouteTargetList,proto3" json:"export_route_target_list,omitempty" yaml:"export_route_target_list,omitempty"`
	ExternalIpam                    bool                                      `protobuf:"varint,15,opt,name=external_ipam,json=externalIpam,proto3" json:"external_ipam,omitempty" yaml:"external_ipam,omitempty"`
	FabricSnat                      bool                                      `protobuf:"varint,16,opt,name=fabric_snat,json=fabricSnat,proto3" json:"fabric_snat,omitempty" yaml:"fabric_snat,omitempty"`
	FloodUnknownUnicast             bool                                      `protobuf:"varint,17,opt,name=flood_unknown_unicast,json=floodUnknownUnicast,proto3" json:"flood_unknown_unicast,omitempty" yaml:"flood_unknown_unicast,omitempty"`
	IgmpEnable                      bool                                      `protobuf:"varint,18,opt,name=igmp_enable,json=igmpEnable,proto3" json:"igmp_enable,omitempty" yaml:"igmp_enable,omitempty"`
	ImportRouteTargetList           *RouteTargetList                          `protobuf:"bytes,19,opt,name=import_route_target_list,json=importRouteTargetList,proto3" json:"import_route_target_list,omitempty" yaml:"import_route_target_list,omitempty"`
	IsProviderNetwork               bool                                      `protobuf:"varint,20,opt,name=is_provider_network,json=isProviderNetwork,proto3" json:"is_provider_network,omitempty" yaml:"is_provider_network,omitempty"`
	IsShared                        bool                                      `protobuf:"varint,21,opt,name=is_shared,json=isShared,proto3" json:"is_shared,omitempty" yaml:"is_shared,omitempty"`
	Layer2ControlWord               bool                                      `protobuf:"varint,22,opt,name=layer2_control_word,json=layer2ControlWord,proto3" json:"layer2_control_word,omitempty" yaml:"layer2_control_word,omitempty"`
	MacAgingTime                    int64                                     `protobuf:"varint,23,opt,name=mac_aging_time,json=macAgingTime,proto3" json:"mac_aging_time,omitempty" yaml:"mac_aging_time,omitempty"`
	MacLearningEnabled              bool                                      `protobuf:"varint,24,opt,name=mac_learning_enabled,json=macLearningEnabled,proto3" json:"mac_learning_enabled,omitempty" yaml:"mac_learning_enabled,omitempty"`
	MacLimitControl                 *MACLimitControlType                      `protobuf:"bytes,25,opt,name=mac_limit_control,json=macLimitControl,proto3" json:"mac_limit_control,omitempty" yaml:"mac_limit_control,omitempty"`
	MacMoveControl                  *MACMoveLimitControlType                  `protobuf:"bytes,26,opt,name=mac_move_control,json=macMoveControl,proto3" json:"mac_move_control,omitempty" yaml:"mac_move_control,omitempty"`
	MultiPolicyServiceChainsEnabled bool                                      `protobuf:"varint,27,opt,name=multi_policy_service_chains_enabled,json=multiPolicyServiceChainsEnabled,proto3" json:"multi_policy_service_chains_enabled,omitempty" yaml:"multi_policy_service_chains_enabled,omitempty"`
	PBBEtreeEnable                  bool                                      `protobuf:"varint,28,opt,name=pbb_etree_enable,json=pbbEtreeEnable,proto3" json:"pbb_etree_enable,omitempty" yaml:"pbb_etree_enable,omitempty"`
	PBBEvpnEnable                   bool                                      `protobuf:"varint,29,opt,name=pbb_evpn_enable,json=pbbEvpnEnable,proto3" json:"pbb_evpn_enable,omitempty" yaml:"pbb_evpn_enable,omitempty"`
	PortSecurityEnabled             bool                                      `protobuf:"varint,30,opt,name=port_security_enabled,json=portSecurityEnabled,proto3" json:"port_security_enabled,omitempty" yaml:"port_security_enabled,omitempty"`
	ProviderProperties              *ProviderDetails                          `protobuf:"bytes,31,opt,name=provider_properties,json=providerProperties,proto3" json:"provider_properties,omitempty" yaml:"provider_properties,omitempty"`
	RouteTargetList                 *RouteTargetList                          `protobuf:"bytes,32,opt,name=route_target_list,json=routeTargetList,proto3" json:"route_target_list,omitempty" yaml:"route_target_list,omitempty"`
	RouterExternal                  bool                                      `protobuf:"varint,33,opt,name=router_external,json=routerExternal,proto3" json:"router_external,omitempty" yaml:"router_external,omitempty"`
	VirtualNetworkCategory          string                                    `protobuf:"bytes,34,opt,name=virtual_network_category,json=virtualNetworkCategory,proto3" json:"virtual_network_category,omitempty" yaml:"virtual_network_category,omitempty"`
	VirtualNetworkFatFlowProtocols  *FatFlowProtocols                         `protobuf:"bytes,35,opt,name=virtual_network_fat_flow_protocols,json=virtualNetworkFatFlowProtocols,proto3" json:"virtual_network_fat_flow_protocols,omitempty" yaml:"virtual_network_fat_flow_protocols,omitempty"`
	VirtualNetworkNetworkID         int64                                     `protobuf:"varint,36,opt,name=virtual_network_network_id,json=virtualNetworkNetworkId,proto3" json:"virtual_network_network_id,omitempty" yaml:"virtual_network_network_id,omitempty"`
	VirtualNetworkProperties        *VirtualNetworkType                       `protobuf:"bytes,37,opt,name=virtual_network_properties,json=virtualNetworkProperties,proto3" json:"virtual_network_properties,omitempty" yaml:"virtual_network_properties,omitempty"`
	VirtualNetworkRoutedProperties  *VirtualNetworkRoutedPropertiesType       `protobuf:"bytes,38,opt,name=virtual_network_routed_properties,json=virtualNetworkRoutedProperties,proto3" json:"virtual_network_routed_properties,omitempty" yaml:"virtual_network_routed_properties,omitempty"`
	BGPVPNRefs                      []*VirtualNetworkBGPVPNRef                `protobuf:"bytes,1039,rep,name=bgpvpn_refs,json=bgpvpnRefs,proto3" json:"bgpvpn_refs,omitempty" yaml:"bgpvpn_refs,omitempty"`
	IntentMapRefs                   []*VirtualNetworkIntentMapRef             `protobuf:"bytes,1040,rep,name=intent_map_refs,json=intentMapRefs,proto3" json:"intent_map_refs,omitempty" yaml:"intent_map_refs,omitempty"`
	MulticastPolicyRefs             []*VirtualNetworkMulticastPolicyRef       `protobuf:"bytes,1041,rep,name=multicast_policy_refs,json=multicastPolicyRefs,proto3" json:"multicast_policy_refs,omitempty" yaml:"multicast_policy_refs,omitempty"`
	NetworkIpamRefs                 []*VirtualNetworkNetworkIpamRef           `protobuf:"bytes,1042,rep,name=network_ipam_refs,json=networkIpamRefs,proto3" json:"network_ipam_refs,omitempty" yaml:"network_ipam_refs,omitempty"`
	NetworkPolicyRefs               []*VirtualNetworkNetworkPolicyRef         `protobuf:"bytes,1043,rep,name=network_policy_refs,json=networkPolicyRefs,proto3" json:"network_policy_refs,omitempty" yaml:"network_policy_refs,omitempty"`
	QosConfigRefs                   []*VirtualNetworkQosConfigRef             `protobuf:"bytes,1044,rep,name=qos_config_refs,json=qosConfigRefs,proto3" json:"qos_config_refs,omitempty" yaml:"qos_config_refs,omitempty"`
	RouteTableRefs                  []*VirtualNetworkRouteTableRef            `protobuf:"bytes,1045,rep,name=route_table_refs,json=routeTableRefs,proto3" json:"route_table_refs,omitempty" yaml:"route_table_refs,omitempty"`
	RoutingPolicyRefs               []*VirtualNetworkRoutingPolicyRef         `protobuf:"bytes,1046,rep,name=routing_policy_refs,json=routingPolicyRefs,proto3" json:"routing_policy_refs,omitempty" yaml:"routing_policy_refs,omitempty"`
	SecurityLoggingObjectRefs       []*VirtualNetworkSecurityLoggingObjectRef `protobuf:"bytes,1047,rep,name=security_logging_object_refs,json=securityLoggingObjectRefs,proto3" json:"security_logging_object_refs,omitempty" yaml:"security_logging_object_refs,omitempty"`
	TagRefs                         []*VirtualNetworkTagRef                   `protobuf:"bytes,1048,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualNetworkRefs              []*VirtualNetworkVirtualNetworkRef        `protobuf:"bytes,1049,rep,name=virtual_network_refs,json=virtualNetworkRefs,proto3" json:"virtual_network_refs,omitempty" yaml:"virtual_network_refs,omitempty"`
	DataCenterInterconnectBackRefs  []*DataCenterInterconnect                 `protobuf:"bytes,3060,rep,name=data_center_interconnect_back_refs,json=dataCenterInterconnectBackRefs,proto3" json:"data_center_interconnect_back_refs,omitempty" yaml:"data_center_interconnect_back_refs,omitempty"`
	FabricBackRefs                  []*Fabric                                 `protobuf:"bytes,3061,rep,name=fabric_back_refs,json=fabricBackRefs,proto3" json:"fabric_back_refs,omitempty" yaml:"fabric_back_refs,omitempty"`
	FirewallRuleBackRefs            []*FirewallRule                           `protobuf:"bytes,3055,rep,name=firewall_rule_back_refs,json=firewallRuleBackRefs,proto3" json:"firewall_rule_back_refs,omitempty" yaml:"firewall_rule_back_refs,omitempty"`
	FlowNodeBackRefs                []*FlowNode                               `protobuf:"bytes,3062,rep,name=flow_node_back_refs,json=flowNodeBackRefs,proto3" json:"flow_node_back_refs,omitempty" yaml:"flow_node_back_refs,omitempty"`
	HostBasedServiceBackRefs        []*HostBasedService                       `protobuf:"bytes,3056,rep,name=host_based_service_back_refs,json=hostBasedServiceBackRefs,proto3" json:"host_based_service_back_refs,omitempty" yaml:"host_based_service_back_refs,omitempty"`
	InstanceIPBackRefs              []*InstanceIP                             `protobuf:"bytes,3063,rep,name=instance_ip_back_refs,json=instanceIpBackRefs,proto3" json:"instance_ip_back_refs,omitempty" yaml:"instance_ip_back_refs,omitempty"`
	LogicalRouterBackRefs           []*LogicalRouter                          `protobuf:"bytes,3064,rep,name=logical_router_back_refs,json=logicalRouterBackRefs,proto3" json:"logical_router_back_refs,omitempty" yaml:"logical_router_back_refs,omitempty"`
	PhysicalRouterBackRefs          []*PhysicalRouter                         `protobuf:"bytes,3065,rep,name=physical_router_back_refs,json=physicalRouterBackRefs,proto3" json:"physical_router_back_refs,omitempty" yaml:"physical_router_back_refs,omitempty"`
	PortTupleBackRefs               []*PortTuple                              `protobuf:"bytes,3057,rep,name=port_tuple_back_refs,json=portTupleBackRefs,proto3" json:"port_tuple_back_refs,omitempty" yaml:"port_tuple_back_refs,omitempty"`
	VirtualMachineInterfaceBackRefs []*VirtualMachineInterface                `protobuf:"bytes,3058,rep,name=virtual_machine_interface_back_refs,json=virtualMachineInterfaceBackRefs,proto3" json:"virtual_machine_interface_back_refs,omitempty" yaml:"virtual_machine_interface_back_refs,omitempty"`
	VirtualNetworkBackRefs          []*VirtualNetwork                         `protobuf:"bytes,3059,rep,name=virtual_network_back_refs,json=virtualNetworkBackRefs,proto3" json:"virtual_network_back_refs,omitempty" yaml:"virtual_network_back_refs,omitempty"`
	AccessControlLists              []*AccessControlList                      `protobuf:"bytes,2050,rep,name=access_control_lists,json=accessControlLists,proto3" json:"access_control_lists,omitempty" yaml:"access_control_lists,omitempty"`
	AliasIPPools                    []*AliasIPPool                            `protobuf:"bytes,2051,rep,name=alias_ip_pools,json=aliasIpPools,proto3" json:"alias_ip_pools,omitempty" yaml:"alias_ip_pools,omitempty"`
	BridgeDomains                   []*BridgeDomain                           `protobuf:"bytes,2052,rep,name=bridge_domains,json=bridgeDomains,proto3" json:"bridge_domains,omitempty" yaml:"bridge_domains,omitempty"`
	FloatingIPPools                 []*FloatingIPPool                         `protobuf:"bytes,2053,rep,name=floating_ip_pools,json=floatingIpPools,proto3" json:"floating_ip_pools,omitempty" yaml:"floating_ip_pools,omitempty"`
	RoutingInstances                []*RoutingInstance                        `protobuf:"bytes,2054,rep,name=routing_instances,json=routingInstances,proto3" json:"routing_instances,omitempty" yaml:"routing_instances,omitempty"`
}

func (m *VirtualNetwork) Reset()      { *m = VirtualNetwork{} }
func (*VirtualNetwork) ProtoMessage() {}
func (*VirtualNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{368}
}
func (m *VirtualNetwork) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetwork.Unmarshal(m, b)
}
func (m *VirtualNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetwork.Marshal(b, m, deterministic)
}
func (m *VirtualNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetwork.Merge(m, src)
}
func (m *VirtualNetwork) XXX_Size() int {
	return xxx_messageInfo_VirtualNetwork.Size(m)
}
func (m *VirtualNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetwork proto.InternalMessageInfo

func (m *VirtualNetwork) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *VirtualNetwork) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *VirtualNetwork) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *VirtualNetwork) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *VirtualNetwork) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualNetwork) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *VirtualNetwork) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualNetwork) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *VirtualNetwork) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *VirtualNetwork) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *VirtualNetwork) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualNetwork) GetAddressAllocationMode() string {
	if m != nil {
		return m.AddressAllocationMode
	}
	return ""
}

func (m *VirtualNetwork) GetEcmpHashingIncludeFields() *EcmpHashingIncludeFields {
	if m != nil {
		return m.EcmpHashingIncludeFields
	}
	return nil
}

func (m *VirtualNetwork) GetExportRouteTargetList() *RouteTargetList {
	if m != nil {
		return m.ExportRouteTargetList
	}
	return nil
}

func (m *VirtualNetwork) GetExternalIpam() bool {
	if m != nil {
		return m.ExternalIpam
	}
	return false
}

func (m *VirtualNetwork) GetFabricSnat() bool {
	if m != nil {
		return m.FabricSnat
	}
	return false
}

func (m *VirtualNetwork) GetFloodUnknownUnicast() bool {
	if m != nil {
		return m.FloodUnknownUnicast
	}
	return false
}

func (m *VirtualNetwork) GetIgmpEnable() bool {
	if m != nil {
		return m.IgmpEnable
	}
	return false
}

func (m *VirtualNetwork) GetImportRouteTargetList() *RouteTargetList {
	if m != nil {
		return m.ImportRouteTargetList
	}
	return nil
}

func (m *VirtualNetwork) GetIsProviderNetwork() bool {
	if m != nil {
		return m.IsProviderNetwork
	}
	return false
}

func (m *VirtualNetwork) GetIsShared() bool {
	if m != nil {
		return m.IsShared
	}
	return false
}

func (m *VirtualNetwork) GetLayer2ControlWord() bool {
	if m != nil {
		return m.Layer2ControlWord
	}
	return false
}

func (m *VirtualNetwork) GetMacAgingTime() int64 {
	if m != nil {
		return m.MacAgingTime
	}
	return 0
}

func (m *VirtualNetwork) GetMacLearningEnabled() bool {
	if m != nil {
		return m.MacLearningEnabled
	}
	return false
}

func (m *VirtualNetwork) GetMacLimitControl() *MACLimitControlType {
	if m != nil {
		return m.MacLimitControl
	}
	return nil
}

func (m *VirtualNetwork) GetMacMoveControl() *MACMoveLimitControlType {
	if m != nil {
		return m.MacMoveControl
	}
	return nil
}

func (m *VirtualNetwork) GetMultiPolicyServiceChainsEnabled() bool {
	if m != nil {
		return m.MultiPolicyServiceChainsEnabled
	}
	return false
}

func (m *VirtualNetwork) GetPBBEtreeEnable() bool {
	if m != nil {
		return m.PBBEtreeEnable
	}
	return false
}

func (m *VirtualNetwork) GetPBBEvpnEnable() bool {
	if m != nil {
		return m.PBBEvpnEnable
	}
	return false
}

func (m *VirtualNetwork) GetPortSecurityEnabled() bool {
	if m != nil {
		return m.PortSecurityEnabled
	}
	return false
}

func (m *VirtualNetwork) GetProviderProperties() *ProviderDetails {
	if m != nil {
		return m.ProviderProperties
	}
	return nil
}

func (m *VirtualNetwork) GetRouteTargetList() *RouteTargetList {
	if m != nil {
		return m.RouteTargetList
	}
	return nil
}

func (m *VirtualNetwork) GetRouterExternal() bool {
	if m != nil {
		return m.RouterExternal
	}
	return false
}

func (m *VirtualNetwork) GetVirtualNetworkCategory() string {
	if m != nil {
		return m.VirtualNetworkCategory
	}
	return ""
}

func (m *VirtualNetwork) GetVirtualNetworkFatFlowProtocols() *FatFlowProtocols {
	if m != nil {
		return m.VirtualNetworkFatFlowProtocols
	}
	return nil
}

func (m *VirtualNetwork) GetVirtualNetworkNetworkID() int64 {
	if m != nil {
		return m.VirtualNetworkNetworkID
	}
	return 0
}

func (m *VirtualNetwork) GetVirtualNetworkProperties() *VirtualNetworkType {
	if m != nil {
		return m.VirtualNetworkProperties
	}
	return nil
}

func (m *VirtualNetwork) GetVirtualNetworkRoutedProperties() *VirtualNetworkRoutedPropertiesType {
	if m != nil {
		return m.VirtualNetworkRoutedProperties
	}
	return nil
}

func (m *VirtualNetwork) GetBGPVPNRefs() []*VirtualNetworkBGPVPNRef {
	if m != nil {
		return m.BGPVPNRefs
	}
	return nil
}

func (m *VirtualNetwork) GetIntentMapRefs() []*VirtualNetworkIntentMapRef {
	if m != nil {
		return m.IntentMapRefs
	}
	return nil
}

func (m *VirtualNetwork) GetMulticastPolicyRefs() []*VirtualNetworkMulticastPolicyRef {
	if m != nil {
		return m.MulticastPolicyRefs
	}
	return nil
}

func (m *VirtualNetwork) GetNetworkIpamRefs() []*VirtualNetworkNetworkIpamRef {
	if m != nil {
		return m.NetworkIpamRefs
	}
	return nil
}

func (m *VirtualNetwork) GetNetworkPolicyRefs() []*VirtualNetworkNetworkPolicyRef {
	if m != nil {
		return m.NetworkPolicyRefs
	}
	return nil
}

func (m *VirtualNetwork) GetQosConfigRefs() []*VirtualNetworkQosConfigRef {
	if m != nil {
		return m.QosConfigRefs
	}
	return nil
}

func (m *VirtualNetwork) GetRouteTableRefs() []*VirtualNetworkRouteTableRef {
	if m != nil {
		return m.RouteTableRefs
	}
	return nil
}

func (m *VirtualNetwork) GetRoutingPolicyRefs() []*VirtualNetworkRoutingPolicyRef {
	if m != nil {
		return m.RoutingPolicyRefs
	}
	return nil
}

func (m *VirtualNetwork) GetSecurityLoggingObjectRefs() []*VirtualNetworkSecurityLoggingObjectRef {
	if m != nil {
		return m.SecurityLoggingObjectRefs
	}
	return nil
}

func (m *VirtualNetwork) GetTagRefs() []*VirtualNetworkTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *VirtualNetwork) GetVirtualNetworkRefs() []*VirtualNetworkVirtualNetworkRef {
	if m != nil {
		return m.VirtualNetworkRefs
	}
	return nil
}

func (m *VirtualNetwork) GetDataCenterInterconnectBackRefs() []*DataCenterInterconnect {
	if m != nil {
		return m.DataCenterInterconnectBackRefs
	}
	return nil
}

func (m *VirtualNetwork) GetFabricBackRefs() []*Fabric {
	if m != nil {
		return m.FabricBackRefs
	}
	return nil
}

func (m *VirtualNetwork) GetFirewallRuleBackRefs() []*FirewallRule {
	if m != nil {
		return m.FirewallRuleBackRefs
	}
	return nil
}

func (m *VirtualNetwork) GetFlowNodeBackRefs() []*FlowNode {
	if m != nil {
		return m.FlowNodeBackRefs
	}
	return nil
}

func (m *VirtualNetwork) GetHostBasedServiceBackRefs() []*HostBasedService {
	if m != nil {
		return m.HostBasedServiceBackRefs
	}
	return nil
}

func (m *VirtualNetwork) GetInstanceIPBackRefs() []*InstanceIP {
	if m != nil {
		return m.InstanceIPBackRefs
	}
	return nil
}

func (m *VirtualNetwork) GetLogicalRouterBackRefs() []*LogicalRouter {
	if m != nil {
		return m.LogicalRouterBackRefs
	}
	return nil
}

func (m *VirtualNetwork) GetPhysicalRouterBackRefs() []*PhysicalRouter {
	if m != nil {
		return m.PhysicalRouterBackRefs
	}
	return nil
}

func (m *VirtualNetwork) GetPortTupleBackRefs() []*PortTuple {
	if m != nil {
		return m.PortTupleBackRefs
	}
	return nil
}

func (m *VirtualNetwork) GetVirtualMachineInterfaceBackRefs() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaceBackRefs
	}
	return nil
}

func (m *VirtualNetwork) GetVirtualNetworkBackRefs() []*VirtualNetwork {
	if m != nil {
		return m.VirtualNetworkBackRefs
	}
	return nil
}

func (m *VirtualNetwork) GetAccessControlLists() []*AccessControlList {
	if m != nil {
		return m.AccessControlLists
	}
	return nil
}

func (m *VirtualNetwork) GetAliasIPPools() []*AliasIPPool {
	if m != nil {
		return m.AliasIPPools
	}
	return nil
}

func (m *VirtualNetwork) GetBridgeDomains() []*BridgeDomain {
	if m != nil {
		return m.BridgeDomains
	}
	return nil
}

func (m *VirtualNetwork) GetFloatingIPPools() []*FloatingIPPool {
	if m != nil {
		return m.FloatingIPPools
	}
	return nil
}

func (m *VirtualNetwork) GetRoutingInstances() []*RoutingInstance {
	if m != nil {
		return m.RoutingInstances
	}
	return nil
}

type VirtualNetworkBGPVPNRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualNetworkBGPVPNRef) Reset()      { *m = VirtualNetworkBGPVPNRef{} }
func (*VirtualNetworkBGPVPNRef) ProtoMessage() {}
func (*VirtualNetworkBGPVPNRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{369}
}
func (m *VirtualNetworkBGPVPNRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetworkBGPVPNRef.Unmarshal(m, b)
}
func (m *VirtualNetworkBGPVPNRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetworkBGPVPNRef.Marshal(b, m, deterministic)
}
func (m *VirtualNetworkBGPVPNRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkBGPVPNRef.Merge(m, src)
}
func (m *VirtualNetworkBGPVPNRef) XXX_Size() int {
	return xxx_messageInfo_VirtualNetworkBGPVPNRef.Size(m)
}
func (m *VirtualNetworkBGPVPNRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkBGPVPNRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkBGPVPNRef proto.InternalMessageInfo

func (m *VirtualNetworkBGPVPNRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualNetworkBGPVPNRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualNetworkBGPVPNRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualNetworkIntentMapRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualNetworkIntentMapRef) Reset()      { *m = VirtualNetworkIntentMapRef{} }
func (*VirtualNetworkIntentMapRef) ProtoMessage() {}
func (*VirtualNetworkIntentMapRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{370}
}
func (m *VirtualNetworkIntentMapRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetworkIntentMapRef.Unmarshal(m, b)
}
func (m *VirtualNetworkIntentMapRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetworkIntentMapRef.Marshal(b, m, deterministic)
}
func (m *VirtualNetworkIntentMapRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkIntentMapRef.Merge(m, src)
}
func (m *VirtualNetworkIntentMapRef) XXX_Size() int {
	return xxx_messageInfo_VirtualNetworkIntentMapRef.Size(m)
}
func (m *VirtualNetworkIntentMapRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkIntentMapRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkIntentMapRef proto.InternalMessageInfo

func (m *VirtualNetworkIntentMapRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualNetworkIntentMapRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualNetworkIntentMapRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualNetworkMulticastPolicyRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualNetworkMulticastPolicyRef) Reset()      { *m = VirtualNetworkMulticastPolicyRef{} }
func (*VirtualNetworkMulticastPolicyRef) ProtoMessage() {}
func (*VirtualNetworkMulticastPolicyRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{371}
}
func (m *VirtualNetworkMulticastPolicyRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetworkMulticastPolicyRef.Unmarshal(m, b)
}
func (m *VirtualNetworkMulticastPolicyRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetworkMulticastPolicyRef.Marshal(b, m, deterministic)
}
func (m *VirtualNetworkMulticastPolicyRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkMulticastPolicyRef.Merge(m, src)
}
func (m *VirtualNetworkMulticastPolicyRef) XXX_Size() int {
	return xxx_messageInfo_VirtualNetworkMulticastPolicyRef.Size(m)
}
func (m *VirtualNetworkMulticastPolicyRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkMulticastPolicyRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkMulticastPolicyRef proto.InternalMessageInfo

func (m *VirtualNetworkMulticastPolicyRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualNetworkMulticastPolicyRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualNetworkMulticastPolicyRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualNetworkNetworkIpamRef struct {
	UUID string         `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string       `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string         `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *VnSubnetsType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *VirtualNetworkNetworkIpamRef) Reset()      { *m = VirtualNetworkNetworkIpamRef{} }
func (*VirtualNetworkNetworkIpamRef) ProtoMessage() {}
func (*VirtualNetworkNetworkIpamRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{372}
}
func (m *VirtualNetworkNetworkIpamRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetworkNetworkIpamRef.Unmarshal(m, b)
}
func (m *VirtualNetworkNetworkIpamRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetworkNetworkIpamRef.Marshal(b, m, deterministic)
}
func (m *VirtualNetworkNetworkIpamRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkNetworkIpamRef.Merge(m, src)
}
func (m *VirtualNetworkNetworkIpamRef) XXX_Size() int {
	return xxx_messageInfo_VirtualNetworkNetworkIpamRef.Size(m)
}
func (m *VirtualNetworkNetworkIpamRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkNetworkIpamRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkNetworkIpamRef proto.InternalMessageInfo

func (m *VirtualNetworkNetworkIpamRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualNetworkNetworkIpamRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualNetworkNetworkIpamRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualNetworkNetworkIpamRef) GetAttr() *VnSubnetsType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type VirtualNetworkNetworkPolicyRef struct {
	UUID string                    `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string                  `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string                    `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *VirtualNetworkPolicyType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *VirtualNetworkNetworkPolicyRef) Reset()      { *m = VirtualNetworkNetworkPolicyRef{} }
func (*VirtualNetworkNetworkPolicyRef) ProtoMessage() {}
func (*VirtualNetworkNetworkPolicyRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{373}
}
func (m *VirtualNetworkNetworkPolicyRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetworkNetworkPolicyRef.Unmarshal(m, b)
}
func (m *VirtualNetworkNetworkPolicyRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetworkNetworkPolicyRef.Marshal(b, m, deterministic)
}
func (m *VirtualNetworkNetworkPolicyRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkNetworkPolicyRef.Merge(m, src)
}
func (m *VirtualNetworkNetworkPolicyRef) XXX_Size() int {
	return xxx_messageInfo_VirtualNetworkNetworkPolicyRef.Size(m)
}
func (m *VirtualNetworkNetworkPolicyRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkNetworkPolicyRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkNetworkPolicyRef proto.InternalMessageInfo

func (m *VirtualNetworkNetworkPolicyRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualNetworkNetworkPolicyRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualNetworkNetworkPolicyRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualNetworkNetworkPolicyRef) GetAttr() *VirtualNetworkPolicyType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type VirtualNetworkQosConfigRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualNetworkQosConfigRef) Reset()      { *m = VirtualNetworkQosConfigRef{} }
func (*VirtualNetworkQosConfigRef) ProtoMessage() {}
func (*VirtualNetworkQosConfigRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{374}
}
func (m *VirtualNetworkQosConfigRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetworkQosConfigRef.Unmarshal(m, b)
}
func (m *VirtualNetworkQosConfigRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetworkQosConfigRef.Marshal(b, m, deterministic)
}
func (m *VirtualNetworkQosConfigRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkQosConfigRef.Merge(m, src)
}
func (m *VirtualNetworkQosConfigRef) XXX_Size() int {
	return xxx_messageInfo_VirtualNetworkQosConfigRef.Size(m)
}
func (m *VirtualNetworkQosConfigRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkQosConfigRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkQosConfigRef proto.InternalMessageInfo

func (m *VirtualNetworkQosConfigRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualNetworkQosConfigRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualNetworkQosConfigRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualNetworkRouteTableRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualNetworkRouteTableRef) Reset()      { *m = VirtualNetworkRouteTableRef{} }
func (*VirtualNetworkRouteTableRef) ProtoMessage() {}
func (*VirtualNetworkRouteTableRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{375}
}
func (m *VirtualNetworkRouteTableRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetworkRouteTableRef.Unmarshal(m, b)
}
func (m *VirtualNetworkRouteTableRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetworkRouteTableRef.Marshal(b, m, deterministic)
}
func (m *VirtualNetworkRouteTableRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkRouteTableRef.Merge(m, src)
}
func (m *VirtualNetworkRouteTableRef) XXX_Size() int {
	return xxx_messageInfo_VirtualNetworkRouteTableRef.Size(m)
}
func (m *VirtualNetworkRouteTableRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkRouteTableRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkRouteTableRef proto.InternalMessageInfo

func (m *VirtualNetworkRouteTableRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualNetworkRouteTableRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualNetworkRouteTableRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualNetworkRoutingPolicyRef struct {
	UUID string             `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string           `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string             `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *RoutingPolicyType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *VirtualNetworkRoutingPolicyRef) Reset()      { *m = VirtualNetworkRoutingPolicyRef{} }
func (*VirtualNetworkRoutingPolicyRef) ProtoMessage() {}
func (*VirtualNetworkRoutingPolicyRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{376}
}
func (m *VirtualNetworkRoutingPolicyRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetworkRoutingPolicyRef.Unmarshal(m, b)
}
func (m *VirtualNetworkRoutingPolicyRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetworkRoutingPolicyRef.Marshal(b, m, deterministic)
}
func (m *VirtualNetworkRoutingPolicyRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkRoutingPolicyRef.Merge(m, src)
}
func (m *VirtualNetworkRoutingPolicyRef) XXX_Size() int {
	return xxx_messageInfo_VirtualNetworkRoutingPolicyRef.Size(m)
}
func (m *VirtualNetworkRoutingPolicyRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkRoutingPolicyRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkRoutingPolicyRef proto.InternalMessageInfo

func (m *VirtualNetworkRoutingPolicyRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualNetworkRoutingPolicyRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualNetworkRoutingPolicyRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualNetworkRoutingPolicyRef) GetAttr() *RoutingPolicyType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type VirtualNetworkSecurityLoggingObjectRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualNetworkSecurityLoggingObjectRef) Reset() {
	*m = VirtualNetworkSecurityLoggingObjectRef{}
}
func (*VirtualNetworkSecurityLoggingObjectRef) ProtoMessage() {}
func (*VirtualNetworkSecurityLoggingObjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{377}
}
func (m *VirtualNetworkSecurityLoggingObjectRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetworkSecurityLoggingObjectRef.Unmarshal(m, b)
}
func (m *VirtualNetworkSecurityLoggingObjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetworkSecurityLoggingObjectRef.Marshal(b, m, deterministic)
}
func (m *VirtualNetworkSecurityLoggingObjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkSecurityLoggingObjectRef.Merge(m, src)
}
func (m *VirtualNetworkSecurityLoggingObjectRef) XXX_Size() int {
	return xxx_messageInfo_VirtualNetworkSecurityLoggingObjectRef.Size(m)
}
func (m *VirtualNetworkSecurityLoggingObjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkSecurityLoggingObjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkSecurityLoggingObjectRef proto.InternalMessageInfo

func (m *VirtualNetworkSecurityLoggingObjectRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualNetworkSecurityLoggingObjectRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualNetworkSecurityLoggingObjectRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualNetworkTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualNetworkTagRef) Reset()      { *m = VirtualNetworkTagRef{} }
func (*VirtualNetworkTagRef) ProtoMessage() {}
func (*VirtualNetworkTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{378}
}
func (m *VirtualNetworkTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetworkTagRef.Unmarshal(m, b)
}
func (m *VirtualNetworkTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetworkTagRef.Marshal(b, m, deterministic)
}
func (m *VirtualNetworkTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkTagRef.Merge(m, src)
}
func (m *VirtualNetworkTagRef) XXX_Size() int {
	return xxx_messageInfo_VirtualNetworkTagRef.Size(m)
}
func (m *VirtualNetworkTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkTagRef proto.InternalMessageInfo

func (m *VirtualNetworkTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualNetworkTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualNetworkTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualNetworkVirtualNetworkRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualNetworkVirtualNetworkRef) Reset()      { *m = VirtualNetworkVirtualNetworkRef{} }
func (*VirtualNetworkVirtualNetworkRef) ProtoMessage() {}
func (*VirtualNetworkVirtualNetworkRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{379}
}
func (m *VirtualNetworkVirtualNetworkRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetworkVirtualNetworkRef.Unmarshal(m, b)
}
func (m *VirtualNetworkVirtualNetworkRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetworkVirtualNetworkRef.Marshal(b, m, deterministic)
}
func (m *VirtualNetworkVirtualNetworkRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkVirtualNetworkRef.Merge(m, src)
}
func (m *VirtualNetworkVirtualNetworkRef) XXX_Size() int {
	return xxx_messageInfo_VirtualNetworkVirtualNetworkRef.Size(m)
}
func (m *VirtualNetworkVirtualNetworkRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkVirtualNetworkRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkVirtualNetworkRef proto.InternalMessageInfo

func (m *VirtualNetworkVirtualNetworkRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualNetworkVirtualNetworkRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualNetworkVirtualNetworkRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualPortGroup struct {
	Annotations                 *KeyValuePairs                                `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion        int64                                         `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                 string                                        `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                      []string                                      `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                        string                                        `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                     *IdPermsType                                  `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                        string                                        `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                  string                                        `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                  string                                        `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                      *PermType2                                    `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                        string                                        `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	VirtualPortGroupLacpEnabled bool                                          `protobuf:"varint,12,opt,name=virtual_port_group_lacp_enabled,json=virtualPortGroupLacpEnabled,proto3" json:"virtual_port_group_lacp_enabled,omitempty" yaml:"virtual_port_group_lacp_enabled,omitempty"`
	VirtualPortGroupTrunkPortID string                                        `protobuf:"bytes,13,opt,name=virtual_port_group_trunk_port_id,json=virtualPortGroupTrunkPortId,proto3" json:"virtual_port_group_trunk_port_id,omitempty" yaml:"virtual_port_group_trunk_port_id,omitempty"`
	VirtualPortGroupType        string                                        `protobuf:"bytes,14,opt,name=virtual_port_group_type,json=virtualPortGroupType,proto3" json:"virtual_port_group_type,omitempty" yaml:"virtual_port_group_type,omitempty"`
	VirtualPortGroupUserCreated bool                                          `protobuf:"varint,15,opt,name=virtual_port_group_user_created,json=virtualPortGroupUserCreated,proto3" json:"virtual_port_group_user_created,omitempty" yaml:"virtual_port_group_user_created,omitempty"`
	PhysicalInterfaceRefs       []*VirtualPortGroupPhysicalInterfaceRef       `protobuf:"bytes,1016,rep,name=physical_interface_refs,json=physicalInterfaceRefs,proto3" json:"physical_interface_refs,omitempty" yaml:"physical_interface_refs,omitempty"`
	PortProfileRefs             []*VirtualPortGroupPortProfileRef             `protobuf:"bytes,1017,rep,name=port_profile_refs,json=portProfileRefs,proto3" json:"port_profile_refs,omitempty" yaml:"port_profile_refs,omitempty"`
	SecurityGroupRefs           []*VirtualPortGroupSecurityGroupRef           `protobuf:"bytes,1018,rep,name=security_group_refs,json=securityGroupRefs,proto3" json:"security_group_refs,omitempty" yaml:"security_group_refs,omitempty"`
	TagRefs                     []*VirtualPortGroupTagRef                     `protobuf:"bytes,1019,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineInterfaceRefs []*VirtualPortGroupVirtualMachineInterfaceRef `protobuf:"bytes,1020,rep,name=virtual_machine_interface_refs,json=virtualMachineInterfaceRefs,proto3" json:"virtual_machine_interface_refs,omitempty" yaml:"virtual_machine_interface_refs,omitempty"`
}

func (m *VirtualPortGroup) Reset()      { *m = VirtualPortGroup{} }
func (*VirtualPortGroup) ProtoMessage() {}
func (*VirtualPortGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{380}
}
func (m *VirtualPortGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualPortGroup.Unmarshal(m, b)
}
func (m *VirtualPortGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualPortGroup.Marshal(b, m, deterministic)
}
func (m *VirtualPortGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualPortGroup.Merge(m, src)
}
func (m *VirtualPortGroup) XXX_Size() int {
	return xxx_messageInfo_VirtualPortGroup.Size(m)
}
func (m *VirtualPortGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualPortGroup.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualPortGroup proto.InternalMessageInfo

func (m *VirtualPortGroup) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *VirtualPortGroup) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *VirtualPortGroup) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *VirtualPortGroup) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *VirtualPortGroup) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualPortGroup) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *VirtualPortGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualPortGroup) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *VirtualPortGroup) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *VirtualPortGroup) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *VirtualPortGroup) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualPortGroup) GetVirtualPortGroupLacpEnabled() bool {
	if m != nil {
		return m.VirtualPortGroupLacpEnabled
	}
	return false
}

func (m *VirtualPortGroup) GetVirtualPortGroupTrunkPortID() string {
	if m != nil {
		return m.VirtualPortGroupTrunkPortID
	}
	return ""
}

func (m *VirtualPortGroup) GetVirtualPortGroupType() string {
	if m != nil {
		return m.VirtualPortGroupType
	}
	return ""
}

func (m *VirtualPortGroup) GetVirtualPortGroupUserCreated() bool {
	if m != nil {
		return m.VirtualPortGroupUserCreated
	}
	return false
}

func (m *VirtualPortGroup) GetPhysicalInterfaceRefs() []*VirtualPortGroupPhysicalInterfaceRef {
	if m != nil {
		return m.PhysicalInterfaceRefs
	}
	return nil
}

func (m *VirtualPortGroup) GetPortProfileRefs() []*VirtualPortGroupPortProfileRef {
	if m != nil {
		return m.PortProfileRefs
	}
	return nil
}

func (m *VirtualPortGroup) GetSecurityGroupRefs() []*VirtualPortGroupSecurityGroupRef {
	if m != nil {
		return m.SecurityGroupRefs
	}
	return nil
}

func (m *VirtualPortGroup) GetTagRefs() []*VirtualPortGroupTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *VirtualPortGroup) GetVirtualMachineInterfaceRefs() []*VirtualPortGroupVirtualMachineInterfaceRef {
	if m != nil {
		return m.VirtualMachineInterfaceRefs
	}
	return nil
}

type VirtualPortGroupPhysicalInterfaceRef struct {
	UUID string                      `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string                    `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string                      `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *VpgInterfaceParametersType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *VirtualPortGroupPhysicalInterfaceRef) Reset()      { *m = VirtualPortGroupPhysicalInterfaceRef{} }
func (*VirtualPortGroupPhysicalInterfaceRef) ProtoMessage() {}
func (*VirtualPortGroupPhysicalInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{381}
}
func (m *VirtualPortGroupPhysicalInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualPortGroupPhysicalInterfaceRef.Unmarshal(m, b)
}
func (m *VirtualPortGroupPhysicalInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualPortGroupPhysicalInterfaceRef.Marshal(b, m, deterministic)
}
func (m *VirtualPortGroupPhysicalInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualPortGroupPhysicalInterfaceRef.Merge(m, src)
}
func (m *VirtualPortGroupPhysicalInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_VirtualPortGroupPhysicalInterfaceRef.Size(m)
}
func (m *VirtualPortGroupPhysicalInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualPortGroupPhysicalInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualPortGroupPhysicalInterfaceRef proto.InternalMessageInfo

func (m *VirtualPortGroupPhysicalInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualPortGroupPhysicalInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualPortGroupPhysicalInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualPortGroupPhysicalInterfaceRef) GetAttr() *VpgInterfaceParametersType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type VirtualPortGroupPortProfileRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualPortGroupPortProfileRef) Reset()      { *m = VirtualPortGroupPortProfileRef{} }
func (*VirtualPortGroupPortProfileRef) ProtoMessage() {}
func (*VirtualPortGroupPortProfileRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{382}
}
func (m *VirtualPortGroupPortProfileRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualPortGroupPortProfileRef.Unmarshal(m, b)
}
func (m *VirtualPortGroupPortProfileRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualPortGroupPortProfileRef.Marshal(b, m, deterministic)
}
func (m *VirtualPortGroupPortProfileRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualPortGroupPortProfileRef.Merge(m, src)
}
func (m *VirtualPortGroupPortProfileRef) XXX_Size() int {
	return xxx_messageInfo_VirtualPortGroupPortProfileRef.Size(m)
}
func (m *VirtualPortGroupPortProfileRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualPortGroupPortProfileRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualPortGroupPortProfileRef proto.InternalMessageInfo

func (m *VirtualPortGroupPortProfileRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualPortGroupPortProfileRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualPortGroupPortProfileRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualPortGroupSecurityGroupRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualPortGroupSecurityGroupRef) Reset()      { *m = VirtualPortGroupSecurityGroupRef{} }
func (*VirtualPortGroupSecurityGroupRef) ProtoMessage() {}
func (*VirtualPortGroupSecurityGroupRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{383}
}
func (m *VirtualPortGroupSecurityGroupRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualPortGroupSecurityGroupRef.Unmarshal(m, b)
}
func (m *VirtualPortGroupSecurityGroupRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualPortGroupSecurityGroupRef.Marshal(b, m, deterministic)
}
func (m *VirtualPortGroupSecurityGroupRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualPortGroupSecurityGroupRef.Merge(m, src)
}
func (m *VirtualPortGroupSecurityGroupRef) XXX_Size() int {
	return xxx_messageInfo_VirtualPortGroupSecurityGroupRef.Size(m)
}
func (m *VirtualPortGroupSecurityGroupRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualPortGroupSecurityGroupRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualPortGroupSecurityGroupRef proto.InternalMessageInfo

func (m *VirtualPortGroupSecurityGroupRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualPortGroupSecurityGroupRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualPortGroupSecurityGroupRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualPortGroupTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualPortGroupTagRef) Reset()      { *m = VirtualPortGroupTagRef{} }
func (*VirtualPortGroupTagRef) ProtoMessage() {}
func (*VirtualPortGroupTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{384}
}
func (m *VirtualPortGroupTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualPortGroupTagRef.Unmarshal(m, b)
}
func (m *VirtualPortGroupTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualPortGroupTagRef.Marshal(b, m, deterministic)
}
func (m *VirtualPortGroupTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualPortGroupTagRef.Merge(m, src)
}
func (m *VirtualPortGroupTagRef) XXX_Size() int {
	return xxx_messageInfo_VirtualPortGroupTagRef.Size(m)
}
func (m *VirtualPortGroupTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualPortGroupTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualPortGroupTagRef proto.InternalMessageInfo

func (m *VirtualPortGroupTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualPortGroupTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualPortGroupTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualPortGroupVirtualMachineInterfaceRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualPortGroupVirtualMachineInterfaceRef) Reset() {
	*m = VirtualPortGroupVirtualMachineInterfaceRef{}
}
func (*VirtualPortGroupVirtualMachineInterfaceRef) ProtoMessage() {}
func (*VirtualPortGroupVirtualMachineInterfaceRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{385}
}
func (m *VirtualPortGroupVirtualMachineInterfaceRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualPortGroupVirtualMachineInterfaceRef.Unmarshal(m, b)
}
func (m *VirtualPortGroupVirtualMachineInterfaceRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualPortGroupVirtualMachineInterfaceRef.Marshal(b, m, deterministic)
}
func (m *VirtualPortGroupVirtualMachineInterfaceRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualPortGroupVirtualMachineInterfaceRef.Merge(m, src)
}
func (m *VirtualPortGroupVirtualMachineInterfaceRef) XXX_Size() int {
	return xxx_messageInfo_VirtualPortGroupVirtualMachineInterfaceRef.Size(m)
}
func (m *VirtualPortGroupVirtualMachineInterfaceRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualPortGroupVirtualMachineInterfaceRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualPortGroupVirtualMachineInterfaceRef proto.InternalMessageInfo

func (m *VirtualPortGroupVirtualMachineInterfaceRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualPortGroupVirtualMachineInterfaceRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualPortGroupVirtualMachineInterfaceRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualRouter struct {
	Annotations                *KeyValuePairs                    `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion       int64                             `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName                string                            `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName                     []string                          `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                       string                            `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms                    *IdPermsType                      `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                       string                            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType                 string                            `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID                 string                            `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2                     *PermType2                        `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                       string                            `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	VirtualRouterDPDKEnabled   bool                              `protobuf:"varint,12,opt,name=virtual_router_dpdk_enabled,json=virtualRouterDpdkEnabled,proto3" json:"virtual_router_dpdk_enabled,omitempty" yaml:"virtual_router_dpdk_enabled,omitempty"`
	VirtualRouterIPAddress     string                            `protobuf:"bytes,13,opt,name=virtual_router_ip_address,json=virtualRouterIpAddress,proto3" json:"virtual_router_ip_address,omitempty" yaml:"virtual_router_ip_address,omitempty"`
	VirtualRouterType          string                            `protobuf:"bytes,14,opt,name=virtual_router_type,json=virtualRouterType,proto3" json:"virtual_router_type,omitempty" yaml:"virtual_router_type,omitempty"`
	NetworkIpamRefs            []*VirtualRouterNetworkIpamRef    `protobuf:"bytes,1015,rep,name=network_ipam_refs,json=networkIpamRefs,proto3" json:"network_ipam_refs,omitempty" yaml:"network_ipam_refs,omitempty"`
	SubClusterRefs             []*VirtualRouterSubClusterRef     `protobuf:"bytes,1016,rep,name=sub_cluster_refs,json=subClusterRefs,proto3" json:"sub_cluster_refs,omitempty" yaml:"sub_cluster_refs,omitempty"`
	TagRefs                    []*VirtualRouterTagRef            `protobuf:"bytes,1017,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
	VirtualMachineRefs         []*VirtualRouterVirtualMachineRef `protobuf:"bytes,1018,rep,name=virtual_machine_refs,json=virtualMachineRefs,proto3" json:"virtual_machine_refs,omitempty" yaml:"virtual_machine_refs,omitempty"`
	InstanceIPBackRefs         []*InstanceIP                     `protobuf:"bytes,3022,rep,name=instance_ip_back_refs,json=instanceIpBackRefs,proto3" json:"instance_ip_back_refs,omitempty" yaml:"instance_ip_back_refs,omitempty"`
	PhysicalRouterBackRefs     []*PhysicalRouter                 `protobuf:"bytes,3020,rep,name=physical_router_back_refs,json=physicalRouterBackRefs,proto3" json:"physical_router_back_refs,omitempty" yaml:"physical_router_back_refs,omitempty"`
	ProviderAttachmentBackRefs []*ProviderAttachment             `protobuf:"bytes,3021,rep,name=provider_attachment_back_refs,json=providerAttachmentBackRefs,proto3" json:"provider_attachment_back_refs,omitempty" yaml:"provider_attachment_back_refs,omitempty"`
	VirtualMachineInterfaces   []*VirtualMachineInterface        `protobuf:"bytes,2019,rep,name=virtual_machine_interfaces,json=virtualMachineInterfaces,proto3" json:"virtual_machine_interfaces,omitempty" yaml:"virtual_machine_interfaces,omitempty"`
}

func (m *VirtualRouter) Reset()      { *m = VirtualRouter{} }
func (*VirtualRouter) ProtoMessage() {}
func (*VirtualRouter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{386}
}
func (m *VirtualRouter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualRouter.Unmarshal(m, b)
}
func (m *VirtualRouter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualRouter.Marshal(b, m, deterministic)
}
func (m *VirtualRouter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualRouter.Merge(m, src)
}
func (m *VirtualRouter) XXX_Size() int {
	return xxx_messageInfo_VirtualRouter.Size(m)
}
func (m *VirtualRouter) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualRouter.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualRouter proto.InternalMessageInfo

func (m *VirtualRouter) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *VirtualRouter) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *VirtualRouter) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *VirtualRouter) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *VirtualRouter) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualRouter) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *VirtualRouter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualRouter) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *VirtualRouter) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *VirtualRouter) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *VirtualRouter) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualRouter) GetVirtualRouterDPDKEnabled() bool {
	if m != nil {
		return m.VirtualRouterDPDKEnabled
	}
	return false
}

func (m *VirtualRouter) GetVirtualRouterIPAddress() string {
	if m != nil {
		return m.VirtualRouterIPAddress
	}
	return ""
}

func (m *VirtualRouter) GetVirtualRouterType() string {
	if m != nil {
		return m.VirtualRouterType
	}
	return ""
}

func (m *VirtualRouter) GetNetworkIpamRefs() []*VirtualRouterNetworkIpamRef {
	if m != nil {
		return m.NetworkIpamRefs
	}
	return nil
}

func (m *VirtualRouter) GetSubClusterRefs() []*VirtualRouterSubClusterRef {
	if m != nil {
		return m.SubClusterRefs
	}
	return nil
}

func (m *VirtualRouter) GetTagRefs() []*VirtualRouterTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

func (m *VirtualRouter) GetVirtualMachineRefs() []*VirtualRouterVirtualMachineRef {
	if m != nil {
		return m.VirtualMachineRefs
	}
	return nil
}

func (m *VirtualRouter) GetInstanceIPBackRefs() []*InstanceIP {
	if m != nil {
		return m.InstanceIPBackRefs
	}
	return nil
}

func (m *VirtualRouter) GetPhysicalRouterBackRefs() []*PhysicalRouter {
	if m != nil {
		return m.PhysicalRouterBackRefs
	}
	return nil
}

func (m *VirtualRouter) GetProviderAttachmentBackRefs() []*ProviderAttachment {
	if m != nil {
		return m.ProviderAttachmentBackRefs
	}
	return nil
}

func (m *VirtualRouter) GetVirtualMachineInterfaces() []*VirtualMachineInterface {
	if m != nil {
		return m.VirtualMachineInterfaces
	}
	return nil
}

type VirtualRouterNetworkIpamRef struct {
	UUID string                        `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string                      `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string                        `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	Attr *VirtualRouterNetworkIpamType `protobuf:"bytes,4,opt,name=attr,proto3" json:"attr,omitempty" yaml:"attr,omitempty"`
}

func (m *VirtualRouterNetworkIpamRef) Reset()      { *m = VirtualRouterNetworkIpamRef{} }
func (*VirtualRouterNetworkIpamRef) ProtoMessage() {}
func (*VirtualRouterNetworkIpamRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{387}
}
func (m *VirtualRouterNetworkIpamRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualRouterNetworkIpamRef.Unmarshal(m, b)
}
func (m *VirtualRouterNetworkIpamRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualRouterNetworkIpamRef.Marshal(b, m, deterministic)
}
func (m *VirtualRouterNetworkIpamRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualRouterNetworkIpamRef.Merge(m, src)
}
func (m *VirtualRouterNetworkIpamRef) XXX_Size() int {
	return xxx_messageInfo_VirtualRouterNetworkIpamRef.Size(m)
}
func (m *VirtualRouterNetworkIpamRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualRouterNetworkIpamRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualRouterNetworkIpamRef proto.InternalMessageInfo

func (m *VirtualRouterNetworkIpamRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualRouterNetworkIpamRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualRouterNetworkIpamRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *VirtualRouterNetworkIpamRef) GetAttr() *VirtualRouterNetworkIpamType {
	if m != nil {
		return m.Attr
	}
	return nil
}

type VirtualRouterSubClusterRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualRouterSubClusterRef) Reset()      { *m = VirtualRouterSubClusterRef{} }
func (*VirtualRouterSubClusterRef) ProtoMessage() {}
func (*VirtualRouterSubClusterRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{388}
}
func (m *VirtualRouterSubClusterRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualRouterSubClusterRef.Unmarshal(m, b)
}
func (m *VirtualRouterSubClusterRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualRouterSubClusterRef.Marshal(b, m, deterministic)
}
func (m *VirtualRouterSubClusterRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualRouterSubClusterRef.Merge(m, src)
}
func (m *VirtualRouterSubClusterRef) XXX_Size() int {
	return xxx_messageInfo_VirtualRouterSubClusterRef.Size(m)
}
func (m *VirtualRouterSubClusterRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualRouterSubClusterRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualRouterSubClusterRef proto.InternalMessageInfo

func (m *VirtualRouterSubClusterRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualRouterSubClusterRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualRouterSubClusterRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualRouterTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualRouterTagRef) Reset()      { *m = VirtualRouterTagRef{} }
func (*VirtualRouterTagRef) ProtoMessage() {}
func (*VirtualRouterTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{389}
}
func (m *VirtualRouterTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualRouterTagRef.Unmarshal(m, b)
}
func (m *VirtualRouterTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualRouterTagRef.Marshal(b, m, deterministic)
}
func (m *VirtualRouterTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualRouterTagRef.Merge(m, src)
}
func (m *VirtualRouterTagRef) XXX_Size() int {
	return xxx_messageInfo_VirtualRouterTagRef.Size(m)
}
func (m *VirtualRouterTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualRouterTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualRouterTagRef proto.InternalMessageInfo

func (m *VirtualRouterTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualRouterTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualRouterTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type VirtualRouterVirtualMachineRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *VirtualRouterVirtualMachineRef) Reset()      { *m = VirtualRouterVirtualMachineRef{} }
func (*VirtualRouterVirtualMachineRef) ProtoMessage() {}
func (*VirtualRouterVirtualMachineRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{390}
}
func (m *VirtualRouterVirtualMachineRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualRouterVirtualMachineRef.Unmarshal(m, b)
}
func (m *VirtualRouterVirtualMachineRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualRouterVirtualMachineRef.Marshal(b, m, deterministic)
}
func (m *VirtualRouterVirtualMachineRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualRouterVirtualMachineRef.Merge(m, src)
}
func (m *VirtualRouterVirtualMachineRef) XXX_Size() int {
	return xxx_messageInfo_VirtualRouterVirtualMachineRef.Size(m)
}
func (m *VirtualRouterVirtualMachineRef) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualRouterVirtualMachineRef.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualRouterVirtualMachineRef proto.InternalMessageInfo

func (m *VirtualRouterVirtualMachineRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *VirtualRouterVirtualMachineRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *VirtualRouterVirtualMachineRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type WebuiNode struct {
	Annotations          *KeyValuePairs     `protobuf:"bytes,1,opt,name=annotations,proto3" json:"annotations,omitempty" yaml:"annotations,omitempty"`
	ConfigurationVersion int64              `protobuf:"varint,2,opt,name=configuration_version,json=configurationVersion,proto3" json:"configuration_version,omitempty" yaml:"configuration_version,omitempty"`
	DisplayName          string             `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" yaml:"display_name,omitempty"`
	FQName               []string           `protobuf:"bytes,4,rep,name=fq_name,json=fqName,proto3" json:"fq_name,omitempty" yaml:"fq_name,omitempty"`
	Href                 string             `protobuf:"bytes,5,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
	IDPerms              *IdPermsType       `protobuf:"bytes,6,opt,name=id_perms,json=idPerms,proto3" json:"id_perms,omitempty" yaml:"id_perms,omitempty"`
	Name                 string             `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	ParentType           string             `protobuf:"bytes,8,opt,name=parent_type,json=parentType,proto3" json:"parent_type,omitempty" yaml:"parent_type,omitempty"`
	ParentUUID           string             `protobuf:"bytes,9,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty" yaml:"parent_uuid,omitempty"`
	Perms2               *PermType2         `protobuf:"bytes,10,opt,name=perms2,proto3" json:"perms2,omitempty" yaml:"perms2,omitempty"`
	UUID                 string             `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	WebuiNodeIPAddress   string             `protobuf:"bytes,12,opt,name=webui_node_ip_address,json=webuiNodeIpAddress,proto3" json:"webui_node_ip_address,omitempty" yaml:"webui_node_ip_address,omitempty"`
	TagRefs              []*WebuiNodeTagRef `protobuf:"bytes,1013,rep,name=tag_refs,json=tagRefs,proto3" json:"tag_refs,omitempty" yaml:"tag_refs,omitempty"`
}

func (m *WebuiNode) Reset()      { *m = WebuiNode{} }
func (*WebuiNode) ProtoMessage() {}
func (*WebuiNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{391}
}
func (m *WebuiNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WebuiNode.Unmarshal(m, b)
}
func (m *WebuiNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WebuiNode.Marshal(b, m, deterministic)
}
func (m *WebuiNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebuiNode.Merge(m, src)
}
func (m *WebuiNode) XXX_Size() int {
	return xxx_messageInfo_WebuiNode.Size(m)
}
func (m *WebuiNode) XXX_DiscardUnknown() {
	xxx_messageInfo_WebuiNode.DiscardUnknown(m)
}

var xxx_messageInfo_WebuiNode proto.InternalMessageInfo

func (m *WebuiNode) GetAnnotations() *KeyValuePairs {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *WebuiNode) GetConfigurationVersion() int64 {
	if m != nil {
		return m.ConfigurationVersion
	}
	return 0
}

func (m *WebuiNode) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *WebuiNode) GetFQName() []string {
	if m != nil {
		return m.FQName
	}
	return nil
}

func (m *WebuiNode) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *WebuiNode) GetIDPerms() *IdPermsType {
	if m != nil {
		return m.IDPerms
	}
	return nil
}

func (m *WebuiNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WebuiNode) GetParentType() string {
	if m != nil {
		return m.ParentType
	}
	return ""
}

func (m *WebuiNode) GetParentUUID() string {
	if m != nil {
		return m.ParentUUID
	}
	return ""
}

func (m *WebuiNode) GetPerms2() *PermType2 {
	if m != nil {
		return m.Perms2
	}
	return nil
}

func (m *WebuiNode) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *WebuiNode) GetWebuiNodeIPAddress() string {
	if m != nil {
		return m.WebuiNodeIPAddress
	}
	return ""
}

func (m *WebuiNode) GetTagRefs() []*WebuiNodeTagRef {
	if m != nil {
		return m.TagRefs
	}
	return nil
}

type WebuiNodeTagRef struct {
	UUID string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
	To   []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Href string   `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty" yaml:"href,omitempty"`
}

func (m *WebuiNodeTagRef) Reset()      { *m = WebuiNodeTagRef{} }
func (*WebuiNodeTagRef) ProtoMessage() {}
func (*WebuiNodeTagRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{392}
}
func (m *WebuiNodeTagRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WebuiNodeTagRef.Unmarshal(m, b)
}
func (m *WebuiNodeTagRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WebuiNodeTagRef.Marshal(b, m, deterministic)
}
func (m *WebuiNodeTagRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebuiNodeTagRef.Merge(m, src)
}
func (m *WebuiNodeTagRef) XXX_Size() int {
	return xxx_messageInfo_WebuiNodeTagRef.Size(m)
}
func (m *WebuiNodeTagRef) XXX_DiscardUnknown() {
	xxx_messageInfo_WebuiNodeTagRef.DiscardUnknown(m)
}

var xxx_messageInfo_WebuiNodeTagRef proto.InternalMessageInfo

func (m *WebuiNodeTagRef) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *WebuiNodeTagRef) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *WebuiNodeTagRef) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

type AclEntriesType struct {
	ACLRule []*AclRuleType `protobuf:"bytes,1,rep,name=acl_rule,json=aclRule,proto3" json:"acl_rule,omitempty" yaml:"acl_rule,omitempty"`
	Dynamic bool           `protobuf:"varint,2,opt,name=dynamic,proto3" json:"dynamic,omitempty" yaml:"dynamic,omitempty"`
}

func (m *AclEntriesType) Reset()      { *m = AclEntriesType{} }
func (*AclEntriesType) ProtoMessage() {}
func (*AclEntriesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{393}
}
func (m *AclEntriesType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AclEntriesType.Unmarshal(m, b)
}
func (m *AclEntriesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AclEntriesType.Marshal(b, m, deterministic)
}
func (m *AclEntriesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AclEntriesType.Merge(m, src)
}
func (m *AclEntriesType) XXX_Size() int {
	return xxx_messageInfo_AclEntriesType.Size(m)
}
func (m *AclEntriesType) XXX_DiscardUnknown() {
	xxx_messageInfo_AclEntriesType.DiscardUnknown(m)
}

var xxx_messageInfo_AclEntriesType proto.InternalMessageInfo

func (m *AclEntriesType) GetACLRule() []*AclRuleType {
	if m != nil {
		return m.ACLRule
	}
	return nil
}

func (m *AclEntriesType) GetDynamic() bool {
	if m != nil {
		return m.Dynamic
	}
	return false
}

type AclRuleType struct {
	ActionList     *ActionListType     `protobuf:"bytes,1,opt,name=action_list,json=actionList,proto3" json:"action_list,omitempty" yaml:"action_list,omitempty"`
	Direction      string              `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty" yaml:"direction,omitempty"`
	MatchCondition *MatchConditionType `protobuf:"bytes,3,opt,name=match_condition,json=matchCondition,proto3" json:"match_condition,omitempty" yaml:"match_condition,omitempty"`
	RuleUUID       string              `protobuf:"bytes,4,opt,name=rule_uuid,json=ruleUuid,proto3" json:"rule_uuid,omitempty" yaml:"rule_uuid,omitempty"`
}

func (m *AclRuleType) Reset()      { *m = AclRuleType{} }
func (*AclRuleType) ProtoMessage() {}
func (*AclRuleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{394}
}
func (m *AclRuleType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AclRuleType.Unmarshal(m, b)
}
func (m *AclRuleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AclRuleType.Marshal(b, m, deterministic)
}
func (m *AclRuleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AclRuleType.Merge(m, src)
}
func (m *AclRuleType) XXX_Size() int {
	return xxx_messageInfo_AclRuleType.Size(m)
}
func (m *AclRuleType) XXX_DiscardUnknown() {
	xxx_messageInfo_AclRuleType.DiscardUnknown(m)
}

var xxx_messageInfo_AclRuleType proto.InternalMessageInfo

func (m *AclRuleType) GetActionList() *ActionListType {
	if m != nil {
		return m.ActionList
	}
	return nil
}

func (m *AclRuleType) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *AclRuleType) GetMatchCondition() *MatchConditionType {
	if m != nil {
		return m.MatchCondition
	}
	return nil
}

func (m *AclRuleType) GetRuleUUID() string {
	if m != nil {
		return m.RuleUUID
	}
	return ""
}

type ActionAsPathType struct {
	Expand *AsListType `protobuf:"bytes,1,opt,name=expand,proto3" json:"expand,omitempty" yaml:"expand,omitempty"`
}

func (m *ActionAsPathType) Reset()      { *m = ActionAsPathType{} }
func (*ActionAsPathType) ProtoMessage() {}
func (*ActionAsPathType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{395}
}
func (m *ActionAsPathType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActionAsPathType.Unmarshal(m, b)
}
func (m *ActionAsPathType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActionAsPathType.Marshal(b, m, deterministic)
}
func (m *ActionAsPathType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionAsPathType.Merge(m, src)
}
func (m *ActionAsPathType) XXX_Size() int {
	return xxx_messageInfo_ActionAsPathType.Size(m)
}
func (m *ActionAsPathType) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionAsPathType.DiscardUnknown(m)
}

var xxx_messageInfo_ActionAsPathType proto.InternalMessageInfo

func (m *ActionAsPathType) GetExpand() *AsListType {
	if m != nil {
		return m.Expand
	}
	return nil
}

type ActionCommunityType struct {
	Add    *CommunityListType `protobuf:"bytes,1,opt,name=add,proto3" json:"add,omitempty" yaml:"add,omitempty"`
	Remove *CommunityListType `protobuf:"bytes,2,opt,name=remove,proto3" json:"remove,omitempty" yaml:"remove,omitempty"`
	Set    *CommunityListType `protobuf:"bytes,3,opt,name=set,proto3" json:"set,omitempty" yaml:"set,omitempty"`
}

func (m *ActionCommunityType) Reset()      { *m = ActionCommunityType{} }
func (*ActionCommunityType) ProtoMessage() {}
func (*ActionCommunityType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{396}
}
func (m *ActionCommunityType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActionCommunityType.Unmarshal(m, b)
}
func (m *ActionCommunityType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActionCommunityType.Marshal(b, m, deterministic)
}
func (m *ActionCommunityType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionCommunityType.Merge(m, src)
}
func (m *ActionCommunityType) XXX_Size() int {
	return xxx_messageInfo_ActionCommunityType.Size(m)
}
func (m *ActionCommunityType) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionCommunityType.DiscardUnknown(m)
}

var xxx_messageInfo_ActionCommunityType proto.InternalMessageInfo

func (m *ActionCommunityType) GetAdd() *CommunityListType {
	if m != nil {
		return m.Add
	}
	return nil
}

func (m *ActionCommunityType) GetRemove() *CommunityListType {
	if m != nil {
		return m.Remove
	}
	return nil
}

func (m *ActionCommunityType) GetSet() *CommunityListType {
	if m != nil {
		return m.Set
	}
	return nil
}

type ActionExtCommunityType struct {
	Add    *ExtCommunityListType `protobuf:"bytes,1,opt,name=add,proto3" json:"add,omitempty" yaml:"add,omitempty"`
	Remove *ExtCommunityListType `protobuf:"bytes,2,opt,name=remove,proto3" json:"remove,omitempty" yaml:"remove,omitempty"`
	Set    *ExtCommunityListType `protobuf:"bytes,3,opt,name=set,proto3" json:"set,omitempty" yaml:"set,omitempty"`
}

func (m *ActionExtCommunityType) Reset()      { *m = ActionExtCommunityType{} }
func (*ActionExtCommunityType) ProtoMessage() {}
func (*ActionExtCommunityType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{397}
}
func (m *ActionExtCommunityType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActionExtCommunityType.Unmarshal(m, b)
}
func (m *ActionExtCommunityType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActionExtCommunityType.Marshal(b, m, deterministic)
}
func (m *ActionExtCommunityType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionExtCommunityType.Merge(m, src)
}
func (m *ActionExtCommunityType) XXX_Size() int {
	return xxx_messageInfo_ActionExtCommunityType.Size(m)
}
func (m *ActionExtCommunityType) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionExtCommunityType.DiscardUnknown(m)
}

var xxx_messageInfo_ActionExtCommunityType proto.InternalMessageInfo

func (m *ActionExtCommunityType) GetAdd() *ExtCommunityListType {
	if m != nil {
		return m.Add
	}
	return nil
}

func (m *ActionExtCommunityType) GetRemove() *ExtCommunityListType {
	if m != nil {
		return m.Remove
	}
	return nil
}

func (m *ActionExtCommunityType) GetSet() *ExtCommunityListType {
	if m != nil {
		return m.Set
	}
	return nil
}

type ActionListType struct {
	Alert                 bool              `protobuf:"varint,1,opt,name=alert,proto3" json:"alert,omitempty" yaml:"alert,omitempty"`
	ApplyService          []string          `protobuf:"bytes,2,rep,name=apply_service,json=applyService,proto3" json:"apply_service,omitempty" yaml:"apply_service,omitempty"`
	AssignRoutingInstance string            `protobuf:"bytes,3,opt,name=assign_routing_instance,json=assignRoutingInstance,proto3" json:"assign_routing_instance,omitempty" yaml:"assign_routing_instance,omitempty"`
	GatewayName           string            `protobuf:"bytes,4,opt,name=gateway_name,json=gatewayName,proto3" json:"gateway_name,omitempty" yaml:"gateway_name,omitempty"`
	HostBasedService      bool              `protobuf:"varint,5,opt,name=host_based_service,json=hostBasedService,proto3" json:"host_based_service,omitempty" yaml:"host_based_service,omitempty"`
	Log                   bool              `protobuf:"varint,6,opt,name=log,proto3" json:"log,omitempty" yaml:"log,omitempty"`
	MirrorTo              *MirrorActionType `protobuf:"bytes,7,opt,name=mirror_to,json=mirrorTo,proto3" json:"mirror_to,omitempty" yaml:"mirror_to,omitempty"`
	QosAction             string            `protobuf:"bytes,8,opt,name=qos_action,json=qosAction,proto3" json:"qos_action,omitempty" yaml:"qos_action,omitempty"`
	SimpleAction          string            `protobuf:"bytes,9,opt,name=simple_action,json=simpleAction,proto3" json:"simple_action,omitempty" yaml:"simple_action,omitempty"`
}

func (m *ActionListType) Reset()      { *m = ActionListType{} }
func (*ActionListType) ProtoMessage() {}
func (*ActionListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{398}
}
func (m *ActionListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActionListType.Unmarshal(m, b)
}
func (m *ActionListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActionListType.Marshal(b, m, deterministic)
}
func (m *ActionListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionListType.Merge(m, src)
}
func (m *ActionListType) XXX_Size() int {
	return xxx_messageInfo_ActionListType.Size(m)
}
func (m *ActionListType) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionListType.DiscardUnknown(m)
}

var xxx_messageInfo_ActionListType proto.InternalMessageInfo

func (m *ActionListType) GetAlert() bool {
	if m != nil {
		return m.Alert
	}
	return false
}

func (m *ActionListType) GetApplyService() []string {
	if m != nil {
		return m.ApplyService
	}
	return nil
}

func (m *ActionListType) GetAssignRoutingInstance() string {
	if m != nil {
		return m.AssignRoutingInstance
	}
	return ""
}

func (m *ActionListType) GetGatewayName() string {
	if m != nil {
		return m.GatewayName
	}
	return ""
}

func (m *ActionListType) GetHostBasedService() bool {
	if m != nil {
		return m.HostBasedService
	}
	return false
}

func (m *ActionListType) GetLog() bool {
	if m != nil {
		return m.Log
	}
	return false
}

func (m *ActionListType) GetMirrorTo() *MirrorActionType {
	if m != nil {
		return m.MirrorTo
	}
	return nil
}

func (m *ActionListType) GetQosAction() string {
	if m != nil {
		return m.QosAction
	}
	return ""
}

func (m *ActionListType) GetSimpleAction() string {
	if m != nil {
		return m.SimpleAction
	}
	return ""
}

type ActionUpdateType struct {
	AsPath       *ActionAsPathType       `protobuf:"bytes,1,opt,name=as_path,json=asPath,proto3" json:"as_path,omitempty" yaml:"as_path,omitempty"`
	Community    *ActionCommunityType    `protobuf:"bytes,2,opt,name=community,proto3" json:"community,omitempty" yaml:"community,omitempty"`
	Extcommunity *ActionExtCommunityType `protobuf:"bytes,3,opt,name=extcommunity,proto3" json:"extcommunity,omitempty" yaml:"extcommunity,omitempty"`
	LocalPref    int64                   `protobuf:"varint,4,opt,name=local_pref,json=localPref,proto3" json:"local_pref,omitempty" yaml:"local_pref,omitempty"`
	Med          int64                   `protobuf:"varint,5,opt,name=med,proto3" json:"med,omitempty" yaml:"med,omitempty"`
}

func (m *ActionUpdateType) Reset()      { *m = ActionUpdateType{} }
func (*ActionUpdateType) ProtoMessage() {}
func (*ActionUpdateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{399}
}
func (m *ActionUpdateType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActionUpdateType.Unmarshal(m, b)
}
func (m *ActionUpdateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActionUpdateType.Marshal(b, m, deterministic)
}
func (m *ActionUpdateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionUpdateType.Merge(m, src)
}
func (m *ActionUpdateType) XXX_Size() int {
	return xxx_messageInfo_ActionUpdateType.Size(m)
}
func (m *ActionUpdateType) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionUpdateType.DiscardUnknown(m)
}

var xxx_messageInfo_ActionUpdateType proto.InternalMessageInfo

func (m *ActionUpdateType) GetAsPath() *ActionAsPathType {
	if m != nil {
		return m.AsPath
	}
	return nil
}

func (m *ActionUpdateType) GetCommunity() *ActionCommunityType {
	if m != nil {
		return m.Community
	}
	return nil
}

func (m *ActionUpdateType) GetExtcommunity() *ActionExtCommunityType {
	if m != nil {
		return m.Extcommunity
	}
	return nil
}

func (m *ActionUpdateType) GetLocalPref() int64 {
	if m != nil {
		return m.LocalPref
	}
	return 0
}

func (m *ActionUpdateType) GetMed() int64 {
	if m != nil {
		return m.Med
	}
	return 0
}

type AddressFamilies struct {
	Family string `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty" yaml:"family,omitempty"`
}

func (m *AddressFamilies) Reset()      { *m = AddressFamilies{} }
func (*AddressFamilies) ProtoMessage() {}
func (*AddressFamilies) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{400}
}
func (m *AddressFamilies) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressFamilies.Unmarshal(m, b)
}
func (m *AddressFamilies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressFamilies.Marshal(b, m, deterministic)
}
func (m *AddressFamilies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressFamilies.Merge(m, src)
}
func (m *AddressFamilies) XXX_Size() int {
	return xxx_messageInfo_AddressFamilies.Size(m)
}
func (m *AddressFamilies) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressFamilies.DiscardUnknown(m)
}

var xxx_messageInfo_AddressFamilies proto.InternalMessageInfo

func (m *AddressFamilies) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

type AddressType struct {
	NetworkPolicy  string        `protobuf:"bytes,1,opt,name=network_policy,json=networkPolicy,proto3" json:"network_policy,omitempty" yaml:"network_policy,omitempty"`
	SecurityGroup  string        `protobuf:"bytes,2,opt,name=security_group,json=securityGroup,proto3" json:"security_group,omitempty" yaml:"security_group,omitempty"`
	Subnet         *SubnetType   `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty" yaml:"subnet,omitempty"`
	SubnetList     []*SubnetType `protobuf:"bytes,4,rep,name=subnet_list,json=subnetList,proto3" json:"subnet_list,omitempty" yaml:"subnet_list,omitempty"`
	VirtualNetwork string        `protobuf:"bytes,5,opt,name=virtual_network,json=virtualNetwork,proto3" json:"virtual_network,omitempty" yaml:"virtual_network,omitempty"`
}

func (m *AddressType) Reset()      { *m = AddressType{} }
func (*AddressType) ProtoMessage() {}
func (*AddressType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{401}
}
func (m *AddressType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressType.Unmarshal(m, b)
}
func (m *AddressType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressType.Marshal(b, m, deterministic)
}
func (m *AddressType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressType.Merge(m, src)
}
func (m *AddressType) XXX_Size() int {
	return xxx_messageInfo_AddressType.Size(m)
}
func (m *AddressType) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressType.DiscardUnknown(m)
}

var xxx_messageInfo_AddressType proto.InternalMessageInfo

func (m *AddressType) GetNetworkPolicy() string {
	if m != nil {
		return m.NetworkPolicy
	}
	return ""
}

func (m *AddressType) GetSecurityGroup() string {
	if m != nil {
		return m.SecurityGroup
	}
	return ""
}

func (m *AddressType) GetSubnet() *SubnetType {
	if m != nil {
		return m.Subnet
	}
	return nil
}

func (m *AddressType) GetSubnetList() []*SubnetType {
	if m != nil {
		return m.SubnetList
	}
	return nil
}

func (m *AddressType) GetVirtualNetwork() string {
	if m != nil {
		return m.VirtualNetwork
	}
	return ""
}

type AlarmAndList struct {
	AndList []*AlarmExpression `protobuf:"bytes,1,rep,name=and_list,json=andList,proto3" json:"and_list,omitempty" yaml:"and_list,omitempty"`
}

func (m *AlarmAndList) Reset()      { *m = AlarmAndList{} }
func (*AlarmAndList) ProtoMessage() {}
func (*AlarmAndList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{402}
}
func (m *AlarmAndList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlarmAndList.Unmarshal(m, b)
}
func (m *AlarmAndList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlarmAndList.Marshal(b, m, deterministic)
}
func (m *AlarmAndList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlarmAndList.Merge(m, src)
}
func (m *AlarmAndList) XXX_Size() int {
	return xxx_messageInfo_AlarmAndList.Size(m)
}
func (m *AlarmAndList) XXX_DiscardUnknown() {
	xxx_messageInfo_AlarmAndList.DiscardUnknown(m)
}

var xxx_messageInfo_AlarmAndList proto.InternalMessageInfo

func (m *AlarmAndList) GetAndList() []*AlarmExpression {
	if m != nil {
		return m.AndList
	}
	return nil
}

type AlarmExpression struct {
	Operand1  string         `protobuf:"bytes,1,opt,name=operand1,proto3" json:"operand1,omitempty" yaml:"operand1,omitempty"`
	Operand2  *AlarmOperand2 `protobuf:"bytes,2,opt,name=operand2,proto3" json:"operand2,omitempty" yaml:"operand2,omitempty"`
	Operation string         `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty" yaml:"operation,omitempty"`
	Variables []string       `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty" yaml:"variables,omitempty"`
}

func (m *AlarmExpression) Reset()      { *m = AlarmExpression{} }
func (*AlarmExpression) ProtoMessage() {}
func (*AlarmExpression) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{403}
}
func (m *AlarmExpression) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlarmExpression.Unmarshal(m, b)
}
func (m *AlarmExpression) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlarmExpression.Marshal(b, m, deterministic)
}
func (m *AlarmExpression) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlarmExpression.Merge(m, src)
}
func (m *AlarmExpression) XXX_Size() int {
	return xxx_messageInfo_AlarmExpression.Size(m)
}
func (m *AlarmExpression) XXX_DiscardUnknown() {
	xxx_messageInfo_AlarmExpression.DiscardUnknown(m)
}

var xxx_messageInfo_AlarmExpression proto.InternalMessageInfo

func (m *AlarmExpression) GetOperand1() string {
	if m != nil {
		return m.Operand1
	}
	return ""
}

func (m *AlarmExpression) GetOperand2() *AlarmOperand2 {
	if m != nil {
		return m.Operand2
	}
	return nil
}

func (m *AlarmExpression) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *AlarmExpression) GetVariables() []string {
	if m != nil {
		return m.Variables
	}
	return nil
}

type AlarmOperand2 struct {
	JSONValue    string `protobuf:"bytes,1,opt,name=json_value,json=jsonValue,proto3" json:"json_value,omitempty" yaml:"json_value,omitempty"`
	UveAttribute string `protobuf:"bytes,2,opt,name=uve_attribute,json=uveAttribute,proto3" json:"uve_attribute,omitempty" yaml:"uve_attribute,omitempty"`
}

func (m *AlarmOperand2) Reset()      { *m = AlarmOperand2{} }
func (*AlarmOperand2) ProtoMessage() {}
func (*AlarmOperand2) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{404}
}
func (m *AlarmOperand2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlarmOperand2.Unmarshal(m, b)
}
func (m *AlarmOperand2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlarmOperand2.Marshal(b, m, deterministic)
}
func (m *AlarmOperand2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlarmOperand2.Merge(m, src)
}
func (m *AlarmOperand2) XXX_Size() int {
	return xxx_messageInfo_AlarmOperand2.Size(m)
}
func (m *AlarmOperand2) XXX_DiscardUnknown() {
	xxx_messageInfo_AlarmOperand2.DiscardUnknown(m)
}

var xxx_messageInfo_AlarmOperand2 proto.InternalMessageInfo

func (m *AlarmOperand2) GetJSONValue() string {
	if m != nil {
		return m.JSONValue
	}
	return ""
}

func (m *AlarmOperand2) GetUveAttribute() string {
	if m != nil {
		return m.UveAttribute
	}
	return ""
}

type AlarmOrList struct {
	OrList []*AlarmAndList `protobuf:"bytes,1,rep,name=or_list,json=orList,proto3" json:"or_list,omitempty" yaml:"or_list,omitempty"`
}

func (m *AlarmOrList) Reset()      { *m = AlarmOrList{} }
func (*AlarmOrList) ProtoMessage() {}
func (*AlarmOrList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{405}
}
func (m *AlarmOrList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AlarmOrList.Unmarshal(m, b)
}
func (m *AlarmOrList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AlarmOrList.Marshal(b, m, deterministic)
}
func (m *AlarmOrList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlarmOrList.Merge(m, src)
}
func (m *AlarmOrList) XXX_Size() int {
	return xxx_messageInfo_AlarmOrList.Size(m)
}
func (m *AlarmOrList) XXX_DiscardUnknown() {
	xxx_messageInfo_AlarmOrList.DiscardUnknown(m)
}

var xxx_messageInfo_AlarmOrList proto.InternalMessageInfo

func (m *AlarmOrList) GetOrList() []*AlarmAndList {
	if m != nil {
		return m.OrList
	}
	return nil
}

type AllocationPoolType struct {
	End                 string `protobuf:"bytes,1,opt,name=end,proto3" json:"end,omitempty" yaml:"end,omitempty"`
	Start               string `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty" yaml:"start,omitempty"`
	VrouterSpecificPool bool   `protobuf:"varint,3,opt,name=vrouter_specific_pool,json=vrouterSpecificPool,proto3" json:"vrouter_specific_pool,omitempty" yaml:"vrouter_specific_pool,omitempty"`
}

func (m *AllocationPoolType) Reset()      { *m = AllocationPoolType{} }
func (*AllocationPoolType) ProtoMessage() {}
func (*AllocationPoolType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{406}
}
func (m *AllocationPoolType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationPoolType.Unmarshal(m, b)
}
func (m *AllocationPoolType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationPoolType.Marshal(b, m, deterministic)
}
func (m *AllocationPoolType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationPoolType.Merge(m, src)
}
func (m *AllocationPoolType) XXX_Size() int {
	return xxx_messageInfo_AllocationPoolType.Size(m)
}
func (m *AllocationPoolType) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationPoolType.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationPoolType proto.InternalMessageInfo

func (m *AllocationPoolType) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *AllocationPoolType) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *AllocationPoolType) GetVrouterSpecificPool() bool {
	if m != nil {
		return m.VrouterSpecificPool
	}
	return false
}

type AllowedAddressPair struct {
	AddressMode string      `protobuf:"bytes,1,opt,name=address_mode,json=addressMode,proto3" json:"address_mode,omitempty" yaml:"address_mode,omitempty"`
	IP          *SubnetType `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty" yaml:"ip,omitempty"`
	Mac         string      `protobuf:"bytes,3,opt,name=mac,proto3" json:"mac,omitempty" yaml:"mac,omitempty"`
}

func (m *AllowedAddressPair) Reset()      { *m = AllowedAddressPair{} }
func (*AllowedAddressPair) ProtoMessage() {}
func (*AllowedAddressPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{407}
}
func (m *AllowedAddressPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllowedAddressPair.Unmarshal(m, b)
}
func (m *AllowedAddressPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllowedAddressPair.Marshal(b, m, deterministic)
}
func (m *AllowedAddressPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedAddressPair.Merge(m, src)
}
func (m *AllowedAddressPair) XXX_Size() int {
	return xxx_messageInfo_AllowedAddressPair.Size(m)
}
func (m *AllowedAddressPair) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedAddressPair.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedAddressPair proto.InternalMessageInfo

func (m *AllowedAddressPair) GetAddressMode() string {
	if m != nil {
		return m.AddressMode
	}
	return ""
}

func (m *AllowedAddressPair) GetIP() *SubnetType {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *AllowedAddressPair) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type AllowedAddressPairs struct {
	AllowedAddressPair []*AllowedAddressPair `protobuf:"bytes,1,rep,name=allowed_address_pair,json=allowedAddressPair,proto3" json:"allowed_address_pair,omitempty" yaml:"allowed_address_pair,omitempty"`
}

func (m *AllowedAddressPairs) Reset()      { *m = AllowedAddressPairs{} }
func (*AllowedAddressPairs) ProtoMessage() {}
func (*AllowedAddressPairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{408}
}
func (m *AllowedAddressPairs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllowedAddressPairs.Unmarshal(m, b)
}
func (m *AllowedAddressPairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllowedAddressPairs.Marshal(b, m, deterministic)
}
func (m *AllowedAddressPairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedAddressPairs.Merge(m, src)
}
func (m *AllowedAddressPairs) XXX_Size() int {
	return xxx_messageInfo_AllowedAddressPairs.Size(m)
}
func (m *AllowedAddressPairs) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedAddressPairs.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedAddressPairs proto.InternalMessageInfo

func (m *AllowedAddressPairs) GetAllowedAddressPair() []*AllowedAddressPair {
	if m != nil {
		return m.AllowedAddressPair
	}
	return nil
}

type AsListType struct {
	AsnList []int64 `protobuf:"varint,1,rep,packed,name=asn_list,json=asnList,proto3" json:"asn_list,omitempty" yaml:"asn_list,omitempty"`
}

func (m *AsListType) Reset()      { *m = AsListType{} }
func (*AsListType) ProtoMessage() {}
func (*AsListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{409}
}
func (m *AsListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AsListType.Unmarshal(m, b)
}
func (m *AsListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AsListType.Marshal(b, m, deterministic)
}
func (m *AsListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsListType.Merge(m, src)
}
func (m *AsListType) XXX_Size() int {
	return xxx_messageInfo_AsListType.Size(m)
}
func (m *AsListType) XXX_DiscardUnknown() {
	xxx_messageInfo_AsListType.DiscardUnknown(m)
}

var xxx_messageInfo_AsListType proto.InternalMessageInfo

func (m *AsListType) GetAsnList() []int64 {
	if m != nil {
		return m.AsnList
	}
	return nil
}

type AsnRangeType struct {
	AsnMax int64 `protobuf:"varint,1,opt,name=asn_max,json=asnMax,proto3" json:"asn_max,omitempty" yaml:"asn_max,omitempty"`
	AsnMin int64 `protobuf:"varint,2,opt,name=asn_min,json=asnMin,proto3" json:"asn_min,omitempty" yaml:"asn_min,omitempty"`
}

func (m *AsnRangeType) Reset()      { *m = AsnRangeType{} }
func (*AsnRangeType) ProtoMessage() {}
func (*AsnRangeType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{410}
}
func (m *AsnRangeType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AsnRangeType.Unmarshal(m, b)
}
func (m *AsnRangeType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AsnRangeType.Marshal(b, m, deterministic)
}
func (m *AsnRangeType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsnRangeType.Merge(m, src)
}
func (m *AsnRangeType) XXX_Size() int {
	return xxx_messageInfo_AsnRangeType.Size(m)
}
func (m *AsnRangeType) XXX_DiscardUnknown() {
	xxx_messageInfo_AsnRangeType.DiscardUnknown(m)
}

var xxx_messageInfo_AsnRangeType proto.InternalMessageInfo

func (m *AsnRangeType) GetAsnMax() int64 {
	if m != nil {
		return m.AsnMax
	}
	return 0
}

func (m *AsnRangeType) GetAsnMin() int64 {
	if m != nil {
		return m.AsnMin
	}
	return 0
}

type AttachmentAddressType struct {
}

func (m *AttachmentAddressType) Reset()      { *m = AttachmentAddressType{} }
func (*AttachmentAddressType) ProtoMessage() {}
func (*AttachmentAddressType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{411}
}
func (m *AttachmentAddressType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttachmentAddressType.Unmarshal(m, b)
}
func (m *AttachmentAddressType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttachmentAddressType.Marshal(b, m, deterministic)
}
func (m *AttachmentAddressType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttachmentAddressType.Merge(m, src)
}
func (m *AttachmentAddressType) XXX_Size() int {
	return xxx_messageInfo_AttachmentAddressType.Size(m)
}
func (m *AttachmentAddressType) XXX_DiscardUnknown() {
	xxx_messageInfo_AttachmentAddressType.DiscardUnknown(m)
}

var xxx_messageInfo_AttachmentAddressType proto.InternalMessageInfo

type AuthenticationData struct {
	KeyItems []*AuthenticationKeyItem `protobuf:"bytes,1,rep,name=key_items,json=keyItems,proto3" json:"key_items,omitempty" yaml:"key_items,omitempty"`
	KeyType  string                   `protobuf:"bytes,2,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty" yaml:"key_type,omitempty"`
}

func (m *AuthenticationData) Reset()      { *m = AuthenticationData{} }
func (*AuthenticationData) ProtoMessage() {}
func (*AuthenticationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{412}
}
func (m *AuthenticationData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthenticationData.Unmarshal(m, b)
}
func (m *AuthenticationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthenticationData.Marshal(b, m, deterministic)
}
func (m *AuthenticationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticationData.Merge(m, src)
}
func (m *AuthenticationData) XXX_Size() int {
	return xxx_messageInfo_AuthenticationData.Size(m)
}
func (m *AuthenticationData) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticationData.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticationData proto.InternalMessageInfo

func (m *AuthenticationData) GetKeyItems() []*AuthenticationKeyItem {
	if m != nil {
		return m.KeyItems
	}
	return nil
}

func (m *AuthenticationData) GetKeyType() string {
	if m != nil {
		return m.KeyType
	}
	return ""
}

type AuthenticationKeyItem struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" yaml:"key,omitempty"`
	KeyID int64  `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty" yaml:"key_id,omitempty"`
}

func (m *AuthenticationKeyItem) Reset()      { *m = AuthenticationKeyItem{} }
func (*AuthenticationKeyItem) ProtoMessage() {}
func (*AuthenticationKeyItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{413}
}
func (m *AuthenticationKeyItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthenticationKeyItem.Unmarshal(m, b)
}
func (m *AuthenticationKeyItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthenticationKeyItem.Marshal(b, m, deterministic)
}
func (m *AuthenticationKeyItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticationKeyItem.Merge(m, src)
}
func (m *AuthenticationKeyItem) XXX_Size() int {
	return xxx_messageInfo_AuthenticationKeyItem.Size(m)
}
func (m *AuthenticationKeyItem) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticationKeyItem.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticationKeyItem proto.InternalMessageInfo

func (m *AuthenticationKeyItem) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *AuthenticationKeyItem) GetKeyID() int64 {
	if m != nil {
		return m.KeyID
	}
	return 0
}

type AutonomousSystemsType struct {
	Asn int64 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty" yaml:"asn,omitempty"`
}

func (m *AutonomousSystemsType) Reset()      { *m = AutonomousSystemsType{} }
func (*AutonomousSystemsType) ProtoMessage() {}
func (*AutonomousSystemsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{414}
}
func (m *AutonomousSystemsType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AutonomousSystemsType.Unmarshal(m, b)
}
func (m *AutonomousSystemsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AutonomousSystemsType.Marshal(b, m, deterministic)
}
func (m *AutonomousSystemsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutonomousSystemsType.Merge(m, src)
}
func (m *AutonomousSystemsType) XXX_Size() int {
	return xxx_messageInfo_AutonomousSystemsType.Size(m)
}
func (m *AutonomousSystemsType) XXX_DiscardUnknown() {
	xxx_messageInfo_AutonomousSystemsType.DiscardUnknown(m)
}

var xxx_messageInfo_AutonomousSystemsType proto.InternalMessageInfo

func (m *AutonomousSystemsType) GetAsn() int64 {
	if m != nil {
		return m.Asn
	}
	return 0
}

type BGPaaSControlNodeZoneAttributes struct {
	BgpaasControlNodeZoneType string `protobuf:"bytes,1,opt,name=bgpaas_control_node_zone_type,json=bgpaasControlNodeZoneType,proto3" json:"bgpaas_control_node_zone_type,omitempty" yaml:"bgpaas_control_node_zone_type,omitempty"`
}

func (m *BGPaaSControlNodeZoneAttributes) Reset()      { *m = BGPaaSControlNodeZoneAttributes{} }
func (*BGPaaSControlNodeZoneAttributes) ProtoMessage() {}
func (*BGPaaSControlNodeZoneAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{415}
}
func (m *BGPaaSControlNodeZoneAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPaaSControlNodeZoneAttributes.Unmarshal(m, b)
}
func (m *BGPaaSControlNodeZoneAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPaaSControlNodeZoneAttributes.Marshal(b, m, deterministic)
}
func (m *BGPaaSControlNodeZoneAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPaaSControlNodeZoneAttributes.Merge(m, src)
}
func (m *BGPaaSControlNodeZoneAttributes) XXX_Size() int {
	return xxx_messageInfo_BGPaaSControlNodeZoneAttributes.Size(m)
}
func (m *BGPaaSControlNodeZoneAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPaaSControlNodeZoneAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_BGPaaSControlNodeZoneAttributes proto.InternalMessageInfo

func (m *BGPaaSControlNodeZoneAttributes) GetBgpaasControlNodeZoneType() string {
	if m != nil {
		return m.BgpaasControlNodeZoneType
	}
	return ""
}

type BGPaaServiceParametersType struct {
	PortEnd   int64 `protobuf:"varint,1,opt,name=port_end,json=portEnd,proto3" json:"port_end,omitempty" yaml:"port_end,omitempty"`
	PortStart int64 `protobuf:"varint,2,opt,name=port_start,json=portStart,proto3" json:"port_start,omitempty" yaml:"port_start,omitempty"`
}

func (m *BGPaaServiceParametersType) Reset()      { *m = BGPaaServiceParametersType{} }
func (*BGPaaServiceParametersType) ProtoMessage() {}
func (*BGPaaServiceParametersType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{416}
}
func (m *BGPaaServiceParametersType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGPaaServiceParametersType.Unmarshal(m, b)
}
func (m *BGPaaServiceParametersType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGPaaServiceParametersType.Marshal(b, m, deterministic)
}
func (m *BGPaaServiceParametersType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGPaaServiceParametersType.Merge(m, src)
}
func (m *BGPaaServiceParametersType) XXX_Size() int {
	return xxx_messageInfo_BGPaaServiceParametersType.Size(m)
}
func (m *BGPaaServiceParametersType) XXX_DiscardUnknown() {
	xxx_messageInfo_BGPaaServiceParametersType.DiscardUnknown(m)
}

var xxx_messageInfo_BGPaaServiceParametersType proto.InternalMessageInfo

func (m *BGPaaServiceParametersType) GetPortEnd() int64 {
	if m != nil {
		return m.PortEnd
	}
	return 0
}

func (m *BGPaaServiceParametersType) GetPortStart() int64 {
	if m != nil {
		return m.PortStart
	}
	return 0
}

type BaremetalPortGroupInfo struct {
	Address                  string               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address,omitempty"`
	Mode                     string               `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty" yaml:"mode,omitempty"`
	NodeUUID                 string               `protobuf:"bytes,3,opt,name=node_uuid,json=nodeUuid,proto3" json:"node_uuid,omitempty" yaml:"node_uuid,omitempty"`
	Properties               *PortGroupProperties `protobuf:"bytes,4,opt,name=properties,proto3" json:"properties,omitempty" yaml:"properties,omitempty"`
	StandalonePortsSupported bool                 `protobuf:"varint,5,opt,name=standalone_ports_supported,json=standalonePortsSupported,proto3" json:"standalone_ports_supported,omitempty" yaml:"standalone_ports_supported,omitempty"`
}

func (m *BaremetalPortGroupInfo) Reset()      { *m = BaremetalPortGroupInfo{} }
func (*BaremetalPortGroupInfo) ProtoMessage() {}
func (*BaremetalPortGroupInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{417}
}
func (m *BaremetalPortGroupInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaremetalPortGroupInfo.Unmarshal(m, b)
}
func (m *BaremetalPortGroupInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaremetalPortGroupInfo.Marshal(b, m, deterministic)
}
func (m *BaremetalPortGroupInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaremetalPortGroupInfo.Merge(m, src)
}
func (m *BaremetalPortGroupInfo) XXX_Size() int {
	return xxx_messageInfo_BaremetalPortGroupInfo.Size(m)
}
func (m *BaremetalPortGroupInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BaremetalPortGroupInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BaremetalPortGroupInfo proto.InternalMessageInfo

func (m *BaremetalPortGroupInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BaremetalPortGroupInfo) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *BaremetalPortGroupInfo) GetNodeUUID() string {
	if m != nil {
		return m.NodeUUID
	}
	return ""
}

func (m *BaremetalPortGroupInfo) GetProperties() *PortGroupProperties {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *BaremetalPortGroupInfo) GetStandalonePortsSupported() bool {
	if m != nil {
		return m.StandalonePortsSupported
	}
	return false
}

type BaremetalPortInfo struct {
	Address             string               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address,omitempty"`
	LocalLinkConnection *LocalLinkConnection `protobuf:"bytes,2,opt,name=local_link_connection,json=localLinkConnection,proto3" json:"local_link_connection,omitempty" yaml:"local_link_connection,omitempty"`
	NodeUUID            string               `protobuf:"bytes,3,opt,name=node_uuid,json=nodeUuid,proto3" json:"node_uuid,omitempty" yaml:"node_uuid,omitempty"`
	PxeEnabled          bool                 `protobuf:"varint,4,opt,name=pxe_enabled,json=pxeEnabled,proto3" json:"pxe_enabled,omitempty" yaml:"pxe_enabled,omitempty"`
}

func (m *BaremetalPortInfo) Reset()      { *m = BaremetalPortInfo{} }
func (*BaremetalPortInfo) ProtoMessage() {}
func (*BaremetalPortInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{418}
}
func (m *BaremetalPortInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaremetalPortInfo.Unmarshal(m, b)
}
func (m *BaremetalPortInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaremetalPortInfo.Marshal(b, m, deterministic)
}
func (m *BaremetalPortInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaremetalPortInfo.Merge(m, src)
}
func (m *BaremetalPortInfo) XXX_Size() int {
	return xxx_messageInfo_BaremetalPortInfo.Size(m)
}
func (m *BaremetalPortInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BaremetalPortInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BaremetalPortInfo proto.InternalMessageInfo

func (m *BaremetalPortInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BaremetalPortInfo) GetLocalLinkConnection() *LocalLinkConnection {
	if m != nil {
		return m.LocalLinkConnection
	}
	return nil
}

func (m *BaremetalPortInfo) GetNodeUUID() string {
	if m != nil {
		return m.NodeUUID
	}
	return ""
}

func (m *BaremetalPortInfo) GetPxeEnabled() bool {
	if m != nil {
		return m.PxeEnabled
	}
	return false
}

type BaremetalProperties struct {
	Capabilities string `protobuf:"bytes,1,opt,name=capabilities,proto3" json:"capabilities,omitempty" yaml:"capabilities,omitempty"`
	CPUArch      string `protobuf:"bytes,2,opt,name=cpu_arch,json=cpuArch,proto3" json:"cpu_arch,omitempty" yaml:"cpu_arch,omitempty"`
	Cpus         int64  `protobuf:"varint,3,opt,name=cpus,proto3" json:"cpus,omitempty" yaml:"cpus,omitempty"`
	LocalGB      int64  `protobuf:"varint,4,opt,name=local_gb,json=localGb,proto3" json:"local_gb,omitempty" yaml:"local_gb,omitempty"`
	MemoryMB     int64  `protobuf:"varint,5,opt,name=memory_mb,json=memoryMb,proto3" json:"memory_mb,omitempty" yaml:"memory_mb,omitempty"`
}

func (m *BaremetalProperties) Reset()      { *m = BaremetalProperties{} }
func (*BaremetalProperties) ProtoMessage() {}
func (*BaremetalProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{419}
}
func (m *BaremetalProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaremetalProperties.Unmarshal(m, b)
}
func (m *BaremetalProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaremetalProperties.Marshal(b, m, deterministic)
}
func (m *BaremetalProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaremetalProperties.Merge(m, src)
}
func (m *BaremetalProperties) XXX_Size() int {
	return xxx_messageInfo_BaremetalProperties.Size(m)
}
func (m *BaremetalProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_BaremetalProperties.DiscardUnknown(m)
}

var xxx_messageInfo_BaremetalProperties proto.InternalMessageInfo

func (m *BaremetalProperties) GetCapabilities() string {
	if m != nil {
		return m.Capabilities
	}
	return ""
}

func (m *BaremetalProperties) GetCPUArch() string {
	if m != nil {
		return m.CPUArch
	}
	return ""
}

func (m *BaremetalProperties) GetCpus() int64 {
	if m != nil {
		return m.Cpus
	}
	return 0
}

func (m *BaremetalProperties) GetLocalGB() int64 {
	if m != nil {
		return m.LocalGB
	}
	return 0
}

func (m *BaremetalProperties) GetMemoryMB() int64 {
	if m != nil {
		return m.MemoryMB
	}
	return 0
}

type BaremetalServerInfo struct {
	Driver           string               `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty" yaml:"driver,omitempty"`
	DriverInfo       *DriverInfo          `protobuf:"bytes,2,opt,name=driver_info,json=driverInfo,proto3" json:"driver_info,omitempty" yaml:"driver_info,omitempty"`
	Name             string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	NetworkInterface string               `protobuf:"bytes,4,opt,name=network_interface,json=networkInterface,proto3" json:"network_interface,omitempty" yaml:"network_interface,omitempty"`
	Properties       *BaremetalProperties `protobuf:"bytes,5,opt,name=properties,proto3" json:"properties,omitempty" yaml:"properties,omitempty"`
}

func (m *BaremetalServerInfo) Reset()      { *m = BaremetalServerInfo{} }
func (*BaremetalServerInfo) ProtoMessage() {}
func (*BaremetalServerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{420}
}
func (m *BaremetalServerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BaremetalServerInfo.Unmarshal(m, b)
}
func (m *BaremetalServerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BaremetalServerInfo.Marshal(b, m, deterministic)
}
func (m *BaremetalServerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaremetalServerInfo.Merge(m, src)
}
func (m *BaremetalServerInfo) XXX_Size() int {
	return xxx_messageInfo_BaremetalServerInfo.Size(m)
}
func (m *BaremetalServerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BaremetalServerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BaremetalServerInfo proto.InternalMessageInfo

func (m *BaremetalServerInfo) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *BaremetalServerInfo) GetDriverInfo() *DriverInfo {
	if m != nil {
		return m.DriverInfo
	}
	return nil
}

func (m *BaremetalServerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BaremetalServerInfo) GetNetworkInterface() string {
	if m != nil {
		return m.NetworkInterface
	}
	return ""
}

func (m *BaremetalServerInfo) GetProperties() *BaremetalProperties {
	if m != nil {
		return m.Properties
	}
	return nil
}

type BfdParameters struct {
	DetectionTimeMultiplier int64 `protobuf:"varint,1,opt,name=detection_time_multiplier,json=detectionTimeMultiplier,proto3" json:"detection_time_multiplier,omitempty" yaml:"detection_time_multiplier,omitempty"`
	TimeInterval            int64 `protobuf:"varint,2,opt,name=time_interval,json=timeInterval,proto3" json:"time_interval,omitempty" yaml:"time_interval,omitempty"`
}

func (m *BfdParameters) Reset()      { *m = BfdParameters{} }
func (*BfdParameters) ProtoMessage() {}
func (*BfdParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{421}
}
func (m *BfdParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BfdParameters.Unmarshal(m, b)
}
func (m *BfdParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BfdParameters.Marshal(b, m, deterministic)
}
func (m *BfdParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BfdParameters.Merge(m, src)
}
func (m *BfdParameters) XXX_Size() int {
	return xxx_messageInfo_BfdParameters.Size(m)
}
func (m *BfdParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_BfdParameters.DiscardUnknown(m)
}

var xxx_messageInfo_BfdParameters proto.InternalMessageInfo

func (m *BfdParameters) GetDetectionTimeMultiplier() int64 {
	if m != nil {
		return m.DetectionTimeMultiplier
	}
	return 0
}

func (m *BfdParameters) GetTimeInterval() int64 {
	if m != nil {
		return m.TimeInterval
	}
	return 0
}

type BgpFamilyAttributes struct {
	AddressFamily      string          `protobuf:"bytes,1,opt,name=address_family,json=addressFamily,proto3" json:"address_family,omitempty" yaml:"address_family,omitempty"`
	DefaultTunnelEncap []string        `protobuf:"bytes,2,rep,name=default_tunnel_encap,json=defaultTunnelEncap,proto3" json:"default_tunnel_encap,omitempty" yaml:"default_tunnel_encap,omitempty"`
	LoopCount          int64           `protobuf:"varint,3,opt,name=loop_count,json=loopCount,proto3" json:"loop_count,omitempty" yaml:"loop_count,omitempty"`
	PrefixLimit        *BgpPrefixLimit `protobuf:"bytes,4,opt,name=prefix_limit,json=prefixLimit,proto3" json:"prefix_limit,omitempty" yaml:"prefix_limit,omitempty"`
}

func (m *BgpFamilyAttributes) Reset()      { *m = BgpFamilyAttributes{} }
func (*BgpFamilyAttributes) ProtoMessage() {}
func (*BgpFamilyAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{422}
}
func (m *BgpFamilyAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpFamilyAttributes.Unmarshal(m, b)
}
func (m *BgpFamilyAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpFamilyAttributes.Marshal(b, m, deterministic)
}
func (m *BgpFamilyAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpFamilyAttributes.Merge(m, src)
}
func (m *BgpFamilyAttributes) XXX_Size() int {
	return xxx_messageInfo_BgpFamilyAttributes.Size(m)
}
func (m *BgpFamilyAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpFamilyAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_BgpFamilyAttributes proto.InternalMessageInfo

func (m *BgpFamilyAttributes) GetAddressFamily() string {
	if m != nil {
		return m.AddressFamily
	}
	return ""
}

func (m *BgpFamilyAttributes) GetDefaultTunnelEncap() []string {
	if m != nil {
		return m.DefaultTunnelEncap
	}
	return nil
}

func (m *BgpFamilyAttributes) GetLoopCount() int64 {
	if m != nil {
		return m.LoopCount
	}
	return 0
}

func (m *BgpFamilyAttributes) GetPrefixLimit() *BgpPrefixLimit {
	if m != nil {
		return m.PrefixLimit
	}
	return nil
}

type BgpParameters struct {
	AuthData              *AuthenticationData `protobuf:"bytes,1,opt,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" yaml:"auth_data,omitempty"`
	HoldTime              int64               `protobuf:"varint,2,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty" yaml:"hold_time,omitempty"`
	LocalAutonomousSystem int64               `protobuf:"varint,3,opt,name=local_autonomous_system,json=localAutonomousSystem,proto3" json:"local_autonomous_system,omitempty" yaml:"local_autonomous_system,omitempty"`
	PeerAutonomousSystem  int64               `protobuf:"varint,4,opt,name=peer_autonomous_system,json=peerAutonomousSystem,proto3" json:"peer_autonomous_system,omitempty" yaml:"peer_autonomous_system,omitempty"`
	PeerIPAddress         string              `protobuf:"bytes,5,opt,name=peer_ip_address,json=peerIpAddress,proto3" json:"peer_ip_address,omitempty" yaml:"peer_ip_address,omitempty"`
}

func (m *BgpParameters) Reset()      { *m = BgpParameters{} }
func (*BgpParameters) ProtoMessage() {}
func (*BgpParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{423}
}
func (m *BgpParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpParameters.Unmarshal(m, b)
}
func (m *BgpParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpParameters.Marshal(b, m, deterministic)
}
func (m *BgpParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpParameters.Merge(m, src)
}
func (m *BgpParameters) XXX_Size() int {
	return xxx_messageInfo_BgpParameters.Size(m)
}
func (m *BgpParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpParameters.DiscardUnknown(m)
}

var xxx_messageInfo_BgpParameters proto.InternalMessageInfo

func (m *BgpParameters) GetAuthData() *AuthenticationData {
	if m != nil {
		return m.AuthData
	}
	return nil
}

func (m *BgpParameters) GetHoldTime() int64 {
	if m != nil {
		return m.HoldTime
	}
	return 0
}

func (m *BgpParameters) GetLocalAutonomousSystem() int64 {
	if m != nil {
		return m.LocalAutonomousSystem
	}
	return 0
}

func (m *BgpParameters) GetPeerAutonomousSystem() int64 {
	if m != nil {
		return m.PeerAutonomousSystem
	}
	return 0
}

func (m *BgpParameters) GetPeerIPAddress() string {
	if m != nil {
		return m.PeerIPAddress
	}
	return ""
}

type BgpPeeringAttributes struct {
	Session []*BgpSession `protobuf:"bytes,1,rep,name=session,proto3" json:"session,omitempty" yaml:"session,omitempty"`
}

func (m *BgpPeeringAttributes) Reset()      { *m = BgpPeeringAttributes{} }
func (*BgpPeeringAttributes) ProtoMessage() {}
func (*BgpPeeringAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{424}
}
func (m *BgpPeeringAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPeeringAttributes.Unmarshal(m, b)
}
func (m *BgpPeeringAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPeeringAttributes.Marshal(b, m, deterministic)
}
func (m *BgpPeeringAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPeeringAttributes.Merge(m, src)
}
func (m *BgpPeeringAttributes) XXX_Size() int {
	return xxx_messageInfo_BgpPeeringAttributes.Size(m)
}
func (m *BgpPeeringAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPeeringAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPeeringAttributes proto.InternalMessageInfo

func (m *BgpPeeringAttributes) GetSession() []*BgpSession {
	if m != nil {
		return m.Session
	}
	return nil
}

type BgpPrefixLimit struct {
	IdleTimeout int64 `protobuf:"varint,1,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty" yaml:"idle_timeout,omitempty"`
	Maximum     int64 `protobuf:"varint,2,opt,name=maximum,proto3" json:"maximum,omitempty" yaml:"maximum,omitempty"`
}

func (m *BgpPrefixLimit) Reset()      { *m = BgpPrefixLimit{} }
func (*BgpPrefixLimit) ProtoMessage() {}
func (*BgpPrefixLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{425}
}
func (m *BgpPrefixLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPrefixLimit.Unmarshal(m, b)
}
func (m *BgpPrefixLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPrefixLimit.Marshal(b, m, deterministic)
}
func (m *BgpPrefixLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPrefixLimit.Merge(m, src)
}
func (m *BgpPrefixLimit) XXX_Size() int {
	return xxx_messageInfo_BgpPrefixLimit.Size(m)
}
func (m *BgpPrefixLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPrefixLimit.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPrefixLimit proto.InternalMessageInfo

func (m *BgpPrefixLimit) GetIdleTimeout() int64 {
	if m != nil {
		return m.IdleTimeout
	}
	return 0
}

func (m *BgpPrefixLimit) GetMaximum() int64 {
	if m != nil {
		return m.Maximum
	}
	return 0
}

type BgpRouterParams struct {
	Address               string              `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address,omitempty"`
	AddressFamilies       *AddressFamilies    `protobuf:"bytes,2,opt,name=address_families,json=addressFamilies,proto3" json:"address_families,omitempty" yaml:"address_families,omitempty"`
	AdminDown             bool                `protobuf:"varint,3,opt,name=admin_down,json=adminDown,proto3" json:"admin_down,omitempty" yaml:"admin_down,omitempty"`
	AuthData              *AuthenticationData `protobuf:"bytes,4,opt,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" yaml:"auth_data,omitempty"`
	AutonomousSystem      int64               `protobuf:"varint,5,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty" yaml:"autonomous_system,omitempty"`
	ClusterID             int64               `protobuf:"varint,6,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" yaml:"cluster_id,omitempty"`
	GatewayAddress        string              `protobuf:"bytes,7,opt,name=gateway_address,json=gatewayAddress,proto3" json:"gateway_address,omitempty" yaml:"gateway_address,omitempty"`
	HoldTime              int64               `protobuf:"varint,8,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty" yaml:"hold_time,omitempty"`
	Identifier            string              `protobuf:"bytes,9,opt,name=identifier,proto3" json:"identifier,omitempty" yaml:"identifier,omitempty"`
	Ipv6GatewayAddress    string              `protobuf:"bytes,10,opt,name=ipv6_gateway_address,json=ipv6GatewayAddress,proto3" json:"ipv6_gateway_address,omitempty" yaml:"ipv6_gateway_address,omitempty"`
	LocalAutonomousSystem int64               `protobuf:"varint,11,opt,name=local_autonomous_system,json=localAutonomousSystem,proto3" json:"local_autonomous_system,omitempty" yaml:"local_autonomous_system,omitempty"`
	Port                  int64               `protobuf:"varint,12,opt,name=port,proto3" json:"port,omitempty" yaml:"port,omitempty"`
	RouterType            string              `protobuf:"bytes,13,opt,name=router_type,json=routerType,proto3" json:"router_type,omitempty" yaml:"router_type,omitempty"`
	SourcePort            int64               `protobuf:"varint,14,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty" yaml:"source_port,omitempty"`
	Vendor                string              `protobuf:"bytes,15,opt,name=vendor,proto3" json:"vendor,omitempty" yaml:"vendor,omitempty"`
}

func (m *BgpRouterParams) Reset()      { *m = BgpRouterParams{} }
func (*BgpRouterParams) ProtoMessage() {}
func (*BgpRouterParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{426}
}
func (m *BgpRouterParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpRouterParams.Unmarshal(m, b)
}
func (m *BgpRouterParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpRouterParams.Marshal(b, m, deterministic)
}
func (m *BgpRouterParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpRouterParams.Merge(m, src)
}
func (m *BgpRouterParams) XXX_Size() int {
	return xxx_messageInfo_BgpRouterParams.Size(m)
}
func (m *BgpRouterParams) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpRouterParams.DiscardUnknown(m)
}

var xxx_messageInfo_BgpRouterParams proto.InternalMessageInfo

func (m *BgpRouterParams) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BgpRouterParams) GetAddressFamilies() *AddressFamilies {
	if m != nil {
		return m.AddressFamilies
	}
	return nil
}

func (m *BgpRouterParams) GetAdminDown() bool {
	if m != nil {
		return m.AdminDown
	}
	return false
}

func (m *BgpRouterParams) GetAuthData() *AuthenticationData {
	if m != nil {
		return m.AuthData
	}
	return nil
}

func (m *BgpRouterParams) GetAutonomousSystem() int64 {
	if m != nil {
		return m.AutonomousSystem
	}
	return 0
}

func (m *BgpRouterParams) GetClusterID() int64 {
	if m != nil {
		return m.ClusterID
	}
	return 0
}

func (m *BgpRouterParams) GetGatewayAddress() string {
	if m != nil {
		return m.GatewayAddress
	}
	return ""
}

func (m *BgpRouterParams) GetHoldTime() int64 {
	if m != nil {
		return m.HoldTime
	}
	return 0
}

func (m *BgpRouterParams) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *BgpRouterParams) GetIpv6GatewayAddress() string {
	if m != nil {
		return m.Ipv6GatewayAddress
	}
	return ""
}

func (m *BgpRouterParams) GetLocalAutonomousSystem() int64 {
	if m != nil {
		return m.LocalAutonomousSystem
	}
	return 0
}

func (m *BgpRouterParams) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *BgpRouterParams) GetRouterType() string {
	if m != nil {
		return m.RouterType
	}
	return ""
}

func (m *BgpRouterParams) GetSourcePort() int64 {
	if m != nil {
		return m.SourcePort
	}
	return 0
}

func (m *BgpRouterParams) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

type BgpSession struct {
	Attributes []*BgpSessionAttributes `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty" yaml:"attributes,omitempty"`
	UUID       string                  `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
}

func (m *BgpSession) Reset()      { *m = BgpSession{} }
func (*BgpSession) ProtoMessage() {}
func (*BgpSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{427}
}
func (m *BgpSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpSession.Unmarshal(m, b)
}
func (m *BgpSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpSession.Marshal(b, m, deterministic)
}
func (m *BgpSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpSession.Merge(m, src)
}
func (m *BgpSession) XXX_Size() int {
	return xxx_messageInfo_BgpSession.Size(m)
}
func (m *BgpSession) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpSession.DiscardUnknown(m)
}

var xxx_messageInfo_BgpSession proto.InternalMessageInfo

func (m *BgpSession) GetAttributes() []*BgpSessionAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *BgpSession) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type BgpSessionAttributes struct {
	AddressFamilies       *AddressFamilies       `protobuf:"bytes,1,opt,name=address_families,json=addressFamilies,proto3" json:"address_families,omitempty" yaml:"address_families,omitempty"`
	AdminDown             bool                   `protobuf:"varint,2,opt,name=admin_down,json=adminDown,proto3" json:"admin_down,omitempty" yaml:"admin_down,omitempty"`
	AsOverride            bool                   `protobuf:"varint,3,opt,name=as_override,json=asOverride,proto3" json:"as_override,omitempty" yaml:"as_override,omitempty"`
	AuthData              *AuthenticationData    `protobuf:"bytes,4,opt,name=auth_data,json=authData,proto3" json:"auth_data,omitempty" yaml:"auth_data,omitempty"`
	BGPRouter             string                 `protobuf:"bytes,5,opt,name=bgp_router,json=bgpRouter,proto3" json:"bgp_router,omitempty" yaml:"bgp_router,omitempty"`
	FamilyAttributes      []*BgpFamilyAttributes `protobuf:"bytes,6,rep,name=family_attributes,json=familyAttributes,proto3" json:"family_attributes,omitempty" yaml:"family_attributes,omitempty"`
	HoldTime              int64                  `protobuf:"varint,7,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty" yaml:"hold_time,omitempty"`
	LocalAutonomousSystem int64                  `protobuf:"varint,8,opt,name=local_autonomous_system,json=localAutonomousSystem,proto3" json:"local_autonomous_system,omitempty" yaml:"local_autonomous_system,omitempty"`
	LoopCount             int64                  `protobuf:"varint,9,opt,name=loop_count,json=loopCount,proto3" json:"loop_count,omitempty" yaml:"loop_count,omitempty"`
	Passive               bool                   `protobuf:"varint,10,opt,name=passive,proto3" json:"passive,omitempty" yaml:"passive,omitempty"`
	PrivateAsAction       string                 `protobuf:"bytes,11,opt,name=private_as_action,json=privateAsAction,proto3" json:"private_as_action,omitempty" yaml:"private_as_action,omitempty"`
	RouteOriginOverride   *RouteOriginOverride   `protobuf:"bytes,12,opt,name=route_origin_override,json=routeOriginOverride,proto3" json:"route_origin_override,omitempty" yaml:"route_origin_override,omitempty"`
}

func (m *BgpSessionAttributes) Reset()      { *m = BgpSessionAttributes{} }
func (*BgpSessionAttributes) ProtoMessage() {}
func (*BgpSessionAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{428}
}
func (m *BgpSessionAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpSessionAttributes.Unmarshal(m, b)
}
func (m *BgpSessionAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpSessionAttributes.Marshal(b, m, deterministic)
}
func (m *BgpSessionAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpSessionAttributes.Merge(m, src)
}
func (m *BgpSessionAttributes) XXX_Size() int {
	return xxx_messageInfo_BgpSessionAttributes.Size(m)
}
func (m *BgpSessionAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpSessionAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_BgpSessionAttributes proto.InternalMessageInfo

func (m *BgpSessionAttributes) GetAddressFamilies() *AddressFamilies {
	if m != nil {
		return m.AddressFamilies
	}
	return nil
}

func (m *BgpSessionAttributes) GetAdminDown() bool {
	if m != nil {
		return m.AdminDown
	}
	return false
}

func (m *BgpSessionAttributes) GetAsOverride() bool {
	if m != nil {
		return m.AsOverride
	}
	return false
}

func (m *BgpSessionAttributes) GetAuthData() *AuthenticationData {
	if m != nil {
		return m.AuthData
	}
	return nil
}

func (m *BgpSessionAttributes) GetBGPRouter() string {
	if m != nil {
		return m.BGPRouter
	}
	return ""
}

func (m *BgpSessionAttributes) GetFamilyAttributes() []*BgpFamilyAttributes {
	if m != nil {
		return m.FamilyAttributes
	}
	return nil
}

func (m *BgpSessionAttributes) GetHoldTime() int64 {
	if m != nil {
		return m.HoldTime
	}
	return 0
}

func (m *BgpSessionAttributes) GetLocalAutonomousSystem() int64 {
	if m != nil {
		return m.LocalAutonomousSystem
	}
	return 0
}

func (m *BgpSessionAttributes) GetLoopCount() int64 {
	if m != nil {
		return m.LoopCount
	}
	return 0
}

func (m *BgpSessionAttributes) GetPassive() bool {
	if m != nil {
		return m.Passive
	}
	return false
}

func (m *BgpSessionAttributes) GetPrivateAsAction() string {
	if m != nil {
		return m.PrivateAsAction
	}
	return ""
}

func (m *BgpSessionAttributes) GetRouteOriginOverride() *RouteOriginOverride {
	if m != nil {
		return m.RouteOriginOverride
	}
	return nil
}

type BridgeDomainMembershipType struct {
	VlanTag int64 `protobuf:"varint,1,opt,name=vlan_tag,json=vlanTag,proto3" json:"vlan_tag,omitempty" yaml:"vlan_tag,omitempty"`
}

func (m *BridgeDomainMembershipType) Reset()      { *m = BridgeDomainMembershipType{} }
func (*BridgeDomainMembershipType) ProtoMessage() {}
func (*BridgeDomainMembershipType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{429}
}
func (m *BridgeDomainMembershipType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BridgeDomainMembershipType.Unmarshal(m, b)
}
func (m *BridgeDomainMembershipType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BridgeDomainMembershipType.Marshal(b, m, deterministic)
}
func (m *BridgeDomainMembershipType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeDomainMembershipType.Merge(m, src)
}
func (m *BridgeDomainMembershipType) XXX_Size() int {
	return xxx_messageInfo_BridgeDomainMembershipType.Size(m)
}
func (m *BridgeDomainMembershipType) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeDomainMembershipType.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeDomainMembershipType proto.InternalMessageInfo

func (m *BridgeDomainMembershipType) GetVlanTag() int64 {
	if m != nil {
		return m.VlanTag
	}
	return 0
}

type CliDiffInfoType struct {
	ConfigChanges string `protobuf:"bytes,1,opt,name=config_changes,json=configChanges,proto3" json:"config_changes,omitempty" yaml:"config_changes,omitempty"`
	Time          string `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty" yaml:"time,omitempty"`
	Username      string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty" yaml:"username,omitempty"`
}

func (m *CliDiffInfoType) Reset()      { *m = CliDiffInfoType{} }
func (*CliDiffInfoType) ProtoMessage() {}
func (*CliDiffInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{430}
}
func (m *CliDiffInfoType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CliDiffInfoType.Unmarshal(m, b)
}
func (m *CliDiffInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CliDiffInfoType.Marshal(b, m, deterministic)
}
func (m *CliDiffInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CliDiffInfoType.Merge(m, src)
}
func (m *CliDiffInfoType) XXX_Size() int {
	return xxx_messageInfo_CliDiffInfoType.Size(m)
}
func (m *CliDiffInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_CliDiffInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_CliDiffInfoType proto.InternalMessageInfo

func (m *CliDiffInfoType) GetConfigChanges() string {
	if m != nil {
		return m.ConfigChanges
	}
	return ""
}

func (m *CliDiffInfoType) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *CliDiffInfoType) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type CliDiffListType struct {
	CommitDiffInfo []*CliDiffInfoType `protobuf:"bytes,1,rep,name=commit_diff_info,json=commitDiffInfo,proto3" json:"commit_diff_info,omitempty" yaml:"commit_diff_info,omitempty"`
}

func (m *CliDiffListType) Reset()      { *m = CliDiffListType{} }
func (*CliDiffListType) ProtoMessage() {}
func (*CliDiffListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{431}
}
func (m *CliDiffListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CliDiffListType.Unmarshal(m, b)
}
func (m *CliDiffListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CliDiffListType.Marshal(b, m, deterministic)
}
func (m *CliDiffListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CliDiffListType.Merge(m, src)
}
func (m *CliDiffListType) XXX_Size() int {
	return xxx_messageInfo_CliDiffListType.Size(m)
}
func (m *CliDiffListType) XXX_DiscardUnknown() {
	xxx_messageInfo_CliDiffListType.DiscardUnknown(m)
}

var xxx_messageInfo_CliDiffListType proto.InternalMessageInfo

func (m *CliDiffListType) GetCommitDiffInfo() []*CliDiffInfoType {
	if m != nil {
		return m.CommitDiffInfo
	}
	return nil
}

type CloudInstanceInfo struct {
	AvailabilityZone string   `protobuf:"bytes,1,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty" yaml:"availability_zone,omitempty"`
	InstanceType     string   `protobuf:"bytes,2,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty" yaml:"instance_type,omitempty"`
	MachineID        string   `protobuf:"bytes,3,opt,name=machine_id,json=machineId,proto3" json:"machine_id,omitempty" yaml:"machine_id,omitempty"`
	OperatingSystem  string   `protobuf:"bytes,4,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty" yaml:"operating_system,omitempty"`
	OsVersion        string   `protobuf:"bytes,5,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty" yaml:"os_version,omitempty"`
	Roles            []string `protobuf:"bytes,6,rep,name=roles,proto3" json:"roles,omitempty" yaml:"roles,omitempty"`
	VolumeSize       int64    `protobuf:"varint,7,opt,name=volume_size,json=volumeSize,proto3" json:"volume_size,omitempty" yaml:"volume_size,omitempty"`
}

func (m *CloudInstanceInfo) Reset()      { *m = CloudInstanceInfo{} }
func (*CloudInstanceInfo) ProtoMessage() {}
func (*CloudInstanceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{432}
}
func (m *CloudInstanceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloudInstanceInfo.Unmarshal(m, b)
}
func (m *CloudInstanceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloudInstanceInfo.Marshal(b, m, deterministic)
}
func (m *CloudInstanceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloudInstanceInfo.Merge(m, src)
}
func (m *CloudInstanceInfo) XXX_Size() int {
	return xxx_messageInfo_CloudInstanceInfo.Size(m)
}
func (m *CloudInstanceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CloudInstanceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CloudInstanceInfo proto.InternalMessageInfo

func (m *CloudInstanceInfo) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

func (m *CloudInstanceInfo) GetInstanceType() string {
	if m != nil {
		return m.InstanceType
	}
	return ""
}

func (m *CloudInstanceInfo) GetMachineID() string {
	if m != nil {
		return m.MachineID
	}
	return ""
}

func (m *CloudInstanceInfo) GetOperatingSystem() string {
	if m != nil {
		return m.OperatingSystem
	}
	return ""
}

func (m *CloudInstanceInfo) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *CloudInstanceInfo) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *CloudInstanceInfo) GetVolumeSize() int64 {
	if m != nil {
		return m.VolumeSize
	}
	return 0
}

type CommunityAttributes struct {
	CommunityAttribute []string `protobuf:"bytes,1,rep,name=community_attribute,json=communityAttribute,proto3" json:"community_attribute,omitempty" yaml:"community_attribute,omitempty"`
}

func (m *CommunityAttributes) Reset()      { *m = CommunityAttributes{} }
func (*CommunityAttributes) ProtoMessage() {}
func (*CommunityAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{433}
}
func (m *CommunityAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommunityAttributes.Unmarshal(m, b)
}
func (m *CommunityAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommunityAttributes.Marshal(b, m, deterministic)
}
func (m *CommunityAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityAttributes.Merge(m, src)
}
func (m *CommunityAttributes) XXX_Size() int {
	return xxx_messageInfo_CommunityAttributes.Size(m)
}
func (m *CommunityAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityAttributes proto.InternalMessageInfo

func (m *CommunityAttributes) GetCommunityAttribute() []string {
	if m != nil {
		return m.CommunityAttribute
	}
	return nil
}

type CommunityListType struct {
	Community []string `protobuf:"bytes,1,rep,name=community,proto3" json:"community,omitempty" yaml:"community,omitempty"`
}

func (m *CommunityListType) Reset()      { *m = CommunityListType{} }
func (*CommunityListType) ProtoMessage() {}
func (*CommunityListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{434}
}
func (m *CommunityListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommunityListType.Unmarshal(m, b)
}
func (m *CommunityListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommunityListType.Marshal(b, m, deterministic)
}
func (m *CommunityListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommunityListType.Merge(m, src)
}
func (m *CommunityListType) XXX_Size() int {
	return xxx_messageInfo_CommunityListType.Size(m)
}
func (m *CommunityListType) XXX_DiscardUnknown() {
	xxx_messageInfo_CommunityListType.DiscardUnknown(m)
}

var xxx_messageInfo_CommunityListType proto.InternalMessageInfo

func (m *CommunityListType) GetCommunity() []string {
	if m != nil {
		return m.Community
	}
	return nil
}

type ConnectionType struct {
	DestinationInstance string `protobuf:"bytes,1,opt,name=destination_instance,json=destinationInstance,proto3" json:"destination_instance,omitempty" yaml:"destination_instance,omitempty"`
}

func (m *ConnectionType) Reset()      { *m = ConnectionType{} }
func (*ConnectionType) ProtoMessage() {}
func (*ConnectionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{435}
}
func (m *ConnectionType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectionType.Unmarshal(m, b)
}
func (m *ConnectionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectionType.Marshal(b, m, deterministic)
}
func (m *ConnectionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionType.Merge(m, src)
}
func (m *ConnectionType) XXX_Size() int {
	return xxx_messageInfo_ConnectionType.Size(m)
}
func (m *ConnectionType) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionType.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionType proto.InternalMessageInfo

func (m *ConnectionType) GetDestinationInstance() string {
	if m != nil {
		return m.DestinationInstance
	}
	return ""
}

type ControlTrafficDscpType struct {
	Analytics int64 `protobuf:"varint,1,opt,name=analytics,proto3" json:"analytics,omitempty" yaml:"analytics,omitempty"`
	Control   int64 `protobuf:"varint,2,opt,name=control,proto3" json:"control,omitempty" yaml:"control,omitempty"`
	DNS       int64 `protobuf:"varint,3,opt,name=dns,proto3" json:"dns,omitempty" yaml:"dns,omitempty"`
}

func (m *ControlTrafficDscpType) Reset()      { *m = ControlTrafficDscpType{} }
func (*ControlTrafficDscpType) ProtoMessage() {}
func (*ControlTrafficDscpType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{436}
}
func (m *ControlTrafficDscpType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControlTrafficDscpType.Unmarshal(m, b)
}
func (m *ControlTrafficDscpType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControlTrafficDscpType.Marshal(b, m, deterministic)
}
func (m *ControlTrafficDscpType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlTrafficDscpType.Merge(m, src)
}
func (m *ControlTrafficDscpType) XXX_Size() int {
	return xxx_messageInfo_ControlTrafficDscpType.Size(m)
}
func (m *ControlTrafficDscpType) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlTrafficDscpType.DiscardUnknown(m)
}

var xxx_messageInfo_ControlTrafficDscpType proto.InternalMessageInfo

func (m *ControlTrafficDscpType) GetAnalytics() int64 {
	if m != nil {
		return m.Analytics
	}
	return 0
}

func (m *ControlTrafficDscpType) GetControl() int64 {
	if m != nil {
		return m.Control
	}
	return 0
}

func (m *ControlTrafficDscpType) GetDNS() int64 {
	if m != nil {
		return m.DNS
	}
	return 0
}

type DefaultProtocolType struct {
	BGP  *ProtocolBgpType  `protobuf:"bytes,1,opt,name=bgp,proto3" json:"bgp,omitempty" yaml:"bgp,omitempty"`
	Ospf *ProtocolOspfType `protobuf:"bytes,2,opt,name=ospf,proto3" json:"ospf,omitempty" yaml:"ospf,omitempty"`
}

func (m *DefaultProtocolType) Reset()      { *m = DefaultProtocolType{} }
func (*DefaultProtocolType) ProtoMessage() {}
func (*DefaultProtocolType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{437}
}
func (m *DefaultProtocolType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DefaultProtocolType.Unmarshal(m, b)
}
func (m *DefaultProtocolType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DefaultProtocolType.Marshal(b, m, deterministic)
}
func (m *DefaultProtocolType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultProtocolType.Merge(m, src)
}
func (m *DefaultProtocolType) XXX_Size() int {
	return xxx_messageInfo_DefaultProtocolType.Size(m)
}
func (m *DefaultProtocolType) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultProtocolType.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultProtocolType proto.InternalMessageInfo

func (m *DefaultProtocolType) GetBGP() *ProtocolBgpType {
	if m != nil {
		return m.BGP
	}
	return nil
}

func (m *DefaultProtocolType) GetOspf() *ProtocolOspfType {
	if m != nil {
		return m.Ospf
	}
	return nil
}

type DeviceCredential struct {
	Credential   *UserCredentials `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty" yaml:"credential,omitempty"`
	DeviceFamily string           `protobuf:"bytes,2,opt,name=device_family,json=deviceFamily,proto3" json:"device_family,omitempty" yaml:"device_family,omitempty"`
	Vendor       string           `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty" yaml:"vendor,omitempty"`
}

func (m *DeviceCredential) Reset()      { *m = DeviceCredential{} }
func (*DeviceCredential) ProtoMessage() {}
func (*DeviceCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{438}
}
func (m *DeviceCredential) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceCredential.Unmarshal(m, b)
}
func (m *DeviceCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceCredential.Marshal(b, m, deterministic)
}
func (m *DeviceCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceCredential.Merge(m, src)
}
func (m *DeviceCredential) XXX_Size() int {
	return xxx_messageInfo_DeviceCredential.Size(m)
}
func (m *DeviceCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceCredential.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceCredential proto.InternalMessageInfo

func (m *DeviceCredential) GetCredential() *UserCredentials {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (m *DeviceCredential) GetDeviceFamily() string {
	if m != nil {
		return m.DeviceFamily
	}
	return ""
}

func (m *DeviceCredential) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

type DeviceCredentialList struct {
	DeviceCredential []*DeviceCredential `protobuf:"bytes,1,rep,name=device_credential,json=deviceCredential,proto3" json:"device_credential,omitempty" yaml:"device_credential,omitempty"`
}

func (m *DeviceCredentialList) Reset()      { *m = DeviceCredentialList{} }
func (*DeviceCredentialList) ProtoMessage() {}
func (*DeviceCredentialList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{439}
}
func (m *DeviceCredentialList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceCredentialList.Unmarshal(m, b)
}
func (m *DeviceCredentialList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceCredentialList.Marshal(b, m, deterministic)
}
func (m *DeviceCredentialList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceCredentialList.Merge(m, src)
}
func (m *DeviceCredentialList) XXX_Size() int {
	return xxx_messageInfo_DeviceCredentialList.Size(m)
}
func (m *DeviceCredentialList) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceCredentialList.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceCredentialList proto.InternalMessageInfo

func (m *DeviceCredentialList) GetDeviceCredential() []*DeviceCredential {
	if m != nil {
		return m.DeviceCredential
	}
	return nil
}

type DeviceFamilyListType struct {
	DeviceFamily []string `protobuf:"bytes,1,rep,name=device_family,json=deviceFamily,proto3" json:"device_family,omitempty" yaml:"device_family,omitempty"`
}

func (m *DeviceFamilyListType) Reset()      { *m = DeviceFamilyListType{} }
func (*DeviceFamilyListType) ProtoMessage() {}
func (*DeviceFamilyListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{440}
}
func (m *DeviceFamilyListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceFamilyListType.Unmarshal(m, b)
}
func (m *DeviceFamilyListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceFamilyListType.Marshal(b, m, deterministic)
}
func (m *DeviceFamilyListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceFamilyListType.Merge(m, src)
}
func (m *DeviceFamilyListType) XXX_Size() int {
	return xxx_messageInfo_DeviceFamilyListType.Size(m)
}
func (m *DeviceFamilyListType) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceFamilyListType.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceFamilyListType proto.InternalMessageInfo

func (m *DeviceFamilyListType) GetDeviceFamily() []string {
	if m != nil {
		return m.DeviceFamily
	}
	return nil
}

type DevicePlatformListType struct {
	PlatformName []string `protobuf:"bytes,1,rep,name=platform_name,json=platformName,proto3" json:"platform_name,omitempty" yaml:"platform_name,omitempty"`
}

func (m *DevicePlatformListType) Reset()      { *m = DevicePlatformListType{} }
func (*DevicePlatformListType) ProtoMessage() {}
func (*DevicePlatformListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{441}
}
func (m *DevicePlatformListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DevicePlatformListType.Unmarshal(m, b)
}
func (m *DevicePlatformListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DevicePlatformListType.Marshal(b, m, deterministic)
}
func (m *DevicePlatformListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicePlatformListType.Merge(m, src)
}
func (m *DevicePlatformListType) XXX_Size() int {
	return xxx_messageInfo_DevicePlatformListType.Size(m)
}
func (m *DevicePlatformListType) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicePlatformListType.DiscardUnknown(m)
}

var xxx_messageInfo_DevicePlatformListType proto.InternalMessageInfo

func (m *DevicePlatformListType) GetPlatformName() []string {
	if m != nil {
		return m.PlatformName
	}
	return nil
}

type DhcpOptionType struct {
	DHCPOptionName       string `protobuf:"bytes,1,opt,name=dhcp_option_name,json=dhcpOptionName,proto3" json:"dhcp_option_name,omitempty" yaml:"dhcp_option_name,omitempty"`
	DHCPOptionValue      string `protobuf:"bytes,2,opt,name=dhcp_option_value,json=dhcpOptionValue,proto3" json:"dhcp_option_value,omitempty" yaml:"dhcp_option_value,omitempty"`
	DHCPOptionValueBytes string `protobuf:"bytes,3,opt,name=dhcp_option_value_bytes,json=dhcpOptionValueBytes,proto3" json:"dhcp_option_value_bytes,omitempty" yaml:"dhcp_option_value_bytes,omitempty"`
}

func (m *DhcpOptionType) Reset()      { *m = DhcpOptionType{} }
func (*DhcpOptionType) ProtoMessage() {}
func (*DhcpOptionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{442}
}
func (m *DhcpOptionType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DhcpOptionType.Unmarshal(m, b)
}
func (m *DhcpOptionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DhcpOptionType.Marshal(b, m, deterministic)
}
func (m *DhcpOptionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhcpOptionType.Merge(m, src)
}
func (m *DhcpOptionType) XXX_Size() int {
	return xxx_messageInfo_DhcpOptionType.Size(m)
}
func (m *DhcpOptionType) XXX_DiscardUnknown() {
	xxx_messageInfo_DhcpOptionType.DiscardUnknown(m)
}

var xxx_messageInfo_DhcpOptionType proto.InternalMessageInfo

func (m *DhcpOptionType) GetDHCPOptionName() string {
	if m != nil {
		return m.DHCPOptionName
	}
	return ""
}

func (m *DhcpOptionType) GetDHCPOptionValue() string {
	if m != nil {
		return m.DHCPOptionValue
	}
	return ""
}

func (m *DhcpOptionType) GetDHCPOptionValueBytes() string {
	if m != nil {
		return m.DHCPOptionValueBytes
	}
	return ""
}

type DhcpOptionsListType struct {
	DHCPOption []*DhcpOptionType `protobuf:"bytes,1,rep,name=dhcp_option,json=dhcpOption,proto3" json:"dhcp_option,omitempty" yaml:"dhcp_option,omitempty"`
}

func (m *DhcpOptionsListType) Reset()      { *m = DhcpOptionsListType{} }
func (*DhcpOptionsListType) ProtoMessage() {}
func (*DhcpOptionsListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{443}
}
func (m *DhcpOptionsListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DhcpOptionsListType.Unmarshal(m, b)
}
func (m *DhcpOptionsListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DhcpOptionsListType.Marshal(b, m, deterministic)
}
func (m *DhcpOptionsListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DhcpOptionsListType.Merge(m, src)
}
func (m *DhcpOptionsListType) XXX_Size() int {
	return xxx_messageInfo_DhcpOptionsListType.Size(m)
}
func (m *DhcpOptionsListType) XXX_DiscardUnknown() {
	xxx_messageInfo_DhcpOptionsListType.DiscardUnknown(m)
}

var xxx_messageInfo_DhcpOptionsListType proto.InternalMessageInfo

func (m *DhcpOptionsListType) GetDHCPOption() []*DhcpOptionType {
	if m != nil {
		return m.DHCPOption
	}
	return nil
}

type DiscoveryPubSubEndPointType struct {
	EpID      string      `protobuf:"bytes,1,opt,name=ep_id,json=epId,proto3" json:"ep_id,omitempty" yaml:"ep_id,omitempty"`
	EpPrefix  *SubnetType `protobuf:"bytes,2,opt,name=ep_prefix,json=epPrefix,proto3" json:"ep_prefix,omitempty" yaml:"ep_prefix,omitempty"`
	EpType    string      `protobuf:"bytes,3,opt,name=ep_type,json=epType,proto3" json:"ep_type,omitempty" yaml:"ep_type,omitempty"`
	EpVersion string      `protobuf:"bytes,4,opt,name=ep_version,json=epVersion,proto3" json:"ep_version,omitempty" yaml:"ep_version,omitempty"`
}

func (m *DiscoveryPubSubEndPointType) Reset()      { *m = DiscoveryPubSubEndPointType{} }
func (*DiscoveryPubSubEndPointType) ProtoMessage() {}
func (*DiscoveryPubSubEndPointType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{444}
}
func (m *DiscoveryPubSubEndPointType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoveryPubSubEndPointType.Unmarshal(m, b)
}
func (m *DiscoveryPubSubEndPointType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoveryPubSubEndPointType.Marshal(b, m, deterministic)
}
func (m *DiscoveryPubSubEndPointType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveryPubSubEndPointType.Merge(m, src)
}
func (m *DiscoveryPubSubEndPointType) XXX_Size() int {
	return xxx_messageInfo_DiscoveryPubSubEndPointType.Size(m)
}
func (m *DiscoveryPubSubEndPointType) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveryPubSubEndPointType.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveryPubSubEndPointType proto.InternalMessageInfo

func (m *DiscoveryPubSubEndPointType) GetEpID() string {
	if m != nil {
		return m.EpID
	}
	return ""
}

func (m *DiscoveryPubSubEndPointType) GetEpPrefix() *SubnetType {
	if m != nil {
		return m.EpPrefix
	}
	return nil
}

func (m *DiscoveryPubSubEndPointType) GetEpType() string {
	if m != nil {
		return m.EpType
	}
	return ""
}

func (m *DiscoveryPubSubEndPointType) GetEpVersion() string {
	if m != nil {
		return m.EpVersion
	}
	return ""
}

type DiscoveryServiceAssignmentType struct {
	Publisher  *DiscoveryPubSubEndPointType   `protobuf:"bytes,1,opt,name=publisher,proto3" json:"publisher,omitempty" yaml:"publisher,omitempty"`
	Subscriber []*DiscoveryPubSubEndPointType `protobuf:"bytes,2,rep,name=subscriber,proto3" json:"subscriber,omitempty" yaml:"subscriber,omitempty"`
}

func (m *DiscoveryServiceAssignmentType) Reset()      { *m = DiscoveryServiceAssignmentType{} }
func (*DiscoveryServiceAssignmentType) ProtoMessage() {}
func (*DiscoveryServiceAssignmentType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{445}
}
func (m *DiscoveryServiceAssignmentType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscoveryServiceAssignmentType.Unmarshal(m, b)
}
func (m *DiscoveryServiceAssignmentType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscoveryServiceAssignmentType.Marshal(b, m, deterministic)
}
func (m *DiscoveryServiceAssignmentType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveryServiceAssignmentType.Merge(m, src)
}
func (m *DiscoveryServiceAssignmentType) XXX_Size() int {
	return xxx_messageInfo_DiscoveryServiceAssignmentType.Size(m)
}
func (m *DiscoveryServiceAssignmentType) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveryServiceAssignmentType.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveryServiceAssignmentType proto.InternalMessageInfo

func (m *DiscoveryServiceAssignmentType) GetPublisher() *DiscoveryPubSubEndPointType {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *DiscoveryServiceAssignmentType) GetSubscriber() []*DiscoveryPubSubEndPointType {
	if m != nil {
		return m.Subscriber
	}
	return nil
}

type DnsSoaRecordType struct {
	NegativeCacheTTLSeconds int64 `protobuf:"varint,1,opt,name=negative_cache_ttl_seconds,json=negativeCacheTtlSeconds,proto3" json:"negative_cache_ttl_seconds,omitempty" yaml:"negative_cache_ttl_seconds,omitempty"`
}

func (m *DnsSoaRecordType) Reset()      { *m = DnsSoaRecordType{} }
func (*DnsSoaRecordType) ProtoMessage() {}
func (*DnsSoaRecordType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{446}
}
func (m *DnsSoaRecordType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DnsSoaRecordType.Unmarshal(m, b)
}
func (m *DnsSoaRecordType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DnsSoaRecordType.Marshal(b, m, deterministic)
}
func (m *DnsSoaRecordType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsSoaRecordType.Merge(m, src)
}
func (m *DnsSoaRecordType) XXX_Size() int {
	return xxx_messageInfo_DnsSoaRecordType.Size(m)
}
func (m *DnsSoaRecordType) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsSoaRecordType.DiscardUnknown(m)
}

var xxx_messageInfo_DnsSoaRecordType proto.InternalMessageInfo

func (m *DnsSoaRecordType) GetNegativeCacheTTLSeconds() int64 {
	if m != nil {
		return m.NegativeCacheTTLSeconds
	}
	return 0
}

type DnsmasqLeaseParameters struct {
	ClientID        string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty" yaml:"client_id,omitempty"`
	LeaseExpiryTime int64  `protobuf:"varint,2,opt,name=lease_expiry_time,json=leaseExpiryTime,proto3" json:"lease_expiry_time,omitempty" yaml:"lease_expiry_time,omitempty"`
}

func (m *DnsmasqLeaseParameters) Reset()      { *m = DnsmasqLeaseParameters{} }
func (*DnsmasqLeaseParameters) ProtoMessage() {}
func (*DnsmasqLeaseParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{447}
}
func (m *DnsmasqLeaseParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DnsmasqLeaseParameters.Unmarshal(m, b)
}
func (m *DnsmasqLeaseParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DnsmasqLeaseParameters.Marshal(b, m, deterministic)
}
func (m *DnsmasqLeaseParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DnsmasqLeaseParameters.Merge(m, src)
}
func (m *DnsmasqLeaseParameters) XXX_Size() int {
	return xxx_messageInfo_DnsmasqLeaseParameters.Size(m)
}
func (m *DnsmasqLeaseParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_DnsmasqLeaseParameters.DiscardUnknown(m)
}

var xxx_messageInfo_DnsmasqLeaseParameters proto.InternalMessageInfo

func (m *DnsmasqLeaseParameters) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *DnsmasqLeaseParameters) GetLeaseExpiryTime() int64 {
	if m != nil {
		return m.LeaseExpiryTime
	}
	return 0
}

type DomainLimitsType struct {
	ProjectLimit        int64 `protobuf:"varint,1,opt,name=project_limit,json=projectLimit,proto3" json:"project_limit,omitempty" yaml:"project_limit,omitempty"`
	SecurityGroupLimit  int64 `protobuf:"varint,2,opt,name=security_group_limit,json=securityGroupLimit,proto3" json:"security_group_limit,omitempty" yaml:"security_group_limit,omitempty"`
	VirtualNetworkLimit int64 `protobuf:"varint,3,opt,name=virtual_network_limit,json=virtualNetworkLimit,proto3" json:"virtual_network_limit,omitempty" yaml:"virtual_network_limit,omitempty"`
}

func (m *DomainLimitsType) Reset()      { *m = DomainLimitsType{} }
func (*DomainLimitsType) ProtoMessage() {}
func (*DomainLimitsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{448}
}
func (m *DomainLimitsType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainLimitsType.Unmarshal(m, b)
}
func (m *DomainLimitsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainLimitsType.Marshal(b, m, deterministic)
}
func (m *DomainLimitsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainLimitsType.Merge(m, src)
}
func (m *DomainLimitsType) XXX_Size() int {
	return xxx_messageInfo_DomainLimitsType.Size(m)
}
func (m *DomainLimitsType) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainLimitsType.DiscardUnknown(m)
}

var xxx_messageInfo_DomainLimitsType proto.InternalMessageInfo

func (m *DomainLimitsType) GetProjectLimit() int64 {
	if m != nil {
		return m.ProjectLimit
	}
	return 0
}

func (m *DomainLimitsType) GetSecurityGroupLimit() int64 {
	if m != nil {
		return m.SecurityGroupLimit
	}
	return 0
}

func (m *DomainLimitsType) GetVirtualNetworkLimit() int64 {
	if m != nil {
		return m.VirtualNetworkLimit
	}
	return 0
}

type DriverInfo struct {
	DeployKernel  string `protobuf:"bytes,1,opt,name=deploy_kernel,json=deployKernel,proto3" json:"deploy_kernel,omitempty" yaml:"deploy_kernel,omitempty"`
	DeployRamdisk string `protobuf:"bytes,2,opt,name=deploy_ramdisk,json=deployRamdisk,proto3" json:"deploy_ramdisk,omitempty" yaml:"deploy_ramdisk,omitempty"`
	IpmiAddress   string `protobuf:"bytes,3,opt,name=ipmi_address,json=ipmiAddress,proto3" json:"ipmi_address,omitempty" yaml:"ipmi_address,omitempty"`
	IpmiPassword  string `protobuf:"bytes,4,opt,name=ipmi_password,json=ipmiPassword,proto3" json:"ipmi_password,omitempty" yaml:"ipmi_password,omitempty"`
	IpmiPort      string `protobuf:"bytes,5,opt,name=ipmi_port,json=ipmiPort,proto3" json:"ipmi_port,omitempty" yaml:"ipmi_port,omitempty"`
	IpmiUsername  string `protobuf:"bytes,6,opt,name=ipmi_username,json=ipmiUsername,proto3" json:"ipmi_username,omitempty" yaml:"ipmi_username,omitempty"`
}

func (m *DriverInfo) Reset()      { *m = DriverInfo{} }
func (*DriverInfo) ProtoMessage() {}
func (*DriverInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{449}
}
func (m *DriverInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DriverInfo.Unmarshal(m, b)
}
func (m *DriverInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DriverInfo.Marshal(b, m, deterministic)
}
func (m *DriverInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverInfo.Merge(m, src)
}
func (m *DriverInfo) XXX_Size() int {
	return xxx_messageInfo_DriverInfo.Size(m)
}
func (m *DriverInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DriverInfo proto.InternalMessageInfo

func (m *DriverInfo) GetDeployKernel() string {
	if m != nil {
		return m.DeployKernel
	}
	return ""
}

func (m *DriverInfo) GetDeployRamdisk() string {
	if m != nil {
		return m.DeployRamdisk
	}
	return ""
}

func (m *DriverInfo) GetIpmiAddress() string {
	if m != nil {
		return m.IpmiAddress
	}
	return ""
}

func (m *DriverInfo) GetIpmiPassword() string {
	if m != nil {
		return m.IpmiPassword
	}
	return ""
}

func (m *DriverInfo) GetIpmiPort() string {
	if m != nil {
		return m.IpmiPort
	}
	return ""
}

func (m *DriverInfo) GetIpmiUsername() string {
	if m != nil {
		return m.IpmiUsername
	}
	return ""
}

type ESXIHostInfo struct {
	Cluster       string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty" yaml:"cluster,omitempty"`
	Datacenter    string `protobuf:"bytes,2,opt,name=datacenter,proto3" json:"datacenter,omitempty" yaml:"datacenter,omitempty"`
	Datastore     string `protobuf:"bytes,3,opt,name=datastore,proto3" json:"datastore,omitempty" yaml:"datastore,omitempty"`
	EsxiName      string `protobuf:"bytes,4,opt,name=esxi_name,json=esxiName,proto3" json:"esxi_name,omitempty" yaml:"esxi_name,omitempty"`
	Mac           string `protobuf:"bytes,5,opt,name=mac,proto3" json:"mac,omitempty" yaml:"mac,omitempty"`
	Password      string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty" yaml:"password,omitempty"`
	Username      string `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty" yaml:"username,omitempty"`
	VcenterServer string `protobuf:"bytes,8,opt,name=vcenter_server,json=vcenterServer,proto3" json:"vcenter_server,omitempty" yaml:"vcenter_server,omitempty"`
}

func (m *ESXIHostInfo) Reset()      { *m = ESXIHostInfo{} }
func (*ESXIHostInfo) ProtoMessage() {}
func (*ESXIHostInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{450}
}
func (m *ESXIHostInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESXIHostInfo.Unmarshal(m, b)
}
func (m *ESXIHostInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESXIHostInfo.Marshal(b, m, deterministic)
}
func (m *ESXIHostInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESXIHostInfo.Merge(m, src)
}
func (m *ESXIHostInfo) XXX_Size() int {
	return xxx_messageInfo_ESXIHostInfo.Size(m)
}
func (m *ESXIHostInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ESXIHostInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ESXIHostInfo proto.InternalMessageInfo

func (m *ESXIHostInfo) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ESXIHostInfo) GetDatacenter() string {
	if m != nil {
		return m.Datacenter
	}
	return ""
}

func (m *ESXIHostInfo) GetDatastore() string {
	if m != nil {
		return m.Datastore
	}
	return ""
}

func (m *ESXIHostInfo) GetEsxiName() string {
	if m != nil {
		return m.EsxiName
	}
	return ""
}

func (m *ESXIHostInfo) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *ESXIHostInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ESXIHostInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ESXIHostInfo) GetVcenterServer() string {
	if m != nil {
		return m.VcenterServer
	}
	return ""
}

type ESXIProperties struct {
	DVSID   string `protobuf:"bytes,1,opt,name=dvs_id,json=dvsId,proto3" json:"dvs_id,omitempty" yaml:"dvs_id,omitempty"`
	DVSName string `protobuf:"bytes,2,opt,name=dvs_name,json=dvsName,proto3" json:"dvs_name,omitempty" yaml:"dvs_name,omitempty"`
}

func (m *ESXIProperties) Reset()      { *m = ESXIProperties{} }
func (*ESXIProperties) ProtoMessage() {}
func (*ESXIProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{451}
}
func (m *ESXIProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ESXIProperties.Unmarshal(m, b)
}
func (m *ESXIProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ESXIProperties.Marshal(b, m, deterministic)
}
func (m *ESXIProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ESXIProperties.Merge(m, src)
}
func (m *ESXIProperties) XXX_Size() int {
	return xxx_messageInfo_ESXIProperties.Size(m)
}
func (m *ESXIProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_ESXIProperties.DiscardUnknown(m)
}

var xxx_messageInfo_ESXIProperties proto.InternalMessageInfo

func (m *ESXIProperties) GetDVSID() string {
	if m != nil {
		return m.DVSID
	}
	return ""
}

func (m *ESXIProperties) GetDVSName() string {
	if m != nil {
		return m.DVSName
	}
	return ""
}

type EcmpHashingIncludeFields struct {
	DestinationIP     bool `protobuf:"varint,1,opt,name=destination_ip,json=destinationIp,proto3" json:"destination_ip,omitempty" yaml:"destination_ip,omitempty"`
	DestinationPort   bool `protobuf:"varint,2,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty" yaml:"destination_port,omitempty"`
	HashingConfigured bool `protobuf:"varint,3,opt,name=hashing_configured,json=hashingConfigured,proto3" json:"hashing_configured,omitempty" yaml:"hashing_configured,omitempty"`
	IPProtocol        bool `protobuf:"varint,4,opt,name=ip_protocol,json=ipProtocol,proto3" json:"ip_protocol,omitempty" yaml:"ip_protocol,omitempty"`
	SourceIP          bool `protobuf:"varint,5,opt,name=source_ip,json=sourceIp,proto3" json:"source_ip,omitempty" yaml:"source_ip,omitempty"`
	SourcePort        bool `protobuf:"varint,6,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty" yaml:"source_port,omitempty"`
}

func (m *EcmpHashingIncludeFields) Reset()      { *m = EcmpHashingIncludeFields{} }
func (*EcmpHashingIncludeFields) ProtoMessage() {}
func (*EcmpHashingIncludeFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{452}
}
func (m *EcmpHashingIncludeFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EcmpHashingIncludeFields.Unmarshal(m, b)
}
func (m *EcmpHashingIncludeFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EcmpHashingIncludeFields.Marshal(b, m, deterministic)
}
func (m *EcmpHashingIncludeFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EcmpHashingIncludeFields.Merge(m, src)
}
func (m *EcmpHashingIncludeFields) XXX_Size() int {
	return xxx_messageInfo_EcmpHashingIncludeFields.Size(m)
}
func (m *EcmpHashingIncludeFields) XXX_DiscardUnknown() {
	xxx_messageInfo_EcmpHashingIncludeFields.DiscardUnknown(m)
}

var xxx_messageInfo_EcmpHashingIncludeFields proto.InternalMessageInfo

func (m *EcmpHashingIncludeFields) GetDestinationIP() bool {
	if m != nil {
		return m.DestinationIP
	}
	return false
}

func (m *EcmpHashingIncludeFields) GetDestinationPort() bool {
	if m != nil {
		return m.DestinationPort
	}
	return false
}

func (m *EcmpHashingIncludeFields) GetHashingConfigured() bool {
	if m != nil {
		return m.HashingConfigured
	}
	return false
}

func (m *EcmpHashingIncludeFields) GetIPProtocol() bool {
	if m != nil {
		return m.IPProtocol
	}
	return false
}

func (m *EcmpHashingIncludeFields) GetSourceIP() bool {
	if m != nil {
		return m.SourceIP
	}
	return false
}

func (m *EcmpHashingIncludeFields) GetSourcePort() bool {
	if m != nil {
		return m.SourcePort
	}
	return false
}

type EnabledInterfaceParams struct {
	Name                     string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	StatsCollectionFrequency *StatsCollectionFrequency `protobuf:"bytes,2,opt,name=stats_collection_frequency,json=statsCollectionFrequency,proto3" json:"stats_collection_frequency,omitempty" yaml:"stats_collection_frequency,omitempty"`
}

func (m *EnabledInterfaceParams) Reset()      { *m = EnabledInterfaceParams{} }
func (*EnabledInterfaceParams) ProtoMessage() {}
func (*EnabledInterfaceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{453}
}
func (m *EnabledInterfaceParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnabledInterfaceParams.Unmarshal(m, b)
}
func (m *EnabledInterfaceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnabledInterfaceParams.Marshal(b, m, deterministic)
}
func (m *EnabledInterfaceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnabledInterfaceParams.Merge(m, src)
}
func (m *EnabledInterfaceParams) XXX_Size() int {
	return xxx_messageInfo_EnabledInterfaceParams.Size(m)
}
func (m *EnabledInterfaceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_EnabledInterfaceParams.DiscardUnknown(m)
}

var xxx_messageInfo_EnabledInterfaceParams proto.InternalMessageInfo

func (m *EnabledInterfaceParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnabledInterfaceParams) GetStatsCollectionFrequency() *StatsCollectionFrequency {
	if m != nil {
		return m.StatsCollectionFrequency
	}
	return nil
}

type EncapsulationPrioritiesType struct {
	Encapsulation []string `protobuf:"bytes,1,rep,name=encapsulation,proto3" json:"encapsulation,omitempty" yaml:"encapsulation,omitempty"`
}

func (m *EncapsulationPrioritiesType) Reset()      { *m = EncapsulationPrioritiesType{} }
func (*EncapsulationPrioritiesType) ProtoMessage() {}
func (*EncapsulationPrioritiesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{454}
}
func (m *EncapsulationPrioritiesType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncapsulationPrioritiesType.Unmarshal(m, b)
}
func (m *EncapsulationPrioritiesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncapsulationPrioritiesType.Marshal(b, m, deterministic)
}
func (m *EncapsulationPrioritiesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncapsulationPrioritiesType.Merge(m, src)
}
func (m *EncapsulationPrioritiesType) XXX_Size() int {
	return xxx_messageInfo_EncapsulationPrioritiesType.Size(m)
}
func (m *EncapsulationPrioritiesType) XXX_DiscardUnknown() {
	xxx_messageInfo_EncapsulationPrioritiesType.DiscardUnknown(m)
}

var xxx_messageInfo_EncapsulationPrioritiesType proto.InternalMessageInfo

func (m *EncapsulationPrioritiesType) GetEncapsulation() []string {
	if m != nil {
		return m.Encapsulation
	}
	return nil
}

type EncryptionTunnelEndpoint struct {
	TunnelRemoteIPAddress string `protobuf:"bytes,1,opt,name=tunnel_remote_ip_address,json=tunnelRemoteIpAddress,proto3" json:"tunnel_remote_ip_address,omitempty" yaml:"tunnel_remote_ip_address,omitempty"`
}

func (m *EncryptionTunnelEndpoint) Reset()      { *m = EncryptionTunnelEndpoint{} }
func (*EncryptionTunnelEndpoint) ProtoMessage() {}
func (*EncryptionTunnelEndpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{455}
}
func (m *EncryptionTunnelEndpoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncryptionTunnelEndpoint.Unmarshal(m, b)
}
func (m *EncryptionTunnelEndpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncryptionTunnelEndpoint.Marshal(b, m, deterministic)
}
func (m *EncryptionTunnelEndpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptionTunnelEndpoint.Merge(m, src)
}
func (m *EncryptionTunnelEndpoint) XXX_Size() int {
	return xxx_messageInfo_EncryptionTunnelEndpoint.Size(m)
}
func (m *EncryptionTunnelEndpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptionTunnelEndpoint.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptionTunnelEndpoint proto.InternalMessageInfo

func (m *EncryptionTunnelEndpoint) GetTunnelRemoteIPAddress() string {
	if m != nil {
		return m.TunnelRemoteIPAddress
	}
	return ""
}

type EncryptionTunnelEndpointList struct {
	Endpoint []*EncryptionTunnelEndpoint `protobuf:"bytes,1,rep,name=endpoint,proto3" json:"endpoint,omitempty" yaml:"endpoint,omitempty"`
}

func (m *EncryptionTunnelEndpointList) Reset()      { *m = EncryptionTunnelEndpointList{} }
func (*EncryptionTunnelEndpointList) ProtoMessage() {}
func (*EncryptionTunnelEndpointList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{456}
}
func (m *EncryptionTunnelEndpointList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncryptionTunnelEndpointList.Unmarshal(m, b)
}
func (m *EncryptionTunnelEndpointList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncryptionTunnelEndpointList.Marshal(b, m, deterministic)
}
func (m *EncryptionTunnelEndpointList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptionTunnelEndpointList.Merge(m, src)
}
func (m *EncryptionTunnelEndpointList) XXX_Size() int {
	return xxx_messageInfo_EncryptionTunnelEndpointList.Size(m)
}
func (m *EncryptionTunnelEndpointList) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptionTunnelEndpointList.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptionTunnelEndpointList proto.InternalMessageInfo

func (m *EncryptionTunnelEndpointList) GetEndpoint() []*EncryptionTunnelEndpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

type ExecutableInfoListType struct {
	ExecutableInfo []*ExecutableInfoType `protobuf:"bytes,1,rep,name=executable_info,json=executableInfo,proto3" json:"executable_info,omitempty" yaml:"executable_info,omitempty"`
}

func (m *ExecutableInfoListType) Reset()      { *m = ExecutableInfoListType{} }
func (*ExecutableInfoListType) ProtoMessage() {}
func (*ExecutableInfoListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{457}
}
func (m *ExecutableInfoListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecutableInfoListType.Unmarshal(m, b)
}
func (m *ExecutableInfoListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecutableInfoListType.Marshal(b, m, deterministic)
}
func (m *ExecutableInfoListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutableInfoListType.Merge(m, src)
}
func (m *ExecutableInfoListType) XXX_Size() int {
	return xxx_messageInfo_ExecutableInfoListType.Size(m)
}
func (m *ExecutableInfoListType) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutableInfoListType.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutableInfoListType proto.InternalMessageInfo

func (m *ExecutableInfoListType) GetExecutableInfo() []*ExecutableInfoType {
	if m != nil {
		return m.ExecutableInfo
	}
	return nil
}

type ExecutableInfoType struct {
	ExecutableArgs         string `protobuf:"bytes,1,opt,name=executable_args,json=executableArgs,proto3" json:"executable_args,omitempty" yaml:"executable_args,omitempty"`
	ExecutablePath         string `protobuf:"bytes,2,opt,name=executable_path,json=executablePath,proto3" json:"executable_path,omitempty" yaml:"executable_path,omitempty"`
	JobCompletionWeightage int64  `protobuf:"varint,3,opt,name=job_completion_weightage,json=jobCompletionWeightage,proto3" json:"job_completion_weightage,omitempty" yaml:"job_completion_weightage,omitempty"`
}

func (m *ExecutableInfoType) Reset()      { *m = ExecutableInfoType{} }
func (*ExecutableInfoType) ProtoMessage() {}
func (*ExecutableInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{458}
}
func (m *ExecutableInfoType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecutableInfoType.Unmarshal(m, b)
}
func (m *ExecutableInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecutableInfoType.Marshal(b, m, deterministic)
}
func (m *ExecutableInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutableInfoType.Merge(m, src)
}
func (m *ExecutableInfoType) XXX_Size() int {
	return xxx_messageInfo_ExecutableInfoType.Size(m)
}
func (m *ExecutableInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutableInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutableInfoType proto.InternalMessageInfo

func (m *ExecutableInfoType) GetExecutableArgs() string {
	if m != nil {
		return m.ExecutableArgs
	}
	return ""
}

func (m *ExecutableInfoType) GetExecutablePath() string {
	if m != nil {
		return m.ExecutablePath
	}
	return ""
}

func (m *ExecutableInfoType) GetJobCompletionWeightage() int64 {
	if m != nil {
		return m.JobCompletionWeightage
	}
	return 0
}

type ExtCommunityListType struct {
	Community []string `protobuf:"bytes,1,rep,name=community,proto3" json:"community,omitempty" yaml:"community,omitempty"`
}

func (m *ExtCommunityListType) Reset()      { *m = ExtCommunityListType{} }
func (*ExtCommunityListType) ProtoMessage() {}
func (*ExtCommunityListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{459}
}
func (m *ExtCommunityListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtCommunityListType.Unmarshal(m, b)
}
func (m *ExtCommunityListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtCommunityListType.Marshal(b, m, deterministic)
}
func (m *ExtCommunityListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtCommunityListType.Merge(m, src)
}
func (m *ExtCommunityListType) XXX_Size() int {
	return xxx_messageInfo_ExtCommunityListType.Size(m)
}
func (m *ExtCommunityListType) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtCommunityListType.DiscardUnknown(m)
}

var xxx_messageInfo_ExtCommunityListType proto.InternalMessageInfo

func (m *ExtCommunityListType) GetCommunity() []string {
	if m != nil {
		return m.Community
	}
	return nil
}

type FabricNetworkTag struct {
	NetworkType string `protobuf:"bytes,1,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty" yaml:"network_type,omitempty"`
}

func (m *FabricNetworkTag) Reset()      { *m = FabricNetworkTag{} }
func (*FabricNetworkTag) ProtoMessage() {}
func (*FabricNetworkTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{460}
}
func (m *FabricNetworkTag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FabricNetworkTag.Unmarshal(m, b)
}
func (m *FabricNetworkTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FabricNetworkTag.Marshal(b, m, deterministic)
}
func (m *FabricNetworkTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FabricNetworkTag.Merge(m, src)
}
func (m *FabricNetworkTag) XXX_Size() int {
	return xxx_messageInfo_FabricNetworkTag.Size(m)
}
func (m *FabricNetworkTag) XXX_DiscardUnknown() {
	xxx_messageInfo_FabricNetworkTag.DiscardUnknown(m)
}

var xxx_messageInfo_FabricNetworkTag proto.InternalMessageInfo

func (m *FabricNetworkTag) GetNetworkType() string {
	if m != nil {
		return m.NetworkType
	}
	return ""
}

type FatFlowProtocols struct {
	FatFlowProtocol []*ProtocolType `protobuf:"bytes,1,rep,name=fat_flow_protocol,json=fatFlowProtocol,proto3" json:"fat_flow_protocol,omitempty" yaml:"fat_flow_protocol,omitempty"`
}

func (m *FatFlowProtocols) Reset()      { *m = FatFlowProtocols{} }
func (*FatFlowProtocols) ProtoMessage() {}
func (*FatFlowProtocols) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{461}
}
func (m *FatFlowProtocols) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FatFlowProtocols.Unmarshal(m, b)
}
func (m *FatFlowProtocols) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FatFlowProtocols.Marshal(b, m, deterministic)
}
func (m *FatFlowProtocols) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FatFlowProtocols.Merge(m, src)
}
func (m *FatFlowProtocols) XXX_Size() int {
	return xxx_messageInfo_FatFlowProtocols.Size(m)
}
func (m *FatFlowProtocols) XXX_DiscardUnknown() {
	xxx_messageInfo_FatFlowProtocols.DiscardUnknown(m)
}

var xxx_messageInfo_FatFlowProtocols proto.InternalMessageInfo

func (m *FatFlowProtocols) GetFatFlowProtocol() []*ProtocolType {
	if m != nil {
		return m.FatFlowProtocol
	}
	return nil
}

type FieldNamesList struct {
	FieldNames []string `protobuf:"bytes,1,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty" yaml:"field_names,omitempty"`
}

func (m *FieldNamesList) Reset()      { *m = FieldNamesList{} }
func (*FieldNamesList) ProtoMessage() {}
func (*FieldNamesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{462}
}
func (m *FieldNamesList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldNamesList.Unmarshal(m, b)
}
func (m *FieldNamesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldNamesList.Marshal(b, m, deterministic)
}
func (m *FieldNamesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldNamesList.Merge(m, src)
}
func (m *FieldNamesList) XXX_Size() int {
	return xxx_messageInfo_FieldNamesList.Size(m)
}
func (m *FieldNamesList) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldNamesList.DiscardUnknown(m)
}

var xxx_messageInfo_FieldNamesList proto.InternalMessageInfo

func (m *FieldNamesList) GetFieldNames() []string {
	if m != nil {
		return m.FieldNames
	}
	return nil
}

type FirewallRuleEndpointType struct {
	AddressGroup   string      `protobuf:"bytes,1,opt,name=address_group,json=addressGroup,proto3" json:"address_group,omitempty" yaml:"address_group,omitempty"`
	Any            bool        `protobuf:"varint,2,opt,name=any,proto3" json:"any,omitempty" yaml:"any,omitempty"`
	Subnet         *SubnetType `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty" yaml:"subnet,omitempty"`
	TagIds         []int64     `protobuf:"varint,4,rep,packed,name=tag_ids,json=tagIds,proto3" json:"tag_ids,omitempty" yaml:"tag_ids,omitempty"`
	Tags           []string    `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" yaml:"tags,omitempty"`
	VirtualNetwork string      `protobuf:"bytes,6,opt,name=virtual_network,json=virtualNetwork,proto3" json:"virtual_network,omitempty" yaml:"virtual_network,omitempty"`
}

func (m *FirewallRuleEndpointType) Reset()      { *m = FirewallRuleEndpointType{} }
func (*FirewallRuleEndpointType) ProtoMessage() {}
func (*FirewallRuleEndpointType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{463}
}
func (m *FirewallRuleEndpointType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallRuleEndpointType.Unmarshal(m, b)
}
func (m *FirewallRuleEndpointType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallRuleEndpointType.Marshal(b, m, deterministic)
}
func (m *FirewallRuleEndpointType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallRuleEndpointType.Merge(m, src)
}
func (m *FirewallRuleEndpointType) XXX_Size() int {
	return xxx_messageInfo_FirewallRuleEndpointType.Size(m)
}
func (m *FirewallRuleEndpointType) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallRuleEndpointType.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallRuleEndpointType proto.InternalMessageInfo

func (m *FirewallRuleEndpointType) GetAddressGroup() string {
	if m != nil {
		return m.AddressGroup
	}
	return ""
}

func (m *FirewallRuleEndpointType) GetAny() bool {
	if m != nil {
		return m.Any
	}
	return false
}

func (m *FirewallRuleEndpointType) GetSubnet() *SubnetType {
	if m != nil {
		return m.Subnet
	}
	return nil
}

func (m *FirewallRuleEndpointType) GetTagIds() []int64 {
	if m != nil {
		return m.TagIds
	}
	return nil
}

func (m *FirewallRuleEndpointType) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *FirewallRuleEndpointType) GetVirtualNetwork() string {
	if m != nil {
		return m.VirtualNetwork
	}
	return ""
}

type FirewallRuleMatchTagsType struct {
	TagList []string `protobuf:"bytes,1,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty" yaml:"tag_list,omitempty"`
}

func (m *FirewallRuleMatchTagsType) Reset()      { *m = FirewallRuleMatchTagsType{} }
func (*FirewallRuleMatchTagsType) ProtoMessage() {}
func (*FirewallRuleMatchTagsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{464}
}
func (m *FirewallRuleMatchTagsType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallRuleMatchTagsType.Unmarshal(m, b)
}
func (m *FirewallRuleMatchTagsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallRuleMatchTagsType.Marshal(b, m, deterministic)
}
func (m *FirewallRuleMatchTagsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallRuleMatchTagsType.Merge(m, src)
}
func (m *FirewallRuleMatchTagsType) XXX_Size() int {
	return xxx_messageInfo_FirewallRuleMatchTagsType.Size(m)
}
func (m *FirewallRuleMatchTagsType) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallRuleMatchTagsType.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallRuleMatchTagsType proto.InternalMessageInfo

func (m *FirewallRuleMatchTagsType) GetTagList() []string {
	if m != nil {
		return m.TagList
	}
	return nil
}

type FirewallRuleMatchTagsTypeIdList struct {
	TagType []int64 `protobuf:"varint,1,rep,packed,name=tag_type,json=tagType,proto3" json:"tag_type,omitempty" yaml:"tag_type,omitempty"`
}

func (m *FirewallRuleMatchTagsTypeIdList) Reset()      { *m = FirewallRuleMatchTagsTypeIdList{} }
func (*FirewallRuleMatchTagsTypeIdList) ProtoMessage() {}
func (*FirewallRuleMatchTagsTypeIdList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{465}
}
func (m *FirewallRuleMatchTagsTypeIdList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallRuleMatchTagsTypeIdList.Unmarshal(m, b)
}
func (m *FirewallRuleMatchTagsTypeIdList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallRuleMatchTagsTypeIdList.Marshal(b, m, deterministic)
}
func (m *FirewallRuleMatchTagsTypeIdList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallRuleMatchTagsTypeIdList.Merge(m, src)
}
func (m *FirewallRuleMatchTagsTypeIdList) XXX_Size() int {
	return xxx_messageInfo_FirewallRuleMatchTagsTypeIdList.Size(m)
}
func (m *FirewallRuleMatchTagsTypeIdList) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallRuleMatchTagsTypeIdList.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallRuleMatchTagsTypeIdList proto.InternalMessageInfo

func (m *FirewallRuleMatchTagsTypeIdList) GetTagType() []int64 {
	if m != nil {
		return m.TagType
	}
	return nil
}

type FirewallSequence struct {
	Sequence string `protobuf:"bytes,1,opt,name=sequence,proto3" json:"sequence,omitempty" yaml:"sequence,omitempty"`
}

func (m *FirewallSequence) Reset()      { *m = FirewallSequence{} }
func (*FirewallSequence) ProtoMessage() {}
func (*FirewallSequence) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{466}
}
func (m *FirewallSequence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallSequence.Unmarshal(m, b)
}
func (m *FirewallSequence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallSequence.Marshal(b, m, deterministic)
}
func (m *FirewallSequence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallSequence.Merge(m, src)
}
func (m *FirewallSequence) XXX_Size() int {
	return xxx_messageInfo_FirewallSequence.Size(m)
}
func (m *FirewallSequence) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallSequence.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallSequence proto.InternalMessageInfo

func (m *FirewallSequence) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

type FirewallServiceGroupType struct {
	FirewallService []*FirewallServiceType `protobuf:"bytes,1,rep,name=firewall_service,json=firewallService,proto3" json:"firewall_service,omitempty" yaml:"firewall_service,omitempty"`
}

func (m *FirewallServiceGroupType) Reset()      { *m = FirewallServiceGroupType{} }
func (*FirewallServiceGroupType) ProtoMessage() {}
func (*FirewallServiceGroupType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{467}
}
func (m *FirewallServiceGroupType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallServiceGroupType.Unmarshal(m, b)
}
func (m *FirewallServiceGroupType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallServiceGroupType.Marshal(b, m, deterministic)
}
func (m *FirewallServiceGroupType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallServiceGroupType.Merge(m, src)
}
func (m *FirewallServiceGroupType) XXX_Size() int {
	return xxx_messageInfo_FirewallServiceGroupType.Size(m)
}
func (m *FirewallServiceGroupType) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallServiceGroupType.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallServiceGroupType proto.InternalMessageInfo

func (m *FirewallServiceGroupType) GetFirewallService() []*FirewallServiceType {
	if m != nil {
		return m.FirewallService
	}
	return nil
}

type FirewallServiceType struct {
	DSTPorts   *PortType `protobuf:"bytes,1,opt,name=dst_ports,json=dstPorts,proto3" json:"dst_ports,omitempty" yaml:"dst_ports,omitempty"`
	Protocol   string    `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty" yaml:"protocol,omitempty"`
	ProtocolID int64     `protobuf:"varint,3,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty" yaml:"protocol_id,omitempty"`
	SRCPorts   *PortType `protobuf:"bytes,4,opt,name=src_ports,json=srcPorts,proto3" json:"src_ports,omitempty" yaml:"src_ports,omitempty"`
}

func (m *FirewallServiceType) Reset()      { *m = FirewallServiceType{} }
func (*FirewallServiceType) ProtoMessage() {}
func (*FirewallServiceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{468}
}
func (m *FirewallServiceType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallServiceType.Unmarshal(m, b)
}
func (m *FirewallServiceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallServiceType.Marshal(b, m, deterministic)
}
func (m *FirewallServiceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallServiceType.Merge(m, src)
}
func (m *FirewallServiceType) XXX_Size() int {
	return xxx_messageInfo_FirewallServiceType.Size(m)
}
func (m *FirewallServiceType) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallServiceType.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallServiceType proto.InternalMessageInfo

func (m *FirewallServiceType) GetDSTPorts() *PortType {
	if m != nil {
		return m.DSTPorts
	}
	return nil
}

func (m *FirewallServiceType) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *FirewallServiceType) GetProtocolID() int64 {
	if m != nil {
		return m.ProtocolID
	}
	return 0
}

func (m *FirewallServiceType) GetSRCPorts() *PortType {
	if m != nil {
		return m.SRCPorts
	}
	return nil
}

type FloatingIpPoolSubnetType struct {
	SubnetUUID []string `protobuf:"bytes,1,rep,name=subnet_uuid,json=subnetUuid,proto3" json:"subnet_uuid,omitempty" yaml:"subnet_uuid,omitempty"`
}

func (m *FloatingIpPoolSubnetType) Reset()      { *m = FloatingIpPoolSubnetType{} }
func (*FloatingIpPoolSubnetType) ProtoMessage() {}
func (*FloatingIpPoolSubnetType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{469}
}
func (m *FloatingIpPoolSubnetType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FloatingIpPoolSubnetType.Unmarshal(m, b)
}
func (m *FloatingIpPoolSubnetType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FloatingIpPoolSubnetType.Marshal(b, m, deterministic)
}
func (m *FloatingIpPoolSubnetType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FloatingIpPoolSubnetType.Merge(m, src)
}
func (m *FloatingIpPoolSubnetType) XXX_Size() int {
	return xxx_messageInfo_FloatingIpPoolSubnetType.Size(m)
}
func (m *FloatingIpPoolSubnetType) XXX_DiscardUnknown() {
	xxx_messageInfo_FloatingIpPoolSubnetType.DiscardUnknown(m)
}

var xxx_messageInfo_FloatingIpPoolSubnetType proto.InternalMessageInfo

func (m *FloatingIpPoolSubnetType) GetSubnetUUID() []string {
	if m != nil {
		return m.SubnetUUID
	}
	return nil
}

type FlowAgingTimeout struct {
	Port             int64  `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty" yaml:"port,omitempty"`
	Protocol         string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty" yaml:"protocol,omitempty"`
	TimeoutInSeconds int64  `protobuf:"varint,3,opt,name=timeout_in_seconds,json=timeoutInSeconds,proto3" json:"timeout_in_seconds,omitempty" yaml:"timeout_in_seconds,omitempty"`
}

func (m *FlowAgingTimeout) Reset()      { *m = FlowAgingTimeout{} }
func (*FlowAgingTimeout) ProtoMessage() {}
func (*FlowAgingTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{470}
}
func (m *FlowAgingTimeout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowAgingTimeout.Unmarshal(m, b)
}
func (m *FlowAgingTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowAgingTimeout.Marshal(b, m, deterministic)
}
func (m *FlowAgingTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowAgingTimeout.Merge(m, src)
}
func (m *FlowAgingTimeout) XXX_Size() int {
	return xxx_messageInfo_FlowAgingTimeout.Size(m)
}
func (m *FlowAgingTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowAgingTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_FlowAgingTimeout proto.InternalMessageInfo

func (m *FlowAgingTimeout) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *FlowAgingTimeout) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *FlowAgingTimeout) GetTimeoutInSeconds() int64 {
	if m != nil {
		return m.TimeoutInSeconds
	}
	return 0
}

type FlowAgingTimeoutList struct {
	FlowAgingTimeout []*FlowAgingTimeout `protobuf:"bytes,1,rep,name=flow_aging_timeout,json=flowAgingTimeout,proto3" json:"flow_aging_timeout,omitempty" yaml:"flow_aging_timeout,omitempty"`
}

func (m *FlowAgingTimeoutList) Reset()      { *m = FlowAgingTimeoutList{} }
func (*FlowAgingTimeoutList) ProtoMessage() {}
func (*FlowAgingTimeoutList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{471}
}
func (m *FlowAgingTimeoutList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlowAgingTimeoutList.Unmarshal(m, b)
}
func (m *FlowAgingTimeoutList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlowAgingTimeoutList.Marshal(b, m, deterministic)
}
func (m *FlowAgingTimeoutList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlowAgingTimeoutList.Merge(m, src)
}
func (m *FlowAgingTimeoutList) XXX_Size() int {
	return xxx_messageInfo_FlowAgingTimeoutList.Size(m)
}
func (m *FlowAgingTimeoutList) XXX_DiscardUnknown() {
	xxx_messageInfo_FlowAgingTimeoutList.DiscardUnknown(m)
}

var xxx_messageInfo_FlowAgingTimeoutList proto.InternalMessageInfo

func (m *FlowAgingTimeoutList) GetFlowAgingTimeout() []*FlowAgingTimeout {
	if m != nil {
		return m.FlowAgingTimeout
	}
	return nil
}

type GracefulRestartParametersType struct {
	BGPHelperEnable      bool  `protobuf:"varint,1,opt,name=bgp_helper_enable,json=bgpHelperEnable,proto3" json:"bgp_helper_enable,omitempty" yaml:"bgp_helper_enable,omitempty"`
	Enable               bool  `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty" yaml:"enable,omitempty"`
	EndOfRibTimeout      int64 `protobuf:"varint,3,opt,name=end_of_rib_timeout,json=endOfRibTimeout,proto3" json:"end_of_rib_timeout,omitempty" yaml:"end_of_rib_timeout,omitempty"`
	LongLivedRestartTime int64 `protobuf:"varint,4,opt,name=long_lived_restart_time,json=longLivedRestartTime,proto3" json:"long_lived_restart_time,omitempty" yaml:"long_lived_restart_time,omitempty"`
	RestartTime          int64 `protobuf:"varint,5,opt,name=restart_time,json=restartTime,proto3" json:"restart_time,omitempty" yaml:"restart_time,omitempty"`
	XMPPHelperEnable     bool  `protobuf:"varint,6,opt,name=xmpp_helper_enable,json=xmppHelperEnable,proto3" json:"xmpp_helper_enable,omitempty" yaml:"xmpp_helper_enable,omitempty"`
}

func (m *GracefulRestartParametersType) Reset()      { *m = GracefulRestartParametersType{} }
func (*GracefulRestartParametersType) ProtoMessage() {}
func (*GracefulRestartParametersType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{472}
}
func (m *GracefulRestartParametersType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GracefulRestartParametersType.Unmarshal(m, b)
}
func (m *GracefulRestartParametersType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GracefulRestartParametersType.Marshal(b, m, deterministic)
}
func (m *GracefulRestartParametersType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GracefulRestartParametersType.Merge(m, src)
}
func (m *GracefulRestartParametersType) XXX_Size() int {
	return xxx_messageInfo_GracefulRestartParametersType.Size(m)
}
func (m *GracefulRestartParametersType) XXX_DiscardUnknown() {
	xxx_messageInfo_GracefulRestartParametersType.DiscardUnknown(m)
}

var xxx_messageInfo_GracefulRestartParametersType proto.InternalMessageInfo

func (m *GracefulRestartParametersType) GetBGPHelperEnable() bool {
	if m != nil {
		return m.BGPHelperEnable
	}
	return false
}

func (m *GracefulRestartParametersType) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *GracefulRestartParametersType) GetEndOfRibTimeout() int64 {
	if m != nil {
		return m.EndOfRibTimeout
	}
	return 0
}

func (m *GracefulRestartParametersType) GetLongLivedRestartTime() int64 {
	if m != nil {
		return m.LongLivedRestartTime
	}
	return 0
}

func (m *GracefulRestartParametersType) GetRestartTime() int64 {
	if m != nil {
		return m.RestartTime
	}
	return 0
}

func (m *GracefulRestartParametersType) GetXMPPHelperEnable() bool {
	if m != nil {
		return m.XMPPHelperEnable
	}
	return false
}

type IdPermsType struct {
	Created      string    `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty" yaml:"created,omitempty"`
	Creator      string    `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator,omitempty"`
	Description  string    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" yaml:"description,omitempty"`
	Enable       bool      `protobuf:"varint,4,opt,name=enable,proto3" json:"enable,omitempty" yaml:"enable,omitempty"`
	LastModified string    `protobuf:"bytes,5,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty" yaml:"last_modified,omitempty"`
	Permissions  *PermType `protobuf:"bytes,6,opt,name=permissions,proto3" json:"permissions,omitempty" yaml:"permissions,omitempty"`
	UserVisible  bool      `protobuf:"varint,7,opt,name=user_visible,json=userVisible,proto3" json:"user_visible,omitempty" yaml:"user_visible,omitempty"`
	UUID         *UuidType `protobuf:"bytes,8,opt,name=uuid,proto3" json:"uuid,omitempty" yaml:"uuid,omitempty"`
}

func (m *IdPermsType) Reset()      { *m = IdPermsType{} }
func (*IdPermsType) ProtoMessage() {}
func (*IdPermsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{473}
}
func (m *IdPermsType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdPermsType.Unmarshal(m, b)
}
func (m *IdPermsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdPermsType.Marshal(b, m, deterministic)
}
func (m *IdPermsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdPermsType.Merge(m, src)
}
func (m *IdPermsType) XXX_Size() int {
	return xxx_messageInfo_IdPermsType.Size(m)
}
func (m *IdPermsType) XXX_DiscardUnknown() {
	xxx_messageInfo_IdPermsType.DiscardUnknown(m)
}

var xxx_messageInfo_IdPermsType proto.InternalMessageInfo

func (m *IdPermsType) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *IdPermsType) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *IdPermsType) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *IdPermsType) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *IdPermsType) GetLastModified() string {
	if m != nil {
		return m.LastModified
	}
	return ""
}

func (m *IdPermsType) GetPermissions() *PermType {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *IdPermsType) GetUserVisible() bool {
	if m != nil {
		return m.UserVisible
	}
	return false
}

func (m *IdPermsType) GetUUID() *UuidType {
	if m != nil {
		return m.UUID
	}
	return nil
}

type InstanceTargetType struct {
	ImportExport string `protobuf:"bytes,1,opt,name=import_export,json=importExport,proto3" json:"import_export,omitempty" yaml:"import_export,omitempty"`
}

func (m *InstanceTargetType) Reset()      { *m = InstanceTargetType{} }
func (*InstanceTargetType) ProtoMessage() {}
func (*InstanceTargetType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{474}
}
func (m *InstanceTargetType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceTargetType.Unmarshal(m, b)
}
func (m *InstanceTargetType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceTargetType.Marshal(b, m, deterministic)
}
func (m *InstanceTargetType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceTargetType.Merge(m, src)
}
func (m *InstanceTargetType) XXX_Size() int {
	return xxx_messageInfo_InstanceTargetType.Size(m)
}
func (m *InstanceTargetType) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceTargetType.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceTargetType proto.InternalMessageInfo

func (m *InstanceTargetType) GetImportExport() string {
	if m != nil {
		return m.ImportExport
	}
	return ""
}

type InterfaceMapType struct {
	PortInfo []*PortInfoType `protobuf:"bytes,1,rep,name=port_info,json=portInfo,proto3" json:"port_info,omitempty" yaml:"port_info,omitempty"`
}

func (m *InterfaceMapType) Reset()      { *m = InterfaceMapType{} }
func (*InterfaceMapType) ProtoMessage() {}
func (*InterfaceMapType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{475}
}
func (m *InterfaceMapType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InterfaceMapType.Unmarshal(m, b)
}
func (m *InterfaceMapType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InterfaceMapType.Marshal(b, m, deterministic)
}
func (m *InterfaceMapType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceMapType.Merge(m, src)
}
func (m *InterfaceMapType) XXX_Size() int {
	return xxx_messageInfo_InterfaceMapType.Size(m)
}
func (m *InterfaceMapType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceMapType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceMapType proto.InternalMessageInfo

func (m *InterfaceMapType) GetPortInfo() []*PortInfoType {
	if m != nil {
		return m.PortInfo
	}
	return nil
}

type InterfaceMirrorType struct {
	MirrorTo         *MirrorActionType `protobuf:"bytes,1,opt,name=mirror_to,json=mirrorTo,proto3" json:"mirror_to,omitempty" yaml:"mirror_to,omitempty"`
	TrafficDirection string            `protobuf:"bytes,2,opt,name=traffic_direction,json=trafficDirection,proto3" json:"traffic_direction,omitempty" yaml:"traffic_direction,omitempty"`
}

func (m *InterfaceMirrorType) Reset()      { *m = InterfaceMirrorType{} }
func (*InterfaceMirrorType) ProtoMessage() {}
func (*InterfaceMirrorType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{476}
}
func (m *InterfaceMirrorType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InterfaceMirrorType.Unmarshal(m, b)
}
func (m *InterfaceMirrorType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InterfaceMirrorType.Marshal(b, m, deterministic)
}
func (m *InterfaceMirrorType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceMirrorType.Merge(m, src)
}
func (m *InterfaceMirrorType) XXX_Size() int {
	return xxx_messageInfo_InterfaceMirrorType.Size(m)
}
func (m *InterfaceMirrorType) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceMirrorType.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceMirrorType proto.InternalMessageInfo

func (m *InterfaceMirrorType) GetMirrorTo() *MirrorActionType {
	if m != nil {
		return m.MirrorTo
	}
	return nil
}

func (m *InterfaceMirrorType) GetTrafficDirection() string {
	if m != nil {
		return m.TrafficDirection
	}
	return ""
}

type IpAddressesType struct {
	IPAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty" yaml:"ip_address,omitempty"`
}

func (m *IpAddressesType) Reset()      { *m = IpAddressesType{} }
func (*IpAddressesType) ProtoMessage() {}
func (*IpAddressesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{477}
}
func (m *IpAddressesType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpAddressesType.Unmarshal(m, b)
}
func (m *IpAddressesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpAddressesType.Marshal(b, m, deterministic)
}
func (m *IpAddressesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpAddressesType.Merge(m, src)
}
func (m *IpAddressesType) XXX_Size() int {
	return xxx_messageInfo_IpAddressesType.Size(m)
}
func (m *IpAddressesType) XXX_DiscardUnknown() {
	xxx_messageInfo_IpAddressesType.DiscardUnknown(m)
}

var xxx_messageInfo_IpAddressesType proto.InternalMessageInfo

func (m *IpAddressesType) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

type IpamDnsAddressType struct {
	TenantDNSServerAddress *IpAddressesType `protobuf:"bytes,1,opt,name=tenant_dns_server_address,json=tenantDnsServerAddress,proto3" json:"tenant_dns_server_address,omitempty" yaml:"tenant_dns_server_address,omitempty"`
	VirtualDNSServerName   string           `protobuf:"bytes,2,opt,name=virtual_dns_server_name,json=virtualDnsServerName,proto3" json:"virtual_dns_server_name,omitempty" yaml:"virtual_dns_server_name,omitempty"`
}

func (m *IpamDnsAddressType) Reset()      { *m = IpamDnsAddressType{} }
func (*IpamDnsAddressType) ProtoMessage() {}
func (*IpamDnsAddressType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{478}
}
func (m *IpamDnsAddressType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpamDnsAddressType.Unmarshal(m, b)
}
func (m *IpamDnsAddressType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpamDnsAddressType.Marshal(b, m, deterministic)
}
func (m *IpamDnsAddressType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpamDnsAddressType.Merge(m, src)
}
func (m *IpamDnsAddressType) XXX_Size() int {
	return xxx_messageInfo_IpamDnsAddressType.Size(m)
}
func (m *IpamDnsAddressType) XXX_DiscardUnknown() {
	xxx_messageInfo_IpamDnsAddressType.DiscardUnknown(m)
}

var xxx_messageInfo_IpamDnsAddressType proto.InternalMessageInfo

func (m *IpamDnsAddressType) GetTenantDNSServerAddress() *IpAddressesType {
	if m != nil {
		return m.TenantDNSServerAddress
	}
	return nil
}

func (m *IpamDnsAddressType) GetVirtualDNSServerName() string {
	if m != nil {
		return m.VirtualDNSServerName
	}
	return ""
}

type IpamSubnetType struct {
	AddrFromStart    bool                  `protobuf:"varint,1,opt,name=addr_from_start,json=addrFromStart,proto3" json:"addr_from_start,omitempty" yaml:"addr_from_start,omitempty"`
	AllocUnit        int64                 `protobuf:"varint,2,opt,name=alloc_unit,json=allocUnit,proto3" json:"alloc_unit,omitempty" yaml:"alloc_unit,omitempty"`
	AllocationPools  []*AllocationPoolType `protobuf:"bytes,3,rep,name=allocation_pools,json=allocationPools,proto3" json:"allocation_pools,omitempty" yaml:"allocation_pools,omitempty"`
	Created          string                `protobuf:"bytes,4,opt,name=created,proto3" json:"created,omitempty" yaml:"created,omitempty"`
	DefaultGateway   string                `protobuf:"bytes,5,opt,name=default_gateway,json=defaultGateway,proto3" json:"default_gateway,omitempty" yaml:"default_gateway,omitempty"`
	DHCPOptionList   *DhcpOptionsListType  `protobuf:"bytes,6,opt,name=dhcp_option_list,json=dhcpOptionList,proto3" json:"dhcp_option_list,omitempty" yaml:"dhcp_option_list,omitempty"`
	DHCPRelayServer  string                `protobuf:"bytes,7,opt,name=dhcp_relay_server,json=dhcpRelayServer,proto3" json:"dhcp_relay_server,omitempty" yaml:"dhcp_relay_server,omitempty"`
	DNSNameservers   []string              `protobuf:"bytes,8,rep,name=dns_nameservers,json=dnsNameservers,proto3" json:"dns_nameservers,omitempty" yaml:"dns_nameservers,omitempty"`
	DNSServerAddress string                `protobuf:"bytes,9,opt,name=dns_server_address,json=dnsServerAddress,proto3" json:"dns_server_address,omitempty" yaml:"dns_server_address,omitempty"`
	EnableDHCP       bool                  `protobuf:"varint,10,opt,name=enable_dhcp,json=enableDhcp,proto3" json:"enable_dhcp,omitempty" yaml:"enable_dhcp,omitempty"`
	HostRoutes       *RouteTableType       `protobuf:"bytes,11,opt,name=host_routes,json=hostRoutes,proto3" json:"host_routes,omitempty" yaml:"host_routes,omitempty"`
	LastModified     string                `protobuf:"bytes,12,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty" yaml:"last_modified,omitempty"`
	Subnet           *SubnetType           `protobuf:"bytes,13,opt,name=subnet,proto3" json:"subnet,omitempty" yaml:"subnet,omitempty"`
	SubnetName       string                `protobuf:"bytes,14,opt,name=subnet_name,json=subnetName,proto3" json:"subnet_name,omitempty" yaml:"subnet_name,omitempty"`
	SubnetUUID       string                `protobuf:"bytes,15,opt,name=subnet_uuid,json=subnetUuid,proto3" json:"subnet_uuid,omitempty" yaml:"subnet_uuid,omitempty"`
	SubscriberTag    string                `protobuf:"bytes,16,opt,name=subscriber_tag,json=subscriberTag,proto3" json:"subscriber_tag,omitempty" yaml:"subscriber_tag,omitempty"`
	VlanTag          int64                 `protobuf:"varint,17,opt,name=vlan_tag,json=vlanTag,proto3" json:"vlan_tag,omitempty" yaml:"vlan_tag,omitempty"`
}

func (m *IpamSubnetType) Reset()      { *m = IpamSubnetType{} }
func (*IpamSubnetType) ProtoMessage() {}
func (*IpamSubnetType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{479}
}
func (m *IpamSubnetType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpamSubnetType.Unmarshal(m, b)
}
func (m *IpamSubnetType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpamSubnetType.Marshal(b, m, deterministic)
}
func (m *IpamSubnetType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpamSubnetType.Merge(m, src)
}
func (m *IpamSubnetType) XXX_Size() int {
	return xxx_messageInfo_IpamSubnetType.Size(m)
}
func (m *IpamSubnetType) XXX_DiscardUnknown() {
	xxx_messageInfo_IpamSubnetType.DiscardUnknown(m)
}

var xxx_messageInfo_IpamSubnetType proto.InternalMessageInfo

func (m *IpamSubnetType) GetAddrFromStart() bool {
	if m != nil {
		return m.AddrFromStart
	}
	return false
}

func (m *IpamSubnetType) GetAllocUnit() int64 {
	if m != nil {
		return m.AllocUnit
	}
	return 0
}

func (m *IpamSubnetType) GetAllocationPools() []*AllocationPoolType {
	if m != nil {
		return m.AllocationPools
	}
	return nil
}

func (m *IpamSubnetType) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *IpamSubnetType) GetDefaultGateway() string {
	if m != nil {
		return m.DefaultGateway
	}
	return ""
}

func (m *IpamSubnetType) GetDHCPOptionList() *DhcpOptionsListType {
	if m != nil {
		return m.DHCPOptionList
	}
	return nil
}

func (m *IpamSubnetType) GetDHCPRelayServer() string {
	if m != nil {
		return m.DHCPRelayServer
	}
	return ""
}

func (m *IpamSubnetType) GetDNSNameservers() []string {
	if m != nil {
		return m.DNSNameservers
	}
	return nil
}

func (m *IpamSubnetType) GetDNSServerAddress() string {
	if m != nil {
		return m.DNSServerAddress
	}
	return ""
}

func (m *IpamSubnetType) GetEnableDHCP() bool {
	if m != nil {
		return m.EnableDHCP
	}
	return false
}

func (m *IpamSubnetType) GetHostRoutes() *RouteTableType {
	if m != nil {
		return m.HostRoutes
	}
	return nil
}

func (m *IpamSubnetType) GetLastModified() string {
	if m != nil {
		return m.LastModified
	}
	return ""
}

func (m *IpamSubnetType) GetSubnet() *SubnetType {
	if m != nil {
		return m.Subnet
	}
	return nil
}

func (m *IpamSubnetType) GetSubnetName() string {
	if m != nil {
		return m.SubnetName
	}
	return ""
}

func (m *IpamSubnetType) GetSubnetUUID() string {
	if m != nil {
		return m.SubnetUUID
	}
	return ""
}

func (m *IpamSubnetType) GetSubscriberTag() string {
	if m != nil {
		return m.SubscriberTag
	}
	return ""
}

func (m *IpamSubnetType) GetVlanTag() int64 {
	if m != nil {
		return m.VlanTag
	}
	return 0
}

type IpamSubnets struct {
	Subnets []*IpamSubnetType `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty" yaml:"subnets,omitempty"`
}

func (m *IpamSubnets) Reset()      { *m = IpamSubnets{} }
func (*IpamSubnets) ProtoMessage() {}
func (*IpamSubnets) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{480}
}
func (m *IpamSubnets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpamSubnets.Unmarshal(m, b)
}
func (m *IpamSubnets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpamSubnets.Marshal(b, m, deterministic)
}
func (m *IpamSubnets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpamSubnets.Merge(m, src)
}
func (m *IpamSubnets) XXX_Size() int {
	return xxx_messageInfo_IpamSubnets.Size(m)
}
func (m *IpamSubnets) XXX_DiscardUnknown() {
	xxx_messageInfo_IpamSubnets.DiscardUnknown(m)
}

var xxx_messageInfo_IpamSubnets proto.InternalMessageInfo

func (m *IpamSubnets) GetSubnets() []*IpamSubnetType {
	if m != nil {
		return m.Subnets
	}
	return nil
}

type IpamType struct {
	CidrBlock      *SubnetType          `protobuf:"bytes,1,opt,name=cidr_block,json=cidrBlock,proto3" json:"cidr_block,omitempty" yaml:"cidr_block,omitempty"`
	DHCPOptionList *DhcpOptionsListType `protobuf:"bytes,2,opt,name=dhcp_option_list,json=dhcpOptionList,proto3" json:"dhcp_option_list,omitempty" yaml:"dhcp_option_list,omitempty"`
	HostRoutes     *RouteTableType      `protobuf:"bytes,3,opt,name=host_routes,json=hostRoutes,proto3" json:"host_routes,omitempty" yaml:"host_routes,omitempty"`
	IpamDNSMethod  string               `protobuf:"bytes,4,opt,name=ipam_dns_method,json=ipamDnsMethod,proto3" json:"ipam_dns_method,omitempty" yaml:"ipam_dns_method,omitempty"`
	IpamDNSServer  *IpamDnsAddressType  `protobuf:"bytes,5,opt,name=ipam_dns_server,json=ipamDnsServer,proto3" json:"ipam_dns_server,omitempty" yaml:"ipam_dns_server,omitempty"`
	IpamMethod     string               `protobuf:"bytes,6,opt,name=ipam_method,json=ipamMethod,proto3" json:"ipam_method,omitempty" yaml:"ipam_method,omitempty"`
}

func (m *IpamType) Reset()      { *m = IpamType{} }
func (*IpamType) ProtoMessage() {}
func (*IpamType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{481}
}
func (m *IpamType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpamType.Unmarshal(m, b)
}
func (m *IpamType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpamType.Marshal(b, m, deterministic)
}
func (m *IpamType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpamType.Merge(m, src)
}
func (m *IpamType) XXX_Size() int {
	return xxx_messageInfo_IpamType.Size(m)
}
func (m *IpamType) XXX_DiscardUnknown() {
	xxx_messageInfo_IpamType.DiscardUnknown(m)
}

var xxx_messageInfo_IpamType proto.InternalMessageInfo

func (m *IpamType) GetCidrBlock() *SubnetType {
	if m != nil {
		return m.CidrBlock
	}
	return nil
}

func (m *IpamType) GetDHCPOptionList() *DhcpOptionsListType {
	if m != nil {
		return m.DHCPOptionList
	}
	return nil
}

func (m *IpamType) GetHostRoutes() *RouteTableType {
	if m != nil {
		return m.HostRoutes
	}
	return nil
}

func (m *IpamType) GetIpamDNSMethod() string {
	if m != nil {
		return m.IpamDNSMethod
	}
	return ""
}

func (m *IpamType) GetIpamDNSServer() *IpamDnsAddressType {
	if m != nil {
		return m.IpamDNSServer
	}
	return nil
}

func (m *IpamType) GetIpamMethod() string {
	if m != nil {
		return m.IpamMethod
	}
	return ""
}

type JunosServicePorts struct {
	ServicePort []string `protobuf:"bytes,1,rep,name=service_port,json=servicePort,proto3" json:"service_port,omitempty" yaml:"service_port,omitempty"`
}

func (m *JunosServicePorts) Reset()      { *m = JunosServicePorts{} }
func (*JunosServicePorts) ProtoMessage() {}
func (*JunosServicePorts) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{482}
}
func (m *JunosServicePorts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JunosServicePorts.Unmarshal(m, b)
}
func (m *JunosServicePorts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JunosServicePorts.Marshal(b, m, deterministic)
}
func (m *JunosServicePorts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JunosServicePorts.Merge(m, src)
}
func (m *JunosServicePorts) XXX_Size() int {
	return xxx_messageInfo_JunosServicePorts.Size(m)
}
func (m *JunosServicePorts) XXX_DiscardUnknown() {
	xxx_messageInfo_JunosServicePorts.DiscardUnknown(m)
}

var xxx_messageInfo_JunosServicePorts proto.InternalMessageInfo

func (m *JunosServicePorts) GetServicePort() []string {
	if m != nil {
		return m.ServicePort
	}
	return nil
}

// Omitempty JSON tag is removed from fields of KeyValuePair type, because it caused issues in REST API clients
// which expected all fields to be present. To achieve that "gogoproto.jsontag" extension is used.
type KeyValuePair struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key" yaml:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value" yaml:"value,omitempty"`
}

func (m *KeyValuePair) Reset()      { *m = KeyValuePair{} }
func (*KeyValuePair) ProtoMessage() {}
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{483}
}
func (m *KeyValuePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValuePair.Unmarshal(m, b)
}
func (m *KeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValuePair.Marshal(b, m, deterministic)
}
func (m *KeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValuePair.Merge(m, src)
}
func (m *KeyValuePair) XXX_Size() int {
	return xxx_messageInfo_KeyValuePair.Size(m)
}
func (m *KeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValuePair proto.InternalMessageInfo

func (m *KeyValuePair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValuePair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type KeyValuePairs struct {
	KeyValuePair []*KeyValuePair `protobuf:"bytes,1,rep,name=key_value_pair,json=keyValuePair,proto3" json:"key_value_pair,omitempty" yaml:"key_value_pair,omitempty"`
}

func (m *KeyValuePairs) Reset()      { *m = KeyValuePairs{} }
func (*KeyValuePairs) ProtoMessage() {}
func (*KeyValuePairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{484}
}
func (m *KeyValuePairs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValuePairs.Unmarshal(m, b)
}
func (m *KeyValuePairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValuePairs.Marshal(b, m, deterministic)
}
func (m *KeyValuePairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValuePairs.Merge(m, src)
}
func (m *KeyValuePairs) XXX_Size() int {
	return xxx_messageInfo_KeyValuePairs.Size(m)
}
func (m *KeyValuePairs) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValuePairs.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValuePairs proto.InternalMessageInfo

func (m *KeyValuePairs) GetKeyValuePair() []*KeyValuePair {
	if m != nil {
		return m.KeyValuePair
	}
	return nil
}

// Omitempty JSON tag is removed from fields of LinklocalServiceEntryType type, because it caused issues in REST API clients
// which expected all fields to be present. To achieve that "gogoproto.jsontag" extension is used.
type LinklocalServiceEntryType struct {
	IPFabricDNSServiceName string `protobuf:"bytes,1,opt,name=ip_fabric_DNS_service_name,json=ipFabricDNSServiceName,proto3" json:"ip_fabric_DNS_service_name" yaml:"ip_fabric_DNS_service_name,omitempty"`
	IPFabricServiceIP      string `protobuf:"bytes,2,opt,name=ip_fabric_service_ip,json=ipFabricServiceIp,proto3" json:"ip_fabric_service_ip" yaml:"ip_fabric_service_ip,omitempty"`
	IPFabricServicePort    int64  `protobuf:"varint,3,opt,name=ip_fabric_service_port,json=ipFabricServicePort,proto3" json:"ip_fabric_service_port" yaml:"ip_fabric_service_port,omitempty"`
	LinklocalServiceIP     string `protobuf:"bytes,4,opt,name=linklocal_service_ip,json=linklocalServiceIp,proto3" json:"linklocal_service_ip" yaml:"linklocal_service_ip,omitempty"`
	LinklocalServiceName   string `protobuf:"bytes,5,opt,name=linklocal_service_name,json=linklocalServiceName,proto3" json:"linklocal_service_name" yaml:"linklocal_service_name,omitempty"`
	LinklocalServicePort   int64  `protobuf:"varint,6,opt,name=linklocal_service_port,json=linklocalServicePort,proto3" json:"linklocal_service_port" yaml:"linklocal_service_port,omitempty"`
}

func (m *LinklocalServiceEntryType) Reset()      { *m = LinklocalServiceEntryType{} }
func (*LinklocalServiceEntryType) ProtoMessage() {}
func (*LinklocalServiceEntryType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{485}
}
func (m *LinklocalServiceEntryType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinklocalServiceEntryType.Unmarshal(m, b)
}
func (m *LinklocalServiceEntryType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinklocalServiceEntryType.Marshal(b, m, deterministic)
}
func (m *LinklocalServiceEntryType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinklocalServiceEntryType.Merge(m, src)
}
func (m *LinklocalServiceEntryType) XXX_Size() int {
	return xxx_messageInfo_LinklocalServiceEntryType.Size(m)
}
func (m *LinklocalServiceEntryType) XXX_DiscardUnknown() {
	xxx_messageInfo_LinklocalServiceEntryType.DiscardUnknown(m)
}

var xxx_messageInfo_LinklocalServiceEntryType proto.InternalMessageInfo

func (m *LinklocalServiceEntryType) GetIPFabricDNSServiceName() string {
	if m != nil {
		return m.IPFabricDNSServiceName
	}
	return ""
}

func (m *LinklocalServiceEntryType) GetIPFabricServiceIP() string {
	if m != nil {
		return m.IPFabricServiceIP
	}
	return ""
}

func (m *LinklocalServiceEntryType) GetIPFabricServicePort() int64 {
	if m != nil {
		return m.IPFabricServicePort
	}
	return 0
}

func (m *LinklocalServiceEntryType) GetLinklocalServiceIP() string {
	if m != nil {
		return m.LinklocalServiceIP
	}
	return ""
}

func (m *LinklocalServiceEntryType) GetLinklocalServiceName() string {
	if m != nil {
		return m.LinklocalServiceName
	}
	return ""
}

func (m *LinklocalServiceEntryType) GetLinklocalServicePort() int64 {
	if m != nil {
		return m.LinklocalServicePort
	}
	return 0
}

type LinklocalServicesTypes struct {
	LinklocalServiceEntry []*LinklocalServiceEntryType `protobuf:"bytes,1,rep,name=linklocal_service_entry,json=linklocalServiceEntry,proto3" json:"linklocal_service_entry,omitempty" yaml:"linklocal_service_entry,omitempty"`
}

func (m *LinklocalServicesTypes) Reset()      { *m = LinklocalServicesTypes{} }
func (*LinklocalServicesTypes) ProtoMessage() {}
func (*LinklocalServicesTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{486}
}
func (m *LinklocalServicesTypes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LinklocalServicesTypes.Unmarshal(m, b)
}
func (m *LinklocalServicesTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LinklocalServicesTypes.Marshal(b, m, deterministic)
}
func (m *LinklocalServicesTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinklocalServicesTypes.Merge(m, src)
}
func (m *LinklocalServicesTypes) XXX_Size() int {
	return xxx_messageInfo_LinklocalServicesTypes.Size(m)
}
func (m *LinklocalServicesTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_LinklocalServicesTypes.DiscardUnknown(m)
}

var xxx_messageInfo_LinklocalServicesTypes proto.InternalMessageInfo

func (m *LinklocalServicesTypes) GetLinklocalServiceEntry() []*LinklocalServiceEntryType {
	if m != nil {
		return m.LinklocalServiceEntry
	}
	return nil
}

type LoadbalancerHealthmonitorType struct {
	AdminState    bool   `protobuf:"varint,1,opt,name=admin_state,json=adminState,proto3" json:"admin_state,omitempty" yaml:"admin_state,omitempty"`
	Delay         int64  `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty" yaml:"delay,omitempty"`
	ExpectedCodes string `protobuf:"bytes,3,opt,name=expected_codes,json=expectedCodes,proto3" json:"expected_codes,omitempty" yaml:"expected_codes,omitempty"`
	HTTPMethod    string `protobuf:"bytes,4,opt,name=http_method,json=httpMethod,proto3" json:"http_method,omitempty" yaml:"http_method,omitempty"`
	MaxRetries    int64  `protobuf:"varint,5,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty" yaml:"max_retries,omitempty"`
	MonitorType   string `protobuf:"bytes,6,opt,name=monitor_type,json=monitorType,proto3" json:"monitor_type,omitempty" yaml:"monitor_type,omitempty"`
	Timeout       int64  `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty" yaml:"timeout,omitempty"`
	URLPath       string `protobuf:"bytes,8,opt,name=url_path,json=urlPath,proto3" json:"url_path,omitempty" yaml:"url_path,omitempty"`
}

func (m *LoadbalancerHealthmonitorType) Reset()      { *m = LoadbalancerHealthmonitorType{} }
func (*LoadbalancerHealthmonitorType) ProtoMessage() {}
func (*LoadbalancerHealthmonitorType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{487}
}
func (m *LoadbalancerHealthmonitorType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerHealthmonitorType.Unmarshal(m, b)
}
func (m *LoadbalancerHealthmonitorType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerHealthmonitorType.Marshal(b, m, deterministic)
}
func (m *LoadbalancerHealthmonitorType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerHealthmonitorType.Merge(m, src)
}
func (m *LoadbalancerHealthmonitorType) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerHealthmonitorType.Size(m)
}
func (m *LoadbalancerHealthmonitorType) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerHealthmonitorType.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerHealthmonitorType proto.InternalMessageInfo

func (m *LoadbalancerHealthmonitorType) GetAdminState() bool {
	if m != nil {
		return m.AdminState
	}
	return false
}

func (m *LoadbalancerHealthmonitorType) GetDelay() int64 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *LoadbalancerHealthmonitorType) GetExpectedCodes() string {
	if m != nil {
		return m.ExpectedCodes
	}
	return ""
}

func (m *LoadbalancerHealthmonitorType) GetHTTPMethod() string {
	if m != nil {
		return m.HTTPMethod
	}
	return ""
}

func (m *LoadbalancerHealthmonitorType) GetMaxRetries() int64 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

func (m *LoadbalancerHealthmonitorType) GetMonitorType() string {
	if m != nil {
		return m.MonitorType
	}
	return ""
}

func (m *LoadbalancerHealthmonitorType) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *LoadbalancerHealthmonitorType) GetURLPath() string {
	if m != nil {
		return m.URLPath
	}
	return ""
}

type LoadbalancerListenerType struct {
	AdminState bool `protobuf:"varint,1,opt,name=admin_state,json=adminState,proto3" json:"admin_state,omitempty" yaml:"admin_state,omitempty"`
	//Following property should not have omitempty JSON tag and should have correct default value in schema.
	//For example "connection_limit" property had default value defined only on WebUI site.
	ConnectionLimit     int64    `protobuf:"varint,2,opt,name=connection_limit,json=connectionLimit,proto3" json:"connection_limit" yaml:"connection_limit,omitempty"`
	DefaultTLSContainer string   `protobuf:"bytes,3,opt,name=default_tls_container,json=defaultTlsContainer,proto3" json:"default_tls_container,omitempty" yaml:"default_tls_container,omitempty"`
	Protocol            string   `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty" yaml:"protocol,omitempty"`
	ProtocolPort        int64    `protobuf:"varint,5,opt,name=protocol_port,json=protocolPort,proto3" json:"protocol_port,omitempty" yaml:"protocol_port,omitempty"`
	SniContainers       []string `protobuf:"bytes,6,rep,name=sni_containers,json=sniContainers,proto3" json:"sni_containers,omitempty" yaml:"sni_containers,omitempty"`
}

func (m *LoadbalancerListenerType) Reset()      { *m = LoadbalancerListenerType{} }
func (*LoadbalancerListenerType) ProtoMessage() {}
func (*LoadbalancerListenerType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{488}
}
func (m *LoadbalancerListenerType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerListenerType.Unmarshal(m, b)
}
func (m *LoadbalancerListenerType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerListenerType.Marshal(b, m, deterministic)
}
func (m *LoadbalancerListenerType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerListenerType.Merge(m, src)
}
func (m *LoadbalancerListenerType) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerListenerType.Size(m)
}
func (m *LoadbalancerListenerType) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerListenerType.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerListenerType proto.InternalMessageInfo

func (m *LoadbalancerListenerType) GetAdminState() bool {
	if m != nil {
		return m.AdminState
	}
	return false
}

func (m *LoadbalancerListenerType) GetConnectionLimit() int64 {
	if m != nil {
		return m.ConnectionLimit
	}
	return 0
}

func (m *LoadbalancerListenerType) GetDefaultTLSContainer() string {
	if m != nil {
		return m.DefaultTLSContainer
	}
	return ""
}

func (m *LoadbalancerListenerType) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *LoadbalancerListenerType) GetProtocolPort() int64 {
	if m != nil {
		return m.ProtocolPort
	}
	return 0
}

func (m *LoadbalancerListenerType) GetSniContainers() []string {
	if m != nil {
		return m.SniContainers
	}
	return nil
}

type LoadbalancerMemberType struct {
	Address           string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address,omitempty"`
	AdminState        bool   `protobuf:"varint,2,opt,name=admin_state,json=adminState,proto3" json:"admin_state,omitempty" yaml:"admin_state,omitempty"`
	ProtocolPort      int64  `protobuf:"varint,3,opt,name=protocol_port,json=protocolPort,proto3" json:"protocol_port,omitempty" yaml:"protocol_port,omitempty"`
	Status            string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" yaml:"status,omitempty"`
	StatusDescription string `protobuf:"bytes,5,opt,name=status_description,json=statusDescription,proto3" json:"status_description,omitempty" yaml:"status_description,omitempty"`
	SubnetID          string `protobuf:"bytes,6,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty" yaml:"subnet_id,omitempty"`
	Weight            int64  `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty" yaml:"weight,omitempty"`
}

func (m *LoadbalancerMemberType) Reset()      { *m = LoadbalancerMemberType{} }
func (*LoadbalancerMemberType) ProtoMessage() {}
func (*LoadbalancerMemberType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{489}
}
func (m *LoadbalancerMemberType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerMemberType.Unmarshal(m, b)
}
func (m *LoadbalancerMemberType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerMemberType.Marshal(b, m, deterministic)
}
func (m *LoadbalancerMemberType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerMemberType.Merge(m, src)
}
func (m *LoadbalancerMemberType) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerMemberType.Size(m)
}
func (m *LoadbalancerMemberType) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerMemberType.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerMemberType proto.InternalMessageInfo

func (m *LoadbalancerMemberType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *LoadbalancerMemberType) GetAdminState() bool {
	if m != nil {
		return m.AdminState
	}
	return false
}

func (m *LoadbalancerMemberType) GetProtocolPort() int64 {
	if m != nil {
		return m.ProtocolPort
	}
	return 0
}

func (m *LoadbalancerMemberType) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LoadbalancerMemberType) GetStatusDescription() string {
	if m != nil {
		return m.StatusDescription
	}
	return ""
}

func (m *LoadbalancerMemberType) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

func (m *LoadbalancerMemberType) GetWeight() int64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type LoadbalancerPoolType struct {
	AdminState            bool   `protobuf:"varint,1,opt,name=admin_state,json=adminState,proto3" json:"admin_state,omitempty" yaml:"admin_state,omitempty"`
	LoadbalancerMethod    string `protobuf:"bytes,2,opt,name=loadbalancer_method,json=loadbalancerMethod,proto3" json:"loadbalancer_method,omitempty" yaml:"loadbalancer_method,omitempty"`
	PersistenceCookieName string `protobuf:"bytes,3,opt,name=persistence_cookie_name,json=persistenceCookieName,proto3" json:"persistence_cookie_name,omitempty" yaml:"persistence_cookie_name,omitempty"`
	Protocol              string `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty" yaml:"protocol,omitempty"`
	SessionPersistence    string `protobuf:"bytes,5,opt,name=session_persistence,json=sessionPersistence,proto3" json:"session_persistence,omitempty" yaml:"session_persistence,omitempty"`
	Status                string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty" yaml:"status,omitempty"`
	StatusDescription     string `protobuf:"bytes,7,opt,name=status_description,json=statusDescription,proto3" json:"status_description,omitempty" yaml:"status_description,omitempty"`
	SubnetID              string `protobuf:"bytes,8,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty" yaml:"subnet_id,omitempty"`
}

func (m *LoadbalancerPoolType) Reset()      { *m = LoadbalancerPoolType{} }
func (*LoadbalancerPoolType) ProtoMessage() {}
func (*LoadbalancerPoolType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{490}
}
func (m *LoadbalancerPoolType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerPoolType.Unmarshal(m, b)
}
func (m *LoadbalancerPoolType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerPoolType.Marshal(b, m, deterministic)
}
func (m *LoadbalancerPoolType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerPoolType.Merge(m, src)
}
func (m *LoadbalancerPoolType) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerPoolType.Size(m)
}
func (m *LoadbalancerPoolType) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerPoolType.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerPoolType proto.InternalMessageInfo

func (m *LoadbalancerPoolType) GetAdminState() bool {
	if m != nil {
		return m.AdminState
	}
	return false
}

func (m *LoadbalancerPoolType) GetLoadbalancerMethod() string {
	if m != nil {
		return m.LoadbalancerMethod
	}
	return ""
}

func (m *LoadbalancerPoolType) GetPersistenceCookieName() string {
	if m != nil {
		return m.PersistenceCookieName
	}
	return ""
}

func (m *LoadbalancerPoolType) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *LoadbalancerPoolType) GetSessionPersistence() string {
	if m != nil {
		return m.SessionPersistence
	}
	return ""
}

func (m *LoadbalancerPoolType) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LoadbalancerPoolType) GetStatusDescription() string {
	if m != nil {
		return m.StatusDescription
	}
	return ""
}

func (m *LoadbalancerPoolType) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

type LoadbalancerType struct {
	AdminState         bool   `protobuf:"varint,1,opt,name=admin_state,json=adminState,proto3" json:"admin_state,omitempty" yaml:"admin_state,omitempty"`
	OperatingStatus    string `protobuf:"bytes,2,opt,name=operating_status,json=operatingStatus,proto3" json:"operating_status,omitempty" yaml:"operating_status,omitempty"`
	ProvisioningStatus string `protobuf:"bytes,3,opt,name=provisioning_status,json=provisioningStatus,proto3" json:"provisioning_status,omitempty" yaml:"provisioning_status,omitempty"`
	Status             string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty" yaml:"status,omitempty"`
	VipAddress         string `protobuf:"bytes,5,opt,name=vip_address,json=vipAddress,proto3" json:"vip_address,omitempty" yaml:"vip_address,omitempty"`
	VipSubnetID        string `protobuf:"bytes,6,opt,name=vip_subnet_id,json=vipSubnetId,proto3" json:"vip_subnet_id,omitempty" yaml:"vip_subnet_id,omitempty"`
}

func (m *LoadbalancerType) Reset()      { *m = LoadbalancerType{} }
func (*LoadbalancerType) ProtoMessage() {}
func (*LoadbalancerType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{491}
}
func (m *LoadbalancerType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadbalancerType.Unmarshal(m, b)
}
func (m *LoadbalancerType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadbalancerType.Marshal(b, m, deterministic)
}
func (m *LoadbalancerType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadbalancerType.Merge(m, src)
}
func (m *LoadbalancerType) XXX_Size() int {
	return xxx_messageInfo_LoadbalancerType.Size(m)
}
func (m *LoadbalancerType) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadbalancerType.DiscardUnknown(m)
}

var xxx_messageInfo_LoadbalancerType proto.InternalMessageInfo

func (m *LoadbalancerType) GetAdminState() bool {
	if m != nil {
		return m.AdminState
	}
	return false
}

func (m *LoadbalancerType) GetOperatingStatus() string {
	if m != nil {
		return m.OperatingStatus
	}
	return ""
}

func (m *LoadbalancerType) GetProvisioningStatus() string {
	if m != nil {
		return m.ProvisioningStatus
	}
	return ""
}

func (m *LoadbalancerType) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LoadbalancerType) GetVipAddress() string {
	if m != nil {
		return m.VipAddress
	}
	return ""
}

func (m *LoadbalancerType) GetVipSubnetID() string {
	if m != nil {
		return m.VipSubnetID
	}
	return ""
}

type LocalLinkConnection struct {
	PortID     string `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty" yaml:"port_id,omitempty"`
	PortIndex  string `protobuf:"bytes,2,opt,name=port_index,json=portIndex,proto3" json:"port_index,omitempty" yaml:"port_index,omitempty"`
	SwitchID   string `protobuf:"bytes,3,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty" yaml:"switch_id,omitempty"`
	SwitchInfo string `protobuf:"bytes,4,opt,name=switch_info,json=switchInfo,proto3" json:"switch_info,omitempty" yaml:"switch_info,omitempty"`
}

func (m *LocalLinkConnection) Reset()      { *m = LocalLinkConnection{} }
func (*LocalLinkConnection) ProtoMessage() {}
func (*LocalLinkConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{492}
}
func (m *LocalLinkConnection) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocalLinkConnection.Unmarshal(m, b)
}
func (m *LocalLinkConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocalLinkConnection.Marshal(b, m, deterministic)
}
func (m *LocalLinkConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalLinkConnection.Merge(m, src)
}
func (m *LocalLinkConnection) XXX_Size() int {
	return xxx_messageInfo_LocalLinkConnection.Size(m)
}
func (m *LocalLinkConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalLinkConnection.DiscardUnknown(m)
}

var xxx_messageInfo_LocalLinkConnection proto.InternalMessageInfo

func (m *LocalLinkConnection) GetPortID() string {
	if m != nil {
		return m.PortID
	}
	return ""
}

func (m *LocalLinkConnection) GetPortIndex() string {
	if m != nil {
		return m.PortIndex
	}
	return ""
}

func (m *LocalLinkConnection) GetSwitchID() string {
	if m != nil {
		return m.SwitchID
	}
	return ""
}

func (m *LocalLinkConnection) GetSwitchInfo() string {
	if m != nil {
		return m.SwitchInfo
	}
	return ""
}

type LogicalRouterVirtualNetworkType struct {
	LogicalRouterVirtualNetworkType string `protobuf:"bytes,1,opt,name=logical_router_virtual_network_type,json=logicalRouterVirtualNetworkType,proto3" json:"logical_router_virtual_network_type,omitempty" yaml:"logical_router_virtual_network_type,omitempty"`
}

func (m *LogicalRouterVirtualNetworkType) Reset()      { *m = LogicalRouterVirtualNetworkType{} }
func (*LogicalRouterVirtualNetworkType) ProtoMessage() {}
func (*LogicalRouterVirtualNetworkType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{493}
}
func (m *LogicalRouterVirtualNetworkType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalRouterVirtualNetworkType.Unmarshal(m, b)
}
func (m *LogicalRouterVirtualNetworkType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalRouterVirtualNetworkType.Marshal(b, m, deterministic)
}
func (m *LogicalRouterVirtualNetworkType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalRouterVirtualNetworkType.Merge(m, src)
}
func (m *LogicalRouterVirtualNetworkType) XXX_Size() int {
	return xxx_messageInfo_LogicalRouterVirtualNetworkType.Size(m)
}
func (m *LogicalRouterVirtualNetworkType) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalRouterVirtualNetworkType.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalRouterVirtualNetworkType proto.InternalMessageInfo

func (m *LogicalRouterVirtualNetworkType) GetLogicalRouterVirtualNetworkType() string {
	if m != nil {
		return m.LogicalRouterVirtualNetworkType
	}
	return ""
}

type MACLimitControlType struct {
	MacLimit       int64  `protobuf:"varint,1,opt,name=mac_limit,json=macLimit,proto3" json:"mac_limit,omitempty" yaml:"mac_limit,omitempty"`
	MacLimitAction string `protobuf:"bytes,2,opt,name=mac_limit_action,json=macLimitAction,proto3" json:"mac_limit_action,omitempty" yaml:"mac_limit_action,omitempty"`
}

func (m *MACLimitControlType) Reset()      { *m = MACLimitControlType{} }
func (*MACLimitControlType) ProtoMessage() {}
func (*MACLimitControlType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{494}
}
func (m *MACLimitControlType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MACLimitControlType.Unmarshal(m, b)
}
func (m *MACLimitControlType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MACLimitControlType.Marshal(b, m, deterministic)
}
func (m *MACLimitControlType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACLimitControlType.Merge(m, src)
}
func (m *MACLimitControlType) XXX_Size() int {
	return xxx_messageInfo_MACLimitControlType.Size(m)
}
func (m *MACLimitControlType) XXX_DiscardUnknown() {
	xxx_messageInfo_MACLimitControlType.DiscardUnknown(m)
}

var xxx_messageInfo_MACLimitControlType proto.InternalMessageInfo

func (m *MACLimitControlType) GetMacLimit() int64 {
	if m != nil {
		return m.MacLimit
	}
	return 0
}

func (m *MACLimitControlType) GetMacLimitAction() string {
	if m != nil {
		return m.MacLimitAction
	}
	return ""
}

type MACMoveLimitControlType struct {
	MacMoveLimit       int64  `protobuf:"varint,1,opt,name=mac_move_limit,json=macMoveLimit,proto3" json:"mac_move_limit,omitempty" yaml:"mac_move_limit,omitempty"`
	MacMoveLimitAction string `protobuf:"bytes,2,opt,name=mac_move_limit_action,json=macMoveLimitAction,proto3" json:"mac_move_limit_action,omitempty" yaml:"mac_move_limit_action,omitempty"`
	MacMoveTimeWindow  int64  `protobuf:"varint,3,opt,name=mac_move_time_window,json=macMoveTimeWindow,proto3" json:"mac_move_time_window,omitempty" yaml:"mac_move_time_window,omitempty"`
}

func (m *MACMoveLimitControlType) Reset()      { *m = MACMoveLimitControlType{} }
func (*MACMoveLimitControlType) ProtoMessage() {}
func (*MACMoveLimitControlType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{495}
}
func (m *MACMoveLimitControlType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MACMoveLimitControlType.Unmarshal(m, b)
}
func (m *MACMoveLimitControlType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MACMoveLimitControlType.Marshal(b, m, deterministic)
}
func (m *MACMoveLimitControlType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACMoveLimitControlType.Merge(m, src)
}
func (m *MACMoveLimitControlType) XXX_Size() int {
	return xxx_messageInfo_MACMoveLimitControlType.Size(m)
}
func (m *MACMoveLimitControlType) XXX_DiscardUnknown() {
	xxx_messageInfo_MACMoveLimitControlType.DiscardUnknown(m)
}

var xxx_messageInfo_MACMoveLimitControlType proto.InternalMessageInfo

func (m *MACMoveLimitControlType) GetMacMoveLimit() int64 {
	if m != nil {
		return m.MacMoveLimit
	}
	return 0
}

func (m *MACMoveLimitControlType) GetMacMoveLimitAction() string {
	if m != nil {
		return m.MacMoveLimitAction
	}
	return ""
}

func (m *MACMoveLimitControlType) GetMacMoveTimeWindow() int64 {
	if m != nil {
		return m.MacMoveTimeWindow
	}
	return 0
}

type MacAddressesType struct {
	MacAddress []string `protobuf:"bytes,1,rep,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty" yaml:"mac_address,omitempty"`
}

func (m *MacAddressesType) Reset()      { *m = MacAddressesType{} }
func (*MacAddressesType) ProtoMessage() {}
func (*MacAddressesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{496}
}
func (m *MacAddressesType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MacAddressesType.Unmarshal(m, b)
}
func (m *MacAddressesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MacAddressesType.Marshal(b, m, deterministic)
}
func (m *MacAddressesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MacAddressesType.Merge(m, src)
}
func (m *MacAddressesType) XXX_Size() int {
	return xxx_messageInfo_MacAddressesType.Size(m)
}
func (m *MacAddressesType) XXX_DiscardUnknown() {
	xxx_messageInfo_MacAddressesType.DiscardUnknown(m)
}

var xxx_messageInfo_MacAddressesType proto.InternalMessageInfo

func (m *MacAddressesType) GetMacAddress() []string {
	if m != nil {
		return m.MacAddress
	}
	return nil
}

type MatchConditionType struct {
	DSTAddress *AddressType `protobuf:"bytes,1,opt,name=dst_address,json=dstAddress,proto3" json:"dst_address,omitempty" yaml:"dst_address,omitempty"`
	DSTPort    *PortType    `protobuf:"bytes,2,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty" yaml:"dst_port,omitempty"`
	Ethertype  string       `protobuf:"bytes,3,opt,name=ethertype,proto3" json:"ethertype,omitempty" yaml:"ethertype,omitempty"`
	Protocol   string       `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty" yaml:"protocol,omitempty"`
	SRCAddress *AddressType `protobuf:"bytes,5,opt,name=src_address,json=srcAddress,proto3" json:"src_address,omitempty" yaml:"src_address,omitempty"`
	SRCPort    *PortType    `protobuf:"bytes,6,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty" yaml:"src_port,omitempty"`
}

func (m *MatchConditionType) Reset()      { *m = MatchConditionType{} }
func (*MatchConditionType) ProtoMessage() {}
func (*MatchConditionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{497}
}
func (m *MatchConditionType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchConditionType.Unmarshal(m, b)
}
func (m *MatchConditionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchConditionType.Marshal(b, m, deterministic)
}
func (m *MatchConditionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchConditionType.Merge(m, src)
}
func (m *MatchConditionType) XXX_Size() int {
	return xxx_messageInfo_MatchConditionType.Size(m)
}
func (m *MatchConditionType) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchConditionType.DiscardUnknown(m)
}

var xxx_messageInfo_MatchConditionType proto.InternalMessageInfo

func (m *MatchConditionType) GetDSTAddress() *AddressType {
	if m != nil {
		return m.DSTAddress
	}
	return nil
}

func (m *MatchConditionType) GetDSTPort() *PortType {
	if m != nil {
		return m.DSTPort
	}
	return nil
}

func (m *MatchConditionType) GetEthertype() string {
	if m != nil {
		return m.Ethertype
	}
	return ""
}

func (m *MatchConditionType) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *MatchConditionType) GetSRCAddress() *AddressType {
	if m != nil {
		return m.SRCAddress
	}
	return nil
}

func (m *MatchConditionType) GetSRCPort() *PortType {
	if m != nil {
		return m.SRCPort
	}
	return nil
}

type MirrorActionType struct {
	AnalyzerIPAddress        string              `protobuf:"bytes,1,opt,name=analyzer_ip_address,json=analyzerIpAddress,proto3" json:"analyzer_ip_address,omitempty" yaml:"analyzer_ip_address,omitempty"`
	AnalyzerMacAddress       string              `protobuf:"bytes,2,opt,name=analyzer_mac_address,json=analyzerMacAddress,proto3" json:"analyzer_mac_address,omitempty" yaml:"analyzer_mac_address,omitempty"`
	AnalyzerName             string              `protobuf:"bytes,3,opt,name=analyzer_name,json=analyzerName,proto3" json:"analyzer_name,omitempty" yaml:"analyzer_name,omitempty"`
	Encapsulation            string              `protobuf:"bytes,4,opt,name=encapsulation,proto3" json:"encapsulation,omitempty" yaml:"encapsulation,omitempty"`
	JuniperHeader            bool                `protobuf:"varint,5,opt,name=juniper_header,json=juniperHeader,proto3" json:"juniper_header,omitempty" yaml:"juniper_header,omitempty"`
	NHMode                   string              `protobuf:"bytes,6,opt,name=nh_mode,json=nhMode,proto3" json:"nh_mode,omitempty" yaml:"nh_mode,omitempty"`
	NicAssistedMirroring     bool                `protobuf:"varint,7,opt,name=nic_assisted_mirroring,json=nicAssistedMirroring,proto3" json:"nic_assisted_mirroring,omitempty" yaml:"nic_assisted_mirroring,omitempty"`
	NicAssistedMirroringVlan int64               `protobuf:"varint,8,opt,name=nic_assisted_mirroring_vlan,json=nicAssistedMirroringVlan,proto3" json:"nic_assisted_mirroring_vlan,omitempty" yaml:"nic_assisted_mirroring_vlan,omitempty"`
	RoutingInstance          string              `protobuf:"bytes,9,opt,name=routing_instance,json=routingInstance,proto3" json:"routing_instance,omitempty" yaml:"routing_instance,omitempty"`
	StaticNHHeader           *StaticMirrorNhType `protobuf:"bytes,10,opt,name=static_nh_header,json=staticNhHeader,proto3" json:"static_nh_header,omitempty" yaml:"static_nh_header,omitempty"`
	UDPPort                  int64               `protobuf:"varint,11,opt,name=udp_port,json=udpPort,proto3" json:"udp_port,omitempty" yaml:"udp_port,omitempty"`
}

func (m *MirrorActionType) Reset()      { *m = MirrorActionType{} }
func (*MirrorActionType) ProtoMessage() {}
func (*MirrorActionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{498}
}
func (m *MirrorActionType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MirrorActionType.Unmarshal(m, b)
}
func (m *MirrorActionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MirrorActionType.Marshal(b, m, deterministic)
}
func (m *MirrorActionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MirrorActionType.Merge(m, src)
}
func (m *MirrorActionType) XXX_Size() int {
	return xxx_messageInfo_MirrorActionType.Size(m)
}
func (m *MirrorActionType) XXX_DiscardUnknown() {
	xxx_messageInfo_MirrorActionType.DiscardUnknown(m)
}

var xxx_messageInfo_MirrorActionType proto.InternalMessageInfo

func (m *MirrorActionType) GetAnalyzerIPAddress() string {
	if m != nil {
		return m.AnalyzerIPAddress
	}
	return ""
}

func (m *MirrorActionType) GetAnalyzerMacAddress() string {
	if m != nil {
		return m.AnalyzerMacAddress
	}
	return ""
}

func (m *MirrorActionType) GetAnalyzerName() string {
	if m != nil {
		return m.AnalyzerName
	}
	return ""
}

func (m *MirrorActionType) GetEncapsulation() string {
	if m != nil {
		return m.Encapsulation
	}
	return ""
}

func (m *MirrorActionType) GetJuniperHeader() bool {
	if m != nil {
		return m.JuniperHeader
	}
	return false
}

func (m *MirrorActionType) GetNHMode() string {
	if m != nil {
		return m.NHMode
	}
	return ""
}

func (m *MirrorActionType) GetNicAssistedMirroring() bool {
	if m != nil {
		return m.NicAssistedMirroring
	}
	return false
}

func (m *MirrorActionType) GetNicAssistedMirroringVlan() int64 {
	if m != nil {
		return m.NicAssistedMirroringVlan
	}
	return 0
}

func (m *MirrorActionType) GetRoutingInstance() string {
	if m != nil {
		return m.RoutingInstance
	}
	return ""
}

func (m *MirrorActionType) GetStaticNHHeader() *StaticMirrorNhType {
	if m != nil {
		return m.StaticNHHeader
	}
	return nil
}

func (m *MirrorActionType) GetUDPPort() int64 {
	if m != nil {
		return m.UDPPort
	}
	return 0
}

type MulticastSourceGroup struct {
	Action        string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty" yaml:"action,omitempty"`
	GroupAddress  string `protobuf:"bytes,2,opt,name=group_address,json=groupAddress,proto3" json:"group_address,omitempty" yaml:"group_address,omitempty"`
	SourceAddress string `protobuf:"bytes,3,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty" yaml:"source_address,omitempty"`
}

func (m *MulticastSourceGroup) Reset()      { *m = MulticastSourceGroup{} }
func (*MulticastSourceGroup) ProtoMessage() {}
func (*MulticastSourceGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{499}
}
func (m *MulticastSourceGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MulticastSourceGroup.Unmarshal(m, b)
}
func (m *MulticastSourceGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MulticastSourceGroup.Marshal(b, m, deterministic)
}
func (m *MulticastSourceGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MulticastSourceGroup.Merge(m, src)
}
func (m *MulticastSourceGroup) XXX_Size() int {
	return xxx_messageInfo_MulticastSourceGroup.Size(m)
}
func (m *MulticastSourceGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_MulticastSourceGroup.DiscardUnknown(m)
}

var xxx_messageInfo_MulticastSourceGroup proto.InternalMessageInfo

func (m *MulticastSourceGroup) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *MulticastSourceGroup) GetGroupAddress() string {
	if m != nil {
		return m.GroupAddress
	}
	return ""
}

func (m *MulticastSourceGroup) GetSourceAddress() string {
	if m != nil {
		return m.SourceAddress
	}
	return ""
}

type MulticastSourceGroups struct {
	MulticastSourceGroup []*MulticastSourceGroup `protobuf:"bytes,1,rep,name=multicast_source_group,json=multicastSourceGroup,proto3" json:"multicast_source_group,omitempty" yaml:"multicast_source_group,omitempty"`
}

func (m *MulticastSourceGroups) Reset()      { *m = MulticastSourceGroups{} }
func (*MulticastSourceGroups) ProtoMessage() {}
func (*MulticastSourceGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{500}
}
func (m *MulticastSourceGroups) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MulticastSourceGroups.Unmarshal(m, b)
}
func (m *MulticastSourceGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MulticastSourceGroups.Marshal(b, m, deterministic)
}
func (m *MulticastSourceGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MulticastSourceGroups.Merge(m, src)
}
func (m *MulticastSourceGroups) XXX_Size() int {
	return xxx_messageInfo_MulticastSourceGroups.Size(m)
}
func (m *MulticastSourceGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_MulticastSourceGroups.DiscardUnknown(m)
}

var xxx_messageInfo_MulticastSourceGroups proto.InternalMessageInfo

func (m *MulticastSourceGroups) GetMulticastSourceGroup() []*MulticastSourceGroup {
	if m != nil {
		return m.MulticastSourceGroup
	}
	return nil
}

type NamespaceValue struct {
	Asn        *AutonomousSystemsType `protobuf:"bytes,1,opt,name=asn,proto3" json:"asn,omitempty" yaml:"asn,omitempty"`
	AsnRanges  []*AsnRangeType        `protobuf:"bytes,2,rep,name=asn_ranges,json=asnRanges,proto3" json:"asn_ranges,omitempty" yaml:"asn_ranges,omitempty"`
	Ipv4Cidr   *SubnetListType        `protobuf:"bytes,3,opt,name=ipv4_cidr,json=ipv4Cidr,proto3" json:"ipv4_cidr,omitempty" yaml:"ipv4_cidr,omitempty"`
	MacAddr    *MacAddressesType      `protobuf:"bytes,4,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty" yaml:"mac_addr,omitempty"`
	SerialNums []string               `protobuf:"bytes,5,rep,name=serial_nums,json=serialNums,proto3" json:"serial_nums,omitempty" yaml:"serial_nums,omitempty"`
}

func (m *NamespaceValue) Reset()      { *m = NamespaceValue{} }
func (*NamespaceValue) ProtoMessage() {}
func (*NamespaceValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{501}
}
func (m *NamespaceValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NamespaceValue.Unmarshal(m, b)
}
func (m *NamespaceValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NamespaceValue.Marshal(b, m, deterministic)
}
func (m *NamespaceValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespaceValue.Merge(m, src)
}
func (m *NamespaceValue) XXX_Size() int {
	return xxx_messageInfo_NamespaceValue.Size(m)
}
func (m *NamespaceValue) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespaceValue.DiscardUnknown(m)
}

var xxx_messageInfo_NamespaceValue proto.InternalMessageInfo

func (m *NamespaceValue) GetAsn() *AutonomousSystemsType {
	if m != nil {
		return m.Asn
	}
	return nil
}

func (m *NamespaceValue) GetAsnRanges() []*AsnRangeType {
	if m != nil {
		return m.AsnRanges
	}
	return nil
}

func (m *NamespaceValue) GetIpv4Cidr() *SubnetListType {
	if m != nil {
		return m.Ipv4Cidr
	}
	return nil
}

func (m *NamespaceValue) GetMacAddr() *MacAddressesType {
	if m != nil {
		return m.MacAddr
	}
	return nil
}

func (m *NamespaceValue) GetSerialNums() []string {
	if m != nil {
		return m.SerialNums
	}
	return nil
}

type NodeProfileRoleType struct {
	PhysicalRole string   `protobuf:"bytes,1,opt,name=physical_role,json=physicalRole,proto3" json:"physical_role,omitempty" yaml:"physical_role,omitempty"`
	RBRoles      []string `protobuf:"bytes,2,rep,name=rb_roles,json=rbRoles,proto3" json:"rb_roles,omitempty" yaml:"rb_roles,omitempty"`
}

func (m *NodeProfileRoleType) Reset()      { *m = NodeProfileRoleType{} }
func (*NodeProfileRoleType) ProtoMessage() {}
func (*NodeProfileRoleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{502}
}
func (m *NodeProfileRoleType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeProfileRoleType.Unmarshal(m, b)
}
func (m *NodeProfileRoleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeProfileRoleType.Marshal(b, m, deterministic)
}
func (m *NodeProfileRoleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeProfileRoleType.Merge(m, src)
}
func (m *NodeProfileRoleType) XXX_Size() int {
	return xxx_messageInfo_NodeProfileRoleType.Size(m)
}
func (m *NodeProfileRoleType) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeProfileRoleType.DiscardUnknown(m)
}

var xxx_messageInfo_NodeProfileRoleType proto.InternalMessageInfo

func (m *NodeProfileRoleType) GetPhysicalRole() string {
	if m != nil {
		return m.PhysicalRole
	}
	return ""
}

func (m *NodeProfileRoleType) GetRBRoles() []string {
	if m != nil {
		return m.RBRoles
	}
	return nil
}

type NodeProfileRolesType struct {
	RoleMappings []*NodeProfileRoleType `protobuf:"bytes,1,rep,name=role_mappings,json=roleMappings,proto3" json:"role_mappings,omitempty" yaml:"role_mappings,omitempty"`
}

func (m *NodeProfileRolesType) Reset()      { *m = NodeProfileRolesType{} }
func (*NodeProfileRolesType) ProtoMessage() {}
func (*NodeProfileRolesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{503}
}
func (m *NodeProfileRolesType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeProfileRolesType.Unmarshal(m, b)
}
func (m *NodeProfileRolesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeProfileRolesType.Marshal(b, m, deterministic)
}
func (m *NodeProfileRolesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeProfileRolesType.Merge(m, src)
}
func (m *NodeProfileRolesType) XXX_Size() int {
	return xxx_messageInfo_NodeProfileRolesType.Size(m)
}
func (m *NodeProfileRolesType) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeProfileRolesType.DiscardUnknown(m)
}

var xxx_messageInfo_NodeProfileRolesType proto.InternalMessageInfo

func (m *NodeProfileRolesType) GetRoleMappings() []*NodeProfileRoleType {
	if m != nil {
		return m.RoleMappings
	}
	return nil
}

type PermType struct {
	Group       string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty" yaml:"group,omitempty"`
	GroupAccess int64  `protobuf:"varint,2,opt,name=group_access,json=groupAccess,proto3" json:"group_access,omitempty" yaml:"group_access,omitempty"`
	OtherAccess int64  `protobuf:"varint,3,opt,name=other_access,json=otherAccess,proto3" json:"other_access,omitempty" yaml:"other_access,omitempty"`
	Owner       string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner,omitempty"`
	OwnerAccess int64  `protobuf:"varint,5,opt,name=owner_access,json=ownerAccess,proto3" json:"owner_access,omitempty" yaml:"owner_access,omitempty"`
}

func (m *PermType) Reset()      { *m = PermType{} }
func (*PermType) ProtoMessage() {}
func (*PermType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{504}
}
func (m *PermType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PermType.Unmarshal(m, b)
}
func (m *PermType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PermType.Marshal(b, m, deterministic)
}
func (m *PermType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermType.Merge(m, src)
}
func (m *PermType) XXX_Size() int {
	return xxx_messageInfo_PermType.Size(m)
}
func (m *PermType) XXX_DiscardUnknown() {
	xxx_messageInfo_PermType.DiscardUnknown(m)
}

var xxx_messageInfo_PermType proto.InternalMessageInfo

func (m *PermType) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *PermType) GetGroupAccess() int64 {
	if m != nil {
		return m.GroupAccess
	}
	return 0
}

func (m *PermType) GetOtherAccess() int64 {
	if m != nil {
		return m.OtherAccess
	}
	return 0
}

func (m *PermType) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *PermType) GetOwnerAccess() int64 {
	if m != nil {
		return m.OwnerAccess
	}
	return 0
}

// Omitempty JSON tag is removed from fields of PermType2 type, because it caused issues in REST API clients
// which expected all fields to be present. To achieve that "gogoproto.jsontag" extension is used.
type PermType2 struct {
	GlobalAccess int64        `protobuf:"varint,1,opt,name=global_access,json=globalAccess,proto3" json:"global_access" yaml:"global_access,omitempty"`
	Owner        string       `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner" yaml:"owner,omitempty"`
	OwnerAccess  int64        `protobuf:"varint,3,opt,name=owner_access,json=ownerAccess,proto3" json:"owner_access" yaml:"owner_access,omitempty"`
	Share        []*ShareType `protobuf:"bytes,4,rep,name=share,proto3" json:"share" yaml:"share,omitempty"`
}

func (m *PermType2) Reset()      { *m = PermType2{} }
func (*PermType2) ProtoMessage() {}
func (*PermType2) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{505}
}
func (m *PermType2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PermType2.Unmarshal(m, b)
}
func (m *PermType2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PermType2.Marshal(b, m, deterministic)
}
func (m *PermType2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermType2.Merge(m, src)
}
func (m *PermType2) XXX_Size() int {
	return xxx_messageInfo_PermType2.Size(m)
}
func (m *PermType2) XXX_DiscardUnknown() {
	xxx_messageInfo_PermType2.DiscardUnknown(m)
}

var xxx_messageInfo_PermType2 proto.InternalMessageInfo

func (m *PermType2) GetGlobalAccess() int64 {
	if m != nil {
		return m.GlobalAccess
	}
	return 0
}

func (m *PermType2) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *PermType2) GetOwnerAccess() int64 {
	if m != nil {
		return m.OwnerAccess
	}
	return 0
}

func (m *PermType2) GetShare() []*ShareType {
	if m != nil {
		return m.Share
	}
	return nil
}

type PlaybookInfoListType struct {
	PlaybookInfo []*PlaybookInfoType `protobuf:"bytes,1,rep,name=playbook_info,json=playbookInfo,proto3" json:"playbook_info,omitempty" yaml:"playbook_info,omitempty"`
}

func (m *PlaybookInfoListType) Reset()      { *m = PlaybookInfoListType{} }
func (*PlaybookInfoListType) ProtoMessage() {}
func (*PlaybookInfoListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{506}
}
func (m *PlaybookInfoListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaybookInfoListType.Unmarshal(m, b)
}
func (m *PlaybookInfoListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaybookInfoListType.Marshal(b, m, deterministic)
}
func (m *PlaybookInfoListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaybookInfoListType.Merge(m, src)
}
func (m *PlaybookInfoListType) XXX_Size() int {
	return xxx_messageInfo_PlaybookInfoListType.Size(m)
}
func (m *PlaybookInfoListType) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaybookInfoListType.DiscardUnknown(m)
}

var xxx_messageInfo_PlaybookInfoListType proto.InternalMessageInfo

func (m *PlaybookInfoListType) GetPlaybookInfo() []*PlaybookInfoType {
	if m != nil {
		return m.PlaybookInfo
	}
	return nil
}

type PlaybookInfoType struct {
	DeviceFamily           string `protobuf:"bytes,1,opt,name=device_family,json=deviceFamily,proto3" json:"device_family,omitempty" yaml:"device_family,omitempty"`
	JobCompletionWeightage int64  `protobuf:"varint,2,opt,name=job_completion_weightage,json=jobCompletionWeightage,proto3" json:"job_completion_weightage,omitempty" yaml:"job_completion_weightage,omitempty"`
	MultiDevicePlaybook    bool   `protobuf:"varint,3,opt,name=multi_device_playbook,json=multiDevicePlaybook,proto3" json:"multi_device_playbook,omitempty" yaml:"multi_device_playbook,omitempty"`
	PlaybookURI            string `protobuf:"bytes,4,opt,name=playbook_uri,json=playbookUri,proto3" json:"playbook_uri,omitempty" yaml:"playbook_uri,omitempty"`
	SequenceNo             int64  `protobuf:"varint,5,opt,name=sequence_no,json=sequenceNo,proto3" json:"sequence_no,omitempty" yaml:"sequence_no,omitempty"`
	Vendor                 string `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty" yaml:"vendor,omitempty"`
}

func (m *PlaybookInfoType) Reset()      { *m = PlaybookInfoType{} }
func (*PlaybookInfoType) ProtoMessage() {}
func (*PlaybookInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{507}
}
func (m *PlaybookInfoType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaybookInfoType.Unmarshal(m, b)
}
func (m *PlaybookInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaybookInfoType.Marshal(b, m, deterministic)
}
func (m *PlaybookInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaybookInfoType.Merge(m, src)
}
func (m *PlaybookInfoType) XXX_Size() int {
	return xxx_messageInfo_PlaybookInfoType.Size(m)
}
func (m *PlaybookInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaybookInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_PlaybookInfoType proto.InternalMessageInfo

func (m *PlaybookInfoType) GetDeviceFamily() string {
	if m != nil {
		return m.DeviceFamily
	}
	return ""
}

func (m *PlaybookInfoType) GetJobCompletionWeightage() int64 {
	if m != nil {
		return m.JobCompletionWeightage
	}
	return 0
}

func (m *PlaybookInfoType) GetMultiDevicePlaybook() bool {
	if m != nil {
		return m.MultiDevicePlaybook
	}
	return false
}

func (m *PlaybookInfoType) GetPlaybookURI() string {
	if m != nil {
		return m.PlaybookURI
	}
	return ""
}

func (m *PlaybookInfoType) GetSequenceNo() int64 {
	if m != nil {
		return m.SequenceNo
	}
	return 0
}

func (m *PlaybookInfoType) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

type PluginProperties struct {
	PluginProperty []*PluginProperty `protobuf:"bytes,1,rep,name=plugin_property,json=pluginProperty,proto3" json:"plugin_property,omitempty" yaml:"plugin_property,omitempty"`
}

func (m *PluginProperties) Reset()      { *m = PluginProperties{} }
func (*PluginProperties) ProtoMessage() {}
func (*PluginProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{508}
}
func (m *PluginProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginProperties.Unmarshal(m, b)
}
func (m *PluginProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginProperties.Marshal(b, m, deterministic)
}
func (m *PluginProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginProperties.Merge(m, src)
}
func (m *PluginProperties) XXX_Size() int {
	return xxx_messageInfo_PluginProperties.Size(m)
}
func (m *PluginProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginProperties.DiscardUnknown(m)
}

var xxx_messageInfo_PluginProperties proto.InternalMessageInfo

func (m *PluginProperties) GetPluginProperty() []*PluginProperty {
	if m != nil {
		return m.PluginProperty
	}
	return nil
}

type PluginProperty struct {
	Property string `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty" yaml:"property,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty" yaml:"value,omitempty"`
}

func (m *PluginProperty) Reset()      { *m = PluginProperty{} }
func (*PluginProperty) ProtoMessage() {}
func (*PluginProperty) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{509}
}
func (m *PluginProperty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginProperty.Unmarshal(m, b)
}
func (m *PluginProperty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginProperty.Marshal(b, m, deterministic)
}
func (m *PluginProperty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginProperty.Merge(m, src)
}
func (m *PluginProperty) XXX_Size() int {
	return xxx_messageInfo_PluginProperty.Size(m)
}
func (m *PluginProperty) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginProperty.DiscardUnknown(m)
}

var xxx_messageInfo_PluginProperty proto.InternalMessageInfo

func (m *PluginProperty) GetProperty() string {
	if m != nil {
		return m.Property
	}
	return ""
}

func (m *PluginProperty) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type PolicyBasedForwardingRuleType struct {
	Direction               string `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty" yaml:"direction,omitempty"`
	DSTMac                  string `protobuf:"bytes,2,opt,name=dst_mac,json=dstMac,proto3" json:"dst_mac,omitempty" yaml:"dst_mac,omitempty"`
	Ipv6ServiceChainAddress string `protobuf:"bytes,3,opt,name=ipv6_service_chain_address,json=ipv6ServiceChainAddress,proto3" json:"ipv6_service_chain_address,omitempty" yaml:"ipv6_service_chain_address,omitempty"`
	MPLSLabel               int64  `protobuf:"varint,4,opt,name=mpls_label,json=mplsLabel,proto3" json:"mpls_label,omitempty" yaml:"mpls_label,omitempty"`
	Protocol                string `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty" yaml:"protocol,omitempty"`
	ServiceChainAddress     string `protobuf:"bytes,6,opt,name=service_chain_address,json=serviceChainAddress,proto3" json:"service_chain_address,omitempty" yaml:"service_chain_address,omitempty"`
	SRCMac                  string `protobuf:"bytes,7,opt,name=src_mac,json=srcMac,proto3" json:"src_mac,omitempty" yaml:"src_mac,omitempty"`
	VlanTag                 int64  `protobuf:"varint,8,opt,name=vlan_tag,json=vlanTag,proto3" json:"vlan_tag,omitempty" yaml:"vlan_tag,omitempty"`
}

func (m *PolicyBasedForwardingRuleType) Reset()      { *m = PolicyBasedForwardingRuleType{} }
func (*PolicyBasedForwardingRuleType) ProtoMessage() {}
func (*PolicyBasedForwardingRuleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{510}
}
func (m *PolicyBasedForwardingRuleType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyBasedForwardingRuleType.Unmarshal(m, b)
}
func (m *PolicyBasedForwardingRuleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyBasedForwardingRuleType.Marshal(b, m, deterministic)
}
func (m *PolicyBasedForwardingRuleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyBasedForwardingRuleType.Merge(m, src)
}
func (m *PolicyBasedForwardingRuleType) XXX_Size() int {
	return xxx_messageInfo_PolicyBasedForwardingRuleType.Size(m)
}
func (m *PolicyBasedForwardingRuleType) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyBasedForwardingRuleType.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyBasedForwardingRuleType proto.InternalMessageInfo

func (m *PolicyBasedForwardingRuleType) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *PolicyBasedForwardingRuleType) GetDSTMac() string {
	if m != nil {
		return m.DSTMac
	}
	return ""
}

func (m *PolicyBasedForwardingRuleType) GetIpv6ServiceChainAddress() string {
	if m != nil {
		return m.Ipv6ServiceChainAddress
	}
	return ""
}

func (m *PolicyBasedForwardingRuleType) GetMPLSLabel() int64 {
	if m != nil {
		return m.MPLSLabel
	}
	return 0
}

func (m *PolicyBasedForwardingRuleType) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *PolicyBasedForwardingRuleType) GetServiceChainAddress() string {
	if m != nil {
		return m.ServiceChainAddress
	}
	return ""
}

func (m *PolicyBasedForwardingRuleType) GetSRCMac() string {
	if m != nil {
		return m.SRCMac
	}
	return ""
}

func (m *PolicyBasedForwardingRuleType) GetVlanTag() int64 {
	if m != nil {
		return m.VlanTag
	}
	return 0
}

type PolicyEntriesType struct {
	PolicyRule []*PolicyRuleType `protobuf:"bytes,1,rep,name=policy_rule,json=policyRule,proto3" json:"policy_rule,omitempty" yaml:"policy_rule,omitempty"`
}

func (m *PolicyEntriesType) Reset()      { *m = PolicyEntriesType{} }
func (*PolicyEntriesType) ProtoMessage() {}
func (*PolicyEntriesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{511}
}
func (m *PolicyEntriesType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyEntriesType.Unmarshal(m, b)
}
func (m *PolicyEntriesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyEntriesType.Marshal(b, m, deterministic)
}
func (m *PolicyEntriesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyEntriesType.Merge(m, src)
}
func (m *PolicyEntriesType) XXX_Size() int {
	return xxx_messageInfo_PolicyEntriesType.Size(m)
}
func (m *PolicyEntriesType) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyEntriesType.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyEntriesType proto.InternalMessageInfo

func (m *PolicyEntriesType) GetPolicyRule() []*PolicyRuleType {
	if m != nil {
		return m.PolicyRule
	}
	return nil
}

type PolicyRuleType struct {
	ActionList   *ActionListType `protobuf:"bytes,1,opt,name=action_list,json=actionList,proto3" json:"action_list,omitempty" yaml:"action_list,omitempty"`
	Application  []string        `protobuf:"bytes,2,rep,name=application,proto3" json:"application,omitempty" yaml:"application,omitempty"`
	Created      string          `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty" yaml:"created,omitempty"`
	Direction    string          `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty" yaml:"direction,omitempty"`
	DSTAddresses []*AddressType  `protobuf:"bytes,5,rep,name=dst_addresses,json=dstAddresses,proto3" json:"dst_addresses,omitempty" yaml:"dst_addresses,omitempty"`
	DSTPorts     []*PortType     `protobuf:"bytes,6,rep,name=dst_ports,json=dstPorts,proto3" json:"dst_ports,omitempty" yaml:"dst_ports,omitempty"`
	Ethertype    string          `protobuf:"bytes,7,opt,name=ethertype,proto3" json:"ethertype,omitempty" yaml:"ethertype,omitempty"`
	LastModified string          `protobuf:"bytes,8,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty" yaml:"last_modified,omitempty"`
	Protocol     string          `protobuf:"bytes,9,opt,name=protocol,proto3" json:"protocol,omitempty" yaml:"protocol,omitempty"`
	RuleSequence *SequenceType   `protobuf:"bytes,10,opt,name=rule_sequence,json=ruleSequence,proto3" json:"rule_sequence,omitempty" yaml:"rule_sequence,omitempty"`
	RuleUUID     string          `protobuf:"bytes,11,opt,name=rule_uuid,json=ruleUuid,proto3" json:"rule_uuid,omitempty" yaml:"rule_uuid,omitempty"`
	SRCAddresses []*AddressType  `protobuf:"bytes,12,rep,name=src_addresses,json=srcAddresses,proto3" json:"src_addresses,omitempty" yaml:"src_addresses,omitempty"`
	SRCPorts     []*PortType     `protobuf:"bytes,13,rep,name=src_ports,json=srcPorts,proto3" json:"src_ports,omitempty" yaml:"src_ports,omitempty"`
}

func (m *PolicyRuleType) Reset()      { *m = PolicyRuleType{} }
func (*PolicyRuleType) ProtoMessage() {}
func (*PolicyRuleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{512}
}
func (m *PolicyRuleType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyRuleType.Unmarshal(m, b)
}
func (m *PolicyRuleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyRuleType.Marshal(b, m, deterministic)
}
func (m *PolicyRuleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyRuleType.Merge(m, src)
}
func (m *PolicyRuleType) XXX_Size() int {
	return xxx_messageInfo_PolicyRuleType.Size(m)
}
func (m *PolicyRuleType) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyRuleType.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyRuleType proto.InternalMessageInfo

func (m *PolicyRuleType) GetActionList() *ActionListType {
	if m != nil {
		return m.ActionList
	}
	return nil
}

func (m *PolicyRuleType) GetApplication() []string {
	if m != nil {
		return m.Application
	}
	return nil
}

func (m *PolicyRuleType) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *PolicyRuleType) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *PolicyRuleType) GetDSTAddresses() []*AddressType {
	if m != nil {
		return m.DSTAddresses
	}
	return nil
}

func (m *PolicyRuleType) GetDSTPorts() []*PortType {
	if m != nil {
		return m.DSTPorts
	}
	return nil
}

func (m *PolicyRuleType) GetEthertype() string {
	if m != nil {
		return m.Ethertype
	}
	return ""
}

func (m *PolicyRuleType) GetLastModified() string {
	if m != nil {
		return m.LastModified
	}
	return ""
}

func (m *PolicyRuleType) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *PolicyRuleType) GetRuleSequence() *SequenceType {
	if m != nil {
		return m.RuleSequence
	}
	return nil
}

func (m *PolicyRuleType) GetRuleUUID() string {
	if m != nil {
		return m.RuleUUID
	}
	return ""
}

func (m *PolicyRuleType) GetSRCAddresses() []*AddressType {
	if m != nil {
		return m.SRCAddresses
	}
	return nil
}

func (m *PolicyRuleType) GetSRCPorts() []*PortType {
	if m != nil {
		return m.SRCPorts
	}
	return nil
}

type PolicyStatementType struct {
	Term []*PolicyTermType `protobuf:"bytes,1,rep,name=term,proto3" json:"term,omitempty" yaml:"term,omitempty"`
}

func (m *PolicyStatementType) Reset()      { *m = PolicyStatementType{} }
func (*PolicyStatementType) ProtoMessage() {}
func (*PolicyStatementType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{513}
}
func (m *PolicyStatementType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyStatementType.Unmarshal(m, b)
}
func (m *PolicyStatementType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyStatementType.Marshal(b, m, deterministic)
}
func (m *PolicyStatementType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyStatementType.Merge(m, src)
}
func (m *PolicyStatementType) XXX_Size() int {
	return xxx_messageInfo_PolicyStatementType.Size(m)
}
func (m *PolicyStatementType) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyStatementType.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyStatementType proto.InternalMessageInfo

func (m *PolicyStatementType) GetTerm() []*PolicyTermType {
	if m != nil {
		return m.Term
	}
	return nil
}

type PolicyTermType struct {
	TermActionList     *TermActionListType     `protobuf:"bytes,1,opt,name=term_action_list,json=termActionList,proto3" json:"term_action_list,omitempty" yaml:"term_action_list,omitempty"`
	TermMatchCondition *TermMatchConditionType `protobuf:"bytes,2,opt,name=term_match_condition,json=termMatchCondition,proto3" json:"term_match_condition,omitempty" yaml:"term_match_condition,omitempty"`
}

func (m *PolicyTermType) Reset()      { *m = PolicyTermType{} }
func (*PolicyTermType) ProtoMessage() {}
func (*PolicyTermType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{514}
}
func (m *PolicyTermType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PolicyTermType.Unmarshal(m, b)
}
func (m *PolicyTermType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PolicyTermType.Marshal(b, m, deterministic)
}
func (m *PolicyTermType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyTermType.Merge(m, src)
}
func (m *PolicyTermType) XXX_Size() int {
	return xxx_messageInfo_PolicyTermType.Size(m)
}
func (m *PolicyTermType) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyTermType.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyTermType proto.InternalMessageInfo

func (m *PolicyTermType) GetTermActionList() *TermActionListType {
	if m != nil {
		return m.TermActionList
	}
	return nil
}

func (m *PolicyTermType) GetTermMatchCondition() *TermMatchConditionType {
	if m != nil {
		return m.TermMatchCondition
	}
	return nil
}

type PortGroupProperties struct {
	Miimon         int64  `protobuf:"varint,1,opt,name=miimon,proto3" json:"miimon,omitempty" yaml:"miimon,omitempty"`
	XmitHashPolicy string `protobuf:"bytes,2,opt,name=xmit_hash_policy,json=xmitHashPolicy,proto3" json:"xmit_hash_policy,omitempty" yaml:"xmit_hash_policy,omitempty"`
}

func (m *PortGroupProperties) Reset()      { *m = PortGroupProperties{} }
func (*PortGroupProperties) ProtoMessage() {}
func (*PortGroupProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{515}
}
func (m *PortGroupProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortGroupProperties.Unmarshal(m, b)
}
func (m *PortGroupProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortGroupProperties.Marshal(b, m, deterministic)
}
func (m *PortGroupProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortGroupProperties.Merge(m, src)
}
func (m *PortGroupProperties) XXX_Size() int {
	return xxx_messageInfo_PortGroupProperties.Size(m)
}
func (m *PortGroupProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_PortGroupProperties.DiscardUnknown(m)
}

var xxx_messageInfo_PortGroupProperties proto.InternalMessageInfo

func (m *PortGroupProperties) GetMiimon() int64 {
	if m != nil {
		return m.Miimon
	}
	return 0
}

func (m *PortGroupProperties) GetXmitHashPolicy() string {
	if m != nil {
		return m.XmitHashPolicy
	}
	return ""
}

type PortInfoType struct {
	Channelized          bool     `protobuf:"varint,1,opt,name=channelized,proto3" json:"channelized,omitempty" yaml:"channelized,omitempty"`
	ChannelizedPortSpeed string   `protobuf:"bytes,2,opt,name=channelized_port_speed,json=channelizedPortSpeed,proto3" json:"channelized_port_speed,omitempty" yaml:"channelized_port_speed,omitempty"`
	Labels               []string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" yaml:"labels,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	PortGroup            string   `protobuf:"bytes,5,opt,name=port_group,json=portGroup,proto3" json:"port_group,omitempty" yaml:"port_group,omitempty"`
	PortSpeed            string   `protobuf:"bytes,6,opt,name=port_speed,json=portSpeed,proto3" json:"port_speed,omitempty" yaml:"port_speed,omitempty"`
	Type                 string   `protobuf:"bytes,7,opt,name=type_,json=type,proto3" json:"type_,omitempty" yaml:"type_,omitempty"`
}

func (m *PortInfoType) Reset()      { *m = PortInfoType{} }
func (*PortInfoType) ProtoMessage() {}
func (*PortInfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{516}
}
func (m *PortInfoType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortInfoType.Unmarshal(m, b)
}
func (m *PortInfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortInfoType.Marshal(b, m, deterministic)
}
func (m *PortInfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortInfoType.Merge(m, src)
}
func (m *PortInfoType) XXX_Size() int {
	return xxx_messageInfo_PortInfoType.Size(m)
}
func (m *PortInfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_PortInfoType.DiscardUnknown(m)
}

var xxx_messageInfo_PortInfoType proto.InternalMessageInfo

func (m *PortInfoType) GetChannelized() bool {
	if m != nil {
		return m.Channelized
	}
	return false
}

func (m *PortInfoType) GetChannelizedPortSpeed() string {
	if m != nil {
		return m.ChannelizedPortSpeed
	}
	return ""
}

func (m *PortInfoType) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *PortInfoType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PortInfoType) GetPortGroup() string {
	if m != nil {
		return m.PortGroup
	}
	return ""
}

func (m *PortInfoType) GetPortSpeed() string {
	if m != nil {
		return m.PortSpeed
	}
	return ""
}

func (m *PortInfoType) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type PortMap struct {
	DSTPort  int64  `protobuf:"varint,1,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty" yaml:"dst_port,omitempty"`
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty" yaml:"protocol,omitempty"`
	SRCPort  int64  `protobuf:"varint,3,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty" yaml:"src_port,omitempty"`
}

func (m *PortMap) Reset()      { *m = PortMap{} }
func (*PortMap) ProtoMessage() {}
func (*PortMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{517}
}
func (m *PortMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortMap.Unmarshal(m, b)
}
func (m *PortMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortMap.Marshal(b, m, deterministic)
}
func (m *PortMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortMap.Merge(m, src)
}
func (m *PortMap) XXX_Size() int {
	return xxx_messageInfo_PortMap.Size(m)
}
func (m *PortMap) XXX_DiscardUnknown() {
	xxx_messageInfo_PortMap.DiscardUnknown(m)
}

var xxx_messageInfo_PortMap proto.InternalMessageInfo

func (m *PortMap) GetDSTPort() int64 {
	if m != nil {
		return m.DSTPort
	}
	return 0
}

func (m *PortMap) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *PortMap) GetSRCPort() int64 {
	if m != nil {
		return m.SRCPort
	}
	return 0
}

type PortMappings struct {
	PortMappings []*PortMap `protobuf:"bytes,1,rep,name=port_mappings,json=portMappings,proto3" json:"port_mappings,omitempty" yaml:"port_mappings,omitempty"`
}

func (m *PortMappings) Reset()      { *m = PortMappings{} }
func (*PortMappings) ProtoMessage() {}
func (*PortMappings) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{518}
}
func (m *PortMappings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortMappings.Unmarshal(m, b)
}
func (m *PortMappings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortMappings.Marshal(b, m, deterministic)
}
func (m *PortMappings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortMappings.Merge(m, src)
}
func (m *PortMappings) XXX_Size() int {
	return xxx_messageInfo_PortMappings.Size(m)
}
func (m *PortMappings) XXX_DiscardUnknown() {
	xxx_messageInfo_PortMappings.DiscardUnknown(m)
}

var xxx_messageInfo_PortMappings proto.InternalMessageInfo

func (m *PortMappings) GetPortMappings() []*PortMap {
	if m != nil {
		return m.PortMappings
	}
	return nil
}

type PortTranslationPool struct {
	PortCount string    `protobuf:"bytes,1,opt,name=port_count,json=portCount,proto3" json:"port_count,omitempty" yaml:"port_count,omitempty"`
	PortRange *PortType `protobuf:"bytes,2,opt,name=port_range,json=portRange,proto3" json:"port_range,omitempty" yaml:"port_range,omitempty"`
	Protocol  string    `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty" yaml:"protocol,omitempty"`
}

func (m *PortTranslationPool) Reset()      { *m = PortTranslationPool{} }
func (*PortTranslationPool) ProtoMessage() {}
func (*PortTranslationPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{519}
}
func (m *PortTranslationPool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortTranslationPool.Unmarshal(m, b)
}
func (m *PortTranslationPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortTranslationPool.Marshal(b, m, deterministic)
}
func (m *PortTranslationPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortTranslationPool.Merge(m, src)
}
func (m *PortTranslationPool) XXX_Size() int {
	return xxx_messageInfo_PortTranslationPool.Size(m)
}
func (m *PortTranslationPool) XXX_DiscardUnknown() {
	xxx_messageInfo_PortTranslationPool.DiscardUnknown(m)
}

var xxx_messageInfo_PortTranslationPool proto.InternalMessageInfo

func (m *PortTranslationPool) GetPortCount() string {
	if m != nil {
		return m.PortCount
	}
	return ""
}

func (m *PortTranslationPool) GetPortRange() *PortType {
	if m != nil {
		return m.PortRange
	}
	return nil
}

func (m *PortTranslationPool) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type PortTranslationPools struct {
	PortTranslationPool []*PortTranslationPool `protobuf:"bytes,1,rep,name=port_translation_pool,json=portTranslationPool,proto3" json:"port_translation_pool,omitempty" yaml:"port_translation_pool,omitempty"`
}

func (m *PortTranslationPools) Reset()      { *m = PortTranslationPools{} }
func (*PortTranslationPools) ProtoMessage() {}
func (*PortTranslationPools) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{520}
}
func (m *PortTranslationPools) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortTranslationPools.Unmarshal(m, b)
}
func (m *PortTranslationPools) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortTranslationPools.Marshal(b, m, deterministic)
}
func (m *PortTranslationPools) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortTranslationPools.Merge(m, src)
}
func (m *PortTranslationPools) XXX_Size() int {
	return xxx_messageInfo_PortTranslationPools.Size(m)
}
func (m *PortTranslationPools) XXX_DiscardUnknown() {
	xxx_messageInfo_PortTranslationPools.DiscardUnknown(m)
}

var xxx_messageInfo_PortTranslationPools proto.InternalMessageInfo

func (m *PortTranslationPools) GetPortTranslationPool() []*PortTranslationPool {
	if m != nil {
		return m.PortTranslationPool
	}
	return nil
}

type PortType struct {
	EndPort   int64 `protobuf:"varint,1,opt,name=end_port,json=endPort,proto3" json:"end_port,omitempty" yaml:"end_port,omitempty"`
	StartPort int64 `protobuf:"varint,2,opt,name=start_port,json=startPort,proto3" json:"start_port,omitempty" yaml:"start_port,omitempty"`
}

func (m *PortType) Reset()      { *m = PortType{} }
func (*PortType) ProtoMessage() {}
func (*PortType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{521}
}
func (m *PortType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortType.Unmarshal(m, b)
}
func (m *PortType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortType.Marshal(b, m, deterministic)
}
func (m *PortType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortType.Merge(m, src)
}
func (m *PortType) XXX_Size() int {
	return xxx_messageInfo_PortType.Size(m)
}
func (m *PortType) XXX_DiscardUnknown() {
	xxx_messageInfo_PortType.DiscardUnknown(m)
}

var xxx_messageInfo_PortType proto.InternalMessageInfo

func (m *PortType) GetEndPort() int64 {
	if m != nil {
		return m.EndPort
	}
	return 0
}

func (m *PortType) GetStartPort() int64 {
	if m != nil {
		return m.StartPort
	}
	return 0
}

type PrefixMatchType struct {
	Prefix     string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty" yaml:"prefix,omitempty"`
	PrefixType string `protobuf:"bytes,2,opt,name=prefix_type,json=prefixType,proto3" json:"prefix_type,omitempty" yaml:"prefix_type,omitempty"`
}

func (m *PrefixMatchType) Reset()      { *m = PrefixMatchType{} }
func (*PrefixMatchType) ProtoMessage() {}
func (*PrefixMatchType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{522}
}
func (m *PrefixMatchType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrefixMatchType.Unmarshal(m, b)
}
func (m *PrefixMatchType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrefixMatchType.Marshal(b, m, deterministic)
}
func (m *PrefixMatchType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixMatchType.Merge(m, src)
}
func (m *PrefixMatchType) XXX_Size() int {
	return xxx_messageInfo_PrefixMatchType.Size(m)
}
func (m *PrefixMatchType) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixMatchType.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixMatchType proto.InternalMessageInfo

func (m *PrefixMatchType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *PrefixMatchType) GetPrefixType() string {
	if m != nil {
		return m.PrefixType
	}
	return ""
}

type ProtocolBgpType struct {
	AutonomousSystem int64 `protobuf:"varint,1,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty" yaml:"autonomous_system,omitempty"`
}

func (m *ProtocolBgpType) Reset()      { *m = ProtocolBgpType{} }
func (*ProtocolBgpType) ProtoMessage() {}
func (*ProtocolBgpType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{523}
}
func (m *ProtocolBgpType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolBgpType.Unmarshal(m, b)
}
func (m *ProtocolBgpType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolBgpType.Marshal(b, m, deterministic)
}
func (m *ProtocolBgpType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolBgpType.Merge(m, src)
}
func (m *ProtocolBgpType) XXX_Size() int {
	return xxx_messageInfo_ProtocolBgpType.Size(m)
}
func (m *ProtocolBgpType) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolBgpType.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolBgpType proto.InternalMessageInfo

func (m *ProtocolBgpType) GetAutonomousSystem() int64 {
	if m != nil {
		return m.AutonomousSystem
	}
	return 0
}

type ProtocolOspfType struct {
	Area int64 `protobuf:"varint,1,opt,name=area,proto3" json:"area,omitempty" yaml:"area,omitempty"`
}

func (m *ProtocolOspfType) Reset()      { *m = ProtocolOspfType{} }
func (*ProtocolOspfType) ProtoMessage() {}
func (*ProtocolOspfType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{524}
}
func (m *ProtocolOspfType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolOspfType.Unmarshal(m, b)
}
func (m *ProtocolOspfType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolOspfType.Marshal(b, m, deterministic)
}
func (m *ProtocolOspfType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolOspfType.Merge(m, src)
}
func (m *ProtocolOspfType) XXX_Size() int {
	return xxx_messageInfo_ProtocolOspfType.Size(m)
}
func (m *ProtocolOspfType) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolOspfType.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolOspfType proto.InternalMessageInfo

func (m *ProtocolOspfType) GetArea() int64 {
	if m != nil {
		return m.Area
	}
	return 0
}

type ProtocolType struct {
	DestinationAggregatePrefixLength int64       `protobuf:"varint,1,opt,name=destination_aggregate_prefix_length,json=destinationAggregatePrefixLength,proto3" json:"destination_aggregate_prefix_length,omitempty" yaml:"destination_aggregate_prefix_length,omitempty"`
	DestinationPrefix                *SubnetType `protobuf:"bytes,2,opt,name=destination_prefix,json=destinationPrefix,proto3" json:"destination_prefix,omitempty" yaml:"destination_prefix,omitempty"`
	IgnoreAddress                    string      `protobuf:"bytes,3,opt,name=ignore_address,json=ignoreAddress,proto3" json:"ignore_address,omitempty" yaml:"ignore_address,omitempty"`
	Port                             int64       `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty" yaml:"port,omitempty"`
	Protocol                         string      `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty" yaml:"protocol,omitempty"`
	SourceAggregatePrefixLength      int64       `protobuf:"varint,6,opt,name=source_aggregate_prefix_length,json=sourceAggregatePrefixLength,proto3" json:"source_aggregate_prefix_length,omitempty" yaml:"source_aggregate_prefix_length,omitempty"`
	SourcePrefix                     *SubnetType `protobuf:"bytes,7,opt,name=source_prefix,json=sourcePrefix,proto3" json:"source_prefix,omitempty" yaml:"source_prefix,omitempty"`
}

func (m *ProtocolType) Reset()      { *m = ProtocolType{} }
func (*ProtocolType) ProtoMessage() {}
func (*ProtocolType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{525}
}
func (m *ProtocolType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtocolType.Unmarshal(m, b)
}
func (m *ProtocolType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtocolType.Marshal(b, m, deterministic)
}
func (m *ProtocolType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolType.Merge(m, src)
}
func (m *ProtocolType) XXX_Size() int {
	return xxx_messageInfo_ProtocolType.Size(m)
}
func (m *ProtocolType) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolType.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolType proto.InternalMessageInfo

func (m *ProtocolType) GetDestinationAggregatePrefixLength() int64 {
	if m != nil {
		return m.DestinationAggregatePrefixLength
	}
	return 0
}

func (m *ProtocolType) GetDestinationPrefix() *SubnetType {
	if m != nil {
		return m.DestinationPrefix
	}
	return nil
}

func (m *ProtocolType) GetIgnoreAddress() string {
	if m != nil {
		return m.IgnoreAddress
	}
	return ""
}

func (m *ProtocolType) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ProtocolType) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *ProtocolType) GetSourceAggregatePrefixLength() int64 {
	if m != nil {
		return m.SourceAggregatePrefixLength
	}
	return 0
}

func (m *ProtocolType) GetSourcePrefix() *SubnetType {
	if m != nil {
		return m.SourcePrefix
	}
	return nil
}

type ProviderDetails struct {
	PhysicalNetwork string `protobuf:"bytes,1,opt,name=physical_network,json=physicalNetwork,proto3" json:"physical_network,omitempty" yaml:"physical_network,omitempty"`
	SegmentationID  int64  `protobuf:"varint,2,opt,name=segmentation_id,json=segmentationId,proto3" json:"segmentation_id,omitempty" yaml:"segmentation_id,omitempty"`
}

func (m *ProviderDetails) Reset()      { *m = ProviderDetails{} }
func (*ProviderDetails) ProtoMessage() {}
func (*ProviderDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{526}
}
func (m *ProviderDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProviderDetails.Unmarshal(m, b)
}
func (m *ProviderDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProviderDetails.Marshal(b, m, deterministic)
}
func (m *ProviderDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderDetails.Merge(m, src)
}
func (m *ProviderDetails) XXX_Size() int {
	return xxx_messageInfo_ProviderDetails.Size(m)
}
func (m *ProviderDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderDetails proto.InternalMessageInfo

func (m *ProviderDetails) GetPhysicalNetwork() string {
	if m != nil {
		return m.PhysicalNetwork
	}
	return ""
}

func (m *ProviderDetails) GetSegmentationID() int64 {
	if m != nil {
		return m.SegmentationID
	}
	return 0
}

// Omitempty JSON tag is removed from fields of QosIdForwardingClassPair type, because it caused issues in REST API clients
// which expected all fields to be present. To achieve that "gogoproto.jsontag" extension is used.
type QosIdForwardingClassPair struct {
	ForwardingClassID int64 `protobuf:"varint,1,opt,name=forwarding_class_id,json=forwardingClassId,proto3" json:"forwarding_class_id" yaml:"forwarding_class_id,omitempty"`
	Key               int64 `protobuf:"varint,2,opt,name=key,proto3" json:"key" yaml:"key,omitempty"`
}

func (m *QosIdForwardingClassPair) Reset()      { *m = QosIdForwardingClassPair{} }
func (*QosIdForwardingClassPair) ProtoMessage() {}
func (*QosIdForwardingClassPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{527}
}
func (m *QosIdForwardingClassPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QosIdForwardingClassPair.Unmarshal(m, b)
}
func (m *QosIdForwardingClassPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QosIdForwardingClassPair.Marshal(b, m, deterministic)
}
func (m *QosIdForwardingClassPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QosIdForwardingClassPair.Merge(m, src)
}
func (m *QosIdForwardingClassPair) XXX_Size() int {
	return xxx_messageInfo_QosIdForwardingClassPair.Size(m)
}
func (m *QosIdForwardingClassPair) XXX_DiscardUnknown() {
	xxx_messageInfo_QosIdForwardingClassPair.DiscardUnknown(m)
}

var xxx_messageInfo_QosIdForwardingClassPair proto.InternalMessageInfo

func (m *QosIdForwardingClassPair) GetForwardingClassID() int64 {
	if m != nil {
		return m.ForwardingClassID
	}
	return 0
}

func (m *QosIdForwardingClassPair) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

type QosIdForwardingClassPairs struct {
	QosIDForwardingClassPair []*QosIdForwardingClassPair `protobuf:"bytes,1,rep,name=qos_id_forwarding_class_pair,json=qosIdForwardingClassPair,proto3" json:"qos_id_forwarding_class_pair,omitempty" yaml:"qos_id_forwarding_class_pair,omitempty"`
}

func (m *QosIdForwardingClassPairs) Reset()      { *m = QosIdForwardingClassPairs{} }
func (*QosIdForwardingClassPairs) ProtoMessage() {}
func (*QosIdForwardingClassPairs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{528}
}
func (m *QosIdForwardingClassPairs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QosIdForwardingClassPairs.Unmarshal(m, b)
}
func (m *QosIdForwardingClassPairs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QosIdForwardingClassPairs.Marshal(b, m, deterministic)
}
func (m *QosIdForwardingClassPairs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QosIdForwardingClassPairs.Merge(m, src)
}
func (m *QosIdForwardingClassPairs) XXX_Size() int {
	return xxx_messageInfo_QosIdForwardingClassPairs.Size(m)
}
func (m *QosIdForwardingClassPairs) XXX_DiscardUnknown() {
	xxx_messageInfo_QosIdForwardingClassPairs.DiscardUnknown(m)
}

var xxx_messageInfo_QosIdForwardingClassPairs proto.InternalMessageInfo

func (m *QosIdForwardingClassPairs) GetQosIDForwardingClassPair() []*QosIdForwardingClassPair {
	if m != nil {
		return m.QosIDForwardingClassPair
	}
	return nil
}

type QuotaType struct {
	AccessControlList         int64 `protobuf:"varint,1,opt,name=access_control_list,json=accessControlList,proto3" json:"access_control_list,omitempty" yaml:"access_control_list,omitempty"`
	BGPRouter                 int64 `protobuf:"varint,2,opt,name=bgp_router,json=bgpRouter,proto3" json:"bgp_router,omitempty" yaml:"bgp_router,omitempty"`
	Defaults                  int64 `protobuf:"varint,3,opt,name=defaults,proto3" json:"defaults,omitempty" yaml:"defaults,omitempty"`
	FirewallGroup             int64 `protobuf:"varint,4,opt,name=firewall_group,json=firewallGroup,proto3" json:"firewall_group,omitempty" yaml:"firewall_group,omitempty"`
	FirewallPolicy            int64 `protobuf:"varint,5,opt,name=firewall_policy,json=firewallPolicy,proto3" json:"firewall_policy,omitempty" yaml:"firewall_policy,omitempty"`
	FirewallRule              int64 `protobuf:"varint,6,opt,name=firewall_rule,json=firewallRule,proto3" json:"firewall_rule,omitempty" yaml:"firewall_rule,omitempty"`
	FloatingIP                int64 `protobuf:"varint,7,opt,name=floating_ip,json=floatingIp,proto3" json:"floating_ip,omitempty" yaml:"floating_ip,omitempty"`
	FloatingIPPool            int64 `protobuf:"varint,8,opt,name=floating_ip_pool,json=floatingIpPool,proto3" json:"floating_ip_pool,omitempty" yaml:"floating_ip_pool,omitempty"`
	GlobalVrouterConfig       int64 `protobuf:"varint,9,opt,name=global_vrouter_config,json=globalVrouterConfig,proto3" json:"global_vrouter_config,omitempty" yaml:"global_vrouter_config,omitempty"`
	HostBasedService          int64 `protobuf:"varint,10,opt,name=host_based_service,json=hostBasedService,proto3" json:"host_based_service,omitempty" yaml:"host_based_service,omitempty"`
	InstanceIP                int64 `protobuf:"varint,11,opt,name=instance_ip,json=instanceIp,proto3" json:"instance_ip,omitempty" yaml:"instance_ip,omitempty"`
	LoadbalancerHealthmonitor int64 `protobuf:"varint,12,opt,name=loadbalancer_healthmonitor,json=loadbalancerHealthmonitor,proto3" json:"loadbalancer_healthmonitor,omitempty" yaml:"loadbalancer_healthmonitor,omitempty"`
	LoadbalancerMember        int64 `protobuf:"varint,13,opt,name=loadbalancer_member,json=loadbalancerMember,proto3" json:"loadbalancer_member,omitempty" yaml:"loadbalancer_member,omitempty"`
	LoadbalancerPool          int64 `protobuf:"varint,14,opt,name=loadbalancer_pool,json=loadbalancerPool,proto3" json:"loadbalancer_pool,omitempty" yaml:"loadbalancer_pool,omitempty"`
	LogicalRouter             int64 `protobuf:"varint,15,opt,name=logical_router,json=logicalRouter,proto3" json:"logical_router,omitempty" yaml:"logical_router,omitempty"`
	NetworkIpam               int64 `protobuf:"varint,16,opt,name=network_ipam,json=networkIpam,proto3" json:"network_ipam,omitempty" yaml:"network_ipam,omitempty"`
	NetworkPolicy             int64 `protobuf:"varint,17,opt,name=network_policy,json=networkPolicy,proto3" json:"network_policy,omitempty" yaml:"network_policy,omitempty"`
	RouteTable                int64 `protobuf:"varint,18,opt,name=route_table,json=routeTable,proto3" json:"route_table,omitempty" yaml:"route_table,omitempty"`
	SecurityGroup             int64 `protobuf:"varint,19,opt,name=security_group,json=securityGroup,proto3" json:"security_group,omitempty" yaml:"security_group,omitempty"`
	SecurityGroupRule         int64 `protobuf:"varint,20,opt,name=security_group_rule,json=securityGroupRule,proto3" json:"security_group_rule,omitempty" yaml:"security_group_rule,omitempty"`
	SecurityLoggingObject     int64 `protobuf:"varint,21,opt,name=security_logging_object,json=securityLoggingObject,proto3" json:"security_logging_object,omitempty" yaml:"security_logging_object,omitempty"`
	ServiceInstance           int64 `protobuf:"varint,22,opt,name=service_instance,json=serviceInstance,proto3" json:"service_instance,omitempty" yaml:"service_instance,omitempty"`
	ServiceTemplate           int64 `protobuf:"varint,23,opt,name=service_template,json=serviceTemplate,proto3" json:"service_template,omitempty" yaml:"service_template,omitempty"`
	Subnet                    int64 `protobuf:"varint,24,opt,name=subnet,proto3" json:"subnet,omitempty" yaml:"subnet,omitempty"`
	VirtualDNS                int64 `protobuf:"varint,25,opt,name=virtual_DNS,json=virtualDNS,proto3" json:"virtual_DNS,omitempty" yaml:"virtual_DNS,omitempty"`
	VirtualDNSRecord          int64 `protobuf:"varint,26,opt,name=virtual_DNS_record,json=virtualDNSRecord,proto3" json:"virtual_DNS_record,omitempty" yaml:"virtual_DNS_record,omitempty"`
	VirtualIP                 int64 `protobuf:"varint,27,opt,name=virtual_ip,json=virtualIp,proto3" json:"virtual_ip,omitempty" yaml:"virtual_ip,omitempty"`
	VirtualMachineInterface   int64 `protobuf:"varint,28,opt,name=virtual_machine_interface,json=virtualMachineInterface,proto3" json:"virtual_machine_interface,omitempty" yaml:"virtual_machine_interface,omitempty"`
	VirtualNetwork            int64 `protobuf:"varint,29,opt,name=virtual_network,json=virtualNetwork,proto3" json:"virtual_network,omitempty" yaml:"virtual_network,omitempty"`
	VirtualRouter             int64 `protobuf:"varint,30,opt,name=virtual_router,json=virtualRouter,proto3" json:"virtual_router,omitempty" yaml:"virtual_router,omitempty"`
}

func (m *QuotaType) Reset()      { *m = QuotaType{} }
func (*QuotaType) ProtoMessage() {}
func (*QuotaType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{529}
}
func (m *QuotaType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuotaType.Unmarshal(m, b)
}
func (m *QuotaType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuotaType.Marshal(b, m, deterministic)
}
func (m *QuotaType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuotaType.Merge(m, src)
}
func (m *QuotaType) XXX_Size() int {
	return xxx_messageInfo_QuotaType.Size(m)
}
func (m *QuotaType) XXX_DiscardUnknown() {
	xxx_messageInfo_QuotaType.DiscardUnknown(m)
}

var xxx_messageInfo_QuotaType proto.InternalMessageInfo

func (m *QuotaType) GetAccessControlList() int64 {
	if m != nil {
		return m.AccessControlList
	}
	return 0
}

func (m *QuotaType) GetBGPRouter() int64 {
	if m != nil {
		return m.BGPRouter
	}
	return 0
}

func (m *QuotaType) GetDefaults() int64 {
	if m != nil {
		return m.Defaults
	}
	return 0
}

func (m *QuotaType) GetFirewallGroup() int64 {
	if m != nil {
		return m.FirewallGroup
	}
	return 0
}

func (m *QuotaType) GetFirewallPolicy() int64 {
	if m != nil {
		return m.FirewallPolicy
	}
	return 0
}

func (m *QuotaType) GetFirewallRule() int64 {
	if m != nil {
		return m.FirewallRule
	}
	return 0
}

func (m *QuotaType) GetFloatingIP() int64 {
	if m != nil {
		return m.FloatingIP
	}
	return 0
}

func (m *QuotaType) GetFloatingIPPool() int64 {
	if m != nil {
		return m.FloatingIPPool
	}
	return 0
}

func (m *QuotaType) GetGlobalVrouterConfig() int64 {
	if m != nil {
		return m.GlobalVrouterConfig
	}
	return 0
}

func (m *QuotaType) GetHostBasedService() int64 {
	if m != nil {
		return m.HostBasedService
	}
	return 0
}

func (m *QuotaType) GetInstanceIP() int64 {
	if m != nil {
		return m.InstanceIP
	}
	return 0
}

func (m *QuotaType) GetLoadbalancerHealthmonitor() int64 {
	if m != nil {
		return m.LoadbalancerHealthmonitor
	}
	return 0
}

func (m *QuotaType) GetLoadbalancerMember() int64 {
	if m != nil {
		return m.LoadbalancerMember
	}
	return 0
}

func (m *QuotaType) GetLoadbalancerPool() int64 {
	if m != nil {
		return m.LoadbalancerPool
	}
	return 0
}

func (m *QuotaType) GetLogicalRouter() int64 {
	if m != nil {
		return m.LogicalRouter
	}
	return 0
}

func (m *QuotaType) GetNetworkIpam() int64 {
	if m != nil {
		return m.NetworkIpam
	}
	return 0
}

func (m *QuotaType) GetNetworkPolicy() int64 {
	if m != nil {
		return m.NetworkPolicy
	}
	return 0
}

func (m *QuotaType) GetRouteTable() int64 {
	if m != nil {
		return m.RouteTable
	}
	return 0
}

func (m *QuotaType) GetSecurityGroup() int64 {
	if m != nil {
		return m.SecurityGroup
	}
	return 0
}

func (m *QuotaType) GetSecurityGroupRule() int64 {
	if m != nil {
		return m.SecurityGroupRule
	}
	return 0
}

func (m *QuotaType) GetSecurityLoggingObject() int64 {
	if m != nil {
		return m.SecurityLoggingObject
	}
	return 0
}

func (m *QuotaType) GetServiceInstance() int64 {
	if m != nil {
		return m.ServiceInstance
	}
	return 0
}

func (m *QuotaType) GetServiceTemplate() int64 {
	if m != nil {
		return m.ServiceTemplate
	}
	return 0
}

func (m *QuotaType) GetSubnet() int64 {
	if m != nil {
		return m.Subnet
	}
	return 0
}

func (m *QuotaType) GetVirtualDNS() int64 {
	if m != nil {
		return m.VirtualDNS
	}
	return 0
}

func (m *QuotaType) GetVirtualDNSRecord() int64 {
	if m != nil {
		return m.VirtualDNSRecord
	}
	return 0
}

func (m *QuotaType) GetVirtualIP() int64 {
	if m != nil {
		return m.VirtualIP
	}
	return 0
}

func (m *QuotaType) GetVirtualMachineInterface() int64 {
	if m != nil {
		return m.VirtualMachineInterface
	}
	return 0
}

func (m *QuotaType) GetVirtualNetwork() int64 {
	if m != nil {
		return m.VirtualNetwork
	}
	return 0
}

func (m *QuotaType) GetVirtualRouter() int64 {
	if m != nil {
		return m.VirtualRouter
	}
	return 0
}

type RbacPermType struct {
	RoleCrud string `protobuf:"bytes,1,opt,name=role_crud,json=roleCrud,proto3" json:"role_crud,omitempty" yaml:"role_crud,omitempty"`
	RoleName string `protobuf:"bytes,2,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty" yaml:"role_name,omitempty"`
}

func (m *RbacPermType) Reset()      { *m = RbacPermType{} }
func (*RbacPermType) ProtoMessage() {}
func (*RbacPermType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{530}
}
func (m *RbacPermType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RbacPermType.Unmarshal(m, b)
}
func (m *RbacPermType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RbacPermType.Marshal(b, m, deterministic)
}
func (m *RbacPermType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RbacPermType.Merge(m, src)
}
func (m *RbacPermType) XXX_Size() int {
	return xxx_messageInfo_RbacPermType.Size(m)
}
func (m *RbacPermType) XXX_DiscardUnknown() {
	xxx_messageInfo_RbacPermType.DiscardUnknown(m)
}

var xxx_messageInfo_RbacPermType proto.InternalMessageInfo

func (m *RbacPermType) GetRoleCrud() string {
	if m != nil {
		return m.RoleCrud
	}
	return ""
}

func (m *RbacPermType) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

type RbacRuleEntriesType struct {
	RbacRule []*RbacRuleType `protobuf:"bytes,1,rep,name=rbac_rule,json=rbacRule,proto3" json:"rbac_rule,omitempty" yaml:"rbac_rule,omitempty"`
}

func (m *RbacRuleEntriesType) Reset()      { *m = RbacRuleEntriesType{} }
func (*RbacRuleEntriesType) ProtoMessage() {}
func (*RbacRuleEntriesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{531}
}
func (m *RbacRuleEntriesType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RbacRuleEntriesType.Unmarshal(m, b)
}
func (m *RbacRuleEntriesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RbacRuleEntriesType.Marshal(b, m, deterministic)
}
func (m *RbacRuleEntriesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RbacRuleEntriesType.Merge(m, src)
}
func (m *RbacRuleEntriesType) XXX_Size() int {
	return xxx_messageInfo_RbacRuleEntriesType.Size(m)
}
func (m *RbacRuleEntriesType) XXX_DiscardUnknown() {
	xxx_messageInfo_RbacRuleEntriesType.DiscardUnknown(m)
}

var xxx_messageInfo_RbacRuleEntriesType proto.InternalMessageInfo

func (m *RbacRuleEntriesType) GetRbacRule() []*RbacRuleType {
	if m != nil {
		return m.RbacRule
	}
	return nil
}

type RbacRuleType struct {
	RuleField  string          `protobuf:"bytes,1,opt,name=rule_field,json=ruleField,proto3" json:"rule_field,omitempty" yaml:"rule_field,omitempty"`
	RuleObject string          `protobuf:"bytes,2,opt,name=rule_object,json=ruleObject,proto3" json:"rule_object,omitempty" yaml:"rule_object,omitempty"`
	RulePerms  []*RbacPermType `protobuf:"bytes,3,rep,name=rule_perms,json=rulePerms,proto3" json:"rule_perms,omitempty" yaml:"rule_perms,omitempty"`
}

func (m *RbacRuleType) Reset()      { *m = RbacRuleType{} }
func (*RbacRuleType) ProtoMessage() {}
func (*RbacRuleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{532}
}
func (m *RbacRuleType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RbacRuleType.Unmarshal(m, b)
}
func (m *RbacRuleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RbacRuleType.Marshal(b, m, deterministic)
}
func (m *RbacRuleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RbacRuleType.Merge(m, src)
}
func (m *RbacRuleType) XXX_Size() int {
	return xxx_messageInfo_RbacRuleType.Size(m)
}
func (m *RbacRuleType) XXX_DiscardUnknown() {
	xxx_messageInfo_RbacRuleType.DiscardUnknown(m)
}

var xxx_messageInfo_RbacRuleType proto.InternalMessageInfo

func (m *RbacRuleType) GetRuleField() string {
	if m != nil {
		return m.RuleField
	}
	return ""
}

func (m *RbacRuleType) GetRuleObject() string {
	if m != nil {
		return m.RuleObject
	}
	return ""
}

func (m *RbacRuleType) GetRulePerms() []*RbacPermType {
	if m != nil {
		return m.RulePerms
	}
	return nil
}

type RouteListType struct {
	Route []string `protobuf:"bytes,1,rep,name=route,proto3" json:"route,omitempty" yaml:"route,omitempty"`
}

func (m *RouteListType) Reset()      { *m = RouteListType{} }
func (*RouteListType) ProtoMessage() {}
func (*RouteListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{533}
}
func (m *RouteListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteListType.Unmarshal(m, b)
}
func (m *RouteListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteListType.Marshal(b, m, deterministic)
}
func (m *RouteListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteListType.Merge(m, src)
}
func (m *RouteListType) XXX_Size() int {
	return xxx_messageInfo_RouteListType.Size(m)
}
func (m *RouteListType) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteListType.DiscardUnknown(m)
}

var xxx_messageInfo_RouteListType proto.InternalMessageInfo

func (m *RouteListType) GetRoute() []string {
	if m != nil {
		return m.Route
	}
	return nil
}

type RouteOriginOverride struct {
	Origin         string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty" yaml:"origin,omitempty"`
	OriginOverride bool   `protobuf:"varint,2,opt,name=origin_override,json=originOverride,proto3" json:"origin_override,omitempty" yaml:"origin_override,omitempty"`
}

func (m *RouteOriginOverride) Reset()      { *m = RouteOriginOverride{} }
func (*RouteOriginOverride) ProtoMessage() {}
func (*RouteOriginOverride) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{534}
}
func (m *RouteOriginOverride) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteOriginOverride.Unmarshal(m, b)
}
func (m *RouteOriginOverride) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteOriginOverride.Marshal(b, m, deterministic)
}
func (m *RouteOriginOverride) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteOriginOverride.Merge(m, src)
}
func (m *RouteOriginOverride) XXX_Size() int {
	return xxx_messageInfo_RouteOriginOverride.Size(m)
}
func (m *RouteOriginOverride) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteOriginOverride.DiscardUnknown(m)
}

var xxx_messageInfo_RouteOriginOverride proto.InternalMessageInfo

func (m *RouteOriginOverride) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *RouteOriginOverride) GetOriginOverride() bool {
	if m != nil {
		return m.OriginOverride
	}
	return false
}

type RouteTableType struct {
	Route []*RouteType `protobuf:"bytes,1,rep,name=route,proto3" json:"route,omitempty" yaml:"route,omitempty"`
}

func (m *RouteTableType) Reset()      { *m = RouteTableType{} }
func (*RouteTableType) ProtoMessage() {}
func (*RouteTableType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{535}
}
func (m *RouteTableType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTableType.Unmarshal(m, b)
}
func (m *RouteTableType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTableType.Marshal(b, m, deterministic)
}
func (m *RouteTableType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTableType.Merge(m, src)
}
func (m *RouteTableType) XXX_Size() int {
	return xxx_messageInfo_RouteTableType.Size(m)
}
func (m *RouteTableType) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTableType.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTableType proto.InternalMessageInfo

func (m *RouteTableType) GetRoute() []*RouteType {
	if m != nil {
		return m.Route
	}
	return nil
}

type RouteTargetList struct {
	RouteTarget []string `protobuf:"bytes,1,rep,name=route_target,json=routeTarget,proto3" json:"route_target,omitempty" yaml:"route_target,omitempty"`
}

func (m *RouteTargetList) Reset()      { *m = RouteTargetList{} }
func (*RouteTargetList) ProtoMessage() {}
func (*RouteTargetList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{536}
}
func (m *RouteTargetList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteTargetList.Unmarshal(m, b)
}
func (m *RouteTargetList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteTargetList.Marshal(b, m, deterministic)
}
func (m *RouteTargetList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteTargetList.Merge(m, src)
}
func (m *RouteTargetList) XXX_Size() int {
	return xxx_messageInfo_RouteTargetList.Size(m)
}
func (m *RouteTargetList) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteTargetList.DiscardUnknown(m)
}

var xxx_messageInfo_RouteTargetList proto.InternalMessageInfo

func (m *RouteTargetList) GetRouteTarget() []string {
	if m != nil {
		return m.RouteTarget
	}
	return nil
}

type RouteType struct {
	CommunityAttributes *CommunityAttributes `protobuf:"bytes,1,opt,name=community_attributes,json=communityAttributes,proto3" json:"community_attributes,omitempty" yaml:"community_attributes,omitempty"`
	NextHop             string               `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty" yaml:"next_hop,omitempty"`
	NextHopType         string               `protobuf:"bytes,3,opt,name=next_hop_type,json=nextHopType,proto3" json:"next_hop_type,omitempty" yaml:"next_hop_type,omitempty"`
	Prefix              string               `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty" yaml:"prefix,omitempty"`
}

func (m *RouteType) Reset()      { *m = RouteType{} }
func (*RouteType) ProtoMessage() {}
func (*RouteType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{537}
}
func (m *RouteType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteType.Unmarshal(m, b)
}
func (m *RouteType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteType.Marshal(b, m, deterministic)
}
func (m *RouteType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteType.Merge(m, src)
}
func (m *RouteType) XXX_Size() int {
	return xxx_messageInfo_RouteType.Size(m)
}
func (m *RouteType) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteType.DiscardUnknown(m)
}

var xxx_messageInfo_RouteType proto.InternalMessageInfo

func (m *RouteType) GetCommunityAttributes() *CommunityAttributes {
	if m != nil {
		return m.CommunityAttributes
	}
	return nil
}

func (m *RouteType) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *RouteType) GetNextHopType() string {
	if m != nil {
		return m.NextHopType
	}
	return ""
}

func (m *RouteType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type RoutedProperties struct {
	BFDParams                *BfdParameters           `protobuf:"bytes,1,opt,name=bfd_params,json=bfdParams,proto3" json:"bfd_params,omitempty" yaml:"bfd_params,omitempty"`
	BGPParams                *BgpParameters           `protobuf:"bytes,2,opt,name=bgp_params,json=bgpParams,proto3" json:"bgp_params,omitempty" yaml:"bgp_params,omitempty"`
	PhysicalRouterUUID       string                   `protobuf:"bytes,3,opt,name=physical_router_uuid,json=physicalRouterUuid,proto3" json:"physical_router_uuid,omitempty" yaml:"physical_router_uuid,omitempty"`
	RoutedInterfaceIPAddress string                   `protobuf:"bytes,4,opt,name=routed_interface_ip_address,json=routedInterfaceIpAddress,proto3" json:"routed_interface_ip_address,omitempty" yaml:"routed_interface_ip_address,omitempty"`
	RoutingPolicyParams      *RoutingPolicyParameters `protobuf:"bytes,5,opt,name=routing_policy_params,json=routingPolicyParams,proto3" json:"routing_policy_params,omitempty" yaml:"routing_policy_params,omitempty"`
	RoutingProtocol          string                   `protobuf:"bytes,6,opt,name=routing_protocol,json=routingProtocol,proto3" json:"routing_protocol,omitempty" yaml:"routing_protocol,omitempty"`
	StaticRouteParams        *StaticRouteParameters   `protobuf:"bytes,7,opt,name=static_route_params,json=staticRouteParams,proto3" json:"static_route_params,omitempty" yaml:"static_route_params,omitempty"`
}

func (m *RoutedProperties) Reset()      { *m = RoutedProperties{} }
func (*RoutedProperties) ProtoMessage() {}
func (*RoutedProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{538}
}
func (m *RoutedProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutedProperties.Unmarshal(m, b)
}
func (m *RoutedProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutedProperties.Marshal(b, m, deterministic)
}
func (m *RoutedProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutedProperties.Merge(m, src)
}
func (m *RoutedProperties) XXX_Size() int {
	return xxx_messageInfo_RoutedProperties.Size(m)
}
func (m *RoutedProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutedProperties.DiscardUnknown(m)
}

var xxx_messageInfo_RoutedProperties proto.InternalMessageInfo

func (m *RoutedProperties) GetBFDParams() *BfdParameters {
	if m != nil {
		return m.BFDParams
	}
	return nil
}

func (m *RoutedProperties) GetBGPParams() *BgpParameters {
	if m != nil {
		return m.BGPParams
	}
	return nil
}

func (m *RoutedProperties) GetPhysicalRouterUUID() string {
	if m != nil {
		return m.PhysicalRouterUUID
	}
	return ""
}

func (m *RoutedProperties) GetRoutedInterfaceIPAddress() string {
	if m != nil {
		return m.RoutedInterfaceIPAddress
	}
	return ""
}

func (m *RoutedProperties) GetRoutingPolicyParams() *RoutingPolicyParameters {
	if m != nil {
		return m.RoutingPolicyParams
	}
	return nil
}

func (m *RoutedProperties) GetRoutingProtocol() string {
	if m != nil {
		return m.RoutingProtocol
	}
	return ""
}

func (m *RoutedProperties) GetStaticRouteParams() *StaticRouteParameters {
	if m != nil {
		return m.StaticRouteParams
	}
	return nil
}

type RoutingBridgingRolesType struct {
	RBRoles []string `protobuf:"bytes,1,rep,name=rb_roles,json=rbRoles,proto3" json:"rb_roles,omitempty" yaml:"rb_roles,omitempty"`
}

func (m *RoutingBridgingRolesType) Reset()      { *m = RoutingBridgingRolesType{} }
func (*RoutingBridgingRolesType) ProtoMessage() {}
func (*RoutingBridgingRolesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{539}
}
func (m *RoutingBridgingRolesType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingBridgingRolesType.Unmarshal(m, b)
}
func (m *RoutingBridgingRolesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingBridgingRolesType.Marshal(b, m, deterministic)
}
func (m *RoutingBridgingRolesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingBridgingRolesType.Merge(m, src)
}
func (m *RoutingBridgingRolesType) XXX_Size() int {
	return xxx_messageInfo_RoutingBridgingRolesType.Size(m)
}
func (m *RoutingBridgingRolesType) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingBridgingRolesType.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingBridgingRolesType proto.InternalMessageInfo

func (m *RoutingBridgingRolesType) GetRBRoles() []string {
	if m != nil {
		return m.RBRoles
	}
	return nil
}

type RoutingPolicyParameters struct {
	ExportRoutingPolicyUUID []string `protobuf:"bytes,1,rep,name=export_routing_policy_uuid,json=exportRoutingPolicyUuid,proto3" json:"export_routing_policy_uuid,omitempty" yaml:"export_routing_policy_uuid,omitempty"`
	ImportRoutingPolicyUUID []string `protobuf:"bytes,2,rep,name=import_routing_policy_uuid,json=importRoutingPolicyUuid,proto3" json:"import_routing_policy_uuid,omitempty" yaml:"import_routing_policy_uuid,omitempty"`
}

func (m *RoutingPolicyParameters) Reset()      { *m = RoutingPolicyParameters{} }
func (*RoutingPolicyParameters) ProtoMessage() {}
func (*RoutingPolicyParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{540}
}
func (m *RoutingPolicyParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingPolicyParameters.Unmarshal(m, b)
}
func (m *RoutingPolicyParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingPolicyParameters.Marshal(b, m, deterministic)
}
func (m *RoutingPolicyParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingPolicyParameters.Merge(m, src)
}
func (m *RoutingPolicyParameters) XXX_Size() int {
	return xxx_messageInfo_RoutingPolicyParameters.Size(m)
}
func (m *RoutingPolicyParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingPolicyParameters.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingPolicyParameters proto.InternalMessageInfo

func (m *RoutingPolicyParameters) GetExportRoutingPolicyUUID() []string {
	if m != nil {
		return m.ExportRoutingPolicyUUID
	}
	return nil
}

func (m *RoutingPolicyParameters) GetImportRoutingPolicyUUID() []string {
	if m != nil {
		return m.ImportRoutingPolicyUUID
	}
	return nil
}

type RoutingPolicyServiceInstanceType struct {
	LeftSequence  string `protobuf:"bytes,1,opt,name=left_sequence,json=leftSequence,proto3" json:"left_sequence,omitempty" yaml:"left_sequence,omitempty"`
	RightSequence string `protobuf:"bytes,2,opt,name=right_sequence,json=rightSequence,proto3" json:"right_sequence,omitempty" yaml:"right_sequence,omitempty"`
}

func (m *RoutingPolicyServiceInstanceType) Reset()      { *m = RoutingPolicyServiceInstanceType{} }
func (*RoutingPolicyServiceInstanceType) ProtoMessage() {}
func (*RoutingPolicyServiceInstanceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{541}
}
func (m *RoutingPolicyServiceInstanceType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingPolicyServiceInstanceType.Unmarshal(m, b)
}
func (m *RoutingPolicyServiceInstanceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingPolicyServiceInstanceType.Marshal(b, m, deterministic)
}
func (m *RoutingPolicyServiceInstanceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingPolicyServiceInstanceType.Merge(m, src)
}
func (m *RoutingPolicyServiceInstanceType) XXX_Size() int {
	return xxx_messageInfo_RoutingPolicyServiceInstanceType.Size(m)
}
func (m *RoutingPolicyServiceInstanceType) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingPolicyServiceInstanceType.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingPolicyServiceInstanceType proto.InternalMessageInfo

func (m *RoutingPolicyServiceInstanceType) GetLeftSequence() string {
	if m != nil {
		return m.LeftSequence
	}
	return ""
}

func (m *RoutingPolicyServiceInstanceType) GetRightSequence() string {
	if m != nil {
		return m.RightSequence
	}
	return ""
}

type RoutingPolicyType struct {
	Sequence string `protobuf:"bytes,1,opt,name=sequence,proto3" json:"sequence,omitempty" yaml:"sequence,omitempty"`
}

func (m *RoutingPolicyType) Reset()      { *m = RoutingPolicyType{} }
func (*RoutingPolicyType) ProtoMessage() {}
func (*RoutingPolicyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{542}
}
func (m *RoutingPolicyType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingPolicyType.Unmarshal(m, b)
}
func (m *RoutingPolicyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingPolicyType.Marshal(b, m, deterministic)
}
func (m *RoutingPolicyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingPolicyType.Merge(m, src)
}
func (m *RoutingPolicyType) XXX_Size() int {
	return xxx_messageInfo_RoutingPolicyType.Size(m)
}
func (m *RoutingPolicyType) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingPolicyType.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingPolicyType proto.InternalMessageInfo

func (m *RoutingPolicyType) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

type SNMPCredentials struct {
	LocalPort                int64  `protobuf:"varint,1,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty" yaml:"local_port,omitempty"`
	Retries                  int64  `protobuf:"varint,2,opt,name=retries,proto3" json:"retries,omitempty" yaml:"retries,omitempty"`
	Timeout                  int64  `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty" yaml:"timeout,omitempty"`
	V2Community              string `protobuf:"bytes,4,opt,name=v2_community,json=v2Community,proto3" json:"v2_community,omitempty" yaml:"v2_community,omitempty"`
	V3AuthenticationPassword string `protobuf:"bytes,5,opt,name=v3_authentication_password,json=v3AuthenticationPassword,proto3" json:"v3_authentication_password,omitempty" yaml:"v3_authentication_password,omitempty"`
	V3AuthenticationProtocol string `protobuf:"bytes,6,opt,name=v3_authentication_protocol,json=v3AuthenticationProtocol,proto3" json:"v3_authentication_protocol,omitempty" yaml:"v3_authentication_protocol,omitempty"`
	V3Context                string `protobuf:"bytes,7,opt,name=v3_context,json=v3Context,proto3" json:"v3_context,omitempty" yaml:"v3_context,omitempty"`
	V3ContextEngineID        string `protobuf:"bytes,8,opt,name=v3_context_engine_id,json=v3ContextEngineId,proto3" json:"v3_context_engine_id,omitempty" yaml:"v3_context_engine_id,omitempty"`
	V3EngineBoots            int64  `protobuf:"varint,9,opt,name=v3_engine_boots,json=v3EngineBoots,proto3" json:"v3_engine_boots,omitempty" yaml:"v3_engine_boots,omitempty"`
	V3EngineID               string `protobuf:"bytes,10,opt,name=v3_engine_id,json=v3EngineId,proto3" json:"v3_engine_id,omitempty" yaml:"v3_engine_id,omitempty"`
	V3EngineTime             int64  `protobuf:"varint,11,opt,name=v3_engine_time,json=v3EngineTime,proto3" json:"v3_engine_time,omitempty" yaml:"v3_engine_time,omitempty"`
	V3PrivacyPassword        string `protobuf:"bytes,12,opt,name=v3_privacy_password,json=v3PrivacyPassword,proto3" json:"v3_privacy_password,omitempty" yaml:"v3_privacy_password,omitempty"`
	V3PrivacyProtocol        string `protobuf:"bytes,13,opt,name=v3_privacy_protocol,json=v3PrivacyProtocol,proto3" json:"v3_privacy_protocol,omitempty" yaml:"v3_privacy_protocol,omitempty"`
	V3SecurityEngineID       string `protobuf:"bytes,14,opt,name=v3_security_engine_id,json=v3SecurityEngineId,proto3" json:"v3_security_engine_id,omitempty" yaml:"v3_security_engine_id,omitempty"`
	V3SecurityLevel          string `protobuf:"bytes,15,opt,name=v3_security_level,json=v3SecurityLevel,proto3" json:"v3_security_level,omitempty" yaml:"v3_security_level,omitempty"`
	V3SecurityName           string `protobuf:"bytes,16,opt,name=v3_security_name,json=v3SecurityName,proto3" json:"v3_security_name,omitempty" yaml:"v3_security_name,omitempty"`
	Version                  int64  `protobuf:"varint,17,opt,name=version,proto3" json:"version,omitempty" yaml:"version,omitempty"`
}

func (m *SNMPCredentials) Reset()      { *m = SNMPCredentials{} }
func (*SNMPCredentials) ProtoMessage() {}
func (*SNMPCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{543}
}
func (m *SNMPCredentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SNMPCredentials.Unmarshal(m, b)
}
func (m *SNMPCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SNMPCredentials.Marshal(b, m, deterministic)
}
func (m *SNMPCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SNMPCredentials.Merge(m, src)
}
func (m *SNMPCredentials) XXX_Size() int {
	return xxx_messageInfo_SNMPCredentials.Size(m)
}
func (m *SNMPCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_SNMPCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_SNMPCredentials proto.InternalMessageInfo

func (m *SNMPCredentials) GetLocalPort() int64 {
	if m != nil {
		return m.LocalPort
	}
	return 0
}

func (m *SNMPCredentials) GetRetries() int64 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *SNMPCredentials) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *SNMPCredentials) GetV2Community() string {
	if m != nil {
		return m.V2Community
	}
	return ""
}

func (m *SNMPCredentials) GetV3AuthenticationPassword() string {
	if m != nil {
		return m.V3AuthenticationPassword
	}
	return ""
}

func (m *SNMPCredentials) GetV3AuthenticationProtocol() string {
	if m != nil {
		return m.V3AuthenticationProtocol
	}
	return ""
}

func (m *SNMPCredentials) GetV3Context() string {
	if m != nil {
		return m.V3Context
	}
	return ""
}

func (m *SNMPCredentials) GetV3ContextEngineID() string {
	if m != nil {
		return m.V3ContextEngineID
	}
	return ""
}

func (m *SNMPCredentials) GetV3EngineBoots() int64 {
	if m != nil {
		return m.V3EngineBoots
	}
	return 0
}

func (m *SNMPCredentials) GetV3EngineID() string {
	if m != nil {
		return m.V3EngineID
	}
	return ""
}

func (m *SNMPCredentials) GetV3EngineTime() int64 {
	if m != nil {
		return m.V3EngineTime
	}
	return 0
}

func (m *SNMPCredentials) GetV3PrivacyPassword() string {
	if m != nil {
		return m.V3PrivacyPassword
	}
	return ""
}

func (m *SNMPCredentials) GetV3PrivacyProtocol() string {
	if m != nil {
		return m.V3PrivacyProtocol
	}
	return ""
}

func (m *SNMPCredentials) GetV3SecurityEngineID() string {
	if m != nil {
		return m.V3SecurityEngineID
	}
	return ""
}

func (m *SNMPCredentials) GetV3SecurityLevel() string {
	if m != nil {
		return m.V3SecurityLevel
	}
	return ""
}

func (m *SNMPCredentials) GetV3SecurityName() string {
	if m != nil {
		return m.V3SecurityName
	}
	return ""
}

func (m *SNMPCredentials) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type SecurityLoggingObjectRuleEntryType struct {
	Rate     int64  `protobuf:"varint,1,opt,name=rate,proto3" json:"rate,omitempty" yaml:"rate,omitempty"`
	RuleUUID string `protobuf:"bytes,2,opt,name=rule_uuid,json=ruleUuid,proto3" json:"rule_uuid,omitempty" yaml:"rule_uuid,omitempty"`
}

func (m *SecurityLoggingObjectRuleEntryType) Reset()      { *m = SecurityLoggingObjectRuleEntryType{} }
func (*SecurityLoggingObjectRuleEntryType) ProtoMessage() {}
func (*SecurityLoggingObjectRuleEntryType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{544}
}
func (m *SecurityLoggingObjectRuleEntryType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityLoggingObjectRuleEntryType.Unmarshal(m, b)
}
func (m *SecurityLoggingObjectRuleEntryType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityLoggingObjectRuleEntryType.Marshal(b, m, deterministic)
}
func (m *SecurityLoggingObjectRuleEntryType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityLoggingObjectRuleEntryType.Merge(m, src)
}
func (m *SecurityLoggingObjectRuleEntryType) XXX_Size() int {
	return xxx_messageInfo_SecurityLoggingObjectRuleEntryType.Size(m)
}
func (m *SecurityLoggingObjectRuleEntryType) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityLoggingObjectRuleEntryType.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityLoggingObjectRuleEntryType proto.InternalMessageInfo

func (m *SecurityLoggingObjectRuleEntryType) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *SecurityLoggingObjectRuleEntryType) GetRuleUUID() string {
	if m != nil {
		return m.RuleUUID
	}
	return ""
}

type SecurityLoggingObjectRuleListType struct {
	Rule []*SecurityLoggingObjectRuleEntryType `protobuf:"bytes,1,rep,name=rule,proto3" json:"rule,omitempty" yaml:"rule,omitempty"`
}

func (m *SecurityLoggingObjectRuleListType) Reset()      { *m = SecurityLoggingObjectRuleListType{} }
func (*SecurityLoggingObjectRuleListType) ProtoMessage() {}
func (*SecurityLoggingObjectRuleListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{545}
}
func (m *SecurityLoggingObjectRuleListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SecurityLoggingObjectRuleListType.Unmarshal(m, b)
}
func (m *SecurityLoggingObjectRuleListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SecurityLoggingObjectRuleListType.Marshal(b, m, deterministic)
}
func (m *SecurityLoggingObjectRuleListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityLoggingObjectRuleListType.Merge(m, src)
}
func (m *SecurityLoggingObjectRuleListType) XXX_Size() int {
	return xxx_messageInfo_SecurityLoggingObjectRuleListType.Size(m)
}
func (m *SecurityLoggingObjectRuleListType) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityLoggingObjectRuleListType.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityLoggingObjectRuleListType proto.InternalMessageInfo

func (m *SecurityLoggingObjectRuleListType) GetRule() []*SecurityLoggingObjectRuleEntryType {
	if m != nil {
		return m.Rule
	}
	return nil
}

type SequenceType struct {
	Major int64 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty" yaml:"major,omitempty"`
	Minor int64 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty" yaml:"minor,omitempty"`
}

func (m *SequenceType) Reset()      { *m = SequenceType{} }
func (*SequenceType) ProtoMessage() {}
func (*SequenceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{546}
}
func (m *SequenceType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SequenceType.Unmarshal(m, b)
}
func (m *SequenceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SequenceType.Marshal(b, m, deterministic)
}
func (m *SequenceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceType.Merge(m, src)
}
func (m *SequenceType) XXX_Size() int {
	return xxx_messageInfo_SequenceType.Size(m)
}
func (m *SequenceType) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceType.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceType proto.InternalMessageInfo

func (m *SequenceType) GetMajor() int64 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *SequenceType) GetMinor() int64 {
	if m != nil {
		return m.Minor
	}
	return 0
}

type SerialNumListType struct {
	SerialNum []string `protobuf:"bytes,1,rep,name=serial_num,json=serialNum,proto3" json:"serial_num,omitempty" yaml:"serial_num,omitempty"`
}

func (m *SerialNumListType) Reset()      { *m = SerialNumListType{} }
func (*SerialNumListType) ProtoMessage() {}
func (*SerialNumListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{547}
}
func (m *SerialNumListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SerialNumListType.Unmarshal(m, b)
}
func (m *SerialNumListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SerialNumListType.Marshal(b, m, deterministic)
}
func (m *SerialNumListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerialNumListType.Merge(m, src)
}
func (m *SerialNumListType) XXX_Size() int {
	return xxx_messageInfo_SerialNumListType.Size(m)
}
func (m *SerialNumListType) XXX_DiscardUnknown() {
	xxx_messageInfo_SerialNumListType.DiscardUnknown(m)
}

var xxx_messageInfo_SerialNumListType proto.InternalMessageInfo

func (m *SerialNumListType) GetSerialNum() []string {
	if m != nil {
		return m.SerialNum
	}
	return nil
}

type ServiceApplianceInterfaceType struct {
	InterfaceType string `protobuf:"bytes,1,opt,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty" yaml:"interface_type,omitempty"`
}

func (m *ServiceApplianceInterfaceType) Reset()      { *m = ServiceApplianceInterfaceType{} }
func (*ServiceApplianceInterfaceType) ProtoMessage() {}
func (*ServiceApplianceInterfaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{548}
}
func (m *ServiceApplianceInterfaceType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceApplianceInterfaceType.Unmarshal(m, b)
}
func (m *ServiceApplianceInterfaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceApplianceInterfaceType.Marshal(b, m, deterministic)
}
func (m *ServiceApplianceInterfaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceApplianceInterfaceType.Merge(m, src)
}
func (m *ServiceApplianceInterfaceType) XXX_Size() int {
	return xxx_messageInfo_ServiceApplianceInterfaceType.Size(m)
}
func (m *ServiceApplianceInterfaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceApplianceInterfaceType.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceApplianceInterfaceType proto.InternalMessageInfo

func (m *ServiceApplianceInterfaceType) GetInterfaceType() string {
	if m != nil {
		return m.InterfaceType
	}
	return ""
}

type ServiceChainInfo struct {
	Prefix                []string `protobuf:"bytes,1,rep,name=prefix,proto3" json:"prefix,omitempty" yaml:"prefix,omitempty"`
	RoutingInstance       string   `protobuf:"bytes,2,opt,name=routing_instance,json=routingInstance,proto3" json:"routing_instance,omitempty" yaml:"routing_instance,omitempty"`
	SCHead                bool     `protobuf:"varint,3,opt,name=sc_head,json=scHead,proto3" json:"sc_head,omitempty" yaml:"sc_head,omitempty"`
	ServiceChainAddress   string   `protobuf:"bytes,4,opt,name=service_chain_address,json=serviceChainAddress,proto3" json:"service_chain_address,omitempty" yaml:"service_chain_address,omitempty"`
	ServiceChainID        string   `protobuf:"bytes,5,opt,name=service_chain_id,json=serviceChainId,proto3" json:"service_chain_id,omitempty" yaml:"service_chain_id,omitempty"`
	ServiceInstance       string   `protobuf:"bytes,6,opt,name=service_instance,json=serviceInstance,proto3" json:"service_instance,omitempty" yaml:"service_instance,omitempty"`
	SourceRoutingInstance string   `protobuf:"bytes,7,opt,name=source_routing_instance,json=sourceRoutingInstance,proto3" json:"source_routing_instance,omitempty" yaml:"source_routing_instance,omitempty"`
}

func (m *ServiceChainInfo) Reset()      { *m = ServiceChainInfo{} }
func (*ServiceChainInfo) ProtoMessage() {}
func (*ServiceChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{549}
}
func (m *ServiceChainInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceChainInfo.Unmarshal(m, b)
}
func (m *ServiceChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceChainInfo.Marshal(b, m, deterministic)
}
func (m *ServiceChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceChainInfo.Merge(m, src)
}
func (m *ServiceChainInfo) XXX_Size() int {
	return xxx_messageInfo_ServiceChainInfo.Size(m)
}
func (m *ServiceChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceChainInfo proto.InternalMessageInfo

func (m *ServiceChainInfo) GetPrefix() []string {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *ServiceChainInfo) GetRoutingInstance() string {
	if m != nil {
		return m.RoutingInstance
	}
	return ""
}

func (m *ServiceChainInfo) GetSCHead() bool {
	if m != nil {
		return m.SCHead
	}
	return false
}

func (m *ServiceChainInfo) GetServiceChainAddress() string {
	if m != nil {
		return m.ServiceChainAddress
	}
	return ""
}

func (m *ServiceChainInfo) GetServiceChainID() string {
	if m != nil {
		return m.ServiceChainID
	}
	return ""
}

func (m *ServiceChainInfo) GetServiceInstance() string {
	if m != nil {
		return m.ServiceInstance
	}
	return ""
}

func (m *ServiceChainInfo) GetSourceRoutingInstance() string {
	if m != nil {
		return m.SourceRoutingInstance
	}
	return ""
}

type ServiceHealthCheckType struct {
	Delay           int64  `protobuf:"varint,1,opt,name=delay,proto3" json:"delay,omitempty" yaml:"delay,omitempty"`
	DelayUsecs      int64  `protobuf:"varint,2,opt,name=delayUsecs,proto3" json:"delayUsecs,omitempty" yaml:"delayUsecs,omitempty"`
	Enabled         bool   `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty" yaml:"enabled,omitempty"`
	ExpectedCodes   string `protobuf:"bytes,4,opt,name=expected_codes,json=expectedCodes,proto3" json:"expected_codes,omitempty" yaml:"expected_codes,omitempty"`
	HealthCheckType string `protobuf:"bytes,5,opt,name=health_check_type,json=healthCheckType,proto3" json:"health_check_type,omitempty" yaml:"health_check_type,omitempty"`
	HTTPMethod      string `protobuf:"bytes,6,opt,name=http_method,json=httpMethod,proto3" json:"http_method,omitempty" yaml:"http_method,omitempty"`
	MaxRetries      int64  `protobuf:"varint,7,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty" yaml:"max_retries,omitempty"`
	MonitorType     string `protobuf:"bytes,8,opt,name=monitor_type,json=monitorType,proto3" json:"monitor_type,omitempty" yaml:"monitor_type,omitempty"`
	Timeout         int64  `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty" yaml:"timeout,omitempty"`
	TimeoutUsecs    int64  `protobuf:"varint,10,opt,name=timeoutUsecs,proto3" json:"timeoutUsecs,omitempty" yaml:"timeoutUsecs,omitempty"`
	URLPath         string `protobuf:"bytes,11,opt,name=url_path,json=urlPath,proto3" json:"url_path,omitempty" yaml:"url_path,omitempty"`
}

func (m *ServiceHealthCheckType) Reset()      { *m = ServiceHealthCheckType{} }
func (*ServiceHealthCheckType) ProtoMessage() {}
func (*ServiceHealthCheckType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{550}
}
func (m *ServiceHealthCheckType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceHealthCheckType.Unmarshal(m, b)
}
func (m *ServiceHealthCheckType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceHealthCheckType.Marshal(b, m, deterministic)
}
func (m *ServiceHealthCheckType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceHealthCheckType.Merge(m, src)
}
func (m *ServiceHealthCheckType) XXX_Size() int {
	return xxx_messageInfo_ServiceHealthCheckType.Size(m)
}
func (m *ServiceHealthCheckType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceHealthCheckType.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceHealthCheckType proto.InternalMessageInfo

func (m *ServiceHealthCheckType) GetDelay() int64 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *ServiceHealthCheckType) GetDelayUsecs() int64 {
	if m != nil {
		return m.DelayUsecs
	}
	return 0
}

func (m *ServiceHealthCheckType) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *ServiceHealthCheckType) GetExpectedCodes() string {
	if m != nil {
		return m.ExpectedCodes
	}
	return ""
}

func (m *ServiceHealthCheckType) GetHealthCheckType() string {
	if m != nil {
		return m.HealthCheckType
	}
	return ""
}

func (m *ServiceHealthCheckType) GetHTTPMethod() string {
	if m != nil {
		return m.HTTPMethod
	}
	return ""
}

func (m *ServiceHealthCheckType) GetMaxRetries() int64 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

func (m *ServiceHealthCheckType) GetMonitorType() string {
	if m != nil {
		return m.MonitorType
	}
	return ""
}

func (m *ServiceHealthCheckType) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ServiceHealthCheckType) GetTimeoutUsecs() int64 {
	if m != nil {
		return m.TimeoutUsecs
	}
	return 0
}

func (m *ServiceHealthCheckType) GetURLPath() string {
	if m != nil {
		return m.URLPath
	}
	return ""
}

type ServiceInstanceInterfaceType struct {
	AllowedAddressPairs *AllowedAddressPairs `protobuf:"bytes,1,opt,name=allowed_address_pairs,json=allowedAddressPairs,proto3" json:"allowed_address_pairs,omitempty" yaml:"allowed_address_pairs,omitempty"`
	IPAddress           string               `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty" yaml:"ip_address,omitempty"`
	StaticRoutes        *RouteTableType      `protobuf:"bytes,3,opt,name=static_routes,json=staticRoutes,proto3" json:"static_routes,omitempty" yaml:"static_routes,omitempty"`
	VirtualNetwork      string               `protobuf:"bytes,4,opt,name=virtual_network,json=virtualNetwork,proto3" json:"virtual_network,omitempty" yaml:"virtual_network,omitempty"`
}

func (m *ServiceInstanceInterfaceType) Reset()      { *m = ServiceInstanceInterfaceType{} }
func (*ServiceInstanceInterfaceType) ProtoMessage() {}
func (*ServiceInstanceInterfaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{551}
}
func (m *ServiceInstanceInterfaceType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceInstanceInterfaceType.Unmarshal(m, b)
}
func (m *ServiceInstanceInterfaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceInstanceInterfaceType.Marshal(b, m, deterministic)
}
func (m *ServiceInstanceInterfaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceInstanceInterfaceType.Merge(m, src)
}
func (m *ServiceInstanceInterfaceType) XXX_Size() int {
	return xxx_messageInfo_ServiceInstanceInterfaceType.Size(m)
}
func (m *ServiceInstanceInterfaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceInstanceInterfaceType.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceInstanceInterfaceType proto.InternalMessageInfo

func (m *ServiceInstanceInterfaceType) GetAllowedAddressPairs() *AllowedAddressPairs {
	if m != nil {
		return m.AllowedAddressPairs
	}
	return nil
}

func (m *ServiceInstanceInterfaceType) GetIPAddress() string {
	if m != nil {
		return m.IPAddress
	}
	return ""
}

func (m *ServiceInstanceInterfaceType) GetStaticRoutes() *RouteTableType {
	if m != nil {
		return m.StaticRoutes
	}
	return nil
}

func (m *ServiceInstanceInterfaceType) GetVirtualNetwork() string {
	if m != nil {
		return m.VirtualNetwork
	}
	return ""
}

type ServiceInstanceType struct {
	AutoPolicy                bool                            `protobuf:"varint,1,opt,name=auto_policy,json=autoPolicy,proto3" json:"auto_policy,omitempty" yaml:"auto_policy,omitempty"`
	AvailabilityZone          string                          `protobuf:"bytes,2,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty" yaml:"availability_zone,omitempty"`
	HaMode                    string                          `protobuf:"bytes,3,opt,name=ha_mode,json=haMode,proto3" json:"ha_mode,omitempty" yaml:"ha_mode,omitempty"`
	InterfaceList             []*ServiceInstanceInterfaceType `protobuf:"bytes,4,rep,name=interface_list,json=interfaceList,proto3" json:"interface_list,omitempty" yaml:"interface_list,omitempty"`
	LeftIPAddress             string                          `protobuf:"bytes,5,opt,name=left_ip_address,json=leftIpAddress,proto3" json:"left_ip_address,omitempty" yaml:"left_ip_address,omitempty"`
	LeftVirtualNetwork        string                          `protobuf:"bytes,6,opt,name=left_virtual_network,json=leftVirtualNetwork,proto3" json:"left_virtual_network,omitempty" yaml:"left_virtual_network,omitempty"`
	ManagementVirtualNetwork  string                          `protobuf:"bytes,7,opt,name=management_virtual_network,json=managementVirtualNetwork,proto3" json:"management_virtual_network,omitempty" yaml:"management_virtual_network,omitempty"`
	RightIPAddress            string                          `protobuf:"bytes,8,opt,name=right_ip_address,json=rightIpAddress,proto3" json:"right_ip_address,omitempty" yaml:"right_ip_address,omitempty"`
	RightVirtualNetwork       string                          `protobuf:"bytes,9,opt,name=right_virtual_network,json=rightVirtualNetwork,proto3" json:"right_virtual_network,omitempty" yaml:"right_virtual_network,omitempty"`
	ScaleOut                  *ServiceScaleOutType            `protobuf:"bytes,10,opt,name=scale_out,json=scaleOut,proto3" json:"scale_out,omitempty" yaml:"scale_out,omitempty"`
	ServiceVirtualizationType string                          `protobuf:"bytes,11,opt,name=service_virtualization_type,json=serviceVirtualizationType,proto3" json:"service_virtualization_type,omitempty" yaml:"service_virtualization_type,omitempty"`
	VirtualRouterID           string                          `protobuf:"bytes,12,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty" yaml:"virtual_router_id,omitempty"`
}

func (m *ServiceInstanceType) Reset()      { *m = ServiceInstanceType{} }
func (*ServiceInstanceType) ProtoMessage() {}
func (*ServiceInstanceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{552}
}
func (m *ServiceInstanceType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceInstanceType.Unmarshal(m, b)
}
func (m *ServiceInstanceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceInstanceType.Marshal(b, m, deterministic)
}
func (m *ServiceInstanceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceInstanceType.Merge(m, src)
}
func (m *ServiceInstanceType) XXX_Size() int {
	return xxx_messageInfo_ServiceInstanceType.Size(m)
}
func (m *ServiceInstanceType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceInstanceType.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceInstanceType proto.InternalMessageInfo

func (m *ServiceInstanceType) GetAutoPolicy() bool {
	if m != nil {
		return m.AutoPolicy
	}
	return false
}

func (m *ServiceInstanceType) GetAvailabilityZone() string {
	if m != nil {
		return m.AvailabilityZone
	}
	return ""
}

func (m *ServiceInstanceType) GetHaMode() string {
	if m != nil {
		return m.HaMode
	}
	return ""
}

func (m *ServiceInstanceType) GetInterfaceList() []*ServiceInstanceInterfaceType {
	if m != nil {
		return m.InterfaceList
	}
	return nil
}

func (m *ServiceInstanceType) GetLeftIPAddress() string {
	if m != nil {
		return m.LeftIPAddress
	}
	return ""
}

func (m *ServiceInstanceType) GetLeftVirtualNetwork() string {
	if m != nil {
		return m.LeftVirtualNetwork
	}
	return ""
}

func (m *ServiceInstanceType) GetManagementVirtualNetwork() string {
	if m != nil {
		return m.ManagementVirtualNetwork
	}
	return ""
}

func (m *ServiceInstanceType) GetRightIPAddress() string {
	if m != nil {
		return m.RightIPAddress
	}
	return ""
}

func (m *ServiceInstanceType) GetRightVirtualNetwork() string {
	if m != nil {
		return m.RightVirtualNetwork
	}
	return ""
}

func (m *ServiceInstanceType) GetScaleOut() *ServiceScaleOutType {
	if m != nil {
		return m.ScaleOut
	}
	return nil
}

func (m *ServiceInstanceType) GetServiceVirtualizationType() string {
	if m != nil {
		return m.ServiceVirtualizationType
	}
	return ""
}

func (m *ServiceInstanceType) GetVirtualRouterID() string {
	if m != nil {
		return m.VirtualRouterID
	}
	return ""
}

type ServiceInterfaceTag struct {
	InterfaceType string `protobuf:"bytes,1,opt,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty" yaml:"interface_type,omitempty"`
}

func (m *ServiceInterfaceTag) Reset()      { *m = ServiceInterfaceTag{} }
func (*ServiceInterfaceTag) ProtoMessage() {}
func (*ServiceInterfaceTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{553}
}
func (m *ServiceInterfaceTag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceInterfaceTag.Unmarshal(m, b)
}
func (m *ServiceInterfaceTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceInterfaceTag.Marshal(b, m, deterministic)
}
func (m *ServiceInterfaceTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceInterfaceTag.Merge(m, src)
}
func (m *ServiceInterfaceTag) XXX_Size() int {
	return xxx_messageInfo_ServiceInterfaceTag.Size(m)
}
func (m *ServiceInterfaceTag) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceInterfaceTag.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceInterfaceTag proto.InternalMessageInfo

func (m *ServiceInterfaceTag) GetInterfaceType() string {
	if m != nil {
		return m.InterfaceType
	}
	return ""
}

type ServiceScaleOutType struct {
	AutoScale    bool  `protobuf:"varint,1,opt,name=auto_scale,json=autoScale,proto3" json:"auto_scale,omitempty" yaml:"auto_scale,omitempty"`
	MaxInstances int64 `protobuf:"varint,2,opt,name=max_instances,json=maxInstances,proto3" json:"max_instances,omitempty" yaml:"max_instances,omitempty"`
}

func (m *ServiceScaleOutType) Reset()      { *m = ServiceScaleOutType{} }
func (*ServiceScaleOutType) ProtoMessage() {}
func (*ServiceScaleOutType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{554}
}
func (m *ServiceScaleOutType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceScaleOutType.Unmarshal(m, b)
}
func (m *ServiceScaleOutType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceScaleOutType.Marshal(b, m, deterministic)
}
func (m *ServiceScaleOutType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceScaleOutType.Merge(m, src)
}
func (m *ServiceScaleOutType) XXX_Size() int {
	return xxx_messageInfo_ServiceScaleOutType.Size(m)
}
func (m *ServiceScaleOutType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceScaleOutType.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceScaleOutType proto.InternalMessageInfo

func (m *ServiceScaleOutType) GetAutoScale() bool {
	if m != nil {
		return m.AutoScale
	}
	return false
}

func (m *ServiceScaleOutType) GetMaxInstances() int64 {
	if m != nil {
		return m.MaxInstances
	}
	return 0
}

type ServiceTemplateInterfaceType struct {
	ServiceInterfaceType string `protobuf:"bytes,1,opt,name=service_interface_type,json=serviceInterfaceType,proto3" json:"service_interface_type,omitempty" yaml:"service_interface_type,omitempty"`
	SharedIP             bool   `protobuf:"varint,2,opt,name=shared_ip,json=sharedIp,proto3" json:"shared_ip,omitempty" yaml:"shared_ip,omitempty"`
	StaticRouteEnable    bool   `protobuf:"varint,3,opt,name=static_route_enable,json=staticRouteEnable,proto3" json:"static_route_enable,omitempty" yaml:"static_route_enable,omitempty"`
}

func (m *ServiceTemplateInterfaceType) Reset()      { *m = ServiceTemplateInterfaceType{} }
func (*ServiceTemplateInterfaceType) ProtoMessage() {}
func (*ServiceTemplateInterfaceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{555}
}
func (m *ServiceTemplateInterfaceType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceTemplateInterfaceType.Unmarshal(m, b)
}
func (m *ServiceTemplateInterfaceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceTemplateInterfaceType.Marshal(b, m, deterministic)
}
func (m *ServiceTemplateInterfaceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceTemplateInterfaceType.Merge(m, src)
}
func (m *ServiceTemplateInterfaceType) XXX_Size() int {
	return xxx_messageInfo_ServiceTemplateInterfaceType.Size(m)
}
func (m *ServiceTemplateInterfaceType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceTemplateInterfaceType.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceTemplateInterfaceType proto.InternalMessageInfo

func (m *ServiceTemplateInterfaceType) GetServiceInterfaceType() string {
	if m != nil {
		return m.ServiceInterfaceType
	}
	return ""
}

func (m *ServiceTemplateInterfaceType) GetSharedIP() bool {
	if m != nil {
		return m.SharedIP
	}
	return false
}

func (m *ServiceTemplateInterfaceType) GetStaticRouteEnable() bool {
	if m != nil {
		return m.StaticRouteEnable
	}
	return false
}

type ServiceTemplateType struct {
	AvailabilityZoneEnable    bool                            `protobuf:"varint,1,opt,name=availability_zone_enable,json=availabilityZoneEnable,proto3" json:"availability_zone_enable,omitempty" yaml:"availability_zone_enable,omitempty"`
	Flavor                    string                          `protobuf:"bytes,2,opt,name=flavor,proto3" json:"flavor,omitempty" yaml:"flavor,omitempty"`
	ImageName                 string                          `protobuf:"bytes,3,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty" yaml:"image_name,omitempty"`
	InstanceData              string                          `protobuf:"bytes,4,opt,name=instance_data,json=instanceData,proto3" json:"instance_data,omitempty" yaml:"instance_data,omitempty"`
	InterfaceType             []*ServiceTemplateInterfaceType `protobuf:"bytes,5,rep,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty" yaml:"interface_type,omitempty"`
	OrderedInterfaces         bool                            `protobuf:"varint,6,opt,name=ordered_interfaces,json=orderedInterfaces,proto3" json:"ordered_interfaces,omitempty" yaml:"ordered_interfaces,omitempty"`
	ServiceMode               string                          `protobuf:"bytes,7,opt,name=service_mode,json=serviceMode,proto3" json:"service_mode,omitempty" yaml:"service_mode,omitempty"`
	ServiceScaling            bool                            `protobuf:"varint,8,opt,name=service_scaling,json=serviceScaling,proto3" json:"service_scaling,omitempty" yaml:"service_scaling,omitempty"`
	ServiceType               string                          `protobuf:"bytes,9,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty" yaml:"service_type,omitempty"`
	ServiceVirtualizationType string                          `protobuf:"bytes,10,opt,name=service_virtualization_type,json=serviceVirtualizationType,proto3" json:"service_virtualization_type,omitempty" yaml:"service_virtualization_type,omitempty"`
	Version                   int64                           `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty" yaml:"version,omitempty"`
	VrouterInstanceType       string                          `protobuf:"bytes,12,opt,name=vrouter_instance_type,json=vrouterInstanceType,proto3" json:"vrouter_instance_type,omitempty" yaml:"vrouter_instance_type,omitempty"`
}

func (m *ServiceTemplateType) Reset()      { *m = ServiceTemplateType{} }
func (*ServiceTemplateType) ProtoMessage() {}
func (*ServiceTemplateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{556}
}
func (m *ServiceTemplateType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceTemplateType.Unmarshal(m, b)
}
func (m *ServiceTemplateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceTemplateType.Marshal(b, m, deterministic)
}
func (m *ServiceTemplateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceTemplateType.Merge(m, src)
}
func (m *ServiceTemplateType) XXX_Size() int {
	return xxx_messageInfo_ServiceTemplateType.Size(m)
}
func (m *ServiceTemplateType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceTemplateType.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceTemplateType proto.InternalMessageInfo

func (m *ServiceTemplateType) GetAvailabilityZoneEnable() bool {
	if m != nil {
		return m.AvailabilityZoneEnable
	}
	return false
}

func (m *ServiceTemplateType) GetFlavor() string {
	if m != nil {
		return m.Flavor
	}
	return ""
}

func (m *ServiceTemplateType) GetImageName() string {
	if m != nil {
		return m.ImageName
	}
	return ""
}

func (m *ServiceTemplateType) GetInstanceData() string {
	if m != nil {
		return m.InstanceData
	}
	return ""
}

func (m *ServiceTemplateType) GetInterfaceType() []*ServiceTemplateInterfaceType {
	if m != nil {
		return m.InterfaceType
	}
	return nil
}

func (m *ServiceTemplateType) GetOrderedInterfaces() bool {
	if m != nil {
		return m.OrderedInterfaces
	}
	return false
}

func (m *ServiceTemplateType) GetServiceMode() string {
	if m != nil {
		return m.ServiceMode
	}
	return ""
}

func (m *ServiceTemplateType) GetServiceScaling() bool {
	if m != nil {
		return m.ServiceScaling
	}
	return false
}

func (m *ServiceTemplateType) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *ServiceTemplateType) GetServiceVirtualizationType() string {
	if m != nil {
		return m.ServiceVirtualizationType
	}
	return ""
}

func (m *ServiceTemplateType) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ServiceTemplateType) GetVrouterInstanceType() string {
	if m != nil {
		return m.VrouterInstanceType
	}
	return ""
}

type ServiceVirtualNetworkType struct {
	VirtualNetworkType string `protobuf:"bytes,1,opt,name=virtual_network_type,json=virtualNetworkType,proto3" json:"virtual_network_type,omitempty" yaml:"virtual_network_type,omitempty"`
}

func (m *ServiceVirtualNetworkType) Reset()      { *m = ServiceVirtualNetworkType{} }
func (*ServiceVirtualNetworkType) ProtoMessage() {}
func (*ServiceVirtualNetworkType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{557}
}
func (m *ServiceVirtualNetworkType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceVirtualNetworkType.Unmarshal(m, b)
}
func (m *ServiceVirtualNetworkType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceVirtualNetworkType.Marshal(b, m, deterministic)
}
func (m *ServiceVirtualNetworkType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceVirtualNetworkType.Merge(m, src)
}
func (m *ServiceVirtualNetworkType) XXX_Size() int {
	return xxx_messageInfo_ServiceVirtualNetworkType.Size(m)
}
func (m *ServiceVirtualNetworkType) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceVirtualNetworkType.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceVirtualNetworkType proto.InternalMessageInfo

func (m *ServiceVirtualNetworkType) GetVirtualNetworkType() string {
	if m != nil {
		return m.VirtualNetworkType
	}
	return ""
}

type SflowParameters struct {
	AdaptiveSampleRate       int64                     `protobuf:"varint,1,opt,name=adaptive_sample_rate,json=adaptiveSampleRate,proto3" json:"adaptive_sample_rate,omitempty" yaml:"adaptive_sample_rate,omitempty"`
	AgentID                  string                    `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty" yaml:"agent_id,omitempty"`
	EnabledInterfaceParams   []*EnabledInterfaceParams `protobuf:"bytes,3,rep,name=enabled_interface_params,json=enabledInterfaceParams,proto3" json:"enabled_interface_params,omitempty" yaml:"enabled_interface_params,omitempty"`
	EnabledInterfaceType     string                    `protobuf:"bytes,4,opt,name=enabled_interface_type,json=enabledInterfaceType,proto3" json:"enabled_interface_type,omitempty" yaml:"enabled_interface_type,omitempty"`
	StatsCollectionFrequency *StatsCollectionFrequency `protobuf:"bytes,5,opt,name=stats_collection_frequency,json=statsCollectionFrequency,proto3" json:"stats_collection_frequency,omitempty" yaml:"stats_collection_frequency,omitempty"`
}

func (m *SflowParameters) Reset()      { *m = SflowParameters{} }
func (*SflowParameters) ProtoMessage() {}
func (*SflowParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{558}
}
func (m *SflowParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SflowParameters.Unmarshal(m, b)
}
func (m *SflowParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SflowParameters.Marshal(b, m, deterministic)
}
func (m *SflowParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SflowParameters.Merge(m, src)
}
func (m *SflowParameters) XXX_Size() int {
	return xxx_messageInfo_SflowParameters.Size(m)
}
func (m *SflowParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_SflowParameters.DiscardUnknown(m)
}

var xxx_messageInfo_SflowParameters proto.InternalMessageInfo

func (m *SflowParameters) GetAdaptiveSampleRate() int64 {
	if m != nil {
		return m.AdaptiveSampleRate
	}
	return 0
}

func (m *SflowParameters) GetAgentID() string {
	if m != nil {
		return m.AgentID
	}
	return ""
}

func (m *SflowParameters) GetEnabledInterfaceParams() []*EnabledInterfaceParams {
	if m != nil {
		return m.EnabledInterfaceParams
	}
	return nil
}

func (m *SflowParameters) GetEnabledInterfaceType() string {
	if m != nil {
		return m.EnabledInterfaceType
	}
	return ""
}

func (m *SflowParameters) GetStatsCollectionFrequency() *StatsCollectionFrequency {
	if m != nil {
		return m.StatsCollectionFrequency
	}
	return nil
}

type ShareType struct {
	Tenant       string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty" yaml:"tenant,omitempty"`
	TenantAccess int64  `protobuf:"varint,2,opt,name=tenant_access,json=tenantAccess,proto3" json:"tenant_access,omitempty" yaml:"tenant_access,omitempty"`
}

func (m *ShareType) Reset()      { *m = ShareType{} }
func (*ShareType) ProtoMessage() {}
func (*ShareType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{559}
}
func (m *ShareType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShareType.Unmarshal(m, b)
}
func (m *ShareType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShareType.Marshal(b, m, deterministic)
}
func (m *ShareType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareType.Merge(m, src)
}
func (m *ShareType) XXX_Size() int {
	return xxx_messageInfo_ShareType.Size(m)
}
func (m *ShareType) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareType.DiscardUnknown(m)
}

var xxx_messageInfo_ShareType proto.InternalMessageInfo

func (m *ShareType) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ShareType) GetTenantAccess() int64 {
	if m != nil {
		return m.TenantAccess
	}
	return 0
}

type SloRateType struct {
	Rate int64 `protobuf:"varint,1,opt,name=rate,proto3" json:"rate,omitempty" yaml:"rate,omitempty"`
}

func (m *SloRateType) Reset()      { *m = SloRateType{} }
func (*SloRateType) ProtoMessage() {}
func (*SloRateType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{560}
}
func (m *SloRateType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SloRateType.Unmarshal(m, b)
}
func (m *SloRateType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SloRateType.Marshal(b, m, deterministic)
}
func (m *SloRateType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SloRateType.Merge(m, src)
}
func (m *SloRateType) XXX_Size() int {
	return xxx_messageInfo_SloRateType.Size(m)
}
func (m *SloRateType) XXX_DiscardUnknown() {
	xxx_messageInfo_SloRateType.DiscardUnknown(m)
}

var xxx_messageInfo_SloRateType proto.InternalMessageInfo

func (m *SloRateType) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

type StaticMirrorNhType struct {
	Vni               int64  `protobuf:"varint,1,opt,name=vni,proto3" json:"vni,omitempty" yaml:"vni,omitempty"`
	VtepDSTIPAddress  string `protobuf:"bytes,2,opt,name=vtep_dst_ip_address,json=vtepDstIpAddress,proto3" json:"vtep_dst_ip_address,omitempty" yaml:"vtep_dst_ip_address,omitempty"`
	VtepDSTMacAddress string `protobuf:"bytes,3,opt,name=vtep_dst_mac_address,json=vtepDstMacAddress,proto3" json:"vtep_dst_mac_address,omitempty" yaml:"vtep_dst_mac_address,omitempty"`
}

func (m *StaticMirrorNhType) Reset()      { *m = StaticMirrorNhType{} }
func (*StaticMirrorNhType) ProtoMessage() {}
func (*StaticMirrorNhType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{561}
}
func (m *StaticMirrorNhType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StaticMirrorNhType.Unmarshal(m, b)
}
func (m *StaticMirrorNhType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StaticMirrorNhType.Marshal(b, m, deterministic)
}
func (m *StaticMirrorNhType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticMirrorNhType.Merge(m, src)
}
func (m *StaticMirrorNhType) XXX_Size() int {
	return xxx_messageInfo_StaticMirrorNhType.Size(m)
}
func (m *StaticMirrorNhType) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticMirrorNhType.DiscardUnknown(m)
}

var xxx_messageInfo_StaticMirrorNhType proto.InternalMessageInfo

func (m *StaticMirrorNhType) GetVni() int64 {
	if m != nil {
		return m.Vni
	}
	return 0
}

func (m *StaticMirrorNhType) GetVtepDSTIPAddress() string {
	if m != nil {
		return m.VtepDSTIPAddress
	}
	return ""
}

func (m *StaticMirrorNhType) GetVtepDSTMacAddress() string {
	if m != nil {
		return m.VtepDSTMacAddress
	}
	return ""
}

type StaticRouteEntriesType struct {
	Route []*StaticRouteType `protobuf:"bytes,1,rep,name=route,proto3" json:"route,omitempty" yaml:"route,omitempty"`
}

func (m *StaticRouteEntriesType) Reset()      { *m = StaticRouteEntriesType{} }
func (*StaticRouteEntriesType) ProtoMessage() {}
func (*StaticRouteEntriesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{562}
}
func (m *StaticRouteEntriesType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StaticRouteEntriesType.Unmarshal(m, b)
}
func (m *StaticRouteEntriesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StaticRouteEntriesType.Marshal(b, m, deterministic)
}
func (m *StaticRouteEntriesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticRouteEntriesType.Merge(m, src)
}
func (m *StaticRouteEntriesType) XXX_Size() int {
	return xxx_messageInfo_StaticRouteEntriesType.Size(m)
}
func (m *StaticRouteEntriesType) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticRouteEntriesType.DiscardUnknown(m)
}

var xxx_messageInfo_StaticRouteEntriesType proto.InternalMessageInfo

func (m *StaticRouteEntriesType) GetRoute() []*StaticRouteType {
	if m != nil {
		return m.Route
	}
	return nil
}

type StaticRouteParameters struct {
	InterfaceRouteTableUUID []string `protobuf:"bytes,1,rep,name=interface_route_table_uuid,json=interfaceRouteTableUuid,proto3" json:"interface_route_table_uuid,omitempty" yaml:"interface_route_table_uuid,omitempty"`
	NextHopIPAddress        string   `protobuf:"bytes,2,opt,name=next_hop_ip_address,json=nextHopIpAddress,proto3" json:"next_hop_ip_address,omitempty" yaml:"next_hop_ip_address,omitempty"`
}

func (m *StaticRouteParameters) Reset()      { *m = StaticRouteParameters{} }
func (*StaticRouteParameters) ProtoMessage() {}
func (*StaticRouteParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{563}
}
func (m *StaticRouteParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StaticRouteParameters.Unmarshal(m, b)
}
func (m *StaticRouteParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StaticRouteParameters.Marshal(b, m, deterministic)
}
func (m *StaticRouteParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticRouteParameters.Merge(m, src)
}
func (m *StaticRouteParameters) XXX_Size() int {
	return xxx_messageInfo_StaticRouteParameters.Size(m)
}
func (m *StaticRouteParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticRouteParameters.DiscardUnknown(m)
}

var xxx_messageInfo_StaticRouteParameters proto.InternalMessageInfo

func (m *StaticRouteParameters) GetInterfaceRouteTableUUID() []string {
	if m != nil {
		return m.InterfaceRouteTableUUID
	}
	return nil
}

func (m *StaticRouteParameters) GetNextHopIPAddress() string {
	if m != nil {
		return m.NextHopIPAddress
	}
	return ""
}

type StaticRouteType struct {
	Community   []string `protobuf:"bytes,1,rep,name=community,proto3" json:"community,omitempty" yaml:"community,omitempty"`
	NextHop     string   `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty" yaml:"next_hop,omitempty"`
	Prefix      string   `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty" yaml:"prefix,omitempty"`
	RouteTarget []string `protobuf:"bytes,4,rep,name=route_target,json=routeTarget,proto3" json:"route_target,omitempty" yaml:"route_target,omitempty"`
}

func (m *StaticRouteType) Reset()      { *m = StaticRouteType{} }
func (*StaticRouteType) ProtoMessage() {}
func (*StaticRouteType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{564}
}
func (m *StaticRouteType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StaticRouteType.Unmarshal(m, b)
}
func (m *StaticRouteType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StaticRouteType.Marshal(b, m, deterministic)
}
func (m *StaticRouteType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticRouteType.Merge(m, src)
}
func (m *StaticRouteType) XXX_Size() int {
	return xxx_messageInfo_StaticRouteType.Size(m)
}
func (m *StaticRouteType) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticRouteType.DiscardUnknown(m)
}

var xxx_messageInfo_StaticRouteType proto.InternalMessageInfo

func (m *StaticRouteType) GetCommunity() []string {
	if m != nil {
		return m.Community
	}
	return nil
}

func (m *StaticRouteType) GetNextHop() string {
	if m != nil {
		return m.NextHop
	}
	return ""
}

func (m *StaticRouteType) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *StaticRouteType) GetRouteTarget() []string {
	if m != nil {
		return m.RouteTarget
	}
	return nil
}

type StatsCollectionFrequency struct {
	Direction       string `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty" yaml:"direction,omitempty"`
	PollingInterval int64  `protobuf:"varint,2,opt,name=polling_interval,json=pollingInterval,proto3" json:"polling_interval,omitempty" yaml:"polling_interval,omitempty"`
	SampleRate      int64  `protobuf:"varint,3,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty" yaml:"sample_rate,omitempty"`
}

func (m *StatsCollectionFrequency) Reset()      { *m = StatsCollectionFrequency{} }
func (*StatsCollectionFrequency) ProtoMessage() {}
func (*StatsCollectionFrequency) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{565}
}
func (m *StatsCollectionFrequency) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsCollectionFrequency.Unmarshal(m, b)
}
func (m *StatsCollectionFrequency) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsCollectionFrequency.Marshal(b, m, deterministic)
}
func (m *StatsCollectionFrequency) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsCollectionFrequency.Merge(m, src)
}
func (m *StatsCollectionFrequency) XXX_Size() int {
	return xxx_messageInfo_StatsCollectionFrequency.Size(m)
}
func (m *StatsCollectionFrequency) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsCollectionFrequency.DiscardUnknown(m)
}

var xxx_messageInfo_StatsCollectionFrequency proto.InternalMessageInfo

func (m *StatsCollectionFrequency) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

func (m *StatsCollectionFrequency) GetPollingInterval() int64 {
	if m != nil {
		return m.PollingInterval
	}
	return 0
}

func (m *StatsCollectionFrequency) GetSampleRate() int64 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

type StormControlParameters struct {
	BandwidthPercent        int64    `protobuf:"varint,1,opt,name=bandwidth_percent,json=bandwidthPercent,proto3" json:"bandwidth_percent,omitempty" yaml:"bandwidth_percent,omitempty"`
	NoBroadcast             bool     `protobuf:"varint,2,opt,name=no_broadcast,json=noBroadcast,proto3" json:"no_broadcast,omitempty" yaml:"no_broadcast,omitempty"`
	NoMulticast             bool     `protobuf:"varint,3,opt,name=no_multicast,json=noMulticast,proto3" json:"no_multicast,omitempty" yaml:"no_multicast,omitempty"`
	NoRegisteredMulticast   bool     `protobuf:"varint,4,opt,name=no_registered_multicast,json=noRegisteredMulticast,proto3" json:"no_registered_multicast,omitempty" yaml:"no_registered_multicast,omitempty"`
	NoUnknownUnicast        bool     `protobuf:"varint,5,opt,name=no_unknown_unicast,json=noUnknownUnicast,proto3" json:"no_unknown_unicast,omitempty" yaml:"no_unknown_unicast,omitempty"`
	NoUnregisteredMulticast bool     `protobuf:"varint,6,opt,name=no_unregistered_multicast,json=noUnregisteredMulticast,proto3" json:"no_unregistered_multicast,omitempty" yaml:"no_unregistered_multicast,omitempty"`
	RecoveryTimeout         int64    `protobuf:"varint,7,opt,name=recovery_timeout,json=recoveryTimeout,proto3" json:"recovery_timeout,omitempty" yaml:"recovery_timeout,omitempty"`
	StormControlActions     []string `protobuf:"bytes,8,rep,name=storm_control_actions,json=stormControlActions,proto3" json:"storm_control_actions,omitempty" yaml:"storm_control_actions,omitempty"`
}

func (m *StormControlParameters) Reset()      { *m = StormControlParameters{} }
func (*StormControlParameters) ProtoMessage() {}
func (*StormControlParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{566}
}
func (m *StormControlParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StormControlParameters.Unmarshal(m, b)
}
func (m *StormControlParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StormControlParameters.Marshal(b, m, deterministic)
}
func (m *StormControlParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StormControlParameters.Merge(m, src)
}
func (m *StormControlParameters) XXX_Size() int {
	return xxx_messageInfo_StormControlParameters.Size(m)
}
func (m *StormControlParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_StormControlParameters.DiscardUnknown(m)
}

var xxx_messageInfo_StormControlParameters proto.InternalMessageInfo

func (m *StormControlParameters) GetBandwidthPercent() int64 {
	if m != nil {
		return m.BandwidthPercent
	}
	return 0
}

func (m *StormControlParameters) GetNoBroadcast() bool {
	if m != nil {
		return m.NoBroadcast
	}
	return false
}

func (m *StormControlParameters) GetNoMulticast() bool {
	if m != nil {
		return m.NoMulticast
	}
	return false
}

func (m *StormControlParameters) GetNoRegisteredMulticast() bool {
	if m != nil {
		return m.NoRegisteredMulticast
	}
	return false
}

func (m *StormControlParameters) GetNoUnknownUnicast() bool {
	if m != nil {
		return m.NoUnknownUnicast
	}
	return false
}

func (m *StormControlParameters) GetNoUnregisteredMulticast() bool {
	if m != nil {
		return m.NoUnregisteredMulticast
	}
	return false
}

func (m *StormControlParameters) GetRecoveryTimeout() int64 {
	if m != nil {
		return m.RecoveryTimeout
	}
	return 0
}

func (m *StormControlParameters) GetStormControlActions() []string {
	if m != nil {
		return m.StormControlActions
	}
	return nil
}

type StructuredSyslogLinkType struct {
	Overlay  string `protobuf:"bytes,1,opt,name=overlay,proto3" json:"overlay,omitempty" yaml:"overlay,omitempty"`
	Underlay string `protobuf:"bytes,2,opt,name=underlay,proto3" json:"underlay,omitempty" yaml:"underlay,omitempty"`
}

func (m *StructuredSyslogLinkType) Reset()      { *m = StructuredSyslogLinkType{} }
func (*StructuredSyslogLinkType) ProtoMessage() {}
func (*StructuredSyslogLinkType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{567}
}
func (m *StructuredSyslogLinkType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredSyslogLinkType.Unmarshal(m, b)
}
func (m *StructuredSyslogLinkType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredSyslogLinkType.Marshal(b, m, deterministic)
}
func (m *StructuredSyslogLinkType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredSyslogLinkType.Merge(m, src)
}
func (m *StructuredSyslogLinkType) XXX_Size() int {
	return xxx_messageInfo_StructuredSyslogLinkType.Size(m)
}
func (m *StructuredSyslogLinkType) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredSyslogLinkType.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredSyslogLinkType proto.InternalMessageInfo

func (m *StructuredSyslogLinkType) GetOverlay() string {
	if m != nil {
		return m.Overlay
	}
	return ""
}

func (m *StructuredSyslogLinkType) GetUnderlay() string {
	if m != nil {
		return m.Underlay
	}
	return ""
}

type StructuredSyslogLinkmap struct {
	Links []*StructuredSyslogLinkType `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty" yaml:"links,omitempty"`
}

func (m *StructuredSyslogLinkmap) Reset()      { *m = StructuredSyslogLinkmap{} }
func (*StructuredSyslogLinkmap) ProtoMessage() {}
func (*StructuredSyslogLinkmap) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{568}
}
func (m *StructuredSyslogLinkmap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StructuredSyslogLinkmap.Unmarshal(m, b)
}
func (m *StructuredSyslogLinkmap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StructuredSyslogLinkmap.Marshal(b, m, deterministic)
}
func (m *StructuredSyslogLinkmap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StructuredSyslogLinkmap.Merge(m, src)
}
func (m *StructuredSyslogLinkmap) XXX_Size() int {
	return xxx_messageInfo_StructuredSyslogLinkmap.Size(m)
}
func (m *StructuredSyslogLinkmap) XXX_DiscardUnknown() {
	xxx_messageInfo_StructuredSyslogLinkmap.DiscardUnknown(m)
}

var xxx_messageInfo_StructuredSyslogLinkmap proto.InternalMessageInfo

func (m *StructuredSyslogLinkmap) GetLinks() []*StructuredSyslogLinkType {
	if m != nil {
		return m.Links
	}
	return nil
}

type SubnetListType struct {
	Subnet []*SubnetType `protobuf:"bytes,1,rep,name=subnet,proto3" json:"subnet,omitempty" yaml:"subnet,omitempty"`
}

func (m *SubnetListType) Reset()      { *m = SubnetListType{} }
func (*SubnetListType) ProtoMessage() {}
func (*SubnetListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{569}
}
func (m *SubnetListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubnetListType.Unmarshal(m, b)
}
func (m *SubnetListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubnetListType.Marshal(b, m, deterministic)
}
func (m *SubnetListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetListType.Merge(m, src)
}
func (m *SubnetListType) XXX_Size() int {
	return xxx_messageInfo_SubnetListType.Size(m)
}
func (m *SubnetListType) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetListType.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetListType proto.InternalMessageInfo

func (m *SubnetListType) GetSubnet() []*SubnetType {
	if m != nil {
		return m.Subnet
	}
	return nil
}

type SubnetType struct {
	IPPrefix    string `protobuf:"bytes,1,opt,name=ip_prefix,json=ipPrefix,proto3" json:"ip_prefix,omitempty" yaml:"ip_prefix,omitempty"`
	IPPrefixLen int64  `protobuf:"varint,2,opt,name=ip_prefix_len,json=ipPrefixLen,proto3" json:"ip_prefix_len,omitempty" yaml:"ip_prefix_len,omitempty"`
}

func (m *SubnetType) Reset()      { *m = SubnetType{} }
func (*SubnetType) ProtoMessage() {}
func (*SubnetType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{570}
}
func (m *SubnetType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubnetType.Unmarshal(m, b)
}
func (m *SubnetType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubnetType.Marshal(b, m, deterministic)
}
func (m *SubnetType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetType.Merge(m, src)
}
func (m *SubnetType) XXX_Size() int {
	return xxx_messageInfo_SubnetType.Size(m)
}
func (m *SubnetType) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetType.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetType proto.InternalMessageInfo

func (m *SubnetType) GetIPPrefix() string {
	if m != nil {
		return m.IPPrefix
	}
	return ""
}

func (m *SubnetType) GetIPPrefixLen() int64 {
	if m != nil {
		return m.IPPrefixLen
	}
	return 0
}

type TelemetryResourceInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty" yaml:"path,omitempty"`
	Rate string `protobuf:"bytes,3,opt,name=rate,proto3" json:"rate,omitempty" yaml:"rate,omitempty"`
}

func (m *TelemetryResourceInfo) Reset()      { *m = TelemetryResourceInfo{} }
func (*TelemetryResourceInfo) ProtoMessage() {}
func (*TelemetryResourceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{571}
}
func (m *TelemetryResourceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryResourceInfo.Unmarshal(m, b)
}
func (m *TelemetryResourceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryResourceInfo.Marshal(b, m, deterministic)
}
func (m *TelemetryResourceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryResourceInfo.Merge(m, src)
}
func (m *TelemetryResourceInfo) XXX_Size() int {
	return xxx_messageInfo_TelemetryResourceInfo.Size(m)
}
func (m *TelemetryResourceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryResourceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryResourceInfo proto.InternalMessageInfo

func (m *TelemetryResourceInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TelemetryResourceInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TelemetryResourceInfo) GetRate() string {
	if m != nil {
		return m.Rate
	}
	return ""
}

type TelemetryStateInfo struct {
	Resource   []*TelemetryResourceInfo `protobuf:"bytes,1,rep,name=resource,proto3" json:"resource,omitempty" yaml:"resource,omitempty"`
	ServerIP   string                   `protobuf:"bytes,2,opt,name=server_ip,json=serverIp,proto3" json:"server_ip,omitempty" yaml:"server_ip,omitempty"`
	ServerPort int64                    `protobuf:"varint,3,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty" yaml:"server_port,omitempty"`
}

func (m *TelemetryStateInfo) Reset()      { *m = TelemetryStateInfo{} }
func (*TelemetryStateInfo) ProtoMessage() {}
func (*TelemetryStateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{572}
}
func (m *TelemetryStateInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TelemetryStateInfo.Unmarshal(m, b)
}
func (m *TelemetryStateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TelemetryStateInfo.Marshal(b, m, deterministic)
}
func (m *TelemetryStateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TelemetryStateInfo.Merge(m, src)
}
func (m *TelemetryStateInfo) XXX_Size() int {
	return xxx_messageInfo_TelemetryStateInfo.Size(m)
}
func (m *TelemetryStateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TelemetryStateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TelemetryStateInfo proto.InternalMessageInfo

func (m *TelemetryStateInfo) GetResource() []*TelemetryResourceInfo {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *TelemetryStateInfo) GetServerIP() string {
	if m != nil {
		return m.ServerIP
	}
	return ""
}

func (m *TelemetryStateInfo) GetServerPort() int64 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

type TermActionListType struct {
	Action string            `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty" yaml:"action,omitempty"`
	Update *ActionUpdateType `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty" yaml:"update,omitempty"`
}

func (m *TermActionListType) Reset()      { *m = TermActionListType{} }
func (*TermActionListType) ProtoMessage() {}
func (*TermActionListType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{573}
}
func (m *TermActionListType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermActionListType.Unmarshal(m, b)
}
func (m *TermActionListType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermActionListType.Marshal(b, m, deterministic)
}
func (m *TermActionListType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermActionListType.Merge(m, src)
}
func (m *TermActionListType) XXX_Size() int {
	return xxx_messageInfo_TermActionListType.Size(m)
}
func (m *TermActionListType) XXX_DiscardUnknown() {
	xxx_messageInfo_TermActionListType.DiscardUnknown(m)
}

var xxx_messageInfo_TermActionListType proto.InternalMessageInfo

func (m *TermActionListType) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *TermActionListType) GetUpdate() *ActionUpdateType {
	if m != nil {
		return m.Update
	}
	return nil
}

type TermMatchConditionType struct {
	Community            string             `protobuf:"bytes,1,opt,name=community,proto3" json:"community,omitempty" yaml:"community,omitempty"`
	CommunityList        []string           `protobuf:"bytes,2,rep,name=community_list,json=communityList,proto3" json:"community_list,omitempty" yaml:"community_list,omitempty"`
	CommunityMatchAll    bool               `protobuf:"varint,3,opt,name=community_match_all,json=communityMatchAll,proto3" json:"community_match_all,omitempty" yaml:"community_match_all,omitempty"`
	ExtcommunityList     []string           `protobuf:"bytes,4,rep,name=extcommunity_list,json=extcommunityList,proto3" json:"extcommunity_list,omitempty" yaml:"extcommunity_list,omitempty"`
	ExtcommunityMatchAll bool               `protobuf:"varint,5,opt,name=extcommunity_match_all,json=extcommunityMatchAll,proto3" json:"extcommunity_match_all,omitempty" yaml:"extcommunity_match_all,omitempty"`
	Prefix               []*PrefixMatchType `protobuf:"bytes,6,rep,name=prefix,proto3" json:"prefix,omitempty" yaml:"prefix,omitempty"`
	Protocol             []string           `protobuf:"bytes,7,rep,name=protocol,proto3" json:"protocol,omitempty" yaml:"protocol,omitempty"`
}

func (m *TermMatchConditionType) Reset()      { *m = TermMatchConditionType{} }
func (*TermMatchConditionType) ProtoMessage() {}
func (*TermMatchConditionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{574}
}
func (m *TermMatchConditionType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermMatchConditionType.Unmarshal(m, b)
}
func (m *TermMatchConditionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermMatchConditionType.Marshal(b, m, deterministic)
}
func (m *TermMatchConditionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermMatchConditionType.Merge(m, src)
}
func (m *TermMatchConditionType) XXX_Size() int {
	return xxx_messageInfo_TermMatchConditionType.Size(m)
}
func (m *TermMatchConditionType) XXX_DiscardUnknown() {
	xxx_messageInfo_TermMatchConditionType.DiscardUnknown(m)
}

var xxx_messageInfo_TermMatchConditionType proto.InternalMessageInfo

func (m *TermMatchConditionType) GetCommunity() string {
	if m != nil {
		return m.Community
	}
	return ""
}

func (m *TermMatchConditionType) GetCommunityList() []string {
	if m != nil {
		return m.CommunityList
	}
	return nil
}

func (m *TermMatchConditionType) GetCommunityMatchAll() bool {
	if m != nil {
		return m.CommunityMatchAll
	}
	return false
}

func (m *TermMatchConditionType) GetExtcommunityList() []string {
	if m != nil {
		return m.ExtcommunityList
	}
	return nil
}

func (m *TermMatchConditionType) GetExtcommunityMatchAll() bool {
	if m != nil {
		return m.ExtcommunityMatchAll
	}
	return false
}

func (m *TermMatchConditionType) GetPrefix() []*PrefixMatchType {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *TermMatchConditionType) GetProtocol() []string {
	if m != nil {
		return m.Protocol
	}
	return nil
}

type TimerType struct {
	EndTime     string `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" yaml:"end_time,omitempty"`
	OffInterval string `protobuf:"bytes,2,opt,name=off_interval,json=offInterval,proto3" json:"off_interval,omitempty" yaml:"off_interval,omitempty"`
	OnInterval  string `protobuf:"bytes,3,opt,name=on_interval,json=onInterval,proto3" json:"on_interval,omitempty" yaml:"on_interval,omitempty"`
	StartTime   string `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" yaml:"start_time,omitempty"`
}

func (m *TimerType) Reset()      { *m = TimerType{} }
func (*TimerType) ProtoMessage() {}
func (*TimerType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{575}
}
func (m *TimerType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimerType.Unmarshal(m, b)
}
func (m *TimerType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimerType.Marshal(b, m, deterministic)
}
func (m *TimerType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimerType.Merge(m, src)
}
func (m *TimerType) XXX_Size() int {
	return xxx_messageInfo_TimerType.Size(m)
}
func (m *TimerType) XXX_DiscardUnknown() {
	xxx_messageInfo_TimerType.DiscardUnknown(m)
}

var xxx_messageInfo_TimerType proto.InternalMessageInfo

func (m *TimerType) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *TimerType) GetOffInterval() string {
	if m != nil {
		return m.OffInterval
	}
	return ""
}

func (m *TimerType) GetOnInterval() string {
	if m != nil {
		return m.OnInterval
	}
	return ""
}

func (m *TimerType) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

type UserCredentials struct {
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty" yaml:"password,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty" yaml:"username,omitempty"`
}

func (m *UserCredentials) Reset()      { *m = UserCredentials{} }
func (*UserCredentials) ProtoMessage() {}
func (*UserCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{576}
}
func (m *UserCredentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserCredentials.Unmarshal(m, b)
}
func (m *UserCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserCredentials.Marshal(b, m, deterministic)
}
func (m *UserCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserCredentials.Merge(m, src)
}
func (m *UserCredentials) XXX_Size() int {
	return xxx_messageInfo_UserCredentials.Size(m)
}
func (m *UserCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_UserCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_UserCredentials proto.InternalMessageInfo

func (m *UserCredentials) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserCredentials) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type UserDefinedLogStat struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name,omitempty"`
	Pattern string `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty" yaml:"pattern,omitempty"`
}

func (m *UserDefinedLogStat) Reset()      { *m = UserDefinedLogStat{} }
func (*UserDefinedLogStat) ProtoMessage() {}
func (*UserDefinedLogStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{577}
}
func (m *UserDefinedLogStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDefinedLogStat.Unmarshal(m, b)
}
func (m *UserDefinedLogStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDefinedLogStat.Marshal(b, m, deterministic)
}
func (m *UserDefinedLogStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDefinedLogStat.Merge(m, src)
}
func (m *UserDefinedLogStat) XXX_Size() int {
	return xxx_messageInfo_UserDefinedLogStat.Size(m)
}
func (m *UserDefinedLogStat) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDefinedLogStat.DiscardUnknown(m)
}

var xxx_messageInfo_UserDefinedLogStat proto.InternalMessageInfo

func (m *UserDefinedLogStat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserDefinedLogStat) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

type UserDefinedLogStatList struct {
	Statlist []*UserDefinedLogStat `protobuf:"bytes,1,rep,name=statlist,proto3" json:"statlist,omitempty" yaml:"statlist,omitempty"`
}

func (m *UserDefinedLogStatList) Reset()      { *m = UserDefinedLogStatList{} }
func (*UserDefinedLogStatList) ProtoMessage() {}
func (*UserDefinedLogStatList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{578}
}
func (m *UserDefinedLogStatList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDefinedLogStatList.Unmarshal(m, b)
}
func (m *UserDefinedLogStatList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDefinedLogStatList.Marshal(b, m, deterministic)
}
func (m *UserDefinedLogStatList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDefinedLogStatList.Merge(m, src)
}
func (m *UserDefinedLogStatList) XXX_Size() int {
	return xxx_messageInfo_UserDefinedLogStatList.Size(m)
}
func (m *UserDefinedLogStatList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDefinedLogStatList.DiscardUnknown(m)
}

var xxx_messageInfo_UserDefinedLogStatList proto.InternalMessageInfo

func (m *UserDefinedLogStatList) GetStatlist() []*UserDefinedLogStat {
	if m != nil {
		return m.Statlist
	}
	return nil
}

type UuidType struct {
	UUIDLslong int64 `protobuf:"varint,1,opt,name=uuid_lslong,json=uuidLslong,proto3" json:"uuid_lslong,omitempty" yaml:"uuid_lslong,omitempty"`
	UUIDMslong int64 `protobuf:"varint,2,opt,name=uuid_mslong,json=uuidMslong,proto3" json:"uuid_mslong,omitempty" yaml:"uuid_mslong,omitempty"`
}

func (m *UuidType) Reset()      { *m = UuidType{} }
func (*UuidType) ProtoMessage() {}
func (*UuidType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{579}
}
func (m *UuidType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UuidType.Unmarshal(m, b)
}
func (m *UuidType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UuidType.Marshal(b, m, deterministic)
}
func (m *UuidType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UuidType.Merge(m, src)
}
func (m *UuidType) XXX_Size() int {
	return xxx_messageInfo_UuidType.Size(m)
}
func (m *UuidType) XXX_DiscardUnknown() {
	xxx_messageInfo_UuidType.DiscardUnknown(m)
}

var xxx_messageInfo_UuidType proto.InternalMessageInfo

func (m *UuidType) GetUUIDLslong() int64 {
	if m != nil {
		return m.UUIDLslong
	}
	return 0
}

func (m *UuidType) GetUUIDMslong() int64 {
	if m != nil {
		return m.UUIDMslong
	}
	return 0
}

type UveKeysType struct {
	UveKey []string `protobuf:"bytes,1,rep,name=uve_key,json=uveKey,proto3" json:"uve_key,omitempty" yaml:"uve_key,omitempty"`
}

func (m *UveKeysType) Reset()      { *m = UveKeysType{} }
func (*UveKeysType) ProtoMessage() {}
func (*UveKeysType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{580}
}
func (m *UveKeysType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UveKeysType.Unmarshal(m, b)
}
func (m *UveKeysType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UveKeysType.Marshal(b, m, deterministic)
}
func (m *UveKeysType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UveKeysType.Merge(m, src)
}
func (m *UveKeysType) XXX_Size() int {
	return xxx_messageInfo_UveKeysType.Size(m)
}
func (m *UveKeysType) XXX_DiscardUnknown() {
	xxx_messageInfo_UveKeysType.DiscardUnknown(m)
}

var xxx_messageInfo_UveKeysType proto.InternalMessageInfo

func (m *UveKeysType) GetUveKey() []string {
	if m != nil {
		return m.UveKey
	}
	return nil
}

type VendorHardwaresType struct {
	VendorHardware []string `protobuf:"bytes,1,rep,name=vendor_hardware,json=vendorHardware,proto3" json:"vendor_hardware,omitempty" yaml:"vendor_hardware,omitempty"`
}

func (m *VendorHardwaresType) Reset()      { *m = VendorHardwaresType{} }
func (*VendorHardwaresType) ProtoMessage() {}
func (*VendorHardwaresType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{581}
}
func (m *VendorHardwaresType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VendorHardwaresType.Unmarshal(m, b)
}
func (m *VendorHardwaresType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VendorHardwaresType.Marshal(b, m, deterministic)
}
func (m *VendorHardwaresType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VendorHardwaresType.Merge(m, src)
}
func (m *VendorHardwaresType) XXX_Size() int {
	return xxx_messageInfo_VendorHardwaresType.Size(m)
}
func (m *VendorHardwaresType) XXX_DiscardUnknown() {
	xxx_messageInfo_VendorHardwaresType.DiscardUnknown(m)
}

var xxx_messageInfo_VendorHardwaresType proto.InternalMessageInfo

func (m *VendorHardwaresType) GetVendorHardware() []string {
	if m != nil {
		return m.VendorHardware
	}
	return nil
}

type VirtualDnsRecordType struct {
	RecordClass        string `protobuf:"bytes,1,opt,name=record_class,json=recordClass,proto3" json:"record_class,omitempty" yaml:"record_class,omitempty"`
	RecordData         string `protobuf:"bytes,2,opt,name=record_data,json=recordData,proto3" json:"record_data,omitempty" yaml:"record_data,omitempty"`
	RecordMXPreference int64  `protobuf:"varint,3,opt,name=record_mx_preference,json=recordMxPreference,proto3" json:"record_mx_preference,omitempty" yaml:"record_mx_preference,omitempty"`
	RecordName         string `protobuf:"bytes,4,opt,name=record_name,json=recordName,proto3" json:"record_name,omitempty" yaml:"record_name,omitempty"`
	RecordSourceName   string `protobuf:"bytes,5,opt,name=record_source_name,json=recordSourceName,proto3" json:"record_source_name,omitempty" yaml:"record_source_name,omitempty"`
	RecordTTLSeconds   int64  `protobuf:"varint,6,opt,name=record_ttl_seconds,json=recordTtlSeconds,proto3" json:"record_ttl_seconds,omitempty" yaml:"record_ttl_seconds,omitempty"`
	RecordType         string `protobuf:"bytes,7,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty" yaml:"record_type,omitempty"`
}

func (m *VirtualDnsRecordType) Reset()      { *m = VirtualDnsRecordType{} }
func (*VirtualDnsRecordType) ProtoMessage() {}
func (*VirtualDnsRecordType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{582}
}
func (m *VirtualDnsRecordType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualDnsRecordType.Unmarshal(m, b)
}
func (m *VirtualDnsRecordType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualDnsRecordType.Marshal(b, m, deterministic)
}
func (m *VirtualDnsRecordType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualDnsRecordType.Merge(m, src)
}
func (m *VirtualDnsRecordType) XXX_Size() int {
	return xxx_messageInfo_VirtualDnsRecordType.Size(m)
}
func (m *VirtualDnsRecordType) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualDnsRecordType.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualDnsRecordType proto.InternalMessageInfo

func (m *VirtualDnsRecordType) GetRecordClass() string {
	if m != nil {
		return m.RecordClass
	}
	return ""
}

func (m *VirtualDnsRecordType) GetRecordData() string {
	if m != nil {
		return m.RecordData
	}
	return ""
}

func (m *VirtualDnsRecordType) GetRecordMXPreference() int64 {
	if m != nil {
		return m.RecordMXPreference
	}
	return 0
}

func (m *VirtualDnsRecordType) GetRecordName() string {
	if m != nil {
		return m.RecordName
	}
	return ""
}

func (m *VirtualDnsRecordType) GetRecordSourceName() string {
	if m != nil {
		return m.RecordSourceName
	}
	return ""
}

func (m *VirtualDnsRecordType) GetRecordTTLSeconds() int64 {
	if m != nil {
		return m.RecordTTLSeconds
	}
	return 0
}

func (m *VirtualDnsRecordType) GetRecordType() string {
	if m != nil {
		return m.RecordType
	}
	return ""
}

type VirtualDnsType struct {
	DefaultTTLSeconds        int64             `protobuf:"varint,1,opt,name=default_ttl_seconds,json=defaultTtlSeconds,proto3" json:"default_ttl_seconds,omitempty" yaml:"default_ttl_seconds,omitempty"`
	DomainName               string            `protobuf:"bytes,2,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty" yaml:"domain_name,omitempty"`
	DynamicRecordsFromClient bool              `protobuf:"varint,3,opt,name=dynamic_records_from_client,json=dynamicRecordsFromClient,proto3" json:"dynamic_records_from_client,omitempty" yaml:"dynamic_records_from_client,omitempty"`
	ExternalVisible          bool              `protobuf:"varint,4,opt,name=external_visible,json=externalVisible,proto3" json:"external_visible,omitempty" yaml:"external_visible,omitempty"`
	FloatingIPRecord         string            `protobuf:"bytes,5,opt,name=floating_ip_record,json=floatingIpRecord,proto3" json:"floating_ip_record,omitempty" yaml:"floating_ip_record,omitempty"`
	NextVirtualDNS           string            `protobuf:"bytes,6,opt,name=next_virtual_DNS,json=nextVirtualDNS,proto3" json:"next_virtual_DNS,omitempty" yaml:"next_virtual_DNS,omitempty"`
	RecordOrder              string            `protobuf:"bytes,7,opt,name=record_order,json=recordOrder,proto3" json:"record_order,omitempty" yaml:"record_order,omitempty"`
	ReverseResolution        bool              `protobuf:"varint,8,opt,name=reverse_resolution,json=reverseResolution,proto3" json:"reverse_resolution,omitempty" yaml:"reverse_resolution,omitempty"`
	SoaRecord                *DnsSoaRecordType `protobuf:"bytes,9,opt,name=soa_record,json=soaRecord,proto3" json:"soa_record,omitempty" yaml:"soa_record,omitempty"`
}

func (m *VirtualDnsType) Reset()      { *m = VirtualDnsType{} }
func (*VirtualDnsType) ProtoMessage() {}
func (*VirtualDnsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{583}
}
func (m *VirtualDnsType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualDnsType.Unmarshal(m, b)
}
func (m *VirtualDnsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualDnsType.Marshal(b, m, deterministic)
}
func (m *VirtualDnsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualDnsType.Merge(m, src)
}
func (m *VirtualDnsType) XXX_Size() int {
	return xxx_messageInfo_VirtualDnsType.Size(m)
}
func (m *VirtualDnsType) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualDnsType.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualDnsType proto.InternalMessageInfo

func (m *VirtualDnsType) GetDefaultTTLSeconds() int64 {
	if m != nil {
		return m.DefaultTTLSeconds
	}
	return 0
}

func (m *VirtualDnsType) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *VirtualDnsType) GetDynamicRecordsFromClient() bool {
	if m != nil {
		return m.DynamicRecordsFromClient
	}
	return false
}

func (m *VirtualDnsType) GetExternalVisible() bool {
	if m != nil {
		return m.ExternalVisible
	}
	return false
}

func (m *VirtualDnsType) GetFloatingIPRecord() string {
	if m != nil {
		return m.FloatingIPRecord
	}
	return ""
}

func (m *VirtualDnsType) GetNextVirtualDNS() string {
	if m != nil {
		return m.NextVirtualDNS
	}
	return ""
}

func (m *VirtualDnsType) GetRecordOrder() string {
	if m != nil {
		return m.RecordOrder
	}
	return ""
}

func (m *VirtualDnsType) GetReverseResolution() bool {
	if m != nil {
		return m.ReverseResolution
	}
	return false
}

func (m *VirtualDnsType) GetSoaRecord() *DnsSoaRecordType {
	if m != nil {
		return m.SoaRecord
	}
	return nil
}

type VirtualIpType struct {
	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address,omitempty"`
	AdminState bool   `protobuf:"varint,2,opt,name=admin_state,json=adminState,proto3" json:"admin_state,omitempty" yaml:"admin_state,omitempty"`
	//Following property should not have omitempty JSON tag and should have correct default value in schema.
	//For example "connection_limit" property had default value defined only on WebUI site.
	ConnectionLimit       int64  `protobuf:"varint,3,opt,name=connection_limit,json=connectionLimit,proto3" json:"connection_limit" yaml:"connection_limit,omitempty"`
	PersistenceCookieName string `protobuf:"bytes,4,opt,name=persistence_cookie_name,json=persistenceCookieName,proto3" json:"persistence_cookie_name,omitempty" yaml:"persistence_cookie_name,omitempty"`
	PersistenceType       string `protobuf:"bytes,5,opt,name=persistence_type,json=persistenceType,proto3" json:"persistence_type,omitempty" yaml:"persistence_type,omitempty"`
	Protocol              string `protobuf:"bytes,6,opt,name=protocol,proto3" json:"protocol,omitempty" yaml:"protocol,omitempty"`
	ProtocolPort          int64  `protobuf:"varint,7,opt,name=protocol_port,json=protocolPort,proto3" json:"protocol_port,omitempty" yaml:"protocol_port,omitempty"`
	Status                string `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty" yaml:"status,omitempty"`
	StatusDescription     string `protobuf:"bytes,9,opt,name=status_description,json=statusDescription,proto3" json:"status_description,omitempty" yaml:"status_description,omitempty"`
	SubnetID              string `protobuf:"bytes,10,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty" yaml:"subnet_id,omitempty"`
}

func (m *VirtualIpType) Reset()      { *m = VirtualIpType{} }
func (*VirtualIpType) ProtoMessage() {}
func (*VirtualIpType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{584}
}
func (m *VirtualIpType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualIpType.Unmarshal(m, b)
}
func (m *VirtualIpType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualIpType.Marshal(b, m, deterministic)
}
func (m *VirtualIpType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualIpType.Merge(m, src)
}
func (m *VirtualIpType) XXX_Size() int {
	return xxx_messageInfo_VirtualIpType.Size(m)
}
func (m *VirtualIpType) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualIpType.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualIpType proto.InternalMessageInfo

func (m *VirtualIpType) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *VirtualIpType) GetAdminState() bool {
	if m != nil {
		return m.AdminState
	}
	return false
}

func (m *VirtualIpType) GetConnectionLimit() int64 {
	if m != nil {
		return m.ConnectionLimit
	}
	return 0
}

func (m *VirtualIpType) GetPersistenceCookieName() string {
	if m != nil {
		return m.PersistenceCookieName
	}
	return ""
}

func (m *VirtualIpType) GetPersistenceType() string {
	if m != nil {
		return m.PersistenceType
	}
	return ""
}

func (m *VirtualIpType) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *VirtualIpType) GetProtocolPort() int64 {
	if m != nil {
		return m.ProtocolPort
	}
	return 0
}

func (m *VirtualIpType) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *VirtualIpType) GetStatusDescription() string {
	if m != nil {
		return m.StatusDescription
	}
	return ""
}

func (m *VirtualIpType) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

type VirtualMachineInterfacePropertiesType struct {
	InterfaceMirror      *InterfaceMirrorType `protobuf:"bytes,1,opt,name=interface_mirror,json=interfaceMirror,proto3" json:"interface_mirror,omitempty" yaml:"interface_mirror,omitempty"`
	LocalPreference      int64                `protobuf:"varint,2,opt,name=local_preference,json=localPreference,proto3" json:"local_preference,omitempty" yaml:"local_preference,omitempty"`
	MaxFlows             int64                `protobuf:"varint,3,opt,name=max_flows,json=maxFlows,proto3" json:"max_flows,omitempty" yaml:"max_flows,omitempty"`
	ServiceInterfaceType string               `protobuf:"bytes,4,opt,name=service_interface_type,json=serviceInterfaceType,proto3" json:"service_interface_type,omitempty" yaml:"service_interface_type,omitempty"`
	SubInterfaceVlanTag  int64                `protobuf:"varint,5,opt,name=sub_interface_vlan_tag,json=subInterfaceVlanTag,proto3" json:"sub_interface_vlan_tag,omitempty" yaml:"sub_interface_vlan_tag,omitempty"`
}

func (m *VirtualMachineInterfacePropertiesType) Reset()      { *m = VirtualMachineInterfacePropertiesType{} }
func (*VirtualMachineInterfacePropertiesType) ProtoMessage() {}
func (*VirtualMachineInterfacePropertiesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{585}
}
func (m *VirtualMachineInterfacePropertiesType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualMachineInterfacePropertiesType.Unmarshal(m, b)
}
func (m *VirtualMachineInterfacePropertiesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualMachineInterfacePropertiesType.Marshal(b, m, deterministic)
}
func (m *VirtualMachineInterfacePropertiesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualMachineInterfacePropertiesType.Merge(m, src)
}
func (m *VirtualMachineInterfacePropertiesType) XXX_Size() int {
	return xxx_messageInfo_VirtualMachineInterfacePropertiesType.Size(m)
}
func (m *VirtualMachineInterfacePropertiesType) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualMachineInterfacePropertiesType.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualMachineInterfacePropertiesType proto.InternalMessageInfo

func (m *VirtualMachineInterfacePropertiesType) GetInterfaceMirror() *InterfaceMirrorType {
	if m != nil {
		return m.InterfaceMirror
	}
	return nil
}

func (m *VirtualMachineInterfacePropertiesType) GetLocalPreference() int64 {
	if m != nil {
		return m.LocalPreference
	}
	return 0
}

func (m *VirtualMachineInterfacePropertiesType) GetMaxFlows() int64 {
	if m != nil {
		return m.MaxFlows
	}
	return 0
}

func (m *VirtualMachineInterfacePropertiesType) GetServiceInterfaceType() string {
	if m != nil {
		return m.ServiceInterfaceType
	}
	return ""
}

func (m *VirtualMachineInterfacePropertiesType) GetSubInterfaceVlanTag() int64 {
	if m != nil {
		return m.SubInterfaceVlanTag
	}
	return 0
}

type VirtualNetworkPolicyType struct {
	Sequence *SequenceType `protobuf:"bytes,1,opt,name=sequence,proto3" json:"sequence,omitempty" yaml:"sequence,omitempty"`
	Timer    *TimerType    `protobuf:"bytes,2,opt,name=timer,proto3" json:"timer,omitempty" yaml:"timer,omitempty"`
}

func (m *VirtualNetworkPolicyType) Reset()      { *m = VirtualNetworkPolicyType{} }
func (*VirtualNetworkPolicyType) ProtoMessage() {}
func (*VirtualNetworkPolicyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{586}
}
func (m *VirtualNetworkPolicyType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetworkPolicyType.Unmarshal(m, b)
}
func (m *VirtualNetworkPolicyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetworkPolicyType.Marshal(b, m, deterministic)
}
func (m *VirtualNetworkPolicyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkPolicyType.Merge(m, src)
}
func (m *VirtualNetworkPolicyType) XXX_Size() int {
	return xxx_messageInfo_VirtualNetworkPolicyType.Size(m)
}
func (m *VirtualNetworkPolicyType) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkPolicyType.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkPolicyType proto.InternalMessageInfo

func (m *VirtualNetworkPolicyType) GetSequence() *SequenceType {
	if m != nil {
		return m.Sequence
	}
	return nil
}

func (m *VirtualNetworkPolicyType) GetTimer() *TimerType {
	if m != nil {
		return m.Timer
	}
	return nil
}

type VirtualNetworkRoutedPropertiesType struct {
	RoutedProperties []*RoutedProperties `protobuf:"bytes,1,rep,name=routed_properties,json=routedProperties,proto3" json:"routed_properties,omitempty" yaml:"routed_properties,omitempty"`
}

func (m *VirtualNetworkRoutedPropertiesType) Reset()      { *m = VirtualNetworkRoutedPropertiesType{} }
func (*VirtualNetworkRoutedPropertiesType) ProtoMessage() {}
func (*VirtualNetworkRoutedPropertiesType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{587}
}
func (m *VirtualNetworkRoutedPropertiesType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetworkRoutedPropertiesType.Unmarshal(m, b)
}
func (m *VirtualNetworkRoutedPropertiesType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetworkRoutedPropertiesType.Marshal(b, m, deterministic)
}
func (m *VirtualNetworkRoutedPropertiesType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkRoutedPropertiesType.Merge(m, src)
}
func (m *VirtualNetworkRoutedPropertiesType) XXX_Size() int {
	return xxx_messageInfo_VirtualNetworkRoutedPropertiesType.Size(m)
}
func (m *VirtualNetworkRoutedPropertiesType) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkRoutedPropertiesType.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkRoutedPropertiesType proto.InternalMessageInfo

func (m *VirtualNetworkRoutedPropertiesType) GetRoutedProperties() []*RoutedProperties {
	if m != nil {
		return m.RoutedProperties
	}
	return nil
}

type VirtualNetworkType struct {
	AllowTransit           bool   `protobuf:"varint,1,opt,name=allow_transit,json=allowTransit,proto3" json:"allow_transit,omitempty" yaml:"allow_transit,omitempty"`
	ForwardingMode         string `protobuf:"bytes,2,opt,name=forwarding_mode,json=forwardingMode,proto3" json:"forwarding_mode,omitempty" yaml:"forwarding_mode,omitempty"`
	MaxFlows               int64  `protobuf:"varint,3,opt,name=max_flows,json=maxFlows,proto3" json:"max_flows,omitempty" yaml:"max_flows,omitempty"`
	MirrorDestination      bool   `protobuf:"varint,4,opt,name=mirror_destination,json=mirrorDestination,proto3" json:"mirror_destination,omitempty" yaml:"mirror_destination,omitempty"`
	NetworkID              int64  `protobuf:"varint,5,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty" yaml:"network_id,omitempty"`
	RPF                    string `protobuf:"bytes,6,opt,name=rpf,proto3" json:"rpf,omitempty" yaml:"rpf,omitempty"`
	VxlanNetworkIdentifier int64  `protobuf:"varint,7,opt,name=vxlan_network_identifier,json=vxlanNetworkIdentifier,proto3" json:"vxlan_network_identifier,omitempty" yaml:"vxlan_network_identifier,omitempty"`
}

func (m *VirtualNetworkType) Reset()      { *m = VirtualNetworkType{} }
func (*VirtualNetworkType) ProtoMessage() {}
func (*VirtualNetworkType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{588}
}
func (m *VirtualNetworkType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualNetworkType.Unmarshal(m, b)
}
func (m *VirtualNetworkType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualNetworkType.Marshal(b, m, deterministic)
}
func (m *VirtualNetworkType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualNetworkType.Merge(m, src)
}
func (m *VirtualNetworkType) XXX_Size() int {
	return xxx_messageInfo_VirtualNetworkType.Size(m)
}
func (m *VirtualNetworkType) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualNetworkType.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualNetworkType proto.InternalMessageInfo

func (m *VirtualNetworkType) GetAllowTransit() bool {
	if m != nil {
		return m.AllowTransit
	}
	return false
}

func (m *VirtualNetworkType) GetForwardingMode() string {
	if m != nil {
		return m.ForwardingMode
	}
	return ""
}

func (m *VirtualNetworkType) GetMaxFlows() int64 {
	if m != nil {
		return m.MaxFlows
	}
	return 0
}

func (m *VirtualNetworkType) GetMirrorDestination() bool {
	if m != nil {
		return m.MirrorDestination
	}
	return false
}

func (m *VirtualNetworkType) GetNetworkID() int64 {
	if m != nil {
		return m.NetworkID
	}
	return 0
}

func (m *VirtualNetworkType) GetRPF() string {
	if m != nil {
		return m.RPF
	}
	return ""
}

func (m *VirtualNetworkType) GetVxlanNetworkIdentifier() int64 {
	if m != nil {
		return m.VxlanNetworkIdentifier
	}
	return 0
}

type VirtualRouterNetworkIpamType struct {
	AllocationPools []*AllocationPoolType `protobuf:"bytes,1,rep,name=allocation_pools,json=allocationPools,proto3" json:"allocation_pools,omitempty" yaml:"allocation_pools,omitempty"`
	Subnet          []*SubnetType         `protobuf:"bytes,2,rep,name=subnet,proto3" json:"subnet,omitempty" yaml:"subnet,omitempty"`
}

func (m *VirtualRouterNetworkIpamType) Reset()      { *m = VirtualRouterNetworkIpamType{} }
func (*VirtualRouterNetworkIpamType) ProtoMessage() {}
func (*VirtualRouterNetworkIpamType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{589}
}
func (m *VirtualRouterNetworkIpamType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualRouterNetworkIpamType.Unmarshal(m, b)
}
func (m *VirtualRouterNetworkIpamType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualRouterNetworkIpamType.Marshal(b, m, deterministic)
}
func (m *VirtualRouterNetworkIpamType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualRouterNetworkIpamType.Merge(m, src)
}
func (m *VirtualRouterNetworkIpamType) XXX_Size() int {
	return xxx_messageInfo_VirtualRouterNetworkIpamType.Size(m)
}
func (m *VirtualRouterNetworkIpamType) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualRouterNetworkIpamType.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualRouterNetworkIpamType proto.InternalMessageInfo

func (m *VirtualRouterNetworkIpamType) GetAllocationPools() []*AllocationPoolType {
	if m != nil {
		return m.AllocationPools
	}
	return nil
}

func (m *VirtualRouterNetworkIpamType) GetSubnet() []*SubnetType {
	if m != nil {
		return m.Subnet
	}
	return nil
}

type VnSubnetsType struct {
	HostRoutes  *RouteTableType   `protobuf:"bytes,1,opt,name=host_routes,json=hostRoutes,proto3" json:"host_routes,omitempty" yaml:"host_routes,omitempty"`
	IpamSubnets []*IpamSubnetType `protobuf:"bytes,2,rep,name=ipam_subnets,json=ipamSubnets,proto3" json:"ipam_subnets,omitempty" yaml:"ipam_subnets,omitempty"`
}

func (m *VnSubnetsType) Reset()      { *m = VnSubnetsType{} }
func (*VnSubnetsType) ProtoMessage() {}
func (*VnSubnetsType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{590}
}
func (m *VnSubnetsType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VnSubnetsType.Unmarshal(m, b)
}
func (m *VnSubnetsType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VnSubnetsType.Marshal(b, m, deterministic)
}
func (m *VnSubnetsType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VnSubnetsType.Merge(m, src)
}
func (m *VnSubnetsType) XXX_Size() int {
	return xxx_messageInfo_VnSubnetsType.Size(m)
}
func (m *VnSubnetsType) XXX_DiscardUnknown() {
	xxx_messageInfo_VnSubnetsType.DiscardUnknown(m)
}

var xxx_messageInfo_VnSubnetsType proto.InternalMessageInfo

func (m *VnSubnetsType) GetHostRoutes() *RouteTableType {
	if m != nil {
		return m.HostRoutes
	}
	return nil
}

func (m *VnSubnetsType) GetIpamSubnets() []*IpamSubnetType {
	if m != nil {
		return m.IpamSubnets
	}
	return nil
}

type VpgInterfaceParametersType struct {
	AeNum int64 `protobuf:"varint,1,opt,name=ae_num,json=aeNum,proto3" json:"ae_num,omitempty" yaml:"ae_num,omitempty"`
}

func (m *VpgInterfaceParametersType) Reset()      { *m = VpgInterfaceParametersType{} }
func (*VpgInterfaceParametersType) ProtoMessage() {}
func (*VpgInterfaceParametersType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{591}
}
func (m *VpgInterfaceParametersType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VpgInterfaceParametersType.Unmarshal(m, b)
}
func (m *VpgInterfaceParametersType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VpgInterfaceParametersType.Marshal(b, m, deterministic)
}
func (m *VpgInterfaceParametersType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VpgInterfaceParametersType.Merge(m, src)
}
func (m *VpgInterfaceParametersType) XXX_Size() int {
	return xxx_messageInfo_VpgInterfaceParametersType.Size(m)
}
func (m *VpgInterfaceParametersType) XXX_DiscardUnknown() {
	xxx_messageInfo_VpgInterfaceParametersType.DiscardUnknown(m)
}

var xxx_messageInfo_VpgInterfaceParametersType proto.InternalMessageInfo

func (m *VpgInterfaceParametersType) GetAeNum() int64 {
	if m != nil {
		return m.AeNum
	}
	return 0
}

type VrfAssignRuleType struct {
	IgnoreACL       bool                `protobuf:"varint,1,opt,name=ignore_acl,json=ignoreAcl,proto3" json:"ignore_acl,omitempty" yaml:"ignore_acl,omitempty"`
	MatchCondition  *MatchConditionType `protobuf:"bytes,2,opt,name=match_condition,json=matchCondition,proto3" json:"match_condition,omitempty" yaml:"match_condition,omitempty"`
	RoutingInstance string              `protobuf:"bytes,3,opt,name=routing_instance,json=routingInstance,proto3" json:"routing_instance,omitempty" yaml:"routing_instance,omitempty"`
	VlanTag         int64               `protobuf:"varint,4,opt,name=vlan_tag,json=vlanTag,proto3" json:"vlan_tag,omitempty" yaml:"vlan_tag,omitempty"`
}

func (m *VrfAssignRuleType) Reset()      { *m = VrfAssignRuleType{} }
func (*VrfAssignRuleType) ProtoMessage() {}
func (*VrfAssignRuleType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{592}
}
func (m *VrfAssignRuleType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VrfAssignRuleType.Unmarshal(m, b)
}
func (m *VrfAssignRuleType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VrfAssignRuleType.Marshal(b, m, deterministic)
}
func (m *VrfAssignRuleType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VrfAssignRuleType.Merge(m, src)
}
func (m *VrfAssignRuleType) XXX_Size() int {
	return xxx_messageInfo_VrfAssignRuleType.Size(m)
}
func (m *VrfAssignRuleType) XXX_DiscardUnknown() {
	xxx_messageInfo_VrfAssignRuleType.DiscardUnknown(m)
}

var xxx_messageInfo_VrfAssignRuleType proto.InternalMessageInfo

func (m *VrfAssignRuleType) GetIgnoreACL() bool {
	if m != nil {
		return m.IgnoreACL
	}
	return false
}

func (m *VrfAssignRuleType) GetMatchCondition() *MatchConditionType {
	if m != nil {
		return m.MatchCondition
	}
	return nil
}

func (m *VrfAssignRuleType) GetRoutingInstance() string {
	if m != nil {
		return m.RoutingInstance
	}
	return ""
}

func (m *VrfAssignRuleType) GetVlanTag() int64 {
	if m != nil {
		return m.VlanTag
	}
	return 0
}

type VrfAssignTableType struct {
	VRFAssignRule []*VrfAssignRuleType `protobuf:"bytes,1,rep,name=vrf_assign_rule,json=vrfAssignRule,proto3" json:"vrf_assign_rule,omitempty" yaml:"vrf_assign_rule,omitempty"`
}

func (m *VrfAssignTableType) Reset()      { *m = VrfAssignTableType{} }
func (*VrfAssignTableType) ProtoMessage() {}
func (*VrfAssignTableType) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cc10105a38dc106, []int{593}
}
func (m *VrfAssignTableType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VrfAssignTableType.Unmarshal(m, b)
}
func (m *VrfAssignTableType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VrfAssignTableType.Marshal(b, m, deterministic)
}
func (m *VrfAssignTableType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VrfAssignTableType.Merge(m, src)
}
func (m *VrfAssignTableType) XXX_Size() int {
	return xxx_messageInfo_VrfAssignTableType.Size(m)
}
func (m *VrfAssignTableType) XXX_DiscardUnknown() {
	xxx_messageInfo_VrfAssignTableType.DiscardUnknown(m)
}

var xxx_messageInfo_VrfAssignTableType proto.InternalMessageInfo

func (m *VrfAssignTableType) GetVRFAssignRule() []*VrfAssignRuleType {
	if m != nil {
		return m.VRFAssignRule
	}
	return nil
}

func init() {
	proto.RegisterType((*AccessControlList)(nil), "models.AccessControlList")
	proto.RegisterType((*AccessControlListTagRef)(nil), "models.AccessControlListTagRef")
	proto.RegisterType((*AddressGroup)(nil), "models.AddressGroup")
	proto.RegisterType((*AddressGroupTagRef)(nil), "models.AddressGroupTagRef")
	proto.RegisterType((*Alarm)(nil), "models.Alarm")
	proto.RegisterType((*AlarmTagRef)(nil), "models.AlarmTagRef")
	proto.RegisterType((*AliasIPPool)(nil), "models.AliasIPPool")
	proto.RegisterType((*AliasIPPoolTagRef)(nil), "models.AliasIPPoolTagRef")
	proto.RegisterType((*AliasIP)(nil), "models.AliasIP")
	proto.RegisterType((*AliasIPProjectRef)(nil), "models.AliasIPProjectRef")
	proto.RegisterType((*AliasIPTagRef)(nil), "models.AliasIPTagRef")
	proto.RegisterType((*AliasIPVirtualMachineInterfaceRef)(nil), "models.AliasIPVirtualMachineInterfaceRef")
	proto.RegisterType((*AnalyticsAlarmNode)(nil), "models.AnalyticsAlarmNode")
	proto.RegisterType((*AnalyticsAlarmNodeTagRef)(nil), "models.AnalyticsAlarmNodeTagRef")
	proto.RegisterType((*AnalyticsNode)(nil), "models.AnalyticsNode")
	proto.RegisterType((*AnalyticsNodeTagRef)(nil), "models.AnalyticsNodeTagRef")
	proto.RegisterType((*AnalyticsSNMPNode)(nil), "models.AnalyticsSNMPNode")
	proto.RegisterType((*AnalyticsSNMPNodeTagRef)(nil), "models.AnalyticsSNMPNodeTagRef")
	proto.RegisterType((*APIAccessList)(nil), "models.APIAccessList")
	proto.RegisterType((*APIAccessListTagRef)(nil), "models.APIAccessListTagRef")
	proto.RegisterType((*ApplicationPolicySet)(nil), "models.ApplicationPolicySet")
	proto.RegisterType((*ApplicationPolicySetFirewallPolicyRef)(nil), "models.ApplicationPolicySetFirewallPolicyRef")
	proto.RegisterType((*ApplicationPolicySetGlobalVrouterConfigRef)(nil), "models.ApplicationPolicySetGlobalVrouterConfigRef")
	proto.RegisterType((*ApplicationPolicySetTagRef)(nil), "models.ApplicationPolicySetTagRef")
	proto.RegisterType((*BGPAsAService)(nil), "models.BGPAsAService")
	proto.RegisterType((*BGPAsAServiceBGPRouterRef)(nil), "models.BGPAsAServiceBGPRouterRef")
	proto.RegisterType((*BGPAsAServiceControlNodeZoneRef)(nil), "models.BGPAsAServiceControlNodeZoneRef")
	proto.RegisterType((*BGPAsAServiceServiceHealthCheckRef)(nil), "models.BGPAsAServiceServiceHealthCheckRef")
	proto.RegisterType((*BGPAsAServiceTagRef)(nil), "models.BGPAsAServiceTagRef")
	proto.RegisterType((*BGPAsAServiceVirtualMachineInterfaceRef)(nil), "models.BGPAsAServiceVirtualMachineInterfaceRef")
	proto.RegisterType((*BGPRouter)(nil), "models.BGPRouter")
	proto.RegisterType((*BGPRouterBGPRouterRef)(nil), "models.BGPRouterBGPRouterRef")
	proto.RegisterType((*BGPRouterControlNodeZoneRef)(nil), "models.BGPRouterControlNodeZoneRef")
	proto.RegisterType((*BGPRouterSubClusterRef)(nil), "models.BGPRouterSubClusterRef")
	proto.RegisterType((*BGPRouterTagRef)(nil), "models.BGPRouterTagRef")
	proto.RegisterType((*BGPVPN)(nil), "models.BGPVPN")
	proto.RegisterType((*BGPVPNTagRef)(nil), "models.BGPVPNTagRef")
	proto.RegisterType((*BridgeDomain)(nil), "models.BridgeDomain")
	proto.RegisterType((*BridgeDomainTagRef)(nil), "models.BridgeDomainTagRef")
	proto.RegisterType((*Card)(nil), "models.Card")
	proto.RegisterType((*CardTagRef)(nil), "models.CardTagRef")
	proto.RegisterType((*CliConfig)(nil), "models.CliConfig")
	proto.RegisterType((*CliConfigTagRef)(nil), "models.CliConfigTagRef")
	proto.RegisterType((*ConfigDatabaseNode)(nil), "models.ConfigDatabaseNode")
	proto.RegisterType((*ConfigDatabaseNodeTagRef)(nil), "models.ConfigDatabaseNodeTagRef")
	proto.RegisterType((*ConfigNode)(nil), "models.ConfigNode")
	proto.RegisterType((*ConfigNodeTagRef)(nil), "models.ConfigNodeTagRef")
	proto.RegisterType((*ConfigRoot)(nil), "models.ConfigRoot")
	proto.RegisterType((*ConfigRootTagRef)(nil), "models.ConfigRootTagRef")
	proto.RegisterType((*ControlNodeZone)(nil), "models.ControlNodeZone")
	proto.RegisterType((*ControlNodeZoneTagRef)(nil), "models.ControlNodeZoneTagRef")
	proto.RegisterType((*CustomerAttachment)(nil), "models.CustomerAttachment")
	proto.RegisterType((*CustomerAttachmentFloatingIPRef)(nil), "models.CustomerAttachmentFloatingIPRef")
	proto.RegisterType((*CustomerAttachmentTagRef)(nil), "models.CustomerAttachmentTagRef")
	proto.RegisterType((*CustomerAttachmentVirtualMachineInterfaceRef)(nil), "models.CustomerAttachmentVirtualMachineInterfaceRef")
	proto.RegisterType((*DataCenterInterconnect)(nil), "models.DataCenterInterconnect")
	proto.RegisterType((*DataCenterInterconnectLogicalRouterRef)(nil), "models.DataCenterInterconnectLogicalRouterRef")
	proto.RegisterType((*DataCenterInterconnectTagRef)(nil), "models.DataCenterInterconnectTagRef")
	proto.RegisterType((*DataCenterInterconnectVirtualNetworkRef)(nil), "models.DataCenterInterconnectVirtualNetworkRef")
	proto.RegisterType((*DatabaseNode)(nil), "models.DatabaseNode")
	proto.RegisterType((*DatabaseNodeTagRef)(nil), "models.DatabaseNodeTagRef")
	proto.RegisterType((*DeviceChassis)(nil), "models.DeviceChassis")
	proto.RegisterType((*DeviceChassisTagRef)(nil), "models.DeviceChassisTagRef")
	proto.RegisterType((*DeviceFunctionalGroup)(nil), "models.DeviceFunctionalGroup")
	proto.RegisterType((*DeviceFunctionalGroupPhysicalRoleRef)(nil), "models.DeviceFunctionalGroupPhysicalRoleRef")
	proto.RegisterType((*DeviceFunctionalGroupTagRef)(nil), "models.DeviceFunctionalGroupTagRef")
	proto.RegisterType((*DeviceImage)(nil), "models.DeviceImage")
	proto.RegisterType((*DeviceImageHardwareRef)(nil), "models.DeviceImageHardwareRef")
	proto.RegisterType((*DeviceImageTagRef)(nil), "models.DeviceImageTagRef")
	proto.RegisterType((*DevicemgrNode)(nil), "models.DevicemgrNode")
	proto.RegisterType((*DevicemgrNodeTagRef)(nil), "models.DevicemgrNodeTagRef")
	proto.RegisterType((*DiscoveryServiceAssignment)(nil), "models.DiscoveryServiceAssignment")
	proto.RegisterType((*DiscoveryServiceAssignmentTagRef)(nil), "models.DiscoveryServiceAssignmentTagRef")
	proto.RegisterType((*Domain)(nil), "models.Domain")
	proto.RegisterType((*DomainTagRef)(nil), "models.DomainTagRef")
	proto.RegisterType((*DsaRule)(nil), "models.DsaRule")
	proto.RegisterType((*DsaRuleTagRef)(nil), "models.DsaRuleTagRef")
	proto.RegisterType((*E2ServiceProvider)(nil), "models.E2ServiceProvider")
	proto.RegisterType((*E2ServiceProviderPeeringPolicyRef)(nil), "models.E2ServiceProviderPeeringPolicyRef")
	proto.RegisterType((*E2ServiceProviderPhysicalRouterRef)(nil), "models.E2ServiceProviderPhysicalRouterRef")
	proto.RegisterType((*E2ServiceProviderTagRef)(nil), "models.E2ServiceProviderTagRef")
	proto.RegisterType((*FabricNamespace)(nil), "models.FabricNamespace")
	proto.RegisterType((*FabricNamespaceTagRef)(nil), "models.FabricNamespaceTagRef")
	proto.RegisterType((*Fabric)(nil), "models.Fabric")
	proto.RegisterType((*FabricIntentMapRef)(nil), "models.FabricIntentMapRef")
	proto.RegisterType((*FabricNodeProfileRef)(nil), "models.FabricNodeProfileRef")
	proto.RegisterType((*FabricTagRef)(nil), "models.FabricTagRef")
	proto.RegisterType((*FabricVirtualNetworkRef)(nil), "models.FabricVirtualNetworkRef")
	proto.RegisterType((*FeatureConfig)(nil), "models.FeatureConfig")
	proto.RegisterType((*FeatureConfigTagRef)(nil), "models.FeatureConfigTagRef")
	proto.RegisterType((*FeatureFlag)(nil), "models.FeatureFlag")
	proto.RegisterType((*FeatureFlagTagRef)(nil), "models.FeatureFlagTagRef")
	proto.RegisterType((*Feature)(nil), "models.Feature")
	proto.RegisterType((*FeatureFeatureRef)(nil), "models.FeatureFeatureRef")
	proto.RegisterType((*FeatureTagRef)(nil), "models.FeatureTagRef")
	proto.RegisterType((*FirewallPolicy)(nil), "models.FirewallPolicy")
	proto.RegisterType((*FirewallPolicyFirewallRuleRef)(nil), "models.FirewallPolicyFirewallRuleRef")
	proto.RegisterType((*FirewallPolicySecurityLoggingObjectRef)(nil), "models.FirewallPolicySecurityLoggingObjectRef")
	proto.RegisterType((*FirewallPolicyTagRef)(nil), "models.FirewallPolicyTagRef")
	proto.RegisterType((*FirewallRule)(nil), "models.FirewallRule")
	proto.RegisterType((*FirewallRuleAddressGroupRef)(nil), "models.FirewallRuleAddressGroupRef")
	proto.RegisterType((*FirewallRuleSecurityLoggingObjectRef)(nil), "models.FirewallRuleSecurityLoggingObjectRef")
	proto.RegisterType((*FirewallRuleServiceGroupRef)(nil), "models.FirewallRuleServiceGroupRef")
	proto.RegisterType((*FirewallRuleTagRef)(nil), "models.FirewallRuleTagRef")
	proto.RegisterType((*FirewallRuleVirtualNetworkRef)(nil), "models.FirewallRuleVirtualNetworkRef")
	proto.RegisterType((*FloatingIPPool)(nil), "models.FloatingIPPool")
	proto.RegisterType((*FloatingIPPoolTagRef)(nil), "models.FloatingIPPoolTagRef")
	proto.RegisterType((*FloatingIP)(nil), "models.FloatingIP")
	proto.RegisterType((*FloatingIPProjectRef)(nil), "models.FloatingIPProjectRef")
	proto.RegisterType((*FloatingIPTagRef)(nil), "models.FloatingIPTagRef")
	proto.RegisterType((*FloatingIPVirtualMachineInterfaceRef)(nil), "models.FloatingIPVirtualMachineInterfaceRef")
	proto.RegisterType((*FlowNode)(nil), "models.FlowNode")
	proto.RegisterType((*FlowNodeTagRef)(nil), "models.FlowNodeTagRef")
	proto.RegisterType((*FlowNodeVirtualNetworkRef)(nil), "models.FlowNodeVirtualNetworkRef")
	proto.RegisterType((*ForwardingClass)(nil), "models.ForwardingClass")
	proto.RegisterType((*ForwardingClassQosQueueRef)(nil), "models.ForwardingClassQosQueueRef")
	proto.RegisterType((*ForwardingClassTagRef)(nil), "models.ForwardingClassTagRef")
	proto.RegisterType((*GlobalAnalyticsConfig)(nil), "models.GlobalAnalyticsConfig")
	proto.RegisterType((*GlobalAnalyticsConfigTagRef)(nil), "models.GlobalAnalyticsConfigTagRef")
	proto.RegisterType((*GlobalQosConfig)(nil), "models.GlobalQosConfig")
	proto.RegisterType((*GlobalQosConfigTagRef)(nil), "models.GlobalQosConfigTagRef")
	proto.RegisterType((*GlobalSystemConfig)(nil), "models.GlobalSystemConfig")
	proto.RegisterType((*GlobalSystemConfigBGPRouterRef)(nil), "models.GlobalSystemConfigBGPRouterRef")
	proto.RegisterType((*GlobalSystemConfigTagRef)(nil), "models.GlobalSystemConfigTagRef")
	proto.RegisterType((*GlobalVrouterConfig)(nil), "models.GlobalVrouterConfig")
	proto.RegisterType((*GlobalVrouterConfigTagRef)(nil), "models.GlobalVrouterConfigTagRef")
	proto.RegisterType((*HardwareInventory)(nil), "models.HardwareInventory")
	proto.RegisterType((*HardwareInventoryTagRef)(nil), "models.HardwareInventoryTagRef")
	proto.RegisterType((*Hardware)(nil), "models.Hardware")
	proto.RegisterType((*HardwareCardRef)(nil), "models.HardwareCardRef")
	proto.RegisterType((*HardwareTagRef)(nil), "models.HardwareTagRef")
	proto.RegisterType((*HostBasedService)(nil), "models.HostBasedService")
	proto.RegisterType((*HostBasedServiceTagRef)(nil), "models.HostBasedServiceTagRef")
	proto.RegisterType((*HostBasedServiceVirtualNetworkRef)(nil), "models.HostBasedServiceVirtualNetworkRef")
	proto.RegisterType((*InstanceIP)(nil), "models.InstanceIP")
	proto.RegisterType((*InstanceIPFlowNodeRef)(nil), "models.InstanceIPFlowNodeRef")
	proto.RegisterType((*InstanceIPLogicalInterfaceRef)(nil), "models.InstanceIPLogicalInterfaceRef")
	proto.RegisterType((*InstanceIPNetworkIpamRef)(nil), "models.InstanceIPNetworkIpamRef")
	proto.RegisterType((*InstanceIPPhysicalRouterRef)(nil), "models.InstanceIPPhysicalRouterRef")
	proto.RegisterType((*InstanceIPTagRef)(nil), "models.InstanceIPTagRef")
	proto.RegisterType((*InstanceIPVirtualMachineInterfaceRef)(nil), "models.InstanceIPVirtualMachineInterfaceRef")
	proto.RegisterType((*InstanceIPVirtualNetworkRef)(nil), "models.InstanceIPVirtualNetworkRef")
	proto.RegisterType((*InstanceIPVirtualRouterRef)(nil), "models.InstanceIPVirtualRouterRef")
	proto.RegisterType((*IntentMap)(nil), "models.IntentMap")
	proto.RegisterType((*IntentMapTagRef)(nil), "models.IntentMapTagRef")
	proto.RegisterType((*InterfaceRouteTable)(nil), "models.InterfaceRouteTable")
	proto.RegisterType((*InterfaceRouteTableServiceInstanceRef)(nil), "models.InterfaceRouteTableServiceInstanceRef")
	proto.RegisterType((*InterfaceRouteTableTagRef)(nil), "models.InterfaceRouteTableTagRef")
	proto.RegisterType((*JobTemplate)(nil), "models.JobTemplate")
	proto.RegisterType((*JobTemplateTagRef)(nil), "models.JobTemplateTagRef")
	proto.RegisterType((*LinkAggregationGroup)(nil), "models.LinkAggregationGroup")
	proto.RegisterType((*LinkAggregationGroupPhysicalInterfaceRef)(nil), "models.LinkAggregationGroupPhysicalInterfaceRef")
	proto.RegisterType((*LinkAggregationGroupTagRef)(nil), "models.LinkAggregationGroupTagRef")
	proto.RegisterType((*LinkAggregationGroupVirtualMachineInterfaceRef)(nil), "models.LinkAggregationGroupVirtualMachineInterfaceRef")
	proto.RegisterType((*LoadbalancerHealthmonitor)(nil), "models.LoadbalancerHealthmonitor")
	proto.RegisterType((*LoadbalancerHealthmonitorTagRef)(nil), "models.LoadbalancerHealthmonitorTagRef")
	proto.RegisterType((*LoadbalancerListener)(nil), "models.LoadbalancerListener")
	proto.RegisterType((*LoadbalancerListenerLoadbalancerRef)(nil), "models.LoadbalancerListenerLoadbalancerRef")
	proto.RegisterType((*LoadbalancerListenerTagRef)(nil), "models.LoadbalancerListenerTagRef")
	proto.RegisterType((*LoadbalancerMember)(nil), "models.LoadbalancerMember")
	proto.RegisterType((*LoadbalancerMemberTagRef)(nil), "models.LoadbalancerMemberTagRef")
	proto.RegisterType((*LoadbalancerPool)(nil), "models.LoadbalancerPool")
	proto.RegisterType((*LoadbalancerPoolLoadbalancerHealthmonitorRef)(nil), "models.LoadbalancerPoolLoadbalancerHealthmonitorRef")
	proto.RegisterType((*LoadbalancerPoolLoadbalancerListenerRef)(nil), "models.LoadbalancerPoolLoadbalancerListenerRef")
	proto.RegisterType((*LoadbalancerPoolServiceApplianceSetRef)(nil), "models.LoadbalancerPoolServiceApplianceSetRef")
	proto.RegisterType((*LoadbalancerPoolServiceInstanceRef)(nil), "models.LoadbalancerPoolServiceInstanceRef")
	proto.RegisterType((*LoadbalancerPoolTagRef)(nil), "models.LoadbalancerPoolTagRef")
	proto.RegisterType((*LoadbalancerPoolVirtualMachineInterfaceRef)(nil), "models.LoadbalancerPoolVirtualMachineInterfaceRef")
	proto.RegisterType((*Loadbalancer)(nil), "models.Loadbalancer")
	proto.RegisterType((*LoadbalancerServiceApplianceSetRef)(nil), "models.LoadbalancerServiceApplianceSetRef")
	proto.RegisterType((*LoadbalancerServiceInstanceRef)(nil), "models.LoadbalancerServiceInstanceRef")
	proto.RegisterType((*LoadbalancerTagRef)(nil), "models.LoadbalancerTagRef")
	proto.RegisterType((*LoadbalancerVirtualMachineInterfaceRef)(nil), "models.LoadbalancerVirtualMachineInterfaceRef")
	proto.RegisterType((*LogicalInterface)(nil), "models.LogicalInterface")
	proto.RegisterType((*LogicalInterfaceTagRef)(nil), "models.LogicalInterfaceTagRef")
	proto.RegisterType((*LogicalInterfaceVirtualMachineInterfaceRef)(nil), "models.LogicalInterfaceVirtualMachineInterfaceRef")
	proto.RegisterType((*LogicalRouter)(nil), "models.LogicalRouter")
	proto.RegisterType((*LogicalRouterBGPVPNRef)(nil), "models.LogicalRouterBGPVPNRef")
	proto.RegisterType((*LogicalRouterPhysicalRouterRef)(nil), "models.LogicalRouterPhysicalRouterRef")
	proto.RegisterType((*LogicalRouterRouteTableRef)(nil), "models.LogicalRouterRouteTableRef")
	proto.RegisterType((*LogicalRouterRouteTargetRef)(nil), "models.LogicalRouterRouteTargetRef")
	proto.RegisterType((*LogicalRouterServiceInstanceRef)(nil), "models.LogicalRouterServiceInstanceRef")
	proto.RegisterType((*LogicalRouterTagRef)(nil), "models.LogicalRouterTagRef")
	proto.RegisterType((*LogicalRouterVirtualMachineInterfaceRef)(nil), "models.LogicalRouterVirtualMachineInterfaceRef")
	proto.RegisterType((*LogicalRouterVirtualNetworkRef)(nil), "models.LogicalRouterVirtualNetworkRef")
	proto.RegisterType((*MulticastPolicy)(nil), "models.MulticastPolicy")
	proto.RegisterType((*MulticastPolicyTagRef)(nil), "models.MulticastPolicyTagRef")
	proto.RegisterType((*Namespace)(nil), "models.Namespace")
	proto.RegisterType((*NamespaceTagRef)(nil), "models.NamespaceTagRef")
	proto.RegisterType((*NetworkDeviceConfig)(nil), "models.NetworkDeviceConfig")
	proto.RegisterType((*NetworkDeviceConfigPhysicalRouterRef)(nil), "models.NetworkDeviceConfigPhysicalRouterRef")
	proto.RegisterType((*NetworkDeviceConfigTagRef)(nil), "models.NetworkDeviceConfigTagRef")
	proto.RegisterType((*NetworkIpam)(nil), "models.NetworkIpam")
	proto.RegisterType((*NetworkIpamTagRef)(nil), "models.NetworkIpamTagRef")
	proto.RegisterType((*NetworkIpamVirtualDNSRef)(nil), "models.NetworkIpamVirtualDNSRef")
	proto.RegisterType((*NetworkPolicy)(nil), "models.NetworkPolicy")
	proto.RegisterType((*NetworkPolicyTagRef)(nil), "models.NetworkPolicyTagRef")
	proto.RegisterType((*NodeProfile)(nil), "models.NodeProfile")
	proto.RegisterType((*NodeProfileHardwareRef)(nil), "models.NodeProfileHardwareRef")
	proto.RegisterType((*NodeProfileJobTemplateRef)(nil), "models.NodeProfileJobTemplateRef")
	proto.RegisterType((*NodeProfileRoleDefinitionRef)(nil), "models.NodeProfileRoleDefinitionRef")
	proto.RegisterType((*NodeProfileTagRef)(nil), "models.NodeProfileTagRef")
	proto.RegisterType((*Node)(nil), "models.Node")
	proto.RegisterType((*NodeNodeProfileRef)(nil), "models.NodeNodeProfileRef")
	proto.RegisterType((*NodeTagRef)(nil), "models.NodeTagRef")
	proto.RegisterType((*OverlayRole)(nil), "models.OverlayRole")
	proto.RegisterType((*OverlayRoleTagRef)(nil), "models.OverlayRoleTagRef")
	proto.RegisterType((*PeeringPolicy)(nil), "models.PeeringPolicy")
	proto.RegisterType((*PeeringPolicyTagRef)(nil), "models.PeeringPolicyTagRef")
	proto.RegisterType((*PhysicalInterface)(nil), "models.PhysicalInterface")
	proto.RegisterType((*PhysicalInterfacePhysicalInterfaceRef)(nil), "models.PhysicalInterfacePhysicalInterfaceRef")
	proto.RegisterType((*PhysicalInterfacePortRef)(nil), "models.PhysicalInterfacePortRef")
	proto.RegisterType((*PhysicalInterfaceTagRef)(nil), "models.PhysicalInterfaceTagRef")
	proto.RegisterType((*PhysicalRole)(nil), "models.PhysicalRole")
	proto.RegisterType((*PhysicalRoleTagRef)(nil), "models.PhysicalRoleTagRef")
	proto.RegisterType((*PhysicalRouter)(nil), "models.PhysicalRouter")
	proto.RegisterType((*PhysicalRouterBGPRouterRef)(nil), "models.PhysicalRouterBGPRouterRef")
	proto.RegisterType((*PhysicalRouterDeviceChassisRef)(nil), "models.PhysicalRouterDeviceChassisRef")
	proto.RegisterType((*PhysicalRouterDeviceFunctionalGroupRef)(nil), "models.PhysicalRouterDeviceFunctionalGroupRef")
	proto.RegisterType((*PhysicalRouterDeviceImageRef)(nil), "models.PhysicalRouterDeviceImageRef")
	proto.RegisterType((*PhysicalRouterFabricRef)(nil), "models.PhysicalRouterFabricRef")
	proto.RegisterType((*PhysicalRouterIntentMapRef)(nil), "models.PhysicalRouterIntentMapRef")
	proto.RegisterType((*PhysicalRouterNodeProfileRef)(nil), "models.PhysicalRouterNodeProfileRef")
	proto.RegisterType((*PhysicalRouterOverlayRoleRef)(nil), "models.PhysicalRouterOverlayRoleRef")
	proto.RegisterType((*PhysicalRouterPhysicalRoleRef)(nil), "models.PhysicalRouterPhysicalRoleRef")
	proto.RegisterType((*PhysicalRouterTagRef)(nil), "models.PhysicalRouterTagRef")
	proto.RegisterType((*PhysicalRouterTelemetryProfileRef)(nil), "models.PhysicalRouterTelemetryProfileRef")
	proto.RegisterType((*PhysicalRouterVirtualNetworkRef)(nil), "models.PhysicalRouterVirtualNetworkRef")
	proto.RegisterType((*PhysicalRouterVirtualRouterRef)(nil), "models.PhysicalRouterVirtualRouterRef")
	proto.RegisterType((*PolicyManagement)(nil), "models.PolicyManagement")
	proto.RegisterType((*PolicyManagementTagRef)(nil), "models.PolicyManagementTagRef")
	proto.RegisterType((*PortGroup)(nil), "models.PortGroup")
	proto.RegisterType((*PortGroupPortRef)(nil), "models.PortGroupPortRef")
	proto.RegisterType((*PortGroupTagRef)(nil), "models.PortGroupTagRef")
	proto.RegisterType((*PortProfile)(nil), "models.PortProfile")
	proto.RegisterType((*PortProfileStormControlProfileRef)(nil), "models.PortProfileStormControlProfileRef")
	proto.RegisterType((*PortProfileTagRef)(nil), "models.PortProfileTagRef")
	proto.RegisterType((*Port)(nil), "models.Port")
	proto.RegisterType((*PortTagRef)(nil), "models.PortTagRef")
	proto.RegisterType((*PortTuple)(nil), "models.PortTuple")
	proto.RegisterType((*PortTupleLogicalRouterRef)(nil), "models.PortTupleLogicalRouterRef")
	proto.RegisterType((*PortTupleTagRef)(nil), "models.PortTupleTagRef")
	proto.RegisterType((*PortTupleVirtualNetworkRef)(nil), "models.PortTupleVirtualNetworkRef")
	proto.RegisterType((*Project)(nil), "models.Project")
	proto.RegisterType((*ProjectAliasIPPoolRef)(nil), "models.ProjectAliasIPPoolRef")
	proto.RegisterType((*ProjectApplicationPolicySetRef)(nil), "models.ProjectApplicationPolicySetRef")
	proto.RegisterType((*ProjectFloatingIPPoolRef)(nil), "models.ProjectFloatingIPPoolRef")
	proto.RegisterType((*ProjectNamespaceRef)(nil), "models.ProjectNamespaceRef")
	proto.RegisterType((*ProjectTagRef)(nil), "models.ProjectTagRef")
	proto.RegisterType((*ProviderAttachment)(nil), "models.ProviderAttachment")
	proto.RegisterType((*ProviderAttachmentTagRef)(nil), "models.ProviderAttachmentTagRef")
	proto.RegisterType((*ProviderAttachmentVirtualRouterRef)(nil), "models.ProviderAttachmentVirtualRouterRef")
	proto.RegisterType((*QosConfig)(nil), "models.QosConfig")
	proto.RegisterType((*QosConfigGlobalSystemConfigRef)(nil), "models.QosConfigGlobalSystemConfigRef")
	proto.RegisterType((*QosConfigTagRef)(nil), "models.QosConfigTagRef")
	proto.RegisterType((*QosQueue)(nil), "models.QosQueue")
	proto.RegisterType((*QosQueueTagRef)(nil), "models.QosQueueTagRef")
	proto.RegisterType((*RoleConfig)(nil), "models.RoleConfig")
	proto.RegisterType((*RoleConfigTagRef)(nil), "models.RoleConfigTagRef")
	proto.RegisterType((*RoleDefinition)(nil), "models.RoleDefinition")
	proto.RegisterType((*RoleDefinitionFeatureRef)(nil), "models.RoleDefinitionFeatureRef")
	proto.RegisterType((*RoleDefinitionOverlayRoleRef)(nil), "models.RoleDefinitionOverlayRoleRef")
	proto.RegisterType((*RoleDefinitionPhysicalRoleRef)(nil), "models.RoleDefinitionPhysicalRoleRef")
	proto.RegisterType((*RoleDefinitionTagRef)(nil), "models.RoleDefinitionTagRef")
	proto.RegisterType((*RouteAggregate)(nil), "models.RouteAggregate")
	proto.RegisterType((*RouteAggregateRoutingInstanceRef)(nil), "models.RouteAggregateRoutingInstanceRef")
	proto.RegisterType((*RouteAggregateServiceInstanceRef)(nil), "models.RouteAggregateServiceInstanceRef")
	proto.RegisterType((*RouteAggregateTagRef)(nil), "models.RouteAggregateTagRef")
	proto.RegisterType((*RouteTable)(nil), "models.RouteTable")
	proto.RegisterType((*RouteTableTagRef)(nil), "models.RouteTableTagRef")
	proto.RegisterType((*RouteTarget)(nil), "models.RouteTarget")
	proto.RegisterType((*RouteTargetTagRef)(nil), "models.RouteTargetTagRef")
	proto.RegisterType((*RoutingInstance)(nil), "models.RoutingInstance")
	proto.RegisterType((*RoutingInstanceRouteTargetRef)(nil), "models.RoutingInstanceRouteTargetRef")
	proto.RegisterType((*RoutingInstanceRoutingInstanceRef)(nil), "models.RoutingInstanceRoutingInstanceRef")
	proto.RegisterType((*RoutingInstanceTagRef)(nil), "models.RoutingInstanceTagRef")
	proto.RegisterType((*RoutingPolicy)(nil), "models.RoutingPolicy")
	proto.RegisterType((*RoutingPolicyRoutingInstanceRef)(nil), "models.RoutingPolicyRoutingInstanceRef")
	proto.RegisterType((*RoutingPolicyServiceInstanceRef)(nil), "models.RoutingPolicyServiceInstanceRef")
	proto.RegisterType((*RoutingPolicyTagRef)(nil), "models.RoutingPolicyTagRef")
	proto.RegisterType((*SecurityGroup)(nil), "models.SecurityGroup")
	proto.RegisterType((*SecurityGroupTagRef)(nil), "models.SecurityGroupTagRef")
	proto.RegisterType((*SecurityLoggingObject)(nil), "models.SecurityLoggingObject")
	proto.RegisterType((*SecurityLoggingObjectNetworkPolicyRef)(nil), "models.SecurityLoggingObjectNetworkPolicyRef")
	proto.RegisterType((*SecurityLoggingObjectSecurityGroupRef)(nil), "models.SecurityLoggingObjectSecurityGroupRef")
	proto.RegisterType((*SecurityLoggingObjectTagRef)(nil), "models.SecurityLoggingObjectTagRef")
	proto.RegisterType((*ServiceAppliance)(nil), "models.ServiceAppliance")
	proto.RegisterType((*ServiceAppliancePhysicalInterfaceRef)(nil), "models.ServiceAppliancePhysicalInterfaceRef")
	proto.RegisterType((*ServiceApplianceTagRef)(nil), "models.ServiceApplianceTagRef")
	proto.RegisterType((*ServiceApplianceSet)(nil), "models.ServiceApplianceSet")
	proto.RegisterType((*ServiceApplianceSetTagRef)(nil), "models.ServiceApplianceSetTagRef")
	proto.RegisterType((*ServiceConnectionModule)(nil), "models.ServiceConnectionModule")
	proto.RegisterType((*ServiceConnectionModuleServiceObjectRef)(nil), "models.ServiceConnectionModuleServiceObjectRef")
	proto.RegisterType((*ServiceConnectionModuleTagRef)(nil), "models.ServiceConnectionModuleTagRef")
	proto.RegisterType((*ServiceEndpoint)(nil), "models.ServiceEndpoint")
	proto.RegisterType((*ServiceEndpointPhysicalRouterRef)(nil), "models.ServiceEndpointPhysicalRouterRef")
	proto.RegisterType((*ServiceEndpointServiceConnectionModuleRef)(nil), "models.ServiceEndpointServiceConnectionModuleRef")
	proto.RegisterType((*ServiceEndpointServiceObjectRef)(nil), "models.ServiceEndpointServiceObjectRef")
	proto.RegisterType((*ServiceEndpointTagRef)(nil), "models.ServiceEndpointTagRef")
	proto.RegisterType((*ServiceGroup)(nil), "models.ServiceGroup")
	proto.RegisterType((*ServiceGroupTagRef)(nil), "models.ServiceGroupTagRef")
	proto.RegisterType((*ServiceHealthCheck)(nil), "models.ServiceHealthCheck")
	proto.RegisterType((*ServiceHealthCheckServiceInstanceRef)(nil), "models.ServiceHealthCheckServiceInstanceRef")
	proto.RegisterType((*ServiceHealthCheckTagRef)(nil), "models.ServiceHealthCheckTagRef")
	proto.RegisterType((*ServiceInstance)(nil), "models.ServiceInstance")
	proto.RegisterType((*ServiceInstanceInstanceIPRef)(nil), "models.ServiceInstanceInstanceIPRef")
	proto.RegisterType((*ServiceInstanceServiceTemplateRef)(nil), "models.ServiceInstanceServiceTemplateRef")
	proto.RegisterType((*ServiceInstanceTagRef)(nil), "models.ServiceInstanceTagRef")
	proto.RegisterType((*ServiceObject)(nil), "models.ServiceObject")
	proto.RegisterType((*ServiceObjectTagRef)(nil), "models.ServiceObjectTagRef")
	proto.RegisterType((*ServiceTemplate)(nil), "models.ServiceTemplate")
	proto.RegisterType((*ServiceTemplateServiceApplianceSetRef)(nil), "models.ServiceTemplateServiceApplianceSetRef")
	proto.RegisterType((*ServiceTemplateTagRef)(nil), "models.ServiceTemplateTagRef")
	proto.RegisterType((*SflowProfile)(nil), "models.SflowProfile")
	proto.RegisterType((*SflowProfileTagRef)(nil), "models.SflowProfileTagRef")
	proto.RegisterType((*StormControlProfile)(nil), "models.StormControlProfile")
	proto.RegisterType((*StormControlProfileTagRef)(nil), "models.StormControlProfileTagRef")
	proto.RegisterType((*StructuredSyslogApplicationRecord)(nil), "models.StructuredSyslogApplicationRecord")
	proto.RegisterType((*StructuredSyslogApplicationRecordTagRef)(nil), "models.StructuredSyslogApplicationRecordTagRef")
	proto.RegisterType((*StructuredSyslogConfig)(nil), "models.StructuredSyslogConfig")
	proto.RegisterType((*StructuredSyslogConfigTagRef)(nil), "models.StructuredSyslogConfigTagRef")
	proto.RegisterType((*StructuredSyslogHostnameRecord)(nil), "models.StructuredSyslogHostnameRecord")
	proto.RegisterType((*StructuredSyslogHostnameRecordTagRef)(nil), "models.StructuredSyslogHostnameRecordTagRef")
	proto.RegisterType((*StructuredSyslogMessage)(nil), "models.StructuredSyslogMessage")
	proto.RegisterType((*StructuredSyslogMessageTagRef)(nil), "models.StructuredSyslogMessageTagRef")
	proto.RegisterType((*StructuredSyslogSLAProfile)(nil), "models.StructuredSyslogSLAProfile")
	proto.RegisterType((*StructuredSyslogSLAProfileTagRef)(nil), "models.StructuredSyslogSLAProfileTagRef")
	proto.RegisterType((*SubCluster)(nil), "models.SubCluster")
	proto.RegisterType((*SubClusterTagRef)(nil), "models.SubClusterTagRef")
	proto.RegisterType((*Subnet)(nil), "models.Subnet")
	proto.RegisterType((*SubnetTagRef)(nil), "models.SubnetTagRef")
	proto.RegisterType((*SubnetVirtualMachineInterfaceRef)(nil), "models.SubnetVirtualMachineInterfaceRef")
	proto.RegisterType((*Tag)(nil), "models.Tag")
	proto.RegisterType((*TagTagRef)(nil), "models.TagTagRef")
	proto.RegisterType((*TagTagTypeRef)(nil), "models.TagTagTypeRef")
	proto.RegisterType((*TagType)(nil), "models.TagType")
	proto.RegisterType((*TagTypeTagRef)(nil), "models.TagTypeTagRef")
	proto.RegisterType((*TelemetryProfile)(nil), "models.TelemetryProfile")
	proto.RegisterType((*TelemetryProfileSflowProfileRef)(nil), "models.TelemetryProfileSflowProfileRef")
	proto.RegisterType((*TelemetryProfileTagRef)(nil), "models.TelemetryProfileTagRef")
	proto.RegisterType((*VirtualDNSRecord)(nil), "models.VirtualDNSRecord")
	proto.RegisterType((*VirtualDNSRecordTagRef)(nil), "models.VirtualDNSRecordTagRef")
	proto.RegisterType((*VirtualDNS)(nil), "models.VirtualDNS")
	proto.RegisterType((*VirtualDNSTagRef)(nil), "models.VirtualDNSTagRef")
	proto.RegisterType((*VirtualIP)(nil), "models.VirtualIP")
	proto.RegisterType((*VirtualIPLoadbalancerPoolRef)(nil), "models.VirtualIPLoadbalancerPoolRef")
	proto.RegisterType((*VirtualIPTagRef)(nil), "models.VirtualIPTagRef")
	proto.RegisterType((*VirtualIPVirtualMachineInterfaceRef)(nil), "models.VirtualIPVirtualMachineInterfaceRef")
	proto.RegisterType((*VirtualMachineInterface)(nil), "models.VirtualMachineInterface")
	proto.RegisterType((*VirtualMachineInterfaceBGPRouterRef)(nil), "models.VirtualMachineInterfaceBGPRouterRef")
	proto.RegisterType((*VirtualMachineInterfaceBridgeDomainRef)(nil), "models.VirtualMachineInterfaceBridgeDomainRef")
	proto.RegisterType((*VirtualMachineInterfaceInterfaceRouteTableRef)(nil), "models.VirtualMachineInterfaceInterfaceRouteTableRef")
	proto.RegisterType((*VirtualMachineInterfacePhysicalInterfaceRef)(nil), "models.VirtualMachineInterfacePhysicalInterfaceRef")
	proto.RegisterType((*VirtualMachineInterfacePortProfileRef)(nil), "models.VirtualMachineInterfacePortProfileRef")
	proto.RegisterType((*VirtualMachineInterfacePortTupleRef)(nil), "models.VirtualMachineInterfacePortTupleRef")
	proto.RegisterType((*VirtualMachineInterfaceQosConfigRef)(nil), "models.VirtualMachineInterfaceQosConfigRef")
	proto.RegisterType((*VirtualMachineInterfaceRoutingInstanceRef)(nil), "models.VirtualMachineInterfaceRoutingInstanceRef")
	proto.RegisterType((*VirtualMachineInterfaceSecurityGroupRef)(nil), "models.VirtualMachineInterfaceSecurityGroupRef")
	proto.RegisterType((*VirtualMachineInterfaceSecurityLoggingObjectRef)(nil), "models.VirtualMachineInterfaceSecurityLoggingObjectRef")
	proto.RegisterType((*VirtualMachineInterfaceServiceEndpointRef)(nil), "models.VirtualMachineInterfaceServiceEndpointRef")
	proto.RegisterType((*VirtualMachineInterfaceServiceHealthCheckRef)(nil), "models.VirtualMachineInterfaceServiceHealthCheckRef")
	proto.RegisterType((*VirtualMachineInterfaceTagRef)(nil), "models.VirtualMachineInterfaceTagRef")
	proto.RegisterType((*VirtualMachineInterfaceVirtualMachineRef)(nil), "models.VirtualMachineInterfaceVirtualMachineRef")
	proto.RegisterType((*VirtualMachineInterfaceVirtualMachineInterfaceRef)(nil), "models.VirtualMachineInterfaceVirtualMachineInterfaceRef")
	proto.RegisterType((*VirtualMachineInterfaceVirtualNetworkRef)(nil), "models.VirtualMachineInterfaceVirtualNetworkRef")
	proto.RegisterType((*VirtualMachine)(nil), "models.VirtualMachine")
	proto.RegisterType((*VirtualMachineServiceInstanceRef)(nil), "models.VirtualMachineServiceInstanceRef")
	proto.RegisterType((*VirtualMachineTagRef)(nil), "models.VirtualMachineTagRef")
	proto.RegisterType((*VirtualNetwork)(nil), "models.VirtualNetwork")
	proto.RegisterType((*VirtualNetworkBGPVPNRef)(nil), "models.VirtualNetworkBGPVPNRef")
	proto.RegisterType((*VirtualNetworkIntentMapRef)(nil), "models.VirtualNetworkIntentMapRef")
	proto.RegisterType((*VirtualNetworkMulticastPolicyRef)(nil), "models.VirtualNetworkMulticastPolicyRef")
	proto.RegisterType((*VirtualNetworkNetworkIpamRef)(nil), "models.VirtualNetworkNetworkIpamRef")
	proto.RegisterType((*VirtualNetworkNetworkPolicyRef)(nil), "models.VirtualNetworkNetworkPolicyRef")
	proto.RegisterType((*VirtualNetworkQosConfigRef)(nil), "models.VirtualNetworkQosConfigRef")
	proto.RegisterType((*VirtualNetworkRouteTableRef)(nil), "models.VirtualNetworkRouteTableRef")
	proto.RegisterType((*VirtualNetworkRoutingPolicyRef)(nil), "models.VirtualNetworkRoutingPolicyRef")
	proto.RegisterType((*VirtualNetworkSecurityLoggingObjectRef)(nil), "models.VirtualNetworkSecurityLoggingObjectRef")
	proto.RegisterType((*VirtualNetworkTagRef)(nil), "models.VirtualNetworkTagRef")
	proto.RegisterType((*VirtualNetworkVirtualNetworkRef)(nil), "models.VirtualNetworkVirtualNetworkRef")
	proto.RegisterType((*VirtualPortGroup)(nil), "models.VirtualPortGroup")
	proto.RegisterType((*VirtualPortGroupPhysicalInterfaceRef)(nil), "models.VirtualPortGroupPhysicalInterfaceRef")
	proto.RegisterType((*VirtualPortGroupPortProfileRef)(nil), "models.VirtualPortGroupPortProfileRef")
	proto.RegisterType((*VirtualPortGroupSecurityGroupRef)(nil), "models.VirtualPortGroupSecurityGroupRef")
	proto.RegisterType((*VirtualPortGroupTagRef)(nil), "models.VirtualPortGroupTagRef")
	proto.RegisterType((*VirtualPortGroupVirtualMachineInterfaceRef)(nil), "models.VirtualPortGroupVirtualMachineInterfaceRef")
	proto.RegisterType((*VirtualRouter)(nil), "models.VirtualRouter")
	proto.RegisterType((*VirtualRouterNetworkIpamRef)(nil), "models.VirtualRouterNetworkIpamRef")
	proto.RegisterType((*VirtualRouterSubClusterRef)(nil), "models.VirtualRouterSubClusterRef")
	proto.RegisterType((*VirtualRouterTagRef)(nil), "models.VirtualRouterTagRef")
	proto.RegisterType((*VirtualRouterVirtualMachineRef)(nil), "models.VirtualRouterVirtualMachineRef")
	proto.RegisterType((*WebuiNode)(nil), "models.WebuiNode")
	proto.RegisterType((*WebuiNodeTagRef)(nil), "models.WebuiNodeTagRef")
	proto.RegisterType((*AclEntriesType)(nil), "models.AclEntriesType")
	proto.RegisterType((*AclRuleType)(nil), "models.AclRuleType")
	proto.RegisterType((*ActionAsPathType)(nil), "models.ActionAsPathType")
	proto.RegisterType((*ActionCommunityType)(nil), "models.ActionCommunityType")
	proto.RegisterType((*ActionExtCommunityType)(nil), "models.ActionExtCommunityType")
	proto.RegisterType((*ActionListType)(nil), "models.ActionListType")
	proto.RegisterType((*ActionUpdateType)(nil), "models.ActionUpdateType")
	proto.RegisterType((*AddressFamilies)(nil), "models.AddressFamilies")
	proto.RegisterType((*AddressType)(nil), "models.AddressType")
	proto.RegisterType((*AlarmAndList)(nil), "models.AlarmAndList")
	proto.RegisterType((*AlarmExpression)(nil), "models.AlarmExpression")
	proto.RegisterType((*AlarmOperand2)(nil), "models.AlarmOperand2")
	proto.RegisterType((*AlarmOrList)(nil), "models.AlarmOrList")
	proto.RegisterType((*AllocationPoolType)(nil), "models.AllocationPoolType")
	proto.RegisterType((*AllowedAddressPair)(nil), "models.AllowedAddressPair")
	proto.RegisterType((*AllowedAddressPairs)(nil), "models.AllowedAddressPairs")
	proto.RegisterType((*AsListType)(nil), "models.AsListType")
	proto.RegisterType((*AsnRangeType)(nil), "models.AsnRangeType")
	proto.RegisterType((*AttachmentAddressType)(nil), "models.AttachmentAddressType")
	proto.RegisterType((*AuthenticationData)(nil), "models.AuthenticationData")
	proto.RegisterType((*AuthenticationKeyItem)(nil), "models.AuthenticationKeyItem")
	proto.RegisterType((*AutonomousSystemsType)(nil), "models.AutonomousSystemsType")
	proto.RegisterType((*BGPaaSControlNodeZoneAttributes)(nil), "models.BGPaaSControlNodeZoneAttributes")
	proto.RegisterType((*BGPaaServiceParametersType)(nil), "models.BGPaaServiceParametersType")
	proto.RegisterType((*BaremetalPortGroupInfo)(nil), "models.BaremetalPortGroupInfo")
	proto.RegisterType((*BaremetalPortInfo)(nil), "models.BaremetalPortInfo")
	proto.RegisterType((*BaremetalProperties)(nil), "models.BaremetalProperties")
	proto.RegisterType((*BaremetalServerInfo)(nil), "models.BaremetalServerInfo")
	proto.RegisterType((*BfdParameters)(nil), "models.BfdParameters")
	proto.RegisterType((*BgpFamilyAttributes)(nil), "models.BgpFamilyAttributes")
	proto.RegisterType((*BgpParameters)(nil), "models.BgpParameters")
	proto.RegisterType((*BgpPeeringAttributes)(nil), "models.BgpPeeringAttributes")
	proto.RegisterType((*BgpPrefixLimit)(nil), "models.BgpPrefixLimit")
	proto.RegisterType((*BgpRouterParams)(nil), "models.BgpRouterParams")
	proto.RegisterType((*BgpSession)(nil), "models.BgpSession")
	proto.RegisterType((*BgpSessionAttributes)(nil), "models.BgpSessionAttributes")
	proto.RegisterType((*BridgeDomainMembershipType)(nil), "models.BridgeDomainMembershipType")
	proto.RegisterType((*CliDiffInfoType)(nil), "models.CliDiffInfoType")
	proto.RegisterType((*CliDiffListType)(nil), "models.CliDiffListType")
	proto.RegisterType((*CloudInstanceInfo)(nil), "models.CloudInstanceInfo")
	proto.RegisterType((*CommunityAttributes)(nil), "models.CommunityAttributes")
	proto.RegisterType((*CommunityListType)(nil), "models.CommunityListType")
	proto.RegisterType((*ConnectionType)(nil), "models.ConnectionType")
	proto.RegisterType((*ControlTrafficDscpType)(nil), "models.ControlTrafficDscpType")
	proto.RegisterType((*DefaultProtocolType)(nil), "models.DefaultProtocolType")
	proto.RegisterType((*DeviceCredential)(nil), "models.DeviceCredential")
	proto.RegisterType((*DeviceCredentialList)(nil), "models.DeviceCredentialList")
	proto.RegisterType((*DeviceFamilyListType)(nil), "models.DeviceFamilyListType")
	proto.RegisterType((*DevicePlatformListType)(nil), "models.DevicePlatformListType")
	proto.RegisterType((*DhcpOptionType)(nil), "models.DhcpOptionType")
	proto.RegisterType((*DhcpOptionsListType)(nil), "models.DhcpOptionsListType")
	proto.RegisterType((*DiscoveryPubSubEndPointType)(nil), "models.DiscoveryPubSubEndPointType")
	proto.RegisterType((*DiscoveryServiceAssignmentType)(nil), "models.DiscoveryServiceAssignmentType")
	proto.RegisterType((*DnsSoaRecordType)(nil), "models.DnsSoaRecordType")
	proto.RegisterType((*DnsmasqLeaseParameters)(nil), "models.DnsmasqLeaseParameters")
	proto.RegisterType((*DomainLimitsType)(nil), "models.DomainLimitsType")
	proto.RegisterType((*DriverInfo)(nil), "models.DriverInfo")
	proto.RegisterType((*ESXIHostInfo)(nil), "models.ESXIHostInfo")
	proto.RegisterType((*ESXIProperties)(nil), "models.ESXIProperties")
	proto.RegisterType((*EcmpHashingIncludeFields)(nil), "models.EcmpHashingIncludeFields")
	proto.RegisterType((*EnabledInterfaceParams)(nil), "models.EnabledInterfaceParams")
	proto.RegisterType((*EncapsulationPrioritiesType)(nil), "models.EncapsulationPrioritiesType")
	proto.RegisterType((*EncryptionTunnelEndpoint)(nil), "models.EncryptionTunnelEndpoint")
	proto.RegisterType((*EncryptionTunnelEndpointList)(nil), "models.EncryptionTunnelEndpointList")
	proto.RegisterType((*ExecutableInfoListType)(nil), "models.ExecutableInfoListType")
	proto.RegisterType((*ExecutableInfoType)(nil), "models.ExecutableInfoType")
	proto.RegisterType((*ExtCommunityListType)(nil), "models.ExtCommunityListType")
	proto.RegisterType((*FabricNetworkTag)(nil), "models.FabricNetworkTag")
	proto.RegisterType((*FatFlowProtocols)(nil), "models.FatFlowProtocols")
	proto.RegisterType((*FieldNamesList)(nil), "models.FieldNamesList")
	proto.RegisterType((*FirewallRuleEndpointType)(nil), "models.FirewallRuleEndpointType")
	proto.RegisterType((*FirewallRuleMatchTagsType)(nil), "models.FirewallRuleMatchTagsType")
	proto.RegisterType((*FirewallRuleMatchTagsTypeIdList)(nil), "models.FirewallRuleMatchTagsTypeIdList")
	proto.RegisterType((*FirewallSequence)(nil), "models.FirewallSequence")
	proto.RegisterType((*FirewallServiceGroupType)(nil), "models.FirewallServiceGroupType")
	proto.RegisterType((*FirewallServiceType)(nil), "models.FirewallServiceType")
	proto.RegisterType((*FloatingIpPoolSubnetType)(nil), "models.FloatingIpPoolSubnetType")
	proto.RegisterType((*FlowAgingTimeout)(nil), "models.FlowAgingTimeout")
	proto.RegisterType((*FlowAgingTimeoutList)(nil), "models.FlowAgingTimeoutList")
	proto.RegisterType((*GracefulRestartParametersType)(nil), "models.GracefulRestartParametersType")
	proto.RegisterType((*IdPermsType)(nil), "models.IdPermsType")
	proto.RegisterType((*InstanceTargetType)(nil), "models.InstanceTargetType")
	proto.RegisterType((*InterfaceMapType)(nil), "models.InterfaceMapType")
	proto.RegisterType((*InterfaceMirrorType)(nil), "models.InterfaceMirrorType")
	proto.RegisterType((*IpAddressesType)(nil), "models.IpAddressesType")
	proto.RegisterType((*IpamDnsAddressType)(nil), "models.IpamDnsAddressType")
	proto.RegisterType((*IpamSubnetType)(nil), "models.IpamSubnetType")
	proto.RegisterType((*IpamSubnets)(nil), "models.IpamSubnets")
	proto.RegisterType((*IpamType)(nil), "models.IpamType")
	proto.RegisterType((*JunosServicePorts)(nil), "models.JunosServicePorts")
	proto.RegisterType((*KeyValuePair)(nil), "models.KeyValuePair")
	proto.RegisterType((*KeyValuePairs)(nil), "models.KeyValuePairs")
	proto.RegisterType((*LinklocalServiceEntryType)(nil), "models.LinklocalServiceEntryType")
	proto.RegisterType((*LinklocalServicesTypes)(nil), "models.LinklocalServicesTypes")
	proto.RegisterType((*LoadbalancerHealthmonitorType)(nil), "models.LoadbalancerHealthmonitorType")
	proto.RegisterType((*LoadbalancerListenerType)(nil), "models.LoadbalancerListenerType")
	proto.RegisterType((*LoadbalancerMemberType)(nil), "models.LoadbalancerMemberType")
	proto.RegisterType((*LoadbalancerPoolType)(nil), "models.LoadbalancerPoolType")
	proto.RegisterType((*LoadbalancerType)(nil), "models.LoadbalancerType")
	proto.RegisterType((*LocalLinkConnection)(nil), "models.LocalLinkConnection")
	proto.RegisterType((*LogicalRouterVirtualNetworkType)(nil), "models.LogicalRouterVirtualNetworkType")
	proto.RegisterType((*MACLimitControlType)(nil), "models.MACLimitControlType")
	proto.RegisterType((*MACMoveLimitControlType)(nil), "models.MACMoveLimitControlType")
	proto.RegisterType((*MacAddressesType)(nil), "models.MacAddressesType")
	proto.RegisterType((*MatchConditionType)(nil), "models.MatchConditionType")
	proto.RegisterType((*MirrorActionType)(nil), "models.MirrorActionType")
	proto.RegisterType((*MulticastSourceGroup)(nil), "models.MulticastSourceGroup")
	proto.RegisterType((*MulticastSourceGroups)(nil), "models.MulticastSourceGroups")
	proto.RegisterType((*NamespaceValue)(nil), "models.NamespaceValue")
	proto.RegisterType((*NodeProfileRoleType)(nil), "models.NodeProfileRoleType")
	proto.RegisterType((*NodeProfileRolesType)(nil), "models.NodeProfileRolesType")
	proto.RegisterType((*PermType)(nil), "models.PermType")
	proto.RegisterType((*PermType2)(nil), "models.PermType2")
	proto.RegisterType((*PlaybookInfoListType)(nil), "models.PlaybookInfoListType")
	proto.RegisterType((*PlaybookInfoType)(nil), "models.PlaybookInfoType")
	proto.RegisterType((*PluginProperties)(nil), "models.PluginProperties")
	proto.RegisterType((*PluginProperty)(nil), "models.PluginProperty")
	proto.RegisterType((*PolicyBasedForwardingRuleType)(nil), "models.PolicyBasedForwardingRuleType")
	proto.RegisterType((*PolicyEntriesType)(nil), "models.PolicyEntriesType")
	proto.RegisterType((*PolicyRuleType)(nil), "models.PolicyRuleType")
	proto.RegisterType((*PolicyStatementType)(nil), "models.PolicyStatementType")
	proto.RegisterType((*PolicyTermType)(nil), "models.PolicyTermType")
	proto.RegisterType((*PortGroupProperties)(nil), "models.PortGroupProperties")
	proto.RegisterType((*PortInfoType)(nil), "models.PortInfoType")
	proto.RegisterType((*PortMap)(nil), "models.PortMap")
	proto.RegisterType((*PortMappings)(nil), "models.PortMappings")
	proto.RegisterType((*PortTranslationPool)(nil), "models.PortTranslationPool")
	proto.RegisterType((*PortTranslationPools)(nil), "models.PortTranslationPools")
	proto.RegisterType((*PortType)(nil), "models.PortType")
	proto.RegisterType((*PrefixMatchType)(nil), "models.PrefixMatchType")
	proto.RegisterType((*ProtocolBgpType)(nil), "models.ProtocolBgpType")
	proto.RegisterType((*ProtocolOspfType)(nil), "models.ProtocolOspfType")
	proto.RegisterType((*ProtocolType)(nil), "models.ProtocolType")
	proto.RegisterType((*ProviderDetails)(nil), "models.ProviderDetails")
	proto.RegisterType((*QosIdForwardingClassPair)(nil), "models.QosIdForwardingClassPair")
	proto.RegisterType((*QosIdForwardingClassPairs)(nil), "models.QosIdForwardingClassPairs")
	proto.RegisterType((*QuotaType)(nil), "models.QuotaType")
	proto.RegisterType((*RbacPermType)(nil), "models.RbacPermType")
	proto.RegisterType((*RbacRuleEntriesType)(nil), "models.RbacRuleEntriesType")
	proto.RegisterType((*RbacRuleType)(nil), "models.RbacRuleType")
	proto.RegisterType((*RouteListType)(nil), "models.RouteListType")
	proto.RegisterType((*RouteOriginOverride)(nil), "models.RouteOriginOverride")
	proto.RegisterType((*RouteTableType)(nil), "models.RouteTableType")
	proto.RegisterType((*RouteTargetList)(nil), "models.RouteTargetList")
	proto.RegisterType((*RouteType)(nil), "models.RouteType")
	proto.RegisterType((*RoutedProperties)(nil), "models.RoutedProperties")
	proto.RegisterType((*RoutingBridgingRolesType)(nil), "models.RoutingBridgingRolesType")
	proto.RegisterType((*RoutingPolicyParameters)(nil), "models.RoutingPolicyParameters")
	proto.RegisterType((*RoutingPolicyServiceInstanceType)(nil), "models.RoutingPolicyServiceInstanceType")
	proto.RegisterType((*RoutingPolicyType)(nil), "models.RoutingPolicyType")
	proto.RegisterType((*SNMPCredentials)(nil), "models.SNMPCredentials")
	proto.RegisterType((*SecurityLoggingObjectRuleEntryType)(nil), "models.SecurityLoggingObjectRuleEntryType")
	proto.RegisterType((*SecurityLoggingObjectRuleListType)(nil), "models.SecurityLoggingObjectRuleListType")
	proto.RegisterType((*SequenceType)(nil), "models.SequenceType")
	proto.RegisterType((*SerialNumListType)(nil), "models.SerialNumListType")
	proto.RegisterType((*ServiceApplianceInterfaceType)(nil), "models.ServiceApplianceInterfaceType")
	proto.RegisterType((*ServiceChainInfo)(nil), "models.ServiceChainInfo")
	proto.RegisterType((*ServiceHealthCheckType)(nil), "models.ServiceHealthCheckType")
	proto.RegisterType((*ServiceInstanceInterfaceType)(nil), "models.ServiceInstanceInterfaceType")
	proto.RegisterType((*ServiceInstanceType)(nil), "models.ServiceInstanceType")
	proto.RegisterType((*ServiceInterfaceTag)(nil), "models.ServiceInterfaceTag")
	proto.RegisterType((*ServiceScaleOutType)(nil), "models.ServiceScaleOutType")
	proto.RegisterType((*ServiceTemplateInterfaceType)(nil), "models.ServiceTemplateInterfaceType")
	proto.RegisterType((*ServiceTemplateType)(nil), "models.ServiceTemplateType")
	proto.RegisterType((*ServiceVirtualNetworkType)(nil), "models.ServiceVirtualNetworkType")
	proto.RegisterType((*SflowParameters)(nil), "models.SflowParameters")
	proto.RegisterType((*ShareType)(nil), "models.ShareType")
	proto.RegisterType((*SloRateType)(nil), "models.SloRateType")
	proto.RegisterType((*StaticMirrorNhType)(nil), "models.StaticMirrorNhType")
	proto.RegisterType((*StaticRouteEntriesType)(nil), "models.StaticRouteEntriesType")
	proto.RegisterType((*StaticRouteParameters)(nil), "models.StaticRouteParameters")
	proto.RegisterType((*StaticRouteType)(nil), "models.StaticRouteType")
	proto.RegisterType((*StatsCollectionFrequency)(nil), "models.StatsCollectionFrequency")
	proto.RegisterType((*StormControlParameters)(nil), "models.StormControlParameters")
	proto.RegisterType((*StructuredSyslogLinkType)(nil), "models.StructuredSyslogLinkType")
	proto.RegisterType((*StructuredSyslogLinkmap)(nil), "models.StructuredSyslogLinkmap")
	proto.RegisterType((*SubnetListType)(nil), "models.SubnetListType")
	proto.RegisterType((*SubnetType)(nil), "models.SubnetType")
	proto.RegisterType((*TelemetryResourceInfo)(nil), "models.TelemetryResourceInfo")
	proto.RegisterType((*TelemetryStateInfo)(nil), "models.TelemetryStateInfo")
	proto.RegisterType((*TermActionListType)(nil), "models.TermActionListType")
	proto.RegisterType((*TermMatchConditionType)(nil), "models.TermMatchConditionType")
	proto.RegisterType((*TimerType)(nil), "models.TimerType")
	proto.RegisterType((*UserCredentials)(nil), "models.UserCredentials")
	proto.RegisterType((*UserDefinedLogStat)(nil), "models.UserDefinedLogStat")
	proto.RegisterType((*UserDefinedLogStatList)(nil), "models.UserDefinedLogStatList")
	proto.RegisterType((*UuidType)(nil), "models.UuidType")
	proto.RegisterType((*UveKeysType)(nil), "models.UveKeysType")
	proto.RegisterType((*VendorHardwaresType)(nil), "models.VendorHardwaresType")
	proto.RegisterType((*VirtualDnsRecordType)(nil), "models.VirtualDnsRecordType")
	proto.RegisterType((*VirtualDnsType)(nil), "models.VirtualDnsType")
	proto.RegisterType((*VirtualIpType)(nil), "models.VirtualIpType")
	proto.RegisterType((*VirtualMachineInterfacePropertiesType)(nil), "models.VirtualMachineInterfacePropertiesType")
	proto.RegisterType((*VirtualNetworkPolicyType)(nil), "models.VirtualNetworkPolicyType")
	proto.RegisterType((*VirtualNetworkRoutedPropertiesType)(nil), "models.VirtualNetworkRoutedPropertiesType")
	proto.RegisterType((*VirtualNetworkType)(nil), "models.VirtualNetworkType")
	proto.RegisterType((*VirtualRouterNetworkIpamType)(nil), "models.VirtualRouterNetworkIpamType")
	proto.RegisterType((*VnSubnetsType)(nil), "models.VnSubnetsType")
	proto.RegisterType((*VpgInterfaceParametersType)(nil), "models.VpgInterfaceParametersType")
	proto.RegisterType((*VrfAssignRuleType)(nil), "models.VrfAssignRuleType")
	proto.RegisterType((*VrfAssignTableType)(nil), "models.VrfAssignTableType")
}

func init() {
	proto.RegisterFile("github.com/Juniper/contrail-api-client/api-lib/pkg/models/gen_model.proto", fileDescriptor_3cc10105a38dc106)
}

var fileDescriptor_3cc10105a38dc106 = []byte{
	// 53582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x79, 0x7c, 0x24, 0xc7,
	0x79, 0x18, 0xfa, 0x6b, 0x92, 0x12, 0x81, 0x5a, 0x60, 0x01, 0x34, 0x76, 0x17, 0xb3, 0xd8, 0x63,
	0x76, 0xb1, 0x5c, 0x5e, 0xe2, 0x21, 0xad, 0x29, 0xc9, 0x71, 0x1c, 0x3b, 0x00, 0x76, 0x97, 0x0b,
	0x69, 0xb1, 0x1c, 0x2d, 0x96, 0xd4, 0xad, 0x56, 0x63, 0xa6, 0x67, 0xd0, 0x64, 0x4f, 0x77, 0x6f,
	0x57, 0x0f, 0x96, 0x90, 0xad, 0x38, 0xba, 0xaf, 0x30, 0xd6, 0x61, 0x9b, 0x92, 0x75, 0x59, 0xb7,
	0xa2, 0xcb, 0x8a, 0xa5, 0x48, 0x96, 0xa5, 0xd8, 0x56, 0x14, 0xeb, 0xb6, 0x63, 0xc5, 0xfe, 0xbd,
	0xe7, 0xf7, 0x5e, 0x34, 0xb6, 0x27, 0xf6, 0xb3, 0xf2, 0x92, 0x3c, 0xbf, 0xac, 0x45, 0xea, 0x96,
	0xde, 0xaf, 0xab, 0xaa, 0xbb, 0xea, 0xab, 0xaa, 0xee, 0x01, 0x41, 0x73, 0xd8, 0xb4, 0xfb, 0x2f,
	0x60, 0xaa, 0xea, 0xfb, 0xea, 0xeb, 0xee, 0xaa, 0xef, 0xfb, 0xea, 0xab, 0xef, 0x40, 0x2b, 0x1d,
	0x37, 0xde, 0xe8, 0xad, 0xdf, 0xd2, 0x0c, 0xba, 0xb7, 0x3e, 0xad, 0xe7, 0xbb, 0xa1, 0x13, 0xdd,
	0xda, 0x0c, 0xfc, 0x38, 0xb2, 0x5d, 0xef, 0x66, 0x3b, 0x74, 0x6f, 0x6e, 0x7a, 0xae, 0xe3, 0xc7,
	0xb7, 0x26, 0xff, 0x7a, 0xee, 0xfa, 0xad, 0xe1, 0x3d, 0x9d, 0x5b, 0xbb, 0x41, 0xcb, 0xf1, 0xf0,
	0xad, 0x1d, 0xc7, 0xb7, 0xc8, 0xbf, 0xb7, 0x84, 0x51, 0x10, 0x07, 0xe6, 0xe3, 0x69, 0xfb, 0xfc,
	0x9e, 0x4e, 0xd0, 0x09, 0x48, 0xd3, 0xad, 0xc9, 0x7f, 0xb4, 0x77, 0xe1, 0x3e, 0x84, 0x66, 0x16,
	0x9b, 0x4d, 0x07, 0xe3, 0xe5, 0x04, 0x7d, 0xe0, 0x9d, 0x75, 0x71, 0x6c, 0x6e, 0xa0, 0x5d, 0xb6,
	0xef, 0x07, 0xb1, 0x1d, 0xbb, 0x81, 0x8f, 0x6b, 0xc6, 0x11, 0xe3, 0xfa, 0x5d, 0x27, 0xf6, 0xde,
	0x42, 0x31, 0xdd, 0xf2, 0x74, 0x67, 0xeb, 0x2e, 0xdb, 0xeb, 0x39, 0x0d, 0xdb, 0x8d, 0xf0, 0xd2,
	0xad, 0x83, 0x7e, 0x7d, 0xd7, 0x22, 0x1f, 0x7d, 0xb9, 0x5f, 0x3f, 0xb8, 0x65, 0x77, 0xbd, 0x9f,
	0x59, 0x10, 0x50, 0xdc, 0x14, 0x74, 0xdd, 0xd8, 0xe9, 0x86, 0xf1, 0xd6, 0xc2, 0x79, 0x11, 0xb5,
	0x79, 0x09, 0xed, 0x6d, 0x06, 0x7e, 0xdb, 0xed, 0xf4, 0x22, 0xd2, 0x62, 0x6d, 0x3a, 0x11, 0x76,
	0x03, 0xbf, 0x76, 0xc5, 0x11, 0xe3, 0xfa, 0x2b, 0x97, 0x96, 0x06, 0xfd, 0xfa, 0x9e, 0x65, 0x71,
	0xc0, 0x5d, 0xb4, 0xff, 0x72, 0xbf, 0x7e, 0x2d, 0x9d, 0x45, 0x0b, 0x2e, 0xce, 0xb7, 0xa7, 0xa9,
	0x81, 0x37, 0xd7, 0xd0, 0x44, 0xcb, 0xc5, 0xa1, 0x67, 0x6f, 0x59, 0xbe, 0xdd, 0x75, 0x6a, 0x57,
	0x1e, 0x31, 0xae, 0x1f, 0x5f, 0x7a, 0x62, 0xf2, 0x30, 0x27, 0x69, 0xfb, 0x39, 0xbb, 0xeb, 0x5c,
	0xee, 0xd7, 0x0f, 0xd1, 0x69, 0xc4, 0xc1, 0xe0, 0x69, 0x5a, 0x7c, 0xb4, 0xf9, 0xf3, 0xe8, 0xea,
	0xf6, 0x45, 0x8a, 0xef, 0xaa, 0x23, 0x57, 0x5e, 0x3f, 0xbe, 0x74, 0xed, 0xa0, 0x5f, 0x7f, 0xfc,
	0xe9, 0x67, 0x30, 0x54, 0x35, 0x8a, 0x8a, 0x0d, 0x11, 0xb1, 0x3c, 0xbe, 0x7d, 0x91, 0x20, 0x78,
	0x32, 0xba, 0x6a, 0x23, 0x72, 0xda, 0xb5, 0xc7, 0x11, 0x6a, 0x8e, 0x0e, 0xfa, 0xf5, 0xab, 0xce,
	0x44, 0x4e, 0xfb, 0x72, 0xbf, 0xbe, 0x97, 0xc2, 0x26, 0xbd, 0x22, 0x20, 0x19, 0x6e, 0x3e, 0x0b,
	0x8d, 0xb9, 0x2d, 0x2b, 0x74, 0xa2, 0x2e, 0xae, 0x3d, 0x9e, 0x7c, 0xac, 0xd9, 0xf4, 0x63, 0xad,
	0xb4, 0x1a, 0x49, 0xf3, 0x85, 0xad, 0xd0, 0x59, 0xba, 0x7e, 0xd0, 0xaf, 0x5f, 0xbd, 0x72, 0x92,
	0x34, 0x5c, 0xee, 0xd7, 0xf7, 0x53, 0x94, 0x29, 0xa4, 0x88, 0xf6, 0x6a, 0x97, 0x82, 0x25, 0x04,
	0x91, 0xc7, 0xb9, 0x9a, 0x13, 0xc4, 0x1e, 0x86, 0x11, 0x24, 0x3f, 0x09, 0x19, 0x6e, 0xde, 0x81,
	0x76, 0x85, 0x76, 0xe4, 0xf8, 0xb1, 0x15, 0x6f, 0x85, 0x4e, 0x6d, 0x8c, 0x40, 0xdf, 0x32, 0xe8,
	0xd7, 0x51, 0x83, 0x34, 0x27, 0xe4, 0xf0, 0x85, 0x22, 0x0c, 0x15, 0x51, 0xa1, 0x30, 0x1b, 0x2b,
	0x20, 0xec, 0xf5, 0xdc, 0x56, 0x6d, 0x5c, 0x46, 0x78, 0xe7, 0x9d, 0x2b, 0x27, 0x15, 0x84, 0xc9,
	0x50, 0x0d, 0xc2, 0x3b, 0x7b, 0x6e, 0xcb, 0x6c, 0xa0, 0xc7, 0x93, 0xa7, 0x3e, 0x51, 0x43, 0xe4,
	0x85, 0xcd, 0xa4, 0x2f, 0x2c, 0x79, 0xee, 0x64, 0xca, 0x13, 0x4b, 0xc7, 0x93, 0x8f, 0x47, 0x5e,
	0xc3, 0x89, 0xcb, 0xfd, 0xfa, 0x1c, 0x43, 0x4d, 0x7e, 0x83, 0x6f, 0x47, 0x9b, 0x92, 0x57, 0x45,
	0x68, 0xdb, 0xc5, 0x5f, 0x15, 0xa3, 0x8a, 0xbd, 0x2a, 0x99, 0x1c, 0x32, 0xdc, 0x7c, 0x8f, 0x81,
	0x0e, 0xd8, 0x64, 0x07, 0x5a, 0x4d, 0xba, 0x05, 0x2d, 0xcf, 0xc5, 0xb1, 0xe5, 0xf8, 0x71, 0xe4,
	0x3a, 0xb8, 0x36, 0x41, 0xc8, 0xdb, 0x97, 0x92, 0xb7, 0xd8, 0xf4, 0x4e, 0xd1, 0x1e, 0xf2, 0x49,
	0xcf, 0x0e, 0xfa, 0xf5, 0x9a, 0xb2, 0x81, 0xd9, 0x88, 0xcb, 0xfd, 0xfa, 0x4d, 0x6c, 0x2b, 0xe6,
	0x4f, 0x20, 0x52, 0x54, 0xb3, 0x73, 0x30, 0x99, 0xbf, 0x84, 0x6a, 0x3a, 0x1c, 0x1b, 0x36, 0xde,
	0xa8, 0x4d, 0x92, 0xad, 0x7a, 0x7a, 0xd0, 0xaf, 0xef, 0x55, 0x28, 0x39, 0x63, 0xe3, 0x8d, 0xcb,
	0xfd, 0xfa, 0x0d, 0xf9, 0x64, 0x24, 0x28, 0x44, 0x1a, 0xf6, 0xda, 0x3a, 0x1c, 0xa6, 0x83, 0xc6,
	0x62, 0xbb, 0x63, 0x45, 0x4e, 0x1b, 0xd7, 0x1e, 0xbc, 0xfa, 0xc8, 0x95, 0xd7, 0xef, 0x3a, 0x51,
	0xe7, 0xef, 0x44, 0x82, 0xb8, 0x60, 0x77, 0xce, 0x3b, 0x6d, 0xba, 0xde, 0xe9, 0xff, 0xc2, 0x7a,
	0x4f, 0xd1, 0x80, 0xf5, 0x1e, 0xd3, 0x51, 0x0b, 0x1f, 0x31, 0xd0, 0x5c, 0x0e, 0xba, 0xec, 0x03,
	0x1b, 0x0f, 0xed, 0x03, 0x1f, 0x43, 0x57, 0xc4, 0x41, 0xed, 0x0a, 0xc2, 0x0f, 0x66, 0x07, 0xfd,
	0xfa, 0x15, 0x17, 0x82, 0xcb, 0xfd, 0xfa, 0x38, 0x23, 0x26, 0x58, 0x38, 0x7f, 0x45, 0x1c, 0x64,
	0x1b, 0xff, 0xca, 0x87, 0xb4, 0xf1, 0x17, 0xfe, 0x02, 0xa1, 0x89, 0xc5, 0x56, 0x2b, 0x72, 0x30,
	0xbe, 0x3d, 0x0a, 0x7a, 0x61, 0xc5, 0xb9, 0x2b, 0xce, 0x5d, 0x71, 0xee, 0x11, 0x71, 0xee, 0xd7,
	0x18, 0x68, 0x8f, 0x4d, 0x37, 0x9f, 0xd5, 0x49, 0x76, 0x9f, 0x15, 0x46, 0x4e, 0xdb, 0xbd, 0x57,
	0x66, 0xd9, 0x6b, 0xbd, 0x75, 0xdf, 0x89, 0x09, 0x23, 0x49, 0xbe, 0xe5, 0xcf, 0x0f, 0xfa, 0x75,
	0x53, 0xdc, 0xb4, 0x0d, 0x02, 0x75, 0xb9, 0x5f, 0x3f, 0xce, 0x76, 0x9f, 0x06, 0xa7, 0x38, 0xbb,
	0x69, 0x2b, 0xc0, 0xa6, 0x8d, 0xa6, 0x5b, 0x91, 0xdd, 0x8e, 0x89, 0xea, 0x67, 0xe1, 0xd8, 0x8e,
	0x1d, 0xc2, 0x97, 0xc7, 0x97, 0x9e, 0x3a, 0xe8, 0xd7, 0x77, 0x9f, 0x4c, 0xfa, 0x56, 0x83, 0x96,
	0xb3, 0x96, 0xf4, 0x5c, 0xee, 0xd7, 0x8f, 0xb2, 0xbd, 0x21, 0xc1, 0x88, 0xd3, 0xec, 0x6e, 0x01,
	0x20, 0xf3, 0x85, 0x2a, 0x07, 0x9e, 0xcf, 0x38, 0xb0, 0x40, 0xd1, 0x8e, 0x99, 0xaf, 0xf9, 0x46,
	0x03, 0xcd, 0xb5, 0xdd, 0xc8, 0xb9, 0x64, 0x7b, 0x9e, 0x15, 0xf5, 0x3c, 0xc7, 0x5a, 0xb7, 0x9b,
	0xf7, 0xd0, 0x19, 0xbf, 0x34, 0x47, 0x66, 0xdc, 0x93, 0xce, 0x78, 0x9a, 0x8d, 0x3b, 0xdf, 0xf3,
	0x9c, 0xa5, 0x93, 0x09, 0xb3, 0x01, 0x2d, 0x76, 0xf3, 0x1e, 0x36, 0xf1, 0xf5, 0x6c, 0xeb, 0xea,
	0xf1, 0x02, 0x76, 0xd3, 0xd6, 0x60, 0x58, 0xf8, 0x80, 0x81, 0x4c, 0xf5, 0xf1, 0xca, 0x28, 0x0c,
	0xfe, 0xfb, 0x38, 0x7a, 0xdc, 0xa2, 0x67, 0x47, 0xdd, 0x4a, 0x0a, 0x54, 0x52, 0xa0, 0x92, 0x02,
	0x23, 0x92, 0x02, 0x2d, 0xb4, 0xcb, 0x4e, 0x36, 0x1d, 0x61, 0x2c, 0xa9, 0xba, 0x9e, 0x7d, 0x3e,
	0xb2, 0x1f, 0xef, 0x88, 0x12, 0xe6, 0x4f, 0x1f, 0x97, 0x34, 0x24, 0x0c, 0x46, 0xdc, 0x68, 0x1c,
	0x1e, 0x3c, 0xae, 0x9d, 0x8d, 0x35, 0x9f, 0x8b, 0x76, 0xd3, 0x51, 0xd8, 0xd9, 0x74, 0x22, 0x37,
	0xde, 0x62, 0x5a, 0xf7, 0x6d, 0x83, 0x7e, 0x7d, 0x92, 0xe0, 0x5c, 0x63, 0x1d, 0x97, 0xfb, 0xf5,
	0xba, 0x88, 0x36, 0x05, 0x10, 0x31, 0x4f, 0xda, 0x22, 0x44, 0xb2, 0xfc, 0x7a, 0x9b, 0x8e, 0x75,
	0x8f, 0xb3, 0x85, 0x6b, 0xbb, 0x21, 0xfd, 0x77, 0x6e, 0x3a, 0x4f, 0x77, 0xb6, 0x84, 0xe5, 0xc7,
	0x1a, 0xf8, 0xf2, 0x4b, 0x21, 0xc1, 0xf2, 0xeb, 0xd1, 0x51, 0xe6, 0xb3, 0x05, 0x99, 0xf1, 0x1d,
	0x2a, 0x33, 0xe0, 0xab, 0xd9, 0xb9, 0xa6, 0xfe, 0x1b, 0x06, 0xda, 0x25, 0xa0, 0x28, 0x23, 0x43,
	0xfe, 0xd8, 0x78, 0x42, 0xa2, 0x6b, 0xe3, 0x95, 0x46, 0x23, 0x08, 0xbc, 0x8a, 0x2d, 0x57, 0x6c,
	0xb9, 0x62, 0xcb, 0x23, 0x62, 0xcb, 0x96, 0xc0, 0x79, 0xbe, 0x4d, 0x39, 0xcf, 0x7e, 0xce, 0x79,
	0xb2, 0x3d, 0xb9, 0x73, 0x65, 0xf5, 0x12, 0x9a, 0x09, 0xa3, 0xe0, 0x6e, 0xa7, 0x19, 0x0b, 0x5a,
	0xea, 0x17, 0xa9, 0x96, 0x3a, 0x95, 0x3d, 0x35, 0x1d, 0xb1, 0xf4, 0x4f, 0x06, 0xfd, 0xfa, 0x54,
	0xfa, 0x83, 0xeb, 0xa6, 0x0b, 0xec, 0xe1, 0x65, 0x3c, 0xe2, 0x84, 0x53, 0x21, 0x04, 0x33, 0x9f,
	0x8d, 0xc6, 0xed, 0xe4, 0x01, 0x2c, 0x37, 0xc4, 0xb5, 0x6f, 0x4e, 0xc1, 0x09, 0xd9, 0xa3, 0x2d,
	0xdd, 0x38, 0xe8, 0xd7, 0xc7, 0xd8, 0x8f, 0x64, 0xa6, 0xf9, 0x54, 0x24, 0x30, 0x40, 0x71, 0x86,
	0x31, 0xd2, 0xba, 0x12, 0xe2, 0x85, 0xf7, 0x1b, 0x68, 0x46, 0x79, 0x39, 0x65, 0xe4, 0xac, 0xff,
	0x6d, 0x17, 0xba, 0x9a, 0x11, 0x5a, 0x71, 0xd5, 0x8a, 0xab, 0x56, 0x5c, 0x75, 0x44, 0x5c, 0xd5,
	0x46, 0xd3, 0x29, 0x0b, 0xb1, 0x98, 0x15, 0x82, 0x68, 0xbc, 0xcc, 0xcc, 0xc0, 0xb6, 0x24, 0x3b,
	0x2e, 0x73, 0x33, 0x83, 0x0c, 0x03, 0xcc, 0x0c, 0x8c, 0xfb, 0x30, 0x20, 0xf3, 0x17, 0xd0, 0x9c,
	0x3c, 0xdc, 0x6a, 0xdb, 0x5d, 0xd7, 0xdb, 0x62, 0x06, 0x0d, 0x72, 0xd8, 0x87, 0x33, 0x9d, 0x26,
	0xfd, 0xfc, 0xb0, 0x9f, 0x83, 0x00, 0x6c, 0x34, 0x38, 0x2d, 0xc5, 0x60, 0x06, 0x68, 0x22, 0x65,
	0xc6, 0xa2, 0x9d, 0x43, 0x91, 0x1c, 0x74, 0x4c, 0x22, 0x39, 0xc8, 0x26, 0xe4, 0xbf, 0x31, 0xdf,
	0x84, 0x22, 0x22, 0xb0, 0x09, 0x43, 0x3e, 0xda, 0x7c, 0xae, 0xaa, 0x20, 0xef, 0x95, 0x26, 0xdb,
	0xb9, 0x88, 0xfa, 0x82, 0x81, 0x0e, 0x6f, 0xba, 0x51, 0xdc, 0xb3, 0x3d, 0xab, 0x6b, 0x37, 0x37,
	0x5c, 0xdf, 0xb1, 0x5c, 0x3f, 0x76, 0xa2, 0xb6, 0xdd, 0x74, 0xe8, 0x9c, 0xdf, 0xa5, 0x73, 0xde,
	0x20, 0xcd, 0x79, 0x17, 0x85, 0x5a, 0xa5, 0x40, 0x2b, 0x29, 0x4c, 0x42, 0xc7, 0xf9, 0x41, 0xbf,
	0x7e, 0x20, 0xbf, 0x3f, 0xa1, 0xed, 0x56, 0x4a, 0x5b, 0xf1, 0xd4, 0x22, 0xc5, 0x07, 0x36, 0xf3,
	0xf1, 0x01, 0xa1, 0x94, 0xbd, 0xb9, 0x32, 0x0a, 0xa5, 0x77, 0x1b, 0x68, 0x12, 0x7c, 0xb3, 0x32,
	0x12, 0xf9, 0x29, 0x03, 0x1d, 0x1d, 0xfa, 0x91, 0xcb, 0x48, 0xf8, 0xcb, 0xc7, 0x91, 0xb9, 0xe8,
	0xdb, 0xde, 0x56, 0xec, 0x36, 0x31, 0x39, 0xf8, 0x9d, 0x0b, 0x5a, 0x4e, 0x25, 0xfd, 0x2b, 0xe9,
	0x5f, 0x49, 0xff, 0x11, 0x49, 0xff, 0xb7, 0x18, 0xa8, 0x6e, 0xa7, 0x5b, 0xd0, 0xa2, 0xe6, 0x25,
	0x3f, 0x68, 0x39, 0xaa, 0x36, 0xb0, 0x96, 0x08, 0x09, 0x75, 0xb7, 0x8a, 0xaa, 0xc1, 0x13, 0xd3,
	0x9d, 0x57, 0x88, 0x0f, 0x48, 0x09, 0x5b, 0x45, 0x98, 0xa9, 0x0d, 0x6d, 0x41, 0x90, 0x3e, 0x40,
	0x85, 0xda, 0x91, 0x4c, 0xa8, 0x29, 0x70, 0x3b, 0x37, 0x3b, 0x7d, 0xd4, 0x40, 0xb5, 0x3c, 0x7c,
	0x65, 0x64, 0x9b, 0x7f, 0x35, 0x86, 0x26, 0x33, 0x7a, 0x2b, 0x8e, 0x59, 0x71, 0xcc, 0x8a, 0x63,
	0x8e, 0x90, 0x63, 0xbe, 0xcc, 0x40, 0xfb, 0x39, 0x87, 0xd3, 0xf3, 0xca, 0x33, 0x83, 0x7e, 0x7d,
	0x1f, 0xd8, 0xa2, 0x22, 0x9b, 0xbc, 0x51, 0x66, 0x93, 0x05, 0x0c, 0x72, 0x9f, 0x0d, 0xb0, 0x64,
	0xbc, 0xd1, 0x56, 0x79, 0xe3, 0x01, 0x85, 0x37, 0x3e, 0x3c, 0xb6, 0xf8, 0x41, 0x03, 0xcd, 0x6a,
	0x50, 0x95, 0x91, 0x23, 0xfe, 0x78, 0x0c, 0xcd, 0x64, 0xa4, 0xae, 0x9d, 0x5b, 0x6d, 0x54, 0x5c,
	0xb1, 0xe2, 0x8a, 0x15, 0x57, 0x1c, 0x21, 0x57, 0xfc, 0x55, 0x03, 0x1d, 0xe6, 0x0c, 0x0d, 0xfb,
	0xdd, 0x30, 0x87, 0x35, 0x3e, 0x63, 0xd0, 0xaf, 0xcf, 0x2b, 0x7b, 0x55, 0x64, 0x8f, 0xb7, 0xca,
	0xec, 0x51, 0x87, 0x4d, 0xa4, 0x60, 0x3e, 0x1b, 0xba, 0xe6, 0x77, 0x43, 0xc8, 0x27, 0x1d, 0x95,
	0x4f, 0xd6, 0x15, 0x3e, 0x99, 0x52, 0xf1, 0x30, 0x7d, 0x0c, 0xf5, 0xe8, 0xca, 0xc8, 0x2f, 0xbf,
	0x97, 0x68, 0x90, 0x8d, 0x15, 0xea, 0x15, 0x59, 0xb9, 0x87, 0x57, 0xbc, 0xb2, 0xe2, 0x95, 0x23,
	0xe4, 0x95, 0x6f, 0x36, 0xd0, 0x9c, 0x1d, 0xba, 0x16, 0x73, 0x9d, 0xd6, 0xb8, 0x86, 0x67, 0xaa,
	0xdc, 0xf9, 0x75, 0xbb, 0x79, 0xbe, 0xe7, 0x39, 0xa2, 0x7f, 0x38, 0x35, 0x96, 0x8b, 0xbb, 0x97,
	0xfb, 0x86, 0xa7, 0xc6, 0x72, 0x3d, 0x76, 0x68, 0x2c, 0x0f, 0x5d, 0x05, 0x43, 0xb1, 0x5a, 0x29,
	0x4e, 0xf9, 0x30, 0xd5, 0x4a, 0x15, 0x55, 0x19, 0xd9, 0xe4, 0xeb, 0x27, 0xd1, 0x9e, 0xc5, 0x30,
	0xf4, 0xdc, 0x26, 0x61, 0x24, 0x8d, 0xc0, 0x73, 0x9b, 0x5b, 0x6b, 0x4e, 0xc5, 0x2d, 0x2b, 0x6e,
	0x59, 0x71, 0xcb, 0x51, 0x71, 0xcb, 0x26, 0x9a, 0xb6, 0x3d, 0xcf, 0xb2, 0xf9, 0x3e, 0xa4, 0x5c,
	0x72, 0x6c, 0xe9, 0xa7, 0x07, 0xfd, 0xfa, 0xd4, 0xa2, 0xe7, 0x09, 0x5b, 0x14, 0x5c, 0x50, 0x42,
	0x20, 0xe0, 0x80, 0x61, 0x43, 0xa8, 0x51, 0xf8, 0x5a, 0xbf, 0xcb, 0x40, 0x99, 0x37, 0xb2, 0x15,
	0x12, 0x56, 0x02, 0x2e, 0x24, 0x6f, 0xce, 0xf8, 0xac, 0x86, 0xe3, 0xa4, 0x8e, 0xd0, 0xb4, 0x21,
	0xe1, 0xbc, 0xc4, 0xe5, 0x5c, 0x69, 0xc6, 0xdc, 0xe5, 0x5c, 0x37, 0x17, 0x70, 0x39, 0x6f, 0x2b,
	0xc0, 0xe6, 0xe7, 0x0c, 0x34, 0xdf, 0xf1, 0x82, 0x75, 0xdb, 0xb3, 0x36, 0xa3, 0xa0, 0x17, 0x3b,
	0x91, 0x45, 0x99, 0x03, 0xb8, 0xcd, 0x3c, 0x51, 0x44, 0xe9, 0xed, 0x04, 0xfc, 0x2e, 0x0a, 0x4d,
	0x39, 0x53, 0x42, 0xee, 0xd3, 0x06, 0xfd, 0xfa, 0x9c, 0xbe, 0x2f, 0xa1, 0xf9, 0x09, 0x94, 0xe6,
	0xfc, 0xb9, 0x45, 0xca, 0xe7, 0x3a, 0x7a, 0x3c, 0xe6, 0x86, 0x20, 0xbd, 0xd8, 0x2d, 0xe8, 0x42,
	0x11, 0xad, 0x7f, 0xcf, 0x9e, 0x42, 0x5f, 0x79, 0xe4, 0x3d, 0x85, 0x16, 0x5e, 0x77, 0x05, 0x3a,
	0xbe, 0xad, 0x05, 0x52, 0x42, 0x79, 0x6a, 0xde, 0x81, 0xae, 0xb2, 0xe3, 0x38, 0xaa, 0x5d, 0x45,
	0x38, 0x4a, 0x4d, 0xf6, 0xfb, 0x5f, 0x73, 0x2e, 0xf6, 0x1c, 0xbf, 0xe9, 0x50, 0x84, 0x8b, 0x71,
	0x1c, 0x71, 0x84, 0x09, 0x1c, 0x40, 0x98, 0x34, 0x2c, 0xfc, 0x9e, 0x81, 0x6e, 0xdc, 0xfe, 0x22,
	0x2c, 0xa3, 0x8a, 0xf1, 0x9b, 0x06, 0x9a, 0xcf, 0x5f, 0x9a, 0x65, 0xa4, 0xf8, 0x1d, 0xb3, 0x68,
	0x72, 0xe9, 0xf6, 0xc6, 0x22, 0x5e, 0x5c, 0x73, 0xa2, 0x4d, 0xb7, 0x59, 0xd9, 0xd9, 0x2a, 0x6d,
	0xa8, 0xd2, 0x86, 0x46, 0xa5, 0x0d, 0x75, 0xd0, 0x8c, 0xdd, 0x8b, 0x03, 0x3f, 0xe8, 0x06, 0x3d,
	0x6c, 0xe1, 0x2d, 0x1c, 0x3b, 0x5d, 0xa2, 0x0e, 0x5d, 0xb9, 0xf4, 0x33, 0x83, 0x7e, 0x7d, 0x7a,
	0x31, 0xeb, 0x5c, 0x23, 0x7d, 0x5c, 0xce, 0x28, 0x60, 0x22, 0xf2, 0x69, 0x5b, 0x82, 0x33, 0x1d,
	0x34, 0xb3, 0xde, 0x09, 0x6d, 0xe8, 0x17, 0x46, 0x55, 0x22, 0x22, 0xcf, 0x96, 0x48, 0xa7, 0x68,
	0xb7, 0x63, 0xf3, 0x28, 0x50, 0x40, 0x9e, 0xd1, 0x5e, 0x6e, 0x9f, 0x7b, 0x8b, 0x81, 0xea, 0x19,
	0xc4, 0xe6, 0x6d, 0x56, 0xd7, 0x0e, 0x43, 0xa7, 0x95, 0xfc, 0xff, 0x14, 0xcb, 0x77, 0xee, 0x8d,
	0x37, 0x82, 0x90, 0xc4, 0x2f, 0x8c, 0xd1, 0xfb, 0x67, 0x36, 0x6b, 0xb8, 0x79, 0xdb, 0x2a, 0x19,
	0xb8, 0x12, 0x6e, 0x3e, 0xe5, 0x1c, 0x1d, 0xc6, 0xef, 0x9f, 0x87, 0xe0, 0x03, 0xf7, 0xcf, 0xeb,
	0xf9, 0x08, 0xcd, 0xf7, 0x18, 0x68, 0x3f, 0xc3, 0x85, 0x1d, 0x9c, 0xf0, 0x01, 0x2b, 0x91, 0x3a,
	0xee, 0x7a, 0x2f, 0x76, 0x70, 0x6d, 0x8a, 0x2c, 0x84, 0x83, 0xe9, 0x42, 0x58, 0xea, 0x84, 0x6b,
	0x74, 0xd0, 0x62, 0x36, 0x66, 0x69, 0x25, 0xd1, 0x7a, 0x28, 0xcd, 0x4a, 0x27, 0xbf, 0x08, 0xca,
	0x9d, 0x03, 0x28, 0x3d, 0xeb, 0x7a, 0x34, 0xe6, 0x33, 0xd1, 0x64, 0x8a, 0x60, 0xc3, 0x8e, 0x9c,
	0x56, 0x6d, 0x9a, 0xbc, 0xae, 0x13, 0x83, 0x7e, 0x7d, 0x82, 0x4d, 0x4d, 0xda, 0x2f, 0xf7, 0xeb,
	0x87, 0xe1, 0x7c, 0xa4, 0x59, 0x9c, 0x63, 0x62, 0x5d, 0x18, 0x6f, 0x7e, 0xd8, 0x40, 0xc7, 0xd2,
	0xa1, 0xbd, 0x30, 0x24, 0x4e, 0x77, 0x44, 0xa2, 0x5a, 0x76, 0x6b, 0xd3, 0x89, 0x62, 0x17, 0x3b,
	0x5d, 0xc7, 0x8f, 0x6b, 0x33, 0x64, 0xbe, 0xe7, 0x0d, 0xfa, 0xf5, 0x23, 0x6c, 0x3e, 0x36, 0xfa,
	0x7c, 0x32, 0x78, 0x51, 0x1c, 0x7b, 0xb9, 0x5f, 0xbf, 0x0d, 0xd2, 0x50, 0x80, 0x58, 0xa4, 0xec,
	0xc8, 0xfa, 0x10, 0xcc, 0xe6, 0x4b, 0x0c, 0x94, 0x2c, 0x2e, 0x8b, 0xa9, 0x8e, 0x44, 0x21, 0xfb,
	0x3e, 0xd5, 0x01, 0x8f, 0x66, 0xdf, 0x48, 0x14, 0x5b, 0x4b, 0xb7, 0x37, 0x08, 0x9a, 0x28, 0x51,
	0x01, 0x9f, 0x3c, 0xe8, 0xd7, 0x27, 0xc5, 0x96, 0xe4, 0xf3, 0x1c, 0xc9, 0x48, 0x15, 0xb1, 0x82,
	0xa0, 0x9b, 0xf5, 0x4e, 0xc8, 0x41, 0x12, 0x15, 0x7f, 0x5f, 0x1a, 0x08, 0x4f, 0xec, 0xd5, 0x2f,
	0x0a, 0x7c, 0xe6, 0x94, 0xf7, 0x03, 0x4a, 0xca, 0x75, 0x5a, 0x52, 0x58, 0x5c, 0xfa, 0xb9, 0xa0,
	0xe5, 0x3c, 0x27, 0xf0, 0x89, 0x4b, 0x5e, 0x22, 0xca, 0x66, 0xd5, 0xf6, 0x84, 0xac, 0xeb, 0x32,
	0x49, 0xa6, 0x99, 0x48, 0xa4, 0x6e, 0xb6, 0xa9, 0xc2, 0x9b, 0x1f, 0x37, 0xd0, 0x7e, 0x4c, 0xa7,
	0xb5, 0x36, 0x1c, 0xdb, 0x8b, 0x37, 0xac, 0xe6, 0x86, 0x93, 0xaa, 0xb0, 0x3f, 0xa4, 0x64, 0xde,
	0xa8, 0x25, 0x93, 0xfd, 0x39, 0x43, 0xa0, 0x96, 0x13, 0xa0, 0x84, 0x52, 0x72, 0xd7, 0xa9, 0xed,
	0x12, 0x96, 0x78, 0xee, 0x8c, 0xe0, 0xae, 0x13, 0x6b, 0xb1, 0x00, 0xa3, 0xd4, 0x8f, 0x24, 0xa3,
	0x14, 0x20, 0x70, 0xe7, 0xfa, 0xfc, 0x57, 0x86, 0xbb, 0x55, 0xfe, 0x98, 0xce, 0x7c, 0xab, 0x76,
	0xe6, 0x32, 0x39, 0x57, 0x7e, 0xcc, 0x40, 0xfb, 0x73, 0x57, 0x7a, 0x19, 0x35, 0xca, 0x5f, 0xb9,
	0x02, 0xd5, 0x87, 0xec, 0x87, 0x32, 0x9e, 0x66, 0x5e, 0x00, 0x4e, 0x33, 0xe2, 0xce, 0xb6, 0xed,
	0x35, 0xe9, 0x11, 0x04, 0x99, 0xb0, 0xed, 0xc3, 0xcd, 0xa7, 0x0d, 0xb4, 0x30, 0x7c, 0xff, 0x95,
	0xf1, 0x83, 0x7e, 0xd0, 0x40, 0xb3, 0x9a, 0x8d, 0x59, 0x46, 0x52, 0x3f, 0x67, 0xa0, 0xeb, 0xb6,
	0xb9, 0x93, 0xcb, 0x48, 0xfe, 0x37, 0x4c, 0x34, 0x9e, 0x6d, 0xef, 0xea, 0x20, 0x56, 0x1d, 0xc4,
	0xaa, 0x83, 0xd8, 0x88, 0x0e, 0x62, 0xff, 0xda, 0x40, 0x7b, 0x05, 0xcd, 0x30, 0xb4, 0x23, 0xbb,
	0xeb, 0xc4, 0x4e, 0x94, 0x5e, 0xe1, 0xcd, 0x09, 0x07, 0x03, 0xba, 0x3d, 0x1b, 0xc9, 0x10, 0xbc,
	0xb4, 0x98, 0x68, 0x76, 0xd9, 0x9e, 0x6d, 0x64, 0x70, 0x7c, 0x6b, 0x68, 0xd1, 0x02, 0xc5, 0x6e,
	0x1d, 0xe0, 0x24, 0xfd, 0xe6, 0x8b, 0x55, 0xfd, 0x97, 0xdd, 0xe0, 0x1d, 0x12, 0x44, 0x13, 0x05,
	0x7b, 0x04, 0x74, 0xdf, 0xb7, 0xe7, 0xeb, 0xbe, 0xcc, 0xc0, 0x7d, 0x4c, 0x21, 0x63, 0x94, 0x7a,
	0xef, 0x4b, 0x0d, 0x34, 0x8d, 0x7b, 0xeb, 0x56, 0xd3, 0xeb, 0xe1, 0xec, 0x05, 0x31, 0x83, 0xf6,
	0x61, 0x85, 0xb2, 0xb5, 0xde, 0xfa, 0x32, 0x1d, 0x98, 0x10, 0x45, 0xee, 0x00, 0x40, 0x93, 0x70,
	0xcf, 0x20, 0x23, 0x05, 0x77, 0x00, 0x18, 0x00, 0x99, 0xcf, 0x57, 0x0d, 0xd4, 0x73, 0xca, 0xdc,
	0x3b, 0xd7, 0x62, 0xdf, 0x6a, 0xa0, 0xf9, 0xe4, 0x8b, 0xd9, 0xd8, 0xb2, 0xad, 0x54, 0xe5, 0x56,
	0xec, 0xd3, 0x7b, 0xf5, 0xc7, 0xa1, 0x44, 0x8f, 0xdf, 0x0b, 0x9b, 0xb8, 0xad, 0xfa, 0x09, 0x7c,
	0x39, 0xe8, 0x91, 0x83, 0x74, 0x5f, 0xeb, 0x9d, 0x50, 0xc5, 0x62, 0xbe, 0xcc, 0x40, 0x7b, 0x84,
	0xf5, 0xc4, 0xe9, 0xfa, 0x2a, 0xa5, 0x6b, 0x46, 0x5d, 0xa6, 0x3f, 0x37, 0xe8, 0xd7, 0x67, 0xf8,
	0x4f, 0x4e, 0xcf, 0x71, 0x65, 0x79, 0x6a, 0x29, 0x99, 0xc9, 0xd6, 0x68, 0x46, 0xc5, 0x6f, 0x19,
	0xe8, 0x30, 0xbb, 0x66, 0xa0, 0x66, 0x90, 0xf4, 0x96, 0x81, 0xd3, 0xf3, 0xb5, 0x39, 0x98, 0x09,
	0x87, 0x5a, 0x93, 0xa9, 0x5d, 0x84, 0x0a, 0x35, 0xea, 0xc5, 0xa4, 0x69, 0xe7, 0x14, 0xde, 0x0a,
	0x6e, 0x34, 0x72, 0xa6, 0x02, 0x5e, 0x4c, 0x9d, 0x5c, 0x74, 0xe6, 0xdb, 0x0c, 0xb4, 0x3f, 0xdc,
	0xd8, 0xc2, 0x6e, 0xd3, 0xf6, 0xd4, 0xf7, 0xf7, 0x75, 0x4a, 0x6f, 0x96, 0x9c, 0xa8, 0xc1, 0x46,
	0xb2, 0x27, 0x27, 0x07, 0x34, 0xa9, 0xcd, 0x96, 0x0f, 0x68, 0xb9, 0xd8, 0xc1, 0x01, 0x2d, 0xd4,
	0x62, 0x31, 0xbf, 0x66, 0xa0, 0x63, 0xf9, 0x87, 0x17, 0x4e, 0xe8, 0x1f, 0xce, 0x41, 0x07, 0xac,
	0x1c, 0x5d, 0x6b, 0xe9, 0xb9, 0x83, 0x7e, 0xbd, 0x9e, 0xd7, 0xc9, 0x49, 0xbf, 0x6d, 0xd8, 0xb1,
	0x49, 0xfb, 0x10, 0xf5, 0xcd, 0x62, 0xc4, 0x0b, 0x3f, 0x31, 0xd0, 0x5e, 0x2d, 0xa7, 0x2c, 0xe3,
	0x21, 0x64, 0x0d, 0x1c, 0x42, 0x44, 0x6b, 0x54, 0xc3, 0x71, 0x22, 0xd7, 0xef, 0xec, 0xe4, 0xe4,
	0xf1, 0x71, 0x03, 0x1d, 0x28, 0x60, 0xd2, 0x65, 0x54, 0x84, 0x3f, 0x6c, 0xa0, 0x7d, 0x7a, 0xee,
	0x5d, 0x46, 0x6a, 0xdf, 0x6b, 0xa0, 0x29, 0x89, 0xdf, 0x97, 0xd2, 0xff, 0x65, 0x37, 0x7a, 0xfc,
	0xd2, 0xed, 0x8d, 0xbb, 0x1a, 0xe7, 0xaa, 0xa3, 0x45, 0x75, 0xb4, 0xa8, 0x8e, 0x16, 0x23, 0x3a,
	0x5a, 0xdc, 0x81, 0x76, 0xad, 0x77, 0xc2, 0xcd, 0xd0, 0xa7, 0xaf, 0x6a, 0x82, 0x3f, 0x19, 0xdd,
	0x8c, 0xf0, 0x55, 0x09, 0x43, 0xc1, 0x93, 0xd1, 0x76, 0xf2, 0xaa, 0xde, 0x6c, 0xa0, 0x9a, 0x73,
	0x6f, 0x18, 0x44, 0x31, 0xb3, 0xb3, 0xc7, 0x76, 0xd4, 0x71, 0x62, 0xe2, 0x1b, 0x48, 0xee, 0x74,
	0x04, 0x35, 0x94, 0xf0, 0xa4, 0x0b, 0xa4, 0x9f, 0x64, 0xb8, 0x22, 0x39, 0x60, 0x4f, 0x11, 0x60,
	0xa9, 0x8b, 0xe7, 0x80, 0xcd, 0xc3, 0x0d, 0x94, 0x42, 0x47, 0x87, 0x83, 0x90, 0xe6, 0x76, 0x73,
	0x48, 0xdb, 0xbd, 0x0d, 0xd2, 0x56, 0xba, 0x85, 0xa4, 0xe5, 0xe1, 0x06, 0xa4, 0xb9, 0x3a, 0x1c,
	0xe6, 0xbf, 0x40, 0x33, 0x2a, 0x49, 0x53, 0xc5, 0x24, 0x91, 0xab, 0x31, 0x95, 0x18, 0x76, 0x35,
	0x56, 0x48, 0xc5, 0x54, 0x24, 0xcd, 0xff, 0x1c, 0xf5, 0xb0, 0xb0, 0x47, 0x50, 0x91, 0x93, 0x85,
	0xb0, 0xe3, 0x93, 0xc2, 0xfd, 0x06, 0xaa, 0x79, 0x41, 0x47, 0xaf, 0x4f, 0xca, 0xe7, 0x84, 0xb3,
	0x74, 0x20, 0x53, 0x88, 0xc8, 0x5b, 0x87, 0x4d, 0x5c, 0x25, 0x63, 0x6f, 0x3d, 0x0f, 0x35, 0x78,
	0xeb, 0x9e, 0x0e, 0x07, 0x51, 0x75, 0x53, 0x8d, 0xce, 0x77, 0xe2, 0x4b, 0x41, 0x74, 0x8f, 0x7a,
	0x54, 0xd8, 0x27, 0x69, 0x90, 0xe7, 0xe8, 0x40, 0xaa, 0xea, 0x4a, 0x6d, 0x8a, 0xaa, 0x9b, 0x8b,
	0x1d, 0xa8, 0xba, 0x9b, 0x5a, 0x2c, 0x0b, 0xef, 0x32, 0xd0, 0x84, 0xf8, 0xf2, 0xcb, 0x28, 0xb6,
	0x3f, 0x33, 0x89, 0x26, 0x96, 0x22, 0xb7, 0xd5, 0x71, 0x4e, 0x06, 0x5d, 0xdb, 0xf5, 0x2b, 0xe1,
	0x5d, 0x09, 0xef, 0x4a, 0x78, 0x8f, 0x48, 0x78, 0x3f, 0x19, 0x5d, 0xe5, 0x62, 0xb7, 0xc5, 0x7c,
	0x32, 0x08, 0xd8, 0x0a, 0x76, 0x5b, 0x1c, 0x2c, 0xe9, 0x05, 0x60, 0x49, 0x83, 0xf9, 0x6c, 0xb4,
	0xbb, 0x6b, 0x37, 0x2d, 0xbb, 0xe3, 0xfa, 0x1d, 0x2b, 0x76, 0xbb, 0x0e, 0x4b, 0x06, 0xf9, 0x53,
	0x83, 0x7e, 0x7d, 0x62, 0xd5, 0x6e, 0x2e, 0x26, 0x1d, 0x17, 0x5c, 0xf2, 0xa9, 0x58, 0x2e, 0x48,
	0x38, 0x1e, 0xdc, 0xe3, 0x77, 0x05, 0x00, 0xf3, 0x22, 0xda, 0x93, 0x0c, 0xf5, 0x1c, 0x3b, 0xf2,
	0x93, 0xd1, 0x8e, 0x6f, 0xaf, 0x7b, 0x4e, 0x8b, 0xb9, 0x55, 0x10, 0x3f, 0xd2, 0x55, 0xbb, 0x79,
	0x96, 0x75, 0x9f, 0xa2, 0xbd, 0xdc, 0xc6, 0xa2, 0x83, 0x05, 0x7e, 0xa4, 0x5d, 0x05, 0xd8, 0x7c,
	0xa9, 0x81, 0x66, 0x08, 0x9c, 0xdb, 0x75, 0xe3, 0x34, 0x37, 0x3c, 0x93, 0x9d, 0xd9, 0xd5, 0xed,
	0xea, 0xe2, 0xf2, 0xd9, 0xa4, 0x9f, 0x1d, 0x30, 0xc9, 0x92, 0x26, 0xf2, 0x33, 0xa1, 0x46, 0xe8,
	0xe0, 0xf2, 0x53, 0x41, 0x09, 0xe4, 0x67, 0x17, 0x82, 0x11, 0x8b, 0x5f, 0x02, 0xd1, 0x0d, 0x36,
	0x9d, 0x8c, 0x86, 0x69, 0x42, 0x43, 0x5d, 0xa0, 0x61, 0x35, 0xd8, 0x74, 0x14, 0x3a, 0x88, 0xc5,
	0x6f, 0xd5, 0x6e, 0x26, 0x9d, 0x9c, 0x8c, 0xa3, 0x9c, 0x0c, 0x11, 0x29, 0xb0, 0xf8, 0x75, 0x01,
	0x10, 0xc8, 0xb0, 0xfc, 0x3d, 0x29, 0xc3, 0xb2, 0xc8, 0xa3, 0x77, 0x2e, 0xca, 0xb7, 0x6b, 0x7c,
	0xf9, 0xea, 0x63, 0xc2, 0xf8, 0xf2, 0x01, 0x03, 0x99, 0xea, 0x7b, 0x29, 0xa3, 0x94, 0xfd, 0xf7,
	0xe3, 0xe8, 0xaa, 0x65, 0x3b, 0x6a, 0x55, 0xd2, 0xb5, 0x92, 0xae, 0x95, 0x74, 0x1d, 0x91, 0x74,
	0xbd, 0x88, 0x26, 0x39, 0x87, 0xe9, 0xda, 0x21, 0xbb, 0x6c, 0xcb, 0x5c, 0xc9, 0x33, 0x86, 0xb2,
	0x6a, 0x87, 0xe4, 0x2b, 0x12, 0x37, 0x38, 0xb1, 0x95, 0xbb, 0xc1, 0x01, 0x44, 0x40, 0x7c, 0xba,
	0xc2, 0xf8, 0x64, 0xb9, 0xc8, 0x21, 0x71, 0x66, 0x3a, 0x5d, 0xb2, 0xff, 0x77, 0xce, 0xb9, 0x7f,
	0x11, 0x99, 0x1b, 0x76, 0xd4, 0xba, 0x64, 0x47, 0x8e, 0x9a, 0x6f, 0x74, 0x3a, 0x9d, 0xe3, 0x0c,
	0x1b, 0xb2, 0xf4, 0x4f, 0x07, 0xfd, 0xfa, 0x74, 0xf6, 0x8b, 0x73, 0xe2, 0x63, 0x6c, 0xb1, 0x2b,
	0xa8, 0x80, 0x83, 0xe7, 0x86, 0x04, 0xb8, 0xf0, 0x4e, 0x03, 0x21, 0x4e, 0x7f, 0x19, 0x39, 0xec,
	0xe7, 0xc7, 0xd1, 0xf8, 0xb2, 0xe7, 0x52, 0x8e, 0x56, 0xb1, 0xd9, 0x8a, 0xcd, 0x56, 0x6c, 0x76,
	0x44, 0x6c, 0xb6, 0x8b, 0x66, 0xed, 0x66, 0xd3, 0x09, 0x63, 0xa7, 0x65, 0x35, 0x3d, 0x97, 0xdd,
	0x5b, 0x32, 0x4b, 0xe4, 0x3f, 0x1b, 0xf4, 0xeb, 0xa4, 0xc0, 0x5c, 0xd2, 0x9d, 0xed, 0xcf, 0xcb,
	0xfd, 0xfa, 0x35, 0xbc, 0x22, 0x94, 0x04, 0x09, 0xee, 0x64, 0x6d, 0x19, 0xd4, 0x7c, 0x11, 0x9a,
	0x6e, 0x06, 0xdd, 0x44, 0xaf, 0x6f, 0xb9, 0xed, 0xb6, 0xd6, 0x2c, 0xb9, 0xec, 0xb9, 0x27, 0xdd,
	0x76, 0x3b, 0xab, 0xb8, 0x42, 0x14, 0xf4, 0x65, 0x02, 0x94, 0xb6, 0x73, 0x05, 0x5d, 0x46, 0x06,
	0x14, 0xf4, 0x26, 0x00, 0x02, 0x57, 0xf2, 0x0f, 0x4a, 0x57, 0xf2, 0x19, 0x85, 0x3b, 0x8f, 0x76,
	0x7e, 0xaf, 0x81, 0xa6, 0x24, 0x34, 0x65, 0xcd, 0xc4, 0x48, 0x69, 0x3c, 0x69, 0xc7, 0xf6, 0xba,
	0x8d, 0x9d, 0x2a, 0x83, 0x4e, 0xc5, 0x73, 0x2b, 0x9e, 0x3b, 0xe2, 0x4c, 0x8c, 0xcc, 0x3f, 0xa4,
	0xc5, 0xf6, 0x60, 0x51, 0x26, 0x46, 0x75, 0xb7, 0x6a, 0x32, 0x31, 0x0e, 0xc1, 0x07, 0x5c, 0xca,
	0x9b, 0x2a, 0xc2, 0x6d, 0x65, 0x62, 0x54, 0x09, 0x79, 0x78, 0x99, 0x18, 0xf3, 0xf0, 0x95, 0xd2,
	0xfd, 0x76, 0x0c, 0x21, 0x4a, 0x6f, 0xc5, 0x2e, 0x2b, 0x76, 0x59, 0xb1, 0xcb, 0x11, 0xb2, 0xcb,
	0x4b, 0xc4, 0xdd, 0x34, 0xe1, 0x6e, 0x7a, 0x26, 0x99, 0x3a, 0x92, 0xb2, 0xbd, 0x29, 0x32, 0xc7,
	0xeb, 0x00, 0x73, 0x2c, 0xe0, 0x89, 0xb3, 0x4d, 0x0e, 0x9f, 0xf1, 0xc2, 0x17, 0xa8, 0xbc, 0xb0,
	0x06, 0x79, 0xe1, 0xc3, 0xe3, 0x81, 0xef, 0x33, 0xd0, 0xb4, 0x8c, 0xa7, 0x8c, 0xbc, 0xef, 0xcf,
	0xae, 0x4e, 0x79, 0xdf, 0xf9, 0x20, 0xa8, 0x52, 0xe2, 0x54, 0xbc, 0xaf, 0xe2, 0x7d, 0xa3, 0xe2,
	0x7d, 0x2f, 0x50, 0x0b, 0x21, 0x49, 0x2c, 0x28, 0xd9, 0x92, 0x7f, 0x1f, 0x2c, 0x88, 0xe3, 0x29,
	0x23, 0x0b, 0x7a, 0x25, 0x42, 0x53, 0x92, 0x7b, 0x6a, 0xc5, 0x87, 0x2a, 0x3e, 0x54, 0xf1, 0xa1,
	0x91, 0xa5, 0xe6, 0x52, 0xf8, 0xd0, 0x21, 0x81, 0x0f, 0x89, 0xfb, 0xf2, 0x11, 0x0b, 0x6a, 0xf9,
	0x83, 0x92, 0x06, 0xb5, 0x7c, 0x71, 0x84, 0x41, 0x2d, 0x0b, 0x1f, 0x32, 0xd0, 0x5e, 0xed, 0x0b,
	0x2f, 0x23, 0xd7, 0xfe, 0xd3, 0x5d, 0xc8, 0x5c, 0xee, 0xe1, 0x38, 0xe8, 0x3a, 0xd1, 0x62, 0x1c,
	0xdb, 0xcd, 0x0d, 0x92, 0xc0, 0xa1, 0x62, 0xdc, 0x15, 0xe3, 0xae, 0x18, 0xf7, 0x68, 0x18, 0xf7,
	0x6b, 0x0d, 0x64, 0xda, 0xd9, 0xd6, 0x03, 0x27, 0x67, 0x81, 0x85, 0xf3, 0xcd, 0xc9, 0xce, 0xbe,
	0xe4, 0x83, 0xfe, 0x2c, 0xb9, 0xfe, 0x91, 0xbb, 0xf8, 0x3d, 0xb4, 0x8a, 0x17, 0xde, 0xfe, 0xc8,
	0x90, 0xe6, 0xeb, 0x0c, 0x34, 0xdd, 0xf6, 0x02, 0x3b, 0x76, 0xfd, 0x4e, 0x72, 0x10, 0x17, 0x4f,
	0xd6, 0x59, 0x56, 0x05, 0x95, 0x61, 0x9c, 0x66, 0x20, 0x2b, 0x8d, 0x2c, 0x44, 0x13, 0x34, 0x09,
	0x21, 0x9a, 0x32, 0x76, 0x70, 0x1f, 0x94, 0x76, 0xae, 0x84, 0x84, 0xa1, 0xb7, 0xd5, 0xfb, 0xa0,
	0x23, 0xf9, 0x44, 0xec, 0x5c, 0xac, 0xfd, 0xd1, 0xf0, 0x8c, 0x23, 0x2c, 0x3a, 0xf5, 0xb6, 0xfc,
	0xe9, 0xcb, 0x94, 0x76, 0xe4, 0x93, 0x06, 0xaa, 0x0f, 0xf9, 0x4a, 0x65, 0x94, 0x46, 0xc4, 0xe4,
	0x9c, 0xf3, 0x5d, 0x4b, 0xe9, 0x14, 0x61, 0xa0, 0x9b, 0x1e, 0xca, 0x42, 0x28, 0xe3, 0x33, 0x7c,
	0x67, 0x1a, 0xed, 0x3b, 0x69, 0xc7, 0xf6, 0xb2, 0x93, 0x10, 0x4a, 0xa8, 0x6d, 0x06, 0xbe, 0xef,
	0x34, 0x2b, 0x2d, 0xa0, 0xd2, 0x02, 0x2a, 0x2d, 0x60, 0x54, 0x5a, 0xc0, 0xb7, 0x0c, 0x74, 0x73,
	0xcb, 0x8e, 0x6d, 0xab, 0x49, 0xf6, 0x21, 0x65, 0xfc, 0x6c, 0x23, 0x5a, 0xe4, 0x54, 0x24, 0x96,
	0x5a, 0xe5, 0xd9, 0xe9, 0x33, 0xff, 0x08, 0xb1, 0xd0, 0xaa, 0xeb, 0xe0, 0x25, 0x7f, 0xd0, 0xaf,
	0x5f, 0xaf, 0xdf, 0xd8, 0xc9, 0x19, 0x0c, 0x8e, 0xbe, 0xdc, 0xaf, 0xff, 0x1c, 0x5b, 0xe0, 0x0f,
	0x85, 0x06, 0xf1, 0x31, 0xae, 0x6f, 0xe9, 0xe7, 0xea, 0x84, 0xd2, 0x5c, 0xe6, 0x27, 0x0c, 0x74,
	0x6d, 0xe1, 0x34, 0x1b, 0x81, 0xd7, 0x12, 0xfd, 0xee, 0x5f, 0x38, 0xe8, 0xd7, 0x8f, 0xe6, 0x3e,
	0xca, 0x99, 0xc0, 0x6b, 0x31, 0x67, 0xfc, 0xa7, 0x6e, 0xe3, 0x19, 0x32, 0xe4, 0x22, 0xf1, 0x47,
	0x73, 0x89, 0x4f, 0xb1, 0x9b, 0xaf, 0xbc, 0x02, 0x3d, 0x39, 0x17, 0x71, 0xca, 0x5b, 0x9c, 0xd6,
	0x43, 0x8f, 0x9c, 0x7b, 0xf1, 0xa0, 0x5f, 0xbf, 0x55, 0xff, 0x74, 0xcb, 0x19, 0x5a, 0x35, 0x8c,
	0xed, 0xf4, 0x90, 0x67, 0x2d, 0x22, 0x49, 0x7c, 0xf4, 0x5b, 0x5b, 0x0f, 0x6d, 0x6a, 0xf3, 0x4d,
	0x06, 0x3a, 0x94, 0x3b, 0x6b, 0xf2, 0x8c, 0x24, 0xb6, 0x60, 0x7c, 0xa9, 0x31, 0xe8, 0xd7, 0xe7,
	0xf5, 0xcf, 0xb5, 0x1a, 0xb4, 0x92, 0xcf, 0x75, 0xcb, 0x90, 0x47, 0x48, 0x90, 0x81, 0xac, 0x0c,
	0xad, 0x5c, 0x6c, 0xe6, 0x3b, 0x0c, 0x34, 0x2b, 0x45, 0xba, 0x89, 0xc1, 0x7a, 0xb7, 0xa4, 0x6f,
	0x5f, 0x4f, 0x10, 0x08, 0xa1, 0x4b, 0x34, 0x36, 0xe2, 0x57, 0x25, 0xb7, 0x62, 0xee, 0x57, 0xa5,
	0x99, 0x0a, 0x68, 0xd6, 0x9e, 0x0c, 0x6a, 0xde, 0xad, 0x06, 0x1f, 0x5c, 0x53, 0x4c, 0xd4, 0xce,
	0xf5, 0xd9, 0xf7, 0x18, 0x68, 0x8f, 0x1c, 0x59, 0x27, 0x26, 0x61, 0xbc, 0xb5, 0x78, 0x62, 0x18,
	0xb4, 0x97, 0x25, 0x38, 0x57, 0x9a, 0x05, 0x3b, 0x89, 0x6e, 0x36, 0x10, 0x98, 0xb2, 0xa9, 0x00,
	0x2f, 0x7c, 0xd6, 0x40, 0xd7, 0x6e, 0xef, 0x73, 0x94, 0x51, 0x6f, 0xfa, 0xb7, 0x06, 0x3a, 0x58,
	0xf4, 0xdd, 0xca, 0x9a, 0x60, 0x6d, 0x9b, 0x9f, 0xbc, 0x8c, 0xe4, 0x7f, 0x73, 0x0c, 0x4d, 0x54,
	0x2e, 0x71, 0x95, 0x82, 0x5a, 0x29, 0xa8, 0x8f, 0x82, 0x82, 0xfa, 0x4b, 0xa8, 0x36, 0xc4, 0x15,
	0x8e, 0x04, 0xa3, 0xe7, 0x39, 0xc1, 0xdd, 0xc0, 0x65, 0xfd, 0x30, 0xef, 0xb7, 0xbd, 0x2d, 0xad,
	0xdf, 0xdb, 0x0b, 0x55, 0x5f, 0x8f, 0x79, 0x51, 0x8e, 0x3d, 0x7c, 0x8f, 0xb7, 0x0f, 0x18, 0xc8,
	0x7c, 0x6c, 0xf8, 0xba, 0xfd, 0x8f, 0x71, 0x34, 0x79, 0xd2, 0x21, 0xe9, 0x59, 0x37, 0x6c, 0x8c,
	0x5d, 0x5c, 0xb1, 0xc2, 0x8a, 0x15, 0x56, 0xac, 0x70, 0x74, 0x11, 0x19, 0x2d, 0xb2, 0xf9, 0xac,
	0x26, 0xdd, 0x7d, 0x62, 0x6e, 0x18, 0x72, 0x72, 0x00, 0x7b, 0x93, 0xbd, 0x39, 0x76, 0x72, 0xd0,
	0x40, 0x82, 0x93, 0x43, 0x4b, 0x06, 0x2d, 0xac, 0x03, 0x07, 0x27, 0xda, 0xf1, 0x81, 0xa1, 0x38,
	0xa7, 0xdd, 0x17, 0x1f, 0xe5, 0x9c, 0x76, 0x24, 0x87, 0xb1, 0xe6, 0x49, 0xcb, 0xc8, 0x99, 0x1f,
	0xdc, 0x8d, 0xf6, 0x52, 0x52, 0x4f, 0xf7, 0xfc, 0x66, 0xc2, 0xbe, 0x6c, 0xef, 0xf6, 0x28, 0xe8,
	0x85, 0x15, 0x87, 0xae, 0x38, 0x74, 0xc5, 0xa1, 0x47, 0xc4, 0xa1, 0x3f, 0x6c, 0xa0, 0x63, 0x8c,
	0xd1, 0xb6, 0xb3, 0x6d, 0x68, 0x75, 0x92, 0x7d, 0x68, 0xb5, 0x1c, 0xdc, 0x8c, 0xdc, 0x30, 0x69,
	0x63, 0x2c, 0x9b, 0x94, 0xcb, 0xd0, 0x6e, 0xda, 0x93, 0x7c, 0x2c, 0x4f, 0xb3, 0xb0, 0x0d, 0xc4,
	0xa0, 0x5c, 0x46, 0x6b, 0x08, 0x66, 0xf3, 0x7d, 0x06, 0xca, 0x45, 0x1a, 0xe0, 0x6c, 0xf7, 0xd2,
	0x82, 0x2f, 0xcf, 0x1e, 0xf4, 0xeb, 0x87, 0xb5, 0xc4, 0xde, 0x81, 0xf9, 0x3e, 0xfe, 0xa9, 0x62,
	0x52, 0x39, 0x56, 0x91, 0xd2, 0xc3, 0xad, 0x42, 0xb4, 0xe6, 0x03, 0x06, 0xba, 0x25, 0x0f, 0x63,
	0xc2, 0xd6, 0x5d, 0xbf, 0x63, 0xad, 0x47, 0x6e, 0x8b, 0xe4, 0x41, 0x89, 0x02, 0xcf, 0xc1, 0xcc,
	0xf6, 0x79, 0x44, 0xb4, 0x7d, 0xba, 0x7e, 0x67, 0x89, 0x0d, 0x3a, 0x9f, 0x8c, 0x21, 0xbb, 0x28,
	0x1c, 0xf4, 0xeb, 0x37, 0x68, 0x9f, 0x4a, 0x07, 0x72, 0xb9, 0x5f, 0xff, 0xf9, 0xe2, 0x07, 0xd4,
	0x93, 0x23, 0x3e, 0xec, 0x0d, 0xad, 0xed, 0xce, 0x66, 0xbe, 0xd9, 0x40, 0xa6, 0x20, 0xbf, 0x3c,
	0x78, 0x25, 0x7c, 0x13, 0x94, 0xc5, 0x12, 0x42, 0x2e, 0x17, 0x3d, 0x72, 0x15, 0x4c, 0x02, 0xc7,
	0xa5, 0x46, 0xe1, 0xc2, 0x5e, 0x9d, 0x06, 0x04, 0x8e, 0x87, 0x12, 0xa0, 0xe9, 0xaa, 0x79, 0xc9,
	0x8e, 0x15, 0xd2, 0xf3, 0x48, 0xe9, 0x08, 0x5f, 0x79, 0xb4, 0x75, 0x84, 0xcf, 0x18, 0xe8, 0x9a,
	0xed, 0x7c, 0x81, 0x32, 0x2a, 0x0d, 0x1f, 0x37, 0xd0, 0x81, 0x82, 0xaf, 0x55, 0x46, 0x92, 0xff,
	0xeb, 0x0c, 0xda, 0x45, 0x49, 0x5e, 0xe9, 0xda, 0x9d, 0xca, 0x14, 0x57, 0x69, 0x37, 0x95, 0x76,
	0x33, 0x2a, 0xed, 0xe6, 0x55, 0x06, 0x9a, 0x67, 0x82, 0xcf, 0x4d, 0x36, 0x9f, 0x95, 0x4a, 0x41,
	0xbb, 0xeb, 0x7a, 0x5b, 0x4c, 0xa9, 0x21, 0x45, 0x5e, 0x85, 0x1d, 0xca, 0xf8, 0x0b, 0x19, 0xc2,
	0xfd, 0x6d, 0xf3, 0xd1, 0x80, 0x7a, 0x67, 0x2d, 0x3d, 0x1e, 0x13, 0xa3, 0xbd, 0x00, 0x43, 0xdb,
	0xf5, 0x1c, 0xab, 0x17, 0xb9, 0x4c, 0x57, 0xf9, 0xe7, 0x83, 0x7e, 0xdd, 0x14, 0x68, 0x38, 0xed,
	0x7a, 0xce, 0x9d, 0xe7, 0x57, 0xf8, 0x4e, 0xd4, 0x02, 0x83, 0x7b, 0xa3, 0x96, 0x04, 0x1d, 0xb9,
	0xa4, 0x3e, 0xb0, 0x08, 0xd7, 0x6d, 0x3d, 0x99, 0xe8, 0x19, 0x69, 0x7d, 0x60, 0x0e, 0xb1, 0x7a,
	0xf2, 0xc9, 0x42, 0x7d, 0x60, 0x09, 0x06, 0xd6, 0x07, 0x16, 0x80, 0x5a, 0x4f, 0x36, 0x7f, 0x01,
	0xcd, 0x81, 0xe1, 0x82, 0x16, 0x46, 0x2f, 0x37, 0x49, 0xdd, 0x77, 0x61, 0x26, 0x51, 0xf7, 0xba,
	0x5e, 0x33, 0x9f, 0x5e, 0xe1, 0xda, 0xd3, 0xd2, 0x60, 0x30, 0x1d, 0x34, 0x03, 0x60, 0xf1, 0x86,
	0xfd, 0x24, 0x92, 0x2b, 0x8d, 0x55, 0xfb, 0x13, 0xa6, 0x5d, 0xdb, 0xb0, 0x9f, 0xc4, 0x53, 0xb2,
	0x29, 0x50, 0x20, 0x25, 0x5b, 0x0b, 0x82, 0xa9, 0xd3, 0xb8, 0x2f, 0x72, 0x48, 0xfd, 0xb8, 0x2b,
	0xd5, 0x69, 0xdc, 0x17, 0x39, 0x79, 0xd3, 0xb8, 0x2f, 0x72, 0x72, 0xa7, 0x71, 0x5f, 0xe4, 0x98,
	0xbf, 0x67, 0xa0, 0x23, 0x10, 0xa2, 0x17, 0x86, 0x41, 0x14, 0x3b, 0x2d, 0x2b, 0xf4, 0xec, 0xb8,
	0x1d, 0x24, 0x1c, 0xc8, 0x24, 0x1b, 0xea, 0x30, 0xd4, 0x5c, 0x1a, 0xac, 0x3b, 0xcb, 0x33, 0x71,
	0xd7, 0xa0, 0x5f, 0x3f, 0x24, 0x92, 0x95, 0x62, 0x4a, 0x47, 0x26, 0x2c, 0xea, 0x49, 0x3a, 0x22,
	0xd5, 0x29, 0x45, 0x9a, 0x0f, 0xb5, 0x8a, 0x70, 0x12, 0xcb, 0xb7, 0x88, 0x6d, 0xd3, 0xf1, 0x5b,
	0x41, 0x44, 0x79, 0xf6, 0xac, 0x60, 0xf9, 0xe6, 0x48, 0xee, 0x22, 0x23, 0x18, 0xd7, 0xbb, 0x41,
	0x43, 0x90, 0x80, 0x02, 0x5a, 0xbe, 0x75, 0x38, 0xcc, 0x7b, 0xd1, 0x64, 0x96, 0x50, 0x48, 0xac,
	0x0c, 0x27, 0xbd, 0x2f, 0x02, 0x96, 0xe6, 0x24, 0x4a, 0x94, 0x3c, 0x92, 0x6f, 0x49, 0x68, 0xc0,
	0x3c, 0xdf, 0x12, 0xc0, 0x07, 0xf2, 0x2d, 0x6d, 0x08, 0xe3, 0x4d, 0x4b, 0xad, 0xf6, 0xb6, 0x5f,
	0x33, 0xe9, 0x23, 0xa5, 0x54, 0xfe, 0xd1, 0xa3, 0xad, 0x54, 0x7e, 0xd8, 0x40, 0xfb, 0xf4, 0x2f,
	0xb7, 0x8c, 0x3a, 0xd9, 0xfb, 0x0d, 0x34, 0xa3, 0x7c, 0x95, 0x32, 0x12, 0xfa, 0x57, 0x63, 0xe9,
	0xf5, 0x45, 0xb7, 0x13, 0x55, 0x37, 0xb9, 0x95, 0xfa, 0x58, 0xa9, 0x8f, 0x23, 0x54, 0x1f, 0x5f,
	0x66, 0xa0, 0xfd, 0xad, 0x74, 0xf7, 0xe5, 0xdc, 0xe5, 0x12, 0xd6, 0x0a, 0xb6, 0xa8, 0x78, 0x99,
	0x7b, 0xa3, 0x28, 0xd2, 0x34, 0x48, 0x00, 0x6b, 0x6d, 0x01, 0x2c, 0xd9, 0x75, 0xee, 0xf0, 0x5b,
	0x0d, 0x06, 0xb2, 0xf3, 0xfb, 0x5c, 0x7e, 0x6d, 0x00, 0x50, 0x95, 0x91, 0x23, 0xfe, 0xc9, 0x18,
	0x9a, 0x3f, 0xe9, 0xe2, 0x66, 0xb0, 0xe9, 0x44, 0x5b, 0x2c, 0xae, 0x6d, 0x11, 0x63, 0xb7, 0xe3,
	0x57, 0xf1, 0x58, 0x15, 0x7b, 0xac, 0xd8, 0xe3, 0x08, 0xd9, 0xa3, 0xaf, 0x06, 0xd2, 0x5e, 0x9f,
	0x31, 0xa6, 0xdc, 0x2d, 0xba, 0x73, 0x15, 0xf8, 0xd9, 0x68, 0xbc, 0x85, 0x6d, 0x2b, 0xea, 0x79,
	0x0e, 0xae, 0x7d, 0x73, 0x8a, 0x4c, 0x38, 0x95, 0x4d, 0x88, 0xed, 0xf3, 0x3d, 0xcf, 0x59, 0xba,
	0x71, 0xd0, 0xaf, 0x8f, 0xb1, 0x1f, 0x09, 0xe2, 0x79, 0xb6, 0x09, 0x52, 0x40, 0x11, 0xf3, 0x58,
	0x8b, 0x8d, 0x5b, 0xf8, 0x77, 0x06, 0x3a, 0x32, 0x8c, 0xe4, 0x32, 0x72, 0xc3, 0x6f, 0x4d, 0xa0,
	0xc7, 0x57, 0xe5, 0x12, 0x2a, 0xce, 0x57, 0x71, 0xbe, 0x51, 0x27, 0x74, 0x6e, 0x91, 0x5d, 0x47,
	0x13, 0xfb, 0x63, 0x39, 0xa1, 0x33, 0xdd, 0x92, 0x24, 0x3f, 0x3f, 0xe6, 0x09, 0x9d, 0xc5, 0x56,
	0x6e, 0x60, 0x00, 0x88, 0x80, 0x81, 0xa1, 0x25, 0x8c, 0x07, 0x75, 0x75, 0x1e, 0x90, 0xea, 0xea,
	0x3c, 0xdc, 0x64, 0xfc, 0x5b, 0x68, 0xda, 0x0e, 0x5d, 0xcb, 0x6e, 0x36, 0x1d, 0x8c, 0x49, 0xdc,
	0x03, 0xae, 0x0d, 0xa6, 0x60, 0x86, 0x82, 0xc5, 0xc6, 0xca, 0x22, 0xe9, 0x27, 0xa1, 0x18, 0xc4,
	0x7e, 0x08, 0x9a, 0x84, 0xc0, 0x55, 0x19, 0x17, 0xb0, 0x1f, 0xda, 0xa1, 0x2b, 0x00, 0x99, 0x36,
	0x42, 0xc9, 0xe2, 0xc3, 0xa1, 0xdd, 0x74, 0x70, 0xad, 0x3f, 0x05, 0xd3, 0x0f, 0x9c, 0x4b, 0xbb,
	0x96, 0x6e, 0x4e, 0x96, 0x4d, 0xf6, 0x33, 0x99, 0xec, 0x00, 0x5f, 0xcb, 0xb4, 0x0d, 0xac, 0x1a,
	0xde, 0x6c, 0x3e, 0x13, 0x8d, 0x85, 0x51, 0x70, 0xb7, 0xd3, 0x8c, 0x71, 0xed, 0xcf, 0x25, 0xa9,
	0xd1, 0xa0, 0x1d, 0x4b, 0x37, 0x24, 0x52, 0x83, 0xfd, 0x10, 0xde, 0x5a, 0x0a, 0x07, 0x84, 0x46,
	0xda, 0x68, 0xbe, 0xc4, 0x40, 0x33, 0x69, 0xf6, 0x85, 0xa4, 0xd7, 0xb3, 0x63, 0x07, 0xd7, 0xfe,
	0x62, 0x0a, 0xa6, 0x63, 0x4d, 0x8b, 0x89, 0xb3, 0x01, 0x4b, 0x3f, 0x33, 0xe8, 0xd7, 0xa7, 0xa5,
	0x46, 0xcc, 0x6d, 0x86, 0x0a, 0x42, 0x70, 0xad, 0x89, 0x25, 0x38, 0x73, 0x03, 0x4d, 0xa4, 0x11,
	0x05, 0x27, 0xcf, 0xad, 0xe1, 0xda, 0x5f, 0x4e, 0xc1, 0x5c, 0xdf, 0xcc, 0x5d, 0xfd, 0xe4, 0xb9,
	0x35, 0xca, 0x27, 0xf9, 0x6f, 0xcc, 0xf9, 0xa4, 0x88, 0x01, 0xf0, 0xc9, 0x4d, 0x3e, 0x9a, 0xd4,
	0x10, 0x2a, 0x7b, 0x75, 0x83, 0xff, 0x6d, 0x0c, 0x5d, 0xcd, 0x64, 0x7f, 0x25, 0x0f, 0x2b, 0x79,
	0x58, 0xc9, 0xc3, 0x11, 0xc9, 0xc3, 0x97, 0x18, 0x68, 0x77, 0xaa, 0x61, 0x5b, 0x8e, 0x1f, 0x47,
	0x5b, 0x4c, 0x22, 0x5e, 0xbb, 0x8d, 0xf3, 0x40, 0xf2, 0x55, 0x49, 0xc1, 0x20, 0xb6, 0x73, 0x4f,
	0x25, 0xf0, 0xbc, 0x60, 0x10, 0xc4, 0x0b, 0x05, 0xa4, 0x00, 0x60, 0x3e, 0x57, 0x15, 0x90, 0x7b,
	0xa5, 0xc3, 0xc1, 0xce, 0x0d, 0x24, 0xef, 0x36, 0xd0, 0x24, 0x40, 0x52, 0xca, 0x20, 0xfb, 0x5d,
	0x68, 0xe6, 0xd4, 0x09, 0xf6, 0x82, 0x1b, 0x51, 0xb0, 0xe9, 0xb6, 0x9c, 0xa8, 0xe2, 0x83, 0x15,
	0x1f, 0xac, 0xf8, 0xe0, 0x88, 0xf8, 0xe0, 0x5b, 0x0d, 0x54, 0x77, 0x4e, 0x64, 0x29, 0xb9, 0x42,
	0xb6, 0x07, 0x93, 0x7f, 0xba, 0x2e, 0x6e, 0xf6, 0x82, 0x1e, 0x3d, 0x2a, 0x8c, 0x2d, 0x5d, 0x18,
	0xf4, 0xeb, 0x07, 0x95, 0xcd, 0xda, 0xe0, 0xe3, 0x78, 0x3a, 0xec, 0x21, 0x08, 0x45, 0x2a, 0x0e,
	0x3a, 0x05, 0x18, 0xcd, 0xb7, 0x18, 0x68, 0x36, 0xa4, 0xf5, 0xb5, 0xad, 0x30, 0xf0, 0xdc, 0xe6,
	0x16, 0xe0, 0x96, 0x37, 0xa4, 0x6f, 0x4d, 0x25, 0x8b, 0x02, 0x35, 0x08, 0x4c, 0x16, 0xf4, 0x2b,
	0xb7, 0x0a, 0x41, 0xbf, 0x9a, 0x59, 0x80, 0xeb, 0x7e, 0x28, 0x83, 0x9a, 0xef, 0x30, 0xd0, 0x1e,
	0xf9, 0x02, 0x52, 0xcc, 0x66, 0x73, 0x63, 0x3e, 0x71, 0xe0, 0x42, 0x32, 0x8b, 0xc1, 0x55, 0x9a,
	0x85, 0x18, 0x5c, 0xdd, 0x44, 0xc0, 0x97, 0x22, 0x54, 0x80, 0x4d, 0x47, 0x10, 0x2f, 0xcc, 0x9f,
	0xb1, 0x9e, 0x4b, 0xd3, 0xce, 0x05, 0xcd, 0xa7, 0x0c, 0x74, 0x74, 0xe8, 0xfb, 0x2f, 0xa3, 0xf0,
	0xf9, 0xb4, 0x81, 0x16, 0x86, 0x7f, 0x9b, 0x32, 0x52, 0xfe, 0x11, 0x03, 0xcd, 0xe5, 0x7c, 0xc1,
	0x32, 0x92, 0xfb, 0x3f, 0xc7, 0xd1, 0xd4, 0x69, 0x7b, 0x3d, 0x72, 0x9b, 0xd9, 0x71, 0xb8, 0x92,
	0xf1, 0x95, 0x8c, 0xaf, 0x64, 0xfc, 0x88, 0x64, 0x7c, 0x0f, 0xed, 0x6d, 0x93, 0xed, 0x67, 0x65,
	0x36, 0x26, 0x31, 0xaa, 0x6d, 0x71, 0xd0, 0xaf, 0xcf, 0x4a, 0xfb, 0x93, 0xbd, 0x3d, 0xb6, 0x01,
	0xb4, 0xd0, 0x20, 0x81, 0x7b, 0x5b, 0x05, 0x37, 0xdf, 0x60, 0xa0, 0x7d, 0x0a, 0xe4, 0x66, 0xb2,
	0xad, 0x59, 0xd1, 0xa1, 0x7d, 0x8a, 0xd1, 0x8c, 0x6c, 0xfa, 0xa5, 0xe5, 0x64, 0x4b, 0x4a, 0x04,
	0x91, 0x1e, 0x9e, 0x53, 0x5e, 0x8f, 0x17, 0xec, 0xc9, 0xb6, 0x06, 0x01, 0xc8, 0xa4, 0xfa, 0xa0,
	0x94, 0x49, 0x55, 0x7e, 0x05, 0x3b, 0x96, 0x88, 0x1f, 0x32, 0xd0, 0x5e, 0x2d, 0xb2, 0x52, 0x1a,
	0xa0, 0x66, 0xd0, 0xe3, 0x29, 0xb1, 0x15, 0x4f, 0xae, 0x78, 0x72, 0xc5, 0x93, 0x47, 0xc4, 0x93,
	0x5f, 0x63, 0x20, 0x93, 0x31, 0xb1, 0x66, 0xe4, 0xb4, 0x1c, 0x3f, 0x76, 0x6d, 0x2f, 0xbd, 0x95,
	0x39, 0x28, 0x85, 0x00, 0x67, 0x03, 0xc8, 0x4d, 0x06, 0x49, 0x0c, 0x4a, 0xb7, 0x2c, 0xef, 0x11,
	0xe2, 0x8c, 0x54, 0xb4, 0xe0, 0x24, 0xd3, 0x96, 0x21, 0xcd, 0x17, 0xa3, 0x39, 0x06, 0x43, 0x72,
	0xc7, 0x84, 0x91, 0x8b, 0x1d, 0x0b, 0xc7, 0x5b, 0x1e, 0x65, 0xd4, 0x63, 0x4b, 0xa7, 0x06, 0xfd,
	0x3a, 0xe3, 0x68, 0xa7, 0xb2, 0x11, 0x6b, 0xc9, 0x00, 0xee, 0x12, 0x9d, 0x83, 0x01, 0xb8, 0xc0,
	0xb6, 0x75, 0x28, 0x4c, 0x07, 0x31, 0x9a, 0x44, 0x57, 0xec, 0xdd, 0xdc, 0x27, 0x9a, 0x4e, 0x2c,
	0x7a, 0x61, 0x2f, 0x80, 0x29, 0xf5, 0xfe, 0xd7, 0x53, 0x6d, 0x08, 0x66, 0x3e, 0x1d, 0x21, 0x06,
	0xf0, 0xa2, 0x38, 0x24, 0xae, 0xde, 0x63, 0x4b, 0x37, 0x0d, 0xfa, 0xf5, 0x71, 0x8a, 0xff, 0x39,
	0x17, 0x1a, 0xfc, 0x8a, 0x86, 0x0f, 0x14, 0x51, 0x8e, 0xd3, 0xe6, 0xe7, 0xc4, 0xa1, 0xf9, 0x22,
	0x34, 0xe5, 0xfa, 0x71, 0xb2, 0xda, 0xba, 0x76, 0x08, 0x42, 0xb4, 0xe6, 0xa1, 0x38, 0x59, 0x21,
	0xa3, 0x56, 0xed, 0x30, 0x91, 0x25, 0x4f, 0x1e, 0xf4, 0xeb, 0x93, 0x62, 0x4b, 0xf2, 0xd5, 0x8e,
	0xf0, 0x2a, 0xa9, 0x02, 0x3a, 0x71, 0xde, 0x49, 0x57, 0x04, 0x31, 0x5f, 0x6e, 0xa0, 0x19, 0xe2,
	0x94, 0x15, 0x46, 0x01, 0xf1, 0xab, 0x17, 0xf3, 0x4e, 0x1d, 0x94, 0xa4, 0x59, 0xd0, 0x4a, 0x0e,
	0x08, 0xc9, 0xb0, 0x84, 0x00, 0xf2, 0x3e, 0x61, 0x9b, 0x70, 0x91, 0xa3, 0x20, 0x05, 0xef, 0xd3,
	0x87, 0x60, 0xe0, 0x7a, 0xef, 0xfb, 0xd2, 0xf5, 0x1e, 0x9d, 0x7c, 0xe7, 0xd7, 0x7b, 0x6f, 0xca,
	0x4b, 0x72, 0xf5, 0x03, 0xe9, 0x1c, 0x4b, 0x27, 0x1a, 0x4d, 0x52, 0xab, 0x92, 0x3b, 0x34, 0x93,
	0xcb, 0x3d, 0x59, 0x2f, 0xc2, 0xb5, 0xbf, 0x92, 0x2e, 0xf7, 0x24, 0xc5, 0x84, 0x5e, 0xee, 0x49,
	0x8d, 0x58, 0xd9, 0x63, 0xfa, 0x3b, 0xcb, 0x69, 0x49, 0xc7, 0xc2, 0xe6, 0xab, 0x0d, 0x34, 0x9b,
	0xbe, 0xda, 0x30, 0x88, 0x62, 0x1a, 0xb2, 0x89, 0x6b, 0x7f, 0x3d, 0x05, 0xab, 0x67, 0xb0, 0x4f,
	0xd3, 0x08, 0xa2, 0x98, 0x04, 0xc3, 0x51, 0xfb, 0x8c, 0xdc, 0x2a, 0xd8, 0x67, 0x34, 0x48, 0x01,
	0x57, 0xdb, 0x94, 0x41, 0x49, 0xc6, 0x17, 0x75, 0x0f, 0x96, 0x51, 0x05, 0xfb, 0x81, 0x81, 0xf6,
	0xe8, 0xb6, 0x6b, 0x09, 0x69, 0x35, 0x1b, 0xe8, 0x2a, 0x3b, 0x8e, 0xa3, 0xda, 0x55, 0x44, 0x50,
	0xed, 0x17, 0xae, 0x8c, 0x5d, 0xdb, 0x3b, 0xd7, 0xe3, 0x01, 0x1d, 0x04, 0xe3, 0x62, 0x1c, 0x47,
	0x1c, 0x63, 0x02, 0x08, 0x30, 0x26, 0x0d, 0xe4, 0x96, 0x56, 0xe4, 0x17, 0x65, 0xfc, 0x42, 0x3f,
	0x32, 0xd0, 0x5c, 0x0e, 0xab, 0x29, 0xe3, 0x47, 0xba, 0x03, 0x7c, 0xa4, 0x9a, 0xb4, 0xf5, 0x29,
	0xe9, 0x17, 0xec, 0xce, 0xf6, 0xbf, 0xd1, 0xef, 0x23, 0x34, 0x79, 0xda, 0xb1, 0xe3, 0x5e, 0xe4,
	0x54, 0x55, 0xa2, 0xab, 0xb3, 0x42, 0x75, 0x56, 0x18, 0xe9, 0x59, 0xe1, 0x53, 0x06, 0x3a, 0xd2,
	0xa6, 0xbb, 0x8f, 0xa5, 0x7e, 0xb5, 0xec, 0x56, 0xcb, 0x65, 0x49, 0x11, 0x42, 0x3b, 0xb2, 0xbb,
	0xe9, 0xc9, 0x21, 0x67, 0x07, 0x92, 0xe8, 0x3a, 0xb0, 0x81, 0x17, 0x33, 0x04, 0x0d, 0x02, 0xcf,
	0xa3, 0xeb, 0x86, 0xcd, 0x04, 0xa2, 0xeb, 0xda, 0x45, 0x38, 0xcd, 0xf7, 0x1b, 0xe8, 0xa0, 0x84,
	0x8e, 0x45, 0xc7, 0xb1, 0x42, 0xd7, 0x93, 0x45, 0x44, 0x9f, 0x1b, 0xf4, 0xeb, 0xfb, 0x01, 0xd1,
	0x34, 0x6e, 0x2e, 0xab, 0x83, 0x7d, 0xb3, 0x96, 0x60, 0x30, 0x83, 0x48, 0xec, 0xfe, 0x76, 0x1e,
	0x2e, 0x10, 0xb0, 0xf0, 0xa0, 0x14, 0xb0, 0x00, 0x28, 0x78, 0x78, 0x01, 0x0b, 0x1a, 0x54, 0x65,
	0x94, 0x76, 0xef, 0x9e, 0x40, 0xbb, 0x18, 0xa9, 0xa7, 0x3d, 0xbb, 0xe2, 0xf5, 0x15, 0xaf, 0xaf,
	0x78, 0xfd, 0xa8, 0x78, 0xfd, 0x73, 0xd1, 0x6e, 0xc7, 0xb7, 0xd7, 0x3d, 0xc7, 0x62, 0xdc, 0x8a,
	0xdd, 0xbe, 0xdf, 0x36, 0xe8, 0xd7, 0x27, 0x4f, 0x91, 0x1e, 0xb6, 0x35, 0xb9, 0xbf, 0x11, 0x04,
	0x00, 0x96, 0x03, 0x47, 0x84, 0x30, 0x03, 0x34, 0x9b, 0x32, 0x4b, 0x31, 0x53, 0x12, 0x0d, 0xe8,
	0xff, 0xb9, 0xe4, 0xc8, 0xcc, 0x46, 0xc2, 0xdc, 0x48, 0xd7, 0x40, 0x3e, 0x9b, 0x93, 0x0b, 0xc9,
	0x6c, 0x2b, 0xb0, 0xe6, 0x45, 0xb4, 0x27, 0x85, 0x6a, 0x7b, 0x76, 0x47, 0xb2, 0xee, 0xfc, 0xbc,
	0x30, 0x63, 0xc2, 0x68, 0xf8, 0x66, 0x3e, 0x0e, 0x67, 0x14, 0x61, 0x75, 0x53, 0x0a, 0xc0, 0xc4,
	0xcc, 0xc3, 0xc0, 0xdc, 0x16, 0x8b, 0xe8, 0xa7, 0x66, 0x1e, 0xda, 0x4a, 0x3e, 0xc1, 0x01, 0x88,
	0x1f, 0x7e, 0x88, 0x71, 0xd6, 0xbc, 0xd2, 0x32, 0x2d, 0x34, 0x95, 0x8e, 0x89, 0x1c, 0xcf, 0xb1,
	0xb1, 0xc3, 0x82, 0xf5, 0x9f, 0x42, 0xca, 0xe0, 0xd0, 0xae, 0xf3, 0xb4, 0x87, 0x9b, 0x72, 0x24,
	0x10, 0x58, 0x05, 0x07, 0xc0, 0x98, 0xcf, 0x44, 0x93, 0xe9, 0x68, 0x1c, 0xdb, 0x31, 0x0d, 0xd2,
	0x1f, 0xa7, 0xce, 0xd7, 0x0c, 0xfd, 0x5a, 0xd2, 0xce, 0x9d, 0xaf, 0xc1, 0x70, 0xe0, 0x5b, 0xd6,
	0x16, 0xc6, 0x83, 0xe8, 0xee, 0xef, 0x4b, 0xd1, 0xdd, 0xc2, 0x2b, 0xdf, 0xb9, 0x3c, 0x7b, 0xbf,
	0x81, 0x66, 0x14, 0x44, 0x65, 0x94, 0x66, 0xff, 0x17, 0x42, 0x57, 0xa7, 0x1b, 0xa0, 0x92, 0x64,
	0x95, 0x24, 0xab, 0x24, 0xd9, 0x68, 0x24, 0x59, 0x80, 0x26, 0x38, 0x23, 0xe4, 0xf1, 0x76, 0x0a,
	0x17, 0x4a, 0x19, 0x62, 0x9b, 0x2e, 0x52, 0xfe, 0x5b, 0x70, 0xf7, 0x17, 0x11, 0x81, 0x45, 0xda,
	0xe6, 0xa3, 0x0b, 0xdd, 0x69, 0x19, 0xd6, 0x9d, 0x5b, 0xa4, 0x2f, 0xa1, 0x99, 0x94, 0x08, 0x25,
	0x79, 0xea, 0x94, 0x34, 0x0b, 0xbb, 0xb6, 0x60, 0x3f, 0xb8, 0x91, 0x77, 0x01, 0x3e, 0x8c, 0xd6,
	0xb8, 0x9b, 0xca, 0x9b, 0xcc, 0xaa, 0xfb, 0x36, 0x03, 0xed, 0x27, 0x09, 0xe3, 0x5a, 0x4e, 0xdb,
	0xf5, 0xc9, 0xf9, 0x4a, 0xa0, 0xe0, 0x4b, 0x92, 0xd1, 0xf9, 0x7c, 0xe0, 0x39, 0x27, 0xb3, 0x81,
	0xd4, 0xe8, 0x2c, 0xb5, 0x29, 0x46, 0xe7, 0x5c, 0xec, 0xc0, 0xe8, 0x1c, 0x69, 0xb1, 0x00, 0x31,
	0x90, 0x7d, 0x8b, 0x52, 0x1e, 0x6a, 0x8c, 0xcc, 0x84, 0x55, 0x5e, 0x59, 0xf5, 0x7f, 0x4c, 0xa0,
	0xdd, 0xa7, 0xdd, 0xc8, 0xb9, 0x64, 0x7b, 0x1e, 0xf5, 0x9d, 0xab, 0x44, 0x56, 0x25, 0xb2, 0x2a,
	0x91, 0x35, 0x22, 0x91, 0x65, 0xa3, 0xe9, 0x56, 0x64, 0xb7, 0x69, 0x75, 0x22, 0xa6, 0x90, 0x4f,
	0x08, 0xd9, 0xc7, 0x92, 0xbe, 0xd5, 0xa0, 0x95, 0xa9, 0xe4, 0x69, 0xf6, 0x31, 0x09, 0x06, 0x66,
	0x1f, 0x03, 0x40, 0xe6, 0x1b, 0x0c, 0x64, 0xb6, 0xd9, 0x0e, 0xa7, 0x41, 0x22, 0xa2, 0xbc, 0x3a,
	0x9e, 0x49, 0x12, 0xc0, 0x04, 0xd2, 0x5f, 0xe7, 0x7b, 0x42, 0xa2, 0x51, 0xa9, 0x51, 0x74, 0x00,
	0x50, 0xf0, 0xc3, 0x4b, 0x3b, 0x09, 0xd0, 0xfc, 0x7d, 0x03, 0x1d, 0xc4, 0x4e, 0xb3, 0x17, 0xb9,
	0xf1, 0x96, 0xe5, 0x05, 0x1d, 0x92, 0x54, 0x35, 0x58, 0xbf, 0xdb, 0x69, 0xc6, 0xc0, 0x24, 0x76,
	0x8b, 0x9e, 0xba, 0x35, 0x06, 0x7a, 0x96, 0x42, 0xde, 0x41, 0x00, 0x13, 0x32, 0x89, 0x01, 0x2f,
	0xaf, 0x17, 0x73, 0x03, 0x5e, 0xd1, 0xdc, 0xc0, 0x80, 0x87, 0xf3, 0x70, 0x99, 0xeb, 0xaa, 0xaf,
	0xf3, 0x41, 0x3d, 0xb5, 0x3b, 0x57, 0x01, 0x3e, 0x67, 0xa0, 0x23, 0x76, 0x18, 0x7a, 0x6e, 0x93,
	0xf2, 0x37, 0xe6, 0x2a, 0x8e, 0x9d, 0x58, 0x10, 0xc8, 0x5f, 0x9e, 0x83, 0x93, 0x2f, 0x72, 0x80,
	0xf4, 0x6d, 0xc5, 0x4b, 0x77, 0x0e, 0xfa, 0xf5, 0x83, 0xda, 0x1e, 0x2e, 0x9c, 0x9f, 0x94, 0x46,
	0xa6, 0x16, 0x4f, 0x08, 0x7c, 0xe9, 0xed, 0x02, 0x94, 0x0b, 0x2f, 0xbb, 0x02, 0x1d, 0x2a, 0x5c,
	0x56, 0x8f, 0xa5, 0x9b, 0x2c, 0x46, 0xf9, 0x9a, 0x73, 0xb1, 0xe7, 0xf8, 0xcd, 0x87, 0x70, 0xdb,
	0xf8, 0xaa, 0x2b, 0xd0, 0xb5, 0xdb, 0x5b, 0xbe, 0x65, 0x7c, 0x1d, 0x4f, 0x03, 0xaf, 0x23, 0x13,
	0x2c, 0x6b, 0x5e, 0x70, 0xde, 0x8e, 0x9d, 0x87, 0x76, 0xef, 0xfa, 0x6f, 0x0c, 0xb4, 0x47, 0xb7,
	0x35, 0xca, 0xa8, 0x17, 0x7d, 0x75, 0x0f, 0x9a, 0x10, 0x57, 0x6b, 0xa5, 0x15, 0x55, 0x5a, 0x51,
	0xa5, 0x15, 0x8d, 0x48, 0x2b, 0xea, 0xa0, 0x5d, 0x36, 0x49, 0x5c, 0x4d, 0x4b, 0x5e, 0x4e, 0x40,
	0xdf, 0xed, 0x45, 0xd2, 0x95, 0xb9, 0x7d, 0x90, 0x27, 0xe6, 0x6d, 0xc2, 0x5e, 0xe3, 0x28, 0xc0,
	0x13, 0xdb, 0xd9, 0x58, 0x73, 0x05, 0x8d, 0xb7, 0xdc, 0xc8, 0x69, 0x0a, 0x46, 0xe9, 0x27, 0x0c,
	0xfa, 0xf5, 0xf1, 0x93, 0x69, 0xa3, 0x90, 0x1c, 0x27, 0x6d, 0x02, 0x86, 0xdb, 0xac, 0x55, 0xab,
	0xc9, 0xed, 0xfe, 0xfb, 0xd5, 0xe4, 0xba, 0x08, 0x39, 0x7e, 0x2b, 0x0c, 0x5c, 0x3f, 0xb6, 0x9e,
	0x44, 0x0c, 0xcd, 0x42, 0x32, 0x7c, 0x91, 0x59, 0x9d, 0x62, 0xa3, 0xc8, 0xfb, 0x21, 0xa6, 0xe8,
	0xb4, 0xe5, 0x49, 0xdc, 0x14, 0xcd, 0x51, 0x81, 0x27, 0x4a, 0x9b, 0x9f, 0x04, 0xa6, 0x3b, 0x41,
	0xac, 0xd0, 0x0f, 0x79, 0xba, 0x13, 0x9a, 0xe9, 0x4e, 0x68, 0xa7, 0x3b, 0x61, 0xbe, 0xd2, 0x40,
	0x53, 0x5d, 0x3b, 0x6e, 0x6e, 0x58, 0x89, 0x4e, 0x94, 0x2c, 0x7c, 0x4c, 0x6c, 0xd3, 0x42, 0xa9,
	0x78, 0x71, 0xd2, 0xd5, 0x64, 0xe8, 0x05, 0xbb, 0x43, 0xb6, 0xf1, 0x4a, 0x8b, 0xf8, 0xa9, 0x12,
	0x6f, 0xc7, 0xb4, 0x23, 0x69, 0x17, 0xbc, 0x1d, 0x25, 0xd4, 0xe0, 0xce, 0xa2, 0x2b, 0x82, 0x98,
	0x3e, 0x42, 0xd9, 0xe0, 0x34, 0x99, 0xec, 0xd1, 0xa1, 0x24, 0xd0, 0x07, 0xcf, 0x9a, 0xf8, 0x83,
	0x73, 0x5c, 0xe0, 0xc1, 0xd3, 0x39, 0xb1, 0xf9, 0x02, 0x74, 0x35, 0x8b, 0x5d, 0x24, 0x09, 0x60,
	0xc5, 0x8b, 0xe0, 0x4c, 0xe9, 0xa0, 0x19, 0x2d, 0x92, 0x69, 0xae, 0x4b, 0x18, 0x16, 0x6b, 0xe0,
	0xfc, 0x93, 0x21, 0x00, 0xfc, 0x8a, 0xb5, 0x99, 0xbf, 0x6c, 0x20, 0x33, 0xad, 0xb5, 0xcb, 0xea,
	0x19, 0x08, 0x69, 0x5f, 0x8f, 0xe9, 0x9e, 0x8c, 0xa5, 0xd5, 0xa3, 0x45, 0x0c, 0x52, 0xf5, 0x5f,
	0x6a, 0x14, 0xd4, 0x7f, 0x15, 0x3b, 0x50, 0xff, 0x6d, 0x09, 0xd0, 0xfc, 0xdd, 0x61, 0xea, 0xff,
	0x8f, 0xa4, 0x62, 0x08, 0x22, 0x6d, 0x65, 0x50, 0xfe, 0x93, 0x57, 0x9a, 0xc6, 0x9b, 0x0a, 0xaf,
	0xf4, 0xc7, 0x05, 0xaf, 0x94, 0x7d, 0x32, 0xf8, 0x4a, 0xa5, 0x46, 0xe1, 0x95, 0xaa, 0xd8, 0x75,
	0x39, 0x4e, 0xf8, 0x2b, 0x15, 0xeb, 0xd9, 0xfd, 0x44, 0xf6, 0x0b, 0x16, 0xc8, 0xd8, 0xf9, 0x61,
	0xe4, 0x2d, 0x79, 0x1e, 0xb2, 0xff, 0x72, 0x4c, 0x7f, 0x92, 0x4c, 0xa6, 0x1b, 0xa1, 0x9f, 0x6c,
	0x76, 0x06, 0x65, 0x87, 0x16, 0x7e, 0x42, 0xfa, 0x86, 0x64, 0xb2, 0x84, 0x3a, 0x28, 0x35, 0x59,
	0x4a, 0x6d, 0x8a, 0xc9, 0x32, 0x17, 0x3b, 0x30, 0x59, 0xb6, 0xb5, 0x58, 0x48, 0x45, 0x86, 0x82,
	0xed, 0x55, 0x46, 0xfd, 0xf7, 0x15, 0x57, 0xa0, 0x6b, 0xb6, 0xb3, 0xeb, 0xfe, 0xa1, 0x9f, 0x59,
	0xe4, 0x4f, 0x27, 0xed, 0xd8, 0x32, 0x7e, 0x3a, 0xe2, 0x86, 0xac, 0x6c, 0xf9, 0x32, 0x52, 0xfa,
	0x5b, 0x06, 0x37, 0x10, 0x68, 0xb9, 0x45, 0x19, 0x89, 0xfe, 0x1b, 0x84, 0x76, 0x9f, 0xf6, 0x02,
	0x3b, 0x76, 0xfd, 0xce, 0x4a, 0xa3, 0x11, 0x04, 0x5e, 0x75, 0x36, 0xac, 0xce, 0x86, 0xd5, 0xd9,
	0x70, 0x44, 0x67, 0xc3, 0x77, 0x19, 0xa8, 0xd6, 0x66, 0xdb, 0xcf, 0x72, 0x43, 0x2b, 0x0c, 0x02,
	0xcf, 0xc2, 0xbd, 0x75, 0xdf, 0xc9, 0x52, 0x0c, 0xf2, 0x43, 0x4a, 0xba, 0x4d, 0xc3, 0x64, 0x9b,
	0xae, 0x91, 0x41, 0xe4, 0xcb, 0x92, 0x12, 0x0b, 0x70, 0x13, 0xd3, 0x5e, 0xa1, 0xb8, 0x70, 0xde,
	0x24, 0x30, 0xbe, 0x4c, 0x33, 0x03, 0xb4, 0x0d, 0x3f, 0x20, 0xdb, 0x86, 0xc1, 0xac, 0x0f, 0xeb,
	0x7a, 0x98, 0x25, 0xd9, 0x53, 0x2f, 0x67, 0x95, 0xd4, 0x7d, 0xe4, 0x7a, 0x38, 0xfd, 0xa1, 0x5c,
	0x0f, 0x2b, 0x78, 0xc0, 0xf5, 0x70, 0x08, 0xc1, 0xcc, 0x0d, 0x34, 0x21, 0xbc, 0x9a, 0x2c, 0x1f,
	0xa1, 0xa9, 0x3e, 0x20, 0xbb, 0x5e, 0xcf, 0x7e, 0x8b, 0xd7, 0xeb, 0x02, 0x06, 0x78, 0xbd, 0x9e,
	0xbd, 0x50, 0x4c, 0xed, 0x85, 0x9a, 0xd7, 0x55, 0x4a, 0xa1, 0x3b, 0x8b, 0x10, 0xa7, 0xb5, 0x92,
	0x08, 0x95, 0x44, 0xa8, 0x24, 0xc2, 0xe8, 0x0a, 0x28, 0x8b, 0xbc, 0x1a, 0x96, 0x1e, 0x20, 0x51,
	0x7e, 0x7c, 0x63, 0xf2, 0xaa, 0x03, 0xd7, 0xa8, 0x5c, 0x5e, 0x53, 0x6f, 0x60, 0x86, 0xf3, 0xa3,
	0xb4, 0xd4, 0xc0, 0xab, 0x0c, 0x34, 0xaf, 0x81, 0x4a, 0xeb, 0x65, 0x4d, 0xf2, 0x7a, 0x59, 0xca,
	0xb4, 0x72, 0xbd, 0xac, 0x7c, 0x34, 0xa0, 0x5e, 0x96, 0x42, 0x03, 0xab, 0x97, 0x75, 0x9f, 0x81,
	0x0e, 0x8a, 0x28, 0xda, 0xee, 0xbd, 0x4e, 0x4b, 0x7c, 0x05, 0xd4, 0xfe, 0xb8, 0x3a, 0xe8, 0xd7,
	0x6b, 0x9c, 0x96, 0xd3, 0xc9, 0x28, 0xf1, 0x4d, 0xdc, 0xac, 0x12, 0x23, 0x63, 0x12, 0xc9, 0xa9,
	0x71, 0x72, 0x28, 0xaa, 0xec, 0xcd, 0xbc, 0x24, 0x39, 0x85, 0x0b, 0x58, 0x5c, 0x6c, 0xa5, 0x87,
	0x79, 0x37, 0x8d, 0x7f, 0xbe, 0x1d, 0x4a, 0xde, 0x15, 0xcc, 0x74, 0xfe, 0x95, 0x86, 0x70, 0xd6,
	0xce, 0xc3, 0x91, 0x23, 0x7a, 0x39, 0x92, 0xd0, 0x7c, 0x8b, 0x44, 0x03, 0x89, 0xde, 0xec, 0xda,
	0x61, 0xe8, 0xfa, 0x1d, 0xcc, 0x8c, 0x98, 0x59, 0xd0, 0x70, 0x23, 0x88, 0xe2, 0x55, 0xd6, 0xc7,
	0xcc, 0x00, 0x82, 0xb8, 0xe1, 0x7d, 0x7a, 0xd2, 0x00, 0x6a, 0x68, 0x06, 0x10, 0xb4, 0x02, 0x8e,
	0xc5, 0x7c, 0xbb, 0x81, 0x8e, 0xe4, 0x22, 0xb0, 0xa8, 0xe3, 0x34, 0x31, 0x79, 0x8e, 0xd1, 0xfb,
	0x5a, 0x3d, 0x31, 0xd4, 0x25, 0x5b, 0x88, 0x9e, 0x19, 0x82, 0x11, 0xdc, 0xd7, 0xea, 0x29, 0xa3,
	0x28, 0xcd, 0x37, 0x19, 0xe8, 0x90, 0x88, 0x2d, 0x8e, 0xec, 0x76, 0xdb, 0x6d, 0x5a, 0xdc, 0x44,
	0x6e, 0x92, 0x05, 0xd5, 0x18, 0xf4, 0xeb, 0xf3, 0x9c, 0xb8, 0x0b, 0x74, 0x98, 0x68, 0x33, 0xbf,
	0x45, 0x25, 0x4d, 0x41, 0x26, 0xd2, 0x35, 0xcf, 0xe9, 0x92, 0xb1, 0x99, 0x11, 0x9a, 0x48, 0x15,
	0x14, 0x31, 0x20, 0x5b, 0xa7, 0x50, 0xd1, 0x61, 0x99, 0x63, 0x1f, 0xff, 0x2d, 0x68, 0x1e, 0x22,
	0x2e, 0x20, 0x86, 0x42, 0x3e, 0xda, 0x7c, 0x81, 0xa0, 0xc0, 0x31, 0x3b, 0x69, 0x4d, 0x9d, 0x6f,
	0xe7, 0xca, 0xdb, 0x17, 0x0d, 0x74, 0x38, 0x5d, 0xd6, 0x5d, 0xbb, 0xb9, 0xe1, 0xfa, 0x8e, 0xe5,
	0xfa, 0xb1, 0x13, 0xb5, 0xed, 0xa6, 0x93, 0x63, 0x02, 0xcd, 0xa6, 0x65, 0x8b, 0x7d, 0x95, 0xc2,
	0xad, 0xa4, 0x60, 0x09, 0x29, 0xe7, 0x07, 0xfd, 0xfa, 0x81, 0xfc, 0xfe, 0x84, 0xbc, 0x5b, 0xa1,
	0x95, 0x4d, 0x3f, 0xbb, 0x48, 0xf4, 0x81, 0xcd, 0x7c, 0x7c, 0xe6, 0xc7, 0x0d, 0x74, 0xa8, 0xd9,
	0xc3, 0x71, 0xd0, 0x75, 0x22, 0xcb, 0x8e, 0x63, 0xbb, 0xb9, 0xd1, 0x4d, 0x04, 0x87, 0x12, 0xa4,
	0x9e, 0x19, 0x23, 0x97, 0xd9, 0xe8, 0xc5, 0x6c, 0x30, 0x5d, 0x4f, 0x9a, 0x76, 0xae, 0xa8, 0xb2,
	0xf5, 0x54, 0x38, 0x13, 0x58, 0x4f, 0xcd, 0x5c, 0x6c, 0xb2, 0x56, 0x99, 0x7d, 0xf5, 0x32, 0x6a,
	0x95, 0xef, 0x33, 0xd0, 0xb4, 0xbc, 0xde, 0xca, 0x48, 0xe7, 0x67, 0x0c, 0x74, 0xcd, 0x76, 0x16,
	0x68, 0x19, 0x69, 0xff, 0xfe, 0x04, 0x1a, 0x3b, 0xed, 0x05, 0x97, 0xaa, 0xca, 0x61, 0x95, 0xde,
	0x5e, 0xe9, 0xed, 0x23, 0x2e, 0x3c, 0xdb, 0xf6, 0x82, 0x4b, 0xac, 0xde, 0x97, 0xbf, 0x6e, 0xfb,
	0x2d, 0x2e, 0x87, 0xc4, 0xc2, 0xb3, 0xe9, 0xf6, 0x5c, 0x21, 0x63, 0x32, 0x86, 0x02, 0x14, 0xe9,
	0x1c, 0x34, 0xb2, 0x22, 0xad, 0xc3, 0x63, 0x06, 0x68, 0x8f, 0x80, 0x81, 0xeb, 0xcf, 0x3c, 0x4c,
	0x6d, 0x26, 0x23, 0x41, 0x50, 0x9c, 0x8f, 0x2b, 0x93, 0xe7, 0x9e, 0x21, 0x2e, 0xc1, 0x72, 0x65,
	0xaf, 0x00, 0x8f, 0xee, 0x05, 0x76, 0xcb, 0x5a, 0xb7, 0x3d, 0xdb, 0x6f, 0x3a, 0x51, 0xa2, 0x2a,
	0x53, 0xbd, 0x7d, 0x85, 0x29, 0xa4, 0x04, 0xf6, 0x6c, 0x60, 0xb7, 0x96, 0xd8, 0x10, 0xa2, 0x2b,
	0x2b, 0x4f, 0x2e, 0x63, 0x91, 0x35, 0x52, 0x15, 0x4d, 0x68, 0x3e, 0x4f, 0x75, 0x62, 0xdc, 0x27,
	0x28, 0x1c, 0x97, 0x1e, 0x56, 0xc5, 0x34, 0xf3, 0x57, 0xf3, 0x6e, 0x0c, 0x59, 0xe2, 0xa2, 0xa3,
	0xf2, 0x54, 0x23, 0xba, 0x2d, 0x7c, 0xb5, 0x81, 0xf6, 0xba, 0x3e, 0x8e, 0x93, 0xb7, 0x90, 0x7c,
	0x33, 0xa5, 0xee, 0x7c, 0x66, 0xcb, 0x5a, 0x61, 0xa3, 0x56, 0x1a, 0xb4, 0xfa, 0xb0, 0xf0, 0x9b,
	0x2b, 0x27, 0xd7, 0xa6, 0xe9, 0x94, 0x34, 0x18, 0x01, 0x29, 0xe9, 0x88, 0x95, 0x30, 0x53, 0x46,
	0xde, 0x63, 0x90, 0xcb, 0x84, 0x4b, 0xe5, 0xae, 0x27, 0xf7, 0x31, 0x03, 0xed, 0xcf, 0xfd, 0x46,
	0x25, 0x2d, 0xf9, 0x34, 0x75, 0x3a, 0x88, 0x2e, 0xd9, 0x51, 0xcb, 0xf5, 0x3b, 0xcb, 0x9e, 0x8d,
	0x71, 0x25, 0xda, 0x2b, 0xd1, 0x5e, 0x89, 0xf6, 0x11, 0xe6, 0x7f, 0xcd, 0xb6, 0x9f, 0xd5, 0x4c,
	0xf6, 0x9f, 0xd5, 0xc2, 0xcd, 0x90, 0x08, 0xf5, 0x2b, 0x59, 0xfe, 0x57, 0xb8, 0x3f, 0x4f, 0xae,
	0x2d, 0x37, 0x84, 0xfc, 0xaf, 0x3a, 0x68, 0x98, 0xff, 0x55, 0x02, 0xc7, 0xcd, 0x90, 0x58, 0x02,
	0x65, 0x40, 0xb7, 0x45, 0xc4, 0xf8, 0x95, 0xcc, 0x12, 0x08, 0xa1, 0xc8, 0x93, 0x5c, 0x93, 0x33,
	0x25, 0x7c, 0xb0, 0x19, 0x69, 0xc2, 0x15, 0x5a, 0xfa, 0x54, 0x81, 0xea, 0x86, 0x1e, 0xb6, 0x9c,
	0x7b, 0xa9, 0x10, 0xbf, 0x92, 0x59, 0x95, 0x20, 0xe8, 0x6a, 0xe3, 0xec, 0xda, 0xa9, 0x7b, 0x43,
	0xc1, 0xaa, 0x94, 0x87, 0x04, 0xca, 0x70, 0x09, 0x4b, 0xe8, 0xe1, 0x53, 0xf7, 0x86, 0xe6, 0xfd,
	0x06, 0x3a, 0xac, 0x20, 0xd8, 0xf4, 0x6c, 0xdf, 0x0a, 0x23, 0x37, 0x88, 0xdc, 0x78, 0x8b, 0x98,
	0xde, 0xae, 0xa4, 0xc6, 0x01, 0x89, 0x94, 0xbb, 0x3c, 0xdb, 0x6f, 0xb0, 0x61, 0xdc, 0x38, 0x50,
	0x8c, 0x0e, 0x18, 0x07, 0xda, 0xf9, 0xf8, 0xcc, 0x7f, 0x81, 0x76, 0x5f, 0x0c, 0xb0, 0x75, 0xb1,
	0xe7, 0xf4, 0x1c, 0x20, 0xf8, 0x17, 0x32, 0xc1, 0x0f, 0xa1, 0x9f, 0x11, 0xe0, 0x67, 0x24, 0x83,
	0x13, 0xc9, 0x4f, 0xaa, 0x9d, 0x08, 0x0d, 0x98, 0x67, 0x1f, 0x80, 0x48, 0x41, 0x44, 0xfa, 0x45,
	0x01, 0x00, 0xa4, 0xde, 0xfd, 0x9e, 0x9c, 0x7a, 0x17, 0xce, 0xbc, 0xf3, 0xa8, 0xf4, 0xdf, 0x34,
	0xd0, 0x7c, 0xfe, 0x63, 0x94, 0x51, 0x38, 0x92, 0x64, 0xc1, 0xba, 0xc7, 0x2f, 0x23, 0xb1, 0xf7,
	0x8f, 0xa3, 0xbd, 0xb7, 0x7b, 0xc1, 0xba, 0xed, 0x2d, 0xfa, 0xb6, 0xb7, 0x15, 0xbb, 0x4d, 0x5c,
	0xe5, 0x03, 0xab, 0xe4, 0x79, 0x25, 0xcf, 0x47, 0x2a, 0xcf, 0x5d, 0xb5, 0x8a, 0x6d, 0xe6, 0xe4,
	0xaa, 0xdd, 0x9d, 0x3b, 0x3f, 0x34, 0xbe, 0xdf, 0x40, 0xfb, 0x71, 0x1c, 0xf5, 0x9a, 0x71, 0x2f,
	0x72, 0x5a, 0x16, 0xde, 0xc2, 0x5e, 0xd0, 0x61, 0xb9, 0xb5, 0xb2, 0x8a, 0xb6, 0x87, 0x33, 0x9f,
	0xbe, 0x6c, 0xe4, 0x1a, 0x19, 0x48, 0x67, 0x27, 0x47, 0xe7, 0x39, 0x7d, 0x9f, 0x70, 0x99, 0x93,
	0x3b, 0x0d, 0x30, 0x1a, 0x60, 0x3d, 0x1a, 0xe2, 0x19, 0x58, 0xf0, 0xec, 0x65, 0x64, 0xa6, 0xbf,
	0xb7, 0x0b, 0x4d, 0x51, 0x92, 0x9f, 0x11, 0x54, 0x6c, 0xb4, 0x62, 0xa3, 0x15, 0x1b, 0x1d, 0x2d,
	0x1b, 0x7d, 0x83, 0x81, 0x92, 0x15, 0x1a, 0x47, 0x81, 0xc7, 0xef, 0x43, 0xd3, 0x63, 0x91, 0xc0,
	0xd5, 0x96, 0xe9, 0x98, 0xf4, 0x2a, 0x14, 0x37, 0x43, 0xf2, 0x4d, 0x89, 0x31, 0x4c, 0xea, 0xa3,
	0xa7, 0xa6, 0xe3, 0xd9, 0xfe, 0x50, 0x70, 0x03, 0x0b, 0x54, 0x53, 0x41, 0x0c, 0x94, 0xe4, 0x07,
	0x24, 0x25, 0x59, 0xe2, 0x15, 0x3b, 0x67, 0xea, 0x24, 0x51, 0xb4, 0x74, 0xa8, 0x50, 0xab, 0xc0,
	0x4a, 0x4a, 0x29, 0x4b, 0x14, 0x0d, 0x1b, 0xc5, 0xac, 0x26, 0x32, 0x42, 0x18, 0x73, 0x2e, 0xc1,
	0x99, 0x4d, 0xb4, 0x2b, 0x39, 0x38, 0xa4, 0x92, 0x44, 0x2e, 0xa3, 0x9b, 0x3d, 0x25, 0x5d, 0x6a,
	0xd9, 0x4f, 0x81, 0xc9, 0x09, 0xe0, 0x60, 0xa9, 0x5d, 0xcc, 0xc6, 0x9a, 0x2f, 0x40, 0x28, 0x3b,
	0x9d, 0x64, 0x95, 0x74, 0xa7, 0x85, 0x39, 0xc8, 0xc1, 0x80, 0xc6, 0x0a, 0xa5, 0xbf, 0x84, 0x58,
	0x21, 0x0e, 0x0b, 0x62, 0x85, 0xd2, 0x53, 0x0d, 0x2d, 0xf4, 0xa1, 0xfd, 0x2a, 0x65, 0x14, 0x37,
	0x6f, 0xfa, 0x67, 0xc8, 0xa4, 0xc4, 0xae, 0x6d, 0xe1, 0xd8, 0xe9, 0x56, 0x12, 0xa7, 0x92, 0x38,
	0x95, 0xc4, 0x19, 0xa9, 0xc4, 0x59, 0x43, 0x13, 0xb6, 0x67, 0x47, 0xdd, 0xd4, 0xbb, 0x88, 0xa6,
	0x76, 0x24, 0x0b, 0x71, 0x31, 0x69, 0xcf, 0x9c, 0x89, 0xd8, 0x42, 0x14, 0x07, 0xc3, 0x6d, 0xc5,
	0x47, 0x9b, 0x1d, 0x34, 0x63, 0xf7, 0xe2, 0xc0, 0x0f, 0xba, 0x41, 0x0f, 0x27, 0xaa, 0x73, 0xec,
	0x74, 0x99, 0x91, 0x8d, 0xb0, 0xec, 0xc5, 0xac, 0x93, 0xee, 0x7b, 0xce, 0xb2, 0x15, 0x30, 0x18,
	0x27, 0x28, 0xc1, 0x99, 0x97, 0xd0, 0xbe, 0xf5, 0x4e, 0x68, 0xd9, 0xde, 0x25, 0x7b, 0x2b, 0x61,
	0xbd, 0xdd, 0xe4, 0x15, 0x5b, 0x5d, 0xa7, 0x45, 0x8c, 0x6b, 0x63, 0x64, 0x03, 0xcf, 0x2e, 0xdd,
	0xde, 0x58, 0x24, 0x03, 0x96, 0x69, 0xff, 0xaa, 0xd3, 0xe2, 0x55, 0x9b, 0xf4, 0xe0, 0xc0, 0x90,
	0xb8, 0xde, 0x09, 0x65, 0x78, 0xf3, 0x75, 0x06, 0x9a, 0x59, 0xef, 0x84, 0xb6, 0x8d, 0x69, 0x0a,
	0x62, 0x27, 0x76, 0x22, 0xcc, 0x22, 0x6e, 0x33, 0xe3, 0xd5, 0xd2, 0xed, 0x0d, 0xdb, 0x4e, 0x4b,
	0xe2, 0x65, 0xa3, 0xc8, 0x5e, 0x20, 0xaf, 0x61, 0x89, 0x20, 0xe0, 0x3d, 0xfc, 0x35, 0x28, 0xa8,
	0xc1, 0x6b, 0x58, 0x97, 0xe0, 0xcc, 0xe7, 0xa2, 0xdd, 0x59, 0xa6, 0x61, 0xca, 0xbf, 0x68, 0x4a,
	0x48, 0x92, 0xa1, 0x33, 0xcd, 0x2d, 0x9c, 0x32, 0xae, 0xba, 0xc8, 0xb8, 0x74, 0x1c, 0x6b, 0xb2,
	0x29, 0x42, 0x98, 0x5f, 0x33, 0xd0, 0xb5, 0x2d, 0x3b, 0xb6, 0xad, 0x26, 0x29, 0xa4, 0x42, 0x6f,
	0x4e, 0x9b, 0x81, 0xef, 0x3b, 0xcd, 0xd8, 0xb2, 0xb1, 0xcf, 0x0b, 0x31, 0xb0, 0x68, 0xdc, 0xcc,
	0x7b, 0x6e, 0x11, 0xfb, 0xe7, 0x6d, 0xbf, 0x43, 0x03, 0xaa, 0xec, 0x41, 0xbf, 0xbe, 0x70, 0xd2,
	0x8e, 0xed, 0x65, 0x82, 0x66, 0x45, 0xc0, 0xb2, 0x88, 0xfd, 0xac, 0x5e, 0xc3, 0xe5, 0x7e, 0xfd,
	0xa9, 0x8c, 0xe5, 0x6d, 0x6b, 0x4e, 0x91, 0x70, 0x02, 0x52, 0x8c, 0xde, 0xfc, 0x4b, 0x03, 0x3d,
	0x21, 0x17, 0xb3, 0x17, 0x04, 0x21, 0xb9, 0x99, 0xe3, 0x8f, 0x64, 0xc2, 0xd0, 0x72, 0xea, 0xc0,
	0x9f, 0x85, 0x96, 0xdf, 0x33, 0xe8, 0xd7, 0xaf, 0xd3, 0x3f, 0xd4, 0x59, 0x86, 0x4b, 0x7c, 0xb2,
	0x9f, 0x1d, 0xf2, 0x64, 0xea, 0xfc, 0xe2, 0xe3, 0x5d, 0xd7, 0xda, 0xde, 0x44, 0xe6, 0xf3, 0xd1,
	0x14, 0xcb, 0xbf, 0x7a, 0xdb, 0xfa, 0x56, 0xec, 0x58, 0x36, 0x26, 0x71, 0xc3, 0x63, 0x34, 0xfc,
	0x99, 0xee, 0x51, 0xd2, 0xb3, 0x28, 0x84, 0x3f, 0x4b, 0x10, 0x9a, 0x94, 0xad, 0x0c, 0xc4, 0xfc,
	0x65, 0x03, 0x1d, 0x64, 0xa3, 0xb3, 0x48, 0x59, 0x16, 0xf4, 0x48, 0xe2, 0xd1, 0x6b, 0x7b, 0xc8,
	0x64, 0x24, 0xda, 0x96, 0x4e, 0x96, 0xc6, 0x06, 0xd2, 0xa8, 0x47, 0x12, 0xe9, 0xce, 0xdd, 0x4a,
	0x8b, 0x50, 0x81, 0x68, 0x5b, 0x27, 0x0f, 0x97, 0xf9, 0x49, 0x03, 0x1d, 0xe8, 0x44, 0x76, 0xd3,
	0x69, 0xf7, 0x3c, 0x2b, 0x72, 0x70, 0x6c, 0x47, 0xb1, 0xb8, 0x2f, 0xf7, 0x92, 0x8f, 0x98, 0xc5,
	0x9f, 0xde, 0xce, 0x86, 0x9e, 0xa7, 0x23, 0xa5, 0xad, 0xb9, 0x9a, 0xd0, 0x9d, 0x3b, 0xe4, 0x72,
	0xbf, 0x7e, 0x13, 0xa5, 0xbb, 0x60, 0x42, 0x40, 0x76, 0x27, 0x0f, 0x95, 0xf9, 0x6c, 0xb4, 0xdb,
	0x25, 0xfc, 0xa7, 0x17, 0x07, 0x56, 0xd7, 0xc1, 0x1b, 0xb5, 0x7d, 0xe4, 0xcd, 0x11, 0xcb, 0xf6,
	0x4a, 0xc2, 0x76, 0x7a, 0x71, 0xb0, 0xea, 0xe0, 0x0d, 0xbe, 0x6b, 0xe1, 0x78, 0x60, 0xd9, 0x76,
	0x05, 0x80, 0x44, 0x60, 0xb9, 0x9d, 0x6e, 0x98, 0x72, 0xf5, 0x39, 0x82, 0x97, 0x08, 0xac, 0x95,
	0x4e, 0x37, 0xcc, 0x98, 0x3a, 0x13, 0x58, 0xc2, 0x50, 0x20, 0xb0, 0xdc, 0x6c, 0xac, 0xf9, 0x62,
	0x34, 0xe3, 0x86, 0x16, 0x2b, 0xbd, 0x92, 0x46, 0xd3, 0xd4, 0x0a, 0x37, 0x07, 0x89, 0x29, 0x59,
	0x69, 0xd0, 0x12, 0x0f, 0x3c, 0x7a, 0x86, 0xb1, 0x38, 0x05, 0x1b, 0x88, 0x29, 0x71, 0x43, 0x00,
	0x96, 0xbc, 0xaa, 0xae, 0xdd, 0xb4, 0x6c, 0x12, 0x8e, 0x1d, 0xbb, 0x5d, 0xa7, 0xb6, 0x9f, 0x88,
	0x13, 0xf2, 0xaa, 0x56, 0xed, 0xe6, 0x62, 0xd2, 0x71, 0xc1, 0xed, 0x0a, 0x29, 0x88, 0xe1, 0x78,
	0xf0, 0xaa, 0xba, 0x02, 0x80, 0xf9, 0x52, 0x03, 0xcd, 0x24, 0x63, 0x3d, 0xb7, 0xeb, 0xc6, 0x16,
	0x3b, 0x00, 0xd5, 0xe6, 0x61, 0xa0, 0xfd, 0xea, 0xe2, 0xf2, 0xd9, 0xa4, 0x3f, 0x3d, 0x5c, 0x65,
	0xcf, 0xb7, 0x6a, 0x37, 0xc5, 0x0e, 0xfe, 0x7c, 0x0a, 0x4a, 0xf0, 0x7c, 0x5d, 0x08, 0x96, 0x10,
	0x31, 0x9d, 0x40, 0x74, 0x83, 0x4d, 0x27, 0xa3, 0xe1, 0x00, 0xa1, 0xa1, 0x2e, 0xd0, 0xb0, 0x1a,
	0x6c, 0x3a, 0x0a, 0x1d, 0x24, 0x7d, 0xc4, 0xaa, 0xdd, 0x4c, 0x3a, 0x39, 0x19, 0x47, 0x39, 0x19,
	0x22, 0x52, 0x90, 0x3e, 0xa2, 0x0b, 0x80, 0xcc, 0x8b, 0x68, 0x32, 0xf4, 0x7a, 0x1d, 0xd7, 0xb7,
	0xe2, 0x9e, 0xef, 0xfa, 0x9d, 0xda, 0x41, 0x98, 0xe2, 0xa8, 0x41, 0x3a, 0x1b, 0x51, 0x10, 0x3a,
	0x51, 0xec, 0x3a, 0x98, 0xe6, 0x04, 0xa6, 0xad, 0x17, 0x08, 0x04, 0xcf, 0x09, 0x0c, 0x10, 0x81,
	0x97, 0x1f, 0x0a, 0xe3, 0x13, 0x56, 0x15, 0xb5, 0xac, 0xa6, 0xd7, 0xc3, 0x09, 0x33, 0xc4, 0x8e,
	0xd3, 0xaa, 0x1d, 0x22, 0x1f, 0x96, 0xb0, 0xaa, 0xf3, 0x27, 0x97, 0x69, 0xcf, 0x9a, 0x43, 0x64,
	0x36, 0x63, 0x55, 0x12, 0x04, 0x60, 0x55, 0x51, 0x4b, 0x00, 0x31, 0xdf, 0x63, 0xa0, 0xfd, 0xb8,
	0x17, 0x86, 0x41, 0x14, 0x3b, 0x2d, 0xab, 0x45, 0x4a, 0x97, 0x51, 0x07, 0x7a, 0xd7, 0xc1, 0xb5,
	0xc3, 0xba, 0xca, 0x66, 0xd4, 0x75, 0x3e, 0x5b, 0xc4, 0xd4, 0x50, 0x98, 0xa2, 0x10, 0x86, 0xb8,
	0x8e, 0x68, 0x28, 0xcc, 0x9b, 0x03, 0x1a, 0x0a, 0xf5, 0x68, 0xcc, 0x0f, 0x1a, 0xe8, 0x20, 0xc7,
	0xc0, 0x76, 0x85, 0x78, 0x02, 0xaa, 0x17, 0x9d, 0x80, 0xee, 0x18, 0xf4, 0xeb, 0xf3, 0x19, 0x85,
	0x74, 0xdb, 0xc0, 0x03, 0xd1, 0xcd, 0x32, 0x91, 0xea, 0x14, 0xc0, 0x37, 0x16, 0xe7, 0x22, 0x33,
	0xdf, 0x6f, 0x20, 0xde, 0x9d, 0xd6, 0x35, 0xd8, 0xb0, 0xa3, 0xd6, 0x25, 0x3b, 0x72, 0x70, 0xed,
	0x08, 0xdc, 0x35, 0xb4, 0xa0, 0xc1, 0x99, 0xb4, 0x9b, 0xbc, 0xd0, 0xa7, 0x0f, 0xfa, 0xf5, 0x5a,
	0x46, 0xae, 0x34, 0x82, 0xbb, 0x2d, 0xe5, 0x4f, 0x02, 0x42, 0x0d, 0x70, 0x0e, 0x22, 0xf3, 0xc3,
	0x06, 0x3a, 0xd0, 0xc3, 0x4e, 0x44, 0xb3, 0x88, 0x3a, 0x2d, 0xcb, 0x0b, 0x3a, 0x24, 0x81, 0x8a,
	0x8b, 0x63, 0xb7, 0x89, 0x6b, 0x47, 0xa1, 0x41, 0xe5, 0x4e, 0xec, 0x44, 0x27, 0xe9, 0xc8, 0xb3,
	0x41, 0x67, 0x2d, 0xb6, 0x09, 0x1b, 0x5b, 0x3a, 0x9b, 0x10, 0xab, 0xf6, 0x51, 0x1c, 0x5c, 0x14,
	0x14, 0x4c, 0x04, 0xa8, 0xed, 0xe5, 0x60, 0x22, 0xa9, 0x4d, 0x12, 0xce, 0x2e, 0xd6, 0xec, 0x7e,
	0x2d, 0xcd, 0x9a, 0x70, 0x2d, 0xb4, 0xb5, 0x88, 0x07, 0xe5, 0xa5, 0xdb, 0x1b, 0xbc, 0x5e, 0x37,
	0xd9, 0x30, 0x62, 0x8b, 0x20, 0xdb, 0x25, 0xd4, 0x60, 0xc3, 0xac, 0x77, 0x42, 0xa1, 0x40, 0x77,
	0x5b, 0x30, 0xf6, 0xbc, 0x8e, 0x12, 0x70, 0x24, 0x9f, 0x80, 0x9d, 0xdb, 0x7b, 0x5e, 0x66, 0xa0,
	0x3d, 0xdc, 0x5a, 0x22, 0x38, 0x58, 0x7d, 0x7f, 0x2e, 0xcf, 0xea, 0x42, 0xbc, 0xec, 0xf8, 0x4f,
	0xee, 0x5e, 0x75, 0x5c, 0x36, 0xbe, 0xe8, 0xbd, 0xab, 0x66, 0x2e, 0xca, 0xb0, 0xe6, 0x2a, 0x7a,
	0x3c, 0x39, 0xb6, 0xe0, 0xda, 0xbf, 0x9e, 0x26, 0xd3, 0x4e, 0x66, 0xaa, 0x6b, 0xd2, 0x4c, 0x8f,
	0x60, 0xe4, 0x5f, 0xcc, 0x8f, 0x60, 0x14, 0x02, 0x1c, 0xc1, 0x68, 0x93, 0xf9, 0x46, 0x03, 0xed,
	0xb5, 0x53, 0x53, 0xbf, 0x45, 0x4f, 0x4a, 0x7e, 0xd0, 0x72, 0x70, 0xed, 0xb5, 0xd3, 0xd0, 0xc7,
	0x3d, 0xbb, 0x10, 0x20, 0xc8, 0xcf, 0x05, 0x2d, 0x87, 0xba, 0x3c, 0xa8, 0xed, 0x82, 0xff, 0x98,
	0x16, 0x35, 0x38, 0xa9, 0xd8, 0x2a, 0xb8, 0x79, 0x09, 0x4d, 0x71, 0x40, 0x4a, 0xcd, 0x2b, 0xa7,
	0x61, 0x26, 0xe2, 0x6c, 0x56, 0x42, 0x08, 0xc9, 0x23, 0x0f, 0x9a, 0x84, 0x95, 0x24, 0xa1, 0x02,
	0xd2, 0xc4, 0x06, 0x30, 0xe6, 0x7d, 0x06, 0xda, 0xc3, 0x87, 0x63, 0xbf, 0x1b, 0xb2, 0xe9, 0xbf,
	0x3d, 0x05, 0xb3, 0x2e, 0x67, 0x73, 0xad, 0x9d, 0x5b, 0x6d, 0x10, 0x12, 0x88, 0x1d, 0x53, 0x69,
	0x16, 0xbe, 0xb5, 0x0e, 0x2f, 0xb0, 0x63, 0x66, 0x03, 0xd6, 0xfc, 0x6e, 0x48, 0xe9, 0xd9, 0x42,
	0xd3, 0x76, 0xe8, 0x5a, 0x76, 0xb3, 0xe9, 0x60, 0x4c, 0x92, 0x3e, 0xe1, 0xda, 0xf7, 0xa7, 0xa4,
	0x37, 0xd1, 0x58, 0x59, 0x24, 0xfd, 0x64, 0xf7, 0x13, 0xc1, 0x0a, 0x9a, 0x30, 0x17, 0xac, 0x32,
	0x2e, 0xf8, 0x2a, 0x42, 0x57, 0x00, 0x22, 0x0b, 0x83, 0x2d, 0xcd, 0x44, 0x87, 0x5f, 0xb7, 0xb1,
	0xc3, 0xde, 0xc5, 0x4b, 0xa4, 0x85, 0x41, 0x17, 0xe8, 0x49, 0x36, 0x88, 0x2f, 0x0c, 0xb5, 0x1d,
	0xcb, 0x36, 0x28, 0x09, 0x35, 0x58, 0x18, 0x4d, 0x15, 0xdc, 0xdc, 0x40, 0x13, 0x0c, 0x90, 0x92,
	0xf2, 0x80, 0x14, 0xa6, 0x4b, 0xa7, 0x24, 0x24, 0x10, 0x73, 0x00, 0xff, 0x2d, 0x04, 0xcb, 0x88,
	0x18, 0x80, 0x39, 0xa0, 0xc9, 0x47, 0x27, 0x9b, 0x3d, 0x35, 0x2c, 0x53, 0x4f, 0xd4, 0x17, 0x05,
	0xbe, 0x83, 0x6b, 0xaf, 0x9a, 0x86, 0xd6, 0x5d, 0xa6, 0x86, 0x24, 0x30, 0xcf, 0x09, 0x7c, 0x87,
	0x26, 0xc0, 0x91, 0x1a, 0x85, 0x04, 0x38, 0x2a, 0x46, 0x70, 0x48, 0x6e, 0x4a, 0x80, 0xe4, 0xde,
	0x30, 0xef, 0xe4, 0x85, 0x6b, 0x2f, 0x9d, 0x86, 0xf7, 0x86, 0xfa, 0x43, 0x1d, 0x55, 0x07, 0xf4,
	0x7d, 0x82, 0x3a, 0x90, 0x3b, 0x0d, 0x50, 0x07, 0xf4, 0xc7, 0x39, 0x6c, 0x46, 0x68, 0xb7, 0xb4,
	0x4a, 0x5e, 0x36, 0x0d, 0x6b, 0x59, 0x82, 0xf5, 0x41, 0x0e, 0xf9, 0xf2, 0xca, 0xa8, 0x73, 0x42,
	0xf4, 0x4b, 0x62, 0xb2, 0x05, 0x16, 0x43, 0x17, 0x4d, 0x32, 0xcd, 0xc5, 0xed, 0xda, 0x1d, 0x07,
	0xd7, 0x5e, 0x47, 0xa7, 0x9c, 0x85, 0xca, 0xd1, 0x4a, 0xd2, 0x49, 0xd5, 0x3e, 0xa1, 0x01, 0x73,
	0xb5, 0x0f, 0x20, 0x01, 0x6a, 0x5f, 0x4b, 0x18, 0x9f, 0x30, 0x25, 0xfa, 0xbb, 0xdb, 0x89, 0xd8,
	0x33, 0xde, 0x27, 0x31, 0xa5, 0x93, 0x69, 0x3f, 0x67, 0x4a, 0xa0, 0x49, 0x60, 0x4a, 0x12, 0x2a,
	0x98, 0x21, 0x0d, 0xc0, 0x98, 0xe7, 0xd1, 0xd5, 0x54, 0xf9, 0xc1, 0xb5, 0x97, 0xd3, 0x09, 0x77,
	0xc3, 0x52, 0x74, 0x34, 0x7d, 0x16, 0xfd, 0x1f, 0x0b, 0x46, 0x53, 0xda, 0x00, 0x64, 0x19, 0x6b,
	0x33, 0x9f, 0x89, 0xc6, 0x58, 0x86, 0x74, 0x5c, 0xfb, 0xe5, 0x69, 0x7d, 0xfa, 0xf5, 0x1b, 0x06,
	0xfd, 0xfa, 0x18, 0xfb, 0x21, 0xc8, 0xc8, 0x14, 0x4e, 0xc4, 0x9b, 0x21, 0x4b, 0x3e, 0x8a, 0x58,
	0x6e, 0x04, 0xd7, 0x1e, 0x9c, 0x82, 0x1f, 0x45, 0x28, 0x76, 0x01, 0xea, 0x73, 0x24, 0x0d, 0x58,
	0xad, 0xcf, 0x41, 0x90, 0xe8, 0xea, 0x73, 0x90, 0xf1, 0xe6, 0x0b, 0x10, 0xca, 0x9c, 0xc5, 0x71,
	0xed, 0x3b, 0xd2, 0xd5, 0x44, 0xea, 0xde, 0xcb, 0x2a, 0x97, 0xb0, 0x5f, 0xc2, 0xd5, 0x04, 0x87,
	0x85, 0x95, 0x4b, 0xd2, 0x91, 0x24, 0x31, 0x43, 0x87, 0xe8, 0x10, 0x16, 0xe7, 0xdf, 0xe9, 0x6d,
	0xcb, 0xbf, 0x9a, 0xd6, 0xdd, 0x2c, 0x49, 0x17, 0xe7, 0x24, 0x38, 0x74, 0x9f, 0xb6, 0x4b, 0xc8,
	0xcb, 0x90, 0x37, 0x07, 0xf0, 0x95, 0xeb, 0x68, 0x91, 0x10, 0x56, 0xc5, 0xe0, 0xc5, 0xbb, 0xa0,
	0xef, 0x4a, 0x17, 0x51, 0xd2, 0x0d, 0x0b, 0x65, 0x55, 0x52, 0xa3, 0xc0, 0xaa, 0x54, 0x8c, 0x80,
	0x55, 0x75, 0x24, 0x40, 0xf3, 0x7e, 0x03, 0x31, 0x02, 0xad, 0x4d, 0xa6, 0xb7, 0xa5, 0x94, 0xbc,
	0x7a, 0x1a, 0x96, 0x02, 0xa3, 0x93, 0xde, 0x45, 0x47, 0x31, 0x6a, 0x48, 0xb1, 0x7a, 0x4d, 0x07,
	0xe6, 0x66, 0x4f, 0x3d, 0x76, 0x70, 0x6f, 0xd1, 0xd1, 0x20, 0x30, 0x9b, 0x68, 0x17, 0xaf, 0x0a,
	0x8c, 0x6b, 0xdf, 0x93, 0xee, 0xc8, 0xb2, 0xb2, 0xa6, 0xcc, 0xd6, 0x90, 0xfe, 0x14, 0xae, 0x65,
	0x04, 0x70, 0x68, 0x6b, 0xc8, 0xc6, 0x26, 0xeb, 0xfe, 0xee, 0x60, 0xdd, 0x4a, 0xba, 0x3c, 0x3b,
	0x76, 0x70, 0xed, 0x07, 0xd2, 0xba, 0x7f, 0x5a, 0xb0, 0x7e, 0x81, 0x75, 0xd2, 0x75, 0x2f, 0x34,
	0x08, 0xeb, 0x1e, 0x20, 0x01, 0xeb, 0xfe, 0x6e, 0x61, 0xbc, 0x79, 0x06, 0x3d, 0x8e, 0x2e, 0xf9,
	0x1f, 0xd2, 0x69, 0x26, 0xd2, 0x69, 0xc8, 0x72, 0x3f, 0x36, 0xe8, 0xd7, 0x1f, 0x97, 0x2e, 0xf5,
	0x7d, 0xbc, 0x2a, 0x31, 0x40, 0x48, 0x11, 0x24, 0x84, 0x8b, 0x05, 0x8b, 0x71, 0xed, 0xf5, 0x12,
	0x17, 0x15, 0x8a, 0xa9, 0x52, 0xc2, 0x85, 0x06, 0x81, 0x70, 0x80, 0x04, 0x10, 0x2e, 0x54, 0x3c,
	0x26, 0xd3, 0x05, 0x9b, 0x4e, 0xe4, 0xd9, 0x5b, 0x56, 0x14, 0x24, 0xd3, 0xfd, 0x48, 0x7a, 0x4f,
	0x77, 0xd0, 0xde, 0xf3, 0x41, 0x3a, 0x9d, 0xd0, 0x20, 0x4c, 0x07, 0x90, 0x80, 0xe9, 0x02, 0x61,
	0x7c, 0x22, 0x97, 0x84, 0x62, 0xc0, 0xc9, 0x7c, 0x6f, 0x90, 0xe4, 0x12, 0xaf, 0x25, 0xec, 0x31,
	0xb9, 0x24, 0xb6, 0x08, 0x72, 0x09, 0xe2, 0x01, 0x72, 0x29, 0x14, 0x21, 0xcc, 0x5f, 0x44, 0xd3,
	0x52, 0x01, 0x62, 0x5c, 0x7b, 0xc5, 0x74, 0x61, 0x55, 0xe3, 0x9f, 0x26, 0xa9, 0x4c, 0x40, 0x9b,
	0xa0, 0xb6, 0xc9, 0xd8, 0x60, 0x26, 0x13, 0x08, 0x95, 0xcc, 0x2e, 0x55, 0xa2, 0xc0, 0xb5, 0x1f,
	0x4f, 0x15, 0x96, 0xb7, 0x20, 0xb3, 0xc3, 0x36, 0x61, 0x76, 0x19, 0x1b, 0x98, 0x1d, 0x96, 0xb3,
	0xa0, 0x5c, 0x20, 0xcd, 0xf2, 0x47, 0xd2, 0x68, 0x93, 0xe0, 0x11, 0xec, 0xc4, 0xb8, 0xf6, 0x1a,
	0x89, 0x0b, 0xb0, 0x4b, 0x86, 0xc5, 0x74, 0xd4, 0x9a, 0x13, 0x53, 0x2e, 0xa0, 0xe9, 0x10, 0xb8,
	0x80, 0x1e, 0x3b, 0xe0, 0x02, 0x58, 0x83, 0x20, 0x11, 0xdf, 0x69, 0x58, 0x4d, 0xfa, 0x51, 0xfe,
	0xa5, 0x24, 0xbe, 0x59, 0x14, 0x08, 0xfb, 0x26, 0x44, 0x7c, 0x83, 0x26, 0x41, 0x7c, 0x4b, 0xa8,
	0x80, 0xf8, 0xde, 0x04, 0x30, 0x09, 0xfb, 0xb9, 0xe4, 0xac, 0xf7, 0x5c, 0x26, 0xa3, 0x7e, 0x22,
	0xb1, 0x9f, 0x67, 0x26, 0x7d, 0x64, 0xd7, 0x12, 0xf6, 0x93, 0xfd, 0x14, 0xd8, 0x8f, 0x00, 0x0e,
	0xd8, 0xcf, 0xa5, 0x6c, 0xec, 0xc2, 0x27, 0x0c, 0x74, 0xb8, 0xf8, 0xb0, 0x5d, 0xc6, 0xbb, 0xf4,
	0x8f, 0x1a, 0xa8, 0x96, 0x77, 0x42, 0x2f, 0x23, 0xbd, 0xff, 0x65, 0x1f, 0x9a, 0xd5, 0xc8, 0xa8,
	0xea, 0xf2, 0xbf, 0xba, 0xfc, 0xaf, 0x2e, 0xff, 0x47, 0x74, 0xf9, 0xff, 0x51, 0x03, 0x1d, 0x70,
	0x9a, 0xdd, 0xd0, 0xda, 0xb0, 0xf1, 0x06, 0x49, 0xc3, 0xe1, 0x37, 0xbd, 0x5e, 0xcb, 0xb1, 0xda,
	0xae, 0xe3, 0xb5, 0x94, 0x6c, 0x69, 0xa7, 0x9a, 0xdd, 0xf0, 0x0c, 0x1d, 0xb9, 0x42, 0x07, 0x9e,
	0x26, 0xe3, 0xa8, 0x99, 0x34, 0xaf, 0x97, 0x9b, 0x49, 0x0b, 0xa6, 0x02, 0x66, 0x52, 0x27, 0x07,
	0x93, 0xf9, 0x62, 0x34, 0x27, 0xdf, 0x16, 0xb2, 0x14, 0xbd, 0xc4, 0xbb, 0x60, 0x6c, 0xe9, 0xd4,
	0xa0, 0x5f, 0xdf, 0x0b, 0xef, 0x1c, 0x59, 0x3e, 0xd2, 0xcb, 0xfd, 0xfa, 0xf5, 0xfa, 0xfb, 0x46,
	0x86, 0x01, 0xa4, 0x8e, 0x71, 0x74, 0x28, 0xcc, 0x0f, 0x1a, 0xa8, 0xe6, 0xf8, 0x4d, 0x3b, 0xc4,
	0x3d, 0x8f, 0x95, 0xbf, 0xa0, 0x91, 0x2c, 0xae, 0x43, 0x53, 0xe9, 0x08, 0x4e, 0xcf, 0xa7, 0xc4,
	0x71, 0x8d, 0x6c, 0x18, 0xd9, 0x0b, 0x67, 0x06, 0xfd, 0xfa, 0x5c, 0xce, 0x00, 0x7e, 0x8c, 0xc9,
	0x9b, 0x09, 0xd8, 0x10, 0x1c, 0x3d, 0x16, 0xd3, 0x42, 0x53, 0x8e, 0xdf, 0x8c, 0xb6, 0x48, 0xcd,
	0x4b, 0x92, 0x3d, 0x9c, 0xd5, 0x9d, 0x24, 0x92, 0xf8, 0x54, 0xd6, 0xb5, 0x1a, 0xb4, 0x1c, 0xf1,
	0x0e, 0x18, 0x80, 0x00, 0x49, 0xec, 0x00, 0x18, 0xf3, 0x13, 0xc9, 0xd2, 0xe1, 0xc3, 0xe3, 0x9e,
	0xef, 0x3b, 0x9e, 0x95, 0x26, 0xeb, 0x4e, 0x13, 0xe9, 0x5c, 0x23, 0xbc, 0x0e, 0x36, 0xf4, 0x02,
	0x19, 0x99, 0xe6, 0xff, 0x26, 0x76, 0xb6, 0x55, 0x7a, 0x53, 0xac, 0x1f, 0x21, 0xae, 0x9f, 0xfc,
	0xf9, 0xa4, 0x8b, 0xe2, 0x1c, 0x54, 0xe6, 0x5b, 0x0c, 0x44, 0x62, 0xbc, 0x85, 0x8b, 0xc1, 0xa0,
	0x17, 0xd3, 0x24, 0xf2, 0x33, 0xf0, 0x36, 0x28, 0x39, 0xe1, 0x66, 0x97, 0x84, 0x41, 0x8f, 0x52,
	0x7a, 0x32, 0x91, 0x09, 0xba, 0x1e, 0xbe, 0xbc, 0x72, 0xd0, 0x03, 0xa9, 0xd0, 0xd6, 0x60, 0x30,
	0x6d, 0x34, 0x4d, 0x60, 0x9d, 0x7b, 0x49, 0x92, 0x9e, 0xc8, 0x8e, 0xa9, 0xf7, 0xc1, 0x95, 0xd4,
	0x0e, 0x99, 0xcc, 0x7a, 0x8a, 0x74, 0x9d, 0x07, 0xf9, 0xe1, 0x65, 0x18, 0x58, 0xda, 0x13, 0x00,
	0x91, 0xda, 0xa1, 0xdc, 0x27, 0x92, 0xac, 0x8a, 0x59, 0xa1, 0x76, 0x68, 0xd6, 0x05, 0x57, 0x85,
	0x04, 0x02, 0x27, 0x00, 0x30, 0xe6, 0xeb, 0x0c, 0x64, 0x7a, 0xae, 0x7f, 0x8f, 0x17, 0x24, 0x2a,
	0x36, 0xd3, 0x1d, 0x31, 0x71, 0x08, 0x10, 0x6c, 0x6b, 0x67, 0xd3, 0x11, 0x4c, 0x3b, 0x25, 0xbb,
	0x02, 0x2f, 0xfd, 0xec, 0xa0, 0x5f, 0x9f, 0x51, 0xfa, 0xf8, 0x29, 0x5a, 0x45, 0x0c, 0xcc, 0xfb,
	0x9e, 0x0c, 0x49, 0x14, 0x68, 0xf2, 0x5e, 0xe2, 0xc8, 0xf6, 0x71, 0xba, 0x91, 0x82, 0xc0, 0x4b,
	0x3d, 0x02, 0x0e, 0x8a, 0x79, 0x9e, 0x2e, 0xf0, 0x41, 0x8d, 0x64, 0x0c, 0x55, 0xa0, 0x75, 0x3d,
	0x5c, 0x81, 0xd6, 0x63, 0x07, 0xdf, 0x3a, 0xd4, 0x20, 0x20, 0x89, 0x94, 0x36, 0xef, 0xf5, 0x6c,
	0x3f, 0x0b, 0x4b, 0x77, 0x5b, 0x8e, 0x1f, 0xbb, 0x6d, 0xd7, 0x89, 0xe8, 0x77, 0xd9, 0xc7, 0x13,
	0x29, 0xdd, 0x95, 0x0c, 0x64, 0xe1, 0xd4, 0x2b, 0xd9, 0x30, 0xf6, 0x8d, 0x58, 0xe2, 0x9b, 0x42,
	0x64, 0xe0, 0x72, 0x6f, 0x33, 0x17, 0x9b, 0xd9, 0x51, 0x53, 0x84, 0x1f, 0x2d, 0xb0, 0x33, 0x3c,
	0xc2, 0x65, 0x8b, 0xbe, 0x51, 0xd6, 0xb2, 0x45, 0xc4, 0x90, 0x95, 0x93, 0x23, 0x1e, 0xd7, 0xbe,
	0x35, 0x05, 0x0d, 0x59, 0xda, 0xbc, 0xd8, 0xd4, 0x90, 0xa5, 0xed, 0x12, 0x24, 0x40, 0xde, 0x1c,
	0xc0, 0x90, 0xa5, 0xcd, 0x41, 0x8f, 0x49, 0x44, 0x7e, 0xee, 0x37, 0x2b, 0xe3, 0x79, 0xe0, 0x5f,
	0x8d, 0xa3, 0x99, 0xf4, 0xfa, 0x76, 0xc5, 0xdf, 0x74, 0xfc, 0x38, 0x88, 0xaa, 0x52, 0x83, 0xd5,
	0x69, 0xa0, 0x3a, 0x0d, 0x8c, 0xea, 0x34, 0xf0, 0x1e, 0x03, 0x1d, 0x4d, 0xbd, 0x2c, 0x2c, 0x37,
	0xdd, 0x82, 0xe0, 0xbf, 0x76, 0xc0, 0xb2, 0xee, 0x3c, 0x6b, 0xd0, 0xaf, 0x1f, 0x56, 0xb6, 0xab,
	0xf0, 0x4f, 0x3b, 0xe1, 0x0c, 0x27, 0xd8, 0x52, 0x19, 0x86, 0x54, 0xa4, 0xe5, 0xf0, 0x46, 0x21,
	0x56, 0xd3, 0x51, 0xc3, 0x51, 0x32, 0x0f, 0x29, 0x85, 0xa0, 0x9d, 0x47, 0x6d, 0x7f, 0xc4, 0x40,
	0x73, 0x39, 0xe8, 0xca, 0xc8, 0x3d, 0xff, 0x77, 0x84, 0xc6, 0x52, 0x72, 0x2b, 0xa6, 0x59, 0x31,
	0xcd, 0x8a, 0x69, 0x8e, 0xac, 0x3e, 0xeb, 0x78, 0xd3, 0x8e, 0x5a, 0x20, 0xf2, 0x79, 0x4e, 0xe6,
	0x47, 0xcb, 0x76, 0xd4, 0x4a, 0xf8, 0xd0, 0x8d, 0x83, 0x7e, 0x7d, 0x8c, 0xfd, 0xc0, 0xbc, 0x72,
	0x58, 0x86, 0x00, 0x5c, 0x03, 0x37, 0xd9, 0x38, 0x90, 0x83, 0xeb, 0x01, 0x29, 0x07, 0x57, 0x3a,
	0xc3, 0xce, 0x75, 0xf1, 0xfb, 0x0c, 0xb4, 0x4f, 0xbc, 0xb5, 0x57, 0x6b, 0x89, 0x6b, 0x7d, 0x00,
	0x48, 0x64, 0x85, 0xd8, 0xc0, 0xf5, 0xed, 0xeb, 0x54, 0x57, 0x00, 0xbd, 0x96, 0x3d, 0xdb, 0x52,
	0xe1, 0x09, 0x3d, 0xe2, 0xfd, 0x97, 0x9a, 0xbc, 0x5e, 0x7b, 0x9b, 0x46, 0xe8, 0x11, 0x1b, 0x14,
	0x7a, 0xf4, 0x48, 0x01, 0x3d, 0xbe, 0x0a, 0xbf, 0xf0, 0x5e, 0x03, 0x4d, 0x49, 0xdf, 0xb1, 0x8c,
	0x02, 0xe0, 0x3d, 0x06, 0xda, 0x0d, 0x17, 0x43, 0x19, 0xa9, 0x7c, 0x09, 0x42, 0xd3, 0x67, 0x02,
	0x1c, 0x2f, 0xd9, 0xd8, 0x69, 0xb1, 0x73, 0x7a, 0x25, 0xae, 0x2a, 0x71, 0x55, 0x89, 0xab, 0x11,
	0x89, 0xab, 0x5f, 0x40, 0x73, 0x1b, 0x01, 0x8e, 0xad, 0xf5, 0x64, 0x03, 0xa6, 0x76, 0x34, 0xfa,
	0xda, 0xa8, 0x62, 0x4f, 0x2c, 0x9c, 0xf2, 0x16, 0x65, 0x2f, 0x90, 0x59, 0x38, 0x73, 0x10, 0x80,
	0x5d, 0xb0, 0xa1, 0xc1, 0x60, 0xb6, 0x54, 0x41, 0x96, 0xd9, 0x04, 0x95, 0x29, 0x77, 0x2c, 0xd0,
	0xde, 0x9e, 0x97, 0x54, 0x92, 0x95, 0x0c, 0xbf, 0x21, 0x6f, 0xca, 0xd1, 0x24, 0x97, 0x5c, 0xf8,
	0xb0, 0x81, 0xf6, 0xe9, 0x9f, 0xb6, 0x8c, 0x1c, 0xfb, 0xf5, 0x57, 0xa0, 0xa3, 0x43, 0x5f, 0x54,
	0x19, 0x6b, 0xbc, 0x3d, 0x0b, 0xd4, 0x78, 0x3b, 0x2a, 0x79, 0x4a, 0xc0, 0x47, 0x78, 0x68, 0x15,
	0xdf, 0xde, 0x73, 0x10, 0x21, 0x9e, 0xe7, 0xb3, 0x12, 0x5f, 0x95, 0xf8, 0xaa, 0xc4, 0xd7, 0xe8,
	0x2a, 0xb9, 0x88, 0x59, 0x74, 0x35, 0x95, 0x5c, 0xf8, 0xc6, 0x54, 0x2a, 0xb9, 0x68, 0x20, 0xc1,
	0x05, 0x12, 0xcf, 0xbe, 0x9b, 0x66, 0x61, 0x76, 0x91, 0x29, 0x02, 0x81, 0x02, 0x2e, 0xc4, 0xe5,
	0x93, 0xcf, 0x96, 0x55, 0x6e, 0x39, 0xa6, 0x4e, 0xa6, 0x56, 0x6c, 0x99, 0xe6, 0x73, 0xb1, 0x52,
	0x2d, 0x01, 0xda, 0x23, 0x82, 0xd0, 0x7b, 0x2e, 0x96, 0xe9, 0x79, 0x8c, 0xc6, 0xbe, 0xf0, 0xc9,
	0xce, 0x26, 0xbd, 0x2b, 0x42, 0x5e, 0x17, 0x1d, 0x68, 0xce, 0xb3, 0x51, 0xd8, 0xd0, 0xb4, 0xd1,
	0xb4, 0x08, 0x25, 0x5c, 0x11, 0x93, 0xeb, 0x46, 0x3e, 0x19, 0xbb, 0x68, 0x3a, 0xaa, 0xce, 0xa4,
	0xdc, 0x06, 0xf2, 0x59, 0xc8, 0x7d, 0x52, 0x0f, 0x66, 0x51, 0xc6, 0x4e, 0x33, 0xf0, 0x5b, 0x76,
	0xb4, 0x45, 0x2e, 0x87, 0xc7, 0x68, 0x60, 0x03, 0x9f, 0x67, 0x2d, 0xed, 0xd6, 0x67, 0x4c, 0xce,
	0xa0, 0xc1, 0x89, 0x8d, 0xcf, 0x98, 0x81, 0x9b, 0x2f, 0x86, 0x5f, 0x8d, 0x86, 0x97, 0xb2, 0xeb,
	0x5d, 0x13, 0xc6, 0xaa, 0x92, 0x9d, 0x2e, 0x7d, 0x49, 0xda, 0xa3, 0xff, 0x92, 0x14, 0x57, 0xce,
	0x97, 0xa4, 0x80, 0x24, 0x6b, 0xb9, 0x04, 0x83, 0x9b, 0x91, 0xbb, 0xee, 0x44, 0x56, 0x6c, 0x77,
	0x58, 0x85, 0x14, 0x92, 0xb5, 0x1c, 0xcc, 0xc9, 0xc6, 0x5c, 0xb0, 0x3b, 0x3c, 0x08, 0x2e, 0x1f,
	0x0d, 0x70, 0x02, 0x00, 0x24, 0x70, 0x3c, 0xe6, 0x9b, 0xe8, 0x3d, 0x15, 0x7d, 0x2d, 0xac, 0xc4,
	0x4a, 0xf3, 0x1e, 0x5a, 0x6e, 0x85, 0x55, 0x92, 0xd6, 0xbd, 0x0f, 0x52, 0xfb, 0x2e, 0x7b, 0x9d,
	0xa4, 0x7c, 0x0b, 0x81, 0x22, 0x0b, 0x8e, 0x5f, 0x4d, 0x69, 0xd1, 0x02, 0x2f, 0x8a, 0x6c, 0x10,
	0x29, 0xda, 0x42, 0x71, 0x84, 0x89, 0x0a, 0x9a, 0xaa, 0x8d, 0x1b, 0x8e, 0xed, 0xc5, 0x1b, 0x56,
	0x73, 0xc3, 0x69, 0xde, 0x93, 0xd0, 0x44, 0x03, 0xc7, 0x4f, 0x0a, 0x8e, 0x8b, 0x67, 0xc8, 0x88,
	0xe5, 0x64, 0x00, 0x99, 0xfe, 0x7a, 0xe8, 0xb8, 0x28, 0x21, 0xd0, 0x79, 0x2e, 0x8a, 0x18, 0x48,
	0x02, 0xd8, 0x14, 0x56, 0x78, 0xb9, 0xe4, 0x3a, 0x78, 0x8c, 0x32, 0x10, 0x36, 0x31, 0xff, 0x36,
	0x9c, 0x81, 0x68, 0x20, 0xc1, 0x26, 0xc3, 0x12, 0x68, 0x98, 0x70, 0x62, 0xba, 0x64, 0x28, 0x27,
	0xde, 0xc7, 0x39, 0x31, 0x7d, 0xdf, 0x90, 0x13, 0x0b, 0x43, 0x01, 0x27, 0xa6, 0xed, 0x84, 0x13,
	0x6f, 0xa1, 0xdd, 0x3c, 0xa1, 0xbb, 0x78, 0x51, 0x7b, 0x48, 0xcd, 0x48, 0x9e, 0xfa, 0xe8, 0x67,
	0xc9, 0x52, 0x85, 0x06, 0xc1, 0x17, 0x17, 0xe2, 0x83, 0xe1, 0x01, 0x02, 0x80, 0xf9, 0x2e, 0x03,
	0xed, 0xf3, 0x82, 0x0e, 0x71, 0x9e, 0x95, 0x4a, 0xd1, 0xc8, 0x05, 0x9e, 0x45, 0x4e, 0x45, 0x00,
	0x40, 0x0d, 0x1a, 0x72, 0xaf, 0xae, 0xe9, 0x10, 0x6c, 0x35, 0xfa, 0x79, 0xc0, 0xe7, 0xf5, 0x34,
	0x08, 0xcc, 0x57, 0x1b, 0x68, 0x26, 0xbb, 0x04, 0x0f, 0xed, 0x2e, 0x25, 0xef, 0x25, 0x52, 0x20,
	0x23, 0x27, 0x2f, 0xbd, 0x07, 0x0f, 0xed, 0x6e, 0x42, 0x19, 0x89, 0xe8, 0x86, 0x6d, 0x42, 0xc4,
	0xba, 0x82, 0x18, 0x78, 0xef, 0xfa, 0x10, 0xcc, 0xbc, 0xdf, 0x40, 0x7b, 0x24, 0x67, 0x63, 0x4a,
	0xcd, 0x4b, 0xc7, 0x60, 0x7a, 0x44, 0x4e, 0x0d, 0x74, 0x5a, 0xce, 0x0e, 0x20, 0x4a, 0xb3, 0x70,
	0x00, 0xd1, 0xcd, 0x00, 0x0e, 0x20, 0xa1, 0x02, 0x0c, 0x6a, 0x17, 0xbd, 0x6c, 0x0c, 0xd6, 0x2e,
	0xe2, 0xc4, 0x3c, 0xa2, 0xb5, 0x8b, 0x5e, 0x3e, 0x06, 0x6b, 0x17, 0xf1, 0x69, 0xcb, 0x54, 0xbb,
	0xe8, 0xfe, 0xbc, 0x93, 0xe4, 0x2b, 0x72, 0x3f, 0xe1, 0x88, 0x0a, 0x14, 0xbc, 0xd1, 0x40, 0xb3,
	0xd0, 0x6d, 0x9a, 0x12, 0xf6, 0xca, 0x31, 0x98, 0x3e, 0x59, 0x21, 0x8c, 0x2f, 0x2d, 0xc2, 0xec,
	0xe4, 0x56, 0x41, 0x5b, 0xd2, 0xa0, 0x07, 0xcc, 0x6e, 0x53, 0x06, 0x4d, 0x18, 0xc4, 0xbc, 0xc2,
	0x22, 0xb9, 0xf5, 0xf6, 0xcf, 0xe6, 0xa0, 0x71, 0x5c, 0x62, 0xb4, 0x54, 0x24, 0xca, 0x8d, 0xdc,
	0x8a, 0xfb, 0x84, 0x1c, 0x1e, 0xac, 0xb5, 0xe4, 0xce, 0x61, 0x3d, 0x1e, 0xa5, 0x36, 0xe9, 0xdf,
	0x3e, 0x62, 0xb5, 0x49, 0x3f, 0x64, 0xa0, 0xbd, 0x5a, 0x5e, 0x5c, 0xd6, 0x3a, 0xdb, 0x85, 0x4c,
	0xbb, 0xac, 0x1e, 0xef, 0x79, 0xac, 0xbc, 0x8c, 0xf4, 0x7e, 0xdc, 0x40, 0x07, 0x0a, 0x98, 0x7d,
	0x59, 0xcb, 0x8b, 0xc9, 0x22, 0xa1, 0xac, 0xe5, 0xc5, 0xb6, 0x23, 0x43, 0xca, 0xbf, 0x2c, 0x1e,
	0x13, 0xd5, 0x53, 0x7e, 0xd3, 0x40, 0xf3, 0xf9, 0xa2, 0xa5, 0x94, 0x17, 0x4f, 0x13, 0x68, 0x3c,
	0x8b, 0x46, 0xac, 0x4c, 0x76, 0x95, 0xc9, 0xae, 0x32, 0xd9, 0x8d, 0xc8, 0x64, 0x77, 0x09, 0xed,
	0xe3, 0x21, 0xbf, 0x16, 0xfb, 0x57, 0xb8, 0x70, 0x5a, 0xa2, 0x56, 0x20, 0xb6, 0x35, 0xe9, 0x3f,
	0xec, 0xf5, 0x5d, 0x27, 0x47, 0x0c, 0x8b, 0xe0, 0x92, 0x19, 0x48, 0x81, 0x37, 0x9f, 0xaf, 0xde,
	0x36, 0xcd, 0x29, 0x71, 0xca, 0x3b, 0x3f, 0xe5, 0x44, 0x68, 0x9a, 0xa5, 0x51, 0x52, 0x1c, 0x26,
	0xe4, 0x94, 0x02, 0xd4, 0x7f, 0x9f, 0xfe, 0xcf, 0x15, 0xda, 0xa3, 0x62, 0x66, 0x01, 0xbd, 0x1a,
	0xbb, 0xbb, 0x0d, 0x80, 0xcc, 0xb7, 0x19, 0x68, 0xbf, 0x7c, 0xe2, 0x53, 0xdc, 0x23, 0xf2, 0xe2,
	0x62, 0x49, 0xa1, 0x19, 0xa9, 0x8d, 0x53, 0x73, 0xa3, 0xfe, 0x3c, 0xa9, 0x25, 0x6b, 0x5f, 0xa8,
	0xc5, 0x42, 0xc8, 0x93, 0x4f, 0x33, 0x9c, 0xbc, 0x2f, 0x4b, 0xe4, 0x41, 0x49, 0x47, 0xc9, 0x93,
	0xda, 0x14, 0xf2, 0x72, 0xb1, 0x03, 0xf2, 0x36, 0xb5, 0x58, 0x88, 0x27, 0x87, 0xf4, 0xe1, 0xcb,
	0x28, 0xaa, 0x5e, 0x3b, 0x81, 0x66, 0xb9, 0xce, 0x92, 0xbc, 0xe1, 0x0b, 0x24, 0x03, 0x5f, 0x25,
	0xb4, 0x2a, 0xa1, 0x55, 0x09, 0xad, 0xd1, 0x08, 0xad, 0x0f, 0x18, 0xe8, 0xa0, 0x60, 0x34, 0x4a,
	0x36, 0xa1, 0x15, 0x93, 0xb0, 0x41, 0xf2, 0x7f, 0x1a, 0x19, 0x29, 0x24, 0x01, 0x48, 0xb7, 0x29,
	0xf9, 0xa6, 0x24, 0xf5, 0xa9, 0x66, 0x0f, 0x93, 0xff, 0x84, 0x8c, 0x7c, 0x45, 0x53, 0x80, 0x88,
	0x36, 0x37, 0x0f, 0x97, 0xf9, 0x3e, 0x03, 0xed, 0x55, 0x6c, 0x22, 0xa2, 0xcc, 0xbb, 0x59, 0x94,
	0x79, 0x12, 0x0e, 0xc9, 0xda, 0x92, 0x48, 0x42, 0x72, 0x29, 0xa3, 0xb6, 0x0b, 0xd9, 0xa6, 0xb4,
	0xb3, 0x01, 0x69, 0x8c, 0x55, 0x70, 0x10, 0x5b, 0xf4, 0xa0, 0x14, 0x5b, 0xa4, 0xa1, 0x6c, 0xe7,
	0x72, 0xf9, 0x6b, 0x06, 0x3a, 0x96, 0x6f, 0xff, 0x53, 0xa4, 0x65, 0x5d, 0x12, 0x47, 0xf2, 0xa1,
	0x71, 0xe9, 0xb9, 0x83, 0x7e, 0xbd, 0x9e, 0xd7, 0xc9, 0x05, 0xd4, 0x6d, 0xc3, 0x2c, 0x8f, 0x5a,
	0x51, 0x55, 0xdf, 0x2c, 0x46, 0xbc, 0xf0, 0xaf, 0xaf, 0x40, 0xc7, 0xb7, 0xf5, 0xe1, 0xca, 0xe8,
	0x82, 0x71, 0x1e, 0xb8, 0x60, 0x1c, 0x50, 0x0c, 0x7f, 0xec, 0xb1, 0x2e, 0xd8, 0x9d, 0xed, 0x3b,
	0x5f, 0x7c, 0xcc, 0x40, 0xfb, 0x73, 0xd7, 0x4b, 0x19, 0xc5, 0xf9, 0xdf, 0xcd, 0xa2, 0x5d, 0x42,
	0x7a, 0x9a, 0x4a, 0x8c, 0x57, 0x62, 0xbc, 0x12, 0xe3, 0x23, 0x12, 0xe3, 0xf7, 0x1b, 0xe8, 0xb0,
	0x98, 0x04, 0xca, 0x6a, 0x06, 0x7e, 0xb3, 0x17, 0x45, 0x8e, 0xdf, 0xdc, 0xb2, 0x3c, 0x67, 0xd3,
	0xf1, 0xd8, 0x21, 0x94, 0x5c, 0x2d, 0x09, 0xbb, 0x74, 0x99, 0x8f, 0x3b, 0x9b, 0x0c, 0xe3, 0x57,
	0x4b, 0xc5, 0xe8, 0xc0, 0xd5, 0xd2, 0xdd, 0xf9, 0xf8, 0xcc, 0x97, 0x18, 0xa8, 0x06, 0x50, 0xb5,
	0x1c, 0xdc, 0x8c, 0x5c, 0x12, 0xb4, 0xce, 0x1c, 0x4c, 0x48, 0x88, 0xa8, 0x40, 0xd3, 0x49, 0x3e,
	0x82, 0xdf, 0xc3, 0xe7, 0xe1, 0x00, 0xe7, 0xa1, 0xbb, 0xb5, 0x48, 0x48, 0x18, 0x2b, 0x80, 0x77,
	0xee, 0x75, 0x9a, 0x3d, 0xa2, 0x83, 0xa4, 0xe9, 0x0c, 0x32, 0xf7, 0xcc, 0x53, 0x59, 0xd7, 0x8a,
	0xdf, 0x0e, 0xb2, 0xec, 0xc8, 0x32, 0x8d, 0x7c, 0x18, 0xce, 0xa1, 0x51, 0x98, 0x23, 0x8f, 0x46,
	0x01, 0x09, 0xa9, 0xa0, 0x0a, 0xe0, 0x5d, 0x3f, 0xec, 0xc5, 0x16, 0x6e, 0x6e, 0x38, 0x5d, 0x9b,
	0xf9, 0xab, 0x9c, 0x91, 0x88, 0x58, 0x49, 0x86, 0xac, 0x91, 0x11, 0xfc, 0xe4, 0x98, 0x8b, 0x24,
	0x8f, 0x0a, 0x01, 0x8b, 0x79, 0x9f, 0x81, 0x0e, 0x6a, 0x10, 0xf4, 0xdc, 0x94, 0x10, 0x5a, 0x6e,
	0x61, 0x75, 0xd0, 0xaf, 0xd7, 0x64, 0x42, 0xee, 0x5c, 0xc9, 0x48, 0xb9, 0x39, 0x97, 0x94, 0x0c,
	0x13, 0xc8, 0x83, 0x21, 0x53, 0x73, 0xa7, 0xcb, 0xe8, 0x79, 0x95, 0x81, 0xe6, 0x01, 0x96, 0xa0,
	0x17, 0x0b, 0xaf, 0x65, 0x86, 0xbb, 0x98, 0x08, 0xd4, 0xdc, 0x41, 0xc6, 0x64, 0xc4, 0x3c, 0x41,
	0x43, 0x0c, 0x40, 0x03, 0xee, 0xd3, 0xee, 0xd6, 0xe3, 0x31, 0xdf, 0x60, 0xa0, 0x43, 0x3a, 0x14,
	0xfc, 0xd5, 0x50, 0x7f, 0x97, 0x3b, 0x12, 0x8d, 0x58, 0x21, 0x46, 0x78, 0x37, 0xb7, 0xe4, 0x93,
	0xa3, 0x7d, 0x39, 0xfb, 0x15, 0x8a, 0xb2, 0xb7, 0x73, 0xbf, 0x81, 0xf6, 0x01, 0x3c, 0x89, 0x0c,
	0x59, 0x0f, 0x82, 0x7b, 0x30, 0x73, 0x7a, 0xe1, 0x61, 0xff, 0xac, 0x03, 0xac, 0x69, 0xe2, 0x9e,
	0x20, 0x90, 0x9a, 0x0e, 0x12, 0xdc, 0x13, 0xf4, 0xd8, 0x81, 0x60, 0xbc, 0x5b, 0x83, 0x80, 0x54,
	0x4e, 0x00, 0xb0, 0x78, 0xcb, 0x6f, 0x6e, 0x44, 0x81, 0x1f, 0xf4, 0xb0, 0x75, 0x77, 0xb0, 0x2e,
	0x56, 0x4e, 0x10, 0x28, 0x58, 0xe3, 0xa3, 0x9e, 0x16, 0xac, 0xe7, 0x2c, 0x24, 0x09, 0x55, 0xde,
	0xbb, 0x82, 0xb8, 0x4c, 0x07, 0xcd, 0x00, 0x2c, 0x44, 0xa4, 0xec, 0x25, 0x9f, 0x8c, 0x38, 0x43,
	0x08, 0x54, 0x30, 0xb9, 0xb2, 0xa0, 0x99, 0x5b, 0x96, 0x2e, 0x53, 0x77, 0x43, 0x30, 0xd3, 0x12,
	0xb4, 0xff, 0x1f, 0x5f, 0x0d, 0xd3, 0xff, 0x8a, 0x53, 0x3c, 0xac, 0x28, 0xa6, 0x9c, 0xa8, 0xa1,
	0xff, 0xf4, 0x68, 0x44, 0x0d, 0xbd, 0xdf, 0x40, 0x33, 0xca, 0x83, 0x95, 0x51, 0x3d, 0x7d, 0xc7,
	0x04, 0xda, 0x73, 0xd6, 0xf5, 0xef, 0x59, 0xec, 0x74, 0x22, 0xa7, 0x43, 0xd4, 0xb8, 0xdb, 0xa3,
	0xa0, 0x57, 0xdd, 0x91, 0x54, 0x7a, 0x6a, 0xa5, 0xa7, 0x8e, 0x4a, 0x4f, 0xfd, 0x37, 0x06, 0x3a,
	0xe6, 0xb9, 0xfe, 0x3d, 0x96, 0xcd, 0x77, 0xa1, 0xd5, 0x49, 0xb6, 0xa1, 0xe5, 0xd9, 0xcd, 0xb4,
	0x34, 0x4b, 0x8b, 0x15, 0xe7, 0x22, 0x16, 0x09, 0xdd, 0x9e, 0x3d, 0x6b, 0x37, 0x59, 0xb9, 0x96,
	0x16, 0xb7, 0x48, 0x6c, 0x03, 0x2f, 0xb0, 0x48, 0x78, 0xc5, 0x88, 0xcd, 0x8f, 0x1b, 0x68, 0x2e,
	0xbb, 0x25, 0x90, 0xdc, 0xba, 0x98, 0xc9, 0xe9, 0x89, 0x62, 0xa2, 0x1f, 0x19, 0x57, 0x7a, 0x03,
	0x01, 0x5c, 0xbb, 0x48, 0xde, 0x2e, 0x5d, 0x0f, 0xe6, 0x3e, 0x9f, 0x39, 0x93, 0x02, 0x8f, 0xd3,
	0x50, 0x87, 0xc2, 0xdc, 0x50, 0x6d, 0x4f, 0x0b, 0x45, 0x24, 0xee, 0x5c, 0x0c, 0xfd, 0xf1, 0x70,
	0xd7, 0xb7, 0xef, 0x50, 0x02, 0x9e, 0x52, 0x44, 0x40, 0x89, 0x9c, 0xe0, 0x16, 0xfe, 0xbd, 0x81,
	0xae, 0xdf, 0xee, 0x77, 0x2c, 0xab, 0xaf, 0x42, 0xfe, 0x47, 0x2e, 0x23, 0xc5, 0x5f, 0x30, 0xd0,
	0x43, 0x5c, 0x15, 0x65, 0x7c, 0x8a, 0x1f, 0x23, 0xb4, 0xff, 0x6c, 0x60, 0xb7, 0xd6, 0x6d, 0xcf,
	0xf6, 0x9b, 0x4e, 0x44, 0xfd, 0xb0, 0xbb, 0x81, 0xef, 0xc6, 0x41, 0x54, 0x69, 0x17, 0x95, 0x76,
	0x51, 0x69, 0x17, 0x23, 0xd2, 0x2e, 0xfe, 0x8b, 0x81, 0x8e, 0x7b, 0xc2, 0x4e, 0x64, 0x51, 0x13,
	0x6c, 0x2b, 0x26, 0x87, 0x1b, 0x56, 0xcf, 0x8b, 0xdd, 0x6a, 0x65, 0x6e, 0xfc, 0xb9, 0xdb, 0x37,
	0x2b, 0xe8, 0x78, 0x2c, 0x77, 0x08, 0xaf, 0x12, 0x76, 0xb9, 0x5f, 0x7f, 0x4a, 0xea, 0xd5, 0xbf,
	0x0d, 0x22, 0x44, 0xfa, 0x8f, 0x79, 0xc3, 0xd1, 0x9b, 0x5d, 0xd5, 0xcf, 0xe3, 0xba, 0xe1, 0x4f,
	0xb0, 0x63, 0x11, 0xff, 0x7e, 0x03, 0x1d, 0x00, 0x0f, 0x12, 0x06, 0x81, 0xa7, 0xfa, 0x80, 0xd4,
	0x74, 0x24, 0x34, 0x82, 0xc0, 0xa3, 0xc9, 0x52, 0x95, 0x56, 0x7e, 0xf0, 0xbc, 0x49, 0xf3, 0xb2,
	0xe0, 0x1c, 0xc0, 0x48, 0xe4, 0xe5, 0x60, 0x5a, 0xf8, 0xa4, 0x81, 0xea, 0x43, 0x9e, 0xbf, 0x94,
	0xf7, 0x25, 0xbb, 0xd0, 0x1e, 0x91, 0xec, 0xb3, 0x2e, 0x8e, 0x1d, 0xdf, 0xa9, 0x44, 0x46, 0x25,
	0x32, 0x2a, 0x91, 0x31, 0x2a, 0x91, 0xf1, 0x05, 0x03, 0x1d, 0x01, 0x0c, 0xc8, 0x63, 0xbb, 0x50,
	0x95, 0x16, 0x47, 0x74, 0x8c, 0x2e, 0xdd, 0xb4, 0xe4, 0x0b, 0x3f, 0x73, 0xd0, 0xaf, 0x1f, 0xd6,
	0xf5, 0x02, 0x19, 0xf1, 0x24, 0x0d, 0xdb, 0xd3, 0xcc, 0x0a, 0x52, 0xc5, 0x79, 0x85, 0x48, 0xcd,
	0x5f, 0x35, 0xd0, 0x0c, 0xc0, 0x27, 0xca, 0x88, 0x27, 0x14, 0xd1, 0x2d, 0xb6, 0x25, 0x72, 0x82,
	0x94, 0x6b, 0x96, 0x1a, 0x85, 0xc8, 0x30, 0x65, 0x12, 0x10, 0x21, 0xea, 0x49, 0x70, 0xc5, 0xe7,
	0x51, 0xdd, 0x5b, 0x7c, 0xc4, 0x84, 0xd5, 0x97, 0xca, 0x22, 0xac, 0x7e, 0xdb, 0x40, 0xc7, 0xb6,
	0xf1, 0x21, 0x4a, 0x7b, 0xc0, 0xcc, 0xfd, 0x6a, 0x65, 0xa4, 0xf8, 0xbd, 0xe3, 0xc8, 0x14, 0x29,
	0x5e, 0x75, 0xba, 0xeb, 0x95, 0x80, 0xad, 0x04, 0x6c, 0x25, 0x60, 0x47, 0x26, 0x60, 0x3f, 0x63,
	0x20, 0x20, 0xbd, 0xac, 0x2e, 0xd9, 0x83, 0xaa, 0x78, 0x3d, 0xac, 0x63, 0xcd, 0x74, 0xc3, 0x92,
	0xaf, 0xbb, 0x36, 0xe8, 0xd7, 0x0f, 0xaa, 0x7d, 0x40, 0xb4, 0xde, 0xaa, 0x61, 0xd2, 0xca, 0x7c,
	0x20, 0xfd, 0xb5, 0x57, 0x80, 0x10, 0xd4, 0x88, 0x65, 0xc2, 0xf4, 0x48, 0x01, 0x95, 0x3b, 0x4e,
	0xc1, 0xfa, 0x51, 0x03, 0xd5, 0xf2, 0xf0, 0x95, 0x91, 0xad, 0xfe, 0xc7, 0xbd, 0x68, 0x5a, 0x16,
	0x95, 0x15, 0x53, 0xad, 0x98, 0x6a, 0xc5, 0x54, 0x47, 0xc4, 0x54, 0xff, 0x83, 0x81, 0x8e, 0xa9,
	0x9a, 0x68, 0xb3, 0x87, 0xe3, 0xa0, 0x6b, 0xd9, 0x71, 0x1c, 0xb9, 0xeb, 0x82, 0xf3, 0x76, 0xce,
	0x26, 0x7c, 0xde, 0xa0, 0x5f, 0x3f, 0x22, 0x6f, 0xe3, 0x65, 0x82, 0x63, 0x31, 0x43, 0x21, 0x5c,
	0xaf, 0x0d, 0x9f, 0x4f, 0x24, 0xf4, 0x88, 0x37, 0x04, 0xb3, 0xf9, 0x9b, 0x06, 0x3a, 0xa8, 0x22,
	0x15, 0xe4, 0xc2, 0x24, 0xf4, 0x61, 0x91, 0x49, 0x25, 0xcb, 0x93, 0xd4, 0x84, 0x97, 0x7b, 0x80,
	0x4c, 0xb8, 0x39, 0x8f, 0x7c, 0xbd, 0x44, 0x98, 0xf7, 0x72, 0x91, 0x99, 0xaf, 0x31, 0xd0, 0xbc,
	0x16, 0xcf, 0xa6, 0xdb, 0x72, 0x22, 0xe2, 0x49, 0x36, 0x4e, 0xcb, 0xbe, 0x6b, 0x28, 0x22, 0x63,
	0xb8, 0x3b, 0x52, 0x3e, 0x9e, 0xc2, 0x73, 0x44, 0x8a, 0xc8, 0xfc, 0x53, 0x03, 0xd5, 0x0b, 0xcc,
	0x8c, 0xe2, 0x0d, 0xdc, 0x6d, 0x79, 0x6f, 0x30, 0xd7, 0x68, 0x96, 0xc8, 0xb1, 0x3b, 0x07, 0xfd,
	0xfa, 0xa1, 0xa2, 0x11, 0xc9, 0xcb, 0x7d, 0xe2, 0x50, 0x7b, 0xa7, 0x2c, 0xf4, 0x0e, 0x79, 0x45,
	0x28, 0xcd, 0xcf, 0xca, 0xaf, 0x38, 0x3b, 0x19, 0x93, 0x27, 0xfa, 0x2e, 0x7d, 0xa2, 0x5b, 0xb7,
	0xf3, 0x44, 0xe9, 0xf1, 0x24, 0x79, 0x18, 0xe5, 0xa3, 0x08, 0x9d, 0x38, 0xe7, 0xa3, 0x80, 0x99,
	0x73, 0x3f, 0x8a, 0x88, 0xc8, 0xfc, 0x6d, 0x21, 0x31, 0x04, 0x28, 0x35, 0x48, 0xa9, 0xff, 0x1e,
	0xa5, 0xfe, 0x96, 0x3c, 0xea, 0x35, 0x35, 0x0c, 0x13, 0xe2, 0xc5, 0x7c, 0x11, 0x52, 0x9f, 0x26,
	0x5f, 0x84, 0x3a, 0xaf, 0x2e, 0x5f, 0x84, 0x8c, 0xc7, 0x7c, 0x77, 0x6e, 0x78, 0xc5, 0xf7, 0x29,
	0xd5, 0x37, 0x0e, 0xa1, 0x7a, 0x14, 0xb1, 0x15, 0x62, 0x5e, 0xcd, 0x1f, 0x48, 0x79, 0x35, 0x15,
	0xf6, 0xb0, 0x63, 0x5b, 0xc2, 0xd7, 0x87, 0xdf, 0x6d, 0xff, 0x90, 0x4e, 0x7e, 0x22, 0x6f, 0xf2,
	0x32, 0x25, 0x77, 0x79, 0x99, 0x90, 0xdc, 0xc5, 0x0d, 0x05, 0x9b, 0xc8, 0x1f, 0xcd, 0xc1, 0xa2,
	0x92, 0x8c, 0xa8, 0x95, 0x06, 0xcd, 0xc2, 0xc6, 0x7f, 0x72, 0x2b, 0x88, 0x94, 0xc9, 0x45, 0x44,
	0xa7, 0xcb, 0x99, 0xb2, 0x12, 0x66, 0x21, 0x93, 0xaf, 0x37, 0xd0, 0x1e, 0x8d, 0x5e, 0x8e, 0x6b,
	0x7f, 0x3d, 0x05, 0x0b, 0xc3, 0xab, 0x8a, 0xf0, 0xd2, 0x3f, 0x4f, 0x96, 0x93, 0xda, 0x2e, 0x10,
	0xa4, 0xc3, 0x0c, 0x56, 0x93, 0xaa, 0xe7, 0xe3, 0x85, 0xcf, 0x1b, 0xe8, 0xa6, 0x87, 0xc2, 0x12,
	0xcb, 0xa8, 0x8a, 0x7f, 0xce, 0x40, 0xd7, 0x6d, 0x93, 0x09, 0x96, 0x91, 0xfc, 0xcf, 0x1a, 0xe8,
	0xda, 0xed, 0x71, 0xc1, 0x32, 0x52, 0xff, 0x69, 0x03, 0x2d, 0x0c, 0xe7, 0x86, 0x65, 0xa4, 0xfc,
	0xc3, 0x06, 0xda, 0xa7, 0x67, 0x98, 0x65, 0xa4, 0xf6, 0xf7, 0x0c, 0x74, 0xe3, 0xf6, 0x39, 0x6c,
	0x19, 0x9f, 0xe0, 0x1b, 0x53, 0x68, 0x42, 0x7c, 0x82, 0xea, 0xb4, 0x5c, 0x9d, 0x96, 0xab, 0xd3,
	0xf2, 0x88, 0x4e, 0xcb, 0x6f, 0x31, 0xd0, 0x1c, 0x3c, 0x6e, 0xc9, 0xb6, 0x47, 0xed, 0xb5, 0x50,
	0x96, 0x22, 0x14, 0x72, 0x4a, 0xf1, 0x6c, 0x79, 0xbd, 0xee, 0x2c, 0xa7, 0x3d, 0x56, 0xee, 0xf3,
	0xb4, 0x38, 0x92, 0xdd, 0x29, 0x43, 0xd3, 0xc3, 0xe4, 0x64, 0x96, 0x33, 0x64, 0x8f, 0x34, 0x7d,
	0x7a, 0x90, 0xbc, 0x56, 0x3f, 0xb9, 0x72, 0x86, 0xdc, 0xe3, 0x69, 0xe0, 0xcd, 0x4f, 0x16, 0x1f,
	0x55, 0x1e, 0x2c, 0x50, 0xfa, 0x1f, 0xcd, 0x63, 0xca, 0x3b, 0x72, 0x8f, 0x29, 0xec, 0xb0, 0x7b,
	0x6d, 0x01, 0xc5, 0xa3, 0x38, 0xa2, 0xbc, 0x50, 0x38, 0xa2, 0xb0, 0xd3, 0xaa, 0x56, 0xb5, 0xdd,
	0xf9, 0xf1, 0xe4, 0xcb, 0xc3, 0x8f, 0x27, 0x45, 0x07, 0xcd, 0x32, 0x1d, 0x4d, 0x7e, 0x47, 0x36,
	0x62, 0x64, 0x67, 0x6e, 0x7e, 0x4a, 0xf9, 0xaa, 0x54, 0x1d, 0x53, 0xa7, 0xdd, 0x2e, 0x5d, 0x90,
	0x2f, 0x07, 0xb2, 0x1e, 0x7e, 0x76, 0x79, 0x62, 0xd1, 0x19, 0x5f, 0x5f, 0x1c, 0xd3, 0x2b, 0xc0,
	0xa8, 0x68, 0x7f, 0x8f, 0x1d, 0xbd, 0xf5, 0x13, 0x06, 0x3a, 0x5c, 0xbc, 0x3d, 0xca, 0x48, 0xf5,
	0x07, 0x0c, 0x78, 0x99, 0x5b, 0x5e, 0x7d, 0x55, 0x3e, 0xd5, 0x3c, 0xb6, 0x74, 0xd5, 0x2f, 0x4c,
	0xa0, 0x69, 0x39, 0x31, 0x66, 0xa5, 0xaf, 0x56, 0xfa, 0x6a, 0xa5, 0xaf, 0x8e, 0x48, 0x5f, 0xdd,
	0xd2, 0xa5, 0x1f, 0x17, 0x12, 0xc9, 0x69, 0xd3, 0x8a, 0xc3, 0x4c, 0x72, 0x7a, 0xf8, 0xc2, 0xb4,
	0xe2, 0xe4, 0xa5, 0xbe, 0x8a, 0x98, 0xdf, 0x65, 0xd8, 0x4d, 0xcf, 0xf6, 0x49, 0x4a, 0xff, 0x49,
	0xb2, 0x05, 0x89, 0xa2, 0x27, 0xcf, 0x7f, 0x97, 0x67, 0xfb, 0x20, 0xa5, 0x7f, 0x3e, 0x1a, 0xa0,
	0xe8, 0x79, 0x7a, 0x3c, 0xc0, 0xd4, 0xfb, 0xa0, 0x62, 0xea, 0x95, 0x48, 0x7f, 0x24, 0x4d, 0xbd,
	0xdf, 0x51, 0x4c, 0xbd, 0x12, 0xc1, 0x25, 0xd2, 0xa7, 0x5e, 0x6d, 0xc0, 0x42, 0x14, 0x4a, 0x4e,
	0x3a, 0x53, 0xcd, 0x97, 0x4d, 0xac, 0xab, 0xa6, 0xf0, 0x9b, 0x6b, 0x4c, 0x9a, 0xe2, 0x14, 0x5a,
	0x3d, 0xc9, 0xe4, 0x75, 0x19, 0x32, 0xed, 0x88, 0x5a, 0x98, 0x74, 0xdf, 0xa9, 0xbc, 0x16, 0xa6,
	0xed, 0x7e, 0xd8, 0x32, 0x3e, 0xc1, 0x9f, 0xd4, 0xd0, 0x24, 0x7b, 0x02, 0x9a, 0xac, 0xb0, 0x12,
	0xd9, 0x95, 0xc8, 0xae, 0x44, 0xf6, 0x88, 0x44, 0xf6, 0x07, 0x0d, 0x74, 0x30, 0x5d, 0xa1, 0x4e,
	0x2b, 0x4b, 0x72, 0x17, 0x75, 0x9c, 0x98, 0x9c, 0x31, 0x99, 0x9d, 0x69, 0x4e, 0x4a, 0xa3, 0x97,
	0xf4, 0x27, 0xe7, 0x4a, 0x9a, 0x08, 0x63, 0x39, 0x43, 0x20, 0x75, 0x73, 0x2f, 0x86, 0xa2, 0x39,
	0x40, 0x22, 0x8c, 0x66, 0x1e, 0x2e, 0xf3, 0x53, 0xc4, 0xe3, 0xbd, 0x23, 0xe6, 0x3e, 0x6d, 0x6d,
	0x34, 0x43, 0x2b, 0x72, 0x92, 0x9d, 0x81, 0x9d, 0x68, 0x93, 0x59, 0x9f, 0xc4, 0x2c, 0xb2, 0x69,
	0xa1, 0x28, 0x87, 0xae, 0xc1, 0x3b, 0xe9, 0x71, 0x5b, 0xe0, 0x36, 0x27, 0xcf, 0x2c, 0x37, 0xce,
	0x27, 0x18, 0xd6, 0x08, 0x02, 0xd1, 0xcd, 0xbd, 0x78, 0x2a, 0xe9, 0xbc, 0x2d, 0xa2, 0xdc, 0x68,
	0x86, 0x02, 0x4a, 0xf3, 0xad, 0xc4, 0x58, 0x00, 0xb0, 0x75, 0xec, 0xd8, 0xb9, 0x64, 0x6f, 0x59,
	0xce, 0xbd, 0xb1, 0x13, 0xf9, 0xb6, 0xc7, 0x8a, 0x48, 0x5d, 0x50, 0xc8, 0xbb, 0x9d, 0x0e, 0x3c,
	0xc5, 0xc6, 0x89, 0xd6, 0x80, 0x42, 0x84, 0xf9, 0xd4, 0x49, 0x18, 0xcd, 0x2e, 0x9a, 0x95, 0x70,
	0x91, 0x4d, 0x33, 0xc5, 0x0b, 0x76, 0x01, 0x82, 0xd8, 0xde, 0xb9, 0x46, 0x4b, 0x85, 0xbc, 0x87,
	0x66, 0x3c, 0x19, 0x94, 0xa4, 0x55, 0xda, 0xbc, 0x37, 0x51, 0xa8, 0xb2, 0x62, 0x2d, 0x2d, 0xc7,
	0x8f, 0xdd, 0xb6, 0xeb, 0x44, 0x2c, 0x49, 0x0f, 0x49, 0x59, 0x74, 0x57, 0x32, 0x26, 0xad, 0x18,
	0x90, 0x8d, 0xe0, 0x29, 0x8b, 0xf2, 0x70, 0xc0, 0x34, 0xb3, 0x5a, 0x24, 0x66, 0x88, 0x76, 0xad,
	0x77, 0xc2, 0xcd, 0xd0, 0x07, 0x46, 0x27, 0x59, 0x4b, 0x63, 0xa9, 0x73, 0x6f, 0x6f, 0xdc, 0xd5,
	0x38, 0x97, 0x28, 0x45, 0x64, 0xbf, 0x67, 0x3f, 0x05, 0x49, 0x23, 0xe0, 0x02, 0xfb, 0x9d, 0xb6,
	0x13, 0xfd, 0xe6, 0xd7, 0xf3, 0x4a, 0xcd, 0x7c, 0x5f, 0x31, 0xfe, 0x09, 0x73, 0x8f, 0xa8, 0xda,
	0xcc, 0x2b, 0x0d, 0x34, 0x0d, 0xb2, 0x5b, 0x0a, 0x5e, 0x0a, 0x0b, 0x5a, 0xc2, 0x84, 0x1c, 0x97,
	0x4e, 0x9b, 0x26, 0x4f, 0x06, 0x4d, 0x42, 0xf2, 0x64, 0x19, 0x31, 0x48, 0x9e, 0x1c, 0x01, 0x20,
	0xf3, 0x75, 0x06, 0x9a, 0x01, 0xdc, 0x41, 0x74, 0x59, 0x38, 0x56, 0x44, 0x49, 0x32, 0x3a, 0x2b,
	0x0f, 0x04, 0xdb, 0x84, 0x20, 0x10, 0x05, 0x37, 0xc8, 0x88, 0x13, 0x41, 0x30, 0xf3, 0x9d, 0xb9,
	0x16, 0xdb, 0x1f, 0x29, 0x31, 0x8c, 0x02, 0x45, 0x23, 0x34, 0xd9, 0xda, 0x6a, 0xce, 0x9e, 0x03,
	0x5a, 0x9a, 0x76, 0x7e, 0xce, 0xf8, 0xca, 0xf0, 0x73, 0xc6, 0x4f, 0x14, 0xd7, 0x26, 0x61, 0xe6,
	0x32, 0x1d, 0x32, 0x7e, 0x3d, 0xaf, 0x58, 0x10, 0x2b, 0x8e, 0x75, 0x6d, 0xd1, 0x13, 0x3c, 0xd2,
	0xf5, 0x82, 0xbe, 0x68, 0xa0, 0x85, 0x96, 0x1d, 0xdb, 0x56, 0xd3, 0x49, 0x88, 0xa6, 0xcf, 0xd8,
	0x0c, 0x7c, 0xdf, 0x69, 0xc6, 0xc2, 0x71, 0xe8, 0x3f, 0xcf, 0x41, 0x5e, 0x75, 0xd2, 0x8e, 0xed,
	0x65, 0x02, 0xb1, 0x22, 0x00, 0x2c, 0x3d, 0x7b, 0xd0, 0xaf, 0x1f, 0xce, 0xe9, 0xe3, 0xc7, 0xa4,
	0x9f, 0x62, 0xca, 0xe5, 0xd0, 0x69, 0x41, 0x48, 0x57, 0xab, 0x10, 0x2d, 0xf1, 0xda, 0x09, 0x83,
	0x28, 0xb6, 0xe2, 0x5e, 0x08, 0xb2, 0x3c, 0x7d, 0x43, 0xf2, 0xda, 0x69, 0x04, 0x51, 0x7c, 0x21,
	0x19, 0x43, 0xbd, 0x76, 0xf8, 0x4f, 0xc5, 0x6b, 0x47, 0x87, 0x0e, 0x88, 0x99, 0x50, 0x86, 0x15,
	0x4f, 0x71, 0x12, 0x1f, 0x2f, 0xaf, 0x5d, 0xbb, 0x88, 0xf3, 0x97, 0x37, 0xac, 0x2a, 0x4f, 0x2c,
	0x94, 0xb5, 0x90, 0x4b, 0x81, 0xf8, 0x28, 0x23, 0xc9, 0x34, 0x46, 0xbc, 0x50, 0xbe, 0x94, 0x91,
	0xec, 0x0f, 0x1a, 0x68, 0x56, 0x23, 0x82, 0xca, 0xeb, 0x89, 0xb6, 0x2d, 0x99, 0x55, 0x46, 0xf2,
	0xdf, 0x74, 0x85, 0xc4, 0x3b, 0x1e, 0x13, 0xb5, 0xbf, 0x5f, 0x00, 0x12, 0x4f, 0x5f, 0xb7, 0x0d,
	0xc9, 0xfb, 0xd0, 0x2a, 0x80, 0xff, 0x06, 0x42, 0x53, 0xab, 0x3d, 0x2f, 0x76, 0x9b, 0x36, 0x8e,
	0x1b, 0x81, 0xe7, 0x36, 0xb7, 0x2a, 0xbb, 0x52, 0x65, 0x57, 0xaa, 0xec, 0x4a, 0x23, 0xb2, 0x2b,
	0xbd, 0xcd, 0x40, 0x73, 0xdd, 0x74, 0xff, 0x59, 0x38, 0xe8, 0x45, 0x4d, 0x87, 0xe6, 0xb5, 0x4b,
	0x5d, 0x97, 0xb2, 0x72, 0xb8, 0xd9, 0x36, 0x5d, 0x23, 0xa3, 0x48, 0x22, 0x2d, 0x4c, 0xf3, 0xcd,
	0x69, 0xbb, 0xb8, 0xfb, 0x52, 0xce, 0x04, 0x20, 0xdf, 0x5c, 0x57, 0x87, 0xc2, 0x6c, 0xaa, 0x01,
	0x92, 0x2a, 0x3d, 0x94, 0x6d, 0xec, 0xfc, 0xec, 0x54, 0x5c, 0x6c, 0xe7, 0x8b, 0x8f, 0x76, 0xb1,
	0x9d, 0x0f, 0x19, 0x68, 0xaf, 0xf6, 0x59, 0xcb, 0x28, 0xe5, 0x7e, 0x7f, 0x1c, 0x8d, 0x27, 0x5b,
	0x14, 0x87, 0xd5, 0xa5, 0x7e, 0xc5, 0xc9, 0x2b, 0x4e, 0x3e, 0x3a, 0x4e, 0x1e, 0xa0, 0xdd, 0x7e,
	0xba, 0xf1, 0xac, 0xa6, 0xdb, 0x8a, 0x18, 0xff, 0xd6, 0xd5, 0xa5, 0xbf, 0x6d, 0xd0, 0xaf, 0x4f,
	0x66, 0xdb, 0x74, 0xd9, 0x6d, 0x45, 0xbc, 0x88, 0x39, 0x44, 0x22, 0xce, 0x33, 0xe9, 0x8b, 0x10,
	0x85, 0x55, 0xe1, 0x32, 0xdc, 0x3b, 0xe7, 0xca, 0x97, 0xd0, 0x4c, 0x18, 0x05, 0x77, 0x43, 0xb3,
	0x0a, 0x63, 0xc6, 0x53, 0xd9, 0x4b, 0xa6, 0x23, 0xa8, 0x3d, 0x31, 0xfd, 0xc1, 0xd9, 0x2f, 0xb3,
	0x27, 0x2a, 0x78, 0x80, 0x3d, 0x31, 0x84, 0x60, 0xa4, 0xb8, 0x99, 0x44, 0x7f, 0x19, 0x39, 0xed,
	0x7d, 0xe3, 0x68, 0x96, 0x89, 0x8a, 0x93, 0x4e, 0x72, 0xd2, 0xa4, 0xec, 0xad, 0xe2, 0xb9, 0x15,
	0xcf, 0xad, 0x78, 0xee, 0x88, 0x78, 0xee, 0x6f, 0xe4, 0x5d, 0x17, 0x7d, 0xfb, 0x6a, 0x58, 0x95,
	0x5f, 0xb3, 0x51, 0x47, 0x74, 0x69, 0xd4, 0x51, 0xb9, 0xf4, 0xd1, 0x02, 0xaa, 0x76, 0x9e, 0x63,
	0xe4, 0x33, 0x06, 0xba, 0x66, 0x3b, 0x8f, 0x59, 0x46, 0x5e, 0xfa, 0x31, 0x03, 0xed, 0xcf, 0x7d,
	0x19, 0x65, 0x24, 0xf8, 0x4f, 0xa7, 0xd0, 0x2e, 0xa1, 0x4c, 0x7b, 0xc5, 0xf4, 0x2b, 0xa6, 0x5f,
	0x31, 0xfd, 0x11, 0x31, 0x7d, 0x17, 0x99, 0x6e, 0x68, 0x77, 0x2d, 0x4c, 0xf4, 0x69, 0xab, 0xeb,
	0xc4, 0x1b, 0x41, 0x8b, 0x79, 0xce, 0xfe, 0xd3, 0x41, 0xbf, 0x3e, 0x9d, 0xec, 0x48, 0xaa, 0x6c,
	0xaf, 0x92, 0xbe, 0xcb, 0xfd, 0xfa, 0x31, 0xf6, 0xe5, 0x14, 0x38, 0x90, 0xde, 0xd0, 0x95, 0x00,
	0xcd, 0x0d, 0x34, 0x21, 0x80, 0xa4, 0x09, 0x4b, 0xf8, 0x52, 0xc9, 0xc6, 0x63, 0xba, 0x11, 0x84,
	0x06, 0xbe, 0x11, 0x44, 0x0c, 0x60, 0x23, 0xf0, 0xe9, 0xb0, 0x69, 0xa1, 0x29, 0x61, 0x5c, 0xec,
	0xfa, 0x1d, 0xe6, 0xea, 0xf2, 0x94, 0x41, 0xbf, 0xbe, 0x9b, 0xe3, 0x4d, 0x7a, 0x2e, 0xf7, 0xeb,
	0x47, 0x14, 0xd4, 0x49, 0x07, 0xf0, 0x19, 0x70, 0x01, 0x4c, 0xa2, 0xce, 0x67, 0x4e, 0x20, 0x09,
	0x54, 0xb7, 0xd3, 0x8d, 0x89, 0xf3, 0xca, 0xae, 0x13, 0xd3, 0xe2, 0xf3, 0x90, 0x75, 0x4f, 0xd4,
	0x79, 0x81, 0xbf, 0xad, 0xde, 0xbe, 0x7a, 0x81, 0xab, 0xf3, 0x0a, 0x1e, 0xa0, 0xce, 0xfb, 0x02,
	0x58, 0xa7, 0x1b, 0x83, 0x82, 0x39, 0xdf, 0x95, 0x0a, 0xe6, 0x08, 0x53, 0xec, 0xfc, 0xa0, 0xf2,
	0x72, 0x03, 0x4d, 0xa7, 0x06, 0x9e, 0x93, 0xe7, 0xd6, 0x80, 0xaf, 0xca, 0x11, 0xcd, 0x4c, 0xcc,
	0x58, 0x74, 0xf2, 0xdc, 0x5a, 0xe6, 0x94, 0x01, 0x9a, 0x04, 0xa7, 0x0c, 0x19, 0x2d, 0x78, 0xc1,
	0x9b, 0x00, 0xa8, 0xc0, 0x35, 0xf7, 0x6b, 0x23, 0x76, 0xcd, 0x1d, 0x62, 0x50, 0xfb, 0xfa, 0xa3,
	0x6c, 0x50, 0x33, 0xef, 0x37, 0x50, 0x2d, 0x45, 0xa0, 0x94, 0xfe, 0x66, 0xd1, 0x60, 0x7b, 0x25,
	0xea, 0xd8, 0xe5, 0xf4, 0xe9, 0x41, 0xbf, 0xbe, 0x17, 0x36, 0x71, 0xda, 0x6e, 0x80, 0xb4, 0x15,
	0xd5, 0xfd, 0xde, 0xbb, 0xa9, 0xc3, 0x41, 0x6a, 0x1d, 0x29, 0x6b, 0xb2, 0x8c, 0xfa, 0xc7, 0x47,
	0x0d, 0x54, 0xcb, 0x5b, 0xd2, 0x65, 0xa4, 0xf7, 0xcf, 0x76, 0xa1, 0x49, 0x46, 0x6f, 0x75, 0xc9,
	0x54, 0x69, 0x4c, 0x95, 0xc6, 0x34, 0x52, 0x8d, 0xe9, 0x57, 0x0c, 0xb4, 0x2f, 0xe5, 0xd4, 0x21,
	0xd9, 0x7e, 0x96, 0xe3, 0xc7, 0x11, 0x0f, 0x8f, 0xdf, 0xcf, 0x7d, 0x8d, 0x92, 0xde, 0x53, 0xb4,
	0x93, 0xd7, 0x10, 0x04, 0x5b, 0x97, 0xf5, 0x0a, 0x85, 0xe5, 0xb4, 0xa8, 0xc1, 0xfe, 0xf0, 0x35,
	0x08, 0x80, 0x5b, 0xde, 0x03, 0x92, 0x5b, 0x1e, 0x98, 0x71, 0xe7, 0xba, 0xc1, 0xe7, 0x0d, 0x74,
	0x14, 0x3b, 0xcd, 0x5e, 0xe4, 0xc6, 0x5b, 0x96, 0x17, 0x74, 0x3a, 0xae, 0xdf, 0xb1, 0x82, 0x75,
	0xbd, 0x55, 0xf3, 0x10, 0x2f, 0xeb, 0x4c, 0x21, 0xce, 0x52, 0x80, 0x3b, 0xc8, 0x78, 0x92, 0xfc,
	0xfb, 0x90, 0xbe, 0x8b, 0xcb, 0xa0, 0x13, 0xa9, 0x9f, 0xe2, 0x90, 0x39, 0x41, 0xc6, 0x34, 0x5c,
	0x84, 0x74, 0x88, 0x34, 0xff, 0xd2, 0xa3, 0x7d, 0x3d, 0xf6, 0x41, 0x23, 0xb3, 0x83, 0x96, 0xfd,
	0x72, 0xac, 0x3f, 0x8b, 0x76, 0x09, 0x25, 0x12, 0x2b, 0x19, 0x54, 0xc9, 0xa0, 0x4a, 0x06, 0x8d,
	0x48, 0x06, 0xbd, 0xca, 0x40, 0xf3, 0xa0, 0x02, 0x69, 0x8b, 0x18, 0xfa, 0xac, 0xb6, 0xdd, 0x75,
	0xbd, 0x2d, 0x76, 0x7c, 0x27, 0x81, 0xa7, 0xc2, 0x0e, 0xa5, 0xc6, 0xc0, 0xd3, 0x64, 0x08, 0x0f,
	0x3c, 0xcd, 0x47, 0x03, 0x02, 0x4f, 0x7d, 0x3d, 0x1e, 0x52, 0xba, 0x16, 0xa0, 0xd8, 0x70, 0x63,
	0xcf, 0xc1, 0xd8, 0xea, 0x85, 0x9d, 0xc8, 0x6e, 0x39, 0xe4, 0x94, 0xcf, 0x4a, 0xd7, 0x0a, 0xb4,
	0x9c, 0xa1, 0xa3, 0xee, 0xa4, 0x83, 0x78, 0xc4, 0x4e, 0x11, 0x2a, 0x10, 0xb1, 0xe3, 0xe7, 0xe1,
	0x4a, 0xde, 0x8d, 0x09, 0xd0, 0x44, 0x01, 0x2f, 0x5c, 0x7d, 0x50, 0x53, 0xed, 0xf5, 0x7c, 0xd2,
	0x4f, 0xd6, 0x3a, 0x31, 0x78, 0xc8, 0x3d, 0xdc, 0xe0, 0xa1, 0x62, 0x05, 0x06, 0x0f, 0x5f, 0x02,
	0x34, 0x1d, 0x34, 0x03, 0x40, 0x84, 0x10, 0x17, 0x6a, 0x13, 0xe0, 0x00, 0xb0, 0x88, 0xae, 0x02,
	0x05, 0x6d, 0x02, 0x10, 0xcc, 0xec, 0xa2, 0x59, 0x00, 0xb0, 0xe9, 0xf8, 0xad, 0x20, 0x0d, 0x6b,
	0x21, 0xb1, 0x34, 0xc2, 0x44, 0x77, 0x91, 0x4e, 0x1e, 0x4b, 0xa3, 0x81, 0x04, 0x4e, 0xce, 0xbe,
	0x0c, 0x6a, 0xde, 0x8b, 0x26, 0x37, 0xec, 0xa8, 0x75, 0xc9, 0x8e, 0x1c, 0x7d, 0x24, 0x8b, 0xf8,
	0x99, 0xd9, 0xc0, 0x44, 0xe1, 0x38, 0x31, 0xe8, 0xd7, 0x27, 0x84, 0x86, 0xe4, 0xc5, 0x1e, 0x66,
	0x0c, 0x4a, 0xc4, 0x27, 0x4e, 0x3f, 0xb1, 0x21, 0x8c, 0x37, 0x5f, 0x63, 0x48, 0x55, 0x89, 0xc5,
	0x60, 0x96, 0xa3, 0x9a, 0xe9, 0x85, 0x4a, 0xbb, 0x59, 0x9c, 0x06, 0x6c, 0xc3, 0x39, 0x95, 0x8b,
	0x95, 0x7b, 0xd5, 0xbb, 0x21, 0x98, 0xf9, 0x66, 0x03, 0xed, 0x49, 0x96, 0x80, 0xd5, 0x72, 0xda,
	0xae, 0xef, 0x12, 0x39, 0x22, 0x86, 0xb0, 0x5c, 0x93, 0xb3, 0xd0, 0x4e, 0x66, 0xc3, 0xb3, 0x4b,
	0x12, 0xa5, 0x59, 0xb8, 0x24, 0xd1, 0x4d, 0x01, 0x0c, 0x16, 0x91, 0x02, 0x0c, 0x6c, 0x44, 0x3f,
	0x94, 0x6d, 0x44, 0xc2, 0xda, 0xd9, 0xb1, 0x1e, 0x18, 0xa1, 0xe9, 0xb6, 0xbd, 0x1e, 0xb9, 0x4d,
	0x35, 0x3b, 0xe6, 0xee, 0x74, 0xa2, 0xd3, 0x64, 0x00, 0x35, 0x08, 0xb1, 0xff, 0xb9, 0xa6, 0xc4,
	0x0c, 0x42, 0x32, 0x12, 0x60, 0x10, 0x6a, 0x03, 0x20, 0x73, 0x03, 0xed, 0x26, 0x4b, 0x55, 0xa9,
	0xdf, 0x3c, 0x21, 0x3e, 0xda, 0xd2, 0x4f, 0x25, 0x8b, 0x8c, 0xfc, 0xc7, 0x67, 0xab, 0x0b, 0x2b,
	0x5d, 0x3b, 0xd7, 0x84, 0x2f, 0x00, 0x10, 0x0d, 0x51, 0xbe, 0x9b, 0xe2, 0xb3, 0xfe, 0xb1, 0xa4,
	0x21, 0xc2, 0x1b, 0x21, 0xaa, 0x21, 0x4a, 0x6d, 0x8a, 0x86, 0x98, 0x8b, 0x1d, 0x68, 0x88, 0xa1,
	0x16, 0x8b, 0xb9, 0x81, 0x26, 0xc8, 0xa2, 0xa0, 0x0a, 0x4a, 0x96, 0x10, 0xd4, 0xe4, 0xb1, 0x92,
	0x1e, 0xbb, 0xf0, 0xa1, 0x8a, 0x09, 0xff, 0x2d, 0x58, 0x51, 0x45, 0x0c, 0x40, 0x31, 0x89, 0xf8,
	0x68, 0x12, 0xcd, 0xa0, 0xdf, 0xcb, 0xa5, 0xbd, 0xf5, 0xca, 0xdb, 0xfa, 0x65, 0x24, 0xf8, 0xdf,
	0x1a, 0xe8, 0x60, 0x11, 0x73, 0x28, 0x23, 0xcd, 0xc4, 0xa4, 0x27, 0xb3, 0x90, 0x32, 0x12, 0xfa,
	0x86, 0x69, 0x74, 0x55, 0x42, 0x68, 0x75, 0x2a, 0xa9, 0x4e, 0x25, 0xd5, 0xa9, 0x64, 0x44, 0xa7,
	0x92, 0x17, 0xa2, 0xb1, 0xf5, 0x2e, 0xb6, 0x5c, 0xbf, 0x1d, 0x30, 0x53, 0x58, 0x66, 0x81, 0x5a,
	0xb2, 0x23, 0xa7, 0xeb, 0xc4, 0xb6, 0x47, 0xa3, 0xd3, 0x57, 0xfc, 0x76, 0x40, 0xbf, 0xe1, 0xd2,
	0xea, 0x5a, 0xf2, 0x83, 0x7f, 0xc3, 0x14, 0x03, 0xf8, 0x86, 0xeb, 0x5d, 0x9c, 0x8c, 0x32, 0xdb,
	0x08, 0x35, 0xbd, 0xa0, 0xd7, 0xa2, 0x73, 0x4c, 0x42, 0x73, 0xdb, 0x72, 0xd2, 0x93, 0x5d, 0xff,
	0x24, 0x33, 0xdc, 0x34, 0xe8, 0xd7, 0xc7, 0x59, 0x33, 0x99, 0xe3, 0x00, 0xdb, 0x68, 0x19, 0x0e,
	0x71, 0x96, 0xf1, 0x66, 0x3a, 0xd2, 0x7c, 0x2e, 0xda, 0xdd, 0x72, 0xf1, 0x3d, 0x56, 0x68, 0x47,
	0x31, 0xe1, 0xc7, 0xac, 0x5a, 0x01, 0x71, 0x35, 0x3c, 0xe9, 0xe2, 0x7b, 0x1a, 0x69, 0x07, 0xd7,
	0x2f, 0x20, 0x00, 0x70, 0x35, 0x6c, 0x89, 0x10, 0xe6, 0xf3, 0xd1, 0xb8, 0x83, 0xef, 0x75, 0xe9,
	0x33, 0xd0, 0x4b, 0xc3, 0x3d, 0xe9, 0x33, 0x9c, 0x5a, 0x7b, 0xd6, 0xca, 0x99, 0x00, 0xc7, 0x84,
	0xfc, 0x1b, 0x07, 0xfd, 0xfa, 0xd8, 0x29, 0x7c, 0xaf, 0xcb, 0xa8, 0x9f, 0xa7, 0x13, 0x65, 0xc0,
	0xe2, 0x1c, 0x63, 0x0e, 0x1b, 0x67, 0x9e, 0x42, 0x63, 0x1b, 0x01, 0x8e, 0xc9, 0x5a, 0xa7, 0x67,
	0x80, 0x1b, 0x12, 0x3c, 0x67, 0x58, 0x1b, 0x7f, 0xd3, 0xe9, 0x28, 0x80, 0x26, 0x6d, 0x4c, 0x5e,
	0x01, 0x8f, 0x78, 0x25, 0xc8, 0x66, 0xf8, 0x2b, 0xc8, 0xc2, 0x93, 0xd8, 0x0e, 0xaa, 0xa7, 0xf7,
	0x6b, 0x22, 0x00, 0x78, 0x05, 0xae, 0x08, 0x61, 0x3e, 0x1d, 0x21, 0x37, 0xb4, 0x6c, 0x9a, 0x25,
	0xa1, 0x66, 0x12, 0xc4, 0xe4, 0x63, 0xad, 0x34, 0x58, 0xea, 0x04, 0xfe, 0xb1, 0xf8, 0x40, 0xf0,
	0xb1, 0xdc, 0x34, 0xc9, 0x42, 0xb2, 0xa1, 0xba, 0x76, 0x33, 0xc3, 0x36, 0xcb, 0x37, 0xd4, 0xaa,
	0xdd, 0xe4, 0xe8, 0xd8, 0x86, 0x12, 0x86, 0x82, 0x0d, 0xd5, 0xcd, 0xc6, 0x9a, 0xb7, 0xa3, 0x71,
	0xa2, 0x2c, 0x92, 0x0d, 0xbf, 0x87, 0xa0, 0x23, 0x9f, 0x22, 0x11, 0x28, 0x6c, 0xbb, 0xcf, 0x0b,
	0x3a, 0xa5, 0xbc, 0xd9, 0xc7, 0x7c, 0x36, 0xce, 0x7c, 0xa9, 0x21, 0x9d, 0x00, 0xc5, 0x40, 0xee,
	0x79, 0x51, 0x71, 0x15, 0x15, 0x81, 0xf4, 0xa4, 0x02, 0xdb, 0x70, 0xce, 0xf1, 0x50, 0x39, 0xa9,
	0xf8, 0x10, 0x2c, 0xe1, 0xa8, 0x72, 0xbc, 0xb6, 0x29, 0x4e, 0xbd, 0xf3, 0x73, 0xc0, 0x19, 0xf4,
	0xb8, 0x30, 0x88, 0x62, 0x5c, 0xfb, 0x9b, 0x29, 0xa8, 0x8a, 0x37, 0x82, 0x28, 0x5e, 0x3a, 0x36,
	0xe8, 0xd7, 0x1f, 0x97, 0xfc, 0x97, 0xa0, 0xdb, 0xc7, 0x63, 0x6a, 0x01, 0x2e, 0x8a, 0xc0, 0x6c,
	0xa2, 0x5d, 0x24, 0xdc, 0x96, 0xc5, 0x6a, 0x7c, 0x6b, 0x4a, 0x0d, 0xda, 0x25, 0x31, 0x14, 0x8c,
	0x4f, 0xa6, 0x3f, 0x85, 0xcf, 0x2a, 0x80, 0x43, 0x3e, 0x99, 0x8d, 0x25, 0x19, 0x11, 0xd5, 0x77,
	0x5d, 0x46, 0xed, 0xe5, 0x9d, 0x06, 0x42, 0xfc, 0xd3, 0x94, 0x91, 0xc2, 0x37, 0x23, 0xb4, 0xeb,
	0x8e, 0x4d, 0x27, 0xf2, 0xec, 0xad, 0x44, 0x71, 0xad, 0xd4, 0xac, 0x4a, 0xcd, 0xaa, 0xd4, 0xac,
	0x11, 0xa9, 0x59, 0xa2, 0x7d, 0xe7, 0xdb, 0x92, 0x7d, 0x47, 0xd8, 0x93, 0x0f, 0x2f, 0x84, 0x2c,
	0xdf, 0x02, 0xf2, 0x07, 0x8f, 0xb6, 0x05, 0x24, 0x21, 0x4f, 0xb6, 0x8b, 0xe5, 0x47, 0xb8, 0xc1,
	0x73, 0x35, 0x25, 0x4f, 0x6a, 0x53, 0xc8, 0xcb, 0xc5, 0x0e, 0xc8, 0x8b, 0xb4, 0x58, 0xc8, 0x19,
	0x59, 0xf9, 0x0c, 0x65, 0xe4, 0xe1, 0x7f, 0x3b, 0x8e, 0x26, 0x1b, 0x8e, 0x13, 0xb9, 0x7e, 0xa7,
	0x72, 0x23, 0xa9, 0xb8, 0x78, 0xc5, 0xc5, 0x47, 0xcc, 0xc5, 0xa7, 0x42, 0xba, 0xf9, 0x2c, 0x96,
	0x65, 0x89, 0x5d, 0xdb, 0x11, 0x1f, 0x55, 0xb6, 0x2f, 0x59, 0xda, 0x0d, 0xee, 0xa3, 0x2a, 0x81,
	0x00, 0x8b, 0x79, 0x08, 0x60, 0x0a, 0x1d, 0x42, 0xc0, 0xb6, 0xdf, 0xb9, 0xa0, 0xf8, 0xa8, 0x81,
	0x0e, 0x39, 0x27, 0x52, 0x62, 0xb2, 0x72, 0x0a, 0x2a, 0x37, 0xce, 0xe4, 0xd3, 0xa9, 0x13, 0x8c,
	0xbc, 0xb4, 0xb2, 0x02, 0x29, 0x49, 0xb8, 0x5f, 0x6d, 0xe6, 0x3c, 0xf9, 0x16, 0x76, 0xea, 0x2d,
	0x9a, 0x07, 0x5c, 0x0d, 0x3a, 0x79, 0xc8, 0x88, 0x77, 0x85, 0xe6, 0xd1, 0x4b, 0xc9, 0x9c, 0xf7,
	0xa1, 0x99, 0x54, 0x8a, 0x56, 0x79, 0xc5, 0x2b, 0x06, 0x5d, 0x31, 0xe8, 0x51, 0x33, 0xe8, 0xfb,
	0x0c, 0x74, 0xc0, 0x89, 0x37, 0x9c, 0xc8, 0x77, 0x62, 0x0b, 0x3b, 0x9d, 0x6e, 0x42, 0xb9, 0x90,
	0x36, 0x92, 0x72, 0xeb, 0x55, 0xc2, 0xbe, 0xd8, 0xb0, 0x35, 0x3a, 0x0a, 0x64, 0x8e, 0xbc, 0x89,
	0xb1, 0xaf, 0x7c, 0x4c, 0x90, 0x79, 0xe5, 0xa1, 0x32, 0x3f, 0x63, 0xa0, 0x23, 0x99, 0xde, 0xcc,
	0x2d, 0x6d, 0x82, 0x3d, 0x2b, 0x2b, 0x02, 0x9b, 0x15, 0xe8, 0xe1, 0x06, 0x30, 0xe6, 0xe1, 0x70,
	0xd7, 0xa0, 0x5f, 0x3f, 0xa4, 0xf0, 0x15, 0x71, 0x18, 0xcf, 0x45, 0x3a, 0x6c, 0x32, 0xe0, 0x75,
	0x17, 0x16, 0xe1, 0x24, 0xfe, 0x2a, 0x1a, 0x74, 0xc4, 0x68, 0xe3, 0xb6, 0x98, 0x71, 0x95, 0xf8,
	0xab, 0x28, 0xb4, 0x35, 0x82, 0x28, 0x26, 0x1f, 0xeb, 0x09, 0xb9, 0x54, 0x31, 0x34, 0xc0, 0x5f,
	0x25, 0xd4, 0xe2, 0x69, 0x99, 0x2f, 0x46, 0x73, 0x1a, 0x0c, 0x82, 0x67, 0x06, 0x49, 0x01, 0xa2,
	0x50, 0xc1, 0xf6, 0xc5, 0xf5, 0xb9, 0x34, 0xc8, 0x7b, 0x64, 0x6f, 0xa8, 0x43, 0x91, 0x48, 0x4c,
	0xdd, 0xfc, 0x62, 0x3c, 0xc7, 0xcd, 0xf2, 0xc1, 0x8a, 0x3f, 0x82, 0xdc, 0x90, 0x88, 0x6d, 0x3d,
	0xbd, 0x4c, 0x76, 0xe6, 0xd3, 0xab, 0xf8, 0xf0, 0x87, 0x3a, 0x14, 0xe6, 0xdd, 0x68, 0x9c, 0xbc,
	0x5d, 0x6d, 0x18, 0x88, 0xf6, 0x5b, 0x25, 0x34, 0x11, 0x6b, 0x29, 0xfb, 0x81, 0xb9, 0xb5, 0x34,
	0xc3, 0x04, 0xac, 0xa5, 0x21, 0x1b, 0x67, 0x3a, 0x82, 0xc2, 0xc2, 0x9c, 0x3a, 0xea, 0xb9, 0x53,
	0xed, 0x5c, 0x69, 0xf9, 0x9c, 0x81, 0x8e, 0x78, 0xae, 0x7f, 0x8f, 0x65, 0x77, 0x3a, 0x91, 0xd3,
	0xa1, 0xe2, 0x89, 0x58, 0x0e, 0xd5, 0xb0, 0x0e, 0x5e, 0x46, 0xc7, 0xf5, 0xef, 0x59, 0xe4, 0xe3,
	0xa9, 0x31, 0x92, 0xe6, 0xf5, 0xd5, 0xf5, 0x70, 0xed, 0x25, 0xcd, 0xeb, 0x3b, 0x64, 0x42, 0x98,
	0x39, 0xb7, 0x00, 0xa5, 0xf9, 0x61, 0x03, 0x1d, 0xd4, 0x7c, 0x4f, 0x4e, 0xfa, 0x1f, 0x4a, 0x2a,
	0x97, 0xf2, 0xea, 0xa8, 0x33, 0x96, 0xda, 0xcc, 0x89, 0xbe, 0x39, 0x77, 0xd9, 0xe8, 0x35, 0xae,
	0x30, 0x0f, 0x97, 0xf9, 0x7e, 0x03, 0x1d, 0x50, 0x6b, 0x58, 0x29, 0x6e, 0x23, 0x35, 0xee, 0x2c,
	0x0c, 0xab, 0x02, 0x2d, 0x9d, 0x1d, 0xf4, 0xeb, 0x35, 0xa5, 0x95, 0x93, 0x7a, 0x53, 0x5e, 0x9d,
	0x2c, 0x2d, 0xa5, 0x35, 0x9c, 0x83, 0xc9, 0xfc, 0x9a, 0x81, 0x8e, 0xe5, 0x67, 0xfc, 0x54, 0xbc,
	0x4e, 0xea, 0x92, 0x87, 0xb0, 0x9c, 0xb6, 0x6d, 0xe9, 0xb9, 0x83, 0x7e, 0xbd, 0x9e, 0xd7, 0xc9,
	0xc9, 0xbf, 0x6d, 0x58, 0xae, 0x51, 0xed, 0x63, 0xd4, 0x37, 0x8b, 0x11, 0x93, 0x04, 0xdb, 0x29,
	0x4e, 0x6e, 0x19, 0x57, 0xdd, 0x58, 0x6a, 0xd2, 0x63, 0x70, 0x43, 0x7b, 0x22, 0xd7, 0x6a, 0x4a,
	0xab, 0xb2, 0x44, 0x8a, 0x26, 0x01, 0x2f, 0x7e, 0x33, 0x07, 0x95, 0xf9, 0x4a, 0x03, 0x99, 0x4a,
	0xf1, 0x0b, 0x5c, 0xfb, 0xaf, 0x53, 0x90, 0x40, 0xb9, 0xdc, 0xc0, 0xd2, 0xcf, 0x0a, 0x49, 0xa2,
	0xb3, 0x56, 0xc1, 0x59, 0x4f, 0xc5, 0xa9, 0xcb, 0x11, 0xcd, 0x21, 0x17, 0x7e, 0xc7, 0x40, 0xc7,
	0xb7, 0xc5, 0x72, 0xcb, 0x1a, 0xc2, 0x94, 0xc7, 0x8e, 0xcb, 0x48, 0xef, 0x47, 0x0c, 0x34, 0x97,
	0xc3, 0xd3, 0x4b, 0xe9, 0xeb, 0xbe, 0x0b, 0x4d, 0x70, 0x9b, 0x66, 0x75, 0xdf, 0x51, 0x1d, 0xc4,
	0xaa, 0x83, 0xd8, 0x28, 0xdd, 0x4a, 0xe4, 0xfb, 0x8e, 0x79, 0xf5, 0xf2, 0xe1, 0xe1, 0x5c, 0x78,
	0x7c, 0xde, 0x40, 0x47, 0x53, 0xd7, 0xf7, 0x9e, 0xdf, 0x4c, 0x76, 0x81, 0xed, 0x29, 0x32, 0xf3,
	0x0f, 0xa4, 0xc0, 0x26, 0xe6, 0x07, 0x9f, 0x01, 0x50, 0xb9, 0x46, 0x02, 0x9b, 0xf4, 0x5d, 0x4a,
	0x60, 0xd3, 0xd0, 0x39, 0xc1, 0x11, 0xab, 0x55, 0x84, 0x74, 0xc8, 0xa5, 0xcd, 0x17, 0xcb, 0x7d,
	0x69, 0xf3, 0xa5, 0x47, 0xfb, 0xd2, 0xe6, 0x03, 0x06, 0x32, 0xd5, 0xb5, 0x54, 0x46, 0x51, 0x74,
	0xff, 0x32, 0xda, 0x0d, 0xbf, 0x54, 0x25, 0x8c, 0x2a, 0x61, 0x54, 0x09, 0xa3, 0x11, 0x09, 0xa3,
	0xff, 0x60, 0xa0, 0xa3, 0x32, 0x23, 0xb4, 0x7b, 0x71, 0xe0, 0x07, 0xdd, 0xa0, 0x87, 0x2d, 0xbc,
	0x85, 0x63, 0xa7, 0x2b, 0x27, 0x9b, 0x5d, 0xcc, 0x06, 0xac, 0x91, 0x7e, 0xfa, 0x7d, 0x9f, 0x35,
	0xe8, 0xd7, 0x0f, 0xc3, 0xad, 0x2c, 0x0f, 0xe4, 0xa2, 0x62, 0xe8, 0x9c, 0xa0, 0x5a, 0x42, 0x58,
	0x88, 0xd5, 0x7c, 0xbb, 0x68, 0x4a, 0x64, 0x08, 0x9b, 0x9e, 0x6b, 0x35, 0x83, 0x6e, 0xd7, 0x8d,
	0x2d, 0x1c, 0xdb, 0xb1, 0xc3, 0x4a, 0x6a, 0x13, 0x1b, 0x07, 0x24, 0x72, 0xd9, 0x73, 0x97, 0xc9,
	0xc0, 0xb5, 0x64, 0x9c, 0xc6, 0x5e, 0x98, 0x83, 0x11, 0xd8, 0x38, 0xc2, 0x02, 0x94, 0x24, 0xa8,
	0x4c, 0xc6, 0xd6, 0xb2, 0x63, 0x3b, 0xf4, 0xec, 0xe4, 0x70, 0x1c, 0x32, 0x83, 0x21, 0xb0, 0x63,
	0xb0, 0x2a, 0x48, 0xe9, 0xa8, 0x95, 0x86, 0xc6, 0x8e, 0xa1, 0x41, 0xa5, 0xb5, 0x63, 0xc8, 0xb8,
	0x42, 0xf3, 0x4d, 0x06, 0x3a, 0xa4, 0xa0, 0x01, 0x31, 0x77, 0xd4, 0x7a, 0xd8, 0x18, 0xf4, 0xeb,
	0xf3, 0x12, 0x49, 0x30, 0xec, 0xee, 0x96, 0x1c, 0x9a, 0xf2, 0x22, 0xef, 0xe6, 0xc3, 0x5c, 0x6c,
	0xe6, 0x67, 0x0d, 0x54, 0x57, 0x10, 0x6d, 0x34, 0x43, 0x2b, 0xb4, 0x23, 0xbb, 0xeb, 0xc4, 0x4e,
	0x84, 0x89, 0x0b, 0xa8, 0x58, 0xba, 0xc3, 0xc7, 0x5d, 0x1b, 0x5f, 0x3c, 0xeb, 0xd8, 0xd8, 0x69,
	0x64, 0xa3, 0x68, 0x0d, 0x28, 0x89, 0xee, 0x33, 0xcb, 0x0d, 0x3e, 0x82, 0xd7, 0x80, 0x1a, 0x32,
	0x61, 0xc1, 0x57, 0x3e, 0xb9, 0xd1, 0x0c, 0x39, 0x46, 0x52, 0xa1, 0x4a, 0x46, 0xe6, 0xf8, 0xcd,
	0x68, 0x2b, 0x24, 0xb2, 0x81, 0xb0, 0x22, 0xea, 0x73, 0xaa, 0xa1, 0xee, 0x54, 0x36, 0x90, 0x31,
	0xa7, 0x1c, 0xea, 0x24, 0x84, 0x05, 0xd4, 0x41, 0x8c, 0xa4, 0x64, 0x94, 0x8c, 0x2c, 0xf3, 0xab,
	0x35, 0x79, 0xc9, 0x28, 0x48, 0x96, 0xe0, 0x65, 0x7b, 0x83, 0x9e, 0x20, 0x9d, 0xd7, 0xad, 0xa4,
	0x34, 0xa5, 0x48, 0xcc, 0xff, 0x68, 0xa0, 0x63, 0x32, 0xfc, 0xdd, 0x3d, 0x3f, 0xc0, 0xfc, 0x2a,
	0x94, 0xf8, 0x5f, 0xce, 0x42, 0x47, 0xe8, 0xa7, 0x25, 0x43, 0xd2, 0x3b, 0xd0, 0x64, 0x00, 0xb5,
	0x46, 0x41, 0x4a, 0x95, 0x41, 0xdc, 0x1a, 0xb5, 0x8d, 0x29, 0x81, 0x35, 0x2a, 0x2c, 0x46, 0x6c,
	0x5e, 0x54, 0xf3, 0x0a, 0x7a, 0x5e, 0x2b, 0x24, 0xae, 0xb5, 0x63, 0xba, 0x44, 0x81, 0x67, 0xcf,
	0x9e, 0x6c, 0xe4, 0x27, 0x0a, 0x4c, 0x60, 0x0b, 0x12, 0x05, 0x9e, 0xf5, 0x5a, 0xa1, 0xf9, 0x3a,
	0x03, 0x1d, 0x50, 0xe0, 0x82, 0x20, 0x24, 0x4a, 0xa1, 0x1b, 0xd6, 0xf6, 0x92, 0x0f, 0x48, 0x8c,
	0x8b, 0xd2, 0xd4, 0x6c, 0x10, 0xe1, 0x1f, 0x37, 0xe5, 0x10, 0xc0, 0x11, 0x01, 0x1b, 0x57, 0xa8,
	0xc7, 0xa4, 0xe7, 0x1e, 0x5d, 0xdb, 0xb7, 0x3b, 0x4e, 0x8b, 0x31, 0xdb, 0x7d, 0x79, 0xdc, 0x63,
	0x95, 0x0e, 0x4b, 0x59, 0x6d, 0x0e, 0xf7, 0x00, 0xc8, 0x0a, 0xb8, 0x87, 0x88, 0xad, 0x80, 0x2a,
	0x7a, 0x41, 0x15, 0xd6, 0xe6, 0x8a, 0xa9, 0x22, 0x17, 0x54, 0x8d, 0x61, 0x54, 0x31, 0x64, 0x43,
	0xa9, 0x22, 0xd8, 0x42, 0xf3, 0x7e, 0x03, 0x1d, 0x2e, 0x40, 0xd4, 0xb5, 0x9b, 0xb5, 0x1a, 0x21,
	0x8b, 0x54, 0x72, 0xca, 0x23, 0x6b, 0xd5, 0x6e, 0xf2, 0x4a, 0x4e, 0xc5, 0xe8, 0x40, 0x25, 0xa7,
	0x30, 0x1f, 0x1f, 0xbc, 0xc4, 0x62, 0xa8, 0x02, 0x9c, 0xa9, 0xc0, 0xfb, 0xd5, 0x4b, 0x2c, 0x8a,
	0xe5, 0x0e, 0xcc, 0xb5, 0xe0, 0x27, 0xe8, 0x29, 0xe2, 0x68, 0xb4, 0x97, 0x58, 0x12, 0x1e, 0xad,
	0x7c, 0x0c, 0xa3, 0xa0, 0xd5, 0x6b, 0xc6, 0x54, 0x9d, 0x9d, 0xcf, 0x93, 0x8f, 0x0d, 0x3a, 0x8a,
	0x29, 0x85, 0x39, 0xf2, 0x51, 0x44, 0x55, 0x20, 0x1f, 0x05, 0x5c, 0xe6, 0xbf, 0x33, 0xd0, 0xb5,
	0x6a, 0x42, 0xcf, 0xd0, 0x73, 0x9b, 0x76, 0x1c, 0xc0, 0xad, 0x77, 0x80, 0xd0, 0x66, 0x0f, 0xfa,
	0xf5, 0x05, 0x39, 0x9d, 0x66, 0x3a, 0x1e, 0x6c, 0xc2, 0xa7, 0xe6, 0xa5, 0x0b, 0xd5, 0x61, 0x17,
	0xc9, 0x5d, 0x08, 0x87, 0xa1, 0x0f, 0x75, 0xac, 0x29, 0x39, 0x21, 0xd6, 0x0e, 0x12, 0x22, 0x75,
	0x39, 0x4c, 0x03, 0xcf, 0x29, 0xc8, 0x61, 0x1a, 0x78, 0x4e, 0x51, 0x0e, 0xd3, 0xc0, 0xd3, 0x6f,
	0x3b, 0xec, 0x44, 0xae, 0xed, 0x59, 0x7e, 0xaf, 0xbb, 0xee, 0x44, 0xb5, 0x43, 0x79, 0xdb, 0x6e,
	0x8d, 0x0c, 0x3b, 0x47, 0x46, 0xe5, 0x6f, 0x3b, 0x80, 0xac, 0x60, 0xdb, 0x89, 0xd8, 0x74, 0x2f,
	0x02, 0xfb, 0xdd, 0xb0, 0x76, 0x38, 0x8f, 0x47, 0xaf, 0x9d, 0x5b, 0x2d, 0xe0, 0xd1, 0x09, 0x6c,
	0xc1, 0x8b, 0x58, 0xf3, 0xbb, 0xa1, 0xf9, 0xdb, 0x1a, 0x2d, 0x34, 0x81, 0xb3, 0x9a, 0x91, 0x43,
	0xae, 0xbd, 0x6d, 0x0f, 0xd7, 0xea, 0xb0, 0xb4, 0x66, 0x32, 0xeb, 0x32, 0xef, 0x86, 0xf7, 0xd9,
	0x9c, 0x30, 0x61, 0x48, 0xbe, 0x7e, 0x2a, 0xcf, 0xa5, 0xbd, 0xcf, 0xe6, 0xf4, 0x0a, 0x38, 0xcd,
	0x0f, 0x6b, 0x04, 0x33, 0xee, 0x85, 0xa1, 0x47, 0x98, 0x85, 0xed, 0xb1, 0xd8, 0xda, 0xda, 0x11,
	0xf2, 0x25, 0x9f, 0x37, 0xe8, 0xd7, 0x8f, 0x48, 0x44, 0x0a, 0x83, 0xe9, 0x81, 0x39, 0x5f, 0xfc,
	0x6a, 0x10, 0x8b, 0xa4, 0x1e, 0x09, 0x87, 0x60, 0xd6, 0x2a, 0x5a, 0x3d, 0xbf, 0x45, 0x5c, 0x54,
	0x53, 0x4a, 0x8f, 0xe6, 0x29, 0x5a, 0x77, 0xb2, 0x81, 0x19, 0x95, 0x39, 0x8a, 0x96, 0x84, 0xb0,
	0x40, 0xd1, 0x82, 0x18, 0xcd, 0x77, 0x6a, 0x96, 0x41, 0x86, 0x8c, 0x09, 0xb6, 0xda, 0x02, 0x59,
	0x86, 0x9a, 0xaf, 0x9d, 0x22, 0x63, 0x92, 0x2d, 0xff, 0x6b, 0xcb, 0x28, 0x0b, 0xbe, 0xb6, 0x84,
	0x53, 0xbb, 0x50, 0x7b, 0x38, 0x39, 0xe1, 0x08, 0x0b, 0xf5, 0x18, 0x5c, 0xa8, 0x77, 0x62, 0x27,
	0x1a, 0xb2, 0x50, 0xa5, 0x21, 0x05, 0xa4, 0x4b, 0x73, 0x15, 0x91, 0x0e, 0x71, 0x6a, 0xf5, 0x20,
	0x9a, 0xe5, 0x81, 0x0a, 0x8a, 0x6b, 0xf2, 0xf4, 0x20, 0x9a, 0xec, 0x81, 0xc9, 0x89, 0x1c, 0x3d,
	0x48, 0x40, 0x54, 0xa0, 0x07, 0x71, 0x4c, 0x7a, 0x6a, 0xfc, 0x66, 0xf6, 0x95, 0x8f, 0x93, 0xaf,
	0xac, 0xa3, 0xe6, 0xdc, 0x32, 0xff, 0xc0, 0x79, 0xd4, 0x70, 0x44, 0x45, 0xd4, 0xf8, 0xcd, 0xf4,
	0xb3, 0xbe, 0xd5, 0x40, 0xfb, 0x12, 0x58, 0xd7, 0xef, 0x58, 0xeb, 0x91, 0xdb, 0x22, 0xa9, 0xa5,
	0x68, 0xb2, 0x90, 0x6b, 0xc9, 0xc7, 0x3c, 0x22, 0xd6, 0x1f, 0x76, 0xfd, 0xce, 0x12, 0x1b, 0xc4,
	0x13, 0x86, 0x90, 0x7c, 0x5e, 0xba, 0x5e, 0x9e, 0xcf, 0x4b, 0x3f, 0x03, 0xb0, 0x78, 0x45, 0x1a,
	0x04, 0xe6, 0x25, 0xb4, 0x3b, 0x76, 0x92, 0x8d, 0x1c, 0x47, 0x5b, 0x34, 0x54, 0xf0, 0x3a, 0x42,
	0x54, 0x66, 0xfa, 0xbe, 0x90, 0xf6, 0x12, 0x6d, 0x8e, 0x04, 0x0c, 0x92, 0xd8, 0xbc, 0xac, 0x9d,
	0x45, 0x0d, 0xb2, 0xd8, 0x3c, 0x88, 0x0c, 0xc4, 0xe6, 0xc5, 0x22, 0x84, 0xf9, 0x52, 0x03, 0x4d,
	0xad, 0x77, 0x42, 0x90, 0x01, 0xfc, 0xf5, 0x63, 0xb0, 0x2e, 0xab, 0x64, 0x2a, 0xbe, 0xbd, 0xc1,
	0xf3, 0x7e, 0x3f, 0x39, 0xa1, 0x41, 0x6c, 0xc1, 0xdc, 0x7b, 0x55, 0x42, 0x0b, 0x88, 0x58, 0xef,
	0x84, 0x42, 0xa2, 0xef, 0x5f, 0x33, 0xd0, 0x2c, 0x3b, 0x12, 0x37, 0x37, 0x6c, 0x8c, 0x5d, 0x4c,
	0x09, 0x79, 0x83, 0x54, 0x34, 0x53, 0x77, 0xd4, 0x5e, 0xa6, 0x00, 0x09, 0x31, 0x24, 0xfb, 0x89,
	0xdc, 0x8a, 0x79, 0xf6, 0x13, 0xcd, 0x14, 0xe0, 0x96, 0xb8, 0x25, 0x83, 0x9a, 0xbf, 0x6f, 0xa0,
	0x83, 0x79, 0x66, 0x7b, 0x42, 0xe1, 0x1b, 0x29, 0x85, 0xb7, 0x14, 0x51, 0x28, 0xd9, 0xf0, 0x13,
	0x4a, 0x89, 0xae, 0x96, 0xd7, 0x2b, 0x5c, 0xb8, 0x17, 0xcd, 0x0d, 0x74, 0xb5, 0x56, 0x1e, 0x2e,
	0xf3, 0x5f, 0x19, 0x88, 0x3d, 0x98, 0xe5, 0x76, 0xed, 0x0e, 0xf3, 0x3e, 0x7a, 0xd3, 0x18, 0xcc,
	0x5b, 0xa2, 0xa3, 0x7b, 0x25, 0x19, 0x9e, 0xc5, 0x27, 0xc2, 0x36, 0x21, 0x3e, 0x51, 0x41, 0x0e,
	0xe2, 0x13, 0x5b, 0x10, 0xcc, 0xbc, 0x88, 0x76, 0xb1, 0x44, 0x20, 0x84, 0x8e, 0x5f, 0x19, 0xd3,
	0x7b, 0xfe, 0x50, 0x3a, 0x68, 0x2a, 0x91, 0xac, 0x30, 0x72, 0xf6, 0x53, 0xb0, 0x63, 0x0b, 0xc8,
	0x80, 0x35, 0xb1, 0x9d, 0x8d, 0x25, 0x4b, 0xdc, 0xf5, 0x63, 0x7a, 0x00, 0x60, 0xdf, 0xed, 0x57,
	0x0b, 0x97, 0xf8, 0x0a, 0x19, 0xbd, 0x6a, 0x87, 0xd9, 0x12, 0x17, 0x5b, 0x84, 0x25, 0x2e, 0xa1,
	0x55, 0x62, 0x60, 0x33, 0x10, 0xf2, 0x19, 0xd4, 0xe0, 0xd0, 0x5f, 0x2b, 0xfc, 0x0c, 0x8f, 0x60,
	0x98, 0x68, 0x42, 0x4e, 0x40, 0xc3, 0x56, 0x08, 0x8b, 0xa2, 0xe4, 0xdc, 0x5f, 0x48, 0x8e, 0x10,
	0xe6, 0x92, 0x91, 0x03, 0xdb, 0x04, 0x72, 0x14, 0xe4, 0x80, 0x9c, 0x00, 0x82, 0x99, 0x6f, 0x30,
	0x90, 0x29, 0x70, 0xf8, 0x94, 0x9e, 0x37, 0x53, 0x7a, 0x8e, 0xeb, 0xe9, 0x11, 0x6f, 0x70, 0x12,
	0x82, 0x48, 0x3e, 0x27, 0xa9, 0x51, 0x70, 0x11, 0x51, 0xf1, 0x83, 0x7c, 0x4e, 0xa1, 0x04, 0x68,
	0xae, 0x0b, 0x17, 0x91, 0x6f, 0x19, 0x83, 0x0e, 0x62, 0x90, 0x90, 0x9d, 0x5f, 0x45, 0xbe, 0xcf,
	0x40, 0xfb, 0x38, 0xab, 0x06, 0x4b, 0xe3, 0xd7, 0xe9, 0x94, 0x37, 0xe4, 0x4c, 0x99, 0x02, 0x09,
	0xeb, 0x83, 0x88, 0x27, 0x4d, 0x87, 0x20, 0x9e, 0xf4, 0x73, 0x01, 0xf1, 0x14, 0x6b, 0x10, 0x24,
	0xc2, 0x53, 0x5f, 0xd6, 0xf8, 0xad, 0x63, 0xb0, 0x4c, 0xb5, 0x24, 0xc8, 0x47, 0x53, 0xd7, 0x38,
	0x11, 0x1f, 0x52, 0xe6, 0x62, 0x42, 0xdc, 0xdb, 0x0a, 0xc5, 0x07, 0x48, 0x85, 0x9c, 0x89, 0x0f,
	0xb9, 0x55, 0x10, 0x1f, 0x9a, 0x29, 0x80, 0xf8, 0xd8, 0x94, 0x41, 0xb7, 0x11, 0x31, 0x71, 0xb9,
	0x4c, 0x11, 0x13, 0x05, 0x79, 0xb8, 0xff, 0x6e, 0xd4, 0x79, 0xb8, 0xef, 0x37, 0x50, 0x4d, 0xaa,
	0xfc, 0xcf, 0xa9, 0xf9, 0xb6, 0x94, 0xe8, 0x1a, 0x56, 0x61, 0x26, 0x89, 0xae, 0x61, 0x93, 0x92,
	0xe8, 0x3a, 0x0f, 0x35, 0x70, 0x92, 0xf5, 0x74, 0x38, 0xcc, 0x4f, 0x1b, 0xa8, 0x9e, 0xae, 0xce,
	0x54, 0xa3, 0x20, 0x67, 0x1b, 0x81, 0xc0, 0x07, 0xe6, 0xb4, 0x29, 0x59, 0xc5, 0x02, 0x1d, 0x4b,
	0x6b, 0x83, 0x7e, 0xfd, 0x80, 0xae, 0x83, 0x13, 0xfb, 0x44, 0x98, 0x24, 0x36, 0x67, 0x36, 0x60,
	0xd2, 0xf2, 0xf3, 0x11, 0x9a, 0xef, 0x32, 0xd0, 0x7c, 0xba, 0x46, 0x1c, 0xbf, 0x15, 0x06, 0xae,
	0x2f, 0xa6, 0x72, 0x7d, 0x70, 0x0e, 0x16, 0xc2, 0x62, 0xab, 0xe4, 0x14, 0x1b, 0x49, 0x8d, 0x5d,
	0x72, 0x23, 0x27, 0xf6, 0x09, 0xd0, 0x37, 0x53, 0x9d, 0x00, 0x18, 0xbb, 0xb0, 0x1e, 0x8f, 0xd9,
	0x44, 0xbb, 0xe8, 0x4d, 0x12, 0xcd, 0x77, 0xf5, 0x8a, 0x69, 0x98, 0x1b, 0x80, 0x5c, 0x1d, 0x91,
	0x87, 0x22, 0x1a, 0x41, 0xf6, 0x53, 0xd0, 0x08, 0x04, 0x70, 0xa0, 0x11, 0x34, 0xb3, 0xb1, 0xc9,
	0xc9, 0x64, 0x36, 0xcb, 0x42, 0xe7, 0xfa, 0x9b, 0x8e, 0x1f, 0x07, 0xd1, 0x16, 0xae, 0xbd, 0x72,
	0x1a, 0xee, 0xc6, 0x34, 0x09, 0xd6, 0x4a, 0x3a, 0x84, 0x94, 0x11, 0x37, 0x95, 0x66, 0x81, 0x49,
	0x68, 0xd0, 0x82, 0xa5, 0xbe, 0xa1, 0xc0, 0x92, 0x3a, 0x96, 0x7a, 0x8f, 0x61, 0x5c, 0x7b, 0xd5,
	0xf4, 0x36, 0x3c, 0x93, 0x89, 0x53, 0xb8, 0xae, 0x47, 0x70, 0x0a, 0xcf, 0x99, 0x00, 0xae, 0x77,
	0x1d, 0x8a, 0x3c, 0x97, 0xcd, 0x57, 0x4f, 0x8f, 0xd8, 0x65, 0x93, 0x7c, 0x35, 0xd5, 0x49, 0x19,
	0xd7, 0x5e, 0x33, 0x3d, 0xcc, 0x05, 0xfa, 0xe7, 0x44, 0x83, 0x16, 0xa0, 0xe5, 0x9a, 0x3c, 0xdf,
	0x67, 0x7d, 0x71, 0x22, 0xc1, 0x81, 0xf4, 0x37, 0x0d, 0x34, 0x9f, 0x7f, 0x30, 0x2a, 0x6b, 0x05,
	0xf8, 0xe2, 0x13, 0x54, 0x19, 0xa9, 0xfe, 0xac, 0x81, 0xae, 0xdd, 0xde, 0xa9, 0xaa, 0xac, 0x69,
	0xdf, 0x8a, 0xce, 0x56, 0x65, 0xf7, 0xd6, 0x95, 0xce, 0x61, 0x65, 0x24, 0x57, 0xdd, 0x88, 0xe2,
	0x61, 0xed, 0xb1, 0xb1, 0x28, 0xca, 0x9f, 0xa4, 0x46, 0xa5, 0x19, 0x1e, 0xfd, 0xca, 0x48, 0xf3,
	0x6f, 0x19, 0xe8, 0x50, 0xe1, 0x91, 0xb1, 0x8c, 0x44, 0xff, 0x1b, 0x03, 0xed, 0xd1, 0x1d, 0x2f,
	0xcb, 0x48, 0xeb, 0xa7, 0x0c, 0x74, 0x74, 0xe8, 0xb9, 0xb4, 0x8c, 0x84, 0x7f, 0xd2, 0x40, 0xf5,
	0x21, 0x47, 0xd5, 0xc7, 0x86, 0x04, 0x97, 0x8f, 0xab, 0x65, 0xa4, 0xfa, 0x9b, 0x13, 0x68, 0x9a,
	0x06, 0xe0, 0xf3, 0x1b, 0xf6, 0xca, 0x8b, 0xb5, 0xf2, 0x62, 0xad, 0xbc, 0x58, 0x47, 0xe4, 0xc5,
	0xda, 0x52, 0x43, 0x2a, 0x0e, 0xc3, 0xaa, 0x35, 0x7c, 0x63, 0x3e, 0x9c, 0x3c, 0xe1, 0xbb, 0x59,
	0xb0, 0x78, 0x7a, 0x78, 0xfd, 0x26, 0x8d, 0xea, 0xcb, 0xd2, 0x5d, 0xb2, 0x08, 0x71, 0x7a, 0x68,
	0x25, 0xb7, 0x57, 0x62, 0x8b, 0x90, 0xbc, 0x1b, 0xe2, 0x01, 0x56, 0x75, 0x5b, 0x84, 0x20, 0x47,
	0x67, 0x12, 0x04, 0xda, 0xa4, 0x7b, 0x93, 0x95, 0xd1, 0xc1, 0x4e, 0x8c, 0x6b, 0xfd, 0x29, 0x78,
	0x74, 0x5e, 0xe4, 0xe3, 0xe8, 0x43, 0xaf, 0x39, 0x31, 0x3d, 0x3a, 0xeb, 0x7a, 0x84, 0xa3, 0x73,
	0xce, 0x04, 0xe0, 0xe8, 0x6c, 0xeb, 0x50, 0x98, 0xbf, 0x88, 0xa6, 0xdb, 0x6e, 0xe4, 0x5c, 0xb2,
	0x3d, 0x8f, 0x41, 0xe2, 0xda, 0x9f, 0x4f, 0xc1, 0xe0, 0x87, 0xd3, 0x6c, 0x00, 0x05, 0x5b, 0xfa,
	0xe9, 0x41, 0xbf, 0x3e, 0x05, 0xdb, 0xc4, 0x1c, 0xea, 0x12, 0x36, 0x60, 0x54, 0x6f, 0x43, 0xa8,
	0xe4, 0x83, 0x64, 0xe3, 0xa3, 0x9e, 0xe7, 0xe0, 0xda, 0x5f, 0x48, 0x1f, 0x24, 0x9d, 0xe7, 0x7c,
	0xcf, 0x63, 0x85, 0xd5, 0xc5, 0x16, 0xe1, 0x83, 0x40, 0x3c, 0xe0, 0x83, 0xb4, 0x45, 0x88, 0x64,
	0xce, 0xd4, 0x00, 0xc4, 0x16, 0xc1, 0x5f, 0x4a, 0x73, 0x32, 0x03, 0x92, 0xb0, 0x08, 0xc4, 0x16,
	0x61, 0x4e, 0x88, 0x07, 0xcc, 0x89, 0x45, 0x08, 0x92, 0xb9, 0x5c, 0xbf, 0x8c, 0xcb, 0x28, 0x0d,
	0xbf, 0x3c, 0x8e, 0xc6, 0xb3, 0xb8, 0xd8, 0x4a, 0x0c, 0x56, 0x62, 0xb0, 0x12, 0x83, 0x23, 0x12,
	0x83, 0xaf, 0x33, 0xd0, 0xec, 0x7a, 0x17, 0x8b, 0xd1, 0xeb, 0x42, 0xf2, 0xea, 0xc3, 0x4a, 0xf2,
	0xea, 0x6c, 0x97, 0x12, 0x6f, 0x8b, 0x9f, 0x1d, 0xf4, 0xeb, 0xd3, 0x4b, 0xab, 0x6b, 0xa0, 0x95,
	0x5b, 0x10, 0x35, 0x88, 0xc1, 0xf5, 0xe2, 0x7a, 0x17, 0x03, 0x48, 0x73, 0x5d, 0xcc, 0xb5, 0xc1,
	0x32, 0x76, 0xd5, 0x94, 0x14, 0xb8, 0x0f, 0x2f, 0xc7, 0xc6, 0xf3, 0x05, 0xc1, 0xff, 0xe0, 0xd5,
	0xd0, 0xba, 0x9f, 0x4d, 0xb1, 0xf3, 0xb2, 0xe9, 0xef, 0x33, 0x12, 0xc5, 0x1e, 0x52, 0x5a, 0x46,
	0x96, 0xfb, 0x5e, 0x03, 0x4d, 0x49, 0x8f, 0x5b, 0x46, 0x32, 0x5f, 0x33, 0x81, 0x76, 0x25, 0x64,
	0x56, 0x25, 0xd6, 0x2a, 0xd9, 0x50, 0xc9, 0x86, 0xd1, 0xca, 0x86, 0x4f, 0x18, 0x68, 0x1e, 0xc7,
	0x41, 0xd4, 0xb5, 0x9a, 0x81, 0x1f, 0x47, 0x81, 0x07, 0x9d, 0x31, 0xd8, 0xa9, 0xe9, 0x06, 0x91,
	0x79, 0xb2, 0x6d, 0xba, 0x96, 0x40, 0x2d, 0x53, 0x20, 0xc1, 0x19, 0x83, 0x5e, 0x96, 0x6a, 0xfb,
	0xc4, 0xcb, 0xd2, 0xdc, 0x29, 0xe1, 0x65, 0xa9, 0x1e, 0x0f, 0xc8, 0x0d, 0xfc, 0x80, 0x94, 0x1b,
	0x58, 0x20, 0x71, 0xe7, 0x67, 0xba, 0xed, 0xe6, 0xc9, 0xf9, 0xe2, 0x3f, 0x8c, 0x3c, 0x39, 0x5f,
	0x2a, 0x4b, 0x9e, 0x1c, 0x6a, 0x59, 0x1d, 0xb6, 0xc8, 0xca, 0x5a, 0x33, 0x48, 0x59, 0x7a, 0x65,
	0x24, 0xf4, 0x27, 0x13, 0xe8, 0xaa, 0x84, 0xd0, 0x4a, 0xcc, 0x56, 0x62, 0xb6, 0x12, 0xb3, 0x23,
	0x12, 0xb3, 0x21, 0x9a, 0xcc, 0x0e, 0x4a, 0xc2, 0xd9, 0x6b, 0xbf, 0xf6, 0xec, 0x45, 0x8e, 0x5d,
	0x4f, 0x4a, 0x16, 0x29, 0x3b, 0x76, 0xb1, 0x13, 0xd7, 0x61, 0xe9, 0xc4, 0x25, 0x9f, 0xb5, 0x76,
	0xb1, 0xb3, 0x16, 0x39, 0x66, 0x5d, 0x44, 0xbb, 0x49, 0x05, 0x1d, 0x3e, 0x25, 0x4d, 0x9a, 0xb9,
	0x4f, 0xac, 0xc1, 0xd3, 0x88, 0x82, 0xd0, 0x89, 0x62, 0xd7, 0xc1, 0xb4, 0xa4, 0xe0, 0x29, 0x7c,
	0xaf, 0x2b, 0x4c, 0x58, 0x17, 0x2a, 0xf1, 0x68, 0x67, 0x9c, 0x70, 0x04, 0x00, 0xf3, 0x9f, 0xa0,
	0xc7, 0x79, 0xf6, 0xba, 0xe3, 0xb1, 0xb8, 0x75, 0x52, 0x19, 0xe5, 0x6c, 0xd2, 0xc0, 0x2b, 0xa3,
	0x90, 0x7e, 0x50, 0x19, 0x85, 0xb4, 0x98, 0xcf, 0x47, 0x53, 0x82, 0xcc, 0x20, 0x6f, 0x98, 0x46,
	0x9a, 0x13, 0x27, 0xe4, 0x4c, 0x4c, 0xb0, 0x57, 0x7d, 0x44, 0x2e, 0x86, 0xa2, 0x2c, 0x82, 0xc9,
	0xac, 0x20, 0x0a, 0x59, 0x07, 0x62, 0x71, 0x98, 0xef, 0x4a, 0xc5, 0x61, 0x12, 0xe4, 0x3b, 0x57,
	0x14, 0x86, 0xe6, 0x29, 0xfc, 0x6a, 0x99, 0xf2, 0x14, 0xbe, 0xcc, 0x40, 0x7b, 0xb4, 0x0a, 0xc0,
	0x57, 0xe6, 0xf2, 0x4a, 0xd1, 0xfc, 0xdc, 0xa0, 0x5f, 0x9f, 0xd1, 0x89, 0xfc, 0xe3, 0xca, 0x47,
	0xd0, 0x52, 0x33, 0x13, 0x2a, 0x32, 0xfe, 0x9d, 0x06, 0x42, 0xfc, 0xad, 0x97, 0x51, 0x46, 0x7e,
	0x63, 0x17, 0xb5, 0x55, 0x5e, 0xe8, 0x85, 0xd5, 0x79, 0xb4, 0x12, 0x94, 0x95, 0xa0, 0x1c, 0x99,
	0xa0, 0x7c, 0x83, 0x81, 0x66, 0x25, 0x1f, 0x65, 0xf1, 0x20, 0x7a, 0x14, 0x70, 0xed, 0x64, 0x77,
	0x02, 0x7f, 0xe7, 0xcc, 0x9b, 0x5d, 0x6e, 0x15, 0x5c, 0x1e, 0x35, 0xd8, 0x75, 0xfe, 0x97, 0x82,
	0x37, 0xfb, 0xf3, 0xd5, 0xd3, 0xe6, 0x9c, 0x42, 0xc7, 0xce, 0x45, 0xc8, 0xaf, 0xe5, 0xc5, 0x18,
	0x30, 0xcb, 0xe5, 0x82, 0x32, 0xd7, 0x88, 0xc2, 0x0b, 0xb6, 0x7b, 0x08, 0xfe, 0xd2, 0x63, 0xe1,
	0x10, 0x4c, 0x2a, 0xe7, 0xe6, 0xae, 0x9a, 0x32, 0x5b, 0x6f, 0x85, 0xe5, 0x55, 0x5a, 0x37, 0xc4,
	0xdc, 0x95, 0x59, 0x46, 0x8a, 0xff, 0xe2, 0xa7, 0xd1, 0xd5, 0x8d, 0x28, 0xb8, 0xdb, 0x69, 0x56,
	0x87, 0xe0, 0x4a, 0xb6, 0x57, 0xb2, 0x7d, 0x54, 0xb2, 0x7d, 0x0d, 0x4d, 0xd8, 0x9e, 0x1d, 0x75,
	0x2d, 0xc7, 0xb7, 0xd7, 0x3d, 0x5a, 0x08, 0x68, 0x8c, 0x2e, 0xc4, 0xc5, 0xa4, 0xfd, 0x14, 0x69,
	0xe6, 0x0b, 0x51, 0x1c, 0x0c, 0xb7, 0x15, 0x1f, 0x4d, 0x92, 0xc4, 0xd0, 0x21, 0x16, 0x76, 0x9a,
	0xbd, 0xc8, 0x8d, 0xb7, 0x52, 0x67, 0x95, 0x56, 0x64, 0xb7, 0x63, 0x72, 0xec, 0x1d, 0xa3, 0x87,
	0x2c, 0x0a, 0xb2, 0xc6, 0x86, 0x51, 0xd7, 0x89, 0x93, 0xc9, 0x20, 0x7e, 0xc8, 0x2a, 0x42, 0x05,
	0x83, 0xc9, 0xf2, 0x70, 0x99, 0x67, 0xd1, 0xe3, 0x2e, 0xf6, 0x82, 0xd8, 0x26, 0xc7, 0x60, 0xe1,
	0x75, 0x3f, 0x23, 0x69, 0x24, 0xab, 0x93, 0x9c, 0x8c, 0xc9, 0x4f, 0x7e, 0x32, 0x26, 0x20, 0xe0,
	0x64, 0x4c, 0x5a, 0xcc, 0x67, 0xa2, 0xc9, 0xcd, 0x7b, 0x3d, 0xdb, 0xb7, 0x58, 0xf8, 0x3c, 0x39,
	0x17, 0x8f, 0x2d, 0x9d, 0x48, 0x8e, 0xeb, 0x77, 0x25, 0x1d, 0x2c, 0x2e, 0x9f, 0xdb, 0x07, 0xc0,
	0x70, 0x70, 0x5a, 0xdf, 0x14, 0xc6, 0x9b, 0xaf, 0x32, 0x90, 0x69, 0x7b, 0xae, 0x8d, 0x2d, 0x37,
	0xb4, 0xc2, 0x20, 0xf0, 0xc0, 0xf1, 0x38, 0x4b, 0xea, 0xc7, 0x18, 0xe5, 0x62, 0x32, 0x72, 0xa5,
	0xd1, 0x08, 0x02, 0x2f, 0xd1, 0x37, 0x7e, 0x66, 0xd0, 0xaf, 0x4f, 0xc1, 0x36, 0x21, 0xc2, 0x45,
	0x45, 0x0b, 0xfc, 0x75, 0x48, 0xf7, 0x4a, 0x98, 0xc2, 0x99, 0x9f, 0x34, 0xd0, 0x01, 0xbd, 0xaf,
	0x11, 0x28, 0xc8, 0x70, 0xad, 0x4c, 0x92, 0xc6, 0xf5, 0x28, 0xa1, 0x8d, 0x24, 0x56, 0xc8, 0xe9,
	0x14, 0x72, 0xe9, 0x17, 0xcc, 0x08, 0x4c, 0xd5, 0x76, 0x0e, 0xa6, 0x44, 0x6f, 0xdb, 0xdb, 0xf6,
	0x02, 0x9b, 0xe4, 0x3d, 0x00, 0xef, 0xf0, 0xfb, 0x72, 0x05, 0x09, 0x4a, 0xf0, 0x69, 0x36, 0x98,
	0xbf, 0x46, 0x12, 0x42, 0xa8, 0x34, 0x0b, 0x21, 0x84, 0x5a, 0xfc, 0x40, 0x6f, 0x4b, 0x47, 0x08,
	0xef, 0x73, 0x0b, 0xed, 0x4e, 0x58, 0x13, 0x0e, 0xb3, 0x9a, 0x1b, 0x3f, 0x90, 0x0b, 0x63, 0x51,
	0x82, 0xce, 0xa5, 0xa3, 0x12, 0x5a, 0x88, 0x4b, 0x92, 0xd8, 0x22, 0xb8, 0x24, 0x41, 0x74, 0xc0,
	0xd0, 0xe2, 0x8b, 0x10, 0xe6, 0x73, 0x05, 0x55, 0xf9, 0x87, 0x57, 0xc3, 0x60, 0x45, 0x36, 0xe9,
	0xce, 0x15, 0xe5, 0x2d, 0x61, 0xc1, 0x2a, 0x31, 0x91, 0x53, 0x99, 0xbb, 0x1b, 0x5d, 0x95, 0x60,
	0x89, 0x0a, 0xda, 0xa5, 0xbc, 0x44, 0xb5, 0xca, 0x64, 0xba, 0x44, 0x41, 0x80, 0xa8, 0xf8, 0x2d,
	0x94, 0x88, 0xc7, 0xcc, 0x9c, 0xc4, 0xbf, 0xa6, 0xfc, 0x75, 0xd5, 0x00, 0x51, 0x2d, 0xc6, 0x9c,
	0xaf, 0x9b, 0x91, 0xa2, 0xba, 0x1b, 0xfe, 0xaf, 0x47, 0xdc, 0xdd, 0x70, 0x15, 0x3d, 0x9e, 0xf0,
	0x5c, 0x5c, 0xfb, 0xef, 0x74, 0xae, 0x49, 0xfe, 0xb6, 0xed, 0xa8, 0x4b, 0xe5, 0x07, 0xf9, 0x17,
	0x73, 0xf9, 0x41, 0x21, 0x80, 0xfc, 0xa0, 0x4d, 0xe6, 0x16, 0x9a, 0xb6, 0x43, 0xd7, 0xb2, 0x9b,
	0xcd, 0x64, 0x76, 0xcf, 0xc5, 0x31, 0xae, 0x5d, 0x9e, 0x82, 0xab, 0x65, 0xb1, 0xb1, 0xb2, 0x48,
	0xfa, 0xcf, 0xba, 0x38, 0x5e, 0x7a, 0xea, 0xa0, 0x5f, 0xdf, 0x0d, 0x9a, 0x04, 0xe7, 0x40, 0x19,
	0x17, 0x28, 0x17, 0x67, 0x87, 0xae, 0x00, 0x54, 0xe8, 0x38, 0xf9, 0x3f, 0x1f, 0x7d, 0xc7, 0xc9,
	0x5f, 0x40, 0x33, 0xeb, 0x9d, 0xd0, 0xb2, 0xb1, 0x65, 0xa7, 0x51, 0xcd, 0xb8, 0xf6, 0x3d, 0xe9,
	0xd5, 0x2c, 0xdd, 0xde, 0x58, 0xc4, 0x8b, 0xcc, 0x7b, 0x90, 0x38, 0x4e, 0xee, 0x06, 0x4d, 0x42,
	0x36, 0x02, 0x05, 0x19, 0x78, 0x37, 0xeb, 0x9d, 0x50, 0x80, 0x32, 0xcf, 0xa3, 0xab, 0xd7, 0x3b,
	0xe1, 0x66, 0xe8, 0xe3, 0xda, 0x8f, 0xe8, 0x94, 0xbb, 0x85, 0x29, 0xef, 0x6a, 0x9c, 0x5b, 0xba,
	0x8e, 0xd4, 0xb2, 0x27, 0xff, 0x63, 0xae, 0xe5, 0x31, 0x20, 0x58, 0xca, 0x9e, 0xb6, 0x99, 0xef,
	0x32, 0x50, 0x2d, 0x27, 0x99, 0x07, 0xae, 0x7d, 0x7b, 0x6a, 0x3b, 0xa9, 0xc6, 0x49, 0xfe, 0x49,
	0x6d, 0x97, 0x10, 0xd7, 0x9c, 0x37, 0x07, 0xc8, 0x3f, 0xa9, 0x4d, 0x16, 0xa2, 0xf7, 0x56, 0xfd,
	0xfe, 0xa3, 0xe8, 0xad, 0xfa, 0xd2, 0xe9, 0x47, 0xda, 0x5b, 0xf5, 0xd5, 0x06, 0x9a, 0xdd, 0x08,
	0x70, 0x6c, 0xad, 0xdb, 0xd8, 0x69, 0xf1, 0x95, 0x26, 0xc7, 0xb6, 0x9e, 0x09, 0x70, 0xbc, 0x94,
	0x0c, 0x49, 0x17, 0x1b, 0x31, 0xae, 0xc8, 0xad, 0x62, 0x14, 0xb0, 0x8a, 0x14, 0x18, 0x57, 0x36,
	0x64, 0x50, 0xf3, 0x7e, 0x03, 0xed, 0x13, 0xea, 0x35, 0x25, 0x07, 0x72, 0x2b, 0x4e, 0x54, 0x2b,
	0x5c, 0xfb, 0x7f, 0xa7, 0xa0, 0xd4, 0xe2, 0xd5, 0x49, 0x92, 0x51, 0x17, 0x92, 0x41, 0x34, 0xf7,
	0x83, 0xa6, 0x43, 0xc8, 0xfd, 0xa0, 0xc7, 0x0e, 0xce, 0x4d, 0xae, 0x06, 0x81, 0x19, 0xa2, 0x49,
	0x2f, 0xb0, 0x5b, 0xeb, 0xb6, 0x67, 0xfb, 0x4d, 0x27, 0xc2, 0xb5, 0xbf, 0x96, 0xf8, 0xec, 0x59,
	0xa1, 0x97, 0xdc, 0x9f, 0x4c, 0x8a, 0x2d, 0x98, 0x6b, 0x64, 0x00, 0x0d, 0xf8, 0x2c, 0xa0, 0xc7,
	0xfc, 0x84, 0x81, 0x0e, 0x88, 0x2d, 0xd6, 0x86, 0x63, 0x7b, 0xf1, 0x46, 0x37, 0xf0, 0xdd, 0x38,
	0x88, 0xb2, 0x80, 0xdf, 0xa3, 0x3a, 0x02, 0xce, 0x88, 0x43, 0x89, 0xba, 0x3b, 0x9f, 0xdb, 0x2d,
	0x68, 0x41, 0x05, 0xd3, 0x81, 0x9c, 0x7a, 0x5e, 0x2e, 0x2e, 0xf3, 0xd7, 0x0d, 0xb4, 0x0f, 0xa0,
	0x49, 0x98, 0xb0, 0xe3, 0x27, 0x6f, 0xec, 0x7f, 0x48, 0x1c, 0x55, 0xa4, 0xe8, 0x2c, 0x1b, 0xb5,
	0x74, 0x92, 0xa6, 0x2d, 0x50, 0x7b, 0x84, 0x6f, 0xa8, 0xc7, 0x2f, 0x25, 0x2d, 0xd0, 0x60, 0x60,
	0x41, 0xdc, 0x02, 0x70, 0xa2, 0x45, 0xe1, 0xda, 0x83, 0x4a, 0xdd, 0x1d, 0x3e, 0x24, 0xd1, 0xa3,
	0xd2, 0x20, 0x6e, 0xd8, 0x0a, 0x82, 0xb8, 0x65, 0x9c, 0x92, 0x11, 0x51, 0x82, 0x34, 0x2f, 0xa1,
	0x29, 0x68, 0x79, 0xc4, 0xb5, 0xff, 0x7b, 0xaa, 0x28, 0x9b, 0x03, 0x29, 0x90, 0x0a, 0x9a, 0x84,
	0xfc, 0x3b, 0x12, 0x2a, 0xc0, 0xd5, 0x81, 0x01, 0x13, 0x9b, 0x2f, 0x31, 0xd0, 0x4c, 0xb7, 0xe7,
	0xc5, 0x6e, 0xd3, 0xc6, 0x71, 0xc6, 0xdf, 0x5e, 0x3e, 0x0d, 0xed, 0x98, 0xab, 0xe9, 0x08, 0xc6,
	0xe0, 0x12, 0xed, 0x69, 0x5a, 0x6a, 0x14, 0xe4, 0x8a, 0x82, 0x10, 0xf8, 0x7c, 0x76, 0x25, 0x38,
	0xb3, 0x8b, 0x26, 0x53, 0xc3, 0xa3, 0x1b, 0xda, 0x5d, 0x5c, 0xfb, 0x0e, 0x7d, 0xf4, 0x59, 0x29,
	0x4f, 0xc4, 0x4a, 0x68, 0x77, 0xe9, 0xd1, 0x46, 0x68, 0x10, 0x36, 0x12, 0x40, 0x02, 0x8e, 0x36,
	0xbe, 0x30, 0x3e, 0x79, 0xd7, 0xe9, 0xc8, 0xf4, 0x79, 0x59, 0x3e, 0x85, 0xbd, 0xd2, 0x84, 0xec,
	0x69, 0xc9, 0xbb, 0x06, 0x4d, 0xc2, 0xbb, 0x96, 0x50, 0x81, 0x77, 0xed, 0x03, 0x18, 0xb2, 0xda,
	0x98, 0xc0, 0xe7, 0xd9, 0x57, 0x71, 0xed, 0x81, 0x29, 0xd9, 0xcb, 0x15, 0x3a, 0xed, 0xd3, 0xd5,
	0x26, 0xb7, 0x8a, 0x29, 0x7c, 0x14, 0x9c, 0xd2, 0x15, 0x9b, 0x04, 0x99, 0xbc, 0x70, 0x72, 0x31,
	0xc7, 0x3c, 0xab, 0x70, 0xed, 0x65, 0xd3, 0xf0, 0x85, 0x0b, 0xae, 0x2a, 0xf4, 0x85, 0x0b, 0x0d,
	0xc2, 0x0b, 0x07, 0x48, 0xc0, 0x0b, 0x0f, 0x85, 0xf1, 0x66, 0x13, 0xed, 0xba, 0x18, 0xe0, 0x2c,
	0x79, 0xc5, 0x2b, 0xa5, 0xe4, 0x15, 0xcf, 0x08, 0xb0, 0x98, 0xbc, 0x22, 0xfb, 0x29, 0x58, 0xd0,
	0x04, 0x70, 0x60, 0xc7, 0xb8, 0x98, 0x8d, 0x4d, 0xc4, 0x34, 0x65, 0xe0, 0x69, 0x36, 0x07, 0x07,
	0xd7, 0xfe, 0x76, 0x4a, 0xae, 0xa8, 0xd1, 0x8b, 0x9d, 0x34, 0x95, 0x03, 0xd5, 0x8d, 0xa6, 0x60,
	0x9b, 0x20, 0xa6, 0x65, 0x6c, 0x40, 0x4c, 0x47, 0x10, 0xca, 0xdc, 0x40, 0x13, 0x40, 0x38, 0xfd,
	0xcd, 0x14, 0xd4, 0xfb, 0x05, 0x99, 0x44, 0x2c, 0x1a, 0x50, 0x14, 0x1d, 0x12, 0x67, 0x54, 0x05,
	0xd0, 0xae, 0x48, 0x90, 0x3b, 0x97, 0xd0, 0x54, 0x9a, 0x4d, 0x2f, 0x5d, 0xbd, 0x3f, 0x96, 0x38,
	0x05, 0x3b, 0xc3, 0x8b, 0xab, 0x17, 0x34, 0x09, 0xab, 0x57, 0x42, 0x05, 0x56, 0x6f, 0x04, 0x60,
	0x92, 0x89, 0x33, 0xbb, 0x07, 0xd3, 0xd0, 0xbe, 0x25, 0x4d, 0x9c, 0xda, 0x3b, 0xa8, 0x66, 0x46,
	0x26, 0x06, 0x4d, 0xc2, 0xc4, 0x12, 0x2a, 0x30, 0x31, 0x06, 0x30, 0x44, 0x49, 0xcc, 0x86, 0x7b,
	0x41, 0x87, 0x24, 0x10, 0x0c, 0xd6, 0x93, 0xd3, 0x22, 0xae, 0xfd, 0x7f, 0x92, 0x92, 0x98, 0xce,
	0x77, 0x96, 0x8e, 0xbb, 0x83, 0x0c, 0xa3, 0x4a, 0xa2, 0xb6, 0x4b, 0x50, 0x12, 0xf3, 0xe6, 0x00,
	0x4a, 0x22, 0xd6, 0x22, 0xd1, 0x04, 0xf8, 0xfc, 0xb7, 0x47, 0x3a, 0xc0, 0xc7, 0x7c, 0xa3, 0x81,
	0xf6, 0xa6, 0x83, 0xa9, 0x6c, 0xb6, 0x9a, 0x1b, 0x4e, 0xf3, 0x1e, 0x5c, 0xfb, 0xc9, 0x14, 0x2c,
	0x10, 0xc4, 0x66, 0xa2, 0x92, 0x79, 0x39, 0x19, 0xb3, 0xb4, 0x38, 0xe8, 0xd7, 0x67, 0xd5, 0x76,
	0xe1, 0xf8, 0xa9, 0x45, 0x2d, 0x92, 0x33, 0x8b, 0x55, 0x70, 0x22, 0x4f, 0x52, 0xc8, 0x34, 0x7f,
	0x11, 0xae, 0xbd, 0x76, 0x5a, 0x9b, 0x43, 0x27, 0x4d, 0x8f, 0x44, 0xe5, 0x89, 0xd4, 0x28, 0xc8,
	0x13, 0x05, 0x21, 0x90, 0x27, 0x58, 0x82, 0x23, 0x1f, 0xa3, 0xed, 0x05, 0x97, 0x38, 0x7f, 0xfb,
	0xae, 0xfc, 0x31, 0x92, 0xee, 0x94, 0xc1, 0xd1, 0x8f, 0x21, 0xb4, 0x88, 0x1f, 0x03, 0xe0, 0x81,
	0x1f, 0x43, 0x84, 0x20, 0x8a, 0xaa, 0xd6, 0x6d, 0x15, 0xd7, 0xfe, 0xe5, 0x34, 0x54, 0x54, 0x35,
	0x5e, 0x8b, 0x54, 0x51, 0xd5, 0x74, 0x08, 0x4a, 0x8e, 0x1e, 0x3b, 0x50, 0x54, 0x35, 0x0e, 0xb1,
	0xa4, 0xfa, 0xe4, 0x7e, 0x1c, 0x47, 0xbd, 0x66, 0xdc, 0x8b, 0x12, 0xc5, 0x7b, 0x0b, 0x7b, 0x41,
	0x27, 0x63, 0xc6, 0x2c, 0x93, 0xce, 0x61, 0x4e, 0x5c, 0x3a, 0x72, 0x8d, 0x0c, 0x64, 0x9c, 0x79,
	0x85, 0xfa, 0xed, 0xea, 0xfa, 0x84, 0xea, 0x43, 0xb9, 0xd3, 0x48, 0x6e, 0xbb, 0x5a, 0x34, 0xe6,
	0x32, 0xba, 0x2a, 0xb6, 0x3b, 0xb8, 0xf6, 0x03, 0xfa, 0xb1, 0x76, 0x65, 0x39, 0x3e, 0xed, 0x0e,
	0xb5, 0x22, 0x5f, 0xb0, 0xc9, 0x64, 0x7b, 0x33, 0x63, 0x10, 0xc0, 0x4b, 0x80, 0x89, 0x8c, 0x55,
	0xd2, 0xb9, 0xe1, 0xda, 0xdf, 0x49, 0x32, 0x56, 0x0e, 0xc8, 0xa7, 0x32, 0x56, 0x6e, 0x15, 0x64,
	0xac, 0x8a, 0x13, 0xc8, 0x58, 0x39, 0x3d, 0x1c, 0x11, 0x7a, 0xe9, 0x1d, 0xa5, 0x1b, 0xe2, 0xda,
	0x4b, 0x24, 0xa1, 0xc7, 0xae, 0xc2, 0x56, 0x1a, 0x54, 0xe8, 0x65, 0x3f, 0x05, 0xa1, 0x27, 0x80,
	0x03, 0xa1, 0xc7, 0xda, 0x57, 0x42, 0xe2, 0x5f, 0x34, 0x9f, 0x7b, 0x13, 0x8a, 0x6b, 0xaf, 0x9b,
	0xde, 0xde, 0xd5, 0xeb, 0xd3, 0x05, 0xff, 0x5d, 0xb9, 0x53, 0x70, 0xcb, 0xce, 0x9f, 0x49, 0xe7,
	0xbd, 0xab, 0x20, 0x4a, 0x44, 0xb4, 0x74, 0xd1, 0x8c, 0x6b, 0xff, 0x8f, 0x24, 0xa2, 0xe1, 0x15,
	0x21, 0x15, 0xd1, 0xb0, 0x4d, 0x10, 0xd1, 0x32, 0x36, 0x20, 0xa2, 0xe1, 0x95, 0x35, 0x3d, 0xd5,
	0xaa, 0x1e, 0xc8, 0xb8, 0xf6, 0xc3, 0xa9, 0x21, 0xde, 0xcd, 0x62, 0x02, 0xbc, 0xac, 0x55, 0x93,
	0x00, 0x4f, 0x40, 0xaa, 0x4b, 0x80, 0xc7, 0x41, 0x17, 0x3e, 0x64, 0xa0, 0xbd, 0x5a, 0xcb, 0x79,
	0x69, 0xb3, 0x2b, 0x14, 0xda, 0xd4, 0x4b, 0x5b, 0x0b, 0x34, 0xc7, 0xb0, 0x5e, 0x46, 0x7a, 0xff,
	0xce, 0x40, 0xb3, 0x1a, 0xbb, 0x7b, 0x09, 0x49, 0x35, 0x57, 0xd0, 0x55, 0x76, 0x1c, 0x47, 0xb5,
	0xab, 0xc8, 0x05, 0x56, 0xa6, 0xe2, 0xae, 0xf5, 0xd6, 0x7d, 0x87, 0x5c, 0x52, 0x52, 0x54, 0x8b,
	0x71, 0x1c, 0x71, 0x54, 0x09, 0x04, 0x40, 0x95, 0x34, 0x2c, 0xbc, 0xdb, 0x40, 0x93, 0xc0, 0xf0,
	0x5f, 0xc6, 0x4f, 0xf3, 0x8a, 0x71, 0x64, 0xa6, 0x39, 0x21, 0x17, 0xe3, 0xd8, 0x6e, 0x6e, 0x54,
	0xa9, 0x3a, 0x2a, 0xdf, 0x80, 0xca, 0x37, 0x60, 0x84, 0xbe, 0x01, 0x6d, 0x35, 0x55, 0x87, 0x78,
	0x7d, 0x2a, 0x6d, 0xcd, 0x9d, 0xdf, 0x21, 0xfe, 0x7a, 0x4e, 0xca, 0x5c, 0xe6, 0xd7, 0x77, 0x63,
	0xfe, 0x9c, 0x8f, 0x7c, 0xda, 0xdc, 0x54, 0xa4, 0x69, 0x1f, 0xb6, 0x8c, 0x7c, 0xf3, 0xd3, 0x06,
	0x5a, 0x18, 0xfe, 0xa2, 0xca, 0x48, 0xf9, 0xf7, 0xa6, 0xd1, 0x78, 0x66, 0x86, 0xaa, 0x18, 0x7d,
	0xc5, 0xe8, 0x2b, 0x46, 0x3f, 0xba, 0x64, 0x14, 0x07, 0x5a, 0x4e, 0xdb, 0xee, 0x79, 0xb1, 0xd5,
	0x0e, 0xa2, 0x4b, 0x76, 0xd4, 0x72, 0xfd, 0x8e, 0xd5, 0xf4, 0x6c, 0x8c, 0x2d, 0xb7, 0x45, 0x9c,
	0xc2, 0xae, 0xa4, 0x3e, 0x3c, 0x27, 0xe9, 0xb0, 0xd3, 0xd9, 0xa8, 0xe5, 0x64, 0x10, 0x99, 0xe2,
	0xa6, 0xf4, 0xd6, 0x37, 0x17, 0x11, 0x38, 0xb0, 0xb6, 0xf4, 0x98, 0x5a, 0xe6, 0x26, 0x9a, 0x68,
	0xe1, 0x66, 0x68, 0x39, 0x7e, 0x1c, 0xb9, 0x0e, 0x66, 0x31, 0x52, 0x47, 0x05, 0xc3, 0xf5, 0x4a,
	0x4b, 0x82, 0xa2, 0x6c, 0x80, 0xee, 0x9c, 0xb5, 0xe5, 0xc6, 0x29, 0x0a, 0x29, 0xec, 0x1c, 0x01,
	0x1f, 0xdc, 0x39, 0xb8, 0x19, 0xb2, 0xd1, 0xe6, 0xcb, 0x0d, 0x34, 0xdd, 0x0d, 0x3d, 0x6c, 0x39,
	0xf7, 0xf2, 0xc9, 0x77, 0x6f, 0x77, 0x72, 0xe2, 0x0d, 0xb1, 0xda, 0x38, 0xbb, 0x76, 0xea, 0xde,
	0x90, 0xcf, 0xcf, 0x8e, 0xcc, 0x32, 0x5a, 0x60, 0x78, 0x4d, 0x3a, 0x39, 0x90, 0xf9, 0x7c, 0x34,
	0xc5, 0x0d, 0xef, 0x74, 0xed, 0x0a, 0x61, 0x57, 0x19, 0x83, 0x64, 0xcb, 0xf7, 0x88, 0x6c, 0xaa,
	0x57, 0x96, 0xf0, 0xe4, 0x45, 0x11, 0xc4, 0x7c, 0xb3, 0x81, 0xf6, 0x6e, 0x7a, 0xb6, 0x6f, 0x85,
	0x91, 0x1b, 0x10, 0xc3, 0x6b, 0xfa, 0xa8, 0xd3, 0xdb, 0x7d, 0x54, 0x62, 0xc5, 0xbc, 0xcb, 0xb3,
	0xfd, 0x06, 0x43, 0xc1, 0x9f, 0x97, 0x31, 0x44, 0xed, 0x04, 0xc0, 0x8a, 0xb9, 0xa9, 0x82, 0x9b,
	0x1f, 0x31, 0xd0, 0xfe, 0x8e, 0x17, 0xac, 0xdb, 0x1e, 0x2b, 0x2c, 0x9b, 0x3e, 0x92, 0xd6, 0xe3,
	0x2c, 0x7b, 0x13, 0xb7, 0x13, 0x10, 0x5a, 0x5f, 0x96, 0xb6, 0x24, 0x9a, 0x00, 0x29, 0xdc, 0xad,
	0xed, 0x12, 0x4c, 0x67, 0xb9, 0xb3, 0x01, 0xeb, 0x73, 0x47, 0x8b, 0x05, 0x84, 0x20, 0x7c, 0x5f,
	0x0a, 0x41, 0xe0, 0x9f, 0xe9, 0x11, 0x0f, 0x77, 0xff, 0xda, 0x63, 0x22, 0xdc, 0xfd, 0x6d, 0x06,
	0xda, 0x2f, 0xc7, 0x3b, 0xf0, 0x67, 0xf8, 0xfa, 0x5c, 0xa1, 0x3d, 0x8a, 0x7c, 0x4b, 0xa9, 0x4d,
	0x29, 0xc2, 0x9e, 0x8b, 0x1d, 0x7c, 0xcb, 0x4d, 0x2d, 0x16, 0x62, 0x6e, 0x29, 0x5e, 0x50, 0x65,
	0x8d, 0x46, 0x90, 0x56, 0x5a, 0x19, 0xc9, 0x7c, 0xfb, 0x2e, 0x34, 0xf6, 0x8c, 0x00, 0x3f, 0xa3,
	0xe7, 0xf4, 0xaa, 0xc0, 0xbd, 0x4a, 0xaf, 0xab, 0xf4, 0xba, 0x51, 0xe9, 0x75, 0xcf, 0x44, 0x93,
	0x5d, 0xfb, 0x5e, 0x6b, 0xdd, 0xf6, 0x5b, 0x97, 0xdc, 0x56, 0xbc, 0xc1, 0x14, 0x39, 0xe2, 0x5b,
	0xb0, 0x6a, 0xdf, 0xbb, 0x94, 0xb6, 0x73, 0xdf, 0x02, 0x30, 0x1c, 0xf8, 0x16, 0x74, 0x85, 0xf1,
	0x04, 0xb1, 0xeb, 0x0b, 0x88, 0x27, 0x05, 0xc4, 0xae, 0xaf, 0x43, 0x2c, 0x0e, 0x87, 0x88, 0x85,
	0xf1, 0xe6, 0x45, 0xb4, 0x27, 0x51, 0x65, 0x2e, 0x26, 0xac, 0xc2, 0x72, 0x49, 0x2d, 0xc1, 0xb6,
	0xeb, 0x44, 0x44, 0x0d, 0xbb, 0x92, 0x46, 0xd4, 0xa5, 0x9c, 0x64, 0x25, 0xeb, 0xe5, 0x11, 0x75,
	0x3a, 0x58, 0xe0, 0xbb, 0x7b, 0x51, 0x01, 0x36, 0x9f, 0x27, 0x88, 0xf1, 0xef, 0x5c, 0x0d, 0xe5,
	0x50, 0x3a, 0xd7, 0xce, 0xa5, 0xf8, 0xbb, 0x0c, 0x34, 0xaf, 0x68, 0xc2, 0x5c, 0xf0, 0x7d, 0x59,
	0x2a, 0x73, 0x22, 0xe9, 0x5b, 0x34, 0x73, 0x8f, 0xdc, 0xa8, 0x94, 0x39, 0xc9, 0x9f, 0x00, 0x5c,
	0x01, 0xb6, 0xf5, 0x78, 0x16, 0xde, 0x63, 0xa0, 0xdd, 0xf0, 0x49, 0xcb, 0x28, 0x45, 0xbe, 0x30,
	0x86, 0xd0, 0xf9, 0xc0, 0x73, 0x2a, 0xfb, 0x40, 0x25, 0x47, 0x2a, 0x39, 0x32, 0x52, 0x39, 0xe2,
	0x22, 0x93, 0xd4, 0xa9, 0x63, 0x07, 0x24, 0x56, 0xb7, 0x77, 0x82, 0x20, 0x21, 0x85, 0xee, 0xf8,
	0xbe, 0xcc, 0x6a, 0xf5, 0x1e, 0x4b, 0x5d, 0x9d, 0x64, 0x38, 0xe0, 0x45, 0x12, 0x49, 0x80, 0xe6,
	0x0b, 0xd4, 0xb8, 0xee, 0x1a, 0xf7, 0xb0, 0x4a, 0x07, 0x3f, 0xbc, 0x34, 0x91, 0x32, 0x9e, 0x32,
	0x72, 0xbb, 0x97, 0x4f, 0xa2, 0xdd, 0x09, 0x9d, 0x27, 0x9d, 0xb6, 0xeb, 0xbb, 0x09, 0x57, 0xa8,
	0x38, 0x5e, 0xc5, 0xf1, 0x2a, 0x8e, 0x37, 0x22, 0x8e, 0xb7, 0x89, 0x26, 0xda, 0x8e, 0x1d, 0xf7,
	0x22, 0x47, 0x7f, 0xfd, 0x05, 0xb7, 0xe6, 0x69, 0x3a, 0x34, 0x61, 0x49, 0x64, 0xad, 0xf2, 0xdf,
	0x82, 0x0d, 0x52, 0xc4, 0x07, 0xd6, 0x6a, 0x9b, 0x8f, 0xce, 0x29, 0x85, 0xca, 0x18, 0xe1, 0x35,
	0xfa, 0xd9, 0x47, 0x5f, 0x0a, 0x95, 0x25, 0xc1, 0x38, 0xae, 0xa7, 0x67, 0x84, 0xa5, 0x50, 0x99,
	0xbe, 0x7e, 0x50, 0x4f, 0xc8, 0xce, 0xb5, 0xf6, 0xfb, 0x0c, 0xb4, 0x0f, 0xd4, 0xb0, 0x55, 0xb2,
	0x32, 0x71, 0x2f, 0x79, 0x5e, 0x2d, 0x89, 0x30, 0xc6, 0x59, 0xb1, 0x81, 0x6b, 0xea, 0xd7, 0x69,
	0x0a, 0xe3, 0x6a, 0xb5, 0xf4, 0x59, 0x5f, 0x85, 0x37, 0x2f, 0xa1, 0xa9, 0x74, 0xf9, 0xa4, 0x2e,
	0x84, 0x7f, 0x21, 0x79, 0x01, 0xb3, 0x35, 0xc7, 0x3c, 0x07, 0x89, 0x17, 0x30, 0x68, 0x12, 0xbc,
	0x80, 0x25, 0x54, 0xc0, 0x18, 0xdd, 0x06, 0x30, 0xe4, 0xf6, 0x33, 0x6f, 0xad, 0x97, 0xb5, 0x32,
	0x54, 0xd1, 0xee, 0x28, 0x6b, 0x65, 0xa8, 0xc2, 0x1d, 0x54, 0xd6, 0xca, 0x50, 0xba, 0xdd, 0x56,
	0x46, 0x5a, 0x3f, 0x37, 0x81, 0x76, 0xc3, 0x80, 0x83, 0x4a, 0x97, 0xaa, 0x74, 0xa9, 0x4a, 0x97,
	0x1a, 0x91, 0x2e, 0xf5, 0x2b, 0x06, 0x9a, 0xcb, 0x02, 0x7a, 0x58, 0xbc, 0x67, 0x7a, 0xe7, 0x38,
	0x01, 0x37, 0x1e, 0xd9, 0xa5, 0x67, 0x5d, 0x4c, 0x1d, 0x1a, 0x69, 0x58, 0x77, 0x0a, 0x49, 0xfa,
	0xf8, 0x4d, 0x63, 0x1a, 0xd6, 0xad, 0x47, 0x0c, 0xc3, 0xba, 0x75, 0x28, 0xcc, 0x17, 0xab, 0x54,
	0xf9, 0xce, 0xbd, 0xf1, 0x46, 0x10, 0x12, 0x6b, 0xe6, 0xb8, 0x6e, 0xfa, 0x73, 0x74, 0x40, 0xfe,
	0xf4, 0x0c, 0x43, 0xc1, 0xf4, 0x0c, 0x85, 0xf9, 0x1b, 0x06, 0xda, 0x9b, 0xc6, 0x01, 0x65, 0x45,
	0xa9, 0x45, 0xed, 0xea, 0x7a, 0x7d, 0xfc, 0x14, 0x8b, 0x29, 0x4a, 0xe3, 0x2e, 0x12, 0x05, 0x87,
	0xdc, 0xc7, 0xaa, 0xed, 0xc2, 0x7d, 0xac, 0x76, 0x22, 0xa0, 0x75, 0x44, 0x2a, 0x38, 0x21, 0x51,
	0x0e, 0x02, 0x01, 0x7a, 0x57, 0x0e, 0x89, 0x52, 0x48, 0x49, 0x46, 0xa2, 0xda, 0xae, 0x09, 0x7c,
	0xc9, 0x27, 0x11, 0xab, 0xe0, 0x40, 0x19, 0xfc, 0xae, 0xa2, 0x0c, 0x8a, 0x44, 0xed, 0xdc, 0x64,
	0xf0, 0xef, 0x0c, 0x74, 0x64, 0xd8, 0x37, 0x28, 0x65, 0x09, 0x87, 0x2b, 0x64, 0xba, 0xd5, 0x0f,
	0x50, 0x46, 0x4f, 0xe7, 0xf3, 0xc0, 0xd3, 0xf9, 0x80, 0x12, 0xbd, 0xc4, 0xae, 0x96, 0xb3, 0x00,
	0x95, 0xed, 0xb8, 0x3c, 0x53, 0x75, 0x45, 0x5d, 0x0f, 0x65, 0xfc, 0x6e, 0xdf, 0x42, 0x08, 0xf1,
	0x48, 0xc5, 0x4a, 0x55, 0xa9, 0x54, 0x95, 0x4a, 0x55, 0x19, 0x91, 0xaa, 0x72, 0x27, 0x7a, 0x3c,
	0x91, 0xe3, 0xa9, 0x62, 0xb2, 0x4f, 0x8d, 0x24, 0x26, 0x1f, 0x8f, 0x50, 0x43, 0xda, 0x84, 0xdc,
	0x3a, 0x14, 0x12, 0x50, 0x43, 0x9b, 0x86, 0x18, 0xb5, 0x33, 0xcc, 0x3b, 0x36, 0x57, 0xdc, 0x6f,
	0xa0, 0x9a, 0x94, 0x42, 0x55, 0x29, 0x87, 0x91, 0x93, 0xd1, 0xe0, 0x34, 0x4d, 0xf4, 0x20, 0x36,
	0x71, 0xa3, 0xc5, 0x0d, 0xda, 0xec, 0xac, 0x5a, 0xb3, 0xc5, 0x5e, 0x4f, 0x87, 0x63, 0x88, 0xdb,
	0xcf, 0x97, 0x1e, 0x6d, 0xb7, 0x1f, 0x7a, 0x1b, 0x00, 0x3f, 0x40, 0x19, 0x45, 0xc2, 0x9b, 0x11,
	0x4a, 0x83, 0xd7, 0xa3, 0x8e, 0x53, 0x45, 0xc1, 0x54, 0x32, 0xa1, 0x92, 0x09, 0xa3, 0x92, 0x09,
	0x96, 0x1a, 0x05, 0xb3, 0x5f, 0x62, 0xde, 0xc9, 0x9e, 0x7c, 0x84, 0xb8, 0xf7, 0x1f, 0x3c, 0x9a,
	0xdc, 0xfb, 0x5d, 0x06, 0x9a, 0x57, 0x8e, 0x8e, 0x8a, 0x64, 0x99, 0x93, 0x32, 0x60, 0x64, 0xf9,
	0x05, 0x88, 0xf3, 0x8a, 0xdc, 0xa8, 0x38, 0xaf, 0xe4, 0x4f, 0x00, 0x9c, 0x57, 0x22, 0x3d, 0x1e,
	0x52, 0xe3, 0x47, 0xf9, 0x0c, 0x65, 0xe4, 0xe1, 0xbf, 0x7d, 0x00, 0x4d, 0x49, 0x2f, 0xa3, 0xe2,
	0xe3, 0x15, 0x1f, 0xaf, 0xf8, 0xf8, 0x88, 0xf8, 0xf8, 0x6b, 0x0d, 0x34, 0x9b, 0xc6, 0xa6, 0x34,
	0xc9, 0x25, 0x5c, 0x1c, 0x34, 0x03, 0x8f, 0x69, 0xfa, 0x07, 0x78, 0xbe, 0x43, 0x32, 0xa4, 0xc1,
	0xba, 0xc9, 0xf7, 0x24, 0x51, 0x85, 0xac, 0x63, 0xd9, 0x49, 0xbb, 0x78, 0x54, 0xa1, 0x06, 0x2d,
	0x88, 0x2a, 0x6c, 0xc9, 0xa0, 0xe6, 0x17, 0x0c, 0x74, 0xcc, 0xd9, 0x0c, 0x7d, 0xcb, 0x0d, 0x37,
	0x9f, 0x92, 0xa6, 0xe5, 0xb3, 0x9a, 0x1b, 0xb6, 0xeb, 0x93, 0x82, 0x3e, 0x51, 0x97, 0x6c, 0x22,
	0x16, 0xfb, 0x52, 0x93, 0x6c, 0x20, 0xcb, 0xc9, 0x38, 0x52, 0x91, 0x88, 0x38, 0xf5, 0x9f, 0xda,
	0x0c, 0xfd, 0x95, 0x70, 0xf3, 0x29, 0x72, 0x2f, 0x43, 0xc2, 0x9d, 0xfa, 0xb7, 0x31, 0x23, 0x70,
	0xea, 0x77, 0x8a, 0x11, 0x9b, 0xff, 0xd6, 0x40, 0x87, 0x09, 0xce, 0xfc, 0x07, 0xd8, 0x3d, 0xe4,
	0x01, 0xce, 0x0f, 0xfa, 0xf5, 0x03, 0xc9, 0x03, 0xe4, 0x13, 0x7f, 0xab, 0x40, 0xfc, 0xb6, 0xe8,
	0x3e, 0xe0, 0xe4, 0xe3, 0x23, 0x34, 0x0f, 0x79, 0xe9, 0x53, 0xdb, 0xa1, 0xb9, 0xf8, 0x85, 0x33,
	0x9a, 0xb7, 0xff, 0xae, 0x0f, 0xb8, 0x05, 0xef, 0xf9, 0x97, 0x0d, 0x74, 0x50, 0x11, 0x93, 0x6d,
	0x7b, 0x3d, 0x72, 0x9b, 0x16, 0xf6, 0xed, 0x98, 0x84, 0xee, 0xb0, 0x7c, 0xda, 0x92, 0x88, 0x39,
	0x4d, 0x46, 0xad, 0xf9, 0xb6, 0x90, 0x4f, 0xbb, 0x08, 0x15, 0xc8, 0xa7, 0x1d, 0xe5, 0xe1, 0x32,
	0x7f, 0x09, 0xd5, 0x14, 0x2c, 0x1b, 0x36, 0xb6, 0x42, 0xbf, 0x5d, 0x9b, 0x21, 0xc4, 0x10, 0xd5,
	0x44, 0x22, 0xe6, 0x8c, 0x8d, 0x1b, 0xe7, 0x4e, 0x73, 0xd5, 0x24, 0x0f, 0x05, 0x50, 0x4d, 0x22,
	0x15, 0x87, 0xdf, 0x26, 0x21, 0x6b, 0x0a, 0xb8, 0x8b, 0x2d, 0xb6, 0xd5, 0x6a, 0x26, 0x21, 0x82,
	0x84, 0xac, 0x49, 0x44, 0xac, 0x60, 0xb6, 0x93, 0x79, 0xc8, 0x5a, 0x01, 0x22, 0x10, 0xb2, 0x16,
	0xe5, 0x60, 0x32, 0xdf, 0x69, 0xa0, 0xfd, 0xf9, 0xeb, 0x69, 0x76, 0xc8, 0x7a, 0xa2, 0x69, 0x7e,
	0x72, 0xd7, 0xd2, 0x8d, 0xd0, 0x40, 0x5e, 0xb8, 0x8c, 0xe6, 0x70, 0xce, 0x12, 0x7a, 0x83, 0x81,
	0xf6, 0xe0, 0x44, 0x19, 0x68, 0x4a, 0x37, 0x30, 0x7b, 0x60, 0xc1, 0xe9, 0x35, 0x32, 0x46, 0xbc,
	0x28, 0x21, 0x1c, 0x90, 0x78, 0x5e, 0xab, 0x7d, 0xdc, 0xf3, 0x5a, 0x87, 0x1b, 0x78, 0x5e, 0x63,
	0x05, 0xd8, 0xbc, 0xcf, 0x40, 0x33, 0x69, 0xf6, 0xb5, 0x44, 0x77, 0xa3, 0x5a, 0xe5, 0x8f, 0x14,
	0xe7, 0x12, 0x68, 0x6c, 0xe7, 0xba, 0x5e, 0xe6, 0xed, 0x02, 0xdb, 0x04, 0x6f, 0x17, 0x05, 0xbb,
	0x9a, 0x4e, 0x8e, 0x83, 0x25, 0xea, 0x6e, 0xce, 0x95, 0xcc, 0x8f, 0xa5, 0x92, 0xab, 0x1a, 0x9a,
	0x46, 0x74, 0x27, 0xd3, 0x14, 0x4e, 0x23, 0x3f, 0x91, 0xd2, 0xc2, 0x4b, 0xd3, 0xed, 0xfc, 0x44,
	0xf2, 0x36, 0x03, 0xed, 0x97, 0x12, 0xf1, 0x09, 0x6a, 0xff, 0x7f, 0x9e, 0x2b, 0xcc, 0xef, 0x47,
	0xac, 0x36, 0x52, 0x9b, 0x62, 0xb5, 0xc9, 0xc5, 0x0e, 0xac, 0x36, 0x91, 0x16, 0xcb, 0xb0, 0x63,
	0xc9, 0x9f, 0x94, 0xe0, 0x58, 0x42, 0x0e, 0x75, 0x30, 0xcd, 0x9f, 0x40, 0xe1, 0x9f, 0xce, 0x15,
	0xa5, 0x0e, 0x14, 0x39, 0x27, 0x6b, 0x52, 0x0e, 0x75, 0x79, 0xa8, 0x75, 0x9c, 0x13, 0xe2, 0xd8,
	0x76, 0x5c, 0xe1, 0x37, 0x1e, 0x13, 0x71, 0x85, 0x4d, 0xb4, 0x6b, 0xbd, 0x13, 0x66, 0xe9, 0x5b,
	0x59, 0x6e, 0xc4, 0x19, 0x21, 0x47, 0x36, 0x3b, 0xd3, 0x12, 0x1d, 0x36, 0xfb, 0x29, 0x9c, 0x9e,
	0x04, 0x70, 0xa0, 0xc3, 0xae, 0x77, 0x42, 0x36, 0x76, 0xe1, 0x15, 0x57, 0xa0, 0x43, 0x85, 0x6c,
	0xa8, 0x8c, 0xd7, 0x68, 0xcf, 0x00, 0xd7, 0x68, 0xf3, 0x3c, 0x61, 0x73, 0xca, 0x1d, 0xc8, 0x71,
	0xf9, 0x21, 0x25, 0x0e, 0x7a, 0xc5, 0x15, 0xe8, 0xe8, 0x50, 0xd6, 0x57, 0xc6, 0x77, 0xb1, 0x0a,
	0xde, 0x45, 0xc6, 0xb9, 0x96, 0x03, 0xdf, 0x77, 0x48, 0xde, 0xf1, 0x87, 0xf6, 0x1e, 0x3e, 0x64,
	0xa0, 0xbd, 0x5a, 0x66, 0x5b, 0x46, 0xbb, 0xc3, 0xff, 0x39, 0x81, 0x26, 0x01, 0x37, 0xa9, 0xac,
	0x0e, 0x95, 0xd5, 0xa1, 0xb2, 0x3a, 0x8c, 0xc8, 0xea, 0xf0, 0x6b, 0x06, 0xda, 0x27, 0x09, 0x6b,
	0xe8, 0xfb, 0x74, 0x00, 0x26, 0xa0, 0x4e, 0x74, 0x6c, 0x92, 0x2f, 0x9a, 0x7c, 0x52, 0x92, 0xa0,
	0x14, 0x6c, 0x5e, 0xae, 0x78, 0x5f, 0xa7, 0xd5, 0x04, 0x34, 0xaa, 0xf7, 0x9e, 0x48, 0x83, 0x20,
	0x39, 0xb2, 0xe4, 0x28, 0xbb, 0xec, 0x86, 0xf2, 0x3a, 0xad, 0x76, 0x32, 0x42, 0x55, 0xf7, 0x9d,
	0xb9, 0xee, 0x47, 0x0f, 0x16, 0x51, 0x38, 0x42, 0xef, 0x23, 0x5b, 0x75, 0x45, 0x3f, 0xa0, 0xa5,
	0xe9, 0xe1, 0xa9, 0xe2, 0xf9, 0x17, 0xa8, 0x5f, 0x7e, 0xb4, 0x2f, 0x50, 0x5f, 0x79, 0x05, 0xaa,
	0x0f, 0x59, 0x1f, 0x65, 0xd4, 0x07, 0x1a, 0x40, 0x1f, 0xd8, 0xaf, 0xff, 0x66, 0x0f, 0x49, 0x25,
	0xf8, 0x55, 0xf9, 0x45, 0x3c, 0x36, 0x7c, 0xad, 0x2c, 0xf0, 0x22, 0xae, 0xdf, 0xce, 0x86, 0x7a,
	0x68, 0xef, 0xe5, 0x83, 0x06, 0x9a, 0xd5, 0x6c, 0x85, 0x32, 0x2a, 0x4a, 0x9f, 0x9d, 0x46, 0x93,
	0x20, 0x71, 0x7a, 0xa5, 0x28, 0x55, 0x8a, 0x52, 0xa5, 0x28, 0x8d, 0x48, 0x51, 0xfa, 0x65, 0x03,
	0x1d, 0x4c, 0x57, 0x28, 0xa9, 0x54, 0x24, 0x56, 0x2a, 0xe0, 0x49, 0xc8, 0x88, 0x8d, 0x7b, 0x39,
	0x1b, 0x07, 0xf6, 0x2b, 0x99, 0xe4, 0x66, 0xb8, 0x1d, 0x74, 0xa8, 0x80, 0x8d, 0xbb, 0x99, 0x83,
	0x8b, 0xf8, 0xad, 0xef, 0x93, 0x60, 0x61, 0x4a, 0xb2, 0xfd, 0x50, 0x75, 0x13, 0xed, 0xa5, 0x34,
	0xb3, 0xbc, 0x88, 0x50, 0x51, 0xdc, 0xf4, 0xa8, 0x61, 0x66, 0x79, 0x0d, 0x02, 0xd3, 0x41, 0x33,
	0xea, 0xcb, 0xa1, 0xf9, 0x31, 0x88, 0x31, 0x54, 0x7d, 0x25, 0x0b, 0xda, 0x09, 0xe1, 0x7b, 0x98,
	0xc2, 0xd2, 0xd3, 0x17, 0xe9, 0x36, 0x60, 0x8a, 0x9d, 0xeb, 0x36, 0x9f, 0x37, 0xd0, 0xd1, 0x9c,
	0xf2, 0x0f, 0x6a, 0xc0, 0xdd, 0x90, 0x5a, 0x13, 0xcf, 0x1c, 0xf4, 0xeb, 0x87, 0xf4, 0x5d, 0x5c,
	0xe3, 0x39, 0x51, 0x58, 0x72, 0x42, 0xaf, 0xf9, 0x1c, 0xc2, 0x45, 0x48, 0xb7, 0x6d, 0x4d, 0xfb,
	0xea, 0x63, 0xc2, 0x9a, 0xf6, 0x41, 0x03, 0x1d, 0x54, 0x13, 0xab, 0xab, 0xc9, 0xc6, 0xf2, 0xd3,
	0xb6, 0xaf, 0x0a, 0x49, 0xed, 0x79, 0x2b, 0x27, 0xfc, 0xe6, 0xbc, 0xec, 0xed, 0x7a, 0x8a, 0x6b,
	0x9b, 0x39, 0xa8, 0xcc, 0xfb, 0x0c, 0xb4, 0x87, 0x15, 0x18, 0x4c, 0xab, 0x33, 0xd0, 0xa2, 0x85,
	0x2c, 0x30, 0x32, 0xdb, 0x9c, 0xb4, 0xd2, 0x20, 0xab, 0xcf, 0x40, 0x0a, 0x17, 0x92, 0xcb, 0x0c,
	0xa5, 0x59, 0xb8, 0xcc, 0xd0, 0xe1, 0x05, 0x97, 0x19, 0xb6, 0x02, 0x4c, 0x14, 0x1d, 0xcd, 0xbe,
	0x28, 0xa3, 0xa2, 0xf3, 0x6e, 0x13, 0xed, 0xd5, 0x6e, 0x95, 0x4a, 0xe1, 0xa9, 0x14, 0x9e, 0x4a,
	0xe1, 0x19, 0xa1, 0xc2, 0x93, 0x27, 0x89, 0x22, 0x3b, 0x76, 0x44, 0x85, 0x47, 0xbb, 0x5b, 0xcf,
	0xdb, 0xb1, 0xc3, 0x39, 0x6a, 0x11, 0x2a, 0xa0, 0xf0, 0xe0, 0x3c, 0x5c, 0xe6, 0xef, 0x1a, 0xe8,
	0x50, 0x2e, 0x1a, 0x52, 0x05, 0x93, 0xea, 0x3d, 0x37, 0x14, 0x8a, 0xe2, 0xf3, 0x3d, 0x8f, 0x87,
	0xf0, 0x35, 0x06, 0xfd, 0xfa, 0x7c, 0xee, 0xb0, 0x64, 0x31, 0xde, 0x32, 0x84, 0x7c, 0xb9, 0x6a,
	0xe6, 0x3c, 0xce, 0xc5, 0x66, 0xbe, 0xdd, 0x40, 0xb3, 0xb0, 0x32, 0x1c, 0xb0, 0x17, 0xdd, 0x5c,
	0x48, 0x37, 0x28, 0x35, 0x97, 0xe5, 0x12, 0x97, 0x5b, 0x85, 0x5c, 0xe2, 0x9a, 0x99, 0x80, 0xd7,
	0x8f, 0x2f, 0x83, 0x12, 0xfa, 0x24, 0x2d, 0x4c, 0xd4, 0xaf, 0x8a, 0xe9, 0x03, 0xc2, 0x25, 0xa3,
	0x4f, 0x6e, 0x15, 0xe8, 0xd3, 0xcc, 0x04, 0xe8, 0xc3, 0x32, 0xa8, 0xe9, 0xaa, 0xd1, 0x74, 0xc7,
	0x0a, 0x69, 0x7a, 0x78, 0x76, 0x2d, 0xa9, 0x24, 0xab, 0xaa, 0xf3, 0xe5, 0x55, 0x7a, 0x25, 0x76,
	0x2d, 0xa9, 0x4d, 0xb1, 0x6b, 0xe5, 0x62, 0x07, 0x76, 0xad, 0xb6, 0x16, 0x8b, 0xf9, 0x46, 0x03,
	0xcd, 0x81, 0xca, 0xad, 0xaa, 0x2a, 0xa7, 0x2f, 0x05, 0x7b, 0x32, 0x11, 0x5c, 0xa0, 0x85, 0x13,
	0x76, 0xbd, 0xa6, 0x22, 0xac, 0x9e, 0xac, 0x3d, 0x6d, 0x0d, 0x86, 0x2a, 0x23, 0xec, 0x28, 0x2d,
	0x9b, 0x6f, 0xbb, 0x02, 0x1d, 0xdf, 0x16, 0x9f, 0x28, 0xa3, 0x59, 0xef, 0x85, 0xc0, 0xac, 0xf7,
	0x10, 0xf8, 0xf5, 0xb6, 0xed, 0x7a, 0xb9, 0xaf, 0x47, 0x66, 0x48, 0xff, 0x38, 0x5f, 0xcf, 0xc7,
	0x0d, 0x74, 0xa0, 0x80, 0x63, 0x96, 0xf1, 0x54, 0xf0, 0x95, 0xdd, 0x28, 0x2d, 0x06, 0x48, 0x2a,
	0x4e, 0x55, 0x0e, 0xea, 0xd5, 0x81, 0xa0, 0x3a, 0x10, 0x8c, 0xfc, 0x40, 0x40, 0xef, 0x21, 0xed,
	0x74, 0x07, 0x5a, 0x6e, 0x68, 0xd9, 0xad, 0x56, 0xe4, 0x60, 0xcc, 0x12, 0x2e, 0xb2, 0x03, 0x01,
	0xdc, 0xa8, 0x2b, 0x8d, 0x45, 0x3a, 0x48, 0x3c, 0x10, 0xe4, 0xa3, 0x92, 0x0e, 0x04, 0x12, 0xae,
	0x90, 0xe1, 0x22, 0xe6, 0x20, 0x15, 0x4d, 0x18, 0x05, 0xa1, 0x13, 0xc5, 0xdc, 0x0e, 0x9a, 0xc3,
	0x0f, 0xee, 0xa0, 0xba, 0x3f, 0x44, 0xde, 0xc8, 0x80, 0x8b, 0x28, 0xe5, 0x53, 0x48, 0xaa, 0x7f,
	0x1e, 0x32, 0xf3, 0xf7, 0x0d, 0xa4, 0xc1, 0xd3, 0xc3, 0x4e, 0x64, 0x35, 0x23, 0x87, 0x64, 0xfb,
	0xb5, 0xbd, 0xb4, 0x9c, 0x43, 0xe6, 0x1a, 0x78, 0x27, 0x76, 0xa2, 0x65, 0xde, 0xbd, 0xf4, 0x9c,
	0x44, 0x23, 0x92, 0x49, 0x96, 0x06, 0x5d, 0xee, 0xd7, 0x7f, 0x2a, 0x8f, 0x6e, 0x79, 0x3e, 0xa0,
	0x10, 0xe1, 0x62, 0xbc, 0xe6, 0x27, 0x0c, 0x74, 0x5c, 0x45, 0xc9, 0xd4, 0x13, 0xf7, 0x45, 0x94,
	0xad, 0x09, 0xf5, 0x20, 0x5e, 0x38, 0xe8, 0xd7, 0x17, 0x64, 0x62, 0xef, 0x02, 0xc3, 0xd9, 0xee,
	0x7a, 0x4a, 0x1e, 0xbd, 0x1a, 0xe4, 0x22, 0xc9, 0x0b, 0x78, 0x28, 0x76, 0xf3, 0x23, 0x06, 0x9a,
	0xcb, 0x52, 0xb8, 0x09, 0x65, 0xfd, 0x85, 0x33, 0xc4, 0x4d, 0x92, 0xe7, 0x33, 0xff, 0x7e, 0x0c,
	0x2e, 0x53, 0x0e, 0x93, 0xc3, 0x04, 0x49, 0xbb, 0xa2, 0xeb, 0x11, 0x54, 0xe8, 0x9c, 0x09, 0x81,
	0xf7, 0x63, 0xa8, 0x43, 0x61, 0xb6, 0x84, 0x23, 0x0e, 0xab, 0x28, 0x71, 0x38, 0x8f, 0xbc, 0x9d,
	0xa7, 0x0c, 0xb9, 0xff, 0x0a, 0x74, 0xcd, 0x76, 0x1e, 0xb6, 0x8c, 0xca, 0xd1, 0xf3, 0x80, 0x72,
	0x74, 0x3c, 0xef, 0xe5, 0xf0, 0x3c, 0x1c, 0x0f, 0x49, 0x31, 0xfa, 0xb0, 0x81, 0xf6, 0xe9, 0xdf,
	0x73, 0x29, 0x7d, 0xe7, 0x66, 0xd0, 0xac, 0x4c, 0xed, 0x5a, 0x15, 0x7f, 0x5d, 0xa9, 0x45, 0x95,
	0x5a, 0x34, 0x32, 0xb5, 0xe8, 0x25, 0xa4, 0x10, 0xbd, 0x2c, 0xb9, 0x5a, 0x91, 0xbb, 0xe9, 0x44,
	0x4c, 0x25, 0x62, 0x85, 0xe6, 0xe1, 0x3e, 0x3d, 0x49, 0x46, 0x88, 0x85, 0xe6, 0xf5, 0x38, 0xa4,
	0x42, 0xf3, 0x3a, 0x24, 0xe6, 0xcb, 0x84, 0xf8, 0x1e, 0x0e, 0xbf, 0x61, 0x5b, 0xc9, 0x3b, 0x61,
	0xe9, 0xc2, 0xce, 0xe8, 0x88, 0x38, 0x63, 0xaf, 0x06, 0x2d, 0x47, 0x0d, 0xe2, 0x51, 0x90, 0x14,
	0x52, 0x41, 0xb1, 0x98, 0x9f, 0x32, 0xd0, 0x11, 0x15, 0x01, 0x76, 0x62, 0x51, 0x25, 0xdb, 0x5d,
	0xc4, 0x8b, 0xee, 0xa2, 0xb7, 0xa4, 0x0a, 0x43, 0x03, 0x5a, 0xd9, 0x93, 0xf2, 0x48, 0x85, 0x33,
	0x49, 0x97, 0xa4, 0x05, 0x38, 0xcd, 0xcf, 0x1b, 0xe8, 0x06, 0x3d, 0xba, 0x7c, 0xed, 0xa6, 0x33,
	0xe8, 0xd7, 0x8f, 0x6b, 0x48, 0xd5, 0x2a, 0x38, 0x3f, 0x53, 0x44, 0xf2, 0x10, 0x25, 0xe7, 0x38,
	0xde, 0xce, 0x24, 0x66, 0x47, 0xb5, 0x8d, 0x1e, 0xcd, 0x93, 0x8d, 0x6b, 0x0f, 0x27, 0x1d, 0xc0,
	0xeb, 0x0d, 0xb4, 0xcf, 0x0b, 0xec, 0xd6, 0xba, 0xed, 0x25, 0xb8, 0x22, 0xd5, 0xb0, 0xb7, 0x87,
	0x27, 0x03, 0xe0, 0xc3, 0xa8, 0xcb, 0x01, 0x68, 0x51, 0xb2, 0xcf, 0xea, 0xd1, 0x02, 0x59, 0xe0,
	0x69, 0x10, 0x98, 0xef, 0x37, 0xd0, 0x01, 0x00, 0x1b, 0x06, 0x81, 0xa7, 0x5a, 0x44, 0x6b, 0x3a,
	0xba, 0x1a, 0x41, 0xe0, 0xd1, 0x38, 0x3c, 0xa5, 0x95, 0xd3, 0x77, 0x93, 0x86, 0x3e, 0x38, 0x07,
	0xb8, 0x14, 0xf6, 0x72, 0x30, 0x91, 0xc8, 0xa0, 0x74, 0x11, 0x24, 0xa3, 0x3d, 0x18, 0xb9, 0xf4,
	0x75, 0x29, 0x32, 0x88, 0x7d, 0xb7, 0x0b, 0x6c, 0x24, 0x8d, 0x0c, 0x92, 0x1b, 0x95, 0xc8, 0xa0,
	0xfc, 0x09, 0x74, 0x91, 0x78, 0x32, 0x1e, 0x52, 0x2b, 0x5f, 0x59, 0xa8, 0xb8, 0xf6, 0x97, 0x52,
	0x41, 0x74, 0x79, 0x4d, 0xd1, 0x5a, 0xf9, 0x72, 0xab, 0x90, 0x47, 0x59, 0xc5, 0x29, 0x59, 0xfb,
	0x25, 0xc8, 0x85, 0x8f, 0x19, 0x68, 0x7f, 0xee, 0xca, 0x2d, 0xa5, 0x36, 0xb6, 0x0b, 0x65, 0x61,
	0x92, 0x59, 0xe4, 0xc6, 0x6a, 0xd0, 0xea, 0x55, 0x59, 0xd2, 0x2a, 0x8d, 0xac, 0xd2, 0xc8, 0x46,
	0xa6, 0x91, 0x3d, 0x1d, 0x21, 0xe7, 0x44, 0x1a, 0xd6, 0xce, 0x54, 0xb0, 0x9b, 0x06, 0xfd, 0xfa,
	0xf8, 0xa9, 0x13, 0x6c, 0x7b, 0x5e, 0xee, 0xd7, 0x0f, 0xb0, 0xa8, 0xfd, 0x6c, 0xa0, 0x88, 0x67,
	0xdc, 0x49, 0x47, 0x26, 0xab, 0x3a, 0x63, 0xa8, 0xc9, 0x8b, 0x9f, 0xe4, 0xab, 0x3a, 0xe5, 0xc4,
	0xf4, 0xcd, 0x1f, 0x92, 0xb8, 0xaf, 0xf4, 0xea, 0x77, 0x61, 0x3e, 0xda, 0x7c, 0x27, 0xb9, 0x68,
	0xa5, 0x03, 0xd3, 0x8b, 0x64, 0xe1, 0x22, 0xf8, 0x56, 0x39, 0x14, 0x5b, 0xe2, 0x26, 0xac, 0x99,
	0x5d, 0x00, 0xf0, 0xab, 0x56, 0xd8, 0x0a, 0xae, 0x5a, 0x95, 0xb9, 0x74, 0xcc, 0x97, 0x83, 0x9a,
	0xf7, 0xa8, 0xee, 0x75, 0xc7, 0x87, 0x50, 0xf5, 0xf0, 0x8a, 0x50, 0xa5, 0x24, 0x3a, 0x7e, 0x2b,
	0x0c, 0x5c, 0x3f, 0x2e, 0x28, 0x42, 0xc5, 0xe6, 0x3f, 0xc5, 0x46, 0x02, 0xb1, 0x98, 0x35, 0xe6,
	0x8a, 0x45, 0x75, 0x02, 0x9d, 0x58, 0x94, 0xf1, 0x2c, 0x7c, 0xce, 0x40, 0xd7, 0x6d, 0xf3, 0x73,
	0x94, 0x35, 0x89, 0x7b, 0xe1, 0x77, 0x2b, 0x65, 0xad, 0xf0, 0x49, 0x34, 0x25, 0x7d, 0xd7, 0x4a,
	0x90, 0x56, 0x82, 0xb4, 0x12, 0xa4, 0x23, 0x12, 0xa4, 0x6f, 0x33, 0xd0, 0x1e, 0xa1, 0xfc, 0x09,
	0xc9, 0xcf, 0x26, 0xe6, 0x99, 0xbb, 0x3e, 0x87, 0x23, 0xf3, 0xfa, 0x10, 0xac, 0x9c, 0x3f, 0x75,
	0x69, 0x55, 0x9a, 0x05, 0x97, 0x56, 0xdd, 0x34, 0xc0, 0xa5, 0x35, 0x54, 0x80, 0xcd, 0xaf, 0x19,
	0xe8, 0x70, 0x96, 0x75, 0x24, 0x63, 0x6a, 0x56, 0x97, 0x70, 0x35, 0x10, 0x2b, 0xf8, 0xa4, 0x1c,
	0x42, 0x73, 0x38, 0x62, 0x42, 0x31, 0x49, 0xa2, 0x93, 0xdf, 0x8f, 0x79, 0x12, 0x9d, 0x62, 0x12,
	0x40, 0x12, 0x1d, 0x9c, 0x8f, 0xcf, 0xbc, 0xbf, 0x58, 0x27, 0xb8, 0xae, 0xf8, 0x11, 0x1e, 0x49,
	0x5d, 0xa0, 0xa9, 0xea, 0x02, 0x87, 0x72, 0xa8, 0x79, 0xe4, 0xcb, 0x49, 0x7f, 0xf9, 0xb1, 0xe0,
	0x3c, 0x44, 0x72, 0xb2, 0x0f, 0xdb, 0x14, 0x65, 0x94, 0xb8, 0xbf, 0x6b, 0xa0, 0x1b, 0xb6, 0xbd,
	0x47, 0xca, 0xf8, 0x00, 0x9f, 0x34, 0x50, 0x7d, 0xc8, 0x0e, 0x29, 0x23, 0xd9, 0x1f, 0x32, 0xd0,
	0x5e, 0xed, 0x56, 0x2a, 0xa5, 0x7f, 0xfe, 0x2e, 0x34, 0xc1, 0x88, 0xad, 0xe2, 0x10, 0x2b, 0x9d,
	0xac, 0xd2, 0xc9, 0x46, 0xa9, 0x93, 0xd9, 0x68, 0xba, 0x15, 0xd9, 0xed, 0x98, 0xdc, 0xca, 0x58,
	0x38, 0x4e, 0x3d, 0xf1, 0xc7, 0x97, 0x9e, 0x3a, 0xe8, 0xd7, 0x77, 0x9f, 0x4c, 0xfa, 0x56, 0x83,
	0x96, 0x43, 0x12, 0x35, 0x5c, 0xee, 0xd7, 0x8f, 0xb2, 0xf5, 0x28, 0xc1, 0x80, 0xa2, 0x6a, 0x2d,
	0x00, 0x44, 0x44, 0x71, 0xaa, 0x25, 0x50, 0xdf, 0xec, 0xcc, 0x25, 0x38, 0x6d, 0xf6, 0x5c, 0x1c,
	0x33, 0xef, 0x9a, 0x23, 0xb2, 0x9f, 0xb1, 0xc8, 0x1a, 0xc8, 0x3a, 0x7a, 0xae, 0xe0, 0xb5, 0x42,
	0x5a, 0xa5, 0x91, 0x67, 0x5d, 0x1c, 0x73, 0x51, 0xbc, 0x8d, 0x99, 0x75, 0x6e, 0x2b, 0x79, 0x88,
	0xcd, 0x17, 0x0a, 0xda, 0x0b, 0xd3, 0xa5, 0xe6, 0x25, 0xed, 0xe5, 0x61, 0xc6, 0x09, 0x16, 0x39,
	0x63, 0x7f, 0xe9, 0x51, 0x72, 0xc6, 0x5e, 0xf8, 0x80, 0x81, 0x4c, 0xf5, 0xf1, 0xca, 0x28, 0x4e,
	0x3e, 0x33, 0x99, 0x51, 0x7a, 0xc6, 0xb1, 0xbd, 0x78, 0x63, 0x79, 0xc3, 0x69, 0xde, 0x53, 0x09,
	0x95, 0x4a, 0xa8, 0x54, 0x42, 0x65, 0x44, 0x42, 0xe5, 0xb3, 0x06, 0x4a, 0xf9, 0xa8, 0xb5, 0x41,
	0xf6, 0xa0, 0xd5, 0x4c, 0x36, 0xa1, 0x78, 0x71, 0x3f, 0x21, 0x25, 0xe2, 0x54, 0x76, 0x2c, 0xf9,
	0xbc, 0x17, 0x06, 0xfd, 0xfa, 0x41, 0xb5, 0x0f, 0x5c, 0xe0, 0x3f, 0x11, 0x32, 0xfa, 0x9c, 0x09,
	0x45, 0x2a, 0x53, 0x2f, 0x4f, 0x2d, 0x46, 0xf3, 0xbd, 0xb9, 0x89, 0x78, 0x1e, 0xd0, 0x3b, 0xf8,
	0x09, 0x68, 0x46, 0x98, 0x8d, 0xa7, 0xad, 0x0a, 0xa2, 0x23, 0x05, 0x6f, 0x73, 0xc7, 0xe2, 0xe8,
	0xad, 0x06, 0x9a, 0x5f, 0xef, 0x84, 0x96, 0x8d, 0x2d, 0x3b, 0x13, 0x9b, 0x8a, 0x44, 0xda, 0x2b,
	0xa4, 0x20, 0x5c, 0xc4, 0x8b, 0x8c, 0x00, 0xe2, 0x25, 0xb2, 0x17, 0x36, 0x29, 0x96, 0xf4, 0x7c,
	0xe4, 0xc0, 0xc1, 0x71, 0xbd, 0x13, 0xaa, 0x58, 0xfe, 0x81, 0x9d, 0xf3, 0xef, 0xe3, 0x8e, 0x94,
	0x85, 0x8b, 0xea, 0x1f, 0x4b, 0x1d, 0xb3, 0x8f, 0x1a, 0xa8, 0x96, 0xb7, 0x96, 0xcb, 0xa8, 0x7b,
	0xfc, 0xaf, 0x5a, 0x76, 0xc3, 0x50, 0x15, 0x3d, 0xa8, 0x14, 0x8f, 0x4a, 0xf1, 0x78, 0x14, 0x63,
	0x4a, 0x78, 0x26, 0xe3, 0x4e, 0x68, 0x39, 0xbe, 0xbd, 0xee, 0x39, 0x34, 0xab, 0xce, 0x18, 0x88,
	0x29, 0xc9, 0x52, 0x19, 0xdf, 0xde, 0x38, 0x45, 0x07, 0xa9, 0x91, 0x1a, 0x3a, 0x54, 0xba, 0x98,
	0x92, 0x0c, 0x57, 0x27, 0x64, 0xb8, 0x48, 0xd8, 0xa7, 0x8a, 0xc6, 0xf5, 0x5b, 0xae, 0xdf, 0x19,
	0x12, 0x50, 0x22, 0xe6, 0x49, 0xcf, 0x30, 0x33, 0x48, 0xd5, 0xc5, 0x52, 0x41, 0xae, 0xbb, 0x86,
	0x96, 0xd1, 0x98, 0x1f, 0x32, 0xd0, 0x01, 0x05, 0x83, 0xe2, 0x5e, 0xa9, 0x32, 0x73, 0x21, 0x37,
	0xda, 0xaa, 0xe6, 0x65, 0x02, 0xfd, 0xec, 0xa6, 0x1c, 0x42, 0xf5, 0xba, 0x99, 0xfc, 0x2e, 0x05,
	0xc5, 0xec, 0xd5, 0x06, 0x9a, 0xe6, 0x39, 0xeb, 0x61, 0x30, 0xf9, 0x35, 0x39, 0x24, 0x66, 0x7f,
	0x1b, 0x89, 0xfa, 0x43, 0x6c, 0x1a, 0xa0, 0x09, 0x73, 0x9b, 0x86, 0x8c, 0x1a, 0xd8, 0x34, 0xd2,
	0xce, 0x95, 0x30, 0xcb, 0x9d, 0xae, 0x38, 0xc6, 0x89, 0xce, 0x92, 0x37, 0xe4, 0xd0, 0x23, 0xb9,
	0xdb, 0xc9, 0x0a, 0xa2, 0xd0, 0xae, 0x51, 0x10, 0xc1, 0x4c, 0x3a, 0x05, 0x51, 0x04, 0x07, 0xf7,
	0x2c, 0xdf, 0xd3, 0xdf, 0xb3, 0x3c, 0xfc, 0xdc, 0xe9, 0x9f, 0x36, 0x50, 0x5d, 0x88, 0x4a, 0x61,
	0x09, 0xe8, 0xd7, 0x3d, 0x4d, 0x06, 0xf5, 0x03, 0x3c, 0x27, 0x73, 0x1a, 0x12, 0x92, 0xd5, 0xa2,
	0x5b, 0x5a, 0x23, 0x45, 0x26, 0x34, 0x1d, 0x5c, 0xe7, 0x7a, 0x62, 0xfa, 0x99, 0x0a, 0x67, 0x83,
	0x55, 0x26, 0xf2, 0x11, 0x16, 0x39, 0x9e, 0x7e, 0xbd, 0xa4, 0x8e, 0xa7, 0x5f, 0x2b, 0x8b, 0xe3,
	0x69, 0x61, 0x0d, 0xaf, 0x3f, 0x7c, 0xb4, 0x2b, 0x30, 0xe6, 0xe7, 0xf2, 0xff, 0xa3, 0x47, 0x3b,
	0x97, 0x7f, 0x61, 0x9e, 0xfc, 0xff, 0xf4, 0x68, 0xe6, 0xc9, 0xff, 0x2d, 0xe1, 0xf6, 0x1b, 0x1c,
	0xa1, 0x39, 0x7d, 0x7f, 0x3c, 0xa7, 0x35, 0x77, 0x0a, 0x9a, 0xf9, 0xd2, 0x33, 0x84, 0x20, 0x48,
	0xb1, 0x9d, 0x53, 0x7a, 0x6b, 0xc1, 0x69, 0x5d, 0x4b, 0xef, 0x3c, 0xce, 0x45, 0x07, 0x92, 0x2a,
	0xa4, 0x67, 0x30, 0x25, 0xa5, 0xff, 0x3e, 0xfd, 0x99, 0x0f, 0x24, 0x55, 0x48, 0xdb, 0x72, 0x93,
	0x2a, 0x28, 0xd8, 0x75, 0x49, 0x15, 0x24, 0x2c, 0x66, 0x13, 0xed, 0x22, 0x19, 0xbf, 0xe2, 0x5e,
	0xe8, 0x39, 0xb8, 0x36, 0x90, 0xb2, 0xf5, 0x37, 0x82, 0x28, 0xbe, 0x90, 0x74, 0x31, 0xe5, 0x2b,
	0xfd, 0x29, 0xa8, 0xfd, 0x02, 0x38, 0x54, 0xbe, 0xb2, 0xb1, 0x0b, 0xaf, 0xb8, 0x02, 0x1d, 0x2c,
	0x12, 0x7a, 0xff, 0x58, 0xce, 0x8a, 0x9f, 0x32, 0xd0, 0xd1, 0xa1, 0xc2, 0xb6, 0xe4, 0x97, 0xb5,
	0xe5, 0x4f, 0xaf, 0xff, 0xc7, 0x08, 0x4d, 0x82, 0x1b, 0xf0, 0xea, 0x7c, 0x5b, 0x9d, 0x6f, 0xab,
	0xf3, 0xed, 0xc8, 0x6e, 0x6b, 0x95, 0xe2, 0xac, 0x32, 0xf3, 0x7c, 0xb8, 0x99, 0xaa, 0xc4, 0xdb,
	0x5a, 0xd5, 0x05, 0x4d, 0xa9, 0xd4, 0x5a, 0x1f, 0xe2, 0xc5, 0x0d, 0x6e, 0x6b, 0x95, 0x4e, 0xc5,
	0xa0, 0xba, 0x8d, 0x99, 0x75, 0xb7, 0xb5, 0x79, 0x88, 0x87, 0xb9, 0x82, 0x7f, 0xb1, 0x0c, 0xae,
	0xe0, 0x34, 0x95, 0xa6, 0xf2, 0xf1, 0xca, 0xc8, 0xfd, 0xbf, 0x35, 0x91, 0xd9, 0x37, 0x53, 0xa1,
	0x5a, 0xf1, 0xff, 0x8a, 0xff, 0x57, 0xfc, 0x7f, 0x44, 0xfc, 0x7f, 0x0b, 0xed, 0x13, 0x38, 0x64,
	0xdb, 0xed, 0x58, 0x5d, 0xdb, 0xb7, 0x3b, 0x99, 0x61, 0x93, 0xe5, 0xe1, 0x4e, 0x79, 0x62, 0xdb,
	0xed, 0xac, 0xd2, 0x7e, 0x31, 0x0f, 0xb7, 0x0e, 0x5e, 0xca, 0xc3, 0xad, 0x22, 0x00, 0x96, 0xc2,
	0xcc, 0x0e, 0xa5, 0xe4, 0xc6, 0x39, 0x90, 0x13, 0x6b, 0xaa, 0x58, 0x0a, 0xd3, 0x8e, 0x22, 0x4b,
	0xa1, 0x66, 0x1a, 0x9d, 0xa5, 0x50, 0x45, 0x65, 0x7e, 0x5a, 0x60, 0xfb, 0x30, 0x3a, 0x3a, 0x27,
	0x41, 0x26, 0x40, 0xa4, 0x89, 0x12, 0x4d, 0x84, 0xa9, 0x28, 0x0c, 0xa4, 0x3e, 0x8d, 0x30, 0x50,
	0xa7, 0xd5, 0x09, 0x03, 0x19, 0xcf, 0x76, 0x9c, 0xa3, 0xb3, 0x77, 0xfa, 0xf7, 0x12, 0x20, 0xa5,
	0xa9, 0x28, 0x98, 0x13, 0x20, 0x05, 0x2b, 0x0a, 0xca, 0x8d, 0xb9, 0x52, 0x71, 0x48, 0x45, 0x41,
	0xac, 0xc7, 0xb3, 0xf0, 0x3b, 0x06, 0x3a, 0xbe, 0xad, 0xef, 0x52, 0xf2, 0x23, 0x1d, 0xfc, 0x5a,
	0x65, 0x24, 0xf6, 0xe5, 0xbb, 0xd0, 0xc4, 0x5a, 0xdb, 0x0b, 0x2e, 0x35, 0xa2, 0xa0, 0xed, 0x56,
	0xc1, 0xc5, 0x95, 0x44, 0xaf, 0x24, 0xfa, 0xc8, 0x24, 0xfa, 0x2f, 0xa2, 0x69, 0x9c, 0xec, 0x3d,
	0x2b, 0xb4, 0x23, 0xbb, 0xeb, 0x90, 0xaa, 0x9e, 0x13, 0x30, 0x6b, 0x1b, 0xdd, 0x9b, 0x59, 0xf7,
	0xd2, 0x4f, 0x93, 0xb2, 0x17, 0xb0, 0x91, 0xdf, 0x62, 0xc9, 0xd8, 0x60, 0xd5, 0x0b, 0x08, 0x65,
	0xfe, 0x12, 0xaa, 0xb1, 0xf1, 0x74, 0xeb, 0x8b, 0x25, 0xa5, 0x27, 0x79, 0x5d, 0x6b, 0x91, 0x3b,
	0x88, 0xf5, 0xa4, 0x6f, 0x00, 0x53, 0x2a, 0x28, 0x80, 0xd5, 0x19, 0xeb, 0x70, 0x14, 0x7b, 0xd3,
	0x0a, 0x10, 0x3b, 0x97, 0x75, 0xef, 0x37, 0xd0, 0x81, 0xd8, 0xf1, 0x9c, 0xae, 0x13, 0x47, 0x5b,
	0x19, 0x91, 0x8a, 0xff, 0x52, 0x76, 0xa7, 0x72, 0x21, 0x1d, 0xcb, 0x66, 0xa6, 0x77, 0x2a, 0x4a,
	0xab, 0x72, 0xa7, 0x52, 0x30, 0x07, 0xb8, 0x53, 0x89, 0x73, 0x30, 0x51, 0x0f, 0x5b, 0xe5, 0x91,
	0xcb, 0x28, 0x30, 0xde, 0x81, 0xd0, 0xec, 0x5a, 0x1c, 0x44, 0x5d, 0x56, 0x11, 0xa2, 0x92, 0x1b,
	0x95, 0xdc, 0xa8, 0xe4, 0xc6, 0x68, 0xe5, 0xc6, 0xbb, 0x0c, 0x54, 0xc3, 0xc9, 0x1e, 0xcc, 0xca,
	0xb6, 0x28, 0x02, 0x44, 0x28, 0x72, 0x2f, 0xec, 0x55, 0x2e, 0x47, 0x68, 0x1a, 0x31, 0x6d, 0x9f,
	0xc0, 0xdb, 0x73, 0xe6, 0x80, 0x09, 0xbc, 0xb4, 0x48, 0x40, 0x0e, 0xa9, 0x07, 0xe4, 0x1c, 0x52,
	0x2a, 0xff, 0xd8, 0x39, 0x8f, 0xbf, 0xcf, 0x40, 0xfb, 0xc8, 0x4d, 0x99, 0xca, 0xde, 0x99, 0x85,
	0x6f, 0x56, 0xbc, 0x73, 0x4b, 0x39, 0x6f, 0xc2, 0x26, 0x66, 0xc5, 0x06, 0xe5, 0x22, 0x5f, 0x8f,
	0x14, 0x78, 0x5e, 0x84, 0x2a, 0x3c, 0x4d, 0x35, 0x94, 0xf7, 0x80, 0x65, 0xe4, 0xe8, 0xaf, 0xdd,
	0x8d, 0x8e, 0xae, 0xc5, 0x51, 0xaf, 0x19, 0x93, 0xca, 0x60, 0x5b, 0xd8, 0x0b, 0x3a, 0xe4, 0x98,
	0xd5, 0x24, 0xdc, 0xef, 0xbc, 0xd3, 0x0c, 0xa2, 0x56, 0xc5, 0xdf, 0x2b, 0xfe, 0x5e, 0xf1, 0xf7,
	0x11, 0xf1, 0xf7, 0xfb, 0x0d, 0x74, 0x18, 0x67, 0x3b, 0xd2, 0xc2, 0x64, 0x4b, 0x5a, 0x76, 0x18,
	0x5a, 0x4d, 0x3b, 0x76, 0x3a, 0x41, 0xb4, 0xc5, 0xc2, 0xf4, 0x68, 0x62, 0x01, 0x75, 0xef, 0x2e,
	0xb3, 0x61, 0x82, 0xcb, 0x45, 0x21, 0x3a, 0x98, 0x58, 0x20, 0x1f, 0x1f, 0xf5, 0xb1, 0xd4, 0xa2,
	0x22, 0x21, 0x76, 0x98, 0xa5, 0x34, 0xa2, 0x3e, 0x96, 0x2a, 0x1e, 0x12, 0x3d, 0x26, 0x66, 0xc3,
	0x2e, 0x40, 0x05, 0xad, 0x7d, 0x79, 0xb8, 0xcc, 0x57, 0x19, 0x68, 0x5e, 0x8f, 0x26, 0x72, 0xf1,
	0x3d, 0xc4, 0x87, 0x71, 0x9c, 0x19, 0xad, 0x54, 0x1c, 0xe7, 0x5d, 0x7c, 0x8f, 0x60, 0xb4, 0xca,
	0x45, 0x03, 0x8d, 0x56, 0x7a, 0x3c, 0xe6, 0xfb, 0x0c, 0x94, 0x83, 0x22, 0xb3, 0x69, 0xda, 0x1d,
	0xcc, 0x52, 0x3e, 0x3e, 0x7b, 0xd0, 0xaf, 0x1f, 0xd6, 0x50, 0x94, 0x1a, 0x8e, 0xec, 0x8e, 0x98,
	0x7c, 0x7b, 0x28, 0x56, 0x91, 0xc0, 0xc3, 0xb8, 0x10, 0xad, 0xf9, 0x1e, 0x03, 0x1d, 0xcd, 0xc1,
	0xd8, 0x5b, 0xcf, 0x16, 0xd8, 0x34, 0x21, 0xf3, 0x59, 0x79, 0x64, 0xf2, 0x91, 0x42, 0xad, 0xc1,
	0x61, 0x48, 0x87, 0x52, 0xc9, 0x87, 0x9a, 0x3d, 0xd5, 0x81, 0x91, 0xa7, 0xb2, 0x1a, 0x26, 0xad,
	0x76, 0x9e, 0xcd, 0x9a, 0xa4, 0x66, 0xda, 0x1e, 0xfa, 0x32, 0xca, 0xf2, 0x37, 0xee, 0x46, 0xfb,
	0x64, 0xf2, 0xa9, 0xac, 0xac, 0x04, 0x78, 0x25, 0xc0, 0x2b, 0x01, 0x3e, 0x22, 0x01, 0x7e, 0xb7,
	0xea, 0xaa, 0x71, 0x4d, 0x1e, 0xf3, 0xa2, 0x3b, 0x61, 0xe7, 0xe7, 0x9f, 0x3f, 0x37, 0xd0, 0x71,
	0x2d, 0xe7, 0x4d, 0x79, 0x96, 0x15, 0x11, 0xa6, 0x85, 0x6b, 0x7f, 0x3e, 0x25, 0x79, 0xa7, 0x0f,
	0xe3, 0x73, 0xac, 0xec, 0xc2, 0xb0, 0x61, 0x58, 0x28, 0xbb, 0xb0, 0x1d, 0x42, 0x60, 0xd9, 0x85,
	0xa1, 0xd8, 0xcd, 0x3f, 0xd6, 0x0a, 0xd6, 0x8d, 0x00, 0xc7, 0xc9, 0xba, 0xcc, 0x1e, 0x8f, 0x15,
	0x43, 0xbd, 0x36, 0xef, 0xf1, 0xce, 0x30, 0x00, 0xf6, 0x6c, 0xb4, 0xfe, 0x45, 0xe1, 0x98, 0x42,
	0x11, 0x2c, 0xcf, 0x0f, 0x5d, 0x53, 0x8a, 0xf1, 0x9a, 0x1f, 0xd6, 0x6a, 0x2d, 0x5d, 0x07, 0x63,
	0xbb, 0xe3, 0xe0, 0xda, 0x37, 0xa7, 0x24, 0xff, 0x1a, 0x09, 0xdd, 0x2a, 0x1d, 0xb8, 0xf4, 0xf4,
	0x41, 0xbf, 0x5e, 0xcb, 0xe9, 0xc4, 0x45, 0x8a, 0x4d, 0x3a, 0x13, 0xb0, 0x4e, 0xe2, 0x1c, 0x44,
	0xe6, 0xe7, 0xb4, 0xfa, 0x28, 0xf6, 0xec, 0xf4, 0x78, 0x8c, 0x6b, 0x7d, 0x4a, 0xf1, 0x42, 0x1e,
	0xc5, 0x6b, 0x67, 0x17, 0xd3, 0x83, 0xb2, 0x56, 0x69, 0xe5, 0xfd, 0xb8, 0x48, 0x69, 0x15, 0xe7,
	0x2c, 0x54, 0x5a, 0xd7, 0xbc, 0xff, 0x9f, 0xbd, 0x77, 0x0d, 0xaf, 0x24, 0xbb, 0x0a, 0x43, 0xbf,
	0x92, 0xfa, 0x21, 0xed, 0x7e, 0x49, 0xd5, 0x0f, 0xa9, 0x7b, 0x1e, 0x9a, 0x39, 0xd3, 0x33, 0x1e,
	0x3f, 0xc9, 0xcc, 0xd8, 0x06, 0x5f, 0x98, 0x18, 0x3d, 0x7a, 0xba, 0xe5, 0x69, 0x75, 0x6b, 0x5a,
	0xdd, 0x3d, 0xb6, 0x87, 0xf1, 0x49, 0xe9, 0x54, 0xe9, 0xa8, 0xa6, 0xcf, 0xa9, 0xaa, 0xa9, 0xaa,
	0x73, 0xba, 0x35, 0xc6, 0x0e, 0x06, 0x3f, 0xaf, 0x1f, 0x80, 0x01, 0x1b, 0xb0, 0x13, 0x9b, 0x80,
	0x13, 0x7c, 0x0d, 0x89, 0x79, 0xf8, 0x26, 0xbc, 0x31, 0x37, 0x01, 0x12, 0x20, 0xb9, 0x40, 0x08,
	0x84, 0xe4, 0x0a, 0x10, 0x21, 0xc0, 0x40, 0xb8, 0x64, 0x12, 0x03, 0x06, 0x72, 0x7d, 0xbf, 0xbd,
	0xf6, 0x6b, 0xad, 0x5d, 0xbb, 0x8e, 0xd4, 0x3d, 0x3d, 0x3d, 0xf2, 0xf7, 0xe9, 0x8f, 0x3e, 0x9d,
	0xbd, 0xd7, 0x5a, 0x7b, 0xd7, 0x7e, 0xac, 0xbd, 0xf6, 0xda, 0xeb, 0x11, 0x28, 0x7a, 0x8d, 0x1f,
	0xf2, 0xd8, 0xed, 0x83, 0x76, 0xdd, 0x76, 0x3c, 0xc8, 0xff, 0xf0, 0x20, 0xbb, 0x73, 0xf0, 0xe2,
	0xdc, 0x39, 0xd0, 0x77, 0x0e, 0xf4, 0x9d, 0x03, 0xfd, 0x56, 0x26, 0x66, 0xa8, 0x70, 0xa3, 0x30,
	0x42, 0x51, 0x81, 0xa5, 0x46, 0x95, 0x6e, 0xd9, 0xb9, 0x48, 0x86, 0x08, 0x7e, 0x69, 0x1d, 0x47,
	0x13, 0x34, 0x2c, 0x8d, 0xaa, 0x8b, 0x88, 0xff, 0x3e, 0xe7, 0x99, 0xc1, 0x8f, 0xa1, 0x20, 0x0c,
	0x73, 0x79, 0xf3, 0x76, 0x9e, 0x08, 0x67, 0x24, 0xcc, 0xa0, 0x13, 0x41, 0xd1, 0x19, 0x78, 0x22,
	0x28, 0x42, 0xfe, 0xc7, 0x3c, 0x36, 0x35, 0xe0, 0x48, 0x84, 0x8b, 0xae, 0xb8, 0x7a, 0x8b, 0x20,
	0x0e, 0x35, 0x9c, 0x4c, 0x5e, 0x73, 0xff, 0xce, 0xa6, 0x67, 0xac, 0x7d, 0xc7, 0xbd, 0xbd, 0x18,
	0x40, 0xd1, 0xff, 0xc7, 0x1e, 0x3b, 0x5e, 0x25, 0xd6, 0x89, 0x93, 0x2b, 0xdd, 0x20, 0x83, 0x0b,
	0xf8, 0x80, 0xb3, 0xf5, 0xac, 0x00, 0x93, 0x1e, 0x98, 0xee, 0x4a, 0xe4, 0x81, 0x59, 0xd7, 0xcc,
	0x40, 0x95, 0x81, 0x24, 0x53, 0x33, 0xa5, 0x9d, 0x54, 0xc8, 0x3f, 0xf2, 0x0e, 0xee, 0x9c, 0xd2,
	0xb3, 0x12, 0x66, 0xd0, 0x94, 0x2a, 0x3a, 0x03, 0xa7, 0x54, 0x11, 0xaa, 0x59, 0xe2, 0x65, 0x94,
	0x04, 0x49, 0x39, 0x39, 0x5e, 0xbf, 0xc4, 0x2f, 0x02, 0xc4, 0xa0, 0x25, 0x2e, 0x68, 0x0c, 0x5c,
	0xe2, 0x82, 0x88, 0x9f, 0x23, 0xb9, 0xf9, 0xaf, 0xed, 0x78, 0x1b, 0x03, 0x4f, 0xc3, 0x1b, 0xbf,
	0xf1, 0xff, 0x98, 0xc7, 0x4e, 0x6e, 0x85, 0xf6, 0x76, 0x94, 0x12, 0xfe, 0xfd, 0x38, 0x9b, 0xa8,
	0x11, 0xff, 0x76, 0xc4, 0x83, 0x1d, 0xf1, 0x60, 0x47, 0x3c, 0xb8, 0x45, 0xe2, 0x81, 0x5b, 0xa5,
	0x2a, 0x2f, 0x59, 0xcd, 0x95, 0x34, 0xbf, 0x1a, 0xe4, 0xa1, 0x94, 0x13, 0x9c, 0x2a, 0x55, 0xb9,
	0x69, 0x1f, 0x11, 0x90, 0x83, 0x54, 0xaa, 0x16, 0xd1, 0x81, 0x2a, 0x55, 0x4a, 0xd5, 0xff, 0x0d,
	0x8f, 0xdd, 0x5f, 0x4f, 0x30, 0x4e, 0xca, 0xa8, 0x1d, 0xe5, 0xcd, 0x95, 0x38, 0xea, 0x84, 0xca,
	0xa4, 0x17, 0x65, 0x25, 0x8f, 0x3a, 0x21, 0x5f, 0x35, 0xc5, 0xd9, 0xb8, 0x28, 0x67, 0xa2, 0x8d,
	0xf5, 0xa9, 0x93, 0x35, 0x1f, 0x31, 0x2f, 0x08, 0x01, 0x06, 0x5f, 0xa2, 0xaf, 0xdb, 0xec, 0x53,
	0x68, 0xcb, 0xf8, 0x8b, 0x4e, 0x16, 0x5b, 0x68, 0xc2, 0xff, 0x05, 0x8f, 0xbd, 0xbc, 0x9e, 0x7a,
	0x96, 0xa7, 0xad, 0xa8, 0x28, 0x9a, 0x41, 0x12, 0x36, 0x8b, 0x32, 0xcd, 0x23, 0x10, 0x4c, 0x46,
	0x66, 0x9e, 0xda, 0x58, 0x9f, 0xba, 0xaf, 0xe6, 0x13, 0x16, 0x05, 0xce, 0x74, 0x12, 0x2e, 0x71,
	0x8c, 0xe7, 0xd6, 0xa7, 0xbe, 0x66, 0xb3, 0x8f, 0xa8, 0x34, 0x83, 0xbf, 0xe3, 0xbe, 0x62, 0x4b,
	0xed, 0xf8, 0xbf, 0xe9, 0xb1, 0xaf, 0xd8, 0x62, 0x13, 0xbd, 0x6e, 0x37, 0xc8, 0xe3, 0x67, 0x44,
	0x0a, 0xa9, 0x91, 0x99, 0x7c, 0x63, 0x7d, 0xea, 0x65, 0x9b, 0x7f, 0x8d, 0xc2, 0x7a, 0x6e, 0x7d,
	0xea, 0x6b, 0xaf, 0xeb, 0x8b, 0x14, 0x22, 0xfe, 0xaa, 0x97, 0x15, 0x5b, 0x6e, 0xcf, 0xff, 0x63,
	0x8f, 0xbd, 0xfa, 0x3a, 0x9b, 0x82, 0x0c, 0xa3, 0x20, 0x03, 0x8d, 0xcc, 0xbc, 0x75, 0x63, 0x7d,
	0xea, 0x55, 0x5b, 0xff, 0xbc, 0x4b, 0x05, 0x64, 0x43, 0x3b, 0x75, 0x43, 0x9f, 0x08, 0xed, 0xe2,
	0xef, 0x7c, 0x55, 0x71, 0x5d, 0x0d, 0xfb, 0xbf, 0xea, 0xb1, 0x97, 0xd4, 0xb7, 0x59, 0x06, 0xed,
	0x76, 0x14, 0xaa, 0x6d, 0x36, 0x3e, 0x70, 0x9b, 0xb5, 0x36, 0xd6, 0xa7, 0xee, 0xa9, 0xf9, 0xec,
	0x8b, 0x40, 0x47, 0xef, 0xb2, 0xaf, 0xda, 0xec, 0x5b, 0x49, 0xbb, 0xf8, 0xf3, 0xee, 0x29, 0x36,
	0x6f, 0x80, 0xe4, 0xf0, 0xf8, 0x6b, 0x3b, 0x87, 0x47, 0x2d, 0xfe, 0x0d, 0x8a, 0x64, 0x90, 0x60,
	0x62, 0x10, 0xd1, 0x6d, 0x69, 0x46, 0x31, 0xca, 0x4e, 0xd4, 0x6b, 0xb5, 0x76, 0xc4, 0xb1, 0x1d,
	0x71, 0x6c, 0x47, 0x1c, 0xbb, 0x95, 0x91, 0xa0, 0xdc, 0xba, 0xe3, 0x20, 0x0f, 0xba, 0x34, 0xbb,
	0xb8, 0x63, 0xcb, 0x02, 0xd0, 0x20, 0x2b, 0x05, 0x43, 0x6a, 0xa0, 0x95, 0xc2, 0x52, 0x27, 0x10,
	0xb4, 0xfc, 0xa4, 0x6a, 0x0d, 0x77, 0xff, 0xe6, 0xaa, 0xf2, 0x1b, 0xe7, 0xa0, 0x90, 0x33, 0x60,
	0x13, 0xba, 0xdb, 0x32, 0xb5, 0xd0, 0x3e, 0xc6, 0x96, 0x7a, 0xcb, 0xb3, 0x9d, 0x5e, 0x51, 0x46,
	0xf9, 0x0e, 0xd3, 0xdc, 0x61, 0x9a, 0x3b, 0x4c, 0xf3, 0x16, 0x31, 0xcd, 0x27, 0xd9, 0xa1, 0xa2,
	0xb7, 0xdc, 0x6c, 0x89, 0xad, 0xd7, 0x0c, 0x8a, 0x04, 0xd8, 0xe4, 0xf0, 0xcc, 0x6b, 0x36, 0xd6,
	0xa7, 0x0e, 0x98, 0x4d, 0x39, 0x5d, 0xf0, 0x45, 0x7f, 0x97, 0x64, 0x8d, 0x14, 0x03, 0x53, 0x3d,
	0x50, 0x60, 0x14, 0xff, 0x4d, 0xec, 0x20, 0x06, 0x8e, 0x43, 0xb8, 0x61, 0x0e, 0xcf, 0x3c, 0xb4,
	0xb1, 0x3e, 0xb5, 0xdf, 0x50, 0x87, 0x7e, 0x4e, 0x55, 0x89, 0xd3, 0x1e, 0xef, 0x37, 0xb4, 0xe7,
	0x43, 0xff, 0x2d, 0x55, 0x3f, 0x12, 0x93, 0x5a, 0x54, 0x03, 0xde, 0xf8, 0x0b, 0xfb, 0x37, 0x79,
	0xec, 0xc8, 0x72, 0x3b, 0xab, 0x06, 0xbb, 0x92, 0xee, 0x23, 0xe3, 0x28, 0xfc, 0xad, 0x8c, 0x48,
	0xf5, 0x77, 0x37, 0xd6, 0xa7, 0xc6, 0xcd, 0x4f, 0x63, 0x5b, 0x7c, 0xaf, 0x09, 0x7b, 0x3b, 0x28,
	0xc0, 0xd5, 0xf8, 0x72, 0x3b, 0xb3, 0x82, 0x5b, 0x7d, 0xd4, 0x63, 0x93, 0x2a, 0x20, 0x51, 0xa5,
	0x27, 0xbf, 0x68, 0x45, 0x8f, 0x92, 0x91, 0x8d, 0x70, 0xd8, 0x2d, 0x5a, 0x54, 0x89, 0x1e, 0x55,
	0x47, 0x9a, 0xf8, 0xf1, 0xf4, 0x5d, 0x34, 0x1a, 0x9f, 0xf2, 0xd8, 0x98, 0x3d, 0xce, 0xdb, 0xf1,
	0x70, 0xf9, 0x00, 0x63, 0x7b, 0x96, 0x7a, 0xcb, 0xc9, 0x4e, 0x52, 0xfb, 0x9d, 0x83, 0x65, 0xe7,
	0x60, 0xb9, 0x65, 0x07, 0x4b, 0x8f, 0x8d, 0x15, 0xb0, 0xeb, 0x9a, 0x71, 0xd6, 0xcc, 0xf2, 0x68,
	0x25, 0xbe, 0x26, 0x9d, 0x54, 0x7c, 0xc4, 0xa5, 0x93, 0x08, 0xc6, 0x41, 0x44, 0xe9, 0x14, 0xbf,
	0xe7, 0x17, 0x17, 0x01, 0x1a, 0xf9, 0x37, 0x5a, 0x74, 0x48, 0x94, 0x4e, 0x51, 0x39, 0x9f, 0x09,
	0x24, 0xff, 0xcd, 0x55, 0x91, 0xfb, 0x88, 0xd5, 0xde, 0x0d, 0x9f, 0x08, 0x3f, 0xe7, 0xb1, 0x3b,
	0xeb, 0xc3, 0x7f, 0xe3, 0x83, 0xe8, 0x7e, 0xda, 0x64, 0x4d, 0x70, 0x71, 0x9d, 0x24, 0xae, 0xbe,
	0x1e, 0x99, 0xc5, 0x0c, 0x6e, 0x99, 0x98, 0xc5, 0xf4, 0xeb, 0xe9, 0x35, 0xbe, 0xc7, 0x63, 0xfb,
	0xf1, 0x40, 0x6c, 0x47, 0x96, 0x0d, 0xf7, 0x98, 0x4d, 0x46, 0x6e, 0x3b, 0xf6, 0xfb, 0x17, 0x3f,
	0xe9, 0xb1, 0xe1, 0x8b, 0xc1, 0x8e, 0xd5, 0xed, 0xce, 0x41, 0xb3, 0x73, 0xd0, 0xdc, 0xaa, 0x83,
	0xe6, 0xab, 0xd9, 0x1e, 0xce, 0xb5, 0x63, 0xf5, 0xd2, 0x76, 0x72, 0x63, 0x7d, 0x6a, 0xf7, 0xc5,
	0xa0, 0x0d, 0x98, 0x13, 0x86, 0xad, 0x53, 0xdc, 0xdd, 0x65, 0xd0, 0x9e, 0x0f, 0xfd, 0x27, 0xd8,
	0x41, 0x5e, 0x97, 0xe5, 0x51, 0x18, 0xad, 0xc4, 0x49, 0x14, 0x4a, 0x1f, 0xf8, 0x57, 0xf3, 0xdb,
	0xcf, 0xc5, 0xa0, 0xbd, 0xa8, 0x2b, 0xcc, 0x05, 0x85, 0x22, 0x90, 0xcb, 0x4f, 0x89, 0x31, 0xfc,
	0x4b, 0x8c, 0x17, 0xc0, 0xb4, 0x88, 0x35, 0x2d, 0x6c, 0x63, 0x1e, 0xe0, 0x7b, 0xe4, 0x62, 0xd0,
	0xe6, 0x83, 0x24, 0xd7, 0xc2, 0x9d, 0x86, 0xb2, 0x86, 0x26, 0x9b, 0xa4, 0x34, 0xe0, 0xfe, 0x69,
	0x36, 0xca, 0x01, 0xfb, 0x9c, 0x85, 0x48, 0xbf, 0x92, 0x97, 0x6d, 0xac, 0x4f, 0x8d, 0x5c, 0x0c,
	0xda, 0xc0, 0x56, 0x9e, 0x5b, 0x9f, 0x3a, 0x61, 0xe8, 0x01, 0x18, 0xa6, 0xc5, 0xcf, 0x47, 0x80,
	0xf3, 0x1f, 0x47, 0x67, 0xa5, 0x8c, 0x61, 0xad, 0x67, 0x91, 0xf7, 0xef, 0x86, 0x0f, 0xca, 0x2e,
	0xfa, 0x70, 0xec, 0xca, 0x71, 0x94, 0x52, 0xe7, 0x5f, 0xc4, 0x5b, 0xc0, 0x03, 0x22, 0x5b, 0xb1,
	0x07, 0xc4, 0x6e, 0x4a, 0x0d, 0x08, 0x34, 0xf7, 0x83, 0x1e, 0xbb, 0x23, 0x68, 0xc1, 0x93, 0x8e,
	0xf2, 0x5a, 0xed, 0xc4, 0x05, 0x0e, 0xfa, 0xf6, 0x3f, 0xc4, 0x45, 0xe9, 0xb8, 0x6a, 0x7f, 0x1a,
	0xa0, 0xa5, 0xab, 0x26, 0xbc, 0xb9, 0x9c, 0xdf, 0x58, 0x9f, 0x3a, 0x5e, 0x2d, 0x36, 0x17, 0xa6,
	0x57, 0x49, 0x9e, 0x3c, 0xa8, 0x1d, 0xa2, 0x16, 0x0c, 0xea, 0x88, 0x41, 0xb6, 0xaf, 0x20, 0x0c,
	0x73, 0x4e, 0x48, 0xe4, 0x28, 0x33, 0x3d, 0x7d, 0xcf, 0x24, 0x95, 0x59, 0xa6, 0x05, 0x1c, 0xb8,
	0x3d, 0x89, 0x6c, 0x5f, 0xa4, 0xa4, 0x92, 0xed, 0xab, 0x86, 0x2e, 0xe1, 0xe7, 0x81, 0x83, 0x82,
	0xdf, 0x65, 0x87, 0x82, 0x4e, 0x90, 0x77, 0x51, 0x5f, 0x7e, 0x5f, 0x8c, 0xda, 0x01, 0xdd, 0x17,
	0x5e, 0x2f, 0x14, 0x03, 0xe2, 0x5f, 0xd3, 0xba, 0x54, 0x0c, 0x58, 0x14, 0xc8, 0xde, 0x08, 0x30,
	0x8a, 0xbf, 0xc6, 0xfc, 0xa0, 0x13, 0x07, 0x05, 0x97, 0xea, 0x4c, 0x8b, 0x5f, 0x14, 0x2d, 0x1e,
	0x32, 0x2d, 0xc6, 0x41, 0x31, 0xbf, 0x38, 0xf3, 0xbf, 0x6d, 0xac, 0x4f, 0x1d, 0x52, 0x3f, 0x4c,
	0xab, 0xf7, 0xa8, 0x56, 0x6d, 0x42, 0x24, 0x02, 0x06, 0x54, 0xcf, 0x9b, 0x2f, 0xfd, 0x66, 0x3e,
	0xfc, 0x0a, 0xc5, 0x0a, 0xb7, 0xfd, 0xde, 0x49, 0xea, 0x3b, 0x2c, 0xdb, 0x84, 0x48, 0xd8, 0xb3,
	0x1b, 0xeb, 0x53, 0x87, 0x71, 0x41, 0x75, 0xf0, 0xdd, 0x54, 0x89, 0xf3, 0xb0, 0xec, 0x0d, 0x89,
	0xad, 0xfd, 0xc3, 0x1e, 0xbb, 0x33, 0x48, 0x82, 0xce, 0x5a, 0x19, 0xb7, 0x8a, 0xa6, 0x18, 0xc4,
	0x24, 0x0d, 0xb1, 0x53, 0xf3, 0x8f, 0x4f, 0xd2, 0x48, 0x19, 0xd3, 0x0a, 0x1c, 0x66, 0xe2, 0x5c,
	0x1a, 0x46, 0x22, 0x10, 0xb3, 0xa3, 0xbc, 0x12, 0x88, 0x79, 0x70, 0x53, 0x24, 0x10, 0x73, 0x50,
	0x4b, 0x0e, 0x34, 0x13, 0x86, 0x92, 0xd5, 0xdd, 0xef, 0x9b, 0xa4, 0x1b, 0x5e, 0x77, 0x0b, 0x48,
	0x80, 0x66, 0x82, 0x16, 0x55, 0x34, 0x13, 0x75, 0xa4, 0x89, 0x66, 0x22, 0x70, 0xd1, 0x10, 0xfc,
	0x40, 0xa3, 0x17, 0x49, 0x37, 0xb3, 0xbb, 0xf7, 0x4f, 0x27, 0x2d, 0x7e, 0xa0, 0xa0, 0x97, 0xce,
	0x2d, 0x2c, 0x02, 0x2d, 0xc1, 0x0f, 0x2a, 0xc5, 0x55, 0x7e, 0x30, 0xa8, 0x1d, 0xca, 0x0f, 0x34,
	0xb1, 0xa4, 0x9b, 0x91, 0xfe, 0x7e, 0x97, 0xc7, 0x8e, 0x07, 0x59, 0xdc, 0x94, 0xbc, 0xc5, 0xe2,
	0x5d, 0x3f, 0x66, 0x0f, 0xe5, 0xe2, 0xbc, 0xe0, 0x53, 0xc0, 0x53, 0x4e, 0xc3, 0x50, 0x92, 0xa2,
	0x4a, 0x40, 0xeb, 0x5a, 0xda, 0x74, 0x2c, 0xb3, 0xb8, 0x4a, 0xc4, 0xff, 0x49, 0x8f, 0xdd, 0x85,
	0x9d, 0x39, 0x64, 0x98, 0xf1, 0x22, 0xc2, 0x5d, 0xfc, 0x8c, 0xe8, 0xe2, 0xed, 0xba, 0x8b, 0x06,
	0x41, 0x84, 0x1c, 0x5f, 0x8a, 0xca, 0x99, 0x4b, 0x1b, 0xeb, 0x53, 0xb7, 0x3b, 0x6b, 0x4c, 0x87,
	0x1f, 0x50, 0x1d, 0x1e, 0xdc, 0x20, 0xb1, 0x09, 0x0d, 0x06, 0x90, 0xdc, 0x2c, 0x93, 0xd5, 0x17,
	0x5e, 0xdc, 0x4c, 0x56, 0xb5, 0x2a, 0xc6, 0x7f, 0x77, 0x2b, 0x55, 0x8c, 0x39, 0x1b, 0x5b, 0x6e,
	0x67, 0xfd, 0x2c, 0x41, 0x1d, 0xf8, 0x2f, 0xa2, 0x03, 0x07, 0x51, 0x07, 0x2e, 0x2f, 0x9e, 0x13,
	0xd7, 0x74, 0xf9, 0xbf, 0x69, 0xfa, 0x6e, 0xdd, 0x34, 0x21, 0x42, 0xae, 0xe9, 0xa2, 0x92, 0x1c,
	0x81, 0xcb, 0x79, 0x1c, 0xb6, 0xa3, 0x66, 0x98, 0x76, 0x83, 0x18, 0xb7, 0xfd, 0xe7, 0x56, 0x2a,
	0x86, 0x19, 0x80, 0x9b, 0x03, 0x30, 0x71, 0x04, 0x92, 0x92, 0x0a, 0x17, 0xae, 0xa1, 0x4b, 0x8e,
	0xc0, 0x65, 0x07, 0x05, 0x7f, 0x95, 0x1d, 0x6c, 0x05, 0x79, 0x88, 0xba, 0xf2, 0x51, 0xb1, 0xb0,
	0xf7, 0xab, 0xae, 0xcc, 0x06, 0x79, 0x28, 0x74, 0xd7, 0xf0, 0x9f, 0x69, 0x5a, 0x8a, 0x86, 0x14,
	0x9d, 0xe8, 0xae, 0x5b, 0x08, 0x01, 0x26, 0xbe, 0xd5, 0x89, 0x55, 0x44, 0x46, 0xd3, 0xe0, 0x7f,
	0xb6, 0x26, 0x7e, 0xb6, 0x13, 0x8b, 0xdb, 0x9b, 0x98, 0x78, 0xf3, 0xb3, 0x32, 0xf1, 0x2e, 0x72,
	0x64, 0xe2, 0x5b, 0x36, 0x2e, 0x1c, 0x3b, 0x12, 0x25, 0x0c, 0xca, 0x60, 0x39, 0x28, 0x22, 0x9b,
	0x51, 0xfe, 0x3f, 0x56, 0xfc, 0x7f, 0x41, 0x61, 0x4e, 0x42, 0x9b, 0x63, 0xc7, 0x51, 0x5e, 0x39,
	0x76, 0x06, 0x37, 0x45, 0x8e, 0x9d, 0x56, 0x2d, 0x39, 0xff, 0xbd, 0x9e, 0xba, 0xf1, 0xda, 0x7d,
	0xfd, 0xa4, 0x98, 0x2c, 0x9f, 0xf6, 0x15, 0x90, 0xbf, 0x76, 0x63, 0x7d, 0xca, 0x47, 0xbf, 0x4d,
	0xdf, 0xc8, 0x25, 0x78, 0x40, 0x97, 0xfc, 0x56, 0x05, 0x1b, 0x77, 0x25, 0x4f, 0x53, 0xcc, 0x10,
	0xbf, 0xc9, 0xd9, 0x95, 0x0b, 0x69, 0x5a, 0xe2, 0xae, 0xc0, 0xef, 0xba, 0xae, 0x50, 0x8a, 0x8e,
	0xae, 0x60, 0x6c, 0xff, 0x7b, 0x3d, 0x76, 0x9b, 0x92, 0x49, 0xe1, 0x23, 0x9e, 0x49, 0x49, 0x5e,
	0x84, 0x3f, 0xb0, 0xe2, 0x3b, 0x4a, 0xb1, 0x94, 0x7f, 0xce, 0x9b, 0xd3, 0x44, 0xb8, 0x94, 0x4d,
	0xd8, 0x85, 0x95, 0x80, 0x57, 0x03, 0x5a, 0x20, 0x86, 0xef, 0x2d, 0x37, 0x21, 0xff, 0xb3, 0x1e,
	0xbb, 0xa3, 0xd5, 0x2b, 0xca, 0xb4, 0x1b, 0xe5, 0xcd, 0xa0, 0x2c, 0x83, 0xd6, 0x6a, 0x37, 0x22,
	0xd1, 0x99, 0x7f, 0xd8, 0x12, 0x73, 0x66, 0x25, 0xf4, 0xb4, 0x06, 0x9e, 0x59, 0x84, 0xf5, 0x56,
	0x2d, 0xaf, 0x1c, 0xcd, 0x03, 0x5b, 0xa2, 0xcb, 0xad, 0x96, 0x9a, 0xff, 0xf3, 0x1e, 0x6b, 0xf0,
	0x15, 0xdb, 0x6c, 0x45, 0x09, 0xbc, 0x48, 0xf1, 0xbf, 0x32, 0x54, 0x35, 0xea, 0xf7, 0x4f, 0x88,
	0x7e, 0xeb, 0xf8, 0x3b, 0x7c, 0xe9, 0xce, 0x02, 0xc6, 0x3c, 0x42, 0x10, 0xfe, 0xff, 0x35, 0x75,
	0xa6, 0xff, 0xd2, 0xf9, 0x70, 0xf3, 0x66, 0x89, 0x19, 0x68, 0x38, 0x90, 0x2c, 0x70, 0xdc, 0xba,
	0x5d, 0xfe, 0x23, 0xd6, 0xa5, 0x83, 0x6c, 0x3c, 0xe0, 0xb8, 0x35, 0x3b, 0xfb, 0x7e, 0xd3, 0xd3,
	0x4d, 0xb6, 0xf4, 0x91, 0xd0, 0xb5, 0x99, 0xb9, 0x0c, 0x29, 0x5c, 0x61, 0x9a, 0xad, 0xd5, 0xa0,
	0x28, 0xe2, 0x02, 0xf5, 0xea, 0xff, 0xb4, 0x04, 0x1f, 0xe1, 0x10, 0x33, 0x2b, 0xe0, 0x84, 0x0c,
	0x49, 0x8b, 0x2a, 0x32, 0x64, 0x1d, 0x69, 0x72, 0x34, 0x87, 0x2e, 0x1a, 0xfe, 0xe7, 0x3d, 0x76,
	0xb7, 0x44, 0x5f, 0xe9, 0x25, 0x10, 0x67, 0x3c, 0xe8, 0x54, 0x6e, 0x6b, 0x7f, 0x32, 0x41, 0xc3,
	0xb5, 0x8a, 0xfe, 0x3c, 0xa2, 0x11, 0xc4, 0x15, 0xeb, 0xf1, 0x8d, 0xf5, 0xa9, 0x3b, 0xdc, 0x55,
	0xa6, 0xcb, 0x0f, 0x92, 0x2e, 0xd7, 0xb7, 0x89, 0xfb, 0x7e, 0x47, 0x38, 0x88, 0x28, 0xc4, 0x48,
	0x92, 0xf4, 0xe2, 0x6e, 0xd0, 0xc6, 0x33, 0xfe, 0x0f, 0xac, 0x7b, 0x8e, 0xe8, 0xdd, 0x3c, 0x87,
	0x12, 0x31, 0x92, 0x70, 0x41, 0x25, 0x46, 0x92, 0x9b, 0x28, 0xb9, 0xe6, 0x84, 0x55, 0x7c, 0x34,
	0xdb, 0xdd, 0x76, 0x6e, 0xaf, 0xc1, 0xef, 0x74, 0xce, 0x76, 0xb7, 0x9d, 0x9b, 0x1b, 0x03, 0x2d,
	0xaa, 0x99, 0xed, 0x2a, 0x69, 0xc7, 0x6c, 0x5b, 0x34, 0xfc, 0xdf, 0xf6, 0xd8, 0x7d, 0x61, 0x5c,
	0xb4, 0xd2, 0x7e, 0x94, 0xaf, 0x69, 0x51, 0x8e, 0xaf, 0x88, 0x76, 0x62, 0x71, 0xa8, 0x77, 0x4e,
	0x52, 0x97, 0xd7, 0x39, 0x85, 0xa6, 0x42, 0xd5, 0x6a, 0xa4, 0x99, 0x60, 0x63, 0x7d, 0xaa, 0x31,
	0xa8, 0x5e, 0x7f, 0xc1, 0x57, 0x6a, 0x1d, 0xe9, 0x16, 0xba, 0x40, 0x1c, 0xa9, 0xc3, 0x4d, 0xc9,
	0x73, 0xf9, 0xae, 0x22, 0x63, 0xbd, 0x6f, 0x92, 0xca, 0x77, 0x52, 0x12, 0x12, 0x09, 0xe0, 0x6d,
	0xb9, 0x4a, 0x25, 0x80, 0x1f, 0x20, 0x50, 0x1d, 0x0c, 0xa9, 0x28, 0xb5, 0xc6, 0xfc, 0xb0, 0x08,
	0xec, 0x54, 0xe6, 0xff, 0xc6, 0xba, 0xde, 0xcf, 0x15, 0x01, 0x64, 0x1c, 0x87, 0xeb, 0xbd, 0xfa,
	0x51, 0xb9, 0xde, 0x57, 0x09, 0x91, 0xeb, 0x7d, 0x48, 0xf1, 0xe0, 0xf6, 0x17, 0x3d, 0xa8, 0x47,
	0x30, 0xcb, 0xd3, 0x7e, 0x1c, 0x12, 0xe9, 0xfa, 0xaf, 0x2d, 0x6d, 0xd0, 0xa9, 0x07, 0xe5, 0xe0,
	0x2d, 0x4a, 0x58, 0x71, 0xfb, 0xab, 0x16, 0x57, 0x8e, 0x98, 0x81, 0xed, 0x90, 0xdb, 0x5f, 0x54,
	0x47, 0x8c, 0x4f, 0xcf, 0x4a, 0xb0, 0x9c, 0xc7, 0x2d, 0xd4, 0xc3, 0x9f, 0xb6, 0xa6, 0xe7, 0x11,
	0x00, 0x10, 0xd3, 0x23, 0xff, 0xaf, 0x4c, 0x8f, 0x4d, 0x84, 0x4c, 0xcf, 0x0a, 0x41, 0x82, 0x68,
	0xd0, 0x12, 0x3e, 0x09, 0xba, 0x51, 0x91, 0xd1, 0xcc, 0xb9, 0x7f, 0x6a, 0x49, 0x0b, 0xa2, 0xc9,
	0x73, 0x0a, 0x52, 0x04, 0xd6, 0xb1, 0x0b, 0x2b, 0x57, 0xa3, 0xfa, 0x06, 0x88, 0xb0, 0xb0, 0xe2,
	0xa6, 0xe3, 0x5f, 0x65, 0xe3, 0x2b, 0x51, 0x50, 0xf6, 0x72, 0xdc, 0xb3, 0x6f, 0x9e, 0xa4, 0x2b,
	0xe8, 0x11, 0x01, 0x31, 0xf3, 0x3a, 0xbe, 0x82, 0xd4, 0x0f, 0xd3, 0x93, 0x86, 0xec, 0x89, 0x4d,
	0x87, 0x2c, 0xa0, 0x15, 0x8a, 0x06, 0x6c, 0x4a, 0x61, 0x54, 0x04, 0xf4, 0x9f, 0xb1, 0xd8, 0x94,
	0x6c, 0x53, 0x4a, 0xd6, 0xc0, 0xa6, 0x68, 0x51, 0x85, 0x4d, 0xd5, 0x91, 0x26, 0x6c, 0x6a, 0xc5,
	0x45, 0x03, 0x18, 0xba, 0x42, 0x5f, 0xe9, 0x04, 0xb8, 0x5f, 0x3f, 0x69, 0x31, 0x74, 0xd9, 0x89,
	0x47, 0x3a, 0x41, 0x5b, 0x30, 0x74, 0x5c, 0x50, 0x61, 0xe8, 0x6e, 0xa2, 0x84, 0xa1, 0xaf, 0x54,
	0xf1, 0x21, 0x17, 0xd7, 0x4a, 0x9c, 0x47, 0x57, 0x83, 0x4e, 0xa7, 0x9a, 0xdb, 0xec, 0xdf, 0x5b,
	0xb9, 0xb8, 0x1e, 0x91, 0x90, 0x32, 0x0b, 0x19, 0xe4, 0xe2, 0xb2, 0xca, 0x2a, 0xaa, 0x8b, 0x5a,
	0xea, 0xc4, 0xaf, 0x70, 0xc5, 0x49, 0x05, 0x44, 0x1e, 0x4d, 0xc0, 0x62, 0x45, 0xbf, 0x63, 0x5d,
	0x32, 0x55, 0x47, 0x80, 0x95, 0x80, 0xc8, 0x43, 0x4a, 0x2a, 0x22, 0x4f, 0x0d, 0x5d, 0x22, 0xf2,
	0xac, 0x38, 0x28, 0xc0, 0xa5, 0x61, 0xa5, 0x93, 0x06, 0x90, 0xb4, 0x8d, 0x28, 0x3f, 0x7f, 0x77,
	0x82, 0x5e, 0x1a, 0x1e, 0x91, 0x50, 0xf3, 0x8b, 0xe2, 0xd2, 0x80, 0x7e, 0x57, 0x2e, 0x0d, 0x4e,
	0x8a, 0xe4, 0xd2, 0xa0, 0x20, 0x90, 0x22, 0xf4, 0x1f, 0x72, 0x2e, 0x80, 0x10, 0x2d, 0x5d, 0xe8,
	0x7f, 0xb7, 0xe7, 0x4f, 0xb7, 0x0f, 0xca, 0xcb, 0x79, 0x98, 0x3f, 0x5a, 0x56, 0xe5, 0x01, 0xb5,
	0xe4, 0xe9, 0x04, 0xea, 0xce, 0x11, 0xbd, 0xe8, 0xdb, 0xd9, 0x61, 0x88, 0x33, 0x6c, 0x89, 0x0a,
	0x7f, 0x21, 0x3a, 0x36, 0x86, 0x3a, 0x76, 0x15, 0x8e, 0xf3, 0xaf, 0xd9, 0x58, 0x9f, 0x1a, 0xd3,
	0xbf, 0x4c, 0x67, 0x4e, 0xea, 0xce, 0x5c, 0x1d, 0x20, 0x1b, 0x8c, 0xad, 0x58, 0x98, 0x82, 0x4d,
	0x0a, 0x37, 0x2a, 0xfe, 0x0d, 0xad, 0x4e, 0x50, 0x60, 0x01, 0xf5, 0x7f, 0x9f, 0xb4, 0xd8, 0xa4,
	0x06, 0x9d, 0xe5, 0x90, 0x92, 0x4d, 0x5a, 0x85, 0xd5, 0x21, 0xaa, 0x6d, 0x80, 0xb2, 0x49, 0x37,
	0x1d, 0x10, 0x54, 0xdb, 0x9d, 0x74, 0x39, 0xe8, 0x34, 0x8d, 0x2e, 0xb2, 0xc2, 0xb6, 0xfe, 0x9b,
	0x25, 0xa8, 0x9e, 0x06, 0x0c, 0xad, 0xdf, 0x94, 0x7c, 0x06, 0x04, 0x55, 0x77, 0x55, 0x45, 0x50,
	0xdd, 0xb4, 0x4d, 0x22, 0xa8, 0xb6, 0x07, 0x11, 0x85, 0xdb, 0xab, 0xa4, 0xf7, 0x74, 0xea, 0xe8,
	0xfd, 0xfb, 0xad, 0x81, 0x16, 0x5d, 0x7c, 0x2c, 0x55, 0x74, 0xe0, 0xf6, 0x6a, 0x17, 0x56, 0x6e,
	0xaf, 0x03, 0x5a, 0x20, 0x23, 0xdd, 0x76, 0x13, 0x02, 0x75, 0x89, 0xa4, 0x51, 0xac, 0x15, 0x65,
	0xd4, 0xad, 0x76, 0xf4, 0xbb, 0xac, 0xeb, 0xab, 0xe8, 0xd3, 0x12, 0x40, 0x4b, 0x6a, 0xa0, 0x2e,
	0x71, 0x94, 0x57, 0xd4, 0x25, 0x83, 0x9b, 0x22, 0xf7, 0xd7, 0x76, 0x2d, 0x39, 0x48, 0xd6, 0x2a,
	0x29, 0xf5, 0xa5, 0x5e, 0xb0, 0xd2, 0xeb, 0x4f, 0x4f, 0xd2, 0xb4, 0x52, 0xa2, 0x77, 0x97, 0x05,
	0xb8, 0xa4, 0x07, 0xc9, 0x5a, 0x5d, 0x15, 0x95, 0x64, 0xad, 0x9b, 0xb4, 0x46, 0x0c, 0x55, 0xda,
	0xf5, 0x04, 0xfd, 0xaf, 0x67, 0xfe, 0x6a, 0x90, 0x87, 0x57, 0x03, 0x22, 0x00, 0xfc, 0xec, 0x24,
	0xdd, 0xfb, 0x67, 0x24, 0xc8, 0xcc, 0x57, 0xf3, 0xbd, 0xaf, 0x7f, 0x55, 0x84, 0xc8, 0x2a, 0x29,
	0xb2, 0xf5, 0x57, 0x2d, 0x44, 0xff, 0x33, 0x1e, 0xbb, 0x5d, 0xe3, 0xc4, 0x49, 0x3f, 0x4a, 0xca,
	0x34, 0xc7, 0xa7, 0xdb, 0x7f, 0xb0, 0x84, 0x48, 0xd5, 0xf4, 0xbc, 0x82, 0x15, 0x8e, 0x06, 0xd5,
	0x62, 0xd3, 0xb5, 0x57, 0x5a, 0x5d, 0x73, 0x34, 0x43, 0x64, 0xc8, 0xd5, 0x3a, 0x5a, 0xfe, 0xf7,
	0xf3, 0xde, 0xa6, 0xa0, 0xda, 0x2f, 0xa2, 0xd0, 0xa1, 0xe8, 0xfe, 0x4d, 0x2b, 0xe4, 0xf9, 0x99,
	0xb4, 0x28, 0x67, 0x38, 0xac, 0x52, 0x49, 0x2f, 0x6c, 0xac, 0x4f, 0x4d, 0x56, 0x4a, 0xab, 0x7d,
	0x1d, 0xd0, 0x08, 0x09, 0x38, 0xb0, 0x5a, 0x43, 0x0a, 0xce, 0x3f, 0x9c, 0x76, 0xd9, 0xf4, 0xf1,
	0x6f, 0xac, 0xf3, 0xcf, 0xa4, 0xb4, 0x14, 0xe7, 0x1f, 0xfa, 0x5d, 0x39, 0xff, 0x9c, 0x14, 0xc9,
	0xf9, 0x67, 0xb2, 0x39, 0x13, 0x2d, 0x6c, 0x9c, 0x94, 0xfc, 0x72, 0xd5, 0x0d, 0x70, 0x4f, 0xbe,
	0x65, 0x92, 0x6a, 0x61, 0xe7, 0x01, 0x68, 0x21, 0xc8, 0x84, 0x16, 0xd6, 0xfc, 0xac, 0x68, 0x61,
	0x5d, 0xe4, 0x88, 0x16, 0x36, 0xb6, 0x71, 0xb7, 0x94, 0x4e, 0xf9, 0x8f, 0xb6, 0x65, 0x3a, 0x65,
	0x2e, 0x8e, 0x3e, 0x95, 0x2e, 0x9b, 0xa4, 0x3d, 0xa6, 0xc3, 0xbf, 0x61, 0xc5, 0x60, 0x7e, 0x43,
	0xba, 0xac, 0xb2, 0xa2, 0x08, 0x71, 0x14, 0x17, 0x54, 0xc4, 0x51, 0x37, 0x51, 0x22, 0x8e, 0x3e,
	0x55, 0xc5, 0x87, 0xb7, 0xaa, 0x4e, 0x9c, 0x5c, 0xd1, 0x99, 0x7a, 0xe3, 0x34, 0xa9, 0xa8, 0x6c,
	0xfe, 0x76, 0x82, 0xbe, 0x55, 0x9d, 0x8d, 0x93, 0x2b, 0xd3, 0x06, 0x5e, 0x68, 0x50, 0xe0, 0xad,
	0xca, 0x59, 0x53, 0x79, 0xab, 0xda, 0xac, 0x41, 0xf2, 0x56, 0xd5, 0x19, 0x40, 0x72, 0x50, 0x76,
	0xea, 0xf5, 0x17, 0x29, 0x3b, 0xf5, 0xaf, 0x7b, 0xec, 0x24, 0xc1, 0x15, 0xb9, 0x7b, 0xbb, 0x69,
	0x12, 0x97, 0x29, 0xee, 0xe0, 0x1f, 0x4f, 0xd0, 0x58, 0xdf, 0xb8, 0x3b, 0x67, 0x30, 0xce, 0xcc,
	0x5b, 0x36, 0xd6, 0xa7, 0xee, 0xae, 0xaf, 0x36, 0x5d, 0x7f, 0x8d, 0xa3, 0xeb, 0x35, 0xcd, 0xe3,
	0x0f, 0xb9, 0xbb, 0xb3, 0x19, 0x6d, 0xff, 0xc7, 0x3d, 0x36, 0x45, 0xc8, 0x76, 0xe2, 0xa2, 0x8c,
	0x12, 0x32, 0xe2, 0xbf, 0x64, 0x2f, 0x13, 0x04, 0x7f, 0x56, 0x82, 0x8b, 0x28, 0x37, 0xce, 0x9a,
	0xca, 0x9e, 0xdb, 0xa4, 0x3d, 0xba, 0x4a, 0x06, 0x50, 0x04, 0x1d, 0x3a, 0x21, 0xd6, 0x8d, 0xba,
	0xcb, 0xa4, 0xeb, 0x76, 0xce, 0x66, 0xdc, 0xc1, 0x05, 0x00, 0x16, 0x3a, 0x74, 0x47, 0x79, 0x45,
	0xc1, 0x31, 0xb0, 0x25, 0x22, 0x83, 0x74, 0x6a, 0xa9, 0x6d, 0x9a, 0xe3, 0xfc, 0xbb, 0x27, 0xb7,
	0x49, 0x8e, 0x73, 0xd1, 0x51, 0x91, 0x88, 0xdc, 0x30, 0x49, 0xd3, 0xd1, 0x4f, 0x55, 0x3a, 0x0a,
	0xb0, 0x9a, 0xe9, 0xaa, 0x8e, 0x5a, 0xa5, 0x8e, 0x8e, 0xd6, 0xb6, 0x61, 0x75, 0xd4, 0x4d, 0x69,
	0x70, 0x32, 0xf6, 0xdf, 0x7a, 0x31, 0x93, 0xb1, 0xf3, 0x2b, 0x53, 0xb7, 0xd7, 0x29, 0xe3, 0x56,
	0x50, 0x94, 0x55, 0x9d, 0xc0, 0xb3, 0x96, 0x66, 0x69, 0x41, 0x81, 0xca, 0xab, 0x3b, 0x5c, 0x99,
	0xec, 0xc2, 0xca, 0x95, 0xa9, 0xbe, 0x01, 0x22, 0xc8, 0x77, 0xdd, 0x74, 0xfc, 0x77, 0x78, 0xec,
	0xb0, 0x4b, 0xed, 0xf5, 0xcf, 0xac, 0x63, 0xdf, 0xe8, 0xa4, 0x1e, 0xe6, 0xc7, 0xbe, 0x4b, 0xd5,
	0x75, 0xd2, 0x18, 0x71, 0x0e, 0xd0, 0x71, 0x8d, 0x27, 0x15, 0xed, 0x16, 0x3f, 0xf5, 0x93, 0xa8,
	0xbc, 0x9a, 0xe6, 0x57, 0x9a, 0xea, 0x99, 0xc2, 0x96, 0xcb, 0xbf, 0xd5, 0x92, 0xcb, 0xcf, 0x09,
	0x78, 0xf9, 0xe8, 0x81, 0xe4, 0x72, 0x57, 0x45, 0x85, 0x03, 0x6d, 0xd2, 0x1a, 0x39, 0xf5, 0x93,
	0x7a, 0x82, 0x70, 0xea, 0x2b, 0x5a, 0x71, 0x16, 0x60, 0x83, 0xb1, 0x7f, 0x68, 0x29, 0xa1, 0x64,
	0xbf, 0xe6, 0xb3, 0xa0, 0x2b, 0x4e, 0x7d, 0x5c, 0x50, 0x39, 0xa4, 0xdc, 0x44, 0xc9, 0xa9, 0x9f,
	0x54, 0xf1, 0x61, 0x2f, 0x28, 0xd4, 0xca, 0x7a, 0xfb, 0xb0, 0xa5, 0xae, 0x93, 0x1d, 0xc0, 0xf9,
	0xf5, 0x69, 0x51, 0x65, 0x2f, 0xd4, 0x91, 0x26, 0x7b, 0x21, 0x71, 0xd1, 0xf0, 0x57, 0xd9, 0x41,
	0x4b, 0x73, 0xf1, 0x0e, 0xcb, 0x9e, 0x00, 0xb4, 0x0d, 0x60, 0x4f, 0x60, 0x69, 0x2c, 0xa4, 0x3d,
	0x41, 0xbd, 0xb2, 0x62, 0x7f, 0x82, 0x15, 0x15, 0x30, 0x27, 0x1c, 0xb6, 0x9a, 0x0d, 0xe3, 0x9f,
	0xdb, 0x73, 0x92, 0x86, 0x11, 0xc9, 0x86, 0x81, 0x0b, 0xaa, 0x73, 0xe2, 0x24, 0x4a, 0xe7, 0xa4,
	0x8a, 0x0f, 0xfd, 0x49, 0xfb, 0x51, 0xde, 0x09, 0xd6, 0x9a, 0x79, 0x4a, 0xfa, 0xf3, 0x97, 0x96,
	0x64, 0x78, 0x5e, 0x80, 0x5d, 0x48, 0x55, 0x7f, 0x70, 0x41, 0xa5, 0x3f, 0x6e, 0xa2, 0xa4, 0x3f,
	0x69, 0x15, 0x1f, 0xd6, 0x48, 0x16, 0x45, 0x79, 0x9c, 0xb4, 0xab, 0x6b, 0xe4, 0x63, 0xd6, 0x1a,
	0x59, 0x14, 0x80, 0x78, 0x8d, 0xd0, 0xa2, 0xca, 0x1a, 0xa9, 0x23, 0x4d, 0xd6, 0x48, 0xe6, 0xa2,
	0x01, 0xf7, 0xcc, 0x6c, 0x75, 0xad, 0xa8, 0x3d, 0x73, 0x7e, 0xd4, 0x32, 0x55, 0x5b, 0x94, 0xc0,
	0xe6, 0x50, 0x80, 0x7b, 0x66, 0xb5, 0xb8, 0x72, 0x77, 0x1b, 0xd4, 0x0c, 0xb9, 0x67, 0x66, 0x75,
	0xb4, 0x40, 0xa3, 0xaa, 0xc9, 0x58, 0x13, 0xfb, 0x7b, 0x96, 0x8c, 0xaa, 0x7a, 0x04, 0x13, 0x01,
	0x1a, 0x55, 0x52, 0x52, 0xd1, 0xa8, 0xd6, 0xd0, 0x25, 0x42, 0x6a, 0xe6, 0xa0, 0x00, 0x5a, 0x68,
	0x84, 0x6c, 0x9d, 0x86, 0x9f, 0x9f, 0xa4, 0x5a, 0x4c, 0xd3, 0x09, 0x38, 0xb7, 0x40, 0x0b, 0x6d,
	0x95, 0x55, 0xb4, 0xd0, 0xb5, 0xd4, 0x89, 0x12, 0x33, 0x73, 0x52, 0x01, 0xa1, 0x42, 0x2e, 0x0c,
	0x91, 0x79, 0xd5, 0x7a, 0x50, 0xfc, 0x55, 0xeb, 0x6a, 0x2e, 0x16, 0xc8, 0x82, 0x06, 0x15, 0x42,
	0x45, 0xa5, 0xb4, 0x22, 0x54, 0x0c, 0x68, 0x83, 0x08, 0x15, 0x59, 0x0d, 0x25, 0xce, 0xae, 0x20,
	0xf9, 0x8d, 0xe9, 0xda, 0xb7, 0x59, 0xec, 0x6a, 0x31, 0xcd, 0x4b, 0xc1, 0xae, 0xe0, 0xbf, 0x0a,
	0xbb, 0xa2, 0xe8, 0x84, 0x5d, 0x65, 0x08, 0x01, 0x2e, 0xde, 0x00, 0x6b, 0x5f, 0xce, 0xfe, 0xa3,
	0x65, 0xfe, 0xc4, 0x9b, 0x11, 0x97, 0x24, 0xb8, 0x78, 0x9b, 0x9f, 0x95, 0x8b, 0xb7, 0x8b, 0x1c,
	0x39, 0x82, 0x33, 0x1b, 0x77, 0x50, 0x0a, 0xa1, 0x5f, 0x7e, 0x11, 0x52, 0x08, 0x99, 0x51, 0x29,
	0x7b, 0x19, 0xe9, 0xcd, 0xf7, 0x4c, 0x56, 0x47, 0xe5, 0x22, 0x87, 0x31, 0xa3, 0x22, 0x7e, 0xba,
	0x47, 0xc5, 0x22, 0x57, 0x19, 0x15, 0x82, 0xeb, 0x5f, 0x65, 0xe3, 0x59, 0x9e, 0x3e, 0x45, 0xcd,
	0x5b, 0xfe, 0x85, 0xf5, 0xec, 0xb6, 0x28, 0x20, 0xc4, 0xb3, 0x9b, 0xfa, 0x51, 0x79, 0x76, 0xab,
	0xd0, 0x21, 0xcf, 0x6e, 0x19, 0x45, 0x83, 0x8b, 0x8d, 0x7e, 0x44, 0x75, 0x1a, 0x07, 0xfd, 0x23,
	0x4b, 0xbb, 0xaa, 0x9e, 0x52, 0x6d, 0xe3, 0x20, 0x47, 0x79, 0xe5, 0x62, 0x33, 0xb0, 0x25, 0x72,
	0xb1, 0xc9, 0x6a, 0xa9, 0xc1, 0x8c, 0x39, 0x15, 0xd6, 0x9f, 0xb5, 0x66, 0xcc, 0x28, 0x93, 0x61,
	0xc6, 0x5c, 0x4a, 0x6a, 0x39, 0x63, 0x9b, 0x69, 0xa7, 0xc7, 0x9f, 0xae, 0xe8, 0xa5, 0xdf, 0xce,
	0x0e, 0x73, 0xac, 0xa7, 0x7b, 0x51, 0x0f, 0xaf, 0x9a, 0x7f, 0x6c, 0x69, 0x4a, 0x1f, 0x4b, 0x8b,
	0xc7, 0x38, 0x88, 0x78, 0x25, 0xd1, 0xbf, 0x2a, 0xb2, 0xac, 0x83, 0x16, 0x51, 0x95, 0x3e, 0x6d,
	0x61, 0x82, 0x46, 0x0f, 0x78, 0x76, 0x65, 0x18, 0xde, 0x65, 0x99, 0xc1, 0x71, 0xb6, 0x2d, 0x3b,
	0x0f, 0x1a, 0x3d, 0xf4, 0xbb, 0xa2, 0xd1, 0x73, 0x52, 0x24, 0x1a, 0xbd, 0xbc, 0x82, 0x0d, 0x47,
	0x01, 0x20, 0x82, 0x0b, 0x4e, 0x0c, 0xfa, 0x18, 0xd3, 0x9d, 0xff, 0x65, 0x3d, 0x68, 0xf1, 0xe6,
	0xe7, 0x34, 0xa0, 0x38, 0x0a, 0xac, 0xb2, 0xca, 0x51, 0x50, 0x4b, 0x9d, 0x1c, 0x05, 0xb9, 0x93,
	0x8a, 0xec, 0x5e, 0xaf, 0x8c, 0xb4, 0xc2, 0x08, 0x4f, 0xd8, 0x7f, 0xad, 0x74, 0xaf, 0x57, 0x46,
	0x4a, 0x5b, 0x14, 0xa9, 0xee, 0x91, 0x32, 0x47, 0xf7, 0x6a, 0xa8, 0x5b, 0xdd, 0x73, 0x51, 0x91,
	0x13, 0xe9, 0xd2, 0x3f, 0xfe, 0xca, 0x84, 0x3d, 0x91, 0x5a, 0x19, 0x28, 0x27, 0xd2, 0xa1, 0x6d,
	0xbc, 0x0f, 0x77, 0x69, 0x80, 0x8e, 0xd1, 0xcf, 0xdd, 0xaa, 0x45, 0x85, 0x98, 0xb7, 0x89, 0xb1,
	0xf9, 0xff, 0x61, 0x09, 0xb4, 0xb2, 0x6d, 0x0e, 0x25, 0x78, 0x33, 0x2e, 0xa8, 0xf0, 0x66, 0x37,
	0x51, 0xc2, 0x9b, 0xf3, 0x2a, 0x3e, 0x5c, 0x6b, 0x79, 0x39, 0x3c, 0x65, 0x56, 0xd3, 0x67, 0x7f,
	0xaf, 0xf5, 0x40, 0x75, 0x41, 0x80, 0xd2, 0xf4, 0xd9, 0x76, 0x61, 0xe5, 0x5a, 0x5b, 0xdf, 0x00,
	0xb9, 0xd6, 0xe6, 0x6e, 0x3a, 0x20, 0xe4, 0x2a, 0x12, 0x15, 0x21, 0xf7, 0x03, 0x96, 0x90, 0x2b,
	0x3b, 0x83, 0x85, 0x5c, 0x5a, 0x54, 0x11, 0x72, 0xeb, 0x48, 0x13, 0x21, 0x37, 0x77, 0xd1, 0x80,
	0x9e, 0x15, 0x51, 0xab, 0x97, 0xc7, 0xe5, 0x5a, 0xe5, 0xcc, 0xff, 0x29, 0xab, 0x67, 0x4b, 0x12,
	0x50, 0x1c, 0xd6, 0x22, 0x19, 0x2d, 0x29, 0xaa, 0xf4, 0xac, 0x8e, 0x34, 0x4d, 0x46, 0xeb, 0xa2,
	0x01, 0xaf, 0xa7, 0x1a, 0xbd, 0x93, 0xb6, 0xdb, 0xfc, 0x0b, 0xd3, 0x65, 0xeb, 0xf8, 0xfb, 0xb3,
	0x09, 0x3b, 0x2b, 0xbb, 0xc0, 0x38, 0x2b, 0x10, 0xce, 0x03, 0xbc, 0x78, 0x3d, 0x75, 0x57, 0x55,
	0x5e, 0x4f, 0x37, 0x6d, 0x93, 0xbc, 0x9e, 0x16, 0x83, 0x88, 0x82, 0x80, 0x59, 0x4d, 0x41, 0x6f,
	0x7a, 0xff, 0x03, 0x96, 0xd6, 0xca, 0xce, 0xa9, 0x2e, 0x04, 0xcc, 0x4a, 0x69, 0x45, 0xc0, 0x1c,
	0xd0, 0x06, 0x8d, 0x35, 0x5d, 0x43, 0x09, 0x74, 0x1e, 0xee, 0x5c, 0xf9, 0xa6, 0xb3, 0xff, 0x9f,
	0xf5, 0xd2, 0xe1, 0x48, 0x00, 0x2f, 0x74, 0x1e, 0xae, 0x8a, 0x8a, 0xce, 0x63, 0x93, 0xd6, 0x68,
	0x2e, 0x89, 0x7a, 0x82, 0xfe, 0x2f, 0x79, 0xec, 0x1e, 0x45, 0x4b, 0x1a, 0xd6, 0x72, 0xe6, 0xdf,
	0x4d, 0x43, 0x6a, 0x55, 0xf2, 0xed, 0x93, 0x56, 0x06, 0x0f, 0x81, 0x33, 0xab, 0x51, 0x16, 0x00,
	0x63, 0xe6, 0x09, 0xc8, 0x42, 0x52, 0x53, 0x69, 0xbe, 0xe2, 0xd5, 0xf4, 0x2b, 0x06, 0xb4, 0x4c,
	0xd3, 0x90, 0x0c, 0x26, 0x0c, 0xcc, 0x4c, 0xd1, 0x8c, 0x92, 0x30, 0x4b, 0x63, 0x22, 0x66, 0xfd,
	0x13, 0x8b, 0x99, 0xc9, 0x7e, 0x9e, 0x92, 0x90, 0x32, 0xad, 0x9a, 0x55, 0x58, 0x61, 0x66, 0xf5,
	0x0d, 0xd0, 0x18, 0xe9, 0x6e, 0x3a, 0x70, 0xd3, 0x54, 0x24, 0x6c, 0x8e, 0xf1, 0xdb, 0xd6, 0x4d,
	0x53, 0xf6, 0x05, 0xf9, 0x48, 0x92, 0x92, 0xca, 0x4d, 0xb3, 0x86, 0x2e, 0xb9, 0x69, 0x16, 0x0e,
	0x0a, 0x60, 0x01, 0xa0, 0x90, 0xc5, 0x53, 0x44, 0xb3, 0xb5, 0x1a, 0xb5, 0xae, 0xa0, 0xbe, 0xfd,
	0x27, 0x4b, 0xf9, 0x2e, 0x7b, 0x22, 0x1e, 0x22, 0x66, 0x39, 0xb0, 0xb0, 0x00, 0x70, 0x94, 0x57,
	0x2c, 0x00, 0x06, 0x37, 0x45, 0x84, 0xd4, 0xa2, 0x96, 0x1c, 0x99, 0x6d, 0xc7, 0xd1, 0xf5, 0xfd,
	0xee, 0xd9, 0xa6, 0x47, 0x97, 0x5d, 0x58, 0x3b, 0xdb, 0x9b, 0x1c, 0x5d, 0x85, 0x9b, 0x8e, 0x3c,
	0x20, 0x04, 0x89, 0x0a, 0xf7, 0x7d, 0x6e, 0xc2, 0x3e, 0x20, 0x00, 0x50, 0x72, 0x41, 0x79, 0x40,
	0xe0, 0x22, 0xc7, 0x01, 0xe1, 0x26, 0x6d, 0x1d, 0x10, 0x0e, 0x1a, 0x64, 0xf4, 0x1c, 0xef, 0x9c,
	0xdf, 0xe0, 0x1e, 0x3d, 0xfd, 0x34, 0x89, 0x47, 0xcf, 0xf1, 0xde, 0x69, 0x8d, 0xde, 0xe0, 0x37,
	0x4f, 0x35, 0x7a, 0x95, 0x77, 0x4f, 0xd8, 0x2b, 0x24, 0x21, 0xbb, 0xe9, 0xe0, 0xaf, 0xd9, 0x7b,
	0x05, 0xa5, 0x1b, 0x97, 0x7b, 0x05, 0x97, 0x54, 0xf7, 0x8a, 0x9b, 0x2e, 0xdd, 0x2b, 0x0e, 0x0a,
	0x82, 0xd9, 0xd3, 0x4c, 0xc2, 0x95, 0xce, 0xfd, 0x9c, 0xa5, 0xe0, 0x76, 0x24, 0xd0, 0x95, 0xcc,
	0xde, 0x51, 0x51, 0x65, 0xf6, 0x83, 0x5b, 0xb3, 0x12, 0x07, 0xd5, 0x12, 0xf4, 0xbf, 0xe4, 0xb1,
	0x57, 0x6d, 0x25, 0xa3, 0x15, 0xfa, 0x90, 0xff, 0x77, 0xe2, 0x7a, 0x73, 0x6c, 0x65, 0x1b, 0xeb,
	0x53, 0x2f, 0xdd, 0x1c, 0xcc, 0x7c, 0xe4, 0xeb, 0xb7, 0x9e, 0x6a, 0xcb, 0xfd, 0xcd, 0x2f, 0x2d,
	0xb6, 0xda, 0x1a, 0x38, 0xbd, 0x54, 0x1b, 0xaa, 0x5c, 0xef, 0xbe, 0xc3, 0x72, 0x7a, 0x71, 0x67,
	0x5b, 0x72, 0x27, 0xbd, 0xac, 0x5c, 0xfb, 0x6a, 0x33, 0x6e, 0x0d, 0xba, 0x03, 0x56, 0x62, 0x9f,
	0x5b, 0xf7, 0xc1, 0x3f, 0x77, 0xc6, 0x08, 0xb7, 0x72, 0x78, 0xa1, 0x2f, 0xfa, 0x9f, 0x13, 0xd7,
	0x95, 0x4c, 0xcc, 0x19, 0x4c, 0xdc, 0x82, 0x31, 0x5f, 0xf8, 0x35, 0x5b, 0xcc, 0x29, 0xe6, 0xfe,
	0xd4, 0xfb, 0x8a, 0x2d, 0xb5, 0x23, 0x44, 0x95, 0xda, 0x70, 0xd0, 0xe6, 0x53, 0x7f, 0x68, 0x72,
	0x6b, 0xc9, 0xc6, 0x9e, 0x70, 0x25, 0x4c, 0x53, 0x95, 0x55, 0x51, 0x65, 0xf3, 0x96, 0x07, 0x66,
	0x4c, 0xb3, 0x08, 0xfb, 0xff, 0xd9, 0x19, 0x54, 0x1b, 0xe5, 0x03, 0x43, 0x5f, 0xf4, 0xb9, 0xc9,
	0x2d, 0x27, 0x23, 0x5b, 0x76, 0x65, 0xb8, 0x43, 0xf5, 0xe6, 0xbb, 0xbe, 0x6a, 0x0b, 0x39, 0xc9,
	0x6a, 0x5c, 0x33, 0xea, 0x93, 0x93, 0x91, 0x1b, 0x37, 0x8e, 0x77, 0x68, 0x3e, 0xe6, 0x0f, 0xad,
	0x1b, 0xb7, 0x89, 0xb4, 0x27, 0x6e, 0xdc, 0xe8, 0x77, 0xe5, 0xc6, 0xed, 0xa4, 0x48, 0x6e, 0xdc,
	0x45, 0x05, 0xdb, 0xcf, 0x75, 0xbc, 0x2e, 0xd3, 0x89, 0x2f, 0x59, 0x5e, 0xc0, 0x22, 0x26, 0x13,
	0x0e, 0xd6, 0x55, 0x75, 0x43, 0xb0, 0x89, 0x38, 0x82, 0x75, 0xe9, 0x36, 0x5b, 0x22, 0x4e, 0x88,
	0x69, 0xf0, 0x07, 0xc5, 0x14, 0xee, 0x43, 0x71, 0x42, 0x74, 0x74, 0x10, 0xd4, 0x14, 0x8a, 0x0e,
	0xe2, 0x6c, 0x67, 0x5f, 0x89, 0x8c, 0xd4, 0xd7, 0x98, 0xaf, 0xc3, 0x88, 0x98, 0x96, 0xfe, 0xad,
	0xe5, 0x8a, 0x22, 0xc3, 0x8f, 0x08, 0x57, 0x14, 0xf5, 0xa3, 0x62, 0x45, 0x58, 0x25, 0x44, 0x54,
	0x9a, 0x25, 0xc5, 0x83, 0x9b, 0x59, 0x19, 0x75, 0xa2, 0x6e, 0x54, 0xe6, 0x6b, 0x8e, 0x15, 0xfb,
	0x71, 0xeb, 0x66, 0x76, 0x51, 0xc1, 0xaa, 0x75, 0x02, 0x37, 0xb3, 0x4a, 0x69, 0xe5, 0x66, 0x36,
	0xa0, 0x0d, 0x72, 0x33, 0x2b, 0x6b, 0x28, 0xc1, 0x3a, 0x54, 0xf1, 0xc5, 0xe6, 0xce, 0x2d, 0xa1,
	0x2e, 0x6e, 0x58, 0xeb, 0x50, 0x06, 0xe4, 0x9a, 0x3b, 0xb7, 0x24, 0xd6, 0x21, 0xfa, 0x5d, 0x59,
	0x87, 0x4e, 0x8a, 0x64, 0x1d, 0xf6, 0x2b, 0xd8, 0x60, 0xca, 0x88, 0x11, 0x2b, 0x3c, 0xfa, 0xdd,
	0xd6, 0xa0, 0x99, 0x1e, 0x48, 0x4e, 0x08, 0xa6, 0x8c, 0x95, 0xd2, 0xca, 0x73, 0xd8, 0xa0, 0x46,
	0xc8, 0xa8, 0xf5, 0x6b, 0x48, 0x81, 0xfa, 0x57, 0x51, 0x21, 0x96, 0x8c, 0xbf, 0x6e, 0x3d, 0x63,
	0xc8, 0xce, 0xcc, 0x2f, 0x0a, 0xf5, 0xaf, 0xf9, 0x59, 0x51, 0xff, 0xba, 0xc8, 0x11, 0xf5, 0xaf,
	0x04, 0x40, 0x56, 0x8c, 0x1f, 0xf7, 0xd8, 0x71, 0x3b, 0x36, 0x9c, 0xe9, 0xca, 0x5f, 0x59, 0x4a,
	0x45, 0x1a, 0x50, 0x4d, 0x28, 0x15, 0xad, 0xb2, 0x8a, 0x52, 0xb1, 0x96, 0x3a, 0x51, 0x2a, 0xf6,
	0x9d, 0x54, 0xe0, 0x3c, 0xaa, 0x0f, 0x5d, 0x67, 0x3a, 0xfa, 0x21, 0xeb, 0x3c, 0xaa, 0x89, 0xfc,
	0x26, 0xce, 0xa3, 0xba, 0xca, 0xca, 0x79, 0xb4, 0x85, 0x96, 0xc9, 0x79, 0xd4, 0x1f, 0x4c, 0x98,
	0x0c, 0xb6, 0xb2, 0x0c, 0x30, 0xdf, 0xf0, 0xc1, 0x49, 0xe7, 0x60, 0x4b, 0x0b, 0x03, 0x32, 0xd8,
	0xaa, 0xac, 0x76, 0xb0, 0x2b, 0xd4, 0x5d, 0x83, 0x6d, 0x51, 0x21, 0x9b, 0xc7, 0xf9, 0xc0, 0xf6,
	0x11, 0xf7, 0xe6, 0x31, 0x0f, 0x6b, 0x78, 0xf3, 0xb8, 0x9e, 0xdb, 0xac, 0xcd, 0xb3, 0xd9, 0xb3,
	0x9b, 0xda, 0x3c, 0x15, 0x52, 0x83, 0x03, 0xdb, 0x7e, 0x62, 0xf2, 0xc5, 0x0b, 0x6c, 0x0b, 0xdb,
	0xfa, 0x6a, 0xb4, 0xdc, 0x8b, 0x6d, 0xbf, 0x93, 0x6f, 0xb4, 0x5e, 0x75, 0x1e, 0xe7, 0x40, 0x60,
	0xb8, 0x01, 0xdb, 0xda, 0xfc, 0xac, 0x6c, 0x6b, 0x17, 0x39, 0xb2, 0xad, 0xaf, 0xda, 0xb8, 0x8d,
	0x7f, 0xe8, 0xb1, 0x51, 0x1d, 0x84, 0x6b, 0x3b, 0x06, 0x3b, 0xfc, 0x47, 0x1e, 0x3b, 0x40, 0xe2,
	0x78, 0x6d, 0xc7, 0x4e, 0xbe, 0x7b, 0x94, 0xed, 0x95, 0x3d, 0xdc, 0x09, 0xca, 0xb8, 0x13, 0x94,
	0x71, 0x27, 0x28, 0xe3, 0x2d, 0x0a, 0xca, 0xb8, 0xc0, 0xf6, 0x69, 0x59, 0x59, 0x47, 0x66, 0x7c,
	0xe5, 0xc6, 0xfa, 0xd4, 0xa8, 0xdc, 0x8d, 0xf8, 0xc3, 0x10, 0x24, 0xa6, 0x34, 0x2a, 0xc5, 0x69,
	0x08, 0xd3, 0x58, 0x89, 0xea, 0x7b, 0xd4, 0x92, 0xdc, 0x6f, 0x3c, 0x5a, 0x61, 0xe5, 0x16, 0xf2,
	0xf3, 0x13, 0x37, 0xfd, 0x16, 0xa2, 0xb9, 0xa5, 0xee, 0xe9, 0x76, 0xe4, 0x96, 0x9f, 0xd9, 0xc7,
	0xc6, 0xec, 0xdb, 0xc6, 0x0e, 0xdb, 0xdc, 0x61, 0x9b, 0x3b, 0x6c, 0xf3, 0x16, 0xa6, 0x30, 0xaa,
	0x5e, 0xe6, 0xe3, 0xa2, 0x19, 0x46, 0x2b, 0x41, 0xaf, 0x53, 0x02, 0x23, 0x1d, 0x11, 0x16, 0x9f,
	0xf6, 0x46, 0x9d, 0x2f, 0xe6, 0x04, 0x90, 0x91, 0xd2, 0x07, 0x91, 0x22, 0x16, 0x9f, 0x65, 0x1d,
	0x2d, 0xff, 0xdb, 0x3c, 0xe6, 0xd3, 0x37, 0x00, 0xcc, 0x84, 0x5f, 0x52, 0xa7, 0xb9, 0xc0, 0x8f,
	0x0a, 0x9c, 0x2d, 0x83, 0x77, 0xa6, 0x55, 0x88, 0xf4, 0x2a, 0xd5, 0x16, 0x88, 0xc9, 0x51, 0x61,
	0x21, 0xfa, 0x61, 0x35, 0xf7, 0xc7, 0x9d, 0x75, 0x5d, 0xb9, 0xf1, 0x83, 0x61, 0xb0, 0x61, 0xe9,
	0x2f, 0x4c, 0xbc, 0xb8, 0x86, 0xa5, 0x8d, 0x1f, 0xf5, 0xd8, 0xd4, 0x26, 0xe3, 0xbe, 0x2d, 0x0f,
	0x19, 0x8f, 0x1d, 0x73, 0xcf, 0xd1, 0x76, 0xec, 0xed, 0x37, 0x8c, 0xb2, 0x31, 0x5b, 0x97, 0xb4,
	0x73, 0x24, 0xee, 0x1c, 0x89, 0x3b, 0x47, 0xe2, 0x2d, 0x3a, 0x12, 0xbf, 0xcb, 0x63, 0x13, 0x0e,
	0x55, 0x6d, 0x18, 0x94, 0x81, 0xcc, 0x27, 0x72, 0xbb, 0xad, 0x09, 0x4e, 0x0a, 0x99, 0xc1, 0x9d,
	0x4f, 0x2a, 0xbc, 0x71, 0xdb, 0x3b, 0x78, 0x2e, 0x28, 0x03, 0xf3, 0xc6, 0x5d, 0x43, 0x9e, 0x6c,
	0x92, 0xbe, 0x83, 0x02, 0x39, 0x86, 0xbe, 0x60, 0x1d, 0x43, 0x76, 0x93, 0x37, 0x9e, 0xd5, 0x8f,
	0x33, 0x4c, 0x37, 0xb5, 0xed, 0xc8, 0x30, 0xff, 0x8c, 0x31, 0x66, 0x7a, 0xbb, 0xc3, 0x2a, 0x77,
	0x58, 0xe5, 0x0e, 0xab, 0xbc, 0x45, 0xac, 0x72, 0x8d, 0x8d, 0x61, 0x56, 0x86, 0x58, 0xe4, 0xb1,
	0x2a, 0x8b, 0x34, 0x69, 0x97, 0xcc, 0x6e, 0x95, 0x6c, 0xf1, 0xee, 0x2a, 0x5b, 0xb4, 0xf9, 0xe1,
	0xc1, 0x3e, 0x41, 0x22, 0xc9, 0xf8, 0xbe, 0xb0, 0xb7, 0xee, 0x81, 0xee, 0xc6, 0x45, 0xf1, 0x01,
	0x4e, 0xa7, 0xbf, 0x30, 0xf1, 0x22, 0x38, 0x9d, 0xbe, 0xd7, 0x63, 0x87, 0xab, 0xc7, 0x46, 0x31,
	0xb9, 0x7e, 0x68, 0x93, 0xc7, 0xc9, 0x87, 0xd1, 0x03, 0xa0, 0x2e, 0x45, 0xde, 0x17, 0x0e, 0xa2,
	0xae, 0xf7, 0x3f, 0x83, 0x0a, 0x79, 0xf8, 0xec, 0x21, 0xde, 0x8e, 0x07, 0xc3, 0xff, 0xbd, 0x8f,
	0x8d, 0xea, 0x97, 0xcf, 0x9d, 0x73, 0x61, 0xe7, 0x5c, 0xd8, 0x39, 0x17, 0x6e, 0xd1, 0xb9, 0xf0,
	0x01, 0x64, 0xdd, 0x01, 0x49, 0xf4, 0xd2, 0x2c, 0xca, 0xcb, 0x38, 0x2a, 0xe4, 0xe9, 0x60, 0x3f,
	0xb3, 0xce, 0x67, 0x30, 0x97, 0xd3, 0x9c, 0x79, 0xea, 0x1d, 0xbb, 0xa8, 0xb1, 0xaa, 0x06, 0x1e,
	0x84, 0x28, 0xe1, 0x9d, 0xda, 0x5c, 0xc1, 0xa0, 0xfb, 0x9f, 0xb4, 0xe3, 0xdc, 0x40, 0xa8, 0x0e,
	0x7c, 0x74, 0x9c, 0xac, 0x18, 0x4e, 0xd8, 0xc1, 0x3f, 0xf8, 0x31, 0x52, 0x89, 0x7b, 0x23, 0x2b,
	0xea, 0xe2, 0xde, 0xe8, 0x66, 0x6a, 0xe3, 0xde, 0x28, 0x02, 0xfe, 0x93, 0x55, 0xfd, 0xd2, 0x44,
	0xa5, 0x4f, 0x37, 0x7e, 0x9a, 0xfd, 0xab, 0xcd, 0x13, 0x09, 0xfe, 0xa5, 0x68, 0xf5, 0xe5, 0x95,
	0x56, 0xb7, 0x53, 0x2e, 0xc1, 0x1f, 0xf2, 0xd8, 0xed, 0x83, 0xa6, 0x68, 0x3b, 0x1e, 0x43, 0xdf,
	0xe7, 0xb1, 0x43, 0xd6, 0x14, 0x6e, 0xc7, 0x6e, 0xfe, 0x0b, 0x8f, 0xdd, 0xb3, 0x85, 0x39, 0xdf,
	0x8e, 0x5d, 0x7f, 0xef, 0x34, 0x9b, 0xa8, 0xe9, 0xf1, 0xce, 0xb1, 0xbf, 0x73, 0xec, 0xef, 0x1c,
	0xfb, 0xb7, 0xe8, 0xd8, 0xff, 0x41, 0x8f, 0xdd, 0x16, 0xb5, 0xba, 0x59, 0x73, 0x35, 0x28, 0x56,
	0x85, 0x5f, 0x69, 0xab, 0xd3, 0x0b, 0xa3, 0xe6, 0x4a, 0x1c, 0x75, 0x42, 0x75, 0xf8, 0xdf, 0xa5,
	0xa3, 0xa0, 0xb7, 0xba, 0xd9, 0x19, 0x01, 0x39, 0x2f, 0x00, 0x1f, 0x01, 0x38, 0x61, 0x84, 0x5a,
	0x57, 0x6b, 0x8c, 0x50, 0x07, 0x34, 0x45, 0x2c, 0xc2, 0xa2, 0x1a, 0x4a, 0x7c, 0x26, 0xe2, 0x76,
	0x37, 0x6b, 0x46, 0x49, 0xb0, 0xdc, 0x89, 0x64, 0x22, 0x46, 0x98, 0x89, 0xf9, 0x76, 0x37, 0x3b,
	0x05, 0xa5, 0x66, 0x26, 0x10, 0x28, 0x99, 0x89, 0x58, 0xc3, 0xfa, 0x3d, 0x76, 0x14, 0xec, 0xd3,
	0xb4, 0xb3, 0xa5, 0x00, 0x0f, 0x21, 0x0f, 0xe3, 0x88, 0x90, 0x6f, 0x16, 0xd3, 0xbc, 0x54, 0x3e,
	0x9b, 0x02, 0x2d, 0x34, 0x1c, 0xc0, 0x89, 0x5d, 0x89, 0xe3, 0x60, 0xa1, 0xfb, 0xff, 0xd3, 0x63,
	0x5f, 0x51, 0x7f, 0xc0, 0x06, 0x9d, 0x4e, 0x7a, 0x35, 0x0a, 0x9b, 0x2a, 0x51, 0x5f, 0xc6, 0x79,
	0x1d, 0xa4, 0x71, 0x44, 0x8e, 0x30, 0xd3, 0x02, 0x48, 0xa6, 0xfa, 0x13, 0xec, 0x30, 0xdf, 0x58,
	0x9f, 0x7a, 0x59, 0x0d, 0x5f, 0x75, 0xc0, 0x3f, 0xb7, 0x3e, 0xf5, 0xb5, 0x9b, 0x1d, 0xf6, 0xce,
	0xbe, 0xe0, 0xef, 0x7b, 0x59, 0x7f, 0xcb, 0xed, 0xf9, 0x3f, 0xed, 0xb1, 0x41, 0xe6, 0x96, 0x71,
	0x12, 0xc6, 0x49, 0xbb, 0x98, 0x1c, 0x1b, 0xc4, 0xf2, 0xdf, 0x3c, 0xc8, 0xb8, 0x53, 0x52, 0x30,
	0xbe, 0x22, 0x9b, 0xb7, 0xb6, 0x25, 0xdb, 0x4e, 0x09, 0xeb, 0x7f, 0xce, 0x63, 0xf7, 0xd5, 0x93,
	0x94, 0x61, 0xb3, 0xd2, 0xab, 0x49, 0x94, 0x4f, 0x8e, 0xc3, 0x4e, 0x84, 0xfc, 0x0e, 0x35, 0xbd,
	0x15, 0xa1, 0xb3, 0xce, 0x73, 0x68, 0x93, 0xdf, 0x61, 0x6b, 0xd4, 0x89, 0x13, 0x41, 0x7f, 0x53,
	0xf2, 0xfe, 0xef, 0x7a, 0xec, 0x65, 0x03, 0x28, 0xaf, 0xb6, 0xb2, 0x66, 0x9a, 0xc1, 0x19, 0xd6,
	0x89, 0x8b, 0x72, 0xd2, 0xa7, 0x4b, 0x6d, 0x6e, 0xb5, 0x95, 0x9d, 0x87, 0x6a, 0x48, 0xfc, 0x06,
	0xec, 0x7c, 0x75, 0x63, 0x7d, 0xea, 0xde, 0xba, 0x0f, 0x3b, 0x33, 0xbb, 0x28, 0xe0, 0x39, 0xf8,
	0x73, 0xeb, 0x53, 0x5f, 0xbd, 0xe9, 0xb7, 0x59, 0x3d, 0xc0, 0xdf, 0x77, 0x6f, 0xdd, 0xf7, 0xe9,
	0x5e, 0xf1, 0x56, 0xfc, 0x9f, 0xf2, 0xd8, 0xfd, 0x03, 0x1a, 0x88, 0x0b, 0x88, 0x2e, 0x20, 0x3c,
	0xd3, 0x27, 0x0f, 0xc3, 0xee, 0x8e, 0x36, 0xd6, 0xa7, 0x4e, 0xd6, 0x7d, 0x83, 0x40, 0x10, 0x5e,
	0xea, 0xcf, 0xad, 0x4f, 0xbd, 0x6e, 0xd3, 0x4f, 0x20, 0x2d, 0xe0, 0x0f, 0x38, 0xd9, 0xdf, 0x42,
	0x13, 0xfe, 0x1f, 0x78, 0xec, 0x15, 0xf5, 0xd4, 0x57, 0x82, 0xb2, 0xa9, 0x1e, 0xc0, 0xcb, 0xb4,
	0x95, 0x76, 0x8a, 0xc9, 0x23, 0x30, 0x49, 0x93, 0x26, 0x01, 0x43, 0xf9, 0x88, 0x78, 0xd8, 0x15,
	0xf5, 0x33, 0x9d, 0x8d, 0xf5, 0xa9, 0x97, 0xd4, 0x7c, 0x9d, 0x0d, 0xfc, 0xdc, 0xfa, 0xd4, 0xc3,
	0x9b, 0x7d, 0x60, 0xb5, 0x0b, 0xf8, 0x23, 0x5f, 0xd2, 0xdf, 0x5a, 0x4b, 0xfe, 0xbf, 0xf6, 0xd8,
	0xbd, 0xf5, 0x8d, 0x40, 0xf0, 0x60, 0x78, 0xe9, 0x2e, 0x26, 0x8f, 0x52, 0xbd, 0xa4, 0x09, 0x20,
	0x01, 0x0b, 0xb0, 0xb9, 0xb1, 0x3e, 0x75, 0x77, 0xcd, 0xe7, 0x9d, 0x49, 0x8b, 0x12, 0xc0, 0xf9,
	0x87, 0xbd, 0x76, 0xb3, 0x0f, 0x43, 0x6d, 0x92, 0x28, 0xa1, 0xfd, 0xcd, 0x88, 0xfb, 0xbf, 0xee,
	0xb1, 0x97, 0xd4, 0xd3, 0xed, 0x06, 0x2d, 0xc5, 0x36, 0xa3, 0x62, 0xf2, 0x18, 0x9d, 0xae, 0x85,
	0xa0, 0x35, 0xad, 0xea, 0xe0, 0x7b, 0x5a, 0x1b, 0xeb, 0x53, 0xf7, 0xd4, 0x7c, 0x0f, 0x06, 0x36,
	0x0e, 0x47, 0x5b, 0x6c, 0x19, 0x7f, 0xd3, 0x3d, 0xfd, 0xcd, 0x1b, 0xf0, 0xd7, 0x3d, 0x76, 0xb2,
	0x9e, 0x36, 0x52, 0x0d, 0x4c, 0xc0, 0x27, 0xbd, 0x72, 0x13, 0x73, 0x7c, 0x73, 0xad, 0x87, 0xef,
	0x7c, 0xcb, 0x80, 0x79, 0x23, 0x0a, 0x84, 0xd7, 0x6c, 0xf6, 0x95, 0x6e, 0x7d, 0x42, 0xdd, 0xb4,
	0x21, 0xed, 0xc2, 0x07, 0x3d, 0x76, 0x7b, 0xbf, 0x13, 0x24, 0x4d, 0x61, 0x97, 0x57, 0x44, 0x61,
	0x93, 0x24, 0x04, 0x9c, 0x9c, 0x04, 0xf6, 0x20, 0xec, 0xdc, 0x3b, 0x41, 0x02, 0x36, 0x7d, 0x45,
	0x14, 0xe2, 0x9c, 0x82, 0xc8, 0xce, 0x7d, 0x00, 0x25, 0x6a, 0xe7, 0x5e, 0x43, 0xca, 0x7f, 0x1b,
	0x1b, 0xeb, 0xe7, 0x2b, 0x32, 0x91, 0x8f, 0x08, 0x83, 0x32, 0x79, 0x1c, 0xc6, 0x56, 0xfb, 0x88,
	0x5f, 0xce, 0x57, 0x44, 0xda, 0x1e, 0xb3, 0x01, 0x84, 0x62, 0xfe, 0xc2, 0x23, 0xa8, 0x1c, 0x29,
	0xe6, 0x2d, 0x7a, 0x54, 0x31, 0x4f, 0x88, 0xf9, 0xef, 0xf7, 0xd8, 0x21, 0x94, 0x13, 0x52, 0xd8,
	0xb1, 0x8f, 0x38, 0x75, 0x0b, 0x95, 0x83, 0x51, 0x65, 0x99, 0xbc, 0x10, 0xad, 0x88, 0xac, 0xbf,
	0xb8, 0x04, 0x65, 0xfd, 0xb5, 0xe8, 0x93, 0xac, 0xbf, 0x3a, 0xdd, 0x24, 0x28, 0x3e, 0xbe, 0xdb,
	0x63, 0x3e, 0x4d, 0xcf, 0x28, 0xd2, 0xe5, 0x89, 0x0e, 0xbd, 0x6a, 0xb3, 0x0e, 0xa1, 0x71, 0xd5,
	0x46, 0x45, 0x56, 0x21, 0x32, 0x2a, 0xaa, 0x36, 0x44, 0x8c, 0x8a, 0x96, 0x2d, 0x44, 0xff, 0x67,
	0x3c, 0x76, 0xc2, 0x1d, 0x1a, 0x5b, 0x24, 0x7e, 0x12, 0x9d, 0x7c, 0xcd, 0x26, 0x9d, 0x74, 0x44,
	0xe0, 0xe6, 0x7d, 0x05, 0x47, 0x70, 0x77, 0x1d, 0x72, 0x04, 0xaf, 0x6f, 0x9e, 0x38, 0x82, 0xc7,
	0x6e, 0x3a, 0xfe, 0x8f, 0xe0, 0xf0, 0x7c, 0x96, 0x42, 0xe9, 0x5d, 0xa2, 0xfb, 0x0f, 0x6d, 0xb6,
	0xa1, 0xed, 0xd8, 0x7f, 0xbc, 0xf3, 0xa7, 0x20, 0x06, 0xa2, 0xa3, 0xc6, 0x15, 0xbe, 0xaf, 0x5e,
	0x97, 0x74, 0x34, 0x73, 0x91, 0xf0, 0xbf, 0xc3, 0x63, 0xe3, 0x24, 0x64, 0x9a, 0x70, 0xf3, 0x12,
	0xfd, 0xdd, 0x94, 0x01, 0x99, 0x40, 0x6a, 0xbc, 0xa7, 0x22, 0x20, 0x19, 0x29, 0xc3, 0x01, 0xc9,
	0xec, 0x56, 0x68, 0x40, 0x32, 0x8a, 0x06, 0x5b, 0x07, 0x05, 0x50, 0x13, 0xe9, 0xb9, 0xb7, 0xb6,
	0x75, 0x74, 0x48, 0x36, 0xbd, 0x75, 0x70, 0x09, 0xda, 0x3a, 0x16, 0x7d, 0xb2, 0x75, 0x32, 0x8c,
	0x02, 0xbd, 0x41, 0xc1, 0xc1, 0x44, 0xb6, 0xea, 0xad, 0xf5, 0x46, 0x87, 0x1b, 0xd3, 0xbd, 0xc1,
	0x25, 0xa8, 0x37, 0x16, 0x7d, 0xd2, 0x9b, 0xa7, 0x31, 0x8a, 0xff, 0x69, 0x19, 0x2a, 0x8a, 0x84,
	0x2b, 0x12, 0x99, 0xc5, 0x44, 0x9f, 0x1e, 0xd8, 0xa4, 0x4f, 0x56, 0x30, 0x24, 0xde, 0xb3, 0x69,
	0x15, 0xbc, 0x89, 0x96, 0x5b, 0xa1, 0xa4, 0x2a, 0x2d, 0x56, 0x62, 0x37, 0x59, 0xe8, 0xfe, 0x27,
	0x3c, 0x76, 0xd8, 0x0a, 0x11, 0x24, 0xd2, 0xb7, 0x88, 0x9e, 0x7e, 0xc5, 0x26, 0x3d, 0x25, 0xc1,
	0x87, 0x78, 0x3f, 0xe1, 0x09, 0xcf, 0x2e, 0x45, 0x4f, 0x78, 0x8e, 0xb6, 0xc8, 0x13, 0x5e, 0x61,
	0xa3, 0x72, 0xb1, 0xe9, 0xf6, 0xba, 0x88, 0x40, 0x22, 0x01, 0x8a, 0xe8, 0xea, 0x57, 0x6e, 0xb1,
	0xab, 0x24, 0x4e, 0x10, 0xef, 0x32, 0x18, 0x8c, 0xd6, 0xd5, 0x22, 0xb7, 0xae, 0x41, 0x9d, 0x20,
	0x06, 0xa3, 0x45, 0x1d, 0x2d, 0x58, 0x19, 0x95, 0xd8, 0x2f, 0x22, 0x04, 0xd5, 0xd6, 0x56, 0x86,
	0x15, 0x59, 0x46, 0xaf, 0x8c, 0x6a, 0x39, 0x76, 0x79, 0x76, 0xb5, 0x48, 0x56, 0x46, 0x51, 0x45,
	0xf7, 0x7f, 0xdc, 0x63, 0xc7, 0x9d, 0x41, 0x56, 0x84, 0x37, 0x9f, 0xe8, 0xef, 0xab, 0xb7, 0xd6,
	0x5f, 0x14, 0x7a, 0x85, 0x77, 0x19, 0xcc, 0x3f, 0x9d, 0x55, 0xc8, 0xfc, 0xb3, 0xb6, 0x6d, 0x62,
	0xfe, 0x59, 0x38, 0xa9, 0xf8, 0x57, 0xd0, 0x1b, 0xc5, 0x87, 0x44, 0x57, 0xef, 0xdd, 0xa4, 0xab,
	0x37, 0xfe, 0x62, 0xf1, 0x7d, 0xc8, 0xd5, 0x55, 0x09, 0x6b, 0x22, 0x21, 0x9b, 0x68, 0xf9, 0xef,
	0x6c, 0xd2, 0x32, 0x2d, 0xe6, 0x9d, 0x78, 0x3d, 0xf2, 0x1e, 0x36, 0xc5, 0x0e, 0x57, 0x58, 0xdc,
	0x9c, 0xcb, 0x79, 0x18, 0x21, 0x73, 0x99, 0x7d, 0xb3, 0x87, 0x95, 0x6f, 0x11, 0x1d, 0x7e, 0xdd,
	0x75, 0x75, 0xf8, 0x45, 0x7d, 0x66, 0x21, 0x83, 0xaf, 0xec, 0x15, 0x44, 0x80, 0xf0, 0xeb, 0x1a,
	0x7c, 0x69, 0x07, 0x61, 0x0f, 0xbe, 0x29, 0x76, 0x0c, 0x3e, 0x6e, 0xce, 0x35, 0xf8, 0x08, 0xd9,
	0x5f, 0x63, 0x7e, 0xd0, 0x89, 0x83, 0x82, 0xfa, 0x42, 0xff, 0xbe, 0xe5, 0x68, 0x3f, 0xcd, 0x41,
	0xe6, 0x17, 0x85, 0xa3, 0xbd, 0xfa, 0x51, 0x71, 0xb4, 0xaf, 0x12, 0x22, 0x47, 0x35, 0x54, 0x23,
	0x1f, 0xe8, 0x4d, 0xd2, 0xbc, 0xff, 0xc9, 0x8b, 0x9b, 0xe6, 0x7d, 0xf3, 0xb4, 0xc7, 0x7f, 0x3a,
	0xb1, 0xcd, 0xd2, 0x1e, 0xd7, 0x67, 0xa9, 0xfb, 0x6f, 0xb7, 0x3a, 0x4b, 0x5d, 0x7d, 0xc2, 0xa0,
	0x3f, 0xbc, 0xd5, 0x09, 0x83, 0xb6, 0x94, 0x60, 0xe6, 0xbf, 0x7c, 0x39, 0x26, 0x98, 0xf9, 0xa3,
	0x17, 0x29, 0xc1, 0xcc, 0x66, 0xa9, 0x41, 0xfe, 0x6c, 0xe2, 0xcb, 0x24, 0x35, 0xc8, 0x1f, 0x4c,
	0x7c, 0x39, 0xa4, 0x06, 0xf9, 0xe3, 0x17, 0x33, 0x35, 0x88, 0x2b, 0xc2, 0xcc, 0x7f, 0x7d, 0x81,
	0x23, 0xcc, 0xd4, 0x86, 0xe8, 0xd8, 0xb8, 0x95, 0x21, 0x3a, 0xb6, 0x1a, 0x03, 0x43, 0x86, 0x11,
	0xdb, 0xe6, 0x31, 0x30, 0x36, 0x0d, 0x32, 0xf1, 0xec, 0xc4, 0x36, 0x09, 0x32, 0x81, 0xad, 0x28,
	0x06, 0x69, 0xb7, 0xb6, 0xa3, 0x15, 0xc5, 0x47, 0x86, 0xd8, 0x7d, 0x5b, 0xd3, 0x83, 0x6d, 0xc3,
	0xde, 0xfb, 0x6f, 0x62, 0xbb, 0x82, 0xb2, 0xcc, 0x27, 0x77, 0x81, 0xa6, 0x53, 0x87, 0xe4, 0xc2,
	0x3d, 0x17, 0x49, 0xa2, 0x8a, 0xd5, 0x58, 0x58, 0x9b, 0x01, 0xe9, 0xe9, 0xb2, 0xcc, 0x0d, 0x69,
	0x4e, 0x81, 0x90, 0xe6, 0x05, 0x8d, 0x9f, 0xf3, 0xd8, 0x2b, 0xaf, 0x4b, 0xf7, 0xb6, 0x1d, 0x67,
	0xf7, 0x67, 0x3d, 0xf6, 0xf2, 0xeb, 0xd0, 0xc0, 0x6d, 0xc7, 0x4f, 0xf8, 0x71, 0x8f, 0xdd, 0xbb,
	0x25, 0xa5, 0xdc, 0x36, 0x37, 0xaf, 0x1a, 0xa4, 0xbb, 0xfb, 0x32, 0xeb, 0x3a, 0x56, 0xeb, 0x6d,
	0xc7, 0xae, 0x7f, 0x7c, 0x88, 0xbd, 0x74, 0xcb, 0xfa, 0xc0, 0xed, 0xc8, 0xd6, 0xbe, 0x8e, 0xb0,
	0xb5, 0x7b, 0x69, 0xca, 0x16, 0x78, 0xfb, 0x31, 0xe9, 0x9e, 0x2f, 0xf4, 0xe4, 0x5b, 0xce, 0x96,
	0x39, 0xdb, 0x4f, 0x7a, 0xec, 0x25, 0x5b, 0x54, 0x42, 0x6e, 0xc7, 0xd9, 0xfd, 0x97, 0x1e, 0xfb,
	0x8a, 0xeb, 0x54, 0x4c, 0x6e, 0xc7, 0xcf, 0xf8, 0x69, 0xaf, 0x76, 0x91, 0x56, 0x55, 0x90, 0xdb,
	0xf1, 0x03, 0x3e, 0xef, 0xb1, 0x57, 0x5c, 0x8f, 0xae, 0x72, 0x3b, 0x7e, 0xc3, 0x0f, 0x7b, 0xec,
	0x8e, 0x81, 0x4a, 0xcc, 0xed, 0xd8, 0xe9, 0x9f, 0xf2, 0xd8, 0xfd, 0x5b, 0xd5, 0x7f, 0x6e, 0xc7,
	0xfe, 0xff, 0xbc, 0xc7, 0x1e, 0xb8, 0x6e, 0x75, 0xe8, 0x97, 0xe7, 0x44, 0x18, 0xbd, 0xe5, 0x76,
	0xec, 0xff, 0xb3, 0x07, 0xd8, 0x41, 0xda, 0xff, 0x1d, 0xc3, 0xe9, 0x1d, 0xc3, 0xe9, 0x1d, 0xc3,
	0xe9, 0x5b, 0x64, 0x38, 0x7d, 0x9e, 0xed, 0x2b, 0xa2, 0xbc, 0x1f, 0xe5, 0x62, 0xa8, 0xf6, 0x9b,
	0x2f, 0x5b, 0x82, 0x62, 0x3a, 0x54, 0x08, 0x94, 0x7c, 0x59, 0xa1, 0x61, 0xfd, 0x4f, 0xa2, 0x37,
	0x51, 0xfa, 0x5a, 0x2e, 0x1d, 0x9e, 0xee, 0x77, 0x6b, 0x7c, 0xac, 0xb4, 0x0b, 0xf6, 0x53, 0xa8,
	0xfb, 0x91, 0xdc, 0xd9, 0x90, 0xeb, 0x29, 0x94, 0x3c, 0x92, 0x2f, 0x57, 0x3d, 0x9e, 0x6e, 0x77,
	0x77, 0xea, 0xc6, 0x1f, 0x11, 0xb7, 0xaa, 0x06, 0xfb, 0xd7, 0x5f, 0x16, 0x6a, 0xb0, 0x81, 0x01,
	0x4c, 0x7f, 0x71, 0xe2, 0x45, 0x0c, 0x60, 0xfa, 0x19, 0x8f, 0x9d, 0xa8, 0xfd, 0xda, 0x62, 0xf2,
	0x77, 0x0e, 0x6d, 0x6d, 0x78, 0x1f, 0x45, 0x5a, 0x3a, 0xbb, 0x12, 0x3d, 0x8d, 0xd5, 0xb7, 0xe4,
	0xd2, 0xd1, 0x55, 0x08, 0x35, 0x3e, 0xe7, 0xb1, 0xbb, 0x36, 0x5b, 0xf6, 0xdb, 0xf1, 0x90, 0xfe,
	0xb4, 0xc7, 0x8e, 0xb8, 0x76, 0xc6, 0x76, 0xec, 0xeb, 0xbf, 0xf9, 0x5a, 0x2d, 0x50, 0x48, 0xc9,
	0x67, 0x47, 0xa0, 0xd8, 0x11, 0x28, 0x76, 0x04, 0x8a, 0x5b, 0x24, 0x50, 0xbc, 0x8d, 0x4d, 0x28,
	0x17, 0x9b, 0xa0, 0xd3, 0x49, 0x65, 0xb2, 0x16, 0xde, 0x19, 0x29, 0x5c, 0x80, 0x81, 0xa5, 0x34,
	0xd2, 0x9e, 0xd6, 0x10, 0x0b, 0x69, 0x18, 0x19, 0x03, 0xcb, 0x1a, 0x0a, 0xe4, 0x3c, 0x08, 0x5c,
	0x24, 0x36, 0x75, 0x04, 0x3b, 0xb0, 0xcd, 0x1c, 0xc1, 0xbe, 0xd3, 0x63, 0x93, 0xd1, 0x35, 0x78,
	0xf5, 0x21, 0xe9, 0x1a, 0xc1, 0x7d, 0xe5, 0x20, 0x74, 0x76, 0xc2, 0x91, 0xfd, 0xf1, 0x6c, 0x5c,
	0xc8, 0x74, 0x50, 0xa7, 0x00, 0xd9, 0xaa, 0x32, 0x47, 0x6b, 0x1d, 0x6d, 0x32, 0x94, 0x91, 0x8b,
	0x86, 0xff, 0x38, 0x3b, 0x10, 0x5d, 0x2b, 0xa3, 0x3c, 0x81, 0x07, 0xc0, 0xa0, 0x0b, 0x8e, 0x5b,
	0x23, 0x33, 0x0f, 0x6e, 0xac, 0x4f, 0xed, 0x3f, 0x25, 0x2b, 0xe6, 0xb3, 0xa0, 0x6b, 0xc2, 0xc3,
	0x12, 0x70, 0x92, 0x12, 0x39, 0x42, 0xf0, 0x7c, 0xf1, 0xaf, 0x04, 0xcb, 0x79, 0xdc, 0x6a, 0x16,
	0x49, 0x50, 0x82, 0x97, 0x94, 0x74, 0x7e, 0x7b, 0x04, 0x8a, 0x97, 0x92, 0xa0, 0x34, 0x8b, 0x1f,
	0x81, 0x92, 0xc5, 0xbf, 0xa2, 0x61, 0xfd, 0x1e, 0x18, 0x70, 0xa4, 0x61, 0xb3, 0x97, 0x5c, 0x49,
	0xd2, 0xab, 0x49, 0xb3, 0x97, 0xc4, 0xad, 0xa0, 0x28, 0xc1, 0x77, 0x49, 0x3a, 0xbf, 0x3d, 0xc2,
	0x01, 0x2e, 0x89, 0xfa, 0x4b, 0xa2, 0x9a, 0x18, 0x6b, 0x54, 0xb1, 0x89, 0x1c, 0xb9, 0x52, 0x45,
	0xb7, 0x9d, 0xf8, 0xfc, 0xe7, 0xed, 0xc4, 0xc7, 0x17, 0x43, 0xdc, 0xad, 0x59, 0x0c, 0x87, 0xb7,
	0xb0, 0x18, 0xe6, 0xbb, 0x03, 0x17, 0x43, 0x1d, 0x6d, 0xb2, 0x18, 0x62, 0x17, 0x0d, 0xbf, 0xcb,
	0x0e, 0xc7, 0x45, 0x53, 0x67, 0x12, 0x96, 0xb6, 0x52, 0xe0, 0xbb, 0x33, 0x22, 0xac, 0x44, 0xe7,
	0x0b, 0x95, 0x8b, 0x58, 0x1e, 0xbb, 0xc6, 0x4a, 0xd4, 0x81, 0x49, 0x5e, 0x91, 0x63, 0x1b, 0xd5,
	0x3f, 0xcd, 0x46, 0xe3, 0xa2, 0x59, 0xac, 0x06, 0x79, 0x14, 0x82, 0xff, 0xcc, 0xc8, 0xcc, 0xcb,
	0x36, 0xd6, 0xa7, 0x46, 0xe6, 0x8b, 0x25, 0x28, 0x7b, 0x6e, 0x7d, 0xea, 0x84, 0xa6, 0x2d, 0xc0,
	0x30, 0xc5, 0x91, 0x58, 0xc2, 0xf1, 0x7e, 0x77, 0x82, 0xb5, 0x28, 0x7f, 0x50, 0x27, 0xcb, 0xba,
	0x9a, 0xe6, 0x21, 0x38, 0xb1, 0xc8, 0x7e, 0x9f, 0x85, 0x6a, 0x99, 0x1f, 0xeb, 0xf1, 0x34, 0x0f,
	0x4d, 0xbf, 0x1d, 0x98, 0xa4, 0xdf, 0x1d, 0x1b, 0xd5, 0x7f, 0x13, 0x3b, 0x08, 0x3e, 0x2b, 0x60,
	0x50, 0x5a, 0xc6, 0xdd, 0x08, 0x7c, 0x4b, 0x86, 0x45, 0x22, 0xf1, 0x85, 0xa0, 0x35, 0xcd, 0x2b,
	0x2e, 0xc6, 0x70, 0xe2, 0xc8, 0x44, 0xe2, 0x14, 0x9e, 0xec, 0x9a, 0x2e, 0x42, 0xf0, 0x9f, 0x66,
	0x47, 0x38, 0x68, 0x27, 0x0a, 0xf2, 0x84, 0x43, 0x2b, 0x07, 0x4f, 0xe1, 0xe3, 0x01, 0x56, 0x6e,
	0x0b, 0x41, 0xeb, 0xac, 0xac, 0x36, 0xfe, 0x9d, 0xf7, 0x9a, 0x66, 0x6c, 0x5c, 0x62, 0x03, 0xd4,
	0xad, 0x20, 0xfb, 0xdf, 0xe8, 0xb1, 0x71, 0xc0, 0x8b, 0xbb, 0x71, 0xa9, 0x86, 0x41, 0x7a, 0x74,
	0x68, 0xa7, 0xba, 0x85, 0xe9, 0xd9, 0xb3, 0xbc, 0x5e, 0x0e, 0x03, 0x9c, 0xcc, 0x60, 0x9a, 0xce,
	0x7b, 0x83, 0x2a, 0x8c, 0x69, 0x7a, 0x85, 0x24, 0xb1, 0x77, 0xeb, 0x52, 0x34, 0xde, 0x89, 0x31,
	0x8e, 0xd1, 0x4d, 0xfb, 0x91, 0xee, 0xc3, 0x09, 0xe8, 0xc3, 0x14, 0xea, 0xc3, 0x42, 0xda, 0x8f,
	0x2a, 0xfd, 0x00, 0xdb, 0x8a, 0x85, 0xa0, 0xc5, 0x2b, 0x4d, 0x37, 0xee, 0x36, 0xdd, 0xc0, 0x44,
	0x89, 0x6d, 0x45, 0x97, 0x20, 0xf9, 0x9f, 0xf6, 0xd8, 0x3d, 0xdd, 0x5e, 0xa7, 0x8c, 0x55, 0x4a,
	0x58, 0x9d, 0xa7, 0x72, 0x35, 0x88, 0x93, 0x42, 0x4f, 0xc6, 0x6d, 0x30, 0x19, 0x70, 0x59, 0x5b,
	0xe0, 0xe0, 0xe2, 0xb5, 0x44, 0x65, 0xbf, 0x04, 0x58, 0x33, 0x33, 0xf2, 0xb2, 0xb6, 0x05, 0xba,
	0xe4, 0xb2, 0xd6, 0x1d, 0x4c, 0xd8, 0x0f, 0xd8, 0x58, 0xb6, 0xbc, 0xdc, 0x8c, 0xca, 0x3c, 0x8a,
	0x14, 0x6f, 0xba, 0x1d, 0xfa, 0x05, 0xc3, 0xb1, 0x38, 0x33, 0x73, 0x8a, 0x57, 0x69, 0xfe, 0x24,
	0x87, 0xc3, 0xc6, 0x21, 0xc3, 0x91, 0x2d, 0x2f, 0x23, 0x24, 0xff, 0x49, 0x76, 0x08, 0xc0, 0xfb,
	0x59, 0xa2, 0x5a, 0xb8, 0x03, 0x5a, 0x10, 0xf6, 0xff, 0x33, 0x33, 0xa7, 0xfa, 0x59, 0xa2, 0x1b,
	0xb8, 0x0b, 0x35, 0x60, 0x30, 0xa8, 0xfd, 0xff, 0xf2, 0xb2, 0x41, 0xa9, 0x77, 0x66, 0xbe, 0xf3,
	0x05, 0x75, 0x66, 0x7e, 0xaf, 0xc7, 0x0e, 0x6b, 0x3e, 0x85, 0xdc, 0xc3, 0xa6, 0x28, 0xe7, 0x55,
	0xbc, 0x6a, 0x2e, 0x2a, 0x83, 0xb8, 0x53, 0x80, 0x11, 0x8d, 0xaf, 0x0a, 0x89, 0xe7, 0xd7, 0x49,
	0x2b, 0xff, 0xba, 0xdb, 0xd1, 0xcb, 0xcf, 0x2a, 0xb8, 0xfe, 0xdb, 0xd9, 0x78, 0xf5, 0x04, 0xb8,
	0x6b, 0xf0, 0x09, 0x00, 0x9b, 0xae, 0xca, 0xfb, 0x1b, 0x8e, 0x64, 0xd0, 0x36, 0xd3, 0x3f, 0x94,
	0x5b, 0xec, 0xbe, 0xc9, 0x0e, 0xc9, 0xcb, 0xb8, 0x3a, 0xb9, 0x27, 0xef, 0x86, 0xb1, 0x7f, 0x2d,
	0x5f, 0x42, 0xe2, 0x0e, 0xae, 0x64, 0x00, 0x33, 0xc3, 0x16, 0x0a, 0x59, 0x41, 0x39, 0xc1, 0xf1,
	0xdf, 0x81, 0x34, 0x0a, 0xca, 0xf0, 0xb6, 0x15, 0x94, 0x51, 0x3b, 0xcd, 0xd7, 0x26, 0x1b, 0x20,
	0x28, 0x9e, 0xae, 0xa6, 0x90, 0x99, 0x95, 0x10, 0x55, 0xd5, 0x81, 0x4d, 0x63, 0x40, 0x06, 0x19,
	0x45, 0xc4, 0xff, 0x19, 0xe4, 0xc5, 0xad, 0xf0, 0x1d, 0xfe, 0xa9, 0xf7, 0x6c, 0xe2, 0x9f, 0x0a,
	0x39, 0xff, 0x68, 0x3f, 0x1d, 0x6e, 0xa9, 0x0f, 0xb9, 0xfb, 0x3b, 0xd8, 0x19, 0xf5, 0xce, 0xfe,
	0x40, 0xb2, 0xfe, 0x7b, 0x90, 0xf6, 0x43, 0x51, 0xd4, 0x51, 0xde, 0xc2, 0xc9, 0x93, 0x70, 0xf6,
	0x80, 0x3b, 0x16, 0xed, 0x9f, 0x0a, 0x13, 0x37, 0x57, 0x55, 0x6d, 0x54, 0xc9, 0x10, 0x77, 0xac,
	0xbe, 0x93, 0x4e, 0xe8, 0x7f, 0xca, 0xd1, 0x13, 0xb4, 0x85, 0xee, 0xb5, 0xbc, 0x00, 0x09, 0x15,
	0x60, 0xd5, 0x58, 0x03, 0x23, 0xcb, 0xc9, 0x5e, 0xaa, 0xe9, 0xa6, 0x7b, 0x4b, 0x4d, 0xf6, 0x6b,
	0x08, 0xf9, 0xff, 0xce, 0x63, 0x77, 0x57, 0x0c, 0xbe, 0xf9, 0xd2, 0x0c, 0x71, 0x77, 0xef, 0x83,
	0xee, 0xbe, 0xcc, 0xdd, 0x5d, 0x58, 0xfd, 0xa1, 0xe5, 0x0d, 0xfa, 0xc6, 0xea, 0x22, 0xb0, 0xe1,
	0x4c, 0x46, 0xec, 0x4d, 0x3b, 0x30, 0x60, 0x0d, 0xd8, 0x54, 0xfd, 0xa7, 0xd9, 0xbe, 0xe5, 0x76,
	0xc6, 0xf9, 0x2a, 0x76, 0x52, 0x98, 0xaa, 0xc9, 0xcb, 0x74, 0x7a, 0xf1, 0xf2, 0xe2, 0xb9, 0x0b,
	0xd1, 0x8a, 0x90, 0x53, 0xf5, 0x4f, 0xa4, 0xe6, 0x40, 0xc4, 0x88, 0x9c, 0x2a, 0xca, 0x41, 0xe9,
	0xf6, 0x8d, 0x1e, 0x3b, 0x14, 0x27, 0x25, 0xbf, 0x93, 0x76, 0x83, 0x8c, 0xf8, 0x1a, 0x34, 0xdc,
	0xed, 0xce, 0x03, 0xf4, 0x42, 0x90, 0x69, 0xb7, 0x2c, 0x5c, 0x82, 0xdc, 0xb2, 0x2c, 0xb2, 0xe4,
	0x90, 0x88, 0x31, 0x0a, 0x28, 0x9a, 0xe1, 0x28, 0xe4, 0xb2, 0xb8, 0x3a, 0x3e, 0xb1, 0xab, 0xc0,
	0xfd, 0xee, 0xae, 0x2c, 0x28, 0x1c, 0x71, 0x84, 0x6a, 0x45, 0x73, 0xb5, 0x1c, 0x29, 0x9a, 0x9d,
	0x0d, 0x91, 0x03, 0xa5, 0x5b, 0x45, 0xf7, 0x3f, 0xe0, 0xb1, 0x71, 0x12, 0x74, 0x11, 0xba, 0xf7,
	0xe1, 0x11, 0x67, 0xe0, 0x2f, 0x6b, 0x4b, 0x65, 0x41, 0x57, 0x3b, 0xf9, 0xd1, 0x32, 0xe4, 0xe4,
	0x57, 0x21, 0x4e, 0x98, 0x7a, 0x42, 0xd1, 0xfc, 0x8f, 0x78, 0xec, 0xb0, 0xde, 0x37, 0x68, 0xbc,
	0xbe, 0x6d, 0x84, 0x66, 0x02, 0x75, 0x76, 0xc8, 0x8c, 0x16, 0x48, 0xcd, 0x76, 0x29, 0x3a, 0xee,
	0x1c, 0x4d, 0x10, 0xa9, 0x39, 0xb1, 0x51, 0x61, 0x3d, 0xd9, 0xfe, 0x7e, 0xdf, 0x3e, 0x70, 0x3d,
	0xbd, 0x00, 0x6e, 0x7e, 0xef, 0xf1, 0xd8, 0x58, 0xc5, 0x11, 0xf6, 0x3b, 0x44, 0x2f, 0xee, 0x19,
	0xc0, 0x09, 0xb4, 0xdb, 0xeb, 0x57, 0xea, 0xa3, 0x11, 0x7b, 0xbb, 0xde, 0x4d, 0x8f, 0x5f, 0x97,
	0x8f, 0xeb, 0xc1, 0x9c, 0xba, 0xb6, 0xf2, 0x79, 0x52, 0xee, 0x7f, 0x78, 0x9e, 0x3e, 0x32, 0x70,
	0x9e, 0xa4, 0x55, 0x91, 0x35, 0x4f, 0x76, 0x29, 0x9a, 0x27, 0x47, 0x13, 0x64, 0x9e, 0x72, 0x1b,
	0xd5, 0xff, 0xd9, 0xcd, 0x7c, 0xf7, 0x3e, 0xea, 0x76, 0x6e, 0x96, 0x3d, 0xdc, 0x0e, 0x2e, 0x7b,
	0xf8, 0xed, 0xe7, 0x3b, 0x47, 0x9c, 0x6f, 0x3f, 0xea, 0x54, 0xba, 0xe1, 0xb7, 0x9f, 0x8f, 0xd5,
	0xf9, 0x30, 0x7d, 0xd7, 0x08, 0xcd, 0x24, 0x41, 0x1b, 0xbc, 0x45, 0xae, 0x4b, 0x3f, 0xef, 0xb1,
	0x46, 0x18, 0x94, 0x41, 0xb3, 0x15, 0x25, 0x5c, 0x5a, 0x83, 0x37, 0x0c, 0x99, 0x6e, 0xbf, 0x9a,
	0x1e, 0x58, 0xc7, 0xf8, 0x9e, 0x0b, 0xca, 0x60, 0x16, 0x30, 0xe6, 0x11, 0x82, 0x10, 0x7e, 0x6a,
	0xea, 0x2a, 0x09, 0x8f, 0x37, 0x6f, 0x96, 0x1c, 0x7c, 0xe1, 0x40, 0xb2, 0x7e, 0xce, 0xc6, 0xa4,
	0x6e, 0xc8, 0xf4, 0xfa, 0x0b, 0x96, 0x8d, 0xbd, 0x50, 0x28, 0x89, 0xad, 0x29, 0xff, 0xaf, 0xd8,
	0xd8, 0xdb, 0x44, 0xc8, 0xd6, 0x5c, 0x21, 0x48, 0x90, 0x7e, 0x7c, 0x25, 0xce, 0xa3, 0xab, 0x41,
	0xa7, 0xd3, 0xcc, 0x7b, 0x1d, 0x87, 0x45, 0xbb, 0xf6, 0x2b, 0x79, 0x44, 0xc2, 0x5d, 0xe8, 0xa9,
	0xf4, 0xe3, 0xa4, 0xa4, 0x92, 0x7e, 0xbc, 0x86, 0x2e, 0xd1, 0xfd, 0xaf, 0x38, 0x28, 0xf8, 0x6f,
	0x67, 0x87, 0x41, 0x84, 0xb4, 0x52, 0xf8, 0xfd, 0x85, 0xe8, 0xcf, 0x18, 0xf2, 0x5e, 0xba, 0x0a,
	0x69, 0xf7, 0xbe, 0x66, 0x63, 0x7d, 0x6a, 0x4c, 0xff, 0x32, 0xfd, 0x38, 0xa9, 0x95, 0x61, 0x57,
	0x07, 0xe4, 0xef, 0x1b, 0x5b, 0xb1, 0x30, 0xc1, 0x48, 0x1e, 0x62, 0x8f, 0x88, 0xc0, 0x11, 0x55,
	0x9f, 0xb4, 0x3f, 0xb7, 0x8c, 0xe4, 0xcf, 0xa4, 0x45, 0x09, 0x16, 0x84, 0xca, 0x7b, 0x0c, 0x8c,
	0xe4, 0x2b, 0xa5, 0x15, 0x23, 0xf9, 0x41, 0x8d, 0x10, 0xf1, 0x6f, 0xb5, 0x86, 0xd4, 0x00, 0x07,
	0xab, 0xbf, 0xbc, 0xd5, 0x0e, 0x56, 0x03, 0x9d, 0x57, 0xfe, 0xea, 0xc5, 0x74, 0x5e, 0x19, 0x9c,
	0x0b, 0xe6, 0x8b, 0x2f, 0x72, 0x2e, 0x18, 0xf0, 0x73, 0x41, 0xb1, 0x04, 0x4c, 0xcf, 0xfe, 0xbb,
	0xe5, 0xe7, 0xa2, 0xad, 0x9b, 0x85, 0x9f, 0x8b, 0xf9, 0x59, 0xf1, 0x73, 0x71, 0x91, 0x23, 0x67,
	0x61, 0x66, 0xe3, 0x6e, 0xf9, 0x81, 0xff, 0xb9, 0x89, 0x2f, 0xff, 0x5c, 0xaf, 0xff, 0x63, 0xe2,
	0x45, 0xce, 0xf5, 0xfa, 0x41, 0x8f, 0x1d, 0x09, 0x5a, 0xad, 0xa8, 0x28, 0xb4, 0x32, 0xb6, 0x13,
	0x17, 0x65, 0x31, 0xf9, 0x8d, 0x63, 0xd0, 0xb3, 0xe3, 0xda, 0xe3, 0x16, 0x80, 0xa4, 0xd6, 0x0e,
	0xb4, 0x22, 0x70, 0x86, 0x56, 0x8a, 0xd1, 0xdc, 0xbb, 0xe8, 0x92, 0xbd, 0x1b, 0x54, 0x90, 0xfd,
	0x94, 0x1d, 0xd4, 0x5e, 0xbb, 0x59, 0x9a, 0x76, 0x8a, 0xc9, 0x6f, 0x1a, 0xa3, 0x91, 0xd9, 0xa5,
	0xb7, 0x2f, 0xf8, 0xd5, 0x81, 0xf2, 0x17, 0x15, 0x14, 0x46, 0xf9, 0x4b, 0xa9, 0x10, 0xe5, 0xaf,
	0xf4, 0xfb, 0x05, 0x04, 0x3f, 0x67, 0x07, 0x49, 0x88, 0x97, 0x62, 0xf2, 0x9d, 0x63, 0xf4, 0xb4,
	0xc1, 0xee, 0x26, 0x33, 0xaf, 0x86, 0x08, 0x36, 0xa8, 0x04, 0x35, 0x49, 0xe9, 0xd0, 0x00, 0x36,
	0x18, 0xc3, 0x7f, 0x3b, 0x1b, 0xc7, 0x4e, 0xac, 0xe2, 0x3b, 0xdf, 0x35, 0x46, 0x97, 0x82, 0x71,
	0x81, 0x85, 0x4f, 0x85, 0xeb, 0x0a, 0x2d, 0x43, 0xd7, 0x95, 0x0a, 0x39, 0x72, 0x5d, 0x31, 0xfe,
	0xb0, 0xe2, 0x9b, 0xdf, 0xe1, 0xb1, 0x71, 0x3b, 0x0a, 0x46, 0x31, 0xf9, 0xee, 0x31, 0x1a, 0xa2,
	0xd8, 0x32, 0xa6, 0x07, 0x5f, 0xeb, 0x31, 0xab, 0xb0, 0xa0, 0x6a, 0x30, 0x42, 0x90, 0x1c, 0x6d,
	0x56, 0x48, 0x8d, 0xa2, 0xf1, 0x03, 0x1e, 0x9b, 0xa8, 0xb9, 0x41, 0x6f, 0x47, 0xdb, 0x87, 0x7f,
	0xe6, 0xb1, 0x13, 0xf5, 0x17, 0xef, 0xed, 0xd8, 0x63, 0x64, 0x11, 0x53, 0x7b, 0x3f, 0xdf, 0x8e,
	0xfd, 0xfe, 0x92, 0x09, 0x07, 0xed, 0xbc, 0xb8, 0x6f, 0x47, 0x8f, 0x8e, 0xb3, 0xc4, 0xa3, 0xc3,
	0xd8, 0x6b, 0x25, 0xc2, 0xfb, 0xb4, 0xb8, 0x3e, 0x0f, 0x8e, 0x0f, 0x0c, 0xb1, 0x3b, 0x07, 0x6b,
	0x0a, 0xb6, 0xe3, 0x18, 0x3c, 0x4e, 0xc6, 0xe0, 0x2e, 0xf7, 0x89, 0x26, 0xbe, 0xe0, 0xfa, 0x86,
	0xa3, 0xba, 0xf5, 0xb6, 0xbb, 0x87, 0xd2, 0x67, 0x3d, 0x76, 0xdb, 0x00, 0x7d, 0xc6, 0x76, 0xec,
	0xf2, 0xbb, 0x2a, 0x6b, 0xce, 0xd6, 0x6f, 0x6c, 0xc7, 0x35, 0xb7, 0x48, 0xd6, 0xdc, 0x71, 0xeb,
	0xe4, 0xba, 0x91, 0xc5, 0xf6, 0x13, 0x9e, 0x76, 0x98, 0xdd, 0x44, 0xb7, 0xb2, 0xcd, 0xad, 0x09,
	0x89, 0xae, 0x65, 0x3b, 0xf6, 0xf5, 0x47, 0x3d, 0x36, 0xb5, 0x89, 0x9a, 0x66, 0x3b, 0x76, 0xfb,
	0xf7, 0xc6, 0x75, 0xa2, 0x1c, 0xed, 0x29, 0xbe, 0x63, 0x06, 0xb9, 0x63, 0x06, 0xb9, 0x63, 0x06,
	0x79, 0xeb, 0x52, 0x39, 0x4e, 0x39, 0x62, 0x3a, 0x74, 0x82, 0x56, 0xa6, 0xad, 0x19, 0x44, 0x82,
	0xe3, 0x25, 0x14, 0x62, 0x4b, 0xef, 0xd5, 0xb3, 0x41, 0x2b, 0x33, 0x56, 0x0d, 0x7f, 0xa7, 0x36,
	0x46, 0x04, 0xa6, 0xe7, 0x8a, 0xb1, 0xe5, 0x22, 0xe8, 0x7f, 0xcc, 0x63, 0x77, 0x39, 0x68, 0x95,
	0x79, 0x2f, 0xb9, 0x22, 0x0a, 0xe2, 0x10, 0x0c, 0x25, 0x47, 0x67, 0x2e, 0xba, 0x3a, 0x77, 0x91,
	0x03, 0xf2, 0x5f, 0x30, 0x0c, 0x0f, 0xd4, 0x76, 0x8e, 0x10, 0x1c, 0xd8, 0x3b, 0x43, 0x31, 0xf4,
	0xdf, 0x6a, 0x72, 0x60, 0x62, 0x5a, 0x7c, 0xc1, 0x1d, 0x84, 0x3e, 0xe1, 0x2c, 0x97, 0x86, 0x82,
	0x58, 0x7a, 0xf7, 0xd7, 0x77, 0xc6, 0x5a, 0x86, 0x47, 0xfa, 0x0e, 0x0a, 0x75, 0xd3, 0xd6, 0x2b,
	0xa2, 0xbc, 0xd9, 0xca, 0xa3, 0xa0, 0x8c, 0x42, 0x69, 0x06, 0xe9, 0x9c, 0xb6, 0x4b, 0x45, 0x94,
	0xcf, 0x0a, 0xb0, 0x81, 0xd3, 0x86, 0xe9, 0x0d, 0x1c, 0x18, 0x44, 0xd0, 0xff, 0x81, 0x01, 0x11,
	0x4f, 0xff, 0x4a, 0xb8, 0xb1, 0xbc, 0xa2, 0x2e, 0x0c, 0xc9, 0x8b, 0x10, 0xea, 0xf4, 0x43, 0xce,
	0x50, 0xa7, 0x5f, 0xdc, 0xeb, 0x7c, 0xc3, 0x32, 0x1d, 0x7d, 0xe1, 0x62, 0x9c, 0x7e, 0x67, 0x4d,
	0x6c, 0xcc, 0xbf, 0x76, 0xfb, 0x25, 0xe9, 0x2e, 0xdd, 0x82, 0xa0, 0x98, 0x38, 0xb9, 0xea, 0xdf,
	0xb8, 0x93, 0xab, 0x9a, 0x75, 0x7a, 0xc3, 0xef, 0x52, 0xbf, 0xbc, 0x79, 0xc4, 0xc0, 0xbf, 0x15,
	0x8d, 0x3f, 0x58, 0xd7, 0xf8, 0x76, 0xca, 0xc8, 0xf4, 0xed, 0x43, 0xec, 0xe4, 0x56, 0xd6, 0xf9,
	0x97, 0x51, 0xcc, 0x98, 0xcb, 0x59, 0xdb, 0xc4, 0xe6, 0x08, 0xf2, 0xa0, 0x1b, 0x95, 0x51, 0x7e,
	0x9d, 0xf7, 0xf2, 0x1f, 0xf1, 0xf4, 0x1d, 0xa9, 0x66, 0x57, 0x6d, 0x73, 0x3d, 0x50, 0xed, 0xc6,
	0xdb, 0xae, 0x19, 0xde, 0xdd, 0x3b, 0x74, 0x3b, 0xf6, 0xf6, 0x67, 0x3c, 0xf6, 0xb2, 0xad, 0x6f,
	0xe9, 0xed, 0xf8, 0x05, 0x9f, 0x3c, 0xcc, 0x0e, 0x10, 0x6f, 0xc2, 0x9d, 0x5b, 0xcd, 0xce, 0xad,
	0x66, 0xe7, 0x56, 0x73, 0x8b, 0x6e, 0x35, 0xef, 0xf7, 0xd8, 0x6d, 0x96, 0xb3, 0x6e, 0x98, 0x85,
	0x57, 0xac, 0x1b, 0xcd, 0x59, 0x64, 0xca, 0x29, 0x36, 0xe9, 0xdc, 0xe2, 0xdc, 0xa3, 0xe6, 0x3a,
	0xf3, 0x0a, 0xa7, 0xd7, 0x2f, 0x26, 0xe4, 0xb2, 0xe5, 0x94, 0x94, 0xb2, 0xf0, 0x8a, 0xba, 0xc7,
	0x7c, 0x13, 0x7a, 0xb4, 0x94, 0x44, 0xe2, 0x4c, 0xe5, 0x0b, 0x91, 0x17, 0x18, 0xfc, 0x36, 0x29,
	0x28, 0xcc, 0x2f, 0x4a, 0xe7, 0xb3, 0xea, 0xdb, 0x64, 0x85, 0x88, 0xeb, 0x6d, 0x52, 0x52, 0xc9,
	0x24, 0x15, 0xbf, 0x6b, 0xb2, 0x23, 0x4b, 0x7c, 0x74, 0x57, 0xc1, 0x29, 0x90, 0x05, 0xa2, 0x5c,
	0x4d, 0x27, 0x9d, 0x2d, 0xdb, 0xab, 0x6a, 0xbc, 0x6f, 0xa3, 0xf2, 0x29, 0x70, 0xd8, 0x14, 0xca,
	0x14, 0x9a, 0xf7, 0x38, 0x7d, 0xb0, 0x5f, 0x40, 0x93, 0xc2, 0x77, 0x7b, 0x10, 0xe8, 0xb2, 0xd9,
	0xea, 0xf4, 0x0a, 0x9d, 0x73, 0x43, 0x5e, 0x46, 0x1a, 0xce, 0xce, 0x2c, 0xf5, 0x96, 0x67, 0x05,
	0xb0, 0xb6, 0x99, 0x23, 0x45, 0x34, 0xf8, 0x25, 0x21, 0x6c, 0x07, 0xbf, 0x44, 0x48, 0x7e, 0x80,
	0x24, 0x68, 0x79, 0xc7, 0xb8, 0xcd, 0xd9, 0xfe, 0x8d, 0x8b, 0xcf, 0xdf, 0x5d, 0x17, 0x17, 0xfc,
	0xaf, 0xdd, 0x77, 0x1a, 0xd1, 0xde, 0x2d, 0x8a, 0x06, 0x5e, 0x6f, 0xd8, 0xf2, 0x6f, 0x6f, 0xb5,
	0x61, 0xcb, 0x60, 0xf3, 0x91, 0x5f, 0x7e, 0xb1, 0xcd, 0x47, 0x3e, 0xeb, 0xb1, 0x3b, 0xb4, 0x47,
	0x86, 0x33, 0x42, 0xf5, 0xaf, 0x58, 0x11, 0xaa, 0x95, 0x6f, 0x87, 0x1d, 0xa1, 0xda, 0x51, 0x5e,
	0x89, 0x50, 0x3d, 0xb0, 0x25, 0x12, 0xa1, 0x3a, 0xab, 0xa5, 0xb6, 0x59, 0x90, 0x83, 0xdf, 0xdf,
	0x5e, 0x41, 0x0e, 0x3e, 0x38, 0xa4, 0xdf, 0x95, 0x5c, 0xfc, 0x67, 0x3b, 0x5e, 0xc7, 0x9e, 0x20,
	0xd7, 0xb1, 0x93, 0x9b, 0x71, 0xd1, 0x1b, 0x7e, 0x19, 0x74, 0xb0, 0xc0, 0xed, 0x28, 0x64, 0x7f,
	0xbf, 0xc7, 0x0e, 0x3b, 0x98, 0xe6, 0x76, 0xec, 0x2a, 0xba, 0xed, 0xd6, 0xf0, 0xdb, 0xed, 0xd8,
	0xeb, 0x5f, 0x1a, 0x61, 0xa3, 0x8f, 0x47, 0xcb, 0xbd, 0xf8, 0x5c, 0x1a, 0xee, 0xc4, 0xbb, 0xda,
	0xb9, 0xc1, 0xec, 0xdc, 0x60, 0x6e, 0xd5, 0x0d, 0xa6, 0x60, 0x47, 0xaf, 0xf2, 0x8d, 0x27, 0x0c,
	0x9c, 0xd1, 0x75, 0x41, 0x04, 0xa7, 0x00, 0x89, 0x48, 0xef, 0x4c, 0x7c, 0x55, 0x90, 0xeb, 0xdf,
	0x89, 0x4c, 0x24, 0xa2, 0xab, 0x1a, 0x5b, 0x5f, 0x11, 0x70, 0x8a, 0xfd, 0x2f, 0x58, 0x29, 0xf6,
	0x75, 0x63, 0x37, 0x2c, 0x98, 0x42, 0x9a, 0x77, 0x8b, 0xcc, 0x76, 0x64, 0x7a, 0x3f, 0xe8, 0xb1,
	0x83, 0xd3, 0xad, 0xce, 0xa9, 0xa4, 0xcc, 0xa5, 0xd7, 0x1c, 0xdf, 0x49, 0x41, 0x4b, 0x18, 0xbc,
	0x4f, 0x7a, 0x96, 0x01, 0x65, 0xab, 0xa3, 0xa3, 0xca, 0xc2, 0x98, 0x4c, 0xcf, 0x9e, 0xe5, 0x05,
	0x66, 0x4c, 0x14, 0x26, 0x19, 0x93, 0x40, 0xa0, 0xf9, 0xd3, 0x6c, 0x6f, 0xb8, 0x96, 0x04, 0xdd,
	0xb8, 0x05, 0xbc, 0x6d, 0x64, 0xe6, 0x25, 0x9c, 0xc6, 0x9c, 0x28, 0x32, 0xcc, 0x41, 0xc2, 0x10,
	0x12, 0xb2, 0xac, 0xf1, 0x9e, 0x61, 0xb6, 0x0f, 0xf5, 0xc2, 0x6f, 0xb3, 0x7d, 0x41, 0xcb, 0xe4,
	0x96, 0xf5, 0x68, 0x56, 0xcf, 0xe9, 0x96, 0xca, 0xe0, 0x0a, 0x5d, 0x86, 0xcd, 0x62, 0xca, 0x10,
	0x9b, 0x6e, 0x39, 0x93, 0xc3, 0xb2, 0x40, 0xc3, 0xfa, 0xf3, 0x6c, 0x34, 0x8c, 0xf3, 0x08, 0x0a,
	0xa0, 0xf7, 0xa3, 0x33, 0x2f, 0xdf, 0x58, 0x9f, 0x1a, 0x9d, 0x53, 0x85, 0x26, 0xfa, 0x81, 0x86,
	0xc3, 0xb4, 0x0c, 0xb6, 0xff, 0x56, 0x76, 0xa8, 0x1b, 0x94, 0xad, 0xd5, 0x66, 0x2b, 0x4d, 0xc2,
	0x18, 0x08, 0x0e, 0x53, 0x57, 0xcc, 0x05, 0x5e, 0x3d, 0xab, 0x6a, 0xa1, 0xef, 0xaf, 0x15, 0x5e,
	0xf3, 0xb8, 0xdc, 0x38, 0x54, 0x59, 0xe4, 0x2c, 0xa7, 0x79, 0x8c, 0xe3, 0x9f, 0x66, 0xa3, 0xe0,
	0xca, 0x00, 0x0b, 0x71, 0x17, 0x7c, 0x07, 0x04, 0x71, 0xe0, 0x23, 0x2a, 0x17, 0xa3, 0xfc, 0x0c,
	0x0d, 0x46, 0x82, 0x38, 0xf0, 0x52, 0xce, 0x3d, 0x1a, 0x11, 0x1b, 0x13, 0x43, 0x39, 0x5d, 0x2c,
	0x06, 0xe5, 0x2a, 0xcc, 0xc6, 0x63, 0x6c, 0x4f, 0x74, 0x2d, 0x0b, 0x92, 0x50, 0x4e, 0x84, 0xbe,
	0xdf, 0x4c, 0x9b, 0xdc, 0xbe, 0xc0, 0x52, 0x4e, 0x01, 0x94, 0x61, 0x29, 0x02, 0x8b, 0xb0, 0x14,
	0x51, 0xd4, 0x78, 0xff, 0x10, 0x3b, 0x2c, 0xda, 0x99, 0x4d, 0xbb, 0xdd, 0x5e, 0x12, 0x97, 0x60,
	0x96, 0xe3, 0x9f, 0x65, 0xc3, 0x41, 0xa8, 0xda, 0xd1, 0xe6, 0x3b, 0x1a, 0x46, 0x37, 0x37, 0xb5,
	0xb1, 0x3e, 0x35, 0x3c, 0x1d, 0xf2, 0xb6, 0x8e, 0xe8, 0x38, 0x36, 0xb8, 0x21, 0x4e, 0xc6, 0x7f,
	0x23, 0xdb, 0x93, 0x47, 0xdd, 0xb4, 0x1f, 0xc1, 0xd4, 0x0e, 0x24, 0x08, 0xfd, 0xbf, 0x00, 0xc0,
	0xa6, 0xff, 0x02, 0x99, 0xf4, 0x5f, 0x14, 0xf1, 0x7e, 0x16, 0x51, 0x29, 0x27, 0x78, 0xb3, 0x7e,
	0x2e, 0x45, 0xa5, 0xe9, 0x67, 0x11, 0x91, 0xc5, 0xc8, 0xc9, 0x34, 0x3e, 0x3a, 0xc4, 0x8e, 0x89,
	0xd1, 0x38, 0x75, 0xad, 0xa4, 0x03, 0x72, 0x1e, 0x0f, 0x88, 0x76, 0x9f, 0xc2, 0x60, 0xd7, 0x39,
	0x26, 0x4f, 0x58, 0x63, 0x32, 0x98, 0xe6, 0x75, 0x0e, 0xcb, 0x79, 0x3c, 0x2c, 0x5b, 0xe8, 0xed,
	0xa6, 0x23, 0xf3, 0x89, 0x3d, 0x9c, 0x91, 0xe1, 0xed, 0xee, 0xbf, 0x8e, 0xed, 0x0e, 0x3a, 0x51,
	0x2e, 0xb8, 0xc2, 0xc8, 0xcc, 0x3d, 0x1b, 0xeb, 0x53, 0xbb, 0xa7, 0x79, 0xc1, 0x73, 0xeb, 0x53,
	0xc7, 0x94, 0xa9, 0x77, 0x94, 0x13, 0x5a, 0x02, 0xc3, 0x7f, 0x9c, 0x1d, 0x08, 0xb2, 0xac, 0xa3,
	0x43, 0x3f, 0x48, 0xee, 0x0b, 0x61, 0x76, 0xa6, 0x79, 0x85, 0xf4, 0x61, 0x31, 0x61, 0x76, 0x08,
	0x38, 0xb5, 0x19, 0x47, 0xf0, 0x10, 0x89, 0x49, 0x64, 0x4e, 0xb5, 0x8d, 0x9e, 0x25, 0xe7, 0x16,
	0x91, 0x98, 0x00, 0xc4, 0x32, 0x98, 0x46, 0x91, 0x98, 0xdc, 0x14, 0x68, 0x24, 0x26, 0x17, 0x09,
	0x2e, 0xf2, 0xb5, 0x83, 0x32, 0xba, 0xaa, 0x44, 0xbe, 0x5d, 0x46, 0xe4, 0x3b, 0x2d, 0xca, 0xa9,
	0xc8, 0x87, 0x81, 0x89, 0xc8, 0xd7, 0x36, 0xd0, 0x7e, 0xcc, 0xfc, 0xaa, 0x13, 0x10, 0xc8, 0x6f,
	0x23, 0x22, 0x45, 0xaa, 0xed, 0x44, 0x64, 0xd2, 0x6c, 0x55, 0xf1, 0x88, 0xe9, 0xb7, 0xed, 0x32,
	0xe4, 0x3f, 0xc0, 0x86, 0x3b, 0x69, 0x1b, 0x04, 0xbc, 0x11, 0xb1, 0x30, 0xce, 0xa6, 0x6d, 0xb3,
	0x30, 0x3a, 0x69, 0x9b, 0x2c, 0x8c, 0x4e, 0xda, 0xf6, 0x03, 0x36, 0xda, 0x8d, 0xf3, 0x3c, 0xcd,
	0x9b, 0x65, 0x0a, 0x32, 0x1c, 0xce, 0x93, 0x0c, 0x15, 0x62, 0xd9, 0xc0, 0x5a, 0x03, 0x56, 0x28,
	0x4a, 0xe1, 0x90, 0x95, 0xac, 0x50, 0x13, 0x20, 0xac, 0xb0, 0x2b, 0xe1, 0xfc, 0x47, 0x19, 0x7b,
	0x3a, 0x2d, 0x9a, 0xe2, 0xb4, 0x90, 0x92, 0xde, 0x2b, 0xf8, 0xe1, 0xf0, 0x58, 0x5a, 0x4c, 0xab,
	0xc3, 0xe1, 0x36, 0xe3, 0xfb, 0x1a, 0x54, 0x4f, 0x87, 0xa7, 0x15, 0x24, 0x5f, 0x7a, 0x45, 0xdc,
	0xcd, 0x3a, 0x91, 0xa2, 0x27, 0x04, 0x3d, 0x58, 0x7a, 0x4b, 0x50, 0xa1, 0x49, 0xca, 0xa5, 0x47,
	0xc0, 0xc9, 0xd2, 0x2b, 0x10, 0x7c, 0xe3, 0x97, 0x87, 0x15, 0xc7, 0xbe, 0x94, 0x85, 0x41, 0x29,
	0xce, 0xcf, 0x37, 0xb1, 0xbd, 0x41, 0xd1, 0xcc, 0x82, 0x72, 0x55, 0x72, 0x8e, 0x49, 0x7a, 0x76,
	0x1a, 0xe6, 0x2e, 0x04, 0x79, 0xf1, 0xdb, 0x9c, 0xd5, 0x12, 0x99, 0x6c, 0xf1, 0x00, 0x60, 0xfc,
	0x15, 0x36, 0xda, 0x52, 0x9b, 0x59, 0xb2, 0x90, 0xdb, 0x28, 0x71, 0xc2, 0xc0, 0xc4, 0x71, 0xaa,
	0x8b, 0xcc, 0xe0, 0x6b, 0x22, 0x64, 0xc0, 0x74, 0xa9, 0xdf, 0x63, 0xfb, 0xa3, 0x6b, 0xa5, 0x69,
	0x4a, 0xf0, 0x94, 0x3b, 0x69, 0x53, 0x36, 0xbb, 0x9c, 0x79, 0x40, 0x46, 0xcc, 0x6a, 0xa1, 0x06,
	0xef, 0xd0, 0x11, 0xb3, 0x9c, 0x6d, 0x92, 0x66, 0xf8, 0xa4, 0x77, 0xd2, 0x56, 0xd0, 0x69, 0x66,
	0x5c, 0xec, 0xda, 0x05, 0x77, 0x35, 0x98, 0xf4, 0xb3, 0xbc, 0x74, 0x51, 0xc8, 0x5e, 0xb7, 0xa9,
	0x75, 0xa9, 0x00, 0xc9, 0x37, 0x74, 0x14, 0x24, 0x5f, 0xd7, 0xdd, 0x28, 0x84, 0x3d, 0x33, 0x2c,
	0xd6, 0xf5, 0x42, 0x84, 0xd8, 0x73, 0x97, 0x6a, 0xdf, 0x39, 0x6c, 0x63, 0x91, 0x1d, 0x92, 0xa2,
	0xec, 0x23, 0x41, 0x37, 0xee, 0xc4, 0x51, 0xe1, 0x3f, 0xcc, 0xf6, 0xac, 0xf0, 0xff, 0xd7, 0xa4,
	0x84, 0x09, 0x3c, 0x19, 0x6a, 0xd7, 0x0c, 0x4f, 0x16, 0x10, 0xf4, 0xe6, 0x05, 0x45, 0x8d, 0xdf,
	0xe5, 0xb2, 0x95, 0x20, 0x09, 0x6b, 0xe3, 0x09, 0x76, 0x90, 0xba, 0x8d, 0x4b, 0xb2, 0xe0, 0xc8,
	0x42, 0xac, 0xb2, 0x8d, 0x23, 0x0b, 0x45, 0x20, 0x8e, 0x2c, 0xc4, 0xc5, 0x9c, 0x13, 0xa7, 0x26,
	0x19, 0x52, 0xa8, 0x02, 0xe2, 0xe4, 0x91, 0xd9, 0x10, 0xa7, 0x08, 0x84, 0x38, 0x31, 0xdf, 0xe0,
	0x72, 0x88, 0xc8, 0xc3, 0x24, 0x17, 0x83, 0x4f, 0xd3, 0x3b, 0x99, 0x03, 0x4b, 0xfc, 0x36, 0x83,
	0x23, 0xb0, 0xc8, 0xe0, 0x88, 0x22, 0xbf, 0xc5, 0xf6, 0xc9, 0xbc, 0x4f, 0x20, 0x68, 0xee, 0xa2,
	0xfa, 0x5b, 0x44, 0x57, 0xc4, 0xe9, 0x85, 0xdf, 0x54, 0xc8, 0x44, 0xe8, 0x34, 0x4e, 0xaf, 0x86,
	0xf5, 0x9b, 0xec, 0x90, 0xe5, 0x92, 0x25, 0xaf, 0xc1, 0x20, 0xfd, 0x51, 0x23, 0x57, 0x23, 0xfd,
	0x59, 0x28, 0x34, 0x1b, 0x37, 0xc1, 0x69, 0x74, 0xd8, 0xfe, 0xe9, 0x4e, 0x90, 0x77, 0xa7, 0x93,
	0x10, 0x1a, 0xfc, 0x3a, 0x36, 0x12, 0x24, 0xa1, 0x92, 0x9d, 0xc9, 0x1d, 0x08, 0xe0, 0x4e, 0x5d,
	0xcb, 0xf8, 0x72, 0x88, 0xd3, 0x44, 0xca, 0xfb, 0x02, 0x0f, 0xc9, 0xfb, 0x12, 0x9b, 0xca, 0xfb,
	0x02, 0xaa, 0xf1, 0xcb, 0x43, 0xec, 0x90, 0x45, 0xc6, 0x3f, 0xc5, 0x46, 0xd2, 0x2c, 0xca, 0x83,
	0x24, 0x7c, 0x40, 0x2e, 0xa7, 0x97, 0x72, 0x9e, 0x7b, 0x5e, 0x96, 0x19, 0xca, 0x0a, 0x8a, 0xb0,
	0x5c, 0x55, 0xc8, 0x3b, 0x2e, 0xff, 0x7f, 0x50, 0xf2, 0x96, 0xa3, 0xa4, 0xe3, 0x92, 0xde, 0x83,
	0x84, 0xfa, 0x83, 0x15, 0xea, 0x0f, 0xba, 0xa8, 0x3f, 0xc8, 0x85, 0x7d, 0xf8, 0x5f, 0xcb, 0xe6,
	0x52, 0xd8, 0x3f, 0xaf, 0x0a, 0x0d, 0x77, 0xd2, 0x70, 0x64, 0x67, 0xeb, 0x52, 0x4e, 0xaa, 0x1f,
	0xe4, 0x71, 0xb0, 0xdc, 0x89, 0x0a, 0xa9, 0x11, 0x01, 0x52, 0x97, 0x55, 0xa1, 0x21, 0xa5, 0xe1,
	0x08, 0x29, 0x5d, 0xda, 0xf8, 0x9c, 0xc7, 0x0e, 0x90, 0x8f, 0xe3, 0x3c, 0xe8, 0xa9, 0x22, 0x4d,
	0x9a, 0xfd, 0xa0, 0xd3, 0x8b, 0xe4, 0x70, 0x02, 0x0f, 0x7a, 0xc3, 0xd2, 0xf9, 0x73, 0xa0, 0xa0,
	0x32, 0x3c, 0xc8, 0x00, 0x12, 0xf2, 0xbc, 0x18, 0x20, 0xf9, 0xc1, 0xd3, 0xeb, 0x47, 0xcd, 0xa0,
	0x2c, 0xf3, 0x78, 0xb9, 0x57, 0x46, 0x72, 0x43, 0xc2, 0xc1, 0x73, 0xa9, 0x1f, 0x4d, 0xab, 0x72,
	0x73, 0xf0, 0x10, 0x70, 0xc2, 0x29, 0x7b, 0x08, 0xbe, 0x11, 0xb2, 0x7d, 0xa2, 0xdb, 0x39, 0xac,
	0xb9, 0x4b, 0x6c, 0x6f, 0x9a, 0xe3, 0x25, 0x77, 0x84, 0xcc, 0x9c, 0x5c, 0x62, 0xe2, 0xb8, 0x11,
	0x28, 0xe6, 0xb8, 0x91, 0x88, 0x64, 0x83, 0xa6, 0x00, 0xd3, 0xf8, 0xa2, 0xc7, 0x7c, 0x13, 0x77,
	0x72, 0x31, 0x15, 0xd1, 0xc6, 0x38, 0x67, 0x8d, 0x12, 0x75, 0xe5, 0x06, 0xce, 0x7a, 0x2a, 0x41,
	0x9c, 0x35, 0xa2, 0xb7, 0x0e, 0x0e, 0xcb, 0xe5, 0xc6, 0xa2, 0x0c, 0xf2, 0x52, 0x0e, 0x00, 0xc8,
	0x8d, 0x4b, 0xbc, 0xc0, 0xc8, 0x8d, 0x50, 0x4f, 0xe4, 0x46, 0x28, 0xf1, 0x7b, 0xec, 0x68, 0x5f,
	0xbe, 0x7f, 0x14, 0x59, 0xd4, 0x8a, 0x57, 0xe2, 0x16, 0x38, 0xd5, 0xc1, 0x22, 0x92, 0x41, 0xb2,
	0x2e, 0x0b, 0x80, 0x25, 0x59, 0xcf, 0x7b, 0x6a, 0x54, 0x19, 0x4e, 0x6c, 0x12, 0xd3, 0xa4, 0x5f,
	0x45, 0x6f, 0xfc, 0x8e, 0xfc, 0xf6, 0xab, 0x51, 0x28, 0x19, 0xf8, 0x62, 0x10, 0xe7, 0x5c, 0xda,
	0x53, 0x41, 0x3b, 0x21, 0xd6, 0xa7, 0x67, 0xa4, 0x3d, 0x09, 0x26, 0x23, 0x7c, 0xde, 0x41, 0x23,
	0x7c, 0xda, 0x61, 0x3d, 0xf7, 0x05, 0x06, 0xda, 0x9f, 0x66, 0x43, 0x71, 0x26, 0xf7, 0x9c, 0x8b,
	0xff, 0xdd, 0xb1, 0xb1, 0x3e, 0x35, 0x34, 0xbf, 0xf8, 0xdc, 0xfa, 0xd4, 0x61, 0xa9, 0x5c, 0x23,
	0x9c, 0x7a, 0x28, 0xce, 0xe0, 0xb4, 0x0b, 0x5a, 0x72, 0x63, 0x89, 0xd3, 0x2e, 0x68, 0xa1, 0xd3,
	0x2e, 0x68, 0xd1, 0xd3, 0x2e, 0x68, 0x35, 0x3e, 0xe5, 0xb1, 0xc3, 0xd5, 0x2f, 0x94, 0x4e, 0xa8,
	0xa2, 0x5c, 0x29, 0x7e, 0x9a, 0x59, 0x10, 0xe7, 0x72, 0x69, 0x9d, 0x30, 0x4b, 0xcb, 0xc6, 0x95,
	0x4e, 0xa8, 0x95, 0x72, 0xe4, 0x84, 0xea, 0xa0, 0x4b, 0x9d, 0x50, 0x2b, 0xc8, 0x8d, 0xc7, 0x18,
	0x33, 0x77, 0x5d, 0x7f, 0x96, 0x8d, 0x04, 0x45, 0x62, 0xd6, 0xfa, 0xb0, 0xe4, 0xa2, 0x45, 0x62,
	0x71, 0xd1, 0x22, 0x71, 0x70, 0x51, 0x01, 0xd5, 0xf8, 0x16, 0x8f, 0xed, 0x9f, 0x2e, 0x92, 0x0b,
	0x41, 0xd2, 0x16, 0x32, 0xdb, 0xeb, 0xb9, 0xcc, 0x96, 0x34, 0xbb, 0xc1, 0x35, 0x98, 0xd1, 0x61,
	0x25, 0x99, 0x25, 0x0b, 0xc1, 0x35, 0x2c, 0x99, 0x01, 0x88, 0x25, 0x99, 0x71, 0x18, 0x4d, 0x20,
	0x56, 0x3a, 0x66, 0x4d, 0x20, 0x4e, 0x2c, 0x02, 0x71, 0x52, 0x21, 0x10, 0x27, 0x8d, 0x09, 0x76,
	0xd4, 0xbc, 0x88, 0x21, 0x91, 0xa1, 0xf1, 0x79, 0xbe, 0x10, 0x7b, 0xe5, 0x6a, 0x94, 0x94, 0xb1,
	0xd8, 0x88, 0x73, 0x41, 0x19, 0x70, 0x51, 0xf0, 0x4a, 0xb4, 0xd6, 0xe4, 0x74, 0x0a, 0x39, 0x33,
	0x77, 0xe8, 0x99, 0x21, 0xe0, 0x8f, 0x46, 0x6b, 0xf3, 0x65, 0xd4, 0x15, 0x82, 0xb8, 0xfc, 0x81,
	0x58, 0xa4, 0xa6, 0x42, 0xf8, 0xf6, 0x15, 0x09, 0xc7, 0xc7, 0x9b, 0x43, 0x80, 0xc2, 0x55, 0x6c,
	0x5e, 0x18, 0xef, 0x47, 0xa3, 0x35, 0xa9, 0x6d, 0x3d, 0x6e, 0xc8, 0xd8, 0xaa, 0xd6, 0xbd, 0x57,
	0x04, 0x54, 0xe3, 0x3d, 0x1e, 0x3b, 0xea, 0xec, 0x14, 0x5f, 0xb7, 0x57, 0xa2, 0x35, 0xcc, 0x4b,
	0x1e, 0x8d, 0xd6, 0xcc, 0xba, 0xbd, 0x12, 0x11, 0x81, 0x87, 0xc3, 0xfa, 0x5f, 0xcd, 0xf6, 0x40,
	0x9f, 0x43, 0x39, 0xd2, 0x27, 0x39, 0x33, 0xe1, 0xf4, 0xe6, 0x8c, 0xd0, 0x21, 0x00, 0x08, 0x37,
	0xe1, 0x5f, 0x14, 0x36, 0xde, 0x00, 0x1d, 0x49, 0x93, 0xb4, 0x9b, 0xf6, 0x8a, 0xa5, 0xb5, 0x82,
	0x7f, 0xa3, 0x62, 0x6a, 0x41, 0x91, 0xc8, 0xd9, 0x17, 0xb7, 0xf9, 0x22, 0x41, 0xb7, 0xf9, 0x22,
	0xa1, 0xb7, 0xf9, 0x22, 0xe1, 0x87, 0xc7, 0xd4, 0xcc, 0xe9, 0xc5, 0x20, 0x58, 0x92, 0x4e, 0xd3,
	0xe7, 0xd2, 0x30, 0x7a, 0x73, 0x9a, 0x18, 0x3e, 0x5d, 0xf8, 0xdf, 0xea, 0xb1, 0x3b, 0x96, 0xdb,
	0x59, 0x10, 0x18, 0xcf, 0x6b, 0x50, 0xaa, 0x3e, 0x93, 0x26, 0x91, 0x18, 0x54, 0xf1, 0xe9, 0xe7,
	0x37, 0xd6, 0xa7, 0x8e, 0xcf, 0x00, 0xa0, 0x45, 0x4c, 0x0e, 0xf3, 0xab, 0x74, 0xd4, 0xaa, 0x7a,
	0x5a, 0x24, 0x36, 0xcc, 0x72, 0x1d, 0xb1, 0xc6, 0x3f, 0xf5, 0xd8, 0x09, 0xd1, 0x6f, 0x71, 0x05,
	0xa4, 0x16, 0x98, 0x7c, 0xc6, 0xc1, 0xe0, 0x58, 0xf1, 0x78, 0xb9, 0xc3, 0x16, 0xd3, 0xbc, 0x14,
	0x7c, 0xfe, 0x38, 0xb2, 0x4a, 0xb6, 0x98, 0xfd, 0xde, 0x4c, 0x40, 0xf1, 0x63, 0x54, 0x04, 0x27,
	0xd4, 0x5c, 0x5f, 0x8a, 0xf2, 0x10, 0xcf, 0x50, 0x72, 0xfe, 0xdb, 0x70, 0x14, 0x43, 0x9b, 0xfd,
	0x8f, 0x66, 0x0a, 0xb2, 0xf1, 0xeb, 0xc3, 0xec, 0xd8, 0x4c, 0x90, 0x47, 0xdd, 0xa8, 0x44, 0x06,
	0x7d, 0xf3, 0xc9, 0x4a, 0xea, 0x4f, 0xb3, 0xbd, 0x4a, 0xb3, 0x2d, 0x06, 0x12, 0xf4, 0x9f, 0x46,
	0x9d, 0x3d, 0x49, 0xd8, 0x30, 0x65, 0x06, 0x52, 0x6b, 0xfd, 0x1a, 0xb6, 0x0b, 0x58, 0xf9, 0x90,
	0x51, 0xf3, 0x4a, 0x1e, 0x2e, 0xd5, 0xbc, 0x36, 0xef, 0x06, 0x70, 0xff, 0x34, 0x1b, 0x85, 0xd1,
	0x07, 0xad, 0xdf, 0xb0, 0xd1, 0xfa, 0xf1, 0xa1, 0xa6, 0x5a, 0x3f, 0x0d, 0x46, 0x76, 0x18, 0x2f,
	0x85, 0x37, 0x83, 0xa7, 0x18, 0x43, 0x21, 0xd9, 0x76, 0xd1, 0x5b, 0x9d, 0x31, 0x6d, 0xd5, 0x20,
	0x33, 0xaf, 0x84, 0x07, 0x0a, 0x1c, 0x6f, 0xed, 0x36, 0xfd, 0x08, 0xef, 0x08, 0xac, 0x86, 0xa8,
	0xfb, 0xef, 0xf3, 0xd8, 0x89, 0xa2, 0x0c, 0x92, 0x30, 0xe8, 0xf0, 0x45, 0xc3, 0x87, 0xb8, 0x68,
	0x16, 0xbd, 0x8c, 0xff, 0x23, 0x2f, 0x4b, 0x23, 0xe2, 0xfd, 0x7c, 0x49, 0x43, 0xf1, 0x2e, 0x14,
	0x4b, 0x0a, 0xc6, 0xbc, 0x9f, 0xd7, 0xd3, 0x21, 0xef, 0xe7, 0x45, 0x0d, 0xa1, 0xc6, 0xbb, 0x86,
	0xd9, 0x38, 0x99, 0xd5, 0x9b, 0x35, 0xa1, 0x1f, 0xf6, 0xd8, 0x51, 0x71, 0x3d, 0x84, 0x3c, 0xcb,
	0x32, 0x9e, 0x8e, 0x52, 0x32, 0xa3, 0xc1, 0x85, 0x6b, 0xe5, 0xd9, 0x38, 0xb9, 0x32, 0xab, 0x41,
	0x84, 0x3c, 0xe1, 0xa8, 0x30, 0xf2, 0x84, 0x93, 0x34, 0x91, 0x27, 0x3a, 0x55, 0xf4, 0x9b, 0xb7,
	0x5c, 0xce, 0xb3, 0x7d, 0xd9, 0xb5, 0x48, 0x9b, 0xa2, 0xed, 0x32, 0xd1, 0x98, 0x17, 0xaf, 0x45,
	0xc6, 0xf8, 0x4c, 0xbd, 0x59, 0x19, 0x50, 0xba, 0x26, 0x34, 0x6c, 0xe3, 0x2f, 0x86, 0xd8, 0x61,
	0x33, 0x0f, 0x66, 0xad, 0x5c, 0x62, 0xfb, 0x5b, 0x41, 0x16, 0x2c, 0xc7, 0x9d, 0x18, 0x56, 0xa6,
	0x98, 0x0e, 0xb8, 0xe4, 0xcf, 0xa2, 0x72, 0x23, 0xeb, 0x60, 0x68, 0x22, 0xba, 0xe2, 0x0a, 0xce,
	0x5e, 0x5a, 0x59, 0xaf, 0x19, 0xe4, 0xad, 0x55, 0x7c, 0xa0, 0xcc, 0x2e, 0x5e, 0x9a, 0xce, 0x5b,
	0xab, 0x86, 0xbd, 0x28, 0x20, 0x32, 0xc5, 0xad, 0xac, 0xc7, 0xa1, 0xf8, 0x9e, 0x6d, 0x65, 0xbd,
	0x02, 0x06, 0x72, 0x58, 0xec, 0xd9, 0xd9, 0xac, 0x57, 0x98, 0x3d, 0xcb, 0x6b, 0xc9, 0x9e, 0xe5,
	0x05, 0xbc, 0x6d, 0x31, 0x7b, 0xed, 0x65, 0xa9, 0x5e, 0x80, 0xb6, 0x61, 0xba, 0x4f, 0xcf, 0x98,
	0xb6, 0x15, 0x10, 0x69, 0x1b, 0x0a, 0x4f, 0x2f, 0xf3, 0x99, 0xec, 0x46, 0xdd, 0x34, 0x5f, 0x6b,
	0x76, 0x97, 0xa5, 0x7a, 0x41, 0xe8, 0xb8, 0xa0, 0x70, 0x61, 0x06, 0xe9, 0xb8, 0x14, 0x18, 0xd5,
	0x71, 0x09, 0xb8, 0xe5, 0xc6, 0xbf, 0x1a, 0x46, 0x03, 0x2f, 0xd2, 0xd0, 0xc0, 0x16, 0x78, 0x98,
	0xed, 0x09, 0xf3, 0xb8, 0x1f, 0xe5, 0x58, 0xe7, 0x30, 0x07, 0x25, 0xe6, 0x84, 0x13, 0x10, 0x44,
	0x92, 0x10, 0x45, 0xfc, 0x5a, 0x2d, 0xfe, 0x6b, 0xc6, 0xc9, 0x4a, 0x6a, 0x8b, 0x95, 0x82, 0x0e,
	0x6f, 0x47, 0x2c, 0x1a, 0xf3, 0xdb, 0x2c, 0x1a, 0x84, 0x4e, 0x16, 0x4d, 0xa8, 0x61, 0xf5, 0x0b,
	0xee, 0xf0, 0xf5, 0xbd, 0xe0, 0xb6, 0x91, 0x51, 0x9f, 0xb2, 0xa4, 0x91, 0x1a, 0x53, 0x08, 0x68,
	0x81, 0xa2, 0x39, 0x40, 0x9d, 0xc3, 0x5e, 0x4f, 0x55, 0x11, 0xad, 0x66, 0x62, 0xe1, 0x59, 0x4c,
	0x75, 0x37, 0xdd, 0xf7, 0x8e, 0xd5, 0xfe, 0x3c, 0x98, 0x6a, 0xe3, 0xcf, 0x3d, 0x76, 0x60, 0x66,
	0x25, 0x34, 0xc7, 0xa8, 0xff, 0x2e, 0x8f, 0x1d, 0x0f, 0xa3, 0x52, 0x6c, 0x7d, 0x88, 0x77, 0xdd,
	0x84, 0xb8, 0x89, 0x59, 0x27, 0x96, 0xb3, 0x3a, 0x3c, 0x33, 0xbf, 0xb1, 0x3e, 0x35, 0x31, 0xa7,
	0x80, 0x2e, 0xc6, 0xdd, 0x68, 0x41, 0x83, 0x18, 0x13, 0xb0, 0x5a, 0x2a, 0x24, 0x5a, 0x69, 0xe8,
	0x26, 0xc3, 0xef, 0x9f, 0x80, 0x06, 0x83, 0xd6, 0x0f, 0x3a, 0xf2, 0x20, 0x86, 0xfb, 0x27, 0x07,
	0x9d, 0x97, 0xe5, 0xe6, 0xfe, 0x49, 0xc0, 0xc9, 0x26, 0x2e, 0x11, 0x7c, 0xe3, 0x13, 0x7c, 0xe9,
	0xb6, 0x33, 0xa1, 0x08, 0x43, 0xe2, 0xce, 0x13, 0xec, 0xa0, 0x12, 0xed, 0x89, 0xda, 0x0c, 0x54,
	0x50, 0x58, 0xb7, 0x86, 0xf4, 0x5b, 0x14, 0x81, 0xa8, 0xa0, 0x02, 0x8c, 0xe1, 0x3f, 0xcd, 0x8e,
	0x84, 0xd1, 0x4a, 0xd0, 0xeb, 0x94, 0xcd, 0xb2, 0x97, 0x24, 0x51, 0xa7, 0x19, 0x25, 0xad, 0x20,
	0x93, 0x0f, 0x09, 0x70, 0xf7, 0x98, 0x13, 0xf5, 0x17, 0xa1, 0xfa, 0x14, 0xaf, 0x35, 0x77, 0x0f,
	0x17, 0x2e, 0xb9, 0x7b, 0x84, 0x15, 0x64, 0xa1, 0x91, 0x4c, 0xb3, 0x66, 0x2b, 0xed, 0x25, 0xa5,
	0xe4, 0x36, 0x52, 0x23, 0x99, 0x66, 0xb3, 0xbc, 0x10, 0x6b, 0x24, 0x15, 0xa0, 0xa5, 0x91, 0x94,
	0x90, 0xfe, 0x15, 0xb6, 0x3f, 0xcb, 0xa3, 0x95, 0xf8, 0x9a, 0x88, 0x0a, 0x2e, 0x8f, 0x7a, 0xfd,
	0xb2, 0x3a, 0xd3, 0xce, 0x16, 0xa1, 0x1a, 0xc2, 0x7b, 0x8b, 0x3b, 0x25, 0x2a, 0x30, 0x7c, 0x16,
	0x13, 0x21, 0x77, 0xca, 0xcc, 0x40, 0x37, 0x3e, 0xb2, 0x8b, 0x1d, 0xe0, 0x14, 0xcd, 0xa2, 0x6c,
	0xb1, 0xd1, 0xa0, 0x57, 0xae, 0x36, 0xc3, 0xa0, 0x0c, 0xa4, 0x66, 0xfa, 0x84, 0xfb, 0xc6, 0xc0,
	0x2f, 0x18, 0x82, 0xa7, 0xf1, 0x72, 0xfe, 0xcb, 0xf0, 0x34, 0x4d, 0x82, 0xf0, 0xb4, 0x40, 0xc2,
	0x71, 0xe6, 0xb8, 0x9a, 0x76, 0x42, 0x11, 0x13, 0x7e, 0xc8, 0x30, 0xc7, 0x33, 0x69, 0x27, 0x94,
	0xf1, 0xe0, 0x4f, 0xa8, 0x77, 0x0a, 0x09, 0x46, 0x08, 0xad, 0x4a, 0x38, 0xff, 0x6d, 0x6c, 0x42,
	0x70, 0xe1, 0x40, 0x8b, 0xeb, 0xcd, 0x02, 0xe4, 0x75, 0x39, 0x0d, 0xa7, 0x44, 0x70, 0xb0, 0x56,
	0xd0, 0xb1, 0x05, 0x7a, 0xf3, 0xaa, 0x53, 0x43, 0xc1, 0x8a, 0x0d, 0xe6, 0x20, 0xe1, 0xaf, 0xb1,
	0x63, 0x59, 0x14, 0xe5, 0x8e, 0xd6, 0xc5, 0xb9, 0x31, 0xbb, 0xb1, 0x3e, 0x75, 0x64, 0x31, 0x8a,
	0x72, 0x47, 0xe3, 0x2f, 0x51, 0x36, 0x1d, 0x2e, 0x7c, 0x62, 0x43, 0x94, 0x39, 0x08, 0x40, 0xd0,
	0xf1, 0x88, 0xda, 0x78, 0x0b, 0x8d, 0xa5, 0x08, 0x3a, 0x1e, 0x51, 0xd3, 0xee, 0xbb, 0x50, 0x63,
	0x6e, 0x4b, 0x8d, 0x03, 0xbc, 0x4e, 0x1b, 0x69, 0x34, 0xba, 0xec, 0x08, 0x5f, 0x17, 0x51, 0x94,
	0xc7, 0x49, 0x1b, 0x6d, 0xdd, 0x4b, 0x6c, 0x6f, 0x21, 0x14, 0x8a, 0xf2, 0x3a, 0xe9, 0xa3, 0x85,
	0xb9, 0x24, 0x35, 0x96, 0x20, 0x8c, 0xc9, 0x1f, 0x46, 0x18, 0x93, 0x78, 0xe4, 0xb4, 0x94, 0x65,
	0x8d, 0xef, 0xf7, 0xd8, 0x41, 0xba, 0xb2, 0xfd, 0x25, 0xb6, 0x3f, 0x0e, 0x3b, 0x11, 0x4c, 0x7e,
	0xda, 0x2b, 0x25, 0x3f, 0x84, 0xf5, 0x3e, 0x1f, 0x76, 0xa2, 0x8b, 0xa2, 0xd8, 0xac, 0x77, 0x0c,
	0x4c, 0xd6, 0x7b, 0x6c, 0xa0, 0xb9, 0xdc, 0xd8, 0x0d, 0xae, 0xc5, 0xdd, 0x5e, 0x57, 0x2e, 0x3b,
	0xe8, 0xea, 0x82, 0x28, 0x32, 0x5d, 0x95, 0x30, 0xa4, 0xab, 0xb2, 0xac, 0xf1, 0x53, 0x8c, 0x1d,
	0x9a, 0x69, 0x67, 0xc2, 0xbe, 0x0e, 0x36, 0x4e, 0x71, 0x33, 0xc4, 0xd1, 0xaf, 0x67, 0x63, 0x84,
	0xc5, 0xf1, 0x03, 0x69, 0x88, 0x86, 0x38, 0xb7, 0x5e, 0x1d, 0x66, 0xbe, 0x6a, 0x63, 0x7d, 0xca,
	0x7e, 0x8a, 0x30, 0xf6, 0xe2, 0x36, 0x35, 0x62, 0xb9, 0x1e, 0x58, 0x0f, 0x18, 0x8f, 0x32, 0x16,
	0x84, 0xdd, 0x38, 0x69, 0x86, 0xe9, 0xd5, 0x44, 0xea, 0xcc, 0x80, 0x83, 0x4d, 0xf3, 0xd2, 0xb9,
	0xf4, 0x2a, 0x7a, 0x48, 0x33, 0x80, 0x84, 0x83, 0x05, 0x0a, 0x92, 0xb2, 0x90, 0x5d, 0x2f, 0x10,
	0x0b, 0x69, 0xb3, 0xf1, 0xea, 0xae, 0x13, 0x72, 0x16, 0xc8, 0x08, 0x8e, 0x1d, 0xd7, 0xd0, 0x84,
	0xeb, 0x37, 0xdb, 0x58, 0x60, 0x6f, 0xb4, 0x47, 0x19, 0x53, 0x66, 0xf7, 0x71, 0x08, 0x0f, 0xa0,
	0x92, 0xb9, 0x4b, 0xab, 0x55, 0x10, 0xca, 0xe5, 0xd0, 0x18, 0x40, 0xfa, 0x64, 0x26, 0x21, 0x43,
	0xbf, 0xc9, 0x0e, 0xa9, 0x97, 0x5d, 0xb5, 0x60, 0xf6, 0x9a, 0x77, 0x06, 0xf9, 0x12, 0x5c, 0xd9,
	0xb6, 0x16, 0x0a, 0x79, 0x67, 0x68, 0x13, 0x1c, 0xca, 0x59, 0x47, 0x9e, 0x07, 0x67, 0x5d, 0x60,
	0x2c, 0x0e, 0xf9, 0x4c, 0xad, 0x70, 0x61, 0x44, 0x3c, 0x85, 0x82, 0xf4, 0x33, 0xaf, 0x4b, 0xcd,
	0x77, 0x1b, 0x48, 0x9a, 0xcc, 0x45, 0x17, 0xf3, 0x53, 0x39, 0xce, 0xfa, 0xaf, 0x6d, 0xda, 0x5f,
	0xcf, 0x80, 0x30, 0x9c, 0xca, 0xf3, 0x59, 0xff, 0xb5, 0x95, 0x11, 0xb8, 0x57, 0xa9, 0x32, 0xab,
	0xb8, 0xd4, 0xf2, 0xbe, 0x82, 0x3c, 0xe8, 0x6c, 0xd8, 0x77, 0x0b, 0xce, 0x86, 0xd7, 0xb0, 0x5d,
	0xfc, 0x0a, 0x0b, 0xa6, 0x74, 0xf2, 0xf2, 0xc1, 0xaf, 0xaf, 0x46, 0xf6, 0xe5, 0xb5, 0x44, 0xf6,
	0xe5, 0x05, 0xfc, 0xe2, 0x86, 0x1d, 0x67, 0x0e, 0x18, 0x63, 0x43, 0xe2, 0x31, 0x73, 0x3b, 0xc9,
	0x31, 0x50, 0xb1, 0x5e, 0xcc, 0x8d, 0x8b, 0xcc, 0x79, 0xb6, 0xaf, 0x48, 0x7b, 0x79, 0x4b, 0xdc,
	0xbf, 0xc1, 0x13, 0x67, 0x58, 0xbe, 0x95, 0x41, 0xb1, 0xec, 0x94, 0x7a, 0x2b, 0x33, 0xa0, 0xf4,
	0xad, 0x4c, 0xc3, 0xf2, 0x8b, 0x47, 0x3f, 0x4a, 0xc2, 0x34, 0x07, 0xdf, 0x7f, 0x79, 0xf1, 0xb8,
	0x0c, 0x25, 0xe6, 0xe2, 0x21, 0x20, 0xc8, 0xc5, 0x43, 0x14, 0x35, 0x3e, 0xeb, 0x31, 0x66, 0xce,
	0x0a, 0xff, 0x0a, 0x63, 0xfa, 0x25, 0x43, 0xa9, 0x28, 0x6f, 0xaf, 0x9e, 0x29, 0xe6, 0x08, 0x12,
	0xab, 0xd0, 0xfc, 0x46, 0x8c, 0x49, 0x97, 0x51, 0x5b, 0x32, 0x73, 0x7a, 0x29, 0x3b, 0xc0, 0xa1,
	0xeb, 0xb2, 0x03, 0x6c, 0xfc, 0xcc, 0x28, 0x9c, 0x86, 0x95, 0xae, 0x38, 0x99, 0xb6, 0xf7, 0x22,
	0x31, 0xed, 0xa1, 0xe7, 0xc7, 0xb4, 0xcf, 0xb3, 0x7d, 0x41, 0xd1, 0x4c, 0xfb, 0x51, 0x9e, 0xc7,
	0x61, 0x24, 0x8f, 0x00, 0x61, 0xb7, 0x57, 0x9c, 0x97, 0xa5, 0xc8, 0x6e, 0xcf, 0x80, 0xd2, 0xb1,
	0xd6, 0xb0, 0xb7, 0xe6, 0x14, 0x78, 0x94, 0xb1, 0xe5, 0x76, 0x26, 0x3d, 0x5f, 0xa4, 0x00, 0x04,
	0x43, 0x30, 0x73, 0x7a, 0x51, 0xec, 0x17, 0x33, 0x04, 0x06, 0x90, 0x0c, 0xc1, 0xb2, 0x3a, 0xcb,
	0xfd, 0x77, 0x7a, 0x6c, 0x5c, 0x5c, 0x2f, 0x9a, 0x68, 0x49, 0xee, 0xa1, 0xee, 0x53, 0x8e, 0xfb,
	0x8c, 0x38, 0x70, 0xec, 0x52, 0x14, 0xe8, 0xd1, 0xa6, 0x49, 0x03, 0x08, 0xdb, 0xb7, 0x23, 0xc2,
	0xc2, 0xf7, 0xbe, 0x30, 0xc2, 0xf1, 0xc8, 0x2d, 0x60, 0x80, 0xf4, 0x56, 0x34, 0xfa, 0xfc, 0x6e,
	0x45, 0xd3, 0x6c, 0x6f, 0x16, 0x14, 0x45, 0xdc, 0x8f, 0xe0, 0xc8, 0x90, 0x16, 0xac, 0x8b, 0xa2,
	0xc8, 0x48, 0x58, 0x12, 0x86, 0x2a, 0x9b, 0x45, 0x99, 0x1f, 0xb1, 0xf1, 0x2c, 0x8f, 0xfb, 0x41,
	0x19, 0x35, 0x03, 0x6d, 0x33, 0x24, 0x0c, 0xa6, 0x45, 0x60, 0x0d, 0x51, 0x39, 0x6d, 0x2c, 0x87,
	0x54, 0x60, 0x0d, 0x1b, 0x8b, 0x06, 0xd6, 0xa0, 0x68, 0xa0, 0x57, 0x14, 0xf1, 0xed, 0xd3, 0x3c,
	0x6e, 0xc7, 0x89, 0xd9, 0x53, 0xfb, 0xa9, 0x7e, 0x01, 0x56, 0xdd, 0x79, 0x80, 0x51, 0x9b, 0x46,
	0xe8, 0x15, 0x1d, 0x15, 0x46, 0xaf, 0xe8, 0x24, 0x4d, 0xf4, 0x8a, 0x79, 0x15, 0xbd, 0x11, 0xb0,
	0x13, 0x38, 0x00, 0xea, 0x42, 0xd4, 0x5d, 0x8e, 0xf2, 0x62, 0x35, 0xce, 0x94, 0x2e, 0xbf, 0xdf,
	0x09, 0x92, 0x66, 0x19, 0xb4, 0xb1, 0x2e, 0xff, 0x72, 0x27, 0x48, 0x2e, 0x06, 0x6d, 0xa3, 0xf0,
	0x52, 0x40, 0x64, 0x78, 0xfb, 0x02, 0xaa, 0xf1, 0xa7, 0x1e, 0x3b, 0x34, 0xdb, 0x89, 0xe7, 0xe2,
	0x95, 0x95, 0xf9, 0x64, 0x25, 0x55, 0x86, 0x2c, 0x32, 0xdd, 0x40, 0x6b, 0x35, 0x48, 0xda, 0x5a,
	0x3d, 0x08, 0x17, 0x7d, 0xe1, 0x5a, 0x31, 0x2b, 0x2a, 0xcc, 0x45, 0x9f, 0x22, 0x90, 0x2b, 0x4a,
	0x0b, 0x63, 0x70, 0x66, 0xae, 0xef, 0x8f, 0x92, 0x99, 0xcb, 0xed, 0x71, 0xd4, 0x68, 0x29, 0x08,
	0x33, 0xe7, 0x05, 0xfe, 0x29, 0x36, 0xd2, 0x2b, 0xa2, 0x1c, 0xe9, 0xa5, 0xc0, 0x52, 0xe1, 0x92,
	0x2c, 0x33, 0x5f, 0xab, 0xa0, 0xc8, 0xe6, 0x52, 0x85, 0x8d, 0x0f, 0x9a, 0xcf, 0xd5, 0xaf, 0x8e,
	0xcf, 0xb0, 0xb1, 0x56, 0xda, 0xed, 0xc6, 0x65, 0x33, 0x8c, 0x57, 0x56, 0x84, 0x62, 0xcd, 0x32,
	0xee, 0xb0, 0x46, 0x48, 0xb8, 0x7c, 0xce, 0x02, 0x92, 0x2a, 0x37, 0xa7, 0x81, 0x4d, 0x8c, 0x08,
	0x7e, 0x2d, 0x82, 0xd4, 0xf8, 0xdd, 0x5d, 0x6c, 0x7c, 0xb6, 0x93, 0xf6, 0x42, 0xed, 0xc1, 0x98,
	0xac, 0xa4, 0x20, 0x25, 0xf7, 0x83, 0xb8, 0x23, 0x14, 0xab, 0x6b, 0xf0, 0x08, 0x24, 0xe7, 0x40,
	0x48, 0xc9, 0xa8, 0xf2, 0xcd, 0x69, 0x82, 0x34, 0x69, 0x15, 0x34, 0x2a, 0x25, 0x5b, 0x78, 0xfe,
	0xe3, 0xec, 0x80, 0x76, 0x8f, 0x44, 0xaf, 0x80, 0xa0, 0x43, 0x52, 0x3d, 0x92, 0xa2, 0xcb, 0x9d,
	0x96, 0x37, 0xa5, 0x2d, 0xbc, 0xec, 0x8f, 0x11, 0x3c, 0xe7, 0x22, 0xda, 0xf5, 0x4e, 0xa9, 0xc4,
	0x81, 0x8b, 0x28, 0x57, 0x3b, 0x24, 0x7e, 0x1b, 0x40, 0xc2, 0x45, 0x64, 0xf1, 0x7c, 0xe8, 0xb7,
	0xd8, 0x98, 0x34, 0x10, 0x49, 0xda, 0xf8, 0xa6, 0x3e, 0x2a, 0x8e, 0xe5, 0xf3, 0xaa, 0x4e, 0x33,
	0xc1, 0xbb, 0x89, 0xad, 0x89, 0x46, 0x22, 0x0c, 0x20, 0xa5, 0x58, 0xbc, 0xc7, 0x69, 0xa1, 0x7d,
	0x89, 0xd0, 0x99, 0x74, 0xbe, 0x30, 0x0e, 0x44, 0xb2, 0xc7, 0x06, 0x90, 0x5a, 0xb1, 0x28, 0x48,
	0xff, 0x75, 0x6c, 0x77, 0x9e, 0x76, 0xe4, 0x31, 0x24, 0x4d, 0x22, 0x2e, 0xa4, 0xc2, 0x7a, 0xe5,
	0x98, 0xe2, 0x08, 0x96, 0xe5, 0x8a, 0xc0, 0xe0, 0x27, 0x7a, 0x3f, 0xed, 0xf4, 0xba, 0x51, 0xb3,
	0x88, 0x9f, 0x51, 0x27, 0x09, 0x9c, 0xe8, 0x97, 0xa1, 0x78, 0x29, 0x7e, 0x06, 0x9d, 0xe8, 0x08,
	0x94, 0x9c, 0xe8, 0x7d, 0x0d, 0xdb, 0x78, 0xb7, 0xc7, 0x0e, 0x6b, 0x5b, 0x3e, 0x74, 0x60, 0xa5,
	0xec, 0xb0, 0xb6, 0xce, 0x43, 0x56, 0x2c, 0x1e, 0xf4, 0x18, 0xf2, 0x81, 0x55, 0xb1, 0x8c, 0xd3,
	0xb7, 0x03, 0x95, 0x48, 0xf6, 0xad, 0x0a, 0x6e, 0xe3, 0x2d, 0x6c, 0xbc, 0x62, 0xad, 0xec, 0xcf,
	0x63, 0xab, 0x47, 0xcf, 0xd8, 0xfb, 0x5c, 0xbf, 0x61, 0x63, 0xe3, 0x5d, 0x1e, 0x3b, 0x68, 0x1e,
	0x65, 0x80, 0x7a, 0xc1, 0x8e, 0x84, 0x51, 0x51, 0xc6, 0x89, 0x70, 0xf5, 0xd2, 0xb6, 0xc3, 0x9e,
	0x76, 0x94, 0x39, 0x3c, 0x67, 0xea, 0x91, 0xe5, 0xb0, 0x56, 0x2b, 0x56, 0x91, 0x09, 0xd7, 0x0e,
	0xab, 0xd8, 0x8d, 0xff, 0xe8, 0xb1, 0x63, 0x2a, 0x81, 0x5f, 0x1e, 0xac, 0xac, 0xc4, 0xad, 0xb9,
	0xa2, 0x95, 0xa9, 0xaf, 0x0d, 0x92, 0xa0, 0xb3, 0x56, 0xc6, 0xad, 0x42, 0xf2, 0x6c, 0xf8, 0xda,
	0x69, 0x55, 0x88, 0x44, 0x28, 0x55, 0x44, 0x25, 0x3f, 0x55, 0xca, 0x8f, 0x56, 0x95, 0x48, 0x10,
	0xe9, 0x44, 0x4c, 0x82, 0xc0, 0x49, 0xcd, 0x97, 0xed, 0xbc, 0x80, 0x0a, 0xcf, 0x7f, 0x80, 0x0d,
	0x87, 0x89, 0x7a, 0x67, 0x81, 0x67, 0xf1, 0xb9, 0x73, 0x4b, 0xe6, 0x59, 0x3c, 0xa4, 0x4e, 0x78,
	0x1c, 0xb6, 0xf1, 0xc3, 0x1e, 0x3b, 0x2c, 0xf5, 0xb0, 0x2a, 0x83, 0x17, 0x7c, 0xd8, 0x1b, 0xd8,
	0xf0, 0x72, 0x3b, 0xb3, 0xa5, 0x68, 0x05, 0x32, 0xd3, 0xce, 0x8c, 0x69, 0xfa, 0xcc, 0xe9, 0x45,
	0xd3, 0xc6, 0x72, 0x9b, 0xa8, 0x69, 0x39, 0x11, 0xff, 0x3c, 0xdb, 0x95, 0x16, 0xd9, 0x8a, 0xd4,
	0xa3, 0x4c, 0xda, 0xc4, 0xce, 0x17, 0xd9, 0x8a, 0x71, 0x5e, 0xe5, 0xbf, 0xcc, 0xd9, 0xc1, 0xf1,
	0xc8, 0xd9, 0xc1, 0x0b, 0x1a, 0x1f, 0x1e, 0x62, 0x63, 0x73, 0x11, 0x24, 0x19, 0xcc, 0x23, 0xb8,
	0xdc, 0x06, 0x1d, 0x7f, 0x85, 0xb1, 0x96, 0xfe, 0x65, 0x77, 0x5c, 0x86, 0x2c, 0x93, 0xb5, 0xf2,
	0xf2, 0x62, 0x0a, 0x90, 0xea, 0x40, 0x97, 0x91, 0xed, 0x67, 0x8a, 0x39, 0x8b, 0x0d, 0xa1, 0x6d,
	0xa5, 0x34, 0x47, 0x2c, 0x56, 0x74, 0x4a, 0xeb, 0xcc, 0xef, 0x54, 0x8b, 0x0e, 0x81, 0x13, 0x16,
	0x1b, 0x22, 0x78, 0x74, 0xa1, 0x1b, 0xbe, 0x91, 0x0b, 0xdd, 0x77, 0x7b, 0xec, 0x88, 0x3d, 0x28,
	0x60, 0x6f, 0xf6, 0x0e, 0x8f, 0x8d, 0xcb, 0x2e, 0x90, 0x01, 0x22, 0xd9, 0x2f, 0x6c, 0x4c, 0x71,
	0x2e, 0xd9, 0xa5, 0xe6, 0x5c, 0xaa, 0x10, 0x24, 0xe7, 0x52, 0x68, 0xe1, 0x35, 0x52, 0xd5, 0x37,
	0xf1, 0xad, 0x9a, 0x5b, 0x54, 0x06, 0xd3, 0x33, 0x7e, 0x06, 0xcf, 0x67, 0x30, 0x1b, 0x4f, 0xb3,
	0x63, 0x02, 0x7f, 0xb1, 0x13, 0x94, 0x2b, 0x69, 0xde, 0xc5, 0x4d, 0x66, 0xb2, 0x4c, 0xf8, 0x00,
	0xa0, 0x26, 0x15, 0xb0, 0x7c, 0x1d, 0x93, 0x4d, 0x12, 0x70, 0xd2, 0x64, 0x86, 0xe0, 0x1b, 0xbf,
	0x39, 0xc4, 0x0e, 0xce, 0xad, 0xb6, 0xb2, 0xf3, 0x99, 0x66, 0x57, 0x01, 0x1b, 0x0b, 0x57, 0x5b,
	0x59, 0x33, 0x85, 0x22, 0xd5, 0x1c, 0x9f, 0x5c, 0x10, 0x38, 0xe6, 0xce, 0xcc, 0x2e, 0x0a, 0x68,
	0xd9, 0xa0, 0x3c, 0xe7, 0x6c, 0x1c, 0x22, 0x70, 0x84, 0xba, 0x09, 0x70, 0x3e, 0x88, 0xd8, 0x38,
	0x06, 0x17, 0x96, 0x90, 0x43, 0x46, 0x9c, 0x36, 0x6d, 0x28, 0x7b, 0xc8, 0x46, 0xb5, 0x91, 0x8a,
	0x59, 0xe4, 0x21, 0xd3, 0x8a, 0x30, 0x8e, 0x7c, 0x2b, 0x9b, 0xa8, 0x20, 0x34, 0x97, 0xd7, 0xf8,
	0xcd, 0x6c, 0xd8, 0x04, 0x40, 0xb4, 0x1a, 0x9b, 0x59, 0x13, 0x17, 0xb0, 0xfb, 0x6b, 0x5a, 0x14,
	0x04, 0x88, 0x92, 0xdd, 0x6a, 0x17, 0x28, 0x34, 0xde, 0xce, 0x0e, 0x9b, 0x81, 0x35, 0xd6, 0x65,
	0x6d, 0xb6, 0x0f, 0x91, 0x94, 0x2b, 0x5a, 0xbf, 0xd0, 0xd0, 0xa9, 0x90, 0xef, 0xa7, 0xba, 0x7f,
	0xe8, 0xfd, 0xd4, 0x90, 0xa0, 0xef, 0xa7, 0x1a, 0xbf, 0xf1, 0xf9, 0x21, 0x76, 0xdb, 0x5c, 0x5c,
	0xb4, 0xb8, 0x9c, 0xbf, 0xb6, 0xd8, 0x5b, 0x5e, 0xea, 0x2d, 0x9f, 0x4a, 0xc2, 0xc5, 0x34, 0x96,
	0x9e, 0xa9, 0x5f, 0xc9, 0x76, 0x47, 0x59, 0x53, 0x3b, 0x36, 0x36, 0x38, 0x1f, 0x3b, 0x95, 0x81,
	0x48, 0x24, 0x85, 0x03, 0xa8, 0x26, 0x8c, 0x2c, 0xca, 0xe6, 0x43, 0xff, 0x09, 0x36, 0x1a, 0x65,
	0x4d, 0xf1, 0x12, 0x34, 0xc0, 0xa4, 0x10, 0xee, 0x9d, 0xa7, 0xa4, 0x5a, 0xde, 0x9c, 0x28, 0x1a,
	0x95, 0x88, 0xc6, 0x91, 0x84, 0xf3, 0x5f, 0xcf, 0xf6, 0x46, 0x32, 0x46, 0xa5, 0x98, 0x22, 0xb0,
	0x72, 0x3b, 0xa5, 0xa2, 0x52, 0x4e, 0x6a, 0x22, 0xb6, 0xe4, 0xb7, 0x27, 0xca, 0x94, 0xcc, 0x17,
	0x65, 0x5a, 0x82, 0xda, 0x65, 0x24, 0xa8, 0x53, 0x59, 0x45, 0x82, 0x32, 0x80, 0xe4, 0x78, 0x8b,
	0x14, 0x64, 0xe3, 0x9d, 0x43, 0xec, 0x4e, 0x3d, 0x86, 0xd2, 0x96, 0x49, 0xb8, 0xf9, 0x74, 0x95,
	0x83, 0x6f, 0xc2, 0x46, 0xb3, 0xde, 0x72, 0x27, 0x2e, 0x56, 0xe5, 0xbb, 0x2b, 0x8a, 0x1d, 0x33,
	0x60, 0xf8, 0xc5, 0x89, 0xbb, 0xa8, 0x30, 0xcd, 0xf8, 0x68, 0x62, 0xd4, 0x52, 0x49, 0x95, 0xfa,
	0x39, 0x63, 0x45, 0x6f, 0xb9, 0x68, 0xe5, 0xf1, 0x72, 0x94, 0xc3, 0xc3, 0xe4, 0x16, 0x1b, 0x7c,
	0xa5, 0x34, 0x71, 0x97, 0xa8, 0x66, 0x14, 0x0c, 0x39, 0xdb, 0xc2, 0x5d, 0x16, 0x37, 0x3e, 0xee,
	0xb1, 0xb1, 0xb9, 0xa4, 0x58, 0x4a, 0x83, 0x0b, 0x51, 0x2b, 0xcd, 0x43, 0xf8, 0xf0, 0xf7, 0x78,
	0xec, 0x44, 0x12, 0xb5, 0x83, 0x32, 0xee, 0x47, 0xcd, 0x56, 0xd0, 0x5a, 0x8d, 0x9a, 0x65, 0xd9,
	0x69, 0x16, 0x51, 0x2b, 0x4d, 0x42, 0x25, 0x57, 0x40, 0xc6, 0xcc, 0x73, 0x12, 0x6a, 0x96, 0x03,
	0x5d, 0xbc, 0x78, 0x76, 0x49, 0x80, 0x18, 0x3b, 0x9f, 0x7a, 0x32, 0xe4, 0x0d, 0x3a, 0x21, 0x74,
	0xca, 0x8e, 0xa4, 0xd3, 0xf8, 0x45, 0x8f, 0x1d, 0x9b, 0x4b, 0x8a, 0x6e, 0x50, 0x3c, 0x7d, 0x36,
	0x0a, 0x0a, 0x64, 0x6d, 0xe6, 0x9f, 0x66, 0xa3, 0xad, 0x4e, 0x1c, 0x25, 0xa5, 0x59, 0xe8, 0xb0,
	0x2e, 0x67, 0xa1, 0x10, 0xdb, 0xc4, 0x68, 0x30, 0xb2, 0x2e, 0x45, 0xe9, 0x7c, 0xc8, 0x39, 0x56,
	0x87, 0xd3, 0x6e, 0x46, 0xd7, 0xb2, 0x38, 0x5f, 0xc3, 0xaf, 0x8f, 0xc0, 0xb1, 0xa0, 0xe1, 0x53,
	0x50, 0x27, 0x2f, 0x92, 0x92, 0x63, 0x55, 0xb0, 0x08, 0xc7, 0xea, 0x50, 0xb4, 0xc6, 0x6f, 0x70,
	0x21, 0x01, 0xae, 0xd9, 0xf0, 0x90, 0x55, 0x68, 0xe6, 0x9f, 0xa7, 0x90, 0x9f, 0x4d, 0x3c, 0xeb,
	0x7a, 0xe6, 0x8d, 0x7d, 0x51, 0x54, 0xa8, 0xf7, 0xdb, 0x3b, 0xb5, 0x45, 0x81, 0x01, 0xa7, 0xcc,
	0x1f, 0xc1, 0xfb, 0x4f, 0xb3, 0x23, 0x56, 0x84, 0x4d, 0x41, 0x5f, 0x7c, 0x17, 0x28, 0xd6, 0x89,
	0x53, 0x87, 0x6a, 0xe5, 0x5e, 0x67, 0x74, 0xce, 0x4a, 0x63, 0x7e, 0x51, 0x41, 0x06, 0x5b, 0x6b,
	0x2b, 0x7f, 0x8d, 0x68, 0x53, 0xc8, 0x7f, 0xc2, 0xd6, 0x9a, 0xb8, 0x3f, 0xa8, 0x46, 0xef, 0x73,
	0x67, 0xbf, 0xa9, 0xb4, 0x7a, 0xb8, 0x5f, 0x45, 0x6f, 0x7c, 0x78, 0x17, 0x43, 0x76, 0x28, 0xe2,
	0x04, 0xcf, 0x3a, 0xe9, 0x5a, 0xf3, 0x4a, 0x94, 0x27, 0x51, 0x47, 0x2e, 0x0d, 0x79, 0x82, 0xf3,
	0x8a, 0x47, 0xa1, 0x1c, 0x9f, 0xe0, 0x08, 0xdc, 0x3a, 0xc1, 0x0d, 0xbc, 0xff, 0x04, 0x3b, 0x28,
	0x21, 0xf3, 0xa0, 0x1b, 0xc6, 0xc5, 0x15, 0xec, 0x20, 0x23, 0x28, 0x5f, 0x10, 0x15, 0x46, 0x69,
	0x41, 0x11, 0x88, 0xd2, 0x22, 0xc4, 0x18, 0xf0, 0xaa, 0x99, 0x75, 0x63, 0xfd, 0xfe, 0x81, 0x42,
	0x3f, 0xcc, 0x67, 0xdd, 0xd8, 0x3c, 0x7c, 0xa8, 0x57, 0x4d, 0x04, 0x4c, 0x5f, 0x35, 0x0d, 0x34,
	0x5c, 0xbe, 0x39, 0x5c, 0x16, 0x14, 0x05, 0x24, 0x74, 0xdf, 0x85, 0x2e, 0xdf, 0x59, 0x37, 0x5e,
	0x94, 0xe5, 0xe8, 0xf2, 0x8d, 0xc1, 0xe9, 0xe5, 0x1b, 0xc1, 0x43, 0xe2, 0x79, 0x80, 0x4c, 0xf3,
	0x52, 0xde, 0x64, 0x45, 0xe2, 0x79, 0x0e, 0x24, 0xde, 0x0d, 0x4e, 0x60, 0x82, 0xd6, 0xab, 0xc1,
	0x48, 0x2c, 0xe1, 0x74, 0x0f, 0xb5, 0xe6, 0x65, 0x0f, 0xed, 0x21, 0xd2, 0xbe, 0xe0, 0x1e, 0xba,
	0x54, 0x30, 0xd0, 0x43, 0x05, 0xdf, 0xf8, 0xb5, 0x5d, 0x6c, 0xff, 0xa9, 0xa5, 0x37, 0xce, 0x9f,
	0x49, 0x0b, 0x6d, 0x19, 0x28, 0x9f, 0xdb, 0xf0, 0x53, 0xac, 0x7c, 0xab, 0x43, 0xb7, 0x19, 0x51,
	0x40, 0x6f, 0x33, 0xa2, 0xcc, 0x5f, 0x60, 0x2c, 0x0c, 0xca, 0x40, 0xa4, 0xe6, 0x93, 0x93, 0x0f,
	0x9c, 0x77, 0x4e, 0x97, 0x1a, 0xce, 0x6b, 0x20, 0xe9, 0x21, 0xae, 0x8b, 0xc1, 0x81, 0x3d, 0x28,
	0x83, 0xa2, 0x4c, 0xf3, 0x08, 0xfb, 0xb4, 0xcc, 0xa9, 0x42, 0xe4, 0xc0, 0xae, 0x8a, 0xa8, 0x03,
	0xbb, 0x2a, 0xe5, 0xf3, 0x11, 0x15, 0xd7, 0x62, 0xec, 0x42, 0x2a, 0x8e, 0xe8, 0xe2, 0x5a, 0x2c,
	0x25, 0x39, 0x75, 0x44, 0x2b, 0x30, 0x7a, 0x44, 0x4b, 0x38, 0xe5, 0x08, 0xb0, 0x7b, 0xeb, 0x8e,
	0x00, 0xfe, 0x29, 0x36, 0xa2, 0xd7, 0xd7, 0x1e, 0xa3, 0x37, 0x43, 0x6b, 0xeb, 0xb8, 0xd1, 0xc1,
	0xda, 0xcb, 0x4a, 0xa3, 0x12, 0xf5, 0xdb, 0xde, 0x1b, 0x56, 0xbf, 0xf1, 0x4d, 0xda, 0x97, 0xb9,
	0x13, 0x0b, 0xb0, 0x89, 0x93, 0xde, 0x9f, 0xb0, 0x49, 0x2f, 0x8b, 0x1a, 0x61, 0x2c, 0x67, 0x36,
	0x29, 0x45, 0x20, 0x9b, 0xb4, 0x8f, 0x31, 0x1a, 0x1f, 0xf6, 0xd8, 0x41, 0xbe, 0xa8, 0x90, 0x99,
	0xe3, 0x57, 0xb3, 0x3d, 0x61, 0xbf, 0x30, 0x27, 0x10, 0x98, 0x93, 0xcf, 0x5d, 0x5e, 0xc2, 0xe6,
	0xe4, 0x02, 0x80, 0x68, 0x62, 0xc2, 0x7e, 0x31, 0x1f, 0xfa, 0xb3, 0x6c, 0x84, 0xd7, 0xc1, 0x37,
	0x23, 0x63, 0xc6, 0xb9, 0xcb, 0x4b, 0xe7, 0xc8, 0x27, 0x2b, 0x20, 0x1a, 0x80, 0xa1, 0x5f, 0x80,
	0x94, 0xff, 0xa3, 0xbb, 0xd8, 0xe4, 0xa9, 0x56, 0x37, 0x3b, 0x13, 0x14, 0xab, 0xe0, 0x59, 0xdc,
	0xea, 0xf4, 0xc2, 0xe8, 0x91, 0x38, 0xea, 0x84, 0x85, 0xe0, 0x59, 0x48, 0xc3, 0x90, 0x49, 0xd7,
	0x6b, 0xc9, 0xb3, 0x8c, 0x6a, 0x61, 0x11, 0xf3, 0x2c, 0x8c, 0x60, 0xf1, 0x2c, 0x83, 0x91, 0xf9,
	0x2d, 0x36, 0x86, 0x61, 0x81, 0x19, 0x88, 0xd7, 0x26, 0xd0, 0x9a, 0x21, 0xf2, 0x92, 0x27, 0xdc,
	0x5d, 0x6d, 0xc0, 0x66, 0x0d, 0x87, 0x42, 0x8a, 0xe5, 0x5f, 0x61, 0xfe, 0xaa, 0xf8, 0xb2, 0xa6,
	0x8a, 0x99, 0x13, 0x85, 0xf2, 0x19, 0xea, 0x6b, 0x36, 0xd6, 0xa7, 0xc6, 0xe5, 0x77, 0xcf, 0xea,
	0x4a, 0xe4, 0xcc, 0x5c, 0x41, 0x24, 0x61, 0x03, 0x57, 0x6d, 0x4c, 0xff, 0x3c, 0xdb, 0x17, 0x67,
	0x3a, 0xc9, 0x38, 0xb6, 0x8e, 0x9d, 0x5f, 0x54, 0xda, 0x01, 0x23, 0xa8, 0x23, 0x50, 0xfa, 0xbc,
	0x9d, 0x29, 0x58, 0xbe, 0x31, 0xe5, 0xcb, 0x69, 0x9c, 0x49, 0xfb, 0x68, 0xd8, 0x98, 0xe2, 0x89,
	0x15, 0x46, 0xfd, 0x04, 0x79, 0x60, 0xa5, 0x03, 0x3e, 0x22, 0x4a, 0xe7, 0x33, 0xfb, 0xb5, 0x76,
	0x8f, 0xe9, 0xd9, 0x8d, 0xbd, 0xd6, 0x36, 0xfe, 0x97, 0xc7, 0x8e, 0x49, 0x1b, 0x5e, 0x1a, 0x4c,
	0xd9, 0xc4, 0xd7, 0xf1, 0xae, 0xcf, 0x3a, 0xf3, 0x33, 0xc2, 0x3a, 0xbc, 0x2c, 0x9a, 0xad, 0xb4,
	0xd3, 0x91, 0x76, 0x87, 0x2b, 0x79, 0xf4, 0x74, 0x2f, 0x4a, 0x5a, 0xca, 0xe1, 0x58, 0xe7, 0x12,
	0x5a, 0xe2, 0x90, 0xb3, 0x1a, 0xf0, 0x11, 0x05, 0xa7, 0xed, 0xc7, 0x9d, 0xb5, 0xc4, 0x7e, 0xbc,
	0xa6, 0x25, 0xdb, 0x7e, 0xdc, 0x49, 0xa8, 0x71, 0x8d, 0xdd, 0x06, 0x46, 0x7a, 0x45, 0xaf, 0x23,
	0x16, 0x5b, 0x1e, 0xa7, 0x79, 0xac, 0x32, 0x95, 0xfb, 0x6f, 0x62, 0x07, 0x22, 0x5c, 0x2d, 0x2f,
	0xe5, 0x0f, 0xf1, 0x7d, 0x43, 0xf0, 0xcc, 0xc9, 0x44, 0xe0, 0xc9, 0xb6, 0x21, 0x35, 0x8d, 0x8f,
	0x79, 0x6c, 0xf2, 0x54, 0xd2, 0xca, 0xd7, 0xc4, 0x5d, 0x50, 0xda, 0x0b, 0x86, 0x19, 0x97, 0xe6,
	0xfd, 0xbf, 0xcf, 0x26, 0xa5, 0x85, 0x61, 0x1e, 0x75, 0xd3, 0x92, 0x04, 0xdf, 0x11, 0xf3, 0x01,
	0x69, 0x2d, 0x05, 0xd6, 0x05, 0x00, 0xc1, 0xf6, 0x5c, 0x32, 0xad, 0x65, 0x1d, 0x09, 0xf2, 0x3a,
	0x57, 0x62, 0x1a, 0xda, 0xc0, 0xeb, 0x3d, 0x1e, 0xbb, 0xbd, 0xae, 0x77, 0xa0, 0xbd, 0x69, 0xb3,
	0x91, 0x48, 0xfe, 0x96, 0x37, 0x5c, 0x3d, 0xa7, 0x75, 0x78, 0x82, 0x95, 0xab, 0x5f, 0x86, 0xaf,
	0x29, 0x3a, 0xf4, 0x2c, 0x92, 0x85, 0x8d, 0xef, 0xe0, 0x2b, 0xf4, 0x5a, 0xd4, 0xea, 0x41, 0x3e,
	0x68, 0x7e, 0x88, 0xeb, 0x8b, 0xf6, 0x5b, 0xd9, 0xa1, 0x48, 0xd7, 0xe0, 0xf7, 0x94, 0x13, 0x26,
	0x70, 0x05, 0x46, 0x34, 0x01, 0x5b, 0x68, 0xb9, 0x31, 0xa5, 0xb1, 0xc8, 0x11, 0x05, 0x47, 0x44,
	0x70, 0x1a, 0xbf, 0x3d, 0xc4, 0xfc, 0x2a, 0x79, 0xbf, 0x49, 0xfa, 0x14, 0xe4, 0x6d, 0x35, 0x61,
	0x56, 0xbb, 0xd3, 0x79, 0xbb, 0x70, 0xb6, 0xcb, 0x51, 0x6a, 0xda, 0xe5, 0x38, 0x56, 0x03, 0x10,
	0x21, 0x60, 0xc8, 0xd5, 0x80, 0x8c, 0x07, 0x50, 0x6d, 0xc0, 0x8e, 0x0b, 0x80, 0x1a, 0x80, 0xf8,
	0x00, 0xef, 0xf0, 0xd8, 0xe4, 0x53, 0xe9, 0x72, 0xb3, 0x95, 0x76, 0xb3, 0x4e, 0x04, 0x9b, 0xea,
	0x6a, 0x14, 0xb7, 0x57, 0xcb, 0xa0, 0x1d, 0x49, 0x19, 0xfe, 0xf4, 0xc6, 0xfa, 0xd4, 0xb1, 0x37,
	0xa4, 0xcb, 0xb3, 0x1a, 0xe4, 0x71, 0x05, 0x61, 0x56, 0x5f, 0x1d, 0x0d, 0x12, 0x77, 0xf2, 0x29,
	0x27, 0x91, 0x46, 0xc0, 0x8e, 0xb8, 0x62, 0x8e, 0xdc, 0x4c, 0x2d, 0x7e, 0x9b, 0x8d, 0x89, 0x24,
	0xc7, 0x26, 0xad, 0x12, 0x17, 0xbf, 0xd5, 0xa5, 0x03, 0xb9, 0x55, 0x81, 0xf8, 0xad, 0xa0, 0x84,
	0x92, 0xe2, 0x0e, 0x6a, 0x4f, 0x6e, 0x6b, 0x2a, 0xf6, 0x25, 0x06, 0xba, 0xf1, 0xcd, 0x1e, 0x6f,
	0xa9, 0x7c, 0xa4, 0x93, 0x5e, 0x55, 0x07, 0x42, 0xe1, 0xbf, 0x95, 0x8d, 0xaf, 0x04, 0x65, 0x13,
	0xd2, 0x07, 0xeb, 0x83, 0xc6, 0x72, 0xbb, 0xc5, 0x8a, 0x6f, 0x99, 0x2c, 0x92, 0x92, 0xc1, 0x36,
	0x04, 0x16, 0x2d, 0x9a, 0x2c, 0x92, 0xa2, 0x35, 0x02, 0x76, 0x10, 0x04, 0x03, 0xce, 0xce, 0x41,
	0x6d, 0xc5, 0xcf, 0x95, 0x15, 0x5e, 0x02, 0xf2, 0x45, 0x21, 0x47, 0x16, 0xce, 0x15, 0x03, 0x68,
	0xce, 0x15, 0x04, 0x4a, 0xce, 0x95, 0x15, 0x0d, 0xdb, 0xf8, 0xb5, 0x61, 0x36, 0x89, 0x33, 0x38,
	0xab, 0x5d, 0xaf, 0x6e, 0xbb, 0xca, 0x92, 0x45, 0x84, 0x18, 0x40, 0x77, 0x33, 0xc9, 0x80, 0x54,
	0x84, 0x81, 0x3b, 0xa9, 0xe1, 0x4b, 0x25, 0xc0, 0x80, 0x72, 0xa4, 0x15, 0xf1, 0x05, 0x1e, 0x60,
	0xc3, 0x41, 0xb2, 0x26, 0xa5, 0x0f, 0xe1, 0x7f, 0x97, 0x20, 0x47, 0xc0, 0x20, 0xa1, 0x8e, 0x80,
	0x41, 0xb2, 0xf6, 0x42, 0x84, 0x24, 0x78, 0x3d, 0xdb, 0x5b, 0x06, 0xed, 0x66, 0x1c, 0x0a, 0xc7,
	0x72, 0xe9, 0xc6, 0x79, 0x31, 0x68, 0xcf, 0x87, 0xc8, 0xda, 0x53, 0x82, 0x10, 0x02, 0x25, 0xc0,
	0xc0, 0xd3, 0x75, 0xd0, 0x2e, 0x26, 0x77, 0xc3, 0x34, 0x88, 0xa7, 0xeb, 0xa0, 0x8d, 0x1c, 0x53,
	0x78, 0x2d, 0x7d, 0xba, 0x0e, 0x04, 0x67, 0xb0, 0xa3, 0x14, 0xec, 0xb9, 0xa9, 0x51, 0x0a, 0xfe,
	0x1e, 0x3b, 0x8e, 0xe7, 0x14, 0xa2, 0x5e, 0xf1, 0x8e, 0x29, 0x2b, 0x01, 0xfe, 0x49, 0xda, 0xa7,
	0x76, 0x54, 0x47, 0x67, 0xa3, 0x3e, 0xb5, 0x0a, 0xc8, 0x8e, 0xce, 0x06, 0x3e, 0xb5, 0x2b, 0x6c,
	0xaa, 0xb6, 0x85, 0x79, 0x11, 0x1a, 0x41, 0xb6, 0x23, 0xf7, 0xa7, 0xf6, 0xdd, 0xbd, 0x18, 0xb4,
	0xa9, 0x2f, 0xa9, 0x02, 0xb2, 0xdb, 0x81, 0x3d, 0xf9, 0x26, 0x36, 0xa6, 0xda, 0x59, 0x12, 0xa2,
	0x00, 0xbc, 0xfc, 0x17, 0xf2, 0x7f, 0x1c, 0x01, 0x41, 0xd5, 0x1b, 0xca, 0x0a, 0x8a, 0x8a, 0x68,
	0xb2, 0xb0, 0xf1, 0x0f, 0x3c, 0xb3, 0xf2, 0xa5, 0x3e, 0xd1, 0xa4, 0xcc, 0xf9, 0x06, 0x8f, 0x8d,
	0xe9, 0xd4, 0xe5, 0x2a, 0x22, 0x8f, 0x47, 0x4d, 0x88, 0x2c, 0x64, 0x58, 0x81, 0x20, 0x49, 0x5b,
	0x15, 0x28, 0x29, 0xbb, 0x45, 0x91, 0x6e, 0x7e, 0x8a, 0xd5, 0xf8, 0xfd, 0x21, 0x76, 0xd8, 0xd1,
	0x84, 0xff, 0x26, 0x36, 0x1a, 0x16, 0xa5, 0xf0, 0xc2, 0x93, 0x5a, 0xce, 0x31, 0x92, 0x1c, 0x5a,
	0x6b, 0x7c, 0xe7, 0x96, 0x2e, 0x82, 0x17, 0x1e, 0xba, 0x98, 0x2a, 0x44, 0x32, 0x24, 0x61, 0x51,
	0x02, 0x1c, 0xdc, 0x0d, 0x15, 0x8f, 0x1b, 0x42, 0x77, 0x43, 0xc3, 0xc6, 0x8e, 0x6b, 0xa5, 0x56,
	0x85, 0x7b, 0x69, 0x54, 0x70, 0x5a, 0x93, 0xff, 0xab, 0xc7, 0x7e, 0xf9, 0x62, 0xad, 0x28, 0x91,
	0x40, 0x8b, 0x06, 0xd4, 0xf6, 0xb9, 0x11, 0xb0, 0x21, 0xff, 0xe4, 0x22, 0x6f, 0xc9, 0x4f, 0xde,
	0x35, 0xe8, 0x93, 0x97, 0x2e, 0xcc, 0x5a, 0x9f, 0xac, 0x11, 0xe9, 0x2a, 0xc8, 0x5b, 0x00, 0xd7,
	0xb8, 0xc2, 0x26, 0x1f, 0x21, 0x29, 0x7a, 0x0d, 0x3b, 0x01, 0x21, 0x5e, 0xc4, 0x1c, 0x91, 0x51,
	0x07, 0x35, 0xb3, 0x15, 0x40, 0x34, 0x60, 0x24, 0x02, 0x75, 0x84, 0x27, 0x81, 0x90, 0x6f, 0x7f,
	0xc3, 0x4f, 0x98, 0x4e, 0x7a, 0x75, 0xba, 0x1d, 0x27, 0x6d, 0x65, 0xcb, 0xae, 0x0c, 0x4c, 0xbd,
	0xeb, 0x33, 0x30, 0xbd, 0x49, 0x73, 0x15, 0x33, 0x5f, 0x1a, 0xdb, 0x37, 0xe3, 0x44, 0x6b, 0x8c,
	0xc5, 0x94, 0x41, 0xec, 0x29, 0xd9, 0xcd, 0xf9, 0xc4, 0xa8, 0x8a, 0xef, 0x31, 0x76, 0x39, 0x14,
	0x8f, 0xbc, 0xe1, 0x95, 0x16, 0x62, 0xe3, 0xe3, 0x1e, 0x3b, 0x62, 0x7f, 0x3d, 0x70, 0x8a, 0x6f,
	0xf2, 0x98, 0x0f, 0x87, 0x62, 0xc0, 0x6b, 0x90, 0xa7, 0x00, 0x79, 0x61, 0xb4, 0x51, 0x45, 0xf7,
	0xec, 0x52, 0xd3, 0xbd, 0x2a, 0xc5, 0x4a, 0xc2, 0x7f, 0x8c, 0xd8, 0xf8, 0x93, 0x5d, 0xec, 0x8e,
	0xd3, 0x79, 0xd0, 0x8a, 0x56, 0x7a, 0x9d, 0x0b, 0x11, 0x78, 0x28, 0x5b, 0xbe, 0xd2, 0x11, 0x1b,
	0x5f, 0x6e, 0x67, 0xcd, 0xd5, 0xa8, 0x93, 0x45, 0xb9, 0x74, 0xb4, 0x94, 0x17, 0x74, 0x38, 0xf5,
	0x67, 0x4e, 0x2f, 0x9e, 0x81, 0x3a, 0x71, 0x51, 0x33, 0xa7, 0x7e, 0x05, 0x8b, 0x6c, 0xfc, 0xe5,
	0x76, 0x86, 0xd1, 0xfc, 0x87, 0xd9, 0x1e, 0x49, 0x5b, 0x9c, 0x8f, 0x22, 0xe0, 0x9f, 0x22, 0xa9,
	0x02, 0xfe, 0x55, 0xe8, 0x48, 0x24, 0xbf, 0xcd, 0xfc, 0x28, 0x09, 0x9b, 0xe9, 0x4a, 0x33, 0x8f,
	0x97, 0xf5, 0x60, 0x0e, 0x6b, 0x93, 0xfa, 0x43, 0xa7, 0x92, 0xf0, 0xfc, 0xca, 0x85, 0x78, 0xb9,
	0x32, 0x62, 0x55, 0x34, 0xd2, 0xcf, 0x88, 0xe2, 0xf9, 0x6f, 0x65, 0x13, 0x9d, 0x34, 0xe1, 0x87,
	0x44, 0x3f, 0x0a, 0x9b, 0xb9, 0x18, 0x32, 0xa1, 0x8d, 0x17, 0x6e, 0x33, 0xf0, 0xa4, 0x77, 0x36,
	0x4d, 0xda, 0x67, 0x39, 0x84, 0x1c, 0x53, 0xa9, 0x92, 0xd7, 0x66, 0x89, 0x4e, 0x02, 0xe4, 0x49,
	0xaf, 0xe3, 0xa0, 0xc0, 0x25, 0x40, 0xd2, 0xe2, 0x6e, 0xe3, 0x56, 0x42, 0x1b, 0xba, 0x43, 0x45,
	0xd2, 0x73, 0x53, 0xdf, 0x97, 0x23, 0xa2, 0x31, 0xf3, 0xaf, 0x75, 0x33, 0x7b, 0x86, 0xf7, 0x98,
	0x40, 0x6c, 0x6f, 0x5c, 0x58, 0xb4, 0xa7, 0x58, 0x8e, 0x5d, 0x15, 0x8f, 0xac, 0x36, 0x5e, 0x8d,
	0x11, 0x1b, 0xef, 0xd8, 0xcd, 0xf6, 0xa1, 0xb8, 0xba, 0xa0, 0xef, 0x94, 0xa9, 0xd8, 0xb0, 0xbe,
	0x53, 0xa7, 0x5d, 0x9b, 0xd4, 0xe6, 0x05, 0x76, 0x7a, 0x35, 0x85, 0xa7, 0x49, 0xa4, 0x4a, 0xd9,
	0x69, 0x48, 0xa4, 0xb9, 0x45, 0x22, 0xcd, 0xab, 0x24, 0xd2, 0xdc, 0x7f, 0x8c, 0xed, 0x0b, 0xa3,
	0xa2, 0x95, 0xc7, 0x19, 0x8a, 0xdc, 0x03, 0xd1, 0x99, 0xe7, 0x4c, 0x31, 0x7a, 0xfa, 0x34, 0x85,
	0x34, 0x9e, 0xb1, 0x29, 0x47, 0xab, 0x79, 0xd7, 0x8d, 0xac, 0xe6, 0xc7, 0xd9, 0x81, 0x4e, 0x50,
	0x94, 0xcd, 0x6e, 0x1a, 0xc6, 0x2b, 0xb1, 0xf4, 0x5a, 0x97, 0x22, 0xe8, 0xd9, 0xa0, 0x28, 0x17,
	0x64, 0xb9, 0x11, 0x41, 0x09, 0x38, 0x11, 0x41, 0x3b, 0x08, 0xde, 0x6f, 0xb1, 0x7d, 0x59, 0x94,
	0x77, 0x63, 0xb0, 0x05, 0x57, 0x21, 0x8f, 0xc7, 0xec, 0x08, 0xbe, 0xe2, 0xe3, 0x17, 0x0d, 0x20,
	0x3a, 0xb7, 0x4c, 0x21, 0xf5, 0xcb, 0x33, 0xe5, 0x7c, 0x95, 0x42, 0x56, 0xbc, 0x7e, 0x5c, 0xc4,
	0x7c, 0x08, 0xf6, 0xc2, 0x10, 0xc0, 0x2a, 0xbd, 0x54, 0x44, 0xf9, 0x65, 0x51, 0x6c, 0x56, 0x29,
	0x06, 0x26, 0x44, 0x7b, 0x06, 0xda, 0x3f, 0x2d, 0xad, 0xdf, 0x47, 0x68, 0x97, 0xf9, 0x09, 0x63,
	0xcc, 0x60, 0xb6, 0x62, 0x0f, 0xdf, 0x65, 0x3a, 0x4f, 0xc2, 0xc5, 0x20, 0x6f, 0x47, 0x5a, 0xe8,
	0x8f, 0xbb, 0x22, 0xdc, 0xc3, 0x35, 0x7d, 0x30, 0x29, 0x1d, 0x3f, 0x54, 0x9c, 0x82, 0x72, 0xa4,
	0xe3, 0xc7, 0xe0, 0x54, 0xc7, 0x8f, 0xe0, 0x1b, 0x4f, 0xb3, 0x31, 0xad, 0xba, 0x5a, 0x08, 0x84,
	0x9c, 0xf5, 0x24, 0x1b, 0x15, 0xa9, 0x14, 0x8d, 0x4e, 0xe0, 0x08, 0x3e, 0xd9, 0xb5, 0x36, 0x00,
	0x4e, 0x77, 0x55, 0x82, 0x9e, 0x68, 0x15, 0x32, 0x3d, 0xdd, 0x24, 0x5c, 0xe3, 0xf7, 0x3c, 0x76,
	0xd8, 0xb4, 0x29, 0xc2, 0x0d, 0x0a, 0xbb, 0x0a, 0x14, 0xd3, 0xd0, 0x7b, 0x41, 0x62, 0x1a, 0xb6,
	0xd9, 0x78, 0x29, 0x8c, 0xbd, 0x9a, 0x76, 0xdc, 0x5b, 0x30, 0x8d, 0x51, 0x96, 0x60, 0x28, 0xfc,
	0xad, 0x3c, 0x2d, 0x2a, 0x68, 0xf4, 0x58, 0xb5, 0xf0, 0x1a, 0x6f, 0x61, 0x87, 0xb4, 0x3a, 0x48,
	0x6a, 0xc3, 0x1e, 0x65, 0xac, 0xa2, 0x87, 0x82, 0x87, 0x77, 0xac, 0x7b, 0xba, 0x4d, 0x6b, 0x45,
	0x1d, 0xda, 0xa6, 0xd1, 0x58, 0x6b, 0x98, 0x3e, 0x3b, 0xc4, 0xfc, 0xf9, 0x2c, 0xe8, 0xce, 0x25,
	0x05, 0x0e, 0x6e, 0xf7, 0x71, 0x8f, 0x1d, 0x2f, 0xa3, 0x24, 0x48, 0xca, 0x66, 0x98, 0x14, 0x52,
	0x19, 0x4f, 0xda, 0x44, 0xe6, 0x53, 0x56, 0x07, 0x45, 0x42, 0x8c, 0x8b, 0x80, 0x3d, 0x77, 0x6e,
	0x49, 0xa8, 0xeb, 0x2b, 0x09, 0x6c, 0x6a, 0xa9, 0x13, 0xc5, 0x84, 0x80, 0x9a, 0x4b, 0x0a, 0x42,
	0x05, 0x27, 0xdc, 0x44, 0x04, 0x90, 0xea, 0x1e, 0x27, 0xdc, 0xd4, 0x7d, 0x90, 0x7a, 0x53, 0x2b,
	0xe1, 0xa6, 0x45, 0xc0, 0x95, 0x70, 0x53, 0xb7, 0x0f, 0x3a, 0xfe, 0x9f, 0xde, 0xcf, 0x0e, 0xf2,
	0x21, 0x43, 0xb2, 0xe4, 0x93, 0x0c, 0xfc, 0x3e, 0x9a, 0x2b, 0x79, 0xda, 0x95, 0x71, 0x52, 0x84,
	0xe4, 0xf0, 0x1a, 0xe5, 0x2c, 0xfd, 0x48, 0x9e, 0x76, 0x55, 0xac, 0x94, 0xbb, 0xcc, 0x6d, 0x1a,
	0x61, 0x54, 0xbc, 0xa5, 0x35, 0x0a, 0xf8, 0x90, 0x74, 0x3a, 0x69, 0xab, 0xd9, 0x4b, 0x62, 0x12,
	0x81, 0x05, 0x22, 0x7a, 0x5d, 0x4a, 0x62, 0x64, 0xa4, 0x6f, 0x00, 0xa9, 0x25, 0xa1, 0x82, 0xf4,
	0xff, 0x3e, 0x1b, 0x0b, 0x74, 0x20, 0x30, 0x08, 0xa0, 0xc5, 0x25, 0xc2, 0x4a, 0x38, 0x28, 0x1a,
	0x28, 0x4c, 0x7a, 0xc4, 0x90, 0x72, 0xec, 0x11, 0x63, 0x11, 0xa4, 0x1e, 0x31, 0x14, 0x0b, 0x1f,
	0x86, 0xbb, 0x6e, 0xf0, 0x30, 0x6c, 0xb2, 0x43, 0xca, 0x05, 0x5c, 0xfa, 0x9b, 0xe1, 0x48, 0x80,
	0xd2, 0x62, 0x51, 0x7a, 0x9a, 0x99, 0x01, 0xb7, 0x50, 0xa8, 0xdd, 0x14, 0xc1, 0xf1, 0xdf, 0x4e,
	0x4d, 0xb3, 0xe0, 0x3a, 0xbd, 0x87, 0x7a, 0x06, 0x38, 0x6c, 0x8e, 0x6c, 0xbb, 0x2d, 0x79, 0xe5,
	0x76, 0xd8, 0x6d, 0xd9, 0x57, 0x6f, 0x64, 0xb7, 0x05, 0x42, 0xb3, 0xb2, 0xdb, 0xca, 0xa3, 0x4e,
	0xb0, 0xa6, 0x1e, 0xcf, 0xf6, 0x52, 0xbb, 0xad, 0x0b, 0xbc, 0x4e, 0x3f, 0x9f, 0x61, 0xbb, 0x2d,
	0x8c, 0x55, 0xb1, 0xdb, 0x42, 0x68, 0x30, 0x8e, 0x89, 0x78, 0xce, 0x12, 0xd0, 0xc5, 0xe4, 0x08,
	0xdc, 0x83, 0xc4, 0x38, 0x9e, 0x83, 0xa7, 0x2f, 0x59, 0x83, 0xc6, 0x91, 0xa2, 0xd0, 0xef, 0x48,
	0x0a, 0x84, 0xc3, 0x65, 0x2e, 0x07, 0xff, 0x10, 0x8e, 0x8a, 0x20, 0x73, 0x39, 0x18, 0xc4, 0x3d,
	0xa6, 0x95, 0x7a, 0xce, 0x30, 0x16, 0xda, 0x3c, 0xe1, 0x3c, 0xdb, 0x27, 0xa4, 0x8a, 0x26, 0xff,
	0x4a, 0xe9, 0x80, 0x02, 0xf7, 0x39, 0x21, 0x8f, 0xf0, 0x21, 0x33, 0xe7, 0x3b, 0x02, 0x25, 0xf7,
	0x39, 0x51, 0xce, 0xe7, 0xd6, 0x6f, 0xb3, 0x7d, 0x10, 0x80, 0x17, 0x5c, 0x35, 0x0a, 0x70, 0x42,
	0x41, 0x06, 0x64, 0xe0, 0xff, 0x71, 0x91, 0x03, 0x1b, 0x03, 0xb2, 0x33, 0x69, 0x51, 0x42, 0x39,
	0x12, 0x24, 0x10, 0x09, 0xd2, 0xd0, 0xaa, 0x86, 0xad, 0x4a, 0x41, 0xfb, 0x6f, 0x92, 0x14, 0x64,
	0xb4, 0x6a, 0x07, 0x6e, 0x96, 0x56, 0xcd, 0xdc, 0x9a, 0x81, 0xdb, 0x1e, 0x34, 0x9e, 0x8f, 0x82,
	0x86, 0xe4, 0xb1, 0xf4, 0xd6, 0x6c, 0xf3, 0x55, 0x79, 0x6b, 0x3e, 0x27, 0x13, 0x41, 0xe0, 0x6b,
	0xf8, 0x21, 0x9b, 0xe0, 0xf5, 0x5e, 0xc3, 0x21, 0x74, 0xaa, 0xb6, 0xa8, 0x02, 0x6f, 0x99, 0x31,
	0x14, 0x3a, 0x55, 0xd7, 0x08, 0x9f, 0x99, 0x29, 0xdb, 0x32, 0xcb, 0xf6, 0x9c, 0x39, 0x50, 0x60,
	0x0c, 0xe2, 0x84, 0x33, 0x7e, 0xa3, 0x4e, 0x38, 0xab, 0x6c, 0x9f, 0x39, 0x3f, 0x0a, 0xff, 0x4d,
	0x6c, 0xaf, 0xe8, 0x7e, 0x61, 0x1b, 0x29, 0xd2, 0x53, 0x46, 0x7a, 0xec, 0x0b, 0x50, 0xe4, 0xb1,
	0x2f, 0x0a, 0xa8, 0xc7, 0xbe, 0x28, 0x6b, 0x7c, 0x69, 0x17, 0x1b, 0x51, 0xd9, 0x7f, 0xfc, 0x26,
	0x63, 0xad, 0x38, 0xcc, 0x9b, 0xcb, 0x9d, 0xb4, 0x75, 0xc5, 0x0e, 0x41, 0x8f, 0x9a, 0x11, 0x7e,
	0xd3, 0x71, 0x98, 0xcf, 0x70, 0x40, 0x64, 0xfc, 0xac, 0x91, 0xa9, 0x2e, 0x5f, 0x41, 0x3a, 0x99,
	0xe6, 0xd0, 0x2d, 0x64, 0x9a, 0xd6, 0x86, 0x1d, 0x7e, 0xc1, 0x36, 0xec, 0x93, 0xec, 0x10, 0xe4,
	0x9a, 0xe3, 0x2c, 0xaa, 0x1b, 0x95, 0xab, 0xa9, 0x3a, 0xc9, 0xe0, 0xb8, 0x07, 0x71, 0xea, 0xdc,
	0xd2, 0x02, 0x54, 0x18, 0xae, 0x69, 0x61, 0x90, 0x45, 0x16, 0x0b, 0x09, 0x4c, 0xa0, 0xf8, 0x6b,
	0x88, 0xbc, 0x64, 0xfd, 0xbb, 0xa9, 0x6b, 0x66, 0x55, 0x62, 0x23, 0x4d, 0xeb, 0x43, 0xc1, 0x6e,
	0xda, 0x61, 0x54, 0x21, 0x9b, 0x96, 0x07, 0x02, 0xbc, 0xb9, 0x07, 0x5d, 0xf5, 0x55, 0x7b, 0xcc,
	0x6e, 0xe4, 0xa4, 0xf5, 0x27, 0xdd, 0x8e, 0xe8, 0x56, 0x3f, 0x87, 0xc5, 0x1a, 0xb6, 0xb1, 0xca,
	0xc6, 0xdf, 0xd0, 0x4b, 0xd2, 0x42, 0xc5, 0xa7, 0x03, 0x4d, 0xe4, 0x12, 0xdb, 0x2f, 0x75, 0xa4,
	0x4d, 0x79, 0x07, 0x19, 0x56, 0x0f, 0x3c, 0x08, 0xce, 0x5c, 0x9c, 0x30, 0x30, 0xb9, 0x38, 0x15,
	0x06, 0xba, 0xf1, 0x01, 0x8f, 0xed, 0xc7, 0x89, 0x87, 0xfc, 0xaf, 0xc2, 0xf1, 0x08, 0xef, 0x93,
	0xf1, 0x08, 0x9f, 0x5d, 0x9f, 0xe2, 0xa5, 0x83, 0xc3, 0x12, 0xce, 0xb0, 0xdd, 0xd8, 0x52, 0x9a,
	0x6f, 0x88, 0xdd, 0x40, 0xf7, 0xd9, 0xf5, 0x29, 0x51, 0x63, 0x6c, 0x77, 0x2b, 0xc6, 0xd1, 0x02,
	0xa0, 0xf1, 0x0d, 0x1e, 0x3b, 0x40, 0xf2, 0x20, 0xf9, 0x29, 0x3b, 0x78, 0x25, 0x5a, 0x93, 0xb6,
	0xcd, 0x28, 0x0a, 0xe7, 0x11, 0x57, 0xda, 0x24, 0x78, 0xdc, 0x26, 0xdf, 0x63, 0xb8, 0x15, 0xa5,
	0x42, 0xd8, 0xff, 0x15, 0x84, 0xd0, 0xf8, 0xe8, 0x5e, 0x76, 0xfc, 0x6c, 0x9c, 0x5c, 0x01, 0xcf,
	0x4f, 0x39, 0xb0, 0xa7, 0x92, 0x32, 0x17, 0x19, 0x11, 0xbe, 0xd7, 0x63, 0x27, 0xe2, 0xac, 0xb9,
	0x02, 0xaf, 0x6f, 0xcd, 0xb9, 0x73, 0x4b, 0x4a, 0x6f, 0x8d, 0x0d, 0xd1, 0xdb, 0x5c, 0x94, 0x9f,
	0x5f, 0x14, 0x4f, 0x74, 0x72, 0x65, 0xc5, 0xad, 0x88, 0x73, 0xee, 0x67, 0xd7, 0xa7, 0x06, 0xe0,
	0x1b, 0xdb, 0x80, 0x7a, 0x18, 0x22, 0xe9, 0xc7, 0x99, 0xab, 0x11, 0xff, 0x3d, 0x1e, 0x3b, 0x62,
	0x28, 0x28, 0xec, 0x58, 0xc5, 0xc3, 0xbe, 0xbc, 0xb1, 0x3e, 0x35, 0xae, 0xfa, 0x27, 0xf1, 0xe6,
	0x17, 0x9f, 0x5d, 0x9f, 0x72, 0x22, 0xe1, 0x50, 0x05, 0xd5, 0x5a, 0x62, 0x8e, 0xa2, 0xba, 0xa3,
	0x68, 0x66, 0xfe, 0xb7, 0x7a, 0xec, 0x58, 0x15, 0x0d, 0xd6, 0xaf, 0x50, 0xbf, 0x7d, 0xdd, 0xc6,
	0xfa, 0xd4, 0x61, 0xab, 0x2f, 0x7c, 0x65, 0x3e, 0xbb, 0x3e, 0x55, 0x83, 0x68, 0x02, 0xcc, 0xb8,
	0xeb, 0x89, 0xb5, 0xa5, 0xd5, 0x23, 0xb0, 0xc7, 0x79, 0x9f, 0xc7, 0x8e, 0x74, 0xd4, 0x0c, 0xe3,
	0xd1, 0x11, 0xec, 0xe8, 0xf1, 0x8d, 0xf5, 0x29, 0xdf, 0x5e, 0x01, 0x62, 0x78, 0x5c, 0x58, 0x66,
	0x78, 0x5c, 0xb5, 0xc4, 0xe0, 0xb4, 0x63, 0x13, 0xcd, 0xfc, 0x6f, 0xf3, 0xd8, 0xb1, 0x2a, 0x1e,
	0xac, 0x25, 0x21, 0x9b, 0x3f, 0x09, 0x0a, 0x43, 0x0b, 0x51, 0xae, 0xa4, 0x1a, 0x4c, 0x33, 0x40,
	0xee, 0x7a, 0xaa, 0x49, 0x74, 0x90, 0xae, 0xe9, 0x95, 0x36, 0xdb, 0x19, 0x76, 0xf7, 0x4a, 0x4d,
	0x9b, 0x1b, 0x73, 0x50, 0xaf, 0xec, 0x69, 0xab, 0xf4, 0x0a, 0x78, 0xd5, 0x4f, 0x78, 0xec, 0x98,
	0xdd, 0x26, 0xb0, 0xf1, 0xc2, 0xff, 0xa4, 0xc7, 0x26, 0xaa, 0x64, 0x23, 0xbe, 0x6d, 0x25, 0xbf,
	0xb8, 0x5b, 0xc7, 0x3c, 0xac, 0xdb, 0xdb, 0xd2, 0x67, 0xdc, 0x55, 0x8d, 0x94, 0xb3, 0xee, 0x46,
	0xa8, 0xcf, 0xb8, 0x8b, 0x44, 0xe3, 0x3d, 0xbb, 0xd9, 0x1d, 0x67, 0xd3, 0x20, 0x5c, 0x0e, 0x3a,
	0x41, 0xd2, 0x8a, 0xf2, 0x33, 0x51, 0xd0, 0x29, 0x57, 0xbb, 0x69, 0x12, 0x97, 0xa9, 0x0e, 0x67,
	0x21, 0x62, 0x19, 0x14, 0x65, 0x50, 0x2a, 0x2d, 0xba, 0x88, 0x53, 0xc0, 0x8b, 0x97, 0x78, 0x29,
	0x8a, 0x53, 0x60, 0x40, 0x69, 0x9c, 0x02, 0x0d, 0xeb, 0xbf, 0x8e, 0xed, 0x0e, 0xf9, 0xbd, 0x45,
	0x5e, 0x7e, 0xc1, 0xc3, 0x72, 0x8e, 0x17, 0x18, 0x46, 0x0c, 0xf5, 0xd4, 0xae, 0x8f, 0x97, 0x70,
	0x79, 0x30, 0xba, 0x96, 0x45, 0xad, 0x32, 0x0a, 0x9b, 0xad, 0x34, 0xd4, 0x2e, 0x29, 0x20, 0x0f,
	0x9e, 0x92, 0x35, 0xb3, 0xbc, 0xc2, 0x70, 0x58, 0x8a, 0x40, 0xcd, 0x87, 0x30, 0x06, 0xff, 0xd0,
	0xd5, 0xb2, 0xcc, 0xa8, 0x14, 0x20, 0x44, 0x8b, 0x8b, 0x17, 0x17, 0xed, 0xf3, 0x12, 0x81, 0x52,
	0xd1, 0xa2, 0x2c, 0x33, 0x79, 0xf6, 0x9f, 0x67, 0xfb, 0xba, 0xc1, 0xb5, 0x66, 0x1e, 0x41, 0xc6,
	0x29, 0xa9, 0xf8, 0x06, 0x82, 0x0b, 0xc1, 0xb5, 0x0b, 0xa2, 0xd4, 0x10, 0x44, 0xa0, 0x84, 0x60,
	0x57, 0xc3, 0xf2, 0xb3, 0x56, 0xce, 0x8c, 0x78, 0xac, 0xdd, 0x63, 0x8c, 0x29, 0x16, 0xcc, 0x8c,
	0x99, 0xb3, 0x16, 0x03, 0x93, 0xb3, 0x16, 0xcf, 0xef, 0x34, 0xdb, 0xab, 0x9e, 0x1e, 0xf6, 0x1a,
	0x6f, 0x44, 0xf3, 0xe4, 0x30, 0x49, 0xde, 0x90, 0xe8, 0xdb, 0xaf, 0x7c, 0x5f, 0x98, 0x65, 0x23,
	0xbd, 0xbc, 0x23, 0x2c, 0x67, 0x46, 0x8c, 0xb9, 0xe5, 0xa5, 0x0b, 0x67, 0xa5, 0xc9, 0x8c, 0xb2,
	0x30, 0x95, 0x40, 0x84, 0x48, 0x2f, 0xef, 0x70, 0xa8, 0xc6, 0x6f, 0xed, 0x62, 0x93, 0x78, 0x25,
	0x72, 0x31, 0x30, 0x4a, 0xa2, 0x17, 0x68, 0x11, 0x5e, 0x65, 0x63, 0x26, 0x4a, 0x28, 0xb1, 0xe0,
	0x3f, 0xcb, 0xef, 0xe4, 0xc6, 0x19, 0x15, 0x4c, 0xe1, 0x9f, 0x5d, 0x9f, 0xaa, 0x80, 0x63, 0xaf,
	0x71, 0x5a, 0x43, 0xae, 0xe9, 0x2d, 0x4a, 0xc9, 0xef, 0xb1, 0xa3, 0x3a, 0xe2, 0x5d, 0x47, 0x44,
	0x0c, 0x0e, 0xe2, 0x24, 0x52, 0xae, 0x80, 0xd3, 0xc2, 0xb1, 0x55, 0x44, 0xbc, 0x3b, 0x0b, 0x11,
	0x8c, 0xa1, 0xda, 0xd8, 0xf2, 0x3b, 0xb1, 0x2d, 0xcf, 0x56, 0x81, 0xde, 0x29, 0x34, 0x3a, 0x79,
	0x84, 0xdc, 0x75, 0xe3, 0x8f, 0x90, 0xc2, 0xab, 0x42, 0xbc, 0x02, 0x6b, 0x1b, 0x75, 0xe3, 0x55,
	0x01, 0x15, 0x8b, 0x44, 0xe5, 0x4c, 0xc0, 0x6d, 0xaf, 0x0a, 0x0d, 0x0f, 0x37, 0xbd, 0x24, 0x36,
	0x1f, 0xa4, 0xfc, 0xaf, 0xc5, 0x4d, 0x2f, 0x89, 0xf5, 0x97, 0xa0, 0x9d, 0x4d, 0x11, 0xe8, 0x4d,
	0x0f, 0x63, 0x34, 0x7e, 0x6c, 0x17, 0x3b, 0x86, 0x97, 0x96, 0x88, 0xc6, 0xa0, 0x56, 0xff, 0xf3,
	0x0d, 0x24, 0x66, 0xad, 0xcd, 0xa1, 0xe7, 0xbd, 0x36, 0x2b, 0x83, 0x3c, 0x7c, 0x93, 0x06, 0xf9,
	0x61, 0xb6, 0x87, 0x37, 0xdc, 0x2b, 0xe4, 0x12, 0x10, 0xfa, 0x02, 0x28, 0x41, 0xfa, 0x02, 0xf8,
	0x4d, 0xf5, 0x05, 0x50, 0xe4, 0x5f, 0x61, 0xbe, 0xf8, 0xaf, 0x89, 0x9f, 0x9e, 0x84, 0x40, 0x00,
	0x16, 0xc3, 0x82, 0x14, 0x7d, 0x80, 0xba, 0x07, 0x53, 0x6d, 0xd6, 0xbc, 0x43, 0x8d, 0x17, 0x36,
	0x26, 0x18, 0xf8, 0x0a, 0x05, 0x41, 0xac, 0xee, 0x2e, 0xc2, 0x6e, 0x00, 0x0a, 0xb1, 0x13, 0x92,
	0x06, 0xa3, 0x76, 0x03, 0x02, 0x2e, 0xe4, 0x1f, 0x2d, 0x0c, 0xe5, 0x24, 0x7b, 0x83, 0x8f, 0x16,
	0x76, 0x71, 0xe6, 0xa3, 0x05, 0x04, 0xf9, 0x68, 0x51, 0xd4, 0x78, 0xe7, 0x1e, 0x76, 0x04, 0xaf,
	0x1d, 0x9d, 0x6e, 0xe1, 0xa6, 0xb3, 0xa4, 0x94, 0x1d, 0xee, 0xa0, 0x86, 0xd4, 0x39, 0x24, 0x84,
	0x63, 0xf0, 0xea, 0xa7, 0x6b, 0x58, 0x9e, 0x47, 0x27, 0xd5, 0xfb, 0x6c, 0x05, 0x95, 0x4a, 0x79,
	0x15, 0x5c, 0xff, 0x6d, 0x6c, 0x22, 0x8b, 0xf2, 0x02, 0xf8, 0x6c, 0x2b, 0x6a, 0xb6, 0xd2, 0xf4,
	0x4a, 0x1c, 0xe1, 0x04, 0xa9, 0x20, 0x7a, 0x2c, 0x1a, 0x90, 0x59, 0x80, 0xa0, 0xaa, 0xf7, 0x1a,
	0x0a, 0x44, 0xf4, 0xc8, 0x5c, 0x24, 0x6e, 0x16, 0x4b, 0x4a, 0xd9, 0x61, 0x19, 0xd4, 0xb0, 0x89,
	0xda, 0x91, 0xcb, 0xf2, 0xef, 0x0a, 0x77, 0x2c, 0xa8, 0x46, 0x1f, 0x62, 0x86, 0xcd, 0x81, 0x6a,
	0x79, 0x63, 0xd9, 0xb8, 0x68, 0x17, 0xed, 0xb9, 0x79, 0xbb, 0x68, 0xef, 0x2d, 0xd8, 0x45, 0x23,
	0x37, 0xbe, 0x8b, 0x1a, 0x9f, 0xdc, 0xc5, 0xc6, 0xf0, 0xf2, 0x7b, 0x61, 0xb6, 0x00, 0x0d, 0x17,
	0x22, 0x06, 0x79, 0xc8, 0x15, 0x2e, 0x44, 0x8d, 0x76, 0x35, 0x5c, 0x48, 0x65, 0xdc, 0x51, 0xb8,
	0x10, 0x31, 0x01, 0x29, 0x3b, 0x0c, 0xc9, 0xce, 0xf9, 0xbc, 0xa2, 0x76, 0x86, 0xcd, 0x82, 0x59,
	0x44, 0xd5, 0xba, 0xa9, 0x93, 0x28, 0xa3, 0x3a, 0x45, 0x25, 0x0b, 0x26, 0xab, 0xe0, 0x3e, 0x5f,
	0xb6, 0x7b, 0x9e, 0xed, 0xeb, 0x57, 0x82, 0x8e, 0x8a, 0xb0, 0x22, 0xfa, 0xed, 0x0f, 0x85, 0x15,
	0x71, 0x3f, 0x13, 0xb2, 0xbe, 0x86, 0xf5, 0x2f, 0xb1, 0x03, 0x1c, 0xca, 0x66, 0xaf, 0x0f, 0x70,
	0x39, 0xf2, 0x72, 0x9c, 0xa1, 0xb5, 0x71, 0xa7, 0xa1, 0xe9, 0x5c, 0x1f, 0xbc, 0x63, 0x4b, 0x6a,
	0x89, 0xfc, 0xd4, 0x10, 0x73, 0x45, 0x68, 0xf7, 0x5f, 0xcf, 0xf6, 0x8a, 0xc7, 0xdf, 0x10, 0xe9,
	0x6f, 0xf6, 0xc0, 0x0b, 0xf1, 0x1c, 0x0a, 0x24, 0x25, 0x40, 0x68, 0xae, 0x5d, 0x0e, 0x63, 0x92,
	0x16, 0xc4, 0x49, 0x18, 0x5d, 0x43, 0x7a, 0x9c, 0x51, 0xf1, 0xca, 0x1c, 0x46, 0xd7, 0xac, 0xa4,
	0x05, 0x00, 0x58, 0x49, 0x5a, 0x00, 0x90, 0xb0, 0x23, 0xae, 0xc6, 0x65, 0x6b, 0xb5, 0x49, 0x03,
	0xbe, 0x2f, 0x41, 0x21, 0xd9, 0x11, 0x0a, 0x8c, 0xee, 0x08, 0x01, 0x07, 0xd2, 0xbd, 0x82, 0x48,
	0x56, 0x52, 0x7c, 0x5d, 0x90, 0xa4, 0x48, 0xec, 0x6e, 0x04, 0x4a, 0x95, 0xdd, 0x1a, 0xb6, 0xf1,
	0x2b, 0x1e, 0x9b, 0x3a, 0x9b, 0xb6, 0xe3, 0x96, 0x95, 0x4b, 0x1c, 0xd9, 0x49, 0xfb, 0x9f, 0xf6,
	0xd8, 0x3d, 0x1d, 0x01, 0x23, 0x43, 0xab, 0x35, 0x6d, 0xdf, 0x4e, 0x64, 0x66, 0xfd, 0xc4, 0xc6,
	0xfa, 0xd4, 0x66, 0x24, 0x9f, 0x5b, 0x9f, 0x7a, 0xb5, 0x4e, 0x29, 0xb8, 0x19, 0x5d, 0xdc, 0xf5,
	0xa9, 0xce, 0x60, 0xc2, 0x8d, 0xcf, 0x7b, 0xec, 0xf0, 0xc2, 0xf4, 0x2c, 0x88, 0xbd, 0x2a, 0xa8,
	0x0a, 0xff, 0x86, 0xd3, 0x6c, 0xb4, 0x1b, 0xb4, 0x88, 0x57, 0xae, 0x78, 0xb8, 0x0f, 0x5a, 0xca,
	0x6d, 0xf5, 0x84, 0xf6, 0x8a, 0xab, 0x4a, 0xd4, 0x23, 0x5d, 0x09, 0xe7, 0x07, 0x6c, 0x4c, 0x43,
	0xa8, 0xf0, 0x62, 0x43, 0x26, 0xe6, 0x82, 0xa2, 0xa7, 0xa3, 0x8b, 0xdd, 0x6d, 0x51, 0x75, 0x04,
	0x17, 0x3b, 0xd8, 0x25, 0x48, 0x8d, 0xdf, 0x1e, 0x62, 0x13, 0x0b, 0xd3, 0xb3, 0x0b, 0x69, 0x3f,
	0xaa, 0x7c, 0xc7, 0x9b, 0x18, 0x87, 0x6e, 0x76, 0xd3, 0x7e, 0x44, 0x3e, 0x06, 0xb4, 0x7d, 0x0b,
	0x41, 0x4b, 0x23, 0x19, 0x89, 0x95, 0xc2, 0x13, 0x41, 0xad, 0x8b, 0x10, 0xfc, 0x82, 0x1d, 0xa5,
	0xa0, 0xf4, 0xf3, 0x20, 0x4d, 0x34, 0x6e, 0x61, 0xda, 0xca, 0x85, 0xe0, 0x44, 0x26, 0x6c, 0xaa,
	0x5b, 0xc1, 0xf6, 0x53, 0x76, 0x44, 0xe3, 0x41, 0xbc, 0xf1, 0xab, 0x71, 0x12, 0xa6, 0x57, 0xa5,
	0xf4, 0xc9, 0x19, 0xe3, 0xb8, 0x6c, 0x93, 0x5f, 0x0e, 0x1f, 0x87, 0x4a, 0xa3, 0x66, 0x72, 0xa1,
	0x92, 0xc3, 0xa9, 0x6b, 0xe3, 0x36, 0x5a, 0x6c, 0x6c, 0x21, 0x68, 0x51, 0x83, 0x08, 0xb8, 0x33,
	0xb7, 0x90, 0x75, 0x82, 0xb6, 0xe4, 0x34, 0xa0, 0xf8, 0xce, 0xdc, 0x72, 0x32, 0xbb, 0xae, 0x86,
	0xe5, 0x07, 0x97, 0x5f, 0x4d, 0x32, 0xec, 0x87, 0x6c, 0x5f, 0x58, 0x94, 0x96, 0x15, 0xc4, 0x61,
	0x2b, 0x86, 0x24, 0x0a, 0x27, 0xb1, 0x74, 0xb1, 0xd2, 0x38, 0xc2, 0xa7, 0x9e, 0xa8, 0x45, 0x69,
	0x38, 0xed, 0x88, 0x32, 0xe4, 0x95, 0xaf, 0x27, 0x55, 0x6b, 0x58, 0xe1, 0x99, 0x28, 0x0c, 0x80,
	0x91, 0x67, 0xa2, 0x44, 0xa3, 0x9e, 0x89, 0xc2, 0xfc, 0xd7, 0x9f, 0x67, 0xa3, 0x51, 0xb9, 0x1a,
	0xe5, 0x28, 0xe2, 0x03, 0xf8, 0x6c, 0x9c, 0x52, 0x85, 0xc8, 0x2d, 0x55, 0x15, 0xd1, 0x60, 0x0d,
	0xaa, 0xf4, 0x66, 0x09, 0x61, 0x21, 0xdb, 0x57, 0xe4, 0x2d, 0x72, 0x46, 0x0d, 0x1a, 0xce, 0xa5,
	0x0b, 0xb3, 0x95, 0xe1, 0x44, 0xf8, 0x94, 0x43, 0xe6, 0x2d, 0x34, 0x9c, 0xca, 0x48, 0xb8, 0x62,
	0x06, 0x46, 0x86, 0x53, 0x1a, 0x17, 0x23, 0x03, 0x73, 0x89, 0x46, 0x5f, 0xd6, 0x84, 0x69, 0x71,
	0xe3, 0xaf, 0x46, 0xd8, 0x98, 0x6d, 0x4b, 0xe4, 0x77, 0xd9, 0x61, 0x88, 0xd8, 0xf4, 0x0c, 0x0d,
	0xf9, 0x2d, 0x18, 0xeb, 0xc3, 0x7c, 0x33, 0x4c, 0xcb, 0x6a, 0x6c, 0xaa, 0x73, 0x12, 0x45, 0x80,
	0x7a, 0xa6, 0x36, 0xf4, 0xf7, 0xb8, 0xaa, 0x37, 0x39, 0xda, 0x9f, 0x66, 0x47, 0x34, 0x12, 0xde,
	0x00, 0x43, 0x26, 0x5c, 0xaf, 0x6a, 0x8f, 0x6c, 0x84, 0x7b, 0xad, 0x06, 0x6b, 0x76, 0x84, 0x1f,
	0x54, 0x90, 0xc1, 0x67, 0x44, 0xa1, 0x21, 0xa1, 0x5f, 0xf8, 0x8c, 0xc8, 0x0a, 0x1a, 0x1e, 0x87,
	0x80, 0x53, 0x9f, 0x11, 0x04, 0x5f, 0x75, 0xf1, 0x13, 0x0b, 0xeb, 0x26, 0xb8, 0xf8, 0xf9, 0x4f,
	0xb0, 0x83, 0x4f, 0xf5, 0x92, 0x38, 0x8b, 0xf2, 0xe6, 0x6a, 0x14, 0x84, 0xf2, 0x35, 0x4d, 0xba,
	0xdd, 0xbe, 0x41, 0xd4, 0x9c, 0x81, 0x0a, 0xc3, 0x74, 0x29, 0x02, 0x21, 0xfe, 0x14, 0xc6, 0xe0,
	0x82, 0x4a, 0xb2, 0x2a, 0xf2, 0xc7, 0xed, 0x31, 0x82, 0xca, 0xb9, 0x33, 0x32, 0xed, 0x90, 0x14,
	0x54, 0x24, 0x08, 0x11, 0x54, 0x92, 0x55, 0x48, 0x18, 0xb7, 0xc6, 0x8e, 0x25, 0x71, 0xab, 0x19,
	0x14, 0x70, 0x57, 0x08, 0x9b, 0xc2, 0xc4, 0x2c, 0x4e, 0xda, 0xd2, 0x9c, 0x10, 0xa2, 0xd3, 0x9f,
	0x8b, 0x5b, 0xd3, 0x12, 0x60, 0x41, 0xd5, 0x1b, 0x2d, 0xb4, 0x1b, 0x9f, 0x68, 0xa1, 0x13, 0x07,
	0x01, 0xff, 0xfd, 0x1e, 0xbb, 0xcd, 0x8d, 0xdb, 0xec, 0x77, 0x82, 0x44, 0xc6, 0x1f, 0x3d, 0xbb,
	0xb1, 0x3e, 0x35, 0xe9, 0xea, 0xc0, 0xe5, 0x4e, 0xc0, 0x67, 0xe3, 0x15, 0x83, 0x3a, 0x01, 0x84,
	0x88, 0x0f, 0x68, 0x52, 0x43, 0x89, 0xcb, 0xf1, 0x95, 0xa4, 0xcf, 0xa3, 0x46, 0x8e, 0xaf, 0xa6,
	0x7b, 0xbe, 0xdb, 0xc4, 0xda, 0xac, 0xcb, 0xf3, 0x7c, 0x28, 0xb7, 0x32, 0x3c, 0xbf, 0x8d, 0x8d,
	0x71, 0x09, 0x39, 0x6e, 0x35, 0x93, 0x55, 0xb5, 0x1a, 0x18, 0x7d, 0x5b, 0x5d, 0x82, 0x7a, 0xd1,
	0xb7, 0x73, 0xab, 0xe6, 0x85, 0x5a, 0x94, 0x9f, 0x3b, 0xa3, 0x97, 0xca, 0xdd, 0x46, 0x08, 0xc7,
	0xf4, 0x88, 0x68, 0x20, 0x2a, 0xcf, 0xad, 0xca, 0xd5, 0x32, 0xcb, 0x46, 0x7a, 0x61, 0x26, 0x98,
	0xd1, 0x3e, 0x63, 0x3e, 0x70, 0x69, 0x6e, 0x91, 0xb2, 0x1e, 0x05, 0x44, 0x95, 0x9e, 0x61, 0x06,
	0xac, 0xe7, 0xfd, 0x43, 0xec, 0x08, 0x24, 0x06, 0x69, 0x05, 0x45, 0x29, 0x1c, 0x8e, 0x85, 0xdf,
	0xd5, 0xc3, 0x6c, 0x8f, 0x3c, 0xf2, 0x51, 0xb2, 0x19, 0x7d, 0xcc, 0x4f, 0xe0, 0x64, 0xfe, 0x34,
	0x6d, 0x9d, 0x4e, 0xad, 0x2c, 0xe2, 0x8b, 0x50, 0x3e, 0x02, 0x7b, 0x1b, 0x1a, 0x30, 0x1c, 0x44,
	0xee, 0x40, 0x02, 0x4e, 0xf6, 0x76, 0x1b, 0xc1, 0x83, 0x9e, 0x4e, 0xf8, 0x40, 0xd3, 0x80, 0x1a,
	0x42, 0x4f, 0x07, 0x35, 0x86, 0xf4, 0x14, 0x71, 0x9a, 0x76, 0xe5, 0x40, 0x28, 0x30, 0x46, 0xe3,
	0x87, 0x3c, 0x76, 0xd4, 0x35, 0x1a, 0x85, 0xff, 0x51, 0x8f, 0x1d, 0xeb, 0xaa, 0x9a, 0xa6, 0x24,
	0xa8, 0x3c, 0xdd, 0x48, 0x04, 0x6b, 0x17, 0xbe, 0xd8, 0x78, 0xae, 0x1a, 0xb3, 0xf1, 0xdc, 0xd4,
	0xc9, 0xc6, 0xeb, 0x3a, 0x08, 0x34, 0xfe, 0xc3, 0x30, 0x3b, 0x08, 0x56, 0x52, 0x59, 0xd0, 0x8a,
	0x44, 0x04, 0xad, 0x45, 0x93, 0xb3, 0x8e, 0x66, 0xff, 0xab, 0xe6, 0xb7, 0xdb, 0x5a, 0x4a, 0x3b,
	0x3f, 0x60, 0x2c, 0x28, 0x92, 0x66, 0x2e, 0x42, 0xba, 0x0e, 0x59, 0xb9, 0x44, 0x51, 0xc6, 0x44,
	0x69, 0x4a, 0x28, 0x4b, 0x70, 0xa8, 0x6e, 0x8d, 0x4e, 0x4d, 0x09, 0x15, 0xa4, 0xdf, 0x64, 0xa3,
	0x71, 0xd6, 0x7f, 0x75, 0xb3, 0x15, 0x87, 0xb9, 0x6d, 0x6e, 0x61, 0x72, 0xfc, 0x1a, 0x33, 0xdb,
	0xf9, 0xac, 0xff, 0xea, 0xd9, 0x38, 0xcc, 0x71, 0x44, 0x12, 0x89, 0x6e, 0x45, 0x24, 0x11, 0x70,
	0xfe, 0x93, 0x6c, 0x44, 0x1d, 0x4e, 0xd2, 0x33, 0xc8, 0x18, 0xf2, 0x5a, 0x52, 0xa0, 0xd8, 0x49,
	0xb2, 0xd4, 0xec, 0x24, 0x85, 0x6e, 0x65, 0x89, 0x00, 0x28, 0xb8, 0x8e, 0x45, 0x79, 0xcc, 0x2f,
	0x2c, 0xbd, 0xae, 0x72, 0xf4, 0x13, 0xc2, 0x06, 0x14, 0x9f, 0xeb, 0x75, 0xb1, 0xb0, 0x61, 0x40,
	0xa9, 0xb0, 0xa1, 0x61, 0x1b, 0x3f, 0xe2, 0xb1, 0xc3, 0xe7, 0xd2, 0x30, 0x5a, 0xcc, 0xd3, 0x95,
	0xb8, 0x13, 0x5d, 0x48, 0x85, 0xb1, 0x09, 0x68, 0x67, 0x57, 0xd7, 0x0a, 0x79, 0x55, 0xea, 0x44,
	0xd8, 0xea, 0x7a, 0x51, 0x56, 0x70, 0x60, 0xa4, 0x9d, 0xc5, 0xe0, 0x54, 0x3b, 0x8b, 0xe0, 0x39,
	0x43, 0xc9, 0x97, 0x9b, 0x22, 0xf8, 0xe8, 0x90, 0x71, 0xf7, 0xbb, 0x30, 0xa3, 0xc2, 0x8f, 0xca,
	0x61, 0x50, 0x40, 0x64, 0x18, 0xf2, 0x65, 0x80, 0x6a, 0x7c, 0xc0, 0x63, 0x47, 0xac, 0x5e, 0x0b,
	0xc1, 0xba, 0x64, 0x07, 0x38, 0x56, 0xb3, 0x1b, 0x64, 0x59, 0x9c, 0xb4, 0x0b, 0xdb, 0x47, 0xce,
	0xf1, 0xa9, 0xe2, 0x9b, 0xf8, 0xaf, 0x05, 0x89, 0x64, 0xbe, 0x89, 0xd0, 0x22, 0xdf, 0x94, 0x23,
	0xf8, 0xc6, 0x97, 0x86, 0xd8, 0x88, 0xb2, 0xd0, 0xf7, 0x5f, 0xc7, 0x76, 0x63, 0xe7, 0x54, 0x78,
	0xf8, 0x53, 0xbb, 0xf0, 0x18, 0xe2, 0x42, 0xe4, 0xe1, 0x0f, 0x4a, 0x20, 0x9b, 0xbf, 0x60, 0x50,
	0xad, 0x96, 0x62, 0x67, 0xd2, 0x89, 0x44, 0xb0, 0x33, 0x28, 0x46, 0xd9, 0xfc, 0x11, 0x30, 0xcd,
	0xe6, 0x6f, 0xa0, 0x39, 0xd1, 0x94, 0x0b, 0xc2, 0x8a, 0xe8, 0xb0, 0x21, 0x7a, 0x9e, 0x97, 0xdb,
	0x44, 0x31, 0x30, 0x21, 0x9a, 0x1a, 0x68, 0xfe, 0x91, 0xe9, 0xd5, 0x24, 0xca, 0xa5, 0xd0, 0x03,
	0x1f, 0x79, 0xfe, 0xaa, 0x78, 0xc1, 0x91, 0x1f, 0x09, 0xf5, 0xe4, 0x23, 0xa1, 0x04, 0xfa, 0xc3,
	0xff, 0x51, 0xfd, 0x41, 0x9e, 0x32, 0x40, 0xa1, 0xd2, 0x1f, 0x04, 0x4c, 0xfb, 0x63, 0xa0, 0x1b,
	0x5f, 0x18, 0x62, 0xa3, 0x6a, 0x06, 0x1e, 0xf4, 0x57, 0xd9, 0x81, 0x76, 0x27, 0x5d, 0x0e, 0x3a,
	0xaa, 0x0d, 0x4f, 0xa7, 0xcd, 0xd9, 0x7f, 0x1a, 0x2a, 0x04, 0xda, 0xb3, 0xeb, 0x53, 0x14, 0x10,
	0x1d, 0x14, 0xb8, 0x98, 0x1e, 0x14, 0x88, 0x80, 0x3f, 0xa3, 0xc6, 0x01, 0xd9, 0xdd, 0xc0, 0x57,
	0x3c, 0xbb, 0x3e, 0x25, 0x6a, 0x36, 0x1f, 0x90, 0x96, 0x35, 0x20, 0x62, 0x82, 0xbe, 0xd6, 0x1a,
	0x90, 0x67, 0xd7, 0xa7, 0x08, 0xd8, 0xf5, 0x0d, 0x90, 0x7f, 0x89, 0xed, 0x2e, 0x56, 0x83, 0x3c,
	0x92, 0x89, 0xce, 0xc7, 0x35, 0xd3, 0xe3, 0x85, 0x9a, 0xa7, 0xee, 0x86, 0x9f, 0xbc, 0xef, 0x00,
	0x8c, 0xf2, 0x23, 0xf3, 0x9f, 0x34, 0x3f, 0x32, 0x2f, 0x69, 0xbc, 0xcf, 0x63, 0x47, 0x16, 0x3b,
	0xc1, 0xda, 0x72, 0x9a, 0x5e, 0x21, 0x21, 0x16, 0x9e, 0x86, 0xa8, 0x94, 0x50, 0x8e, 0x9d, 0x29,
	0x4c, 0xb0, 0x54, 0x84, 0x64, 0x76, 0x21, 0x2e, 0x25, 0xf1, 0x2a, 0x0d, 0x21, 0x3b, 0x5e, 0xa5,
	0x86, 0x6f, 0xfc, 0xd2, 0x2e, 0x36, 0x66, 0x93, 0x75, 0x05, 0xe4, 0xbc, 0x39, 0xd1, 0x4d, 0x07,
	0x46, 0x3b, 0x18, 0xba, 0x25, 0xd1, 0x0e, 0xfc, 0x1e, 0x3b, 0x0a, 0xa7, 0x75, 0x53, 0xf6, 0x59,
	0x0d, 0x07, 0xce, 0x4e, 0x0d, 0xf2, 0x80, 0x0e, 0x1d, 0x0a, 0xd5, 0x48, 0x83, 0xe2, 0xc2, 0x26,
	0xaf, 0xac, 0xdd, 0x2a, 0x3a, 0xdf, 0xc1, 0x7a, 0x4a, 0x7a, 0x79, 0x2c, 0x79, 0x80, 0x48, 0x19,
	0x26, 0xcb, 0x2f, 0x5d, 0x98, 0x47, 0x29, 0xc3, 0x10, 0x30, 0x75, 0x4d, 0x52, 0xd0, 0x79, 0x2c,
	0x4e, 0x36, 0xe1, 0x0a, 0xdd, 0x4c, 0x52, 0x6c, 0x46, 0xa0, 0x1c, 0xa9, 0xcf, 0x61, 0x45, 0xa3,
	0x01, 0xb5, 0x4e, 0x36, 0x05, 0x8b, 0xc2, 0xcf, 0xee, 0xb9, 0x91, 0xf0, 0xb3, 0xef, 0xf7, 0xf8,
	0x6a, 0xea, 0xb5, 0xe3, 0x04, 0x85, 0x6b, 0xba, 0xca, 0x0e, 0x65, 0x50, 0xd6, 0x94, 0x19, 0xf8,
	0xd6, 0x6c, 0x03, 0x58, 0x82, 0xb2, 0x26, 0xac, 0xd2, 0x69, 0x19, 0x4a, 0x9b, 0x45, 0x49, 0x11,
	0x31, 0x3c, 0x23, 0x38, 0x10, 0x3a, 0x8a, 0x92, 0x91, 0x3a, 0x0d, 0xd5, 0x09, 0xac, 0xd3, 0x50,
	0xcd, 0x1c, 0x27, 0x39, 0x04, 0xd7, 0x6c, 0x9d, 0x86, 0x20, 0xf3, 0x3a, 0x6a, 0x39, 0x78, 0x8f,
	0xb6, 0x1c, 0xdc, 0xdc, 0x60, 0xf0, 0xe7, 0x77, 0xb3, 0x3b, 0x16, 0xd3, 0x4e, 0xdc, 0x5a, 0x9b,
	0x09, 0x8a, 0x28, 0x7c, 0x24, 0xcd, 0xaf, 0x06, 0x79, 0x18, 0x27, 0xed, 0x0b, 0x3d, 0x29, 0x45,
	0xcc, 0xb3, 0x51, 0xe3, 0x6c, 0xe4, 0xa1, 0x18, 0x65, 0xc8, 0xcb, 0x48, 0xb9, 0x82, 0xbb, 0xbc,
	0x8b, 0x0c, 0x36, 0xbf, 0xb6, 0x86, 0x45, 0xc9, 0x6f, 0xfe, 0xb2, 0xa7, 0x70, 0x6d, 0x9d, 0x5b,
	0xba, 0x28, 0x22, 0x8c, 0x4d, 0x1a, 0x85, 0x92, 0x15, 0x65, 0x6c, 0x4f, 0x58, 0x94, 0x0b, 0x41,
	0x0b, 0x82, 0x52, 0x42, 0xbe, 0x1f, 0x65, 0x3c, 0xd4, 0x5a, 0x0d, 0xe2, 0xc4, 0x12, 0xf0, 0x21,
	0x28, 0xe5, 0x7c, 0xd6, 0x7f, 0xad, 0x34, 0x1f, 0x9a, 0xe5, 0x30, 0x46, 0xd4, 0x7f, 0x39, 0x4a,
	0x1b, 0xe4, 0x24, 0x43, 0x82, 0x52, 0xc6, 0x6e, 0x3a, 0x10, 0x7b, 0x3e, 0xeb, 0x14, 0xcd, 0x4e,
	0xb0, 0x1c, 0x75, 0xa4, 0x6f, 0xaa, 0x88, 0x3d, 0xbf, 0x78, 0x76, 0xe9, 0x2c, 0x2f, 0x44, 0xb1,
	0xe7, 0x35, 0x20, 0x8d, 0x3d, 0x9f, 0x75, 0x0a, 0x80, 0x24, 0xaa, 0xad, 0xdd, 0x37, 0xae, 0xda,
	0xea, 0xb1, 0xa3, 0xee, 0x71, 0xd9, 0x63, 0x0c, 0x36, 0xdc, 0x63, 0x72, 0x1f, 0xb5, 0x78, 0xad,
	0x1d, 0x8e, 0xc3, 0x85, 0x63, 0x28, 0x5e, 0xcf, 0xf6, 0x16, 0x79, 0x0b, 0x66, 0x75, 0xaf, 0x99,
	0xd5, 0xa5, 0x0b, 0xb3, 0x64, 0x56, 0x25, 0x08, 0x7d, 0x36, 0xca, 0x5b, 0x7c, 0x56, 0xb1, 0x79,
	0xfb, 0xc8, 0x8d, 0x9a, 0xb7, 0x7f, 0x3d, 0x1b, 0x17, 0xeb, 0xf8, 0x54, 0x02, 0x26, 0x48, 0x2a,
	0x1a, 0x6f, 0x06, 0x85, 0xcd, 0xbc, 0xd7, 0x89, 0x2a, 0xfb, 0x1c, 0xaa, 0xd4, 0x42, 0x97, 0xd1,
	0x04, 0x74, 0x19, 0xf2, 0xca, 0x34, 0x24, 0x68, 0x34, 0x01, 0x0d, 0xdb, 0xf8, 0xe6, 0x51, 0x76,
	0x90, 0x92, 0xe3, 0x6d, 0x07, 0x2d, 0x63, 0x92, 0xee, 0xd1, 0x8b, 0xca, 0x74, 0x4b, 0x19, 0x90,
	0x9b, 0xb6, 0x4d, 0x19, 0x7a, 0x8a, 0x6c, 0x39, 0x8d, 0xd0, 0x59, 0xa0, 0x61, 0xfd, 0xc7, 0xd8,
	0xbe, 0x20, 0xcb, 0x3a, 0x32, 0x63, 0x8e, 0x14, 0xc8, 0xc1, 0xc7, 0x74, 0xda, 0x14, 0x23, 0x8a,
	0xa6, 0x90, 0x30, 0x72, 0x54, 0x8e, 0x9d, 0xa5, 0x86, 0x6f, 0xd0, 0x59, 0x8a, 0xb0, 0x8d, 0x5d,
	0xcf, 0x8b, 0x6d, 0x74, 0xd8, 0x01, 0xa4, 0xc1, 0x8e, 0xc4, 0x95, 0xa9, 0x46, 0x69, 0x2b, 0x84,
	0x02, 0xad, 0x03, 0x8f, 0x90, 0x38, 0x48, 0x68, 0x50, 0xa1, 0x40, 0xeb, 0xc1, 0xa3, 0x82, 0xc6,
	0xc2, 0x10, 0x19, 0x7e, 0x6e, 0x56, 0x2c, 0x0c, 0xa2, 0x0d, 0xdf, 0xfb, 0xbc, 0xb4, 0xe1, 0x15,
	0xef, 0x9d, 0x91, 0x9b, 0xe4, 0xbd, 0x83, 0x79, 0xd1, 0xe8, 0x8d, 0xf3, 0xa2, 0x2e, 0x3b, 0xc0,
	0xf7, 0x4b, 0x53, 0x47, 0x55, 0x11, 0xfa, 0x2e, 0xad, 0x0a, 0x50, 0x02, 0x01, 0xba, 0xbd, 0xf5,
	0x3a, 0x11, 0x8a, 0xb7, 0xa2, 0x6e, 0x6f, 0x98, 0x08, 0xbd, 0xbd, 0x21, 0x78, 0xff, 0x34, 0x1b,
	0x05, 0x48, 0xf0, 0xe6, 0xd9, 0x67, 0xde, 0x4a, 0x39, 0x51, 0x9a, 0x1c, 0x5b, 0x83, 0x91, 0x7e,
	0xf3, 0x52, 0xf0, 0xe3, 0xe9, 0xb0, 0x03, 0x48, 0xbd, 0x1f, 0x15, 0x93, 0xfb, 0x37, 0x59, 0x6b,
	0xe6, 0x81, 0x00, 0xaf, 0x35, 0x42, 0x83, 0x74, 0xdb, 0x3c, 0x12, 0x88, 0xb5, 0x66, 0x82, 0x90,
	0x1c, 0x18, 0xb4, 0xd6, 0xae, 0x3b, 0x08, 0x49, 0xc8, 0x0e, 0x0b, 0x86, 0x04, 0xf6, 0x0a, 0x3a,
	0x9e, 0xf5, 0x02, 0xdb, 0x55, 0x46, 0x79, 0xd7, 0xcd, 0x0a, 0x2f, 0x2a, 0x0f, 0x75, 0x11, 0x76,
	0x28, 0xca, 0xbb, 0x28, 0xec, 0x50, 0x94, 0x77, 0x69, 0xd8, 0xa1, 0x28, 0xef, 0x36, 0xbe, 0x77,
	0x48, 0xf1, 0x3d, 0x85, 0xeb, 0xbf, 0x8d, 0x8d, 0xf1, 0xaa, 0x66, 0x95, 0xf9, 0x69, 0x65, 0x27,
	0x87, 0xb5, 0x18, 0x20, 0x28, 0x3b, 0x69, 0xb9, 0x51, 0x76, 0xda, 0xf4, 0x88, 0x94, 0x55, 0x12,
	0x24, 0xff, 0x5b, 0x3d, 0x76, 0x04, 0xe0, 0xbb, 0x41, 0xd9, 0x5a, 0x6d, 0xb6, 0xd4, 0x5b, 0x9a,
	0x7c, 0xd5, 0xba, 0x13, 0xf7, 0xa1, 0xfa, 0xda, 0x26, 0xde, 0x2f, 0xaa, 0x75, 0xe6, 0xfd, 0xc2,
	0x45, 0x9b, 0xbc, 0x5f, 0x94, 0x15, 0xe4, 0xc6, 0x3f, 0xf7, 0xf8, 0x64, 0x54, 0xf2, 0xf0, 0x73,
	0xf1, 0xb6, 0x1b, 0xc7, 0x5d, 0x29, 0x57, 0x49, 0x83, 0xaf, 0x05, 0x28, 0x31, 0xe2, 0xad, 0x80,
	0x20, 0xe7, 0xa6, 0x28, 0xf2, 0x03, 0x36, 0x76, 0xad, 0x1b, 0x97, 0xcd, 0xd5, 0xa0, 0x58, 0x6d,
	0x8a, 0xc3, 0x08, 0xbf, 0x2a, 0xbf, 0xb1, 0x1b, 0x97, 0x67, 0x82, 0x62, 0x55, 0xcc, 0x8f, 0x19,
	0x4d, 0x1b, 0x87, 0x8c, 0xe6, 0x35, 0x82, 0xd4, 0xf8, 0xd4, 0x2e, 0xb6, 0x1f, 0xfb, 0xcc, 0xf3,
	0xc3, 0xa6, 0xb5, 0x1a, 0x24, 0x49, 0xd4, 0x89, 0x9f, 0x91, 0x71, 0x25, 0x46, 0xc4, 0x61, 0x33,
	0x6b, 0x8a, 0xcd, 0x61, 0x83, 0x60, 0xc9, 0x61, 0x83, 0xca, 0xfd, 0x35, 0x76, 0x0c, 0xfd, 0x84,
	0x35, 0xdd, 0x2c, 0xb2, 0x28, 0x52, 0x06, 0x65, 0xa0, 0x12, 0x45, 0xd4, 0x79, 0x7f, 0x96, 0x78,
	0xbd, 0x51, 0x89, 0xba, 0xf1, 0x89, 0x4a, 0xb4, 0xe5, 0x20, 0xc0, 0x27, 0x00, 0xe4, 0x32, 0xe1,
	0x8b, 0x2c, 0xef, 0x17, 0x20, 0x93, 0x21, 0x7b, 0x17, 0x01, 0x41, 0x26, 0x40, 0x14, 0xe9, 0x28,
	0x99, 0xbb, 0xae, 0x2f, 0x4a, 0xa6, 0xb2, 0x12, 0x11, 0x2a, 0xa6, 0xdd, 0xd4, 0x4a, 0x44, 0xa9,
	0x99, 0xb0, 0x95, 0x48, 0x45, 0xd7, 0x04, 0x56, 0x22, 0x42, 0xfd, 0xae, 0x88, 0x89, 0x11, 0xdb,
	0x43, 0x89, 0xa9, 0x61, 0xc2, 0xc4, 0x2a, 0x43, 0x03, 0xc4, 0xc4, 0x78, 0x7c, 0x25, 0xdb, 0xcd,
	0x4f, 0x97, 0xa6, 0x3c, 0x9c, 0x20, 0x69, 0x80, 0x34, 0xbd, 0x90, 0xf7, 0x08, 0xa8, 0xa6, 0x7c,
	0x60, 0x2d, 0x8b, 0x1a, 0xbf, 0xed, 0xb1, 0xbd, 0xbc, 0xc1, 0x85, 0x20, 0x83, 0x90, 0xb6, 0xea,
	0x29, 0x19, 0xa5, 0x0c, 0xbb, 0xbe, 0x87, 0xe3, 0x9b, 0x14, 0x8a, 0x68, 0x16, 0xbd, 0xc3, 0x0e,
	0x9b, 0xbe, 0x5c, 0xdf, 0xab, 0xeb, 0x35, 0xb1, 0x07, 0x94, 0xaa, 0xd0, 0x5f, 0x65, 0x07, 0x60,
	0x24, 0x2d, 0x05, 0xe5, 0x21, 0xcc, 0xb9, 0x17, 0x82, 0x4c, 0xaa, 0x43, 0x10, 0x26, 0x52, 0x87,
	0x60, 0x7c, 0xaa, 0x0e, 0x41, 0xf0, 0x8d, 0xf7, 0x0e, 0x09, 0xc6, 0x71, 0x31, 0x0f, 0x92, 0xa2,
	0xa3, 0xbd, 0xd9, 0xf5, 0xa4, 0x8b, 0xfc, 0x79, 0x1e, 0x9d, 0x74, 0x2b, 0x7f, 0x9e, 0x01, 0xac,
	0x4c, 0xba, 0xc8, 0x9f, 0xf7, 0xa4, 0x24, 0x06, 0x4a, 0xf7, 0xda, 0xc7, 0x7f, 0x4d, 0x1e, 0xb4,
	0xf0, 0x16, 0x79, 0x40, 0xad, 0x90, 0x07, 0x48, 0x32, 0x93, 0xc3, 0x37, 0x3c, 0x93, 0x8d, 0xcf,
	0x78, 0xec, 0x88, 0x63, 0x28, 0x0a, 0x48, 0xaa, 0x07, 0x9d, 0x28, 0x4d, 0x0d, 0xc4, 0x03, 0xb0,
	0xf5, 0xc6, 0x0e, 0x6c, 0x71, 0x27, 0x72, 0x54, 0x98, 0x3b, 0x91, 0x93, 0x34, 0xb9, 0x13, 0x65,
	0x55, 0xf4, 0xc6, 0xc7, 0x3d, 0x36, 0xa2, 0x86, 0x8e, 0x2f, 0xc2, 0x28, 0x09, 0x2b, 0x1b, 0x02,
	0xd2, 0x37, 0xe4, 0x34, 0x16, 0x6a, 0x75, 0x11, 0x46, 0x02, 0x8a, 0x4f, 0xb9, 0x88, 0x36, 0xa4,
	0x4d, 0x34, 0xe4, 0x85, 0x13, 0x82, 0x35, 0x48, 0x42, 0xb7, 0xe9, 0xc7, 0xc1, 0xbc, 0xba, 0xb7,
	0x46, 0x0b, 0x05, 0xd9, 0xf8, 0x1e, 0x8f, 0x1d, 0x12, 0x19, 0x39, 0x44, 0x94, 0x3d, 0xde, 0xcb,
	0x87, 0xd9, 0x1e, 0x99, 0xf4, 0x03, 0xbd, 0xe3, 0xe9, 0xf4, 0x1e, 0x13, 0x38, 0x73, 0x3c, 0x35,
	0x7d, 0x13, 0x99, 0x3d, 0x20, 0x40, 0x1b, 0xa4, 0x95, 0x47, 0x39, 0xde, 0x64, 0x80, 0x36, 0x5e,
	0x4c, 0x93, 0xd3, 0x22, 0x50, 0x2b, 0x40, 0x9b, 0x82, 0x6d, 0x3c, 0xc3, 0xbb, 0x48, 0x52, 0x3b,
	0xb9, 0x13, 0x3b, 0x7b, 0x37, 0x3f, 0xb1, 0x73, 0x63, 0x9e, 0x8d, 0xd9, 0x99, 0xa0, 0x38, 0xb3,
	0x0f, 0xf2, 0x28, 0xc0, 0x31, 0xd5, 0xa6, 0xf3, 0x28, 0x30, 0xcc, 0x9e, 0xd7, 0x12, 0xce, 0xc8,
	0x0b, 0x1a, 0x9f, 0xd8, 0xc3, 0xf6, 0x93, 0x2c, 0x56, 0x9f, 0xf1, 0xd8, 0x3d, 0x38, 0xfc, 0x75,
	0xd0, 0x6e, 0xe7, 0x51, 0x3b, 0x28, 0xa3, 0xa6, 0x4a, 0xcb, 0x1f, 0x25, 0xed, 0x72, 0x55, 0xb6,
	0xf3, 0x75, 0x1b, 0xeb, 0x53, 0x77, 0xa1, 0x30, 0xda, 0xd3, 0x0a, 0x5a, 0xe6, 0x43, 0x07, 0x58,
	0x63, 0x19, 0xb7, 0x05, 0xc2, 0xb8, 0x8b, 0x77, 0x85, 0x9b, 0x50, 0xf6, 0xff, 0x3e, 0xf3, 0x49,
	0xac, 0xee, 0xcd, 0xd2, 0xc2, 0x80, 0x5d, 0x30, 0x0e, 0xfb, 0xad, 0x16, 0xd0, 0x3d, 0x8e, 0xc0,
	0xdf, 0x95, 0xc5, 0x34, 0x1e, 0xda, 0x98, 0xfe, 0x13, 0xec, 0x60, 0xdc, 0x4e, 0xd2, 0xdc, 0xf9,
	0x8c, 0x3b, 0x0f, 0x35, 0x95, 0x67, 0x5c, 0x8a, 0x40, 0x1d, 0x8f, 0x31, 0x86, 0x8e, 0x93, 0xb7,
	0xeb, 0xc6, 0xe3, 0xe4, 0x3d, 0x0f, 0x7d, 0xcd, 0x47, 0x3d, 0x76, 0xa7, 0x7a, 0x71, 0xae, 0x59,
	0x04, 0xc2, 0x5b, 0xf0, 0xc2, 0xc6, 0xfa, 0xd4, 0x6d, 0xf2, 0xc9, 0xba, 0x66, 0xfe, 0xbf, 0x82,
	0x3e, 0x60, 0x6f, 0x3e, 0xf5, 0xb7, 0x15, 0xf5, 0xf4, 0xfc, 0x2b, 0xec, 0x80, 0x8a, 0x1f, 0x2e,
	0x26, 0x7c, 0x6f, 0xed, 0x84, 0x8b, 0x4b, 0x90, 0x08, 0x2a, 0xae, 0xe6, 0xfa, 0x4e, 0x1a, 0x82,
	0xbc, 0x32, 0xcd, 0xfb, 0x0b, 0x04, 0xdf, 0xf8, 0x4d, 0x60, 0x46, 0x69, 0x3f, 0x0e, 0xa3, 0x7c,
	0x2e, 0x2a, 0x83, 0xb8, 0x53, 0xf8, 0x2d, 0x36, 0xa6, 0xdf, 0x22, 0x55, 0x3c, 0x53, 0xcf, 0x98,
	0x65, 0xa8, 0xd7, 0x4b, 0x13, 0xd0, 0xf4, 0x6e, 0xeb, 0x01, 0xd3, 0x11, 0xd1, 0xf4, 0x50, 0x46,
	0xb1, 0xfc, 0x26, 0x3b, 0x54, 0x44, 0x6d, 0x7e, 0x35, 0x92, 0x91, 0xee, 0x43, 0xc9, 0x57, 0x41,
	0xe3, 0xbb, 0x84, 0xaa, 0xe0, 0x02, 0x79, 0x97, 0x52, 0x92, 0x11, 0x14, 0x6a, 0x78, 0x81, 0x71,
	0xc2, 0xc6, 0x7f, 0xf2, 0xd8, 0xe4, 0x63, 0x69, 0x31, 0x8f, 0xd4, 0xaa, 0xb3, 0x9d, 0xa0, 0x28,
	0xc0, 0x51, 0xfc, 0x9d, 0x1e, 0x3b, 0xbc, 0xa2, 0xcb, 0x9b, 0x2d, 0x5e, 0xa1, 0x2c, 0x8f, 0x87,
	0x67, 0x2e, 0xf2, 0x7d, 0x64, 0xa1, 0xcd, 0xcf, 0x3d, 0xbb, 0x3e, 0xe5, 0xc2, 0x31, 0xe6, 0x5c,
	0x8e, 0x4a, 0xb2, 0xbf, 0x56, 0x2c, 0x8a, 0xa1, 0xf2, 0x57, 0x17, 0x1f, 0x7e, 0x3d, 0xfe, 0xea,
	0x8d, 0x5f, 0xf1, 0xd8, 0xf1, 0xba, 0xaf, 0x2b, 0xfc, 0x7f, 0xe6, 0xb1, 0xdb, 0x9f, 0x4e, 0x79,
	0x07, 0x9a, 0x95, 0x4e, 0x21, 0x37, 0x74, 0x1d, 0x38, 0xbc, 0x8e, 0xd2, 0xcc, 0xc2, 0xc6, 0xfa,
	0x14, 0x8c, 0xe2, 0x9c, 0xa3, 0xf6, 0xb9, 0xf5, 0xa9, 0x57, 0x8a, 0x1e, 0x0e, 0x6a, 0x8b, 0x98,
	0x02, 0x3d, 0x5d, 0xd3, 0x50, 0xe3, 0x2f, 0x8f, 0xb1, 0xd1, 0xc7, 0x7a, 0x69, 0x19, 0x68, 0xab,
	0x3a, 0x78, 0x76, 0x6b, 0xca, 0x4c, 0x86, 0xe6, 0x26, 0x3b, 0x2c, 0xad, 0xea, 0xa0, 0x5a, 0xda,
	0xd9, 0xca, 0x0b, 0xab, 0xb2, 0xaa, 0xab, 0x62, 0x52, 0xab, 0x3a, 0x1b, 0xd5, 0xca, 0x56, 0x8d,
	0x8e, 0xf7, 0x1b, 0xc9, 0x56, 0x7d, 0x8a, 0x8d, 0x48, 0xcf, 0x3a, 0xf5, 0x12, 0x09, 0xfc, 0x49,
	0x3a, 0xeb, 0xa1, 0x07, 0x7a, 0x05, 0x45, 0xd5, 0x55, 0xb2, 0x90, 0xb3, 0x5e, 0x1d, 0x5d, 0x56,
	0xdc, 0x55, 0x04, 0x9f, 0x04, 0xd6, 0xab, 0xc2, 0xc8, 0xaa, 0xfb, 0xca, 0x94, 0x15, 0x8e, 0xb6,
	0x72, 0x67, 0x39, 0xb0, 0x82, 0x31, 0xf8, 0xe6, 0xd3, 0xb0, 0xf2, 0xee, 0xba, 0xdb, 0x6c, 0x3e,
	0x45, 0x5d, 0xdf, 0x5d, 0xef, 0xb2, 0xc8, 0x3b, 0xae, 0xae, 0x2b, 0x04, 0xc7, 0x7f, 0x9c, 0xe9,
	0x16, 0x85, 0xf6, 0x77, 0x8f, 0xf1, 0x4d, 0xc3, 0x71, 0x86, 0x0d, 0xbf, 0x22, 0xe0, 0x84, 0x5f,
	0xad, 0x20, 0x78, 0x88, 0x97, 0x2d, 0xc3, 0xbb, 0x36, 0xe3, 0x0c, 0x27, 0x4f, 0xd5, 0x51, 0x5f,
	0x51, 0xc8, 0x1f, 0x04, 0x4a, 0xe3, 0x65, 0xeb, 0x08, 0xb1, 0xfc, 0x1e, 0x8f, 0xa0, 0x84, 0xec,
	0x2a, 0xf4, 0xe0, 0x70, 0x8f, 0x37, 0x54, 0xa5, 0x64, 0x7a, 0x77, 0x85, 0x72, 0x45, 0x28, 0x3d,
	0xb8, 0x42, 0x02, 0xd0, 0xfa, 0x3d, 0x76, 0x54, 0xbe, 0x86, 0xf7, 0xa5, 0xd1, 0xbc, 0x48, 0x88,
	0x21, 0x73, 0x6f, 0x83, 0x18, 0x2c, 0x5e, 0xd5, 0x2f, 0x8b, 0x7a, 0x91, 0x11, 0xc3, 0x88, 0xc1,
	0x4e, 0x6c, 0x22, 0x06, 0xb7, 0xab, 0xe8, 0x7e, 0xcc, 0x7c, 0x08, 0x6c, 0xb2, 0x1c, 0x14, 0x51,
	0xa8, 0x63, 0x1e, 0x33, 0x13, 0x09, 0xf6, 0x4c, 0x5a, 0x94, 0xf0, 0xf0, 0x64, 0xe2, 0x1a, 0xdf,
	0x83, 0x02, 0xa2, 0x10, 0x3c, 0x22, 0xb2, 0xad, 0x5a, 0x88, 0x10, 0x43, 0x44, 0xa5, 0x0d, 0x8e,
	0x33, 0x69, 0xe7, 0x26, 0x62, 0x88, 0xa8, 0xac, 0xc7, 0x68, 0x56, 0x10, 0x28, 0x8d, 0x21, 0xa2,
	0x60, 0x33, 0xff, 0xfd, 0x1e, 0x3b, 0x41, 0x5c, 0xd5, 0x56, 0xb1, 0xc3, 0x39, 0x44, 0x4b, 0x12,
	0x66, 0x8a, 0xc7, 0x6b, 0xbd, 0xd2, 0xcd, 0x6b, 0x53, 0x3d, 0x21, 0xdc, 0xfc, 0xf1, 0x4e, 0x1d,
	0x25, 0x87, 0xcb, 0x5d, 0x77, 0x39, 0xca, 0x21, 0xc2, 0xd2, 0xb0, 0xcb, 0xe5, 0xae, 0x2b, 0x72,
	0xc0, 0xb9, 0x5d, 0xee, 0xba, 0x56, 0x32, 0x38, 0xcb, 0xe5, 0x8e, 0x57, 0x73, 0x59, 0x9b, 0x60,
	0xc1, 0xaa, 0x3c, 0x68, 0x64, 0x6d, 0xdb, 0xd3, 0x10, 0xa5, 0x44, 0xb3, 0xd1, 0xc8, 0xc4, 0x75,
	0x2c, 0x3c, 0xce, 0x65, 0xa8, 0x3f, 0x07, 0x44, 0x63, 0x92, 0x5c, 0x86, 0xb8, 0x84, 0x18, 0x2e,
	0x43, 0x11, 0x08, 0x97, 0x21, 0xbe, 0x1e, 0x38, 0xa8, 0x7f, 0x9c, 0x05, 0x5d, 0x08, 0xca, 0x34,
	0x4c, 0x82, 0xfa, 0xcf, 0x67, 0x41, 0xb7, 0x1a, 0xd4, 0x9f, 0x03, 0xbb, 0x82, 0xfa, 0x73, 0x68,
	0xde, 0x63, 0x05, 0x27, 0x39, 0xd7, 0xb8, 0xe9, 0xb1, 0x24, 0xab, 0x19, 0xd7, 0x14, 0x25, 0x5c,
	0xe5, 0x5b, 0x07, 0x12, 0x8c, 0xc1, 0xd7, 0xb1, 0xc8, 0xe3, 0x0e, 0x49, 0x19, 0x26, 0x7d, 0xb3,
	0x8e, 0x4d, 0x28, 0x21, 0xb3, 0x8e, 0x11, 0x28, 0x59, 0xc7, 0xb9, 0x86, 0x05, 0x3b, 0x48, 0x92,
	0xc9, 0x6d, 0xf2, 0xb0, 0xe9, 0x2d, 0xc9, 0xff, 0x86, 0xec, 0x20, 0x09, 0x02, 0xb5, 0x83, 0xc4,
	0x18, 0xfc, 0x94, 0xb4, 0xd2, 0xc4, 0x01, 0xab, 0x3d, 0x62, 0x4e, 0x49, 0xd2, 0x82, 0xe4, 0xb7,
	0x27, 0x9d, 0x09, 0xe6, 0x6c, 0xae, 0x3b, 0x5e, 0xd8, 0xa8, 0xfe, 0xdb, 0xd8, 0x84, 0x46, 0xea,
	0xa4, 0x6d, 0x08, 0xc4, 0x9c, 0x2e, 0x3f, 0x15, 0xb5, 0xca, 0xc9, 0xa3, 0xd0, 0x24, 0xf8, 0x81,
	0xaa, 0x26, 0xcf, 0x0a, 0x88, 0xf3, 0x00, 0x60, 0xfc, 0x40, 0x6b, 0x28, 0x10, 0x3f, 0xd0, 0xc2,
	0x45, 0x82, 0x4b, 0xa5, 0x3a, 0x32, 0x89, 0x32, 0x16, 0x3e, 0x06, 0xed, 0x82, 0x54, 0xaa, 0xa2,
	0x92, 0x54, 0x8c, 0x85, 0x6d, 0x24, 0x22, 0x95, 0x16, 0x14, 0x0b, 0x37, 0xc2, 0x61, 0x3a, 0x41,
	0x19, 0x4d, 0x4e, 0x54, 0x1a, 0xb9, 0x28, 0xab, 0xaa, 0x8d, 0x28, 0x24, 0x57, 0x23, 0x0a, 0x0b,
	0x1c, 0xfd, 0x44, 0x8c, 0xb6, 0x49, 0xa3, 0x79, 0xbe, 0xae, 0x78, 0x6c, 0xca, 0xe9, 0x6a, 0xee,
	0xdc, 0xd2, 0xe4, 0x71, 0x94, 0x3f, 0x5c, 0x47, 0xbf, 0xc4, 0x8e, 0x7e, 0x1a, 0xd4, 0x72, 0xf4,
	0x53, 0xb0, 0xfc, 0xa0, 0x40, 0x50, 0xcd, 0x1c, 0xf2, 0x50, 0x4e, 0x9e, 0x30, 0x07, 0x85, 0xa1,
	0x2b, 0x72, 0x54, 0x9a, 0x83, 0xa2, 0x8a, 0x47, 0xf8, 0x4d, 0xdf, 0x42, 0xe4, 0x92, 0x96, 0x42,
	0x89, 0xb3, 0xc9, 0xdb, 0x8c, 0xa4, 0x25, 0x9b, 0x80, 0x63, 0xe2, 0x36, 0x4a, 0x9b, 0x9e, 0x12,
	0xa3, 0xb2, 0x78, 0x3e, 0xf3, 0xdf, 0xe5, 0xb1, 0xe3, 0x0a, 0x48, 0xa7, 0x98, 0x57, 0xc1, 0x61,
	0x27, 0x6f, 0x07, 0xe2, 0xf3, 0x1b, 0xeb, 0x53, 0x13, 0x92, 0xb8, 0xca, 0x4c, 0xaf, 0x40, 0x4c,
	0x64, 0xd2, 0x5a, 0x2a, 0xc4, 0x1c, 0xa1, 0xef, 0x26, 0xe3, 0x4a, 0xff, 0x70, 0x87, 0x91, 0xa6,
	0x9e, 0x7f, 0xfa, 0x07, 0x48, 0xaa, 0x26, 0xa1, 0x25, 0x97, 0xbe, 0xd3, 0x70, 0x11, 0x49, 0xdf,
	0xe6, 0xd2, 0x14, 0x81, 0x26, 0x55, 0xc3, 0x18, 0x8d, 0x4f, 0x7a, 0x6c, 0xff, 0x85, 0xe5, 0xa0,
	0xa5, 0xed, 0x2f, 0x4f, 0xb3, 0x51, 0x30, 0xdb, 0x6c, 0xe5, 0x3d, 0x92, 0xd7, 0xf3, 0x42, 0xda,
	0x89, 0x66, 0xf3, 0x5e, 0x88, 0x9e, 0xf3, 0x14, 0x18, 0x7d, 0xce, 0x93, 0x70, 0x9a, 0x10, 0x0a,
	0xd2, 0xaa, 0x09, 0xd1, 0xac, 0x78, 0x1a, 0xac, 0x42, 0x08, 0xc2, 0xaf, 0x96, 0xec, 0x30, 0xef,
	0xa1, 0x48, 0x67, 0x62, 0x0c, 0x0c, 0x9e, 0x64, 0xa3, 0xf9, 0x72, 0xd0, 0xc2, 0xe6, 0x05, 0xfa,
	0x89, 0x53, 0xc1, 0x9b, 0x47, 0x3c, 0x55, 0x82, 0x5a, 0x55, 0xc8, 0xb4, 0x55, 0x09, 0xd7, 0xf8,
	0xe6, 0x21, 0x31, 0x30, 0xda, 0xa8, 0xe0, 0x51, 0xc6, 0xe0, 0x01, 0x13, 0xb2, 0xad, 0x60, 0xc5,
	0x2f, 0x87, 0x80, 0x74, 0x2d, 0x66, 0xf1, 0x1a, 0x40, 0xb2, 0x78, 0x73, 0x05, 0x09, 0x47, 0x0d,
	0x87, 0x91, 0x1c, 0x14, 0xa9, 0xec, 0x38, 0x35, 0xcd, 0x36, 0x6f, 0x47, 0xe4, 0xaa, 0xac, 0x12,
	0xfa, 0x23, 0xf9, 0x63, 0x20, 0x7b, 0x97, 0x45, 0x79, 0x57, 0x85, 0x77, 0x25, 0xc3, 0xa1, 0x43,
	0x60, 0xeb, 0x3e, 0x43, 0xb4, 0x72, 0xab, 0xcf, 0x80, 0x5e, 0xe9, 0x33, 0x40, 0x36, 0xde, 0xc0,
	0x0e, 0xc0, 0xa2, 0xd1, 0x46, 0x8a, 0xaf, 0x63, 0xbb, 0x61, 0x7d, 0x49, 0x07, 0x3c, 0xb0, 0x7d,
	0x02, 0x08, 0xf3, 0x66, 0x01, 0xf5, 0xc4, 0xf6, 0x09, 0x4a, 0x1a, 0x9f, 0xf3, 0xd8, 0x61, 0x00,
	0x3d, 0x9f, 0xc7, 0xed, 0x38, 0x39, 0xdf, 0x8f, 0xf2, 0x3c, 0x0e, 0x81, 0x39, 0xa6, 0x50, 0x82,
	0x35, 0xa1, 0x02, 0xc6, 0x30, 0x47, 0x01, 0x41, 0x98, 0xa3, 0x28, 0xe2, 0x7b, 0x51, 0xfc, 0xd7,
	0x4c, 0x25, 0x45, 0x19, 0x69, 0x03, 0xf6, 0x22, 0x6d, 0xcb, 0xec, 0x45, 0x0b, 0x85, 0xec, 0xc5,
	0x94, 0xe0, 0x34, 0xde, 0xc2, 0x0e, 0xd2, 0xb0, 0x82, 0xfe, 0x59, 0x3c, 0x08, 0xc8, 0x32, 0x54,
	0x80, 0xf1, 0x01, 0xbf, 0x9e, 0x71, 0x59, 0x61, 0x87, 0x24, 0xfd, 0xbc, 0x2d, 0x8c, 0xe9, 0x21,
	0x34, 0xbe, 0x14, 0x35, 0x78, 0x19, 0x8e, 0x9d, 0x87, 0x40, 0x51, 0x68, 0x7c, 0x04, 0x4c, 0x43,
	0xe3, 0x1b, 0xe8, 0xc6, 0x17, 0x87, 0xd8, 0xa8, 0xee, 0xa1, 0xff, 0x2d, 0x1e, 0x3b, 0xa2, 0x33,
	0x34, 0x35, 0x83, 0xb2, 0xcc, 0xe3, 0x65, 0x88, 0xa8, 0xe8, 0xd1, 0x60, 0x8e, 0x3a, 0xdd, 0xd3,
	0xb4, 0x06, 0x01, 0x43, 0xdb, 0xc3, 0x8e, 0x0a, 0xf3, 0x6c, 0xeb, 0xa2, 0x4c, 0xae, 0x2f, 0xad,
	0x2a, 0xb6, 0x3f, 0xcb, 0x46, 0x92, 0xe8, 0x5a, 0xd9, 0x5c, 0x4d, 0x33, 0x9c, 0x9c, 0xf1, 0x5c,
	0x74, 0xad, 0x3c, 0x93, 0x66, 0xe6, 0x1a, 0xad, 0x80, 0x88, 0xe2, 0x3e, 0x11, 0x50, 0xfe, 0x25,
	0x76, 0x40, 0xd5, 0xe3, 0xc4, 0xd7, 0x0f, 0x08, 0x19, 0x14, 0x60, 0xa4, 0x6e, 0xfc, 0x4e, 0x4a,
	0xcd, 0x95, 0x59, 0x4a, 0x83, 0x23, 0x75, 0xfd, 0xae, 0x1b, 0x50, 0xd7, 0x37, 0xfe, 0x68, 0x0f,
	0x1b, 0x83, 0xb1, 0x0f, 0xd1, 0x7b, 0xf4, 0x32, 0x63, 0xcb, 0x2b, 0x61, 0x33, 0x83, 0x1c, 0x80,
	0x72, 0xdc, 0x8f, 0xaa, 0x71, 0x9f, 0x59, 0x09, 0x4d, 0xee, 0x0a, 0xa9, 0x9b, 0x78, 0x64, 0x4e,
	0xe4, 0x0b, 0x44, 0xba, 0x09, 0x8d, 0x4f, 0x75, 0x13, 0x12, 0x59, 0xb4, 0xd1, 0xce, 0x54, 0x1b,
	0x43, 0x56, 0x1b, 0xed, 0xac, 0xd2, 0xc6, 0xe9, 0xc5, 0x4a, 0x1b, 0x1a, 0xdf, 0xd6, 0x7f, 0xc8,
	0x36, 0x9e, 0x66, 0x47, 0x90, 0x27, 0x03, 0x5c, 0x58, 0xc1, 0x30, 0x64, 0xd8, 0xb8, 0x28, 0x1a,
	0xff, 0x07, 0x5e, 0x2d, 0x4d, 0x44, 0xee, 0xad, 0x78, 0x41, 0x68, 0x5c, 0x1a, 0x39, 0x81, 0x22,
	0xf7, 0xe2, 0x10, 0xbc, 0xda, 0x00, 0x3c, 0x34, 0x27, 0x37, 0xf6, 0xc6, 0x14, 0x93, 0x04, 0x5e,
	0x6d, 0x62, 0xd8, 0xf5, 0xd9, 0x8d, 0x9d, 0x32, 0x5f, 0x81, 0x76, 0x8f, 0x9b, 0x10, 0x51, 0x65,
	0xe5, 0x16, 0x25, 0xed, 0xfb, 0xf4, 0x11, 0x8f, 0x1d, 0x55, 0x1e, 0x6a, 0xd2, 0x7a, 0x4d, 0x0e,
	0xb8, 0xf0, 0x77, 0x9d, 0xc2, 0x0c, 0x22, 0x4e, 0xda, 0xe2, 0xee, 0x81, 0x86, 0x1e, 0x14, 0x02,
	0xd5, 0x4a, 0x64, 0x2b, 0xe8, 0x24, 0x4f, 0x76, 0x54, 0x5e, 0x45, 0xc7, 0xee, 0x76, 0x5a, 0x83,
	0xbe, 0xa7, 0xe2, 0x6e, 0x87, 0x14, 0xe9, 0x96, 0xbb, 0x9d, 0x33, 0xc5, 0x59, 0x4e, 0xb1, 0xfc,
	0x0f, 0x78, 0xec, 0xb0, 0xf4, 0x8f, 0x13, 0x7c, 0x48, 0x7e, 0xfb, 0x5e, 0xea, 0xe6, 0x24, 0x5c,
	0xeb, 0x60, 0x36, 0xd0, 0x97, 0x3f, 0xac, 0x02, 0x9b, 0xe0, 0x2a, 0xe4, 0x30, 0xeb, 0x20, 0x5c,
	0x89, 0x6c, 0x42, 0x50, 0x1b, 0x4d, 0x36, 0x29, 0xbf, 0x6b, 0x26, 0x8f, 0x43, 0x7e, 0x9d, 0x30,
	0xbe, 0x2e, 0xd8, 0x93, 0xc6, 0xbb, 0x51, 0x4f, 0x9a, 0x1f, 0x1c, 0x62, 0x13, 0x35, 0x13, 0x09,
	0x16, 0xb3, 0x22, 0x89, 0x42, 0xd3, 0x9a, 0x31, 0x94, 0x7f, 0x08, 0x2c, 0x66, 0x45, 0x46, 0x05,
	0x42, 0x47, 0x6e, 0x8b, 0x97, 0xeb, 0xf0, 0x74, 0x35, 0x64, 0x88, 0x88, 0x1a, 0x39, 0xe8, 0xf0,
	0x1d, 0x02, 0xb6, 0xbb, 0xdd, 0xda, 0x9e, 0x0c, 0x99, 0x9e, 0x88, 0x8c, 0x10, 0x03, 0x7a, 0x52,
	0x4f, 0x86, 0xda, 0xee, 0x76, 0x9d, 0x3d, 0x69, 0xfc, 0x96, 0xc7, 0xee, 0x22, 0xa5, 0xd6, 0xc5,
	0x4d, 0x39, 0x1d, 0x74, 0xa2, 0x95, 0xb2, 0x69, 0xa5, 0x05, 0x13, 0x06, 0x76, 0xd1, 0x4a, 0x59,
	0x35, 0x55, 0x23, 0xe0, 0xd4, 0xc0, 0x0e, 0xc1, 0x73, 0x49, 0x3a, 0x8f, 0xdb, 0xab, 0x88, 0x32,
	0xca, 0x21, 0x7e, 0x81, 0xd7, 0x20, 0xd2, 0x52, 0x92, 0xa6, 0x08, 0x44, 0x92, 0xce, 0x31, 0x46,
	0xe3, 0xcd, 0x6c, 0x9c, 0x7c, 0xd9, 0x45, 0xe9, 0x39, 0x7f, 0x33, 0x92, 0x9b, 0xfd, 0xed, 0x7e,
	0x76, 0x68, 0xe9, 0xdc, 0xc2, 0xe2, 0x6c, 0x1e, 0x85, 0x51, 0x52, 0xc6, 0x41, 0x07, 0xcc, 0xa0,
	0x45, 0x34, 0x47, 0xf4, 0xb8, 0x0d, 0x6c, 0x1b, 0xc2, 0xab, 0xd0, 0x57, 0x69, 0x03, 0x48, 0xd8,
	0x76, 0x47, 0x41, 0xfa, 0xd3, 0x6c, 0xaf, 0x8a, 0x40, 0x38, 0x64, 0xe2, 0xfb, 0x99, 0xf0, 0x83,
	0x93, 0x2a, 0xed, 0x4e, 0x25, 0xf4, 0xa0, 0xc2, 0xc3, 0x21, 0x02, 0x87, 0x6f, 0x30, 0x44, 0xe0,
	0x12, 0xdb, 0xdf, 0x7f, 0xb0, 0x69, 0x32, 0x4d, 0x22, 0xcf, 0x88, 0xcb, 0x0f, 0xe2, 0x5c, 0x93,
	0x52, 0xd4, 0xc1, 0xc0, 0x34, 0xe2, 0x8c, 0x81, 0xf6, 0xdf, 0xe7, 0xb1, 0x13, 0xfd, 0x87, 0x9a,
	0x41, 0xaf, 0x5c, 0xe5, 0x43, 0xa7, 0xb2, 0x16, 0xa8, 0xa4, 0xd9, 0xe2, 0x11, 0x11, 0xd2, 0xde,
	0x5e, 0x7e, 0x68, 0x9a, 0x00, 0xa1, 0x24, 0xda, 0x72, 0xf5, 0xd7, 0xd3, 0x21, 0x87, 0x43, 0xbf,
	0x86, 0x50, 0x5d, 0x5f, 0x28, 0x3b, 0x76, 0xf7, 0xc5, 0xf0, 0xe5, 0xfa, 0xbe, 0x38, 0x38, 0x74,
	0xb5, 0x2f, 0x8a, 0x55, 0xf3, 0xcb, 0xf8, 0x43, 0xf0, 0x4e, 0x12, 0x5d, 0x2b, 0xa5, 0xd5, 0x91,
	0xb8, 0x8c, 0x3f, 0x34, 0x2b, 0x0a, 0xd1, 0x65, 0x5c, 0x03, 0xd2, 0xcb, 0xb8, 0x82, 0xf4, 0x53,
	0x76, 0xc4, 0xc0, 0x34, 0xa3, 0xa4, 0x0d, 0xf7, 0x68, 0x65, 0x1a, 0x0b, 0x61, 0x41, 0x34, 0xd9,
	0x53, 0x50, 0x8b, 0x4f, 0x7d, 0x17, 0x2a, 0xe1, 0xec, 0x7d, 0x0b, 0x37, 0xf4, 0x9f, 0x64, 0x87,
	0xfa, 0x0f, 0x29, 0xe8, 0xe5, 0x34, 0x2d, 0x0b, 0xa9, 0x4f, 0x87, 0xb0, 0xd8, 0x97, 0x1f, 0x12,
	0x80, 0x33, 0xbc, 0x02, 0x5d, 0xba, 0x29, 0x06, 0xbd, 0x16, 0x63, 0x14, 0xff, 0x31, 0xb6, 0xdf,
	0x00, 0xc7, 0x21, 0xe8, 0xcd, 0x85, 0x65, 0x37, 0x53, 0xb4, 0xe1, 0x03, 0xee, 0xb0, 0x09, 0x5b,
	0x61, 0xea, 0x15, 0x55, 0xc8, 0x7a, 0x77, 0xd0, 0x80, 0x41, 0x92, 0xab, 0x7d, 0x26, 0x12, 0x8c,
	0x22, 0x2a, 0xb3, 0x5c, 0x4d, 0xd9, 0x64, 0xed, 0x3c, 0x57, 0xfb, 0xfb, 0x08, 0xc1, 0xef, 0xb2,
	0xc3, 0xfd, 0x87, 0x9a, 0x59, 0x1e, 0xf7, 0x03, 0x90, 0x07, 0xe4, 0xd2, 0xde, 0x6f, 0xc2, 0x50,
	0x5c, 0x7e, 0x68, 0x51, 0xd4, 0xa2, 0x35, 0x7d, 0x52, 0x37, 0x62, 0x63, 0x5a, 0x63, 0x6f, 0xa1,
	0xda, 0xcd, 0xa9, 0xd5, 0x7b, 0xc0, 0xd5, 0x9c, 0x59, 0xb6, 0x8e, 0xe6, 0x1c, 0xeb, 0x15, 0x35,
	0xa7, 0x16, 0x6a, 0xc1, 0x8e, 0xf6, 0x1f, 0x6a, 0x6a, 0xd5, 0xa1, 0x99, 0x94, 0x83, 0x26, 0xce,
	0xcd, 0xe5, 0x87, 0x94, 0xe6, 0x11, 0x4d, 0xce, 0x7d, 0xba, 0xc5, 0x2a, 0x32, 0x11, 0x2a, 0xfb,
	0x36, 0x76, 0xe8, 0x47, 0x6c, 0x1c, 0xe3, 0x75, 0xa2, 0x7e, 0xd4, 0x91, 0xb9, 0x0a, 0x20, 0x1f,
	0x87, 0x69, 0xf0, 0x2c, 0xaf, 0x32, 0x2a, 0xf8, 0x0a, 0x16, 0x91, 0x97, 0xfa, 0x14, 0xcd, 0x0f,
	0xd8, 0x18, 0x46, 0x00, 0x5d, 0xc9, 0x98, 0xb1, 0x23, 0x35, 0xad, 0x48, 0x8d, 0xc9, 0xdd, 0xd5,
	0x46, 0x6c, 0xc5, 0xc9, 0xc1, 0x3e, 0x41, 0xe2, 0x7c, 0xb9, 0x1f, 0xe5, 0x45, 0x9c, 0x26, 0x52,
	0x57, 0x0e, 0x7c, 0xf9, 0xb2, 0x28, 0x32, 0x7c, 0x59, 0xc2, 0x50, 0x07, 0x0f, 0x51, 0xd6, 0xf8,
	0x3e, 0x8f, 0x35, 0x9c, 0x9a, 0x5d, 0xa5, 0x93, 0x59, 0x53, 0x66, 0x3a, 0xb9, 0x0a, 0xf1, 0x26,
	0x4d, 0x3a, 0x2e, 0x08, 0x3d, 0xa9, 0x34, 0xe9, 0xc8, 0x2d, 0xdd, 0x28, 0x80, 0x53, 0x03, 0xf2,
	0xa1, 0x1b, 0x37, 0x20, 0x6f, 0xbc, 0xdb, 0x63, 0x77, 0xd7, 0x76, 0x53, 0x6b, 0x2d, 0x02, 0xb6,
	0x0b, 0xa9, 0x8c, 0x5e, 0x66, 0xac, 0xe2, 0x37, 0xfb, 0x3e, 0xf9, 0x45, 0x42, 0x89, 0x74, 0xd4,
	0xf4, 0x88, 0x7e, 0x51, 0xaf, 0x13, 0x35, 0xde, 0xe9, 0xb1, 0xfd, 0xd8, 0xca, 0xde, 0x7f, 0x1d,
	0xdb, 0xdd, 0x0d, 0x9e, 0x4a, 0x73, 0x39, 0x34, 0xa0, 0x11, 0x58, 0xe0, 0x05, 0x46, 0x23, 0x00,
	0xf5, 0x44, 0x23, 0x00, 0x25, 0x80, 0x1a, 0x27, 0x69, 0x8e, 0x03, 0x21, 0x2f, 0xf0, 0x02, 0x84,
	0xca, 0x7f, 0x52, 0x54, 0x5e, 0xd2, 0xf8, 0x7b, 0x6c, 0x5c, 0xbb, 0xb5, 0xeb, 0xcf, 0x7f, 0x94,
	0x31, 0xe3, 0xd7, 0x2e, 0x85, 0x50, 0x61, 0xcc, 0xa6, 0x40, 0x91, 0x31, 0x9b, 0x06, 0xa4, 0xc6,
	0x6c, 0x0a, 0xb2, 0xf1, 0xf5, 0xec, 0x0e, 0x29, 0xc0, 0x81, 0xbf, 0x0b, 0x3c, 0xdf, 0xa9, 0x2b,
	0x11, 0xb4, 0xf6, 0x04, 0x3b, 0x68, 0xae, 0x52, 0x28, 0xe8, 0x98, 0x30, 0x21, 0xc2, 0xa0, 0xc8,
	0x84, 0x88, 0x20, 0x50, 0x13, 0x22, 0x8c, 0xd1, 0xf8, 0xdc, 0x6e, 0x36, 0x86, 0x9d, 0xaa, 0xe6,
	0x93, 0x95, 0x94, 0xd8, 0xd2, 0x0d, 0x5f, 0xbf, 0x2d, 0x9d, 0x2b, 0x28, 0xc9, 0xd0, 0xcd, 0x0e,
	0x4a, 0xf2, 0x7a, 0xb6, 0xb7, 0x68, 0x41, 0xf4, 0x10, 0xe9, 0x6a, 0x2a, 0xdc, 0xb6, 0x66, 0xcf,
	0x44, 0x01, 0x72, 0xf1, 0x91, 0x20, 0xf4, 0x11, 0xa0, 0xc5, 0x61, 0xea, 0xdd, 0xcd, 0x76, 0xbd,
	0xa0, 0xee, 0x66, 0x81, 0x79, 0x1f, 0x11, 0x88, 0xb1, 0x92, 0x9f, 0x44, 0xc0, 0x14, 0x3c, 0x17,
	0x73, 0xd5, 0xe7, 0x11, 0x85, 0x63, 0xd9, 0xed, 0x20, 0xa4, 0xd0, 0xf9, 0xce, 0x83, 0x6e, 0xa9,
	0x37, 0xe7, 0x9d, 0xe7, 0x6d, 0x6c, 0x42, 0x1a, 0x48, 0x55, 0xe6, 0x7a, 0xaf, 0x89, 0x69, 0x2a,
	0x2c, 0xab, 0xaa, 0x33, 0x7e, 0x3f, 0x31, 0xb1, 0x1a, 0x34, 0xf1, 0x47, 0x0b, 0x17, 0x89, 0xc6,
	0x97, 0xf6, 0xb0, 0x63, 0xf2, 0x43, 0xc4, 0x4b, 0xf3, 0xec, 0x6a, 0xd4, 0xba, 0xa2, 0x18, 0x85,
	0x08, 0x7b, 0xee, 0x5d, 0x77, 0xd8, 0xf3, 0x05, 0xc6, 0xe0, 0x9f, 0x4b, 0x45, 0xd4, 0x52, 0x52,
	0xfc, 0x2b, 0x21, 0x2c, 0x99, 0x2e, 0x35, 0x3b, 0xdb, 0x40, 0xd2, 0xa8, 0x64, 0xba, 0x98, 0x1f,
	0x1b, 0x22, 0x35, 0x92, 0x5a, 0xa3, 0x2f, 0x11, 0x86, 0xb3, 0x50, 0x64, 0x16, 0xa9, 0x84, 0xb1,
	0xec, 0x66, 0xa1, 0xcc, 0x11, 0x88, 0x7d, 0xd7, 0xcd, 0x0b, 0xc4, 0x1e, 0xb1, 0x71, 0xf1, 0x98,
	0xdf, 0x6c, 0xf1, 0xd1, 0x13, 0xcc, 0x65, 0xb7, 0x39, 0xa0, 0xad, 0x91, 0x35, 0x07, 0x74, 0x05,
	0x8b, 0x2c, 0x95, 0x55, 0x6b, 0x42, 0xac, 0x78, 0xef, 0x7b, 0x6e, 0x76, 0xbc, 0xf7, 0xbd, 0x37,
	0x3d, 0xde, 0xfb, 0xc8, 0x4d, 0x8e, 0xf7, 0x3e, 0x7a, 0x83, 0x97, 0xb9, 0x4b, 0x6c, 0xbf, 0xfc,
	0x57, 0xac, 0x48, 0x61, 0x7a, 0xf2, 0x00, 0x97, 0x76, 0x2f, 0xa2, 0x72, 0xd3, 0x31, 0x0c, 0x4d,
	0x64, 0x5d, 0x5c, 0x41, 0xc2, 0xc8, 0xef, 0xbb, 0xd1, 0x30, 0xf2, 0xbf, 0x36, 0xcc, 0x6e, 0xb7,
	0x58, 0x09, 0x3d, 0xb7, 0x3e, 0xec, 0xb1, 0xa3, 0x41, 0xa7, 0x93, 0x5e, 0x8d, 0x42, 0xc5, 0x1d,
	0xc1, 0x9c, 0xad, 0xa2, 0x12, 0x9f, 0x16, 0x40, 0x92, 0x43, 0x82, 0xfd, 0x9d, 0x60, 0xbf, 0x8e,
	0x0a, 0xc3, 0x7e, 0x9d, 0xa4, 0x09, 0xfb, 0x0d, 0xaa, 0xe8, 0x56, 0x1e, 0xc8, 0xa1, 0xe7, 0x95,
	0x07, 0xd2, 0x4f, 0xd9, 0x01, 0xac, 0x4f, 0xdb, 0x2c, 0x7b, 0x92, 0xb0, 0x35, 0x35, 0x0a, 0x36,
	0xec, 0x70, 0x87, 0xc9, 0x50, 0x5b, 0x53, 0x04, 0xef, 0x7a, 0x27, 0xdd, 0x75, 0x53, 0xd3, 0xe4,
	0x7f, 0x9a, 0xb1, 0xc3, 0x2e, 0x75, 0xd2, 0x79, 0xb6, 0x2f, 0xe8, 0x95, 0xa9, 0x32, 0x18, 0xc1,
	0x01, 0x88, 0x7b, 0x65, 0xaa, 0xad, 0x45, 0x6e, 0x37, 0xe6, 0xea, 0x0e, 0x53, 0x11, 0x16, 0x68,
	0x58, 0xb0, 0x85, 0xef, 0x07, 0x71, 0x27, 0x58, 0x8e, 0x3b, 0x5c, 0x02, 0x7f, 0x26, 0x4d, 0x22,
	0x9c, 0x0b, 0x74, 0x1a, 0x55, 0xbe, 0x39, 0x4d, 0x10, 0xef, 0xa9, 0xa0, 0x51, 0x5b, 0x78, 0x0b,
	0x8f, 0xcb, 0x09, 0xab, 0x81, 0x88, 0x35, 0x37, 0x6c, 0xdc, 0xbb, 0xcf, 0x04, 0x34, 0xd6, 0x9c,
	0x04, 0x21, 0x72, 0xc2, 0x2a, 0xc0, 0xf8, 0xef, 0xf0, 0xb0, 0xfc, 0x05, 0x56, 0x94, 0x22, 0x80,
	0xc9, 0x49, 0x23, 0xf6, 0xd6, 0xef, 0x02, 0x4b, 0x4a, 0x93, 0x76, 0x96, 0x15, 0x29, 0xcd, 0x36,
	0xb1, 0x34, 0x52, 0x1a, 0xbc, 0x5f, 0x3d, 0xc9, 0x0e, 0x81, 0x7a, 0xae, 0x12, 0x9d, 0x18, 0x6e,
	0xea, 0x67, 0xa3, 0x95, 0x12, 0x2f, 0xdf, 0xbb, 0x90, 0x42, 0xcf, 0xbd, 0x86, 0x41, 0x37, 0x48,
	0x62, 0x22, 0x02, 0xb0, 0xbd, 0xb6, 0xf6, 0x98, 0x07, 0x07, 0xde, 0x46, 0x65, 0x7d, 0xdd, 0x8b,
	0x1a, 0x1a, 0xb0, 0xc8, 0xfc, 0x4e, 0x05, 0x19, 0xb4, 0x38, 0xdd, 0x20, 0x09, 0xda, 0xe0, 0xdb,
	0x59, 0x69, 0x79, 0xaf, 0xd1, 0xe2, 0x2c, 0x68, 0xa8, 0x4a, 0xfb, 0x2f, 0x57, 0x0c, 0xbe, 0x8e,
	0x0e, 0xd1, 0xe2, 0x74, 0x6b, 0x08, 0x71, 0x91, 0x4c, 0x68, 0x28, 0xd1, 0xf0, 0x8e, 0x18, 0x91,
	0x0c, 0x94, 0x9a, 0x78, 0x7c, 0xef, 0xc6, 0x5a, 0x4d, 0xf7, 0x00, 0x0b, 0x1d, 0xa9, 0x19, 0xe1,
	0x1e, 0x3b, 0x2a, 0xc0, 0xed, 0x0f, 0x1d, 0x35, 0xc2, 0x26, 0xb4, 0x53, 0xf9, 0xc6, 0xfb, 0x70,
	0x63, 0x03, 0x3e, 0xef, 0x70, 0x5e, 0x45, 0xf7, 0x43, 0x36, 0x5a, 0xb4, 0x82, 0x4e, 0xd4, 0xe4,
	0x87, 0x10, 0xa3, 0x5c, 0x57, 0xae, 0xda, 0x25, 0x5e, 0x7f, 0xbe, 0x87, 0x7d, 0x75, 0x65, 0x09,
	0xf2, 0xd5, 0x55, 0x34, 0xa8, 0x66, 0x55, 0xc2, 0xf9, 0x1f, 0xf4, 0xd8, 0x6d, 0x4a, 0x76, 0x94,
	0x3d, 0x8c, 0x9f, 0x11, 0xea, 0x34, 0x38, 0x4d, 0xc5, 0x11, 0xb3, 0xb0, 0xb1, 0x3e, 0x75, 0x5c,
	0x36, 0x7a, 0x99, 0x40, 0xc9, 0xb3, 0xf5, 0x15, 0x54, 0x0a, 0x75, 0x50, 0x22, 0xc6, 0x86, 0x45,
	0x1d, 0x29, 0xd0, 0x3b, 0x10, 0xdb, 0x0d, 0x2e, 0x63, 0xef, 0x47, 0x7a, 0x07, 0x6c, 0xbd, 0x01,
	0x42, 0x76, 0xc3, 0x65, 0xf1, 0x61, 0x49, 0xd9, 0x87, 0x88, 0xd1, 0xc7, 0x7c, 0xd8, 0xc8, 0x11,
	0xab, 0x54, 0x3b, 0x3e, 0x68, 0xbf, 0xb0, 0xd7, 0xb5, 0x9f, 0xf0, 0x74, 0xa3, 0x78, 0xe2, 0x20,
	0xd9, 0x2d, 0x67, 0xba, 0x30, 0x27, 0x92, 0x3d, 0x8b, 0x08, 0x75, 0xbd, 0x32, 0x05, 0x48, 0x14,
	0xa1, 0x4e, 0x03, 0xd2, 0x08, 0x75, 0x0a, 0xd2, 0x7f, 0x9c, 0x1d, 0xe0, 0x32, 0x93, 0x92, 0xc6,
	0x95, 0x20, 0xfc, 0xa0, 0x08, 0xb7, 0x7c, 0x4d, 0xf1, 0x39, 0x74, 0x7c, 0x11, 0x70, 0x2b, 0xda,
	0xb2, 0x81, 0x6f, 0xfc, 0xea, 0x90, 0x16, 0x19, 0x94, 0x29, 0x17, 0x15, 0x19, 0xd6, 0xd8, 0x31,
	0x73, 0x09, 0x71, 0x8c, 0x21, 0xf8, 0xd2, 0x56, 0x06, 0x5d, 0x0c, 0xe5, 0x4b, 0xec, 0x4b, 0x4c,
	0xdd, 0x90, 0x1e, 0x29, 0x1c, 0x04, 0x20, 0x5c, 0xf9, 0x6a, 0x90, 0x47, 0xa1, 0xca, 0x93, 0x36,
	0x22, 0x77, 0x03, 0x14, 0x82, 0x55, 0xd5, 0x09, 0x14, 0x88, 0x2a, 0xb4, 0x8c, 0xaa, 0x46, 0x44,
	0xe9, 0xbc, 0xb0, 0x29, 0xc4, 0x8f, 0x6c, 0x32, 0xd5, 0xbb, 0xb8, 0x00, 0xd8, 0xcf, 0x73, 0x3a,
	0xeb, 0xbb, 0xeb, 0x79, 0xae, 0x9a, 0x02, 0x1e, 0x3f, 0xcf, 0xc9, 0xac, 0xf9, 0xff, 0x72, 0x54,
	0xaf, 0x08, 0x35, 0xa6, 0xf0, 0x3d, 0xef, 0xf0, 0xd8, 0x64, 0xe5, 0xa8, 0x54, 0x9d, 0x11, 0x0b,
	0x04, 0x82, 0x43, 0xd9, 0x07, 0xad, 0xee, 0xd1, 0x4b, 0x6b, 0x8e, 0x5b, 0x47, 0xb7, 0x8e, 0x05,
	0x4e, 0x22, 0xfe, 0xc3, 0x6c, 0xcf, 0x4a, 0x27, 0xe8, 0xeb, 0xec, 0xfb, 0xa0, 0x47, 0x78, 0x04,
	0x4a, 0x8c, 0x1e, 0x41, 0x40, 0x90, 0x93, 0x57, 0x14, 0x81, 0xac, 0xd6, 0x0d, 0xda, 0x24, 0x53,
	0x86, 0x90, 0xd5, 0x78, 0xa9, 0xd4, 0xe6, 0x29, 0x59, 0x4d, 0x03, 0x52, 0x59, 0x4d, 0x41, 0x42,
	0x0e, 0x77, 0x65, 0x35, 0x1d, 0x06, 0x65, 0x20, 0x05, 0x27, 0x91, 0xc3, 0x5d, 0x56, 0xcc, 0x05,
	0x65, 0x80, 0x72, 0xb8, 0x63, 0x70, 0x9a, 0xc3, 0x1d, 0xc1, 0x5b, 0xf2, 0x81, 0xbc, 0x42, 0xb9,
	0xe4, 0x03, 0xe7, 0x92, 0xbf, 0x29, 0x6c, 0xc1, 0xbf, 0xc2, 0xfc, 0x34, 0x0f, 0xa3, 0x1c, 0xbf,
	0xba, 0x8b, 0xb8, 0x39, 0x23, 0xc2, 0xa5, 0xed, 0xbc, 0xa8, 0xd5, 0xed, 0xa0, 0x94, 0xc1, 0x55,
	0x44, 0xb2, 0xe2, 0x52, 0x1b, 0x13, 0x27, 0xa2, 0x04, 0xb1, 0x6a, 0xaf, 0xb9, 0x2c, 0xc9, 0x2f,
	0x95, 0xb2, 0x95, 0x95, 0x88, 0xd2, 0x16, 0xb0, 0x54, 0x22, 0x4a, 0x90, 0xb2, 0xc0, 0x99, 0x49,
	0xc0, 0x71, 0xd6, 0x14, 0x27, 0x22, 0x96, 0xce, 0x88, 0x72, 0x66, 0xd2, 0x2c, 0x4f, 0x04, 0xf1,
	0xbd, 0x8b, 0x92, 0x96, 0x28, 0x2e, 0xa5, 0x88, 0xc4, 0xc1, 0xbd, 0x86, 0x39, 0x1a, 0xad, 0xf4,
	0x9a, 0x5e, 0xf1, 0x30, 0xb0, 0xab, 0xd7, 0x30, 0xee, 0x9b, 0x9d, 0x7c, 0xec, 0x16, 0x9f, 0x7c,
	0x48, 0x4f, 0xbd, 0xef, 0xc6, 0xf4, 0xd4, 0x5c, 0x52, 0x51, 0x5e, 0x12, 0x7a, 0x03, 0xc0, 0xb7,
	0xec, 0x37, 0x92, 0x8a, 0xf4, 0x92, 0xc0, 0x37, 0x04, 0xf4, 0x54, 0xe0, 0xc2, 0x26, 0x92, 0x4a,
	0xbf, 0x8a, 0xde, 0xf8, 0x90, 0xc7, 0xac, 0x21, 0xc2, 0xd9, 0x18, 0x9e, 0x66, 0x47, 0x06, 0x64,
	0x5f, 0x00, 0x01, 0xd5, 0x99, 0x70, 0xe1, 0x5e, 0xe7, 0x05, 0xa8, 0xd2, 0x23, 0xbf, 0x5f, 0x4d,
	0xaa, 0xf0, 0x91, 0xdd, 0xec, 0xd0, 0xd2, 0x4a, 0x27, 0xbd, 0x8a, 0xac, 0x11, 0x9e, 0x66, 0x47,
	0x82, 0x30, 0xc8, 0xca, 0xb8, 0x1f, 0x35, 0x8b, 0xa0, 0x9b, 0x75, 0xa2, 0x26, 0x52, 0xd6, 0x8b,
	0xd8, 0xe1, 0xb2, 0x7e, 0x09, 0xaa, 0xa5, 0xea, 0x5e, 0xc5, 0x0e, 0x77, 0xe0, 0xd2, 0xd8, 0xe1,
	0x15, 0x64, 0x7e, 0x55, 0x0f, 0xda, 0x5c, 0xb2, 0xd5, 0x7a, 0x7d, 0xb8, 0xaa, 0x4f, 0xf3, 0x32,
	0x10, 0x5d, 0xe4, 0x55, 0x5d, 0x01, 0xd1, 0xc4, 0x59, 0x00, 0x15, 0xfa, 0xdf, 0xe3, 0xb1, 0x49,
	0xa9, 0x50, 0x42, 0xe7, 0xa2, 0x34, 0x2b, 0x11, 0x76, 0x8e, 0x3a, 0xb0, 0x88, 0xd4, 0x4e, 0xe9,
	0xfd, 0x2e, 0xac, 0x40, 0xc4, 0x59, 0xe1, 0xae, 0x33, 0x67, 0x45, 0x5d, 0x1b, 0xe4, 0xac, 0x88,
	0x9c, 0x44, 0xf8, 0xd1, 0x5f, 0x45, 0x87, 0x49, 0xde, 0x65, 0x8e, 0x7e, 0xbb, 0x03, 0xf4, 0xe8,
	0x77, 0xe3, 0x93, 0xa3, 0x3f, 0x72, 0x10, 0xf0, 0x3f, 0xe3, 0xb1, 0x13, 0xfc, 0x60, 0x2d, 0x9a,
	0xad, 0xb4, 0xd3, 0x91, 0x09, 0xe6, 0x56, 0x72, 0xf1, 0xf8, 0xb0, 0x26, 0x6d, 0x8e, 0xee, 0xc2,
	0x76, 0x37, 0xc5, 0xac, 0x06, 0x7c, 0x44, 0xc1, 0x89, 0xdb, 0x4a, 0x5d, 0xad, 0xb9, 0xad, 0xd4,
	0xb7, 0x44, 0x6e, 0x2b, 0x45, 0x0d, 0xa1, 0xc6, 0xf7, 0x7a, 0x6c, 0x54, 0x87, 0xcc, 0xe4, 0x47,
	0x6c, 0x19, 0x25, 0x81, 0x0e, 0xa3, 0x00, 0x47, 0xec, 0x45, 0x28, 0x31, 0x47, 0xac, 0x80, 0x20,
	0x47, 0xac, 0x28, 0xe2, 0xa7, 0xa2, 0xf8, 0x8f, 0xc6, 0x7b, 0x85, 0x53, 0x51, 0x50, 0x99, 0xb6,
	0xa2, 0x92, 0x12, 0x70, 0xaa, 0x62, 0x42, 0xf0, 0x8d, 0x39, 0xb6, 0x6f, 0xa9, 0x93, 0x5e, 0x50,
	0xd2, 0xc8, 0x8d, 0x3d, 0x6b, 0x35, 0x3e, 0x35, 0xc4, 0xfc, 0x6a, 0x68, 0x71, 0xff, 0x01, 0x36,
	0xdc, 0x4f, 0x62, 0x49, 0x0c, 0x02, 0x3b, 0x5f, 0x4e, 0x62, 0xe3, 0xed, 0xd9, 0x4f, 0x48, 0x8c,
	0x47, 0x0e, 0xeb, 0x5f, 0x61, 0x87, 0xfb, 0x65, 0x94, 0x35, 0xc3, 0x82, 0x5c, 0xf3, 0x86, 0x74,
	0x36, 0xa8, 0xb1, 0xcb, 0x65, 0x94, 0xcd, 0x2d, 0x5d, 0x74, 0x24, 0x19, 0x70, 0x20, 0x52, 0x1b,
	0x7d, 0x8e, 0x59, 0xa0, 0xdb, 0x5e, 0xca, 0x8e, 0x68, 0x1c, 0x9c, 0x63, 0x60, 0x18, 0xbd, 0xe4,
	0x8b, 0xd6, 0x5c, 0x29, 0x06, 0x5c, 0xa8, 0xf4, 0x79, 0x57, 0xb4, 0x67, 0x70, 0x1b, 0x1d, 0x76,
	0x8c, 0x08, 0x95, 0xc6, 0xc2, 0xfb, 0x02, 0x35, 0xad, 0x9d, 0x70, 0x58, 0x8f, 0x5d, 0xb7, 0x81,
	0xed, 0x87, 0x86, 0xd8, 0x51, 0xa7, 0xf5, 0x99, 0x30, 0x92, 0xd2, 0xbb, 0x0f, 0x79, 0xf7, 0x54,
	0xcc, 0xb5, 0xf4, 0x0e, 0x34, 0x3a, 0x32, 0xcb, 0x48, 0xaa, 0x96, 0x0c, 0x35, 0x92, 0x72, 0xd0,
	0xe9, 0xc5, 0x21, 0x9f, 0x6f, 0x6d, 0x88, 0xea, 0x9e, 0x6f, 0x69, 0xbc, 0xea, 0x98, 0x6f, 0x07,
	0x22, 0x99, 0x6f, 0x69, 0xc7, 0xaa, 0xe7, 0xbb, 0xf1, 0xb9, 0x21, 0x76, 0xc8, 0x1a, 0x50, 0x7f,
	0x9e, 0x8d, 0x1a, 0x23, 0x1c, 0xf1, 0xe1, 0x10, 0x2c, 0x0d, 0x9b, 0xe0, 0x9c, 0xb0, 0x8c, 0x7b,
	0x69, 0x8a, 0x78, 0x6d, 0x7d, 0x73, 0x53, 0xec, 0x78, 0xcd, 0x9b, 0xde, 0xf0, 0x8d, 0xc4, 0xc7,
	0xb0, 0x2d, 0xa8, 0x77, 0xdd, 0x0c, 0x0b, 0xea, 0x8f, 0x0d, 0xb1, 0x5a, 0x86, 0x79, 0x33, 0x03,
	0x77, 0xb6, 0xd8, 0x58, 0x96, 0x76, 0x3a, 0xe2, 0x89, 0xa9, 0x8c, 0xf2, 0x7e, 0xd0, 0x91, 0x8c,
	0x4e, 0xb8, 0xe3, 0x8b, 0xba, 0x79, 0x59, 0x85, 0xdc, 0xf1, 0x2d, 0x24, 0xea, 0x8e, 0x4f, 0xb1,
	0x20, 0x7a, 0x2c, 0x92, 0x09, 0x86, 0x51, 0xf4, 0x58, 0x2c, 0x0b, 0xa8, 0xe8, 0xb1, 0x6e, 0x11,
	0x80, 0x15, 0x1a, 0xb6, 0xf1, 0xc5, 0x3d, 0x7c, 0x57, 0xa7, 0x79, 0x57, 0x3a, 0x5a, 0xa3, 0x7d,
	0xd6, 0x66, 0xe3, 0xcb, 0x41, 0x12, 0x5e, 0x8d, 0xc3, 0x72, 0xb5, 0x99, 0x45, 0x79, 0x2b, 0x4a,
	0x4a, 0x1c, 0x49, 0x64, 0x46, 0x55, 0x2e, 0x8a, 0x3a, 0xa3, 0xe2, 0xa8, 0xa0, 0x91, 0x95, 0xbd,
	0x6c, 0xe1, 0x81, 0x03, 0x62, 0xda, 0x5c, 0xce, 0xd3, 0x20, 0x6c, 0x05, 0x45, 0x29, 0x2f, 0xc6,
	0xc2, 0x01, 0x31, 0x9d, 0x51, 0xc5, 0xc8, 0x01, 0x11, 0x01, 0x53, 0xdb, 0x6f, 0x03, 0x2d, 0x89,
	0xea, 0x20, 0xff, 0xf2, 0x6a, 0x2c, 0x89, 0xea, 0xe4, 0x01, 0x84, 0xa8, 0x06, 0xb6, 0x88, 0x6a,
	0x68, 0xff, 0x6d, 0x6c, 0x22, 0x49, 0x9b, 0x79, 0xd4, 0x8e, 0x8b, 0x12, 0xee, 0x33, 0x86, 0xfe,
	0x2e, 0xa0, 0x0f, 0xef, 0x91, 0xe7, 0xd2, 0x0b, 0x1a, 0x02, 0xb7, 0x74, 0xbf, 0x6e, 0xc9, 0x45,
	0x81, 0xbc, 0x47, 0x26, 0x2e, 0x12, 0x7e, 0xcc, 0xfc, 0x24, 0x6d, 0xf6, 0x92, 0x2b, 0x49, 0x7a,
	0x35, 0x69, 0xf6, 0x12, 0xd1, 0xb2, 0xc8, 0x99, 0x02, 0x1e, 0x60, 0xe7, 0xd2, 0x4b, 0xa2, 0xf2,
	0x52, 0xa2, 0x1a, 0xbd, 0x47, 0x37, 0x6a, 0xe1, 0x51, 0x6e, 0x63, 0x21, 0x82, 0xd3, 0x16, 0xe0,
	0x38, 0x3f, 0x56, 0x5c, 0xfa, 0xc0, 0x69, 0x8b, 0x37, 0x99, 0x3b, 0x3f, 0xf7, 0x65, 0xa8, 0xe5,
	0xcd, 0x3e, 0x78, 0x22, 0x71, 0x93, 0x81, 0x67, 0xfe, 0xa8, 0x95, 0xf6, 0xa3, 0x7c, 0xad, 0x49,
	0x13, 0x1b, 0x8b, 0x67, 0x7e, 0x59, 0x67, 0x1e, 0xbc, 0x94, 0xde, 0xd4, 0x42, 0xa2, 0xcf, 0xfc,
	0x14, 0x0b, 0x5e, 0xe9, 0xf9, 0x1e, 0xd0, 0xc1, 0x08, 0x44, 0x1c, 0xbd, 0x62, 0x72, 0x04, 0x18,
	0x90, 0x78, 0xa5, 0x47, 0x9b, 0x44, 0x84, 0xd2, 0xc3, 0xaf, 0xf4, 0x2e, 0x6c, 0xfa, 0x4a, 0x5f,
	0x45, 0x6f, 0x7c, 0x9f, 0xc7, 0x39, 0x53, 0xde, 0x6b, 0x95, 0xbd, 0x3c, 0x0a, 0x97, 0xd6, 0x8a,
	0x4e, 0xda, 0x3e, 0x1b, 0x27, 0x57, 0xd4, 0x2d, 0x8b, 0xf7, 0x51, 0x3d, 0x31, 0xcb, 0xf0, 0xa2,
	0xe7, 0x45, 0x91, 0xb9, 0x65, 0x49, 0x18, 0xc2, 0x8d, 0x65, 0x99, 0x7f, 0x8a, 0x8d, 0xf4, 0x92,
	0x50, 0xd0, 0x40, 0xf1, 0xc1, 0x2e, 0xc9, 0x32, 0xf4, 0x04, 0x27, 0x4b, 0x88, 0xae, 0x49, 0x15,
	0x36, 0xfa, 0x6c, 0xc2, 0xd5, 0xcb, 0x6e, 0x90, 0xf9, 0x4f, 0xb0, 0xdd, 0x9d, 0x38, 0xb9, 0x52,
	0xd8, 0x81, 0x2a, 0xea, 0xbe, 0x4a, 0x48, 0x00, 0xfc, 0x57, 0x61, 0x24, 0x00, 0xa0, 0x40, 0x24,
	0x00, 0x28, 0x69, 0xb4, 0xd8, 0x41, 0x9a, 0xaa, 0xc2, 0x7f, 0x4c, 0x7b, 0x64, 0x8a, 0xf6, 0x5c,
	0xb1, 0x56, 0xae, 0xcf, 0x4b, 0xb3, 0xf1, 0x03, 0x1e, 0x63, 0x06, 0xdb, 0x3f, 0xcd, 0x46, 0xe3,
	0xac, 0x49, 0x62, 0x3c, 0x89, 0xfc, 0x18, 0x8b, 0xfa, 0x14, 0xd3, 0xf9, 0x31, 0x1c, 0x41, 0x5b,
	0x46, 0xe2, 0x4c, 0x86, 0xe4, 0xb9, 0xc4, 0x0e, 0x68, 0x88, 0x66, 0x27, 0x4a, 0xe4, 0x51, 0x00,
	0x1e, 0x2d, 0x8a, 0xd8, 0xd9, 0x08, 0xe5, 0x4c, 0x22, 0xd0, 0x84, 0x01, 0x29, 0x9a, 0x67, 0xa3,
	0xa4, 0xf1, 0x93, 0x1e, 0x3b, 0x7a, 0x31, 0xea, 0x44, 0xdd, 0xa8, 0xcc, 0xd7, 0x2e, 0x44, 0xc2,
	0x6c, 0x01, 0xcc, 0x69, 0x54, 0x9c, 0x3d, 0xef, 0xfa, 0xe2, 0xec, 0xbd, 0x86, 0xed, 0x82, 0x17,
	0xda, 0x21, 0x83, 0x26, 0x9f, 0x67, 0x55, 0x74, 0x1f, 0xeb, 0x69, 0x16, 0xc0, 0xb5, 0xa8, 0x3d,
	0x6c, 0xd0, 0xb6, 0x22, 0x6a, 0x7f, 0xfb, 0x10, 0xf3, 0x75, 0xf7, 0x21, 0xe8, 0x26, 0xf4, 0x3d,
	0x64, 0x23, 0xb9, 0xfc, 0x16, 0x39, 0xb3, 0x77, 0x98, 0x10, 0x94, 0x8e, 0x8f, 0x15, 0xeb, 0x58,
	0x95, 0x20, 0x0f, 0x00, 0x59, 0x42, 0xad, 0xce, 0x64, 0x21, 0x28, 0x5f, 0xa3, 0xbc, 0x0f, 0x79,
	0xbc, 0xb0, 0xf9, 0xda, 0x12, 0x14, 0x12, 0xe5, 0xab, 0x02, 0xb3, 0x8c, 0xbc, 0x01, 0x2e, 0x93,
	0xc9, 0x49, 0xfa, 0xe0, 0xb9, 0xaf, 0x63, 0xe6, 0xa9, 0xe4, 0x24, 0xfd, 0x28, 0x97, 0x26, 0xdd,
	0xb7, 0x13, 0x62, 0xb6, 0x4d, 0x37, 0x2b, 0x34, 0x2c, 0x5f, 0x84, 0x7e, 0x35, 0xde, 0xe7, 0xf3,
	0xcf, 0x1a, 0xb4, 0xa7, 0x97, 0x85, 0x2a, 0x89, 0x35, 0xca, 0x49, 0x20, 0x48, 0x5c, 0x82, 0x3a,
	0xb3, 0x67, 0xc4, 0x6f, 0x43, 0x58, 0xe0, 0x12, 0xc2, 0xa2, 0xa8, 0xf1, 0xc3, 0xbb, 0xd9, 0x31,
	0x77, 0x68, 0x50, 0x5b, 0x20, 0xf5, 0x9e, 0x87, 0x40, 0xfa, 0x04, 0x3b, 0x68, 0x1c, 0xd2, 0xe0,
	0x45, 0x74, 0xc8, 0xe4, 0x10, 0xd7, 0xf4, 0xe8, 0x5b, 0x27, 0x45, 0x20, 0xba, 0xcc, 0x16, 0xc6,
	0xf0, 0xbb, 0xcc, 0x38, 0xb3, 0xc9, 0x48, 0xa5, 0x41, 0xa7, 0x83, 0xf5, 0xe7, 0xba, 0x05, 0xf8,
	0xca, 0xe9, 0x0e, 0xb2, 0x8c, 0x75, 0x60, 0x92, 0xab, 0x53, 0xcb, 0x46, 0xe5, 0xa2, 0x54, 0x74,
	0xad, 0xb4, 0x3e, 0x47, 0x48, 0xb7, 0x20, 0x4a, 0x9d, 0x42, 0x95, 0xf2, 0x8b, 0x1a, 0xca, 0xcc,
	0xa6, 0xac, 0xff, 0xa8, 0xb1, 0xc8, 0xc2, 0x03, 0x05, 0x07, 0xc6, 0x30, 0x9f, 0xb6, 0xdb, 0xe4,
	0x2c, 0xc3, 0xad, 0xa1, 0xaf, 0x7b, 0x89, 0xa3, 0x45, 0xe7, 0x07, 0x1e, 0x89, 0x1c, 0x04, 0xfc,
	0xcb, 0x5a, 0xf6, 0xdf, 0x43, 0x6f, 0x81, 0x56, 0x10, 0xbd, 0xeb, 0xbd, 0x14, 0xe0, 0x40, 0x62,
	0x7b, 0x61, 0xc8, 0x6e, 0x28, 0x36, 0xe2, 0xff, 0x35, 0xc4, 0x46, 0xf9, 0x79, 0x9f, 0xe3, 0x70,
	0x83, 0x60, 0xdd, 0xed, 0x99, 0xdb, 0xce, 0xa9, 0x24, 0x94, 0x86, 0xdd, 0x28, 0xdc, 0xa0, 0x6d,
	0xd2, 0xbd, 0x37, 0x12, 0x50, 0x90, 0xe1, 0x65, 0x65, 0x85, 0x4a, 0xfb, 0xf2, 0xba, 0x72, 0x7e,
	0x65, 0x05, 0x49, 0xfa, 0x2a, 0x81, 0x09, 0x02, 0xa6, 0x09, 0x4c, 0x0c, 0x34, 0x67, 0x2e, 0x69,
	0x62, 0x68, 0x0e, 0x1b, 0x3b, 0xa6, 0xf3, 0x09, 0x22, 0x29, 0x99, 0x0b, 0x02, 0x25, 0xcc, 0x25,
	0xd5, 0xb0, 0x26, 0x28, 0x22, 0x7c, 0xec, 0x2e, 0xf3, 0xc0, 0x01, 0x41, 0x11, 0xe5, 0xe7, 0x92,
	0xa0, 0x88, 0xf6, 0x07, 0x8b, 0xa0, 0x88, 0x1c, 0xb2, 0xf1, 0x09, 0x8f, 0x1d, 0xba, 0x54, 0x44,
	0x39, 0xf6, 0x6f, 0xe1, 0x13, 0xa4, 0x2c, 0xd9, 0x71, 0x82, 0x06, 0x63, 0xc0, 0xae, 0x26, 0xc8,
	0x61, 0xb5, 0xae, 0x51, 0x41, 0x5a, 0x29, 0xa2, 0x1c, 0x79, 0xa1, 0x0b, 0x69, 0x45, 0x96, 0x21,
	0x69, 0x45, 0x96, 0x50, 0x69, 0x45, 0x16, 0x36, 0x3e, 0xe4, 0x31, 0x9f, 0xe3, 0xcc, 0x45, 0x2b,
	0x71, 0x12, 0x85, 0x67, 0x53, 0xc8, 0xdb, 0x7c, 0xa3, 0xc7, 0xe3, 0x34, 0xdb, 0x9b, 0x05, 0x65,
	0x19, 0xe5, 0x2a, 0x59, 0x2b, 0x48, 0x61, 0x8b, 0xa2, 0x08, 0xa5, 0x3b, 0x16, 0x05, 0x64, 0x95,
	0xc8, 0xb2, 0xc6, 0x5b, 0xd9, 0xb1, 0x6a, 0x7f, 0x60, 0xb3, 0x06, 0x6c, 0xa4, 0x28, 0x83, 0x52,
	0xc6, 0xcc, 0x1a, 0xc6, 0xd1, 0x9f, 0xab, 0x18, 0xd2, 0x1f, 0x49, 0xc2, 0x23, 0x7f, 0x24, 0x59,
	0x42, 0x8f, 0x2a, 0x59, 0xc8, 0x4f, 0x96, 0x91, 0x4b, 0xbd, 0x38, 0x54, 0xf6, 0x35, 0xbd, 0x5e,
	0x1c, 0x36, 0x3b, 0x45, 0x27, 0x4d, 0xda, 0xf2, 0x2a, 0x07, 0x4b, 0xeb, 0xd2, 0xa5, 0xf9, 0xb9,
	0xb3, 0x50, 0x6a, 0x96, 0x16, 0x02, 0x25, 0x4b, 0x8b, 0x97, 0x0b, 0x58, 0x4d, 0xb0, 0x2b, 0x08,
	0x0e, 0x51, 0x82, 0x0b, 0x2e, 0x82, 0x5d, 0x37, 0x41, 0x01, 0xdb, 0x38, 0xc7, 0xf6, 0x5d, 0xea,
	0x47, 0x8f, 0x46, 0x6b, 0x42, 0xaf, 0xf4, 0x7a, 0xb6, 0xb7, 0xd7, 0x8f, 0x9a, 0x57, 0x22, 0xa5,
	0xdc, 0x00, 0xb3, 0x1a, 0x01, 0x61, 0x06, 0x5f, 0x82, 0xd0, 0x93, 0x0a, 0x60, 0x1a, 0x7d, 0x76,
	0x58, 0x64, 0x42, 0x39, 0x13, 0xe4, 0xe1, 0xd5, 0x20, 0x97, 0xfa, 0xaa, 0x26, 0x3b, 0x24, 0xb2,
	0x9f, 0x34, 0x57, 0x65, 0xb9, 0xa4, 0x2f, 0x2c, 0x9c, 0x08, 0x06, 0xb2, 0x70, 0xa2, 0x28, 0xd4,
	0xc2, 0x89, 0xe0, 0x34, 0xfe, 0xc9, 0x6e, 0x76, 0x44, 0x45, 0xe3, 0x48, 0x0a, 0x11, 0x54, 0x03,
	0x5a, 0x5e, 0x62, 0xfb, 0x45, 0xfc, 0x0d, 0x11, 0x79, 0x4d, 0x2e, 0x47, 0xa1, 0xe1, 0x80, 0x72,
	0x08, 0xb5, 0x86, 0x34, 0x1c, 0x08, 0x98, 0x6a, 0x38, 0x0c, 0x34, 0xc4, 0x28, 0x10, 0x70, 0xf0,
	0xe6, 0x88, 0x63, 0x14, 0x40, 0xb1, 0x7c, 0x71, 0xbc, 0x9d, 0x90, 0xb4, 0xdf, 0x1b, 0x59, 0xae,
	0x61, 0xfd, 0xa7, 0xd9, 0x11, 0x09, 0xd5, 0xbd, 0x06, 0x52, 0x69, 0x94, 0x83, 0x63, 0xdc, 0xb0,
	0x79, 0x82, 0x10, 0x94, 0x17, 0xde, 0xb8, 0xa8, 0x6b, 0x8d, 0x6e, 0xd1, 0x85, 0x4b, 0x9e, 0x20,
	0x04, 0xc0, 0xc2, 0x35, 0x83, 0x8c, 0xbe, 0x01, 0x45, 0x8b, 0x46, 0xdf, 0x20, 0x37, 0x2b, 0xfd,
	0x06, 0x7b, 0xcf, 0xca, 0x6f, 0x80, 0xa7, 0xd8, 0x98, 0xc9, 0x66, 0x54, 0x06, 0x40, 0xa0, 0x2b,
	0x0c, 0x9a, 0xe0, 0xae, 0x2c, 0xe8, 0x0a, 0xdb, 0x61, 0x49, 0xfd, 0x1e, 0x42, 0x1d, 0xe1, 0x91,
	0x43, 0x37, 0xb7, 0x10, 0x51, 0x53, 0x65, 0xd9, 0x69, 0x16, 0x51, 0x2b, 0x4d, 0xc2, 0x42, 0x86,
	0x52, 0x43, 0x4d, 0x5d, 0xbc, 0x78, 0x76, 0x49, 0xd4, 0x55, 0x9a, 0x42, 0x78, 0x8e, 0xa6, 0x2e,
	0x96, 0x1d, 0x89, 0x88, 0x86, 0x09, 0xe5, 0x47, 0x40, 0xc3, 0x44, 0x23, 0xc8, 0x22, 0x50, 0xc7,
	0x30, 0xc1, 0x0b, 0xd4, 0x8f, 0xef, 0x65, 0x07, 0xcd, 0x4a, 0x55, 0x51, 0xfd, 0x64, 0x78, 0x3b,
	0xf2, 0x3d, 0x28, 0xaa, 0x9f, 0x0c, 0x92, 0x47, 0x3e, 0xe8, 0x24, 0x89, 0x96, 0x57, 0xf7, 0x45,
	0xe3, 0xb2, 0x9e, 0x7e, 0x52, 0x98, 0x76, 0x83, 0x38, 0xc1, 0x01, 0x48, 0xfe, 0x7f, 0xda, 0xae,
	0xde, 0x37, 0x72, 0x2a, 0x88, 0xdb, 0x97, 0x8f, 0xe3, 0x9e, 0xee, 0xf2, 0xe1, 0x02, 0x0e, 0x74,
	0x32, 0x17, 0x0b, 0x44, 0x8d, 0x28, 0xa1, 0xc9, 0x25, 0x44, 0x42, 0x1c, 0x28, 0x0a, 0x28, 0x08,
	0x51, 0x58, 0x8e, 0xd7, 0x3e, 0xac, 0xac, 0x3f, 0x64, 0x6f, 0x36, 0x8b, 0x10, 0xe2, 0x3a, 0xa8,
	0x10, 0x0d, 0x3d, 0xe5, 0xfd, 0x19, 0x34, 0x48, 0x14, 0x14, 0x29, 0xaf, 0x42, 0xb7, 0x1b, 0xd1,
	0x50, 0x21, 0x2a, 0x4a, 0xf4, 0xe6, 0x7d, 0xcc, 0xcc, 0xb3, 0x37, 0x45, 0x14, 0xba, 0xdd, 0xf7,
	0x66, 0x66, 0x77, 0xed, 0x79, 0xb3, 0xe3, 0xf9, 0xf8, 0x8d, 0x1a, 0xd3, 0x0c, 0xcb, 0xfc, 0xce,
	0x13, 0x52, 0x5e, 0x10, 0x6d, 0x69, 0xa1, 0xcd, 0x7c, 0xf4, 0x55, 0x95, 0x94, 0x45, 0xaa, 0xc1,
	0x6e, 0xba, 0x38, 0x6f, 0xeb, 0x32, 0x4e, 0xc7, 0x45, 0x56, 0x99, 0x48, 0x10, 0xb4, 0x99, 0xef,
	0x2b, 0x32, 0x75, 0xed, 0xba, 0x83, 0xb6, 0x2e, 0xf7, 0x80, 0x06, 0xd3, 0xa5, 0x57, 0x08, 0x62,
	0x99, 0x94, 0xd1, 0x12, 0x49, 0x41, 0x2a, 0xa4, 0x97, 0x26, 0xff, 0x9c, 0xc6, 0xf1, 0xb4, 0xe8,
	0x8a, 0x93, 0x71, 0xa6, 0x63, 0x45, 0x10, 0xc0, 0x78, 0x5f, 0xef, 0x1d, 0xab, 0x2d, 0x0c, 0x60,
	0xb8, 0x4c, 0x2c, 0x80, 0x91, 0x71, 0x2e, 0xa9, 0x81, 0x14, 0xe9, 0x4e, 0x43, 0x03, 0x11, 0x65,
	0x47, 0x7c, 0x3c, 0x17, 0x1a, 0xa8, 0xcf, 0xc7, 0x34, 0x10, 0x31, 0xf2, 0x34, 0x34, 0x50, 0x22,
	0x20, 0x34, 0x1d, 0x53, 0x6c, 0xa3, 0x75, 0xac, 0x63, 0xfb, 0x38, 0x9b, 0x4d, 0x18, 0xbe, 0xd1,
	0x0e, 0x09, 0x1b, 0x2f, 0x01, 0x39, 0xda, 0xa8, 0x18, 0x13, 0x31, 0x92, 0x50, 0x17, 0x40, 0x73,
	0xff, 0xea, 0x4b, 0x40, 0xa1, 0x41, 0xcf, 0x48, 0x02, 0xf1, 0x80, 0x91, 0x04, 0xea, 0xe0, 0x54,
	0x1e, 0xd2, 0x69, 0xd6, 0x76, 0x59, 0x2c, 0x9f, 0x08, 0xc7, 0x67, 0xf0, 0x60, 0xf5, 0x12, 0x56,
	0x2f, 0x1c, 0xa9, 0xdd, 0x23, 0xbb, 0x49, 0x4f, 0xa9, 0xcb, 0xc8, 0x74, 0xba, 0x75, 0x39, 0x83,
	0x4c, 0x88, 0xae, 0x4e, 0xcc, 0x7d, 0xb8, 0xc3, 0x1f, 0xbf, 0xf6, 0xab, 0xee, 0x93, 0x3a, 0xc1,
	0xf3, 0xaa, 0xbd, 0x31, 0xb3, 0x44, 0xbc, 0x31, 0x2b, 0x82, 0x7b, 0x63, 0x86, 0x32, 0xfa, 0xe9,
	0xb6, 0x30, 0xb8, 0x42, 0x1f, 0x34, 0x26, 0x6a, 0xc4, 0x67, 0x5b, 0x83, 0xbf, 0x82, 0xc9, 0x87,
	0xfb, 0x26, 0x49, 0xdc, 0x4b, 0x38, 0x18, 0x3e, 0xa8, 0xc2, 0x1d, 0x95, 0x45, 0x15, 0x4b, 0x27,
	0xc2, 0xc0, 0xb2, 0xa8, 0x2a, 0x5c, 0xb9, 0x0c, 0x4f, 0xed, 0xa4, 0x0a, 0x17, 0x49, 0x79, 0x15,
	0xae, 0xa5, 0x0d, 0xce, 0xc5, 0x56, 0x5a, 0x57, 0x55, 0x66, 0x66, 0x53, 0x94, 0x85, 0x79, 0x66,
	0x96, 0x67, 0x70, 0x73, 0xcf, 0xee, 0xc1, 0xf8, 0xfa, 0xbf, 0xfe, 0x78, 0xbd, 0x47, 0x8e, 0x6a,
	0xe4, 0xee, 0xb0, 0x53, 0x91, 0x72, 0x49, 0xc1, 0x37, 0xe2, 0x95, 0x26, 0x6b, 0x61, 0xa2, 0x71,
	0x95, 0x66, 0x71, 0x5a, 0xd7, 0xa7, 0x45, 0x46, 0xff, 0x5f, 0x20, 0x5a, 0x7b, 0x88, 0x24, 0x7b,
	0x40, 0xa1, 0x0d, 0x8e, 0x8e, 0xd6, 0x2e, 0x91, 0xc0, 0xa2, 0xb5, 0xcd, 0x90, 0x08, 0x48, 0x08,
	0x10, 0x66, 0xd2, 0xf7, 0xa0, 0x12, 0x02, 0xb8, 0xa7, 0xad, 0xf6, 0x4e, 0xff, 0x13, 0x7b, 0x6d,
	0x0f, 0x0d, 0xe7, 0x62, 0x4f, 0x47, 0xeb, 0xd7, 0x87, 0x59, 0xfe, 0x4c, 0xdc, 0x33, 0xaf, 0x55,
	0x50, 0xe3, 0x36, 0xa6, 0x68, 0x8d, 0x2c, 0x1d, 0xd6, 0x08, 0xb9, 0xbc, 0x5e, 0x60, 0xe3, 0x6e,
	0x43, 0xe8, 0x01, 0x44, 0x6d, 0x92, 0x4c, 0xce, 0x4c, 0xb1, 0xab, 0x0a, 0xcf, 0xc1, 0x0a, 0x09,
	0xcf, 0xc1, 0x7b, 0x1e, 0x9e, 0x83, 0x25, 0x79, 0x6a, 0xd5, 0xab, 0x78, 0x94, 0x75, 0x69, 0x5b,
	0x34, 0x70, 0x6a, 0xef, 0xd8, 0x04, 0xdb, 0xb6, 0x12, 0xb5, 0x8f, 0x9b, 0x78, 0x6a, 0xfb, 0x8c,
	0xbd, 0x2a, 0x37, 0xc6, 0x09, 0x01, 0x22, 0x08, 0x05, 0x62, 0x23, 0xb1, 0x0a, 0x10, 0xc1, 0x22,
	0xed, 0x6f, 0xb4, 0x64, 0xdc, 0xeb, 0x56, 0x74, 0xa3, 0xe8, 0xf7, 0x55, 0xf1, 0xe6, 0x12, 0x30,
	0x33, 0x44, 0x92, 0x81, 0xdb, 0xf7, 0xd4, 0x17, 0x5b, 0x98, 0x84, 0x54, 0xc3, 0xb9, 0xdd, 0xce,
	0x05, 0xcb, 0xab, 0xd2, 0xd3, 0x60, 0x32, 0x40, 0x83, 0x9c, 0x0d, 0xd4, 0x20, 0x57, 0x22, 0xd3,
	0xa0, 0x82, 0x73, 0x49, 0x35, 0xd5, 0xa8, 0x03, 0xe8, 0xe8, 0x91, 0xbc, 0x95, 0x02, 0x29, 0xa0,
	0x5e, 0xde, 0x0e, 0x83, 0x2a, 0x18, 0xf4, 0xf0, 0x36, 0xc7, 0x9c, 0x4b, 0x5e, 0xda, 0x32, 0x99,
	0xc5, 0xf9, 0xb8, 0x3e, 0x37, 0x70, 0xbb, 0x70, 0x69, 0x3f, 0x4a, 0x66, 0x07, 0x72, 0x0d, 0x2f,
	0xad, 0x25, 0x63, 0x97, 0xb6, 0xd4, 0x74, 0x57, 0x14, 0x6f, 0xae, 0xfe, 0xdf, 0xc5, 0x9b, 0xe7,
	0xe2, 0xe5, 0xee, 0xec, 0x84, 0xb0, 0xd9, 0x81, 0x6c, 0x0a, 0x94, 0xf7, 0x11, 0xa4, 0x09, 0xce,
	0x4e, 0x2c, 0x17, 0x0e, 0x67, 0x7b, 0xcb, 0xaa, 0xcd, 0x00, 0x3b, 0xcf, 0x13, 0xf4, 0xf9, 0xa3,
	0x5f, 0x7d, 0x71, 0x9f, 0x57, 0x1e, 0x11, 0xe0, 0x8a, 0x2f, 0x1c, 0xe0, 0x8a, 0x65, 0xf3, 0xa3,
	0xae, 0x03, 0x67, 0x11, 0x3c, 0x16, 0x6b, 0x93, 0xa2, 0xd4, 0x60, 0xcb, 0x04, 0x33, 0xcb, 0x06,
	0x52, 0x54, 0x40, 0x1f, 0xde, 0x92, 0xf9, 0x27, 0xf2, 0x2d, 0x0b, 0xe8, 0xc3, 0x4a, 0xf4, 0xcc,
	0x17, 0x11, 0xff, 0x1d, 0x2e, 0xba, 0x92, 0x29, 0x2a, 0xdd, 0xd6, 0xe8, 0x3e, 0x8d, 0xdd, 0x71,
	0xe7, 0xaa, 0xba, 0x9c, 0x2a, 0x8e, 0xe6, 0xae, 0x62, 0x1c, 0xad, 0x27, 0x90, 0xfb, 0xd9, 0x0e,
	0x5f, 0xf4, 0xfd, 0x9a, 0x18, 0x28, 0xf6, 0x92, 0x66, 0x12, 0xfa, 0x7d, 0xd4, 0xb0, 0x8b, 0x62,
	0xa2, 0x6b, 0x5c, 0xc1, 0x4c, 0x42, 0x1f, 0xd1, 0xa7, 0x6a, 0x1d, 0xcd, 0x24, 0x23, 0x67, 0x66,
	0x32, 0x21, 0xf4, 0x80, 0xf4, 0x8c, 0xa8, 0xdc, 0x50, 0xf1, 0x78, 0x0b, 0x7b, 0x6e, 0x10, 0x89,
	0x5b, 0x17, 0x3d, 0x3e, 0xec, 0x21, 0x99, 0xbb, 0x75, 0x8f, 0x1b, 0x39, 0xe3, 0xb9, 0xb9, 0x03,
	0x78, 0x2a, 0x02, 0x65, 0x54, 0x62, 0x32, 0x87, 0x40, 0x7b, 0xb4, 0x60, 0x91, 0x95, 0x59, 0x21,
	0xe3, 0x0d, 0xd0, 0x22, 0xf7, 0x19, 0x99, 0x45, 0x2e, 0x5d, 0xce, 0xe0, 0x43, 0x21, 0x2c, 0xda,
	0xec, 0x48, 0x1f, 0x33, 0xf0, 0x96, 0x0c, 0x30, 0xed, 0x3e, 0x7a, 0x4b, 0x48, 0xc8, 0xbc, 0x25,
	0x03, 0x4a, 0x3b, 0x0a, 0xde, 0x16, 0x2b, 0x6d, 0x93, 0xeb, 0x7f, 0x49, 0x28, 0xe8, 0x39, 0x3a,
	0x3c, 0xc0, 0x82, 0x9e, 0xb6, 0xc9, 0x59, 0x41, 0x4f, 0xdb, 0xe4, 0x50, 0xdf, 0x3c, 0x9d, 0xc9,
	0x73, 0x8a, 0xd2, 0xb3, 0x6a, 0x52, 0xe4, 0x85, 0x76, 0x4b, 0xf5, 0xf0, 0xdb, 0x63, 0x49, 0x63,
	0xbe, 0x93, 0xa5, 0xc0, 0x9a, 0xb5, 0x65, 0x32, 0x58, 0xcd, 0xda, 0x74, 0x50, 0x48, 0xf4, 0x8f,
	0x2f, 0x1e, 0xb0, 0x66, 0x02, 0x02, 0xca, 0x0b, 0x4a, 0xf9, 0xad, 0xd8, 0x92, 0xba, 0x94, 0xe2,
	0xe8, 0x95, 0xce, 0x0d, 0x27, 0xed, 0xda, 0xfd, 0xc3, 0x5a, 0x8d, 0xd8, 0x50, 0xc6, 0x9d, 0xaf,
	0x93, 0xb6, 0x13, 0x57, 0x20, 0x33, 0xee, 0x09, 0xe7, 0x22, 0x69, 0xb9, 0x5b, 0x37, 0x95, 0x96,
	0xfb, 0xd3, 0x17, 0xf7, 0x8e, 0x2b, 0x45, 0x6f, 0xc7, 0x54, 0x02, 0xdc, 0xb5, 0x6e, 0x82, 0xf3,
	0xaf, 0x6c, 0x82, 0x53, 0x7d, 0x9f, 0x75, 0x37, 0xb1, 0x2d, 0x70, 0x0f, 0x08, 0x62, 0x76, 0xbf,
	0x01, 0x4e, 0x7c, 0x69, 0x69, 0x83, 0x53, 0x71, 0xb7, 0x68, 0x92, 0x32, 0x56, 0xdf, 0xc4, 0xcc,
	0xe7, 0xb7, 0x9f, 0x24, 0x2f, 0x3b, 0xf9, 0x5d, 0xf0, 0x54, 0x82, 0x6b, 0x24, 0x74, 0x43, 0x85,
	0x38, 0xf9, 0x3c, 0x4b, 0x1d, 0x7d, 0x2e, 0x5e, 0x3b, 0x6e, 0x9e, 0xf0, 0x32, 0x45, 0xa8, 0xbe,
	0x80, 0xdf, 0xfc, 0xae, 0x58, 0x4f, 0x32, 0xdd, 0xfe, 0x2f, 0x75, 0xed, 0x0d, 0x69, 0x6c, 0x77,
	0x33, 0xd5, 0xfa, 0x6f, 0xf2, 0x3f, 0x99, 0xdb, 0xf6, 0xbf, 0x96, 0x48, 0x8a, 0xe8, 0xbb, 0x15,
	0xb1, 0x7d, 0xdc, 0xe6, 0xbb, 0x5d, 0x57, 0x3c, 0xa9, 0x28, 0x38, 0xa6, 0x99, 0xfc, 0x91, 0x8e,
	0x69, 0x0f, 0x87, 0x1e, 0x13, 0xb2, 0xf7, 0x98, 0x94, 0xbb, 0x5b, 0x42, 0x5e, 0xee, 0xae, 0x28,
	0xd3, 0x71, 0xf0, 0xb5, 0xd8, 0x1c, 0x9e, 0x20, 0x67, 0x15, 0x6f, 0x60, 0x7a, 0x1c, 0x58, 0xb4,
	0xde, 0xe4, 0xb8, 0x87, 0xc6, 0xf8, 0x2c, 0x1d, 0x1a, 0xb7, 0x51, 0x32, 0x9e, 0x41, 0x00, 0x80,
	0x95, 0x9b, 0x06, 0x00, 0xa0, 0x63, 0x57, 0x57, 0xaf, 0x3b, 0x76, 0xf5, 0x07, 0x5f, 0x04, 0xf6,
	0x4e, 0x20, 0x20, 0xe5, 0x4c, 0x6c, 0x4e, 0xdb, 0x3c, 0x4e, 0x60, 0x99, 0xa2, 0xa3, 0xbe, 0x6a,
	0xae, 0x5e, 0xef, 0xf6, 0x69, 0xd0, 0x9c, 0xa3, 0x03, 0x5c, 0x26, 0xf1, 0x49, 0x2e, 0x8c, 0x83,
	0xe6, 0x50, 0x49, 0x8f, 0xde, 0xbb, 0x98, 0x87, 0xde, 0xf3, 0x79, 0xe8, 0xbd, 0x98, 0x87, 0xde,
	0xdf, 0xf3, 0xd0, 0xfb, 0x77, 0x1e, 0x7a, 0x4f, 0x17, 0xa1, 0xff, 0x6c, 0x11, 0x7a, 0xbf, 0x2c,
	0x42, 0xef, 0xb7, 0x45, 0xe8, 0x5d, 0x2c, 0x42, 0xef, 0xc5, 0x22, 0xf4, 0x7f, 0xbc, 0x0c, 0xbd,
	0x9f, 0x2f, 0x43, 0xef, 0xe2, 0x32, 0xf4, 0x9e, 0x5f, 0x86, 0xde, 0xc9, 0x3a, 0x38, 0xf8, 0xef,
	0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xee, 0xc5, 0xe7, 0xa5, 0x28, 0xa6, 0x05, 0x00,
}

func (m *AccessControlList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AccessControlListEntries != nil {
		l = m.AccessControlListEntries.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AccessControlListHash != 0 {
		n += 1 + sovGenModel(uint64(m.AccessControlListHash))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *AccessControlListTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *AddressGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AddressGroupPrefix != nil {
		l = m.AddressGroupPrefix.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DraftModeState)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FirewallRuleBackRefs) > 0 {
		for _, e := range m.FirewallRuleBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *AddressGroupTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *Alarm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AlarmRules != nil {
		l = m.AlarmRules.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AlarmSeverity != 0 {
		n += 1 + sovGenModel(uint64(m.AlarmSeverity))
	}
	if m.UveKeys != nil {
		l = m.UveKeys.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *AlarmTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *AliasIPPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ProjectBackRefs) > 0 {
		for _, e := range m.ProjectBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AliasIPs) > 0 {
		for _, e := range m.AliasIPs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *AliasIPPoolTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *AliasIP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.AliasIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.AliasIPAddressFamily)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.ProjectRefs) > 0 {
		for _, e := range m.ProjectRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *AliasIPProjectRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *AliasIPTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *AliasIPVirtualMachineInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *AnalyticsAlarmNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.AnalyticsAlarmNodeIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *AnalyticsAlarmNodeTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *AnalyticsNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.AnalyticsNodeIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *AnalyticsNodeTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *AnalyticsSNMPNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.AnalyticsSNMPNodeIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *AnalyticsSNMPNodeTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *APIAccessList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.APIAccessListEntries != nil {
		l = m.APIAccessListEntries.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *APIAccessListTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ApplicationPolicySet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AllApplications {
		n += 2
	}
	l = len(m.DraftModeState)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FirewallPolicyRefs) > 0 {
		for _, e := range m.FirewallPolicyRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.GlobalVrouterConfigRefs) > 0 {
		for _, e := range m.GlobalVrouterConfigRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ProjectBackRefs) > 0 {
		for _, e := range m.ProjectBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ApplicationPolicySetFirewallPolicyRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ApplicationPolicySetGlobalVrouterConfigRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ApplicationPolicySetTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BGPAsAService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AutonomousSystem != 0 {
		n += 1 + sovGenModel(uint64(m.AutonomousSystem))
	}
	l = len(m.BgpaasIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.BgpaasIpv4MappedIpv6Nexthop {
		n += 2
	}
	if m.BgpaasSessionAttributes != nil {
		l = m.BgpaasSessionAttributes.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.BgpaasShared {
		n += 3
	}
	if m.BgpaasSuppressRouteAdvertisement {
		n += 3
	}
	if len(m.BGPRouterRefs) > 0 {
		for _, e := range m.BGPRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ControlNodeZoneRefs) > 0 {
		for _, e := range m.ControlNodeZoneRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceHealthCheckRefs) > 0 {
		for _, e := range m.ServiceHealthCheckRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *BGPAsAServiceBGPRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BGPAsAServiceControlNodeZoneRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BGPAsAServiceServiceHealthCheckRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BGPAsAServiceTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BGPAsAServiceVirtualMachineInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BGPRouter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.BGPRouterParameters != nil {
		l = m.BGPRouterParameters.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.BGPRouterRefs) > 0 {
		for _, e := range m.BGPRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ControlNodeZoneRefs) > 0 {
		for _, e := range m.ControlNodeZoneRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SubClusterRefs) > 0 {
		for _, e := range m.SubClusterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BGPAsAServiceBackRefs) > 0 {
		for _, e := range m.BGPAsAServiceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BGPRouterBackRefs) > 0 {
		for _, e := range m.BGPRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.GlobalSystemConfigBackRefs) > 0 {
		for _, e := range m.GlobalSystemConfigBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterBackRefs) > 0 {
		for _, e := range m.PhysicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *BGPRouterBGPRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BGPRouterControlNodeZoneRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BGPRouterSubClusterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BGPRouterTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BGPVPN) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.BGPVPNType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ExportRouteTargetList != nil {
		l = m.ExportRouteTargetList.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ImportRouteTargetList != nil {
		l = m.ImportRouteTargetList.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.RouteTargetList != nil {
		l = m.RouteTargetList.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LogicalRouterBackRefs) > 0 {
		for _, e := range m.LogicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkBackRefs) > 0 {
		for _, e := range m.VirtualNetworkBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *BGPVPNTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BridgeDomain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Isid != 0 {
		n += 1 + sovGenModel(uint64(m.Isid))
	}
	if m.MacAgingTime != 0 {
		n += 1 + sovGenModel(uint64(m.MacAgingTime))
	}
	if m.MacLearningEnabled {
		n += 2
	}
	if m.MacLimitControl != nil {
		l = m.MacLimitControl.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.MacMoveControl != nil {
		l = m.MacMoveControl.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *BridgeDomainTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *Card) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.InterfaceMap != nil {
		l = m.InterfaceMap.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.HardwareBackRefs) > 0 {
		for _, e := range m.HardwareBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *CardTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *CliConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.AcceptedCliConfig)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.CommitDiffList != nil {
		l = m.CommitDiffList.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *CliConfigTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ConfigDatabaseNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ConfigDatabaseNodeIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ConfigDatabaseNodeTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ConfigNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ConfigNodeIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ConfigNodeTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ConfigRoot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ConfigRootTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ControlNodeZone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BGPAsAServiceBackRefs) > 0 {
		for _, e := range m.BGPAsAServiceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BGPRouterBackRefs) > 0 {
		for _, e := range m.BGPRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ControlNodeZoneTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *CustomerAttachment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AttachmentAddress != nil {
		l = m.AttachmentAddress.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FloatingIPRefs) > 0 {
		for _, e := range m.FloatingIPRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *CustomerAttachmentFloatingIPRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *CustomerAttachmentTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *CustomerAttachmentVirtualMachineInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DataCenterInterconnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.DataCenterInterconnectBGPAddressFamilies != nil {
		l = m.DataCenterInterconnectBGPAddressFamilies.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.DataCenterInterconnectBGPHoldTime != 0 {
		n += 1 + sovGenModel(uint64(m.DataCenterInterconnectBGPHoldTime))
	}
	if m.DataCenterInterconnectConfiguredRouteTargetList != nil {
		l = m.DataCenterInterconnectConfiguredRouteTargetList.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DataCenterInterconnectMode)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.LogicalRouterRefs) > 0 {
		for _, e := range m.LogicalRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkRefs) > 0 {
		for _, e := range m.VirtualNetworkRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *DataCenterInterconnectLogicalRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DataCenterInterconnectTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DataCenterInterconnectVirtualNetworkRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DatabaseNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DatabaseNodeIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *DatabaseNodeTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DeviceChassis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DeviceChassisType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterBackRefs) > 0 {
		for _, e := range m.PhysicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *DeviceChassisTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DeviceFunctionalGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DeviceFunctionalGroupDescription)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DeviceFunctionalGroupOsVersion)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.DeviceFunctionalGroupRoutingBridgingRoles != nil {
		l = m.DeviceFunctionalGroupRoutingBridgingRoles.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.PhysicalRoleRefs) > 0 {
		for _, e := range m.PhysicalRoleRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterBackRefs) > 0 {
		for _, e := range m.PhysicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *DeviceFunctionalGroupPhysicalRoleRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DeviceFunctionalGroupTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DeviceImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DeviceImageDeviceFamily)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DeviceImageFileURI)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DeviceImageMD5)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DeviceImageOsVersion)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DeviceImageSha1)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.DeviceImageSize != 0 {
		n += 2 + sovGenModel(uint64(m.DeviceImageSize))
	}
	if m.DeviceImageSupportedPlatforms != nil {
		l = m.DeviceImageSupportedPlatforms.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.DeviceImageVendorName)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.HardwareRefs) > 0 {
		for _, e := range m.HardwareRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterBackRefs) > 0 {
		for _, e := range m.PhysicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *DeviceImageHardwareRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DeviceImageTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DevicemgrNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DevicemgrNodeIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *DevicemgrNodeTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DiscoveryServiceAssignment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DsaRules) > 0 {
		for _, e := range m.DsaRules {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *DiscoveryServiceAssignmentTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *Domain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.DomainLimits != nil {
		l = m.DomainLimits.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.APIAccessLists) > 0 {
		for _, e := range m.APIAccessLists {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.Namespaces) > 0 {
		for _, e := range m.Namespaces {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.Projects) > 0 {
		for _, e := range m.Projects {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceTemplates) > 0 {
		for _, e := range m.ServiceTemplates {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualDNSs) > 0 {
		for _, e := range m.VirtualDNSs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *DomainTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DsaRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.DsaRuleEntry != nil {
		l = m.DsaRuleEntry.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *DsaRuleTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *E2ServiceProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.E2ServiceProviderPromiscuous {
		n += 2
	}
	if len(m.PeeringPolicyRefs) > 0 {
		for _, e := range m.PeeringPolicyRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterRefs) > 0 {
		for _, e := range m.PhysicalRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *E2ServiceProviderPeeringPolicyRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *E2ServiceProviderPhysicalRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *E2ServiceProviderTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FabricNamespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.FabricNamespaceType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.FabricNamespaceValue != nil {
		l = m.FabricNamespaceValue.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FabricNamespaceTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *Fabric) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.FabricCredentials != nil {
		l = m.FabricCredentials.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.FabricEnterpriseStyle {
		n += 2
	}
	l = len(m.FabricOsVersion)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.FabricZTP {
		n += 2
	}
	if len(m.IntentMapRefs) > 0 {
		for _, e := range m.IntentMapRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NodeProfileRefs) > 0 {
		for _, e := range m.NodeProfileRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkRefs) > 0 {
		for _, e := range m.VirtualNetworkRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterBackRefs) > 0 {
		for _, e := range m.PhysicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FabricNamespaces) > 0 {
		for _, e := range m.FabricNamespaces {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualPortGroups) > 0 {
		for _, e := range m.VirtualPortGroups {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FabricIntentMapRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FabricNodeProfileRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FabricTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FabricVirtualNetworkRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FeatureConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.FeatureConfigAdditionalParams != nil {
		l = m.FeatureConfigAdditionalParams.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.FeatureConfigVendorConfig != nil {
		l = m.FeatureConfigVendorConfig.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FeatureConfigTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FeatureFlag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.EnableFeature {
		n += 2
	}
	l = len(m.FeatureDescription)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.FeatureFlagVersion)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.FeatureID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.FeatureRelease)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.FeatureState)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FeatureFlagTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *Feature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FeatureRefs) > 0 {
		for _, e := range m.FeatureRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FeatureBackRefs) > 0 {
		for _, e := range m.FeatureBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoleDefinitionBackRefs) > 0 {
		for _, e := range m.RoleDefinitionBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FeatureFeatureRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FeatureTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FirewallPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DraftModeState)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FirewallRuleRefs) > 0 {
		for _, e := range m.FirewallRuleRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SecurityLoggingObjectRefs) > 0 {
		for _, e := range m.SecurityLoggingObjectRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ApplicationPolicySetBackRefs) > 0 {
		for _, e := range m.ApplicationPolicySetBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FirewallPolicyFirewallRuleRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FirewallPolicySecurityLoggingObjectRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FirewallPolicyTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FirewallRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ActionList != nil {
		l = m.ActionList.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DraftModeState)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Endpoint1 != nil {
		l = m.Endpoint1.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Endpoint2 != nil {
		l = m.Endpoint2.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.MatchTagTypes != nil {
		l = m.MatchTagTypes.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.MatchTags != nil {
		l = m.MatchTags.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.Service != nil {
		l = m.Service.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.AddressGroupRefs) > 0 {
		for _, e := range m.AddressGroupRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SecurityLoggingObjectRefs) > 0 {
		for _, e := range m.SecurityLoggingObjectRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceGroupRefs) > 0 {
		for _, e := range m.ServiceGroupRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkRefs) > 0 {
		for _, e := range m.VirtualNetworkRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FirewallPolicyBackRefs) > 0 {
		for _, e := range m.FirewallPolicyBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FirewallRuleAddressGroupRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FirewallRuleSecurityLoggingObjectRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FirewallRuleServiceGroupRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FirewallRuleTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FirewallRuleVirtualNetworkRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FloatingIPPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.FloatingIPPoolSubnets != nil {
		l = m.FloatingIPPoolSubnets.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ProjectBackRefs) > 0 {
		for _, e := range m.ProjectBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FloatingIPs) > 0 {
		for _, e := range m.FloatingIPs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FloatingIPPoolTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FloatingIP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.FloatingIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.FloatingIPAddressFamily)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.FloatingIPFixedIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.FloatingIPIsVirtualIP {
		n += 2
	}
	if m.FloatingIPPortMappings != nil {
		l = m.FloatingIPPortMappings.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.FloatingIPPortMappingsEnable {
		n += 3
	}
	l = len(m.FloatingIPTrafficDirection)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.ProjectRefs) > 0 {
		for _, e := range m.ProjectRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.CustomerAttachmentBackRefs) > 0 {
		for _, e := range m.CustomerAttachmentBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FloatingIPProjectRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FloatingIPTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FloatingIPVirtualMachineInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FlowNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.FlowNodeInbandInterface)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.FlowNodeIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.FlowNodeLoadBalancerIP)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkRefs) > 0 {
		for _, e := range m.VirtualNetworkRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.InstanceIPBackRefs) > 0 {
		for _, e := range m.InstanceIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FlowNodeTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FlowNodeVirtualNetworkRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ForwardingClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ForwardingClassDSCP != 0 {
		n += 1 + sovGenModel(uint64(m.ForwardingClassDSCP))
	}
	if m.ForwardingClassID != 0 {
		n += 1 + sovGenModel(uint64(m.ForwardingClassID))
	}
	if m.ForwardingClassMPLSExp != 0 {
		n += 1 + sovGenModel(uint64(m.ForwardingClassMPLSExp))
	}
	if m.ForwardingClassVlanPriority != 0 {
		n += 1 + sovGenModel(uint64(m.ForwardingClassVlanPriority))
	}
	if len(m.QosQueueRefs) > 0 {
		for _, e := range m.QosQueueRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ForwardingClassQosQueueRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ForwardingClassTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *GlobalAnalyticsConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.StructuredSyslogConfigs) > 0 {
		for _, e := range m.StructuredSyslogConfigs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *GlobalAnalyticsConfigTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *GlobalQosConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ControlTrafficDSCP != nil {
		l = m.ControlTrafficDSCP.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ForwardingClasss) > 0 {
		for _, e := range m.ForwardingClasss {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.QosConfigs) > 0 {
		for _, e := range m.QosConfigs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.QosQueues) > 0 {
		for _, e := range m.QosQueues {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *GlobalQosConfigTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *GlobalSystemConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AlarmEnable {
		n += 2
	}
	if m.AutonomousSystem != 0 {
		n += 1 + sovGenModel(uint64(m.AutonomousSystem))
	}
	if m.BGPAlwaysCompareMed {
		n += 2
	}
	if m.BgpaasParameters != nil {
		l = m.BgpaasParameters.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ConfigVersion)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.DataCenterInterconnectAsnNamespace != nil {
		l = m.DataCenterInterconnectAsnNamespace.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.DataCenterInterconnectLoopbackNamespace != nil {
		l = m.DataCenterInterconnectLoopbackNamespace.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.Enable4byteAs {
		n += 3
	}
	if m.EnableSecurityPolicyDraft {
		n += 3
	}
	if m.GracefulRestartParameters != nil {
		l = m.GracefulRestartParameters.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.IbgpAutoMesh {
		n += 3
	}
	if m.IgmpEnable {
		n += 3
	}
	if m.IPFabricSubnets != nil {
		l = m.IPFabricSubnets.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.MacAgingTime != 0 {
		n += 2 + sovGenModel(uint64(m.MacAgingTime))
	}
	if m.MacLimitControl != nil {
		l = m.MacLimitControl.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.MacMoveControl != nil {
		l = m.MacMoveControl.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.PluginTuning != nil {
		l = m.PluginTuning.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.RDClusterSeed != 0 {
		n += 2 + sovGenModel(uint64(m.RDClusterSeed))
	}
	if m.SupportedDeviceFamilies != nil {
		l = m.SupportedDeviceFamilies.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.SupportedFabricAnnotations != nil {
		l = m.SupportedFabricAnnotations.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.SupportedVendorHardwares != nil {
		l = m.SupportedVendorHardwares.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.UserDefinedLogStatistics != nil {
		l = m.UserDefinedLogStatistics.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.BGPRouterRefs) > 0 {
		for _, e := range m.BGPRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.QosConfigBackRefs) > 0 {
		for _, e := range m.QosConfigBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.Alarms) > 0 {
		for _, e := range m.Alarms {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AnalyticsAlarmNodes) > 0 {
		for _, e := range m.AnalyticsAlarmNodes {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AnalyticsNodes) > 0 {
		for _, e := range m.AnalyticsNodes {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AnalyticsSNMPNodes) > 0 {
		for _, e := range m.AnalyticsSNMPNodes {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.APIAccessLists) > 0 {
		for _, e := range m.APIAccessLists {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ConfigDatabaseNodes) > 0 {
		for _, e := range m.ConfigDatabaseNodes {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ConfigNodes) > 0 {
		for _, e := range m.ConfigNodes {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ControlNodeZones) > 0 {
		for _, e := range m.ControlNodeZones {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DataCenterInterconnects) > 0 {
		for _, e := range m.DataCenterInterconnects {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DatabaseNodes) > 0 {
		for _, e := range m.DatabaseNodes {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DeviceImages) > 0 {
		for _, e := range m.DeviceImages {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DevicemgrNodes) > 0 {
		for _, e := range m.DevicemgrNodes {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.Fabrics) > 0 {
		for _, e := range m.Fabrics {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.Features) > 0 {
		for _, e := range m.Features {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FeatureFlags) > 0 {
		for _, e := range m.FeatureFlags {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FlowNodes) > 0 {
		for _, e := range m.FlowNodes {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.GlobalAnalyticsConfigs) > 0 {
		for _, e := range m.GlobalAnalyticsConfigs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.GlobalQosConfigs) > 0 {
		for _, e := range m.GlobalQosConfigs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.GlobalVrouterConfigs) > 0 {
		for _, e := range m.GlobalVrouterConfigs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.IntentMaps) > 0 {
		for _, e := range m.IntentMaps {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.JobTemplates) > 0 {
		for _, e := range m.JobTemplates {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NodeProfiles) > 0 {
		for _, e := range m.NodeProfiles {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.OverlayRoles) > 0 {
		for _, e := range m.OverlayRoles {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRoles) > 0 {
		for _, e := range m.PhysicalRoles {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouters) > 0 {
		for _, e := range m.PhysicalRouters {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoleDefinitions) > 0 {
		for _, e := range m.RoleDefinitions {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceApplianceSets) > 0 {
		for _, e := range m.ServiceApplianceSets {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualRouters) > 0 {
		for _, e := range m.VirtualRouters {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.WebuiNodes) > 0 {
		for _, e := range m.WebuiNodes {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *GlobalSystemConfigBGPRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *GlobalSystemConfigTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *GlobalVrouterConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.EcmpHashingIncludeFields != nil {
		l = m.EcmpHashingIncludeFields.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.EnableSecurityLogging {
		n += 2
	}
	if m.EncapsulationPriorities != nil {
		l = m.EncapsulationPriorities.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.EncryptionMode)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.EncryptionTunnelEndpoints != nil {
		l = m.EncryptionTunnelEndpoints.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.FlowAgingTimeoutList != nil {
		l = m.FlowAgingTimeoutList.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.FlowExportRate != 0 {
		n += 2 + sovGenModel(uint64(m.FlowExportRate))
	}
	l = len(m.ForwardingMode)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.LinklocalServices != nil {
		l = m.LinklocalServices.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.PortTranslationPools != nil {
		l = m.PortTranslationPools.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.VxlanNetworkIdentifierMode)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ApplicationPolicySetBackRefs) > 0 {
		for _, e := range m.ApplicationPolicySetBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SecurityLoggingObjects) > 0 {
		for _, e := range m.SecurityLoggingObjects {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *GlobalVrouterConfigTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *HardwareInventory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.HardwareInventoryInventoryInfo)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *HardwareInventoryTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *Hardware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.CardRefs) > 0 {
		for _, e := range m.CardRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DeviceImageBackRefs) > 0 {
		for _, e := range m.DeviceImageBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NodeProfileBackRefs) > 0 {
		for _, e := range m.NodeProfileBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *HardwareCardRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *HardwareTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *HostBasedService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.HostBasedServiceType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkRefs) > 0 {
		for _, e := range m.VirtualNetworkRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *HostBasedServiceTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *HostBasedServiceVirtualNetworkRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *InstanceIP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.InstanceIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.InstanceIPFamily)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.InstanceIPLocalIP {
		n += 2
	}
	l = len(m.InstanceIPMode)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.InstanceIPSecondary {
		n += 3
	}
	if m.InstanceIPSubnet != nil {
		l = m.InstanceIPSubnet.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.InstanceIPSubscriberTag)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.SecondaryIPTrackingIP != nil {
		l = m.SecondaryIPTrackingIP.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.ServiceHealthCheckIP {
		n += 3
	}
	if m.ServiceInstanceIP {
		n += 3
	}
	l = len(m.SubnetUUID)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.FlowNodeRefs) > 0 {
		for _, e := range m.FlowNodeRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LogicalInterfaceRefs) > 0 {
		for _, e := range m.LogicalInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NetworkIpamRefs) > 0 {
		for _, e := range m.NetworkIpamRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterRefs) > 0 {
		for _, e := range m.PhysicalRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkRefs) > 0 {
		for _, e := range m.VirtualNetworkRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualRouterRefs) > 0 {
		for _, e := range m.VirtualRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceInstanceBackRefs) > 0 {
		for _, e := range m.ServiceInstanceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FloatingIPs) > 0 {
		for _, e := range m.FloatingIPs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *InstanceIPFlowNodeRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *InstanceIPLogicalInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *InstanceIPNetworkIpamRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *InstanceIPPhysicalRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *InstanceIPTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *InstanceIPVirtualMachineInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *InstanceIPVirtualNetworkRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *InstanceIPVirtualRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *IntentMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.IntentMapIntentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FabricBackRefs) > 0 {
		for _, e := range m.FabricBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterBackRefs) > 0 {
		for _, e := range m.PhysicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkBackRefs) > 0 {
		for _, e := range m.VirtualNetworkBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *IntentMapTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *InterfaceRouteTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.InterfaceRouteTableRoutes != nil {
		l = m.InterfaceRouteTableRoutes.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.ServiceInstanceRefs) > 0 {
		for _, e := range m.ServiceInstanceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *InterfaceRouteTableServiceInstanceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *InterfaceRouteTableTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *JobTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.JobTemplateConcurrencyLevel)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.JobTemplateDescription)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.JobTemplateExecutables != nil {
		l = m.JobTemplateExecutables.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.JobTemplateInputSchema)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.JobTemplateInputUISchema)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.JobTemplateOutputSchema)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.JobTemplateOutputUISchema)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.JobTemplatePlaybooks != nil {
		l = m.JobTemplatePlaybooks.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.JobTemplateSynchronousJob {
		n += 3
	}
	l = len(m.JobTemplateType)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NodeProfileBackRefs) > 0 {
		for _, e := range m.NodeProfileBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *JobTemplateTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LinkAggregationGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LinkAggregationGroupLacpEnabled {
		n += 2
	}
	if len(m.PhysicalInterfaceRefs) > 0 {
		for _, e := range m.PhysicalInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *LinkAggregationGroupPhysicalInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LinkAggregationGroupTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LinkAggregationGroupVirtualMachineInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerHealthmonitor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LoadbalancerHealthmonitorProperties != nil {
		l = m.LoadbalancerHealthmonitorProperties.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerPoolBackRefs) > 0 {
		for _, e := range m.LoadbalancerPoolBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *LoadbalancerHealthmonitorTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerListener) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LoadbalancerListenerProperties != nil {
		l = m.LoadbalancerListenerProperties.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.LoadbalancerRefs) > 0 {
		for _, e := range m.LoadbalancerRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerPoolBackRefs) > 0 {
		for _, e := range m.LoadbalancerPoolBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *LoadbalancerListenerLoadbalancerRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerListenerTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LoadbalancerMemberProperties != nil {
		l = m.LoadbalancerMemberProperties.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *LoadbalancerMemberTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LoadbalancerPoolCustomAttributes != nil {
		l = m.LoadbalancerPoolCustomAttributes.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LoadbalancerPoolProperties != nil {
		l = m.LoadbalancerPoolProperties.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.LoadbalancerPoolProvider)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.LoadbalancerHealthmonitorRefs) > 0 {
		for _, e := range m.LoadbalancerHealthmonitorRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerListenerRefs) > 0 {
		for _, e := range m.LoadbalancerListenerRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceApplianceSetRefs) > 0 {
		for _, e := range m.ServiceApplianceSetRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceInstanceRefs) > 0 {
		for _, e := range m.ServiceInstanceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualIPBackRefs) > 0 {
		for _, e := range m.VirtualIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerMembers) > 0 {
		for _, e := range m.LoadbalancerMembers {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *LoadbalancerPoolLoadbalancerHealthmonitorRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerPoolLoadbalancerListenerRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerPoolServiceApplianceSetRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerPoolServiceInstanceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerPoolTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerPoolVirtualMachineInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *Loadbalancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LoadbalancerProperties != nil {
		l = m.LoadbalancerProperties.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.LoadbalancerProvider)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.ServiceApplianceSetRefs) > 0 {
		for _, e := range m.ServiceApplianceSetRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceInstanceRefs) > 0 {
		for _, e := range m.ServiceInstanceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerListenerBackRefs) > 0 {
		for _, e := range m.LoadbalancerListenerBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *LoadbalancerServiceApplianceSetRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerServiceInstanceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerVirtualMachineInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LogicalInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.LogicalInterfaceType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LogicalInterfaceVlanTag != 0 {
		n += 1 + sovGenModel(uint64(m.LogicalInterfaceVlanTag))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.InstanceIPBackRefs) > 0 {
		for _, e := range m.InstanceIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *LogicalInterfaceTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LogicalInterfaceVirtualMachineInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LogicalRouter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfiguredRouteTargetList != nil {
		l = m.ConfiguredRouteTargetList.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LogicalRouterDHCPRelayServer != nil {
		l = m.LogicalRouterDHCPRelayServer.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LogicalRouterGatewayExternal {
		n += 2
	}
	l = len(m.LogicalRouterType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.VxlanNetworkIdentifier)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.BGPVPNRefs) > 0 {
		for _, e := range m.BGPVPNRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterRefs) > 0 {
		for _, e := range m.PhysicalRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RouteTableRefs) > 0 {
		for _, e := range m.RouteTableRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RouteTargetRefs) > 0 {
		for _, e := range m.RouteTargetRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceInstanceRefs) > 0 {
		for _, e := range m.ServiceInstanceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkRefs) > 0 {
		for _, e := range m.VirtualNetworkRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DataCenterInterconnectBackRefs) > 0 {
		for _, e := range m.DataCenterInterconnectBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortTupleBackRefs) > 0 {
		for _, e := range m.PortTupleBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *LogicalRouterBGPVPNRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LogicalRouterPhysicalRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LogicalRouterRouteTableRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LogicalRouterRouteTargetRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LogicalRouterServiceInstanceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LogicalRouterTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LogicalRouterVirtualMachineInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LogicalRouterVirtualNetworkRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *MulticastPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.MulticastSourceGroups != nil {
		l = m.MulticastSourceGroups.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkBackRefs) > 0 {
		for _, e := range m.VirtualNetworkBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *MulticastPolicyTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *Namespace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.NamespaceCidr != nil {
		l = m.NamespaceCidr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ProjectBackRefs) > 0 {
		for _, e := range m.ProjectBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *NamespaceTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *NetworkDeviceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.PhysicalRouterRefs) > 0 {
		for _, e := range m.PhysicalRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *NetworkDeviceConfigPhysicalRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *NetworkDeviceConfigTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *NetworkIpam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.IpamSubnetMethod)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IpamSubnets != nil {
		l = m.IpamSubnets.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IpamSubnetting {
		n += 2
	}
	if m.NetworkIpamMGMT != nil {
		l = m.NetworkIpamMGMT.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualDNSRefs) > 0 {
		for _, e := range m.VirtualDNSRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.InstanceIPBackRefs) > 0 {
		for _, e := range m.InstanceIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkBackRefs) > 0 {
		for _, e := range m.VirtualNetworkBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualRouterBackRefs) > 0 {
		for _, e := range m.VirtualRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *NetworkIpamTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *NetworkIpamVirtualDNSRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *NetworkPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.NetworkPolicyEntries != nil {
		l = m.NetworkPolicyEntries.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SecurityLoggingObjectBackRefs) > 0 {
		for _, e := range m.SecurityLoggingObjectBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkBackRefs) > 0 {
		for _, e := range m.VirtualNetworkBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *NetworkPolicyTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *NodeProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.NodeProfileDeviceFamily)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.NodeProfileHitlessUpgrade {
		n += 2
	}
	if m.NodeProfileRoles != nil {
		l = m.NodeProfileRoles.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.NodeProfileType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.NodeProfileVendor)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.HardwareRefs) > 0 {
		for _, e := range m.HardwareRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.JobTemplateRefs) > 0 {
		for _, e := range m.JobTemplateRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoleDefinitionRefs) > 0 {
		for _, e := range m.RoleDefinitionRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FabricBackRefs) > 0 {
		for _, e := range m.FabricBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NodeBackRefs) > 0 {
		for _, e := range m.NodeBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterBackRefs) > 0 {
		for _, e := range m.PhysicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoleConfigs) > 0 {
		for _, e := range m.RoleConfigs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *NodeProfileHardwareRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *NodeProfileJobTemplateRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *NodeProfileRoleDefinitionRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *NodeProfileTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.BMSInfo != nil {
		l = m.BMSInfo.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.CloudInfo != nil {
		l = m.CloudInfo.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DiskPartition)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.EsxiInfo != nil {
		l = m.EsxiInfo.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.InterfaceName)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.MacAddress)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.NodeType)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.NodeProfileRefs) > 0 {
		for _, e := range m.NodeProfileRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortGroups) > 0 {
		for _, e := range m.PortGroups {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *NodeNodeProfileRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *NodeTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *OverlayRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterBackRefs) > 0 {
		for _, e := range m.PhysicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoleDefinitionBackRefs) > 0 {
		for _, e := range m.RoleDefinitionBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *OverlayRoleTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PeeringPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.PeeringService)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.E2ServiceProviderBackRefs) > 0 {
		for _, e := range m.E2ServiceProviderBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PeeringPolicyTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.EthernetSegmentIdentifier)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.PhysicalInterfaceMacAddresses != nil {
		l = m.PhysicalInterfaceMacAddresses.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalInterfacePortID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalInterfaceType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.PhysicalInterfaceRefs) > 0 {
		for _, e := range m.PhysicalInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortRefs) > 0 {
		for _, e := range m.PortRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LinkAggregationGroupBackRefs) > 0 {
		for _, e := range m.LinkAggregationGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalInterfaceBackRefs) > 0 {
		for _, e := range m.PhysicalInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceApplianceBackRefs) > 0 {
		for _, e := range m.ServiceApplianceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualPortGroupBackRefs) > 0 {
		for _, e := range m.VirtualPortGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LogicalInterfaces) > 0 {
		for _, e := range m.LogicalInterfaces {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PhysicalInterfacePhysicalInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalInterfacePortRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalInterfaceTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DeviceFunctionalGroupBackRefs) > 0 {
		for _, e := range m.DeviceFunctionalGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterBackRefs) > 0 {
		for _, e := range m.PhysicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoleDefinitionBackRefs) > 0 {
		for _, e := range m.RoleDefinitionBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PhysicalRoleTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalRouter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.PhysicalRouterAutonomousSystem != nil {
		l = m.PhysicalRouterAutonomousSystem.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterCliCommitState)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterDataplaneIP)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterDeviceFamily)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.PhysicalRouterDHCPParameters != nil {
		l = m.PhysicalRouterDHCPParameters.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterEncryptionType)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterHostname)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.PhysicalRouterJunosServicePorts != nil {
		l = m.PhysicalRouterJunosServicePorts.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.PhysicalRouterLLDP {
		n += 3
	}
	l = len(m.PhysicalRouterLoopbackIP)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterManagedState)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterManagementIP)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterManagementMac)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterOsVersion)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterProductName)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterReplicatorLoopbackIP)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterRole)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterSerialNumber)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.PhysicalRouterSNMP {
		n += 3
	}
	if m.PhysicalRouterSNMPCredentials != nil {
		l = m.PhysicalRouterSNMPCredentials.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterSupplementalConfig)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterUnderlayConfig)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.PhysicalRouterUnderlayManaged {
		n += 3
	}
	if m.PhysicalRouterUserCredentials != nil {
		l = m.PhysicalRouterUserCredentials.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterVendorName)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.PhysicalRouterVNCManaged {
		n += 3
	}
	if m.RoutingBridgingRoles != nil {
		l = m.RoutingBridgingRoles.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.TelemetryInfo != nil {
		l = m.TelemetryInfo.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.BGPRouterRefs) > 0 {
		for _, e := range m.BGPRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DeviceChassisRefs) > 0 {
		for _, e := range m.DeviceChassisRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DeviceFunctionalGroupRefs) > 0 {
		for _, e := range m.DeviceFunctionalGroupRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DeviceImageRefs) > 0 {
		for _, e := range m.DeviceImageRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FabricRefs) > 0 {
		for _, e := range m.FabricRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.IntentMapRefs) > 0 {
		for _, e := range m.IntentMapRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NodeProfileRefs) > 0 {
		for _, e := range m.NodeProfileRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.OverlayRoleRefs) > 0 {
		for _, e := range m.OverlayRoleRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRoleRefs) > 0 {
		for _, e := range m.PhysicalRoleRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TelemetryProfileRefs) > 0 {
		for _, e := range m.TelemetryProfileRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkRefs) > 0 {
		for _, e := range m.VirtualNetworkRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualRouterRefs) > 0 {
		for _, e := range m.VirtualRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.E2ServiceProviderBackRefs) > 0 {
		for _, e := range m.E2ServiceProviderBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.InstanceIPBackRefs) > 0 {
		for _, e := range m.InstanceIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LogicalRouterBackRefs) > 0 {
		for _, e := range m.LogicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NetworkDeviceConfigBackRefs) > 0 {
		for _, e := range m.NetworkDeviceConfigBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceEndpointBackRefs) > 0 {
		for _, e := range m.ServiceEndpointBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.CliConfigs) > 0 {
		for _, e := range m.CliConfigs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.HardwareInventorys) > 0 {
		for _, e := range m.HardwareInventorys {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LinkAggregationGroups) > 0 {
		for _, e := range m.LinkAggregationGroups {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LogicalInterfaces) > 0 {
		for _, e := range m.LogicalInterfaces {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalInterfaces) > 0 {
		for _, e := range m.PhysicalInterfaces {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PhysicalRouterBGPRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalRouterDeviceChassisRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalRouterDeviceFunctionalGroupRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalRouterDeviceImageRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalRouterFabricRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalRouterIntentMapRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalRouterNodeProfileRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalRouterOverlayRoleRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalRouterPhysicalRoleRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalRouterTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalRouterTelemetryProfileRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalRouterVirtualNetworkRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PhysicalRouterVirtualRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PolicyManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AddressGroups) > 0 {
		for _, e := range m.AddressGroups {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ApplicationPolicySets) > 0 {
		for _, e := range m.ApplicationPolicySets {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FirewallPolicys) > 0 {
		for _, e := range m.FirewallPolicys {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FirewallRules) > 0 {
		for _, e := range m.FirewallRules {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceGroups) > 0 {
		for _, e := range m.ServiceGroups {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PolicyManagementTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PortGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.BMSPortGroupInfo != nil {
		l = m.BMSPortGroupInfo.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.PortRefs) > 0 {
		for _, e := range m.PortRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PortGroupPortRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PortGroupTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PortProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.StormControlProfileRefs) > 0 {
		for _, e := range m.StormControlProfileRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualPortGroupBackRefs) > 0 {
		for _, e := range m.VirtualPortGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PortProfileStormControlProfileRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PortProfileTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *Port) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.BMSPortInfo != nil {
		l = m.BMSPortInfo.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.EsxiPortInfo != nil {
		l = m.EsxiPortInfo.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.PortGroupUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalInterfaceBackRefs) > 0 {
		for _, e := range m.PhysicalInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortGroupBackRefs) > 0 {
		for _, e := range m.PortGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PortTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PortTuple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.LogicalRouterRefs) > 0 {
		for _, e := range m.LogicalRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkRefs) > 0 {
		for _, e := range m.VirtualNetworkRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PortTupleLogicalRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PortTupleTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PortTupleVirtualNetworkRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AlarmEnable {
		n += 2
	}
	if m.EnableSecurityPolicyDraft {
		n += 2
	}
	if m.Quota != nil {
		l = m.Quota.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.VxlanRouting {
		n += 2
	}
	if len(m.AliasIPPoolRefs) > 0 {
		for _, e := range m.AliasIPPoolRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ApplicationPolicySetRefs) > 0 {
		for _, e := range m.ApplicationPolicySetRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FloatingIPPoolRefs) > 0 {
		for _, e := range m.FloatingIPPoolRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NamespaceRefs) > 0 {
		for _, e := range m.NamespaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AliasIPBackRefs) > 0 {
		for _, e := range m.AliasIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FloatingIPBackRefs) > 0 {
		for _, e := range m.FloatingIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AddressGroups) > 0 {
		for _, e := range m.AddressGroups {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.Alarms) > 0 {
		for _, e := range m.Alarms {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.APIAccessLists) > 0 {
		for _, e := range m.APIAccessLists {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ApplicationPolicySets) > 0 {
		for _, e := range m.ApplicationPolicySets {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BGPAsAServices) > 0 {
		for _, e := range m.BGPAsAServices {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BGPVPNs) > 0 {
		for _, e := range m.BGPVPNs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DeviceFunctionalGroups) > 0 {
		for _, e := range m.DeviceFunctionalGroups {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FirewallPolicys) > 0 {
		for _, e := range m.FirewallPolicys {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FirewallRules) > 0 {
		for _, e := range m.FirewallRules {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.HostBasedServices) > 0 {
		for _, e := range m.HostBasedServices {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.InterfaceRouteTables) > 0 {
		for _, e := range m.InterfaceRouteTables {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.Loadbalancers) > 0 {
		for _, e := range m.Loadbalancers {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerHealthmonitors) > 0 {
		for _, e := range m.LoadbalancerHealthmonitors {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerListeners) > 0 {
		for _, e := range m.LoadbalancerListeners {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerPools) > 0 {
		for _, e := range m.LoadbalancerPools {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LogicalRouters) > 0 {
		for _, e := range m.LogicalRouters {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.MulticastPolicys) > 0 {
		for _, e := range m.MulticastPolicys {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NetworkIpams) > 0 {
		for _, e := range m.NetworkIpams {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NetworkPolicys) > 0 {
		for _, e := range m.NetworkPolicys {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PolicyManagements) > 0 {
		for _, e := range m.PolicyManagements {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortProfiles) > 0 {
		for _, e := range m.PortProfiles {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.QosConfigs) > 0 {
		for _, e := range m.QosConfigs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RouteAggregates) > 0 {
		for _, e := range m.RouteAggregates {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RouteTables) > 0 {
		for _, e := range m.RouteTables {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoutingPolicys) > 0 {
		for _, e := range m.RoutingPolicys {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SecurityGroups) > 0 {
		for _, e := range m.SecurityGroups {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SecurityLoggingObjects) > 0 {
		for _, e := range m.SecurityLoggingObjects {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceGroups) > 0 {
		for _, e := range m.ServiceGroups {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceHealthChecks) > 0 {
		for _, e := range m.ServiceHealthChecks {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceInstances) > 0 {
		for _, e := range m.ServiceInstances {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SflowProfiles) > 0 {
		for _, e := range m.SflowProfiles {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.StormControlProfiles) > 0 {
		for _, e := range m.StormControlProfiles {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.StructuredSyslogConfigs) > 0 {
		for _, e := range m.StructuredSyslogConfigs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TelemetryProfiles) > 0 {
		for _, e := range m.TelemetryProfiles {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualIPs) > 0 {
		for _, e := range m.VirtualIPs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaces) > 0 {
		for _, e := range m.VirtualMachineInterfaces {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworks) > 0 {
		for _, e := range m.VirtualNetworks {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualPortGroups) > 0 {
		for _, e := range m.VirtualPortGroups {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ProjectAliasIPPoolRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ProjectApplicationPolicySetRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ProjectFloatingIPPoolRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ProjectNamespaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ProjectTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ProviderAttachment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualRouterRefs) > 0 {
		for _, e := range m.VirtualRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ProviderAttachmentTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ProviderAttachmentVirtualRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *QosConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.DefaultForwardingClassID != 0 {
		n += 1 + sovGenModel(uint64(m.DefaultForwardingClassID))
	}
	if m.DSCPEntries != nil {
		l = m.DSCPEntries.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.MPLSExpEntries != nil {
		l = m.MPLSExpEntries.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.QosConfigType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.VlanPriorityEntries != nil {
		l = m.VlanPriorityEntries.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.GlobalSystemConfigRefs) > 0 {
		for _, e := range m.GlobalSystemConfigRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkBackRefs) > 0 {
		for _, e := range m.VirtualNetworkBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *QosConfigGlobalSystemConfigRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *QosConfigTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *QosQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.MaxBandwidth != 0 {
		n += 1 + sovGenModel(uint64(m.MaxBandwidth))
	}
	if m.MinBandwidth != 0 {
		n += 1 + sovGenModel(uint64(m.MinBandwidth))
	}
	if m.QosQueueIdentifier != 0 {
		n += 1 + sovGenModel(uint64(m.QosQueueIdentifier))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ForwardingClassBackRefs) > 0 {
		for _, e := range m.ForwardingClassBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *QosQueueTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RoleConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.RoleConfigConfig)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *RoleConfigTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RoleDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FeatureRefs) > 0 {
		for _, e := range m.FeatureRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.OverlayRoleRefs) > 0 {
		for _, e := range m.OverlayRoleRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRoleRefs) > 0 {
		for _, e := range m.PhysicalRoleRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NodeProfileBackRefs) > 0 {
		for _, e := range m.NodeProfileBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FeatureConfigs) > 0 {
		for _, e := range m.FeatureConfigs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *RoleDefinitionFeatureRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RoleDefinitionOverlayRoleRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RoleDefinitionPhysicalRoleRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RoleDefinitionTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RouteAggregate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AggregateRouteEntries != nil {
		l = m.AggregateRouteEntries.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.AggregateRouteNexthop)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.RoutingInstanceRefs) > 0 {
		for _, e := range m.RoutingInstanceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceInstanceRefs) > 0 {
		for _, e := range m.ServiceInstanceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *RouteAggregateRoutingInstanceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RouteAggregateServiceInstanceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RouteAggregateTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RouteTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Routes != nil {
		l = m.Routes.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LogicalRouterBackRefs) > 0 {
		for _, e := range m.LogicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkBackRefs) > 0 {
		for _, e := range m.VirtualNetworkBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *RouteTableTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RouteTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LogicalRouterBackRefs) > 0 {
		for _, e := range m.LogicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoutingInstanceBackRefs) > 0 {
		for _, e := range m.RoutingInstanceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *RouteTargetTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RoutingInstance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.DefaultCeProtocol != nil {
		l = m.DefaultCeProtocol.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.EvpnIpv6ServiceChainInformation != nil {
		l = m.EvpnIpv6ServiceChainInformation.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.EvpnServiceChainInformation != nil {
		l = m.EvpnServiceChainInformation.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Ipv6ServiceChainInformation != nil {
		l = m.Ipv6ServiceChainInformation.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.RoutingInstanceFabricSnat {
		n += 3
	}
	if m.RoutingInstanceHasPNF {
		n += 3
	}
	if m.RoutingInstanceIsDefault {
		n += 3
	}
	if m.ServiceChainInformation != nil {
		l = m.ServiceChainInformation.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.StaticRouteEntries != nil {
		l = m.StaticRouteEntries.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.RouteTargetRefs) > 0 {
		for _, e := range m.RouteTargetRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoutingInstanceRefs) > 0 {
		for _, e := range m.RoutingInstanceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RouteAggregateBackRefs) > 0 {
		for _, e := range m.RouteAggregateBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoutingInstanceBackRefs) > 0 {
		for _, e := range m.RoutingInstanceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoutingPolicyBackRefs) > 0 {
		for _, e := range m.RoutingPolicyBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BGPRouters) > 0 {
		for _, e := range m.BGPRouters {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *RoutingInstanceRouteTargetRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RoutingInstanceRoutingInstanceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RoutingInstanceTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RoutingPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.RoutingPolicyEntries != nil {
		l = m.RoutingPolicyEntries.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.RoutingInstanceRefs) > 0 {
		for _, e := range m.RoutingInstanceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceInstanceRefs) > 0 {
		for _, e := range m.ServiceInstanceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkBackRefs) > 0 {
		for _, e := range m.VirtualNetworkBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *RoutingPolicyRoutingInstanceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RoutingPolicyServiceInstanceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RoutingPolicyTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *SecurityGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfiguredSecurityGroupID != 0 {
		n += 1 + sovGenModel(uint64(m.ConfiguredSecurityGroupID))
	}
	if m.SecurityGroupEntries != nil {
		l = m.SecurityGroupEntries.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SecurityGroupID != 0 {
		n += 1 + sovGenModel(uint64(m.SecurityGroupID))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SecurityLoggingObjectBackRefs) > 0 {
		for _, e := range m.SecurityLoggingObjectBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualPortGroupBackRefs) > 0 {
		for _, e := range m.VirtualPortGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AccessControlLists) > 0 {
		for _, e := range m.AccessControlLists {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *SecurityGroupTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *SecurityLoggingObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SecurityLoggingObjectRate != 0 {
		n += 1 + sovGenModel(uint64(m.SecurityLoggingObjectRate))
	}
	if m.SecurityLoggingObjectRules != nil {
		l = m.SecurityLoggingObjectRules.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.NetworkPolicyRefs) > 0 {
		for _, e := range m.NetworkPolicyRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SecurityGroupRefs) > 0 {
		for _, e := range m.SecurityGroupRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FirewallPolicyBackRefs) > 0 {
		for _, e := range m.FirewallPolicyBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FirewallRuleBackRefs) > 0 {
		for _, e := range m.FirewallRuleBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkBackRefs) > 0 {
		for _, e := range m.VirtualNetworkBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *SecurityLoggingObjectNetworkPolicyRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *SecurityLoggingObjectSecurityGroupRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *SecurityLoggingObjectTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceAppliance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ServiceApplianceIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ServiceApplianceProperties != nil {
		l = m.ServiceApplianceProperties.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ServiceApplianceUserCredentials != nil {
		l = m.ServiceApplianceUserCredentials.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ServiceApplianceVirtualizationType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.PhysicalInterfaceRefs) > 0 {
		for _, e := range m.PhysicalInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ServiceAppliancePhysicalInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceApplianceTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceApplianceSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ServiceApplianceDriver)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ServiceApplianceHaMode)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ServiceApplianceSetProperties != nil {
		l = m.ServiceApplianceSetProperties.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ServiceApplianceSetVirtualizationType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerBackRefs) > 0 {
		for _, e := range m.LoadbalancerBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerPoolBackRefs) > 0 {
		for _, e := range m.LoadbalancerPoolBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceTemplateBackRefs) > 0 {
		for _, e := range m.ServiceTemplateBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceAppliances) > 0 {
		for _, e := range m.ServiceAppliances {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ServiceApplianceSetTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceConnectionModule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.E2Service)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ServiceType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.ServiceObjectRefs) > 0 {
		for _, e := range m.ServiceObjectRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceEndpointBackRefs) > 0 {
		for _, e := range m.ServiceEndpointBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ServiceConnectionModuleServiceObjectRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceConnectionModuleTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.PhysicalRouterRefs) > 0 {
		for _, e := range m.PhysicalRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceConnectionModuleRefs) > 0 {
		for _, e := range m.ServiceConnectionModuleRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceObjectRefs) > 0 {
		for _, e := range m.ServiceObjectRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ServiceEndpointPhysicalRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceEndpointServiceConnectionModuleRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceEndpointServiceObjectRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceEndpointTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DraftModeState)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ServiceGroupFirewallServiceList != nil {
		l = m.ServiceGroupFirewallServiceList.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FirewallRuleBackRefs) > 0 {
		for _, e := range m.FirewallRuleBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ServiceGroupTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceHealthCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ServiceHealthCheckProperties != nil {
		l = m.ServiceHealthCheckProperties.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.ServiceInstanceRefs) > 0 {
		for _, e := range m.ServiceInstanceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BGPAsAServiceBackRefs) > 0 {
		for _, e := range m.BGPAsAServiceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ServiceHealthCheckServiceInstanceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceHealthCheckTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceInstance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ServiceInstanceBGPEnabled {
		n += 2
	}
	if m.ServiceInstanceBindings != nil {
		l = m.ServiceInstanceBindings.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ServiceInstanceProperties != nil {
		l = m.ServiceInstanceProperties.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.InstanceIPRefs) > 0 {
		for _, e := range m.InstanceIPRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceTemplateRefs) > 0 {
		for _, e := range m.ServiceTemplateRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.InterfaceRouteTableBackRefs) > 0 {
		for _, e := range m.InterfaceRouteTableBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerBackRefs) > 0 {
		for _, e := range m.LoadbalancerBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerPoolBackRefs) > 0 {
		for _, e := range m.LoadbalancerPoolBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LogicalRouterBackRefs) > 0 {
		for _, e := range m.LogicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RouteAggregateBackRefs) > 0 {
		for _, e := range m.RouteAggregateBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoutingPolicyBackRefs) > 0 {
		for _, e := range m.RoutingPolicyBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceHealthCheckBackRefs) > 0 {
		for _, e := range m.ServiceHealthCheckBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineBackRefs) > 0 {
		for _, e := range m.VirtualMachineBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortTuples) > 0 {
		for _, e := range m.PortTuples {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ServiceInstanceInstanceIPRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceInstanceServiceTemplateRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceInstanceTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceConnectionModuleBackRefs) > 0 {
		for _, e := range m.ServiceConnectionModuleBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceEndpointBackRefs) > 0 {
		for _, e := range m.ServiceEndpointBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ServiceObjectTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceTemplate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ServiceConfigManaged {
		n += 2
	}
	if m.ServiceTemplateProperties != nil {
		l = m.ServiceTemplateProperties.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.ServiceApplianceSetRefs) > 0 {
		for _, e := range m.ServiceApplianceSetRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceInstanceBackRefs) > 0 {
		for _, e := range m.ServiceInstanceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ServiceTemplateServiceApplianceSetRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceTemplateTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *SflowProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SflowParameters != nil {
		l = m.SflowParameters.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SflowProfileIsDefault {
		n += 2
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TelemetryProfileBackRefs) > 0 {
		for _, e := range m.TelemetryProfileBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *SflowProfileTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *StormControlProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.StormControlParameters != nil {
		l = m.StormControlParameters.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortProfileBackRefs) > 0 {
		for _, e := range m.PortProfileBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *StormControlProfileTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *StructuredSyslogApplicationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StructuredSyslogAppCategory)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StructuredSyslogAppGroups)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StructuredSyslogAppRisk)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StructuredSyslogAppServiceTags)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StructuredSyslogAppSubcategory)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *StructuredSyslogApplicationRecordTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *StructuredSyslogConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.StructuredSyslogApplicationRecords) > 0 {
		for _, e := range m.StructuredSyslogApplicationRecords {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.StructuredSyslogHostnameRecords) > 0 {
		for _, e := range m.StructuredSyslogHostnameRecords {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.StructuredSyslogMessages) > 0 {
		for _, e := range m.StructuredSyslogMessages {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.StructuredSyslogSLAProfiles) > 0 {
		for _, e := range m.StructuredSyslogSLAProfiles {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *StructuredSyslogConfigTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *StructuredSyslogHostnameRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StructuredSyslogDevice)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StructuredSyslogHostaddr)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StructuredSyslogHostnameTags)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.StructuredSyslogLinkmap != nil {
		l = m.StructuredSyslogLinkmap.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StructuredSyslogLocation)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.StructuredSyslogTenant)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *StructuredSyslogHostnameRecordTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *StructuredSyslogMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StructuredSyslogMessageForward)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.StructuredSyslogMessageIntegerFields != nil {
		l = m.StructuredSyslogMessageIntegerFields.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.StructuredSyslogMessageProcessAndStore {
		n += 2
	}
	if m.StructuredSyslogMessageProcessAndSummarize {
		n += 2
	}
	if m.StructuredSyslogMessageProcessAndSummarizeUser {
		n += 3
	}
	if m.StructuredSyslogMessageTaggedFields != nil {
		l = m.StructuredSyslogMessageTaggedFields.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *StructuredSyslogMessageTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *StructuredSyslogSLAProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StructuredSyslogSLAParams)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *StructuredSyslogSLAProfileTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *SubCluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SubClusterAsn != 0 {
		n += 1 + sovGenModel(uint64(m.SubClusterAsn))
	}
	if m.SubClusterID != 0 {
		n += 1 + sovGenModel(uint64(m.SubClusterID))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BGPRouterBackRefs) > 0 {
		for _, e := range m.BGPRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualRouterBackRefs) > 0 {
		for _, e := range m.VirtualRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *SubClusterTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *Subnet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SubnetIPPrefix != nil {
		l = m.SubnetIPPrefix.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *SubnetTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *SubnetVirtualMachineInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.TagID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.TagPredefined {
		n += 2
	}
	l = len(m.TagTypeName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.TagValue)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagTypeRefs) > 0 {
		for _, e := range m.TagTypeRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AccessControlListBackRefs) > 0 {
		for _, e := range m.AccessControlListBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AddressGroupBackRefs) > 0 {
		for _, e := range m.AddressGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AlarmBackRefs) > 0 {
		for _, e := range m.AlarmBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AliasIPBackRefs) > 0 {
		for _, e := range m.AliasIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AliasIPPoolBackRefs) > 0 {
		for _, e := range m.AliasIPPoolBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AnalyticsAlarmNodeBackRefs) > 0 {
		for _, e := range m.AnalyticsAlarmNodeBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AnalyticsNodeBackRefs) > 0 {
		for _, e := range m.AnalyticsNodeBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AnalyticsSNMPNodeBackRefs) > 0 {
		for _, e := range m.AnalyticsSNMPNodeBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.APIAccessListBackRefs) > 0 {
		for _, e := range m.APIAccessListBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ApplicationPolicySetBackRefs) > 0 {
		for _, e := range m.ApplicationPolicySetBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BGPAsAServiceBackRefs) > 0 {
		for _, e := range m.BGPAsAServiceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BGPRouterBackRefs) > 0 {
		for _, e := range m.BGPRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BGPVPNBackRefs) > 0 {
		for _, e := range m.BGPVPNBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BridgeDomainBackRefs) > 0 {
		for _, e := range m.BridgeDomainBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.CardBackRefs) > 0 {
		for _, e := range m.CardBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.CliConfigBackRefs) > 0 {
		for _, e := range m.CliConfigBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ConfigDatabaseNodeBackRefs) > 0 {
		for _, e := range m.ConfigDatabaseNodeBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ConfigNodeBackRefs) > 0 {
		for _, e := range m.ConfigNodeBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ConfigRootBackRefs) > 0 {
		for _, e := range m.ConfigRootBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ControlNodeZoneBackRefs) > 0 {
		for _, e := range m.ControlNodeZoneBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.CustomerAttachmentBackRefs) > 0 {
		for _, e := range m.CustomerAttachmentBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DataCenterInterconnectBackRefs) > 0 {
		for _, e := range m.DataCenterInterconnectBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DatabaseNodeBackRefs) > 0 {
		for _, e := range m.DatabaseNodeBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DeviceChassisBackRefs) > 0 {
		for _, e := range m.DeviceChassisBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DeviceFunctionalGroupBackRefs) > 0 {
		for _, e := range m.DeviceFunctionalGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DeviceImageBackRefs) > 0 {
		for _, e := range m.DeviceImageBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DevicemgrNodeBackRefs) > 0 {
		for _, e := range m.DevicemgrNodeBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DiscoveryServiceAssignmentBackRefs) > 0 {
		for _, e := range m.DiscoveryServiceAssignmentBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DomainBackRefs) > 0 {
		for _, e := range m.DomainBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DsaRuleBackRefs) > 0 {
		for _, e := range m.DsaRuleBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.E2ServiceProviderBackRefs) > 0 {
		for _, e := range m.E2ServiceProviderBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FabricBackRefs) > 0 {
		for _, e := range m.FabricBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FabricNamespaceBackRefs) > 0 {
		for _, e := range m.FabricNamespaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FeatureBackRefs) > 0 {
		for _, e := range m.FeatureBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FeatureConfigBackRefs) > 0 {
		for _, e := range m.FeatureConfigBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FeatureFlagBackRefs) > 0 {
		for _, e := range m.FeatureFlagBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FirewallPolicyBackRefs) > 0 {
		for _, e := range m.FirewallPolicyBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FirewallRuleBackRefs) > 0 {
		for _, e := range m.FirewallRuleBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FloatingIPBackRefs) > 0 {
		for _, e := range m.FloatingIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FloatingIPPoolBackRefs) > 0 {
		for _, e := range m.FloatingIPPoolBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FlowNodeBackRefs) > 0 {
		for _, e := range m.FlowNodeBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ForwardingClassBackRefs) > 0 {
		for _, e := range m.ForwardingClassBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.GlobalAnalyticsConfigBackRefs) > 0 {
		for _, e := range m.GlobalAnalyticsConfigBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.GlobalQosConfigBackRefs) > 0 {
		for _, e := range m.GlobalQosConfigBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.GlobalSystemConfigBackRefs) > 0 {
		for _, e := range m.GlobalSystemConfigBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.GlobalVrouterConfigBackRefs) > 0 {
		for _, e := range m.GlobalVrouterConfigBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.HardwareBackRefs) > 0 {
		for _, e := range m.HardwareBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.HardwareInventoryBackRefs) > 0 {
		for _, e := range m.HardwareInventoryBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.HostBasedServiceBackRefs) > 0 {
		for _, e := range m.HostBasedServiceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.InstanceIPBackRefs) > 0 {
		for _, e := range m.InstanceIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.IntentMapBackRefs) > 0 {
		for _, e := range m.IntentMapBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.InterfaceRouteTableBackRefs) > 0 {
		for _, e := range m.InterfaceRouteTableBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.JobTemplateBackRefs) > 0 {
		for _, e := range m.JobTemplateBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LinkAggregationGroupBackRefs) > 0 {
		for _, e := range m.LinkAggregationGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerBackRefs) > 0 {
		for _, e := range m.LoadbalancerBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerHealthmonitorBackRefs) > 0 {
		for _, e := range m.LoadbalancerHealthmonitorBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerListenerBackRefs) > 0 {
		for _, e := range m.LoadbalancerListenerBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerMemberBackRefs) > 0 {
		for _, e := range m.LoadbalancerMemberBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerPoolBackRefs) > 0 {
		for _, e := range m.LoadbalancerPoolBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LogicalInterfaceBackRefs) > 0 {
		for _, e := range m.LogicalInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LogicalRouterBackRefs) > 0 {
		for _, e := range m.LogicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.MulticastPolicyBackRefs) > 0 {
		for _, e := range m.MulticastPolicyBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NamespaceBackRefs) > 0 {
		for _, e := range m.NamespaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NetworkDeviceConfigBackRefs) > 0 {
		for _, e := range m.NetworkDeviceConfigBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NetworkIpamBackRefs) > 0 {
		for _, e := range m.NetworkIpamBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NetworkPolicyBackRefs) > 0 {
		for _, e := range m.NetworkPolicyBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NodeBackRefs) > 0 {
		for _, e := range m.NodeBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NodeProfileBackRefs) > 0 {
		for _, e := range m.NodeProfileBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.OverlayRoleBackRefs) > 0 {
		for _, e := range m.OverlayRoleBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PeeringPolicyBackRefs) > 0 {
		for _, e := range m.PeeringPolicyBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalInterfaceBackRefs) > 0 {
		for _, e := range m.PhysicalInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRoleBackRefs) > 0 {
		for _, e := range m.PhysicalRoleBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterBackRefs) > 0 {
		for _, e := range m.PhysicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PolicyManagementBackRefs) > 0 {
		for _, e := range m.PolicyManagementBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortBackRefs) > 0 {
		for _, e := range m.PortBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortGroupBackRefs) > 0 {
		for _, e := range m.PortGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortProfileBackRefs) > 0 {
		for _, e := range m.PortProfileBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortTupleBackRefs) > 0 {
		for _, e := range m.PortTupleBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ProjectBackRefs) > 0 {
		for _, e := range m.ProjectBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ProviderAttachmentBackRefs) > 0 {
		for _, e := range m.ProviderAttachmentBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.QosConfigBackRefs) > 0 {
		for _, e := range m.QosConfigBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.QosQueueBackRefs) > 0 {
		for _, e := range m.QosQueueBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoleConfigBackRefs) > 0 {
		for _, e := range m.RoleConfigBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoleDefinitionBackRefs) > 0 {
		for _, e := range m.RoleDefinitionBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RouteAggregateBackRefs) > 0 {
		for _, e := range m.RouteAggregateBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RouteTableBackRefs) > 0 {
		for _, e := range m.RouteTableBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RouteTargetBackRefs) > 0 {
		for _, e := range m.RouteTargetBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoutingInstanceBackRefs) > 0 {
		for _, e := range m.RoutingInstanceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoutingPolicyBackRefs) > 0 {
		for _, e := range m.RoutingPolicyBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SecurityGroupBackRefs) > 0 {
		for _, e := range m.SecurityGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SecurityLoggingObjectBackRefs) > 0 {
		for _, e := range m.SecurityLoggingObjectBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceApplianceBackRefs) > 0 {
		for _, e := range m.ServiceApplianceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceApplianceSetBackRefs) > 0 {
		for _, e := range m.ServiceApplianceSetBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceConnectionModuleBackRefs) > 0 {
		for _, e := range m.ServiceConnectionModuleBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceEndpointBackRefs) > 0 {
		for _, e := range m.ServiceEndpointBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceGroupBackRefs) > 0 {
		for _, e := range m.ServiceGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceHealthCheckBackRefs) > 0 {
		for _, e := range m.ServiceHealthCheckBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceInstanceBackRefs) > 0 {
		for _, e := range m.ServiceInstanceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceObjectBackRefs) > 0 {
		for _, e := range m.ServiceObjectBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceTemplateBackRefs) > 0 {
		for _, e := range m.ServiceTemplateBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SflowProfileBackRefs) > 0 {
		for _, e := range m.SflowProfileBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.StormControlProfileBackRefs) > 0 {
		for _, e := range m.StormControlProfileBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.StructuredSyslogApplicationRecordBackRefs) > 0 {
		for _, e := range m.StructuredSyslogApplicationRecordBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.StructuredSyslogConfigBackRefs) > 0 {
		for _, e := range m.StructuredSyslogConfigBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.StructuredSyslogHostnameRecordBackRefs) > 0 {
		for _, e := range m.StructuredSyslogHostnameRecordBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.StructuredSyslogMessageBackRefs) > 0 {
		for _, e := range m.StructuredSyslogMessageBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.StructuredSyslogSLAProfileBackRefs) > 0 {
		for _, e := range m.StructuredSyslogSLAProfileBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SubClusterBackRefs) > 0 {
		for _, e := range m.SubClusterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SubnetBackRefs) > 0 {
		for _, e := range m.SubnetBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagBackRefs) > 0 {
		for _, e := range m.TagBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagTypeBackRefs) > 0 {
		for _, e := range m.TagTypeBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TelemetryProfileBackRefs) > 0 {
		for _, e := range m.TelemetryProfileBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualDNSBackRefs) > 0 {
		for _, e := range m.VirtualDNSBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualDNSRecordBackRefs) > 0 {
		for _, e := range m.VirtualDNSRecordBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualIPBackRefs) > 0 {
		for _, e := range m.VirtualIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineBackRefs) > 0 {
		for _, e := range m.VirtualMachineBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkBackRefs) > 0 {
		for _, e := range m.VirtualNetworkBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualPortGroupBackRefs) > 0 {
		for _, e := range m.VirtualPortGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualRouterBackRefs) > 0 {
		for _, e := range m.VirtualRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.WebuiNodeBackRefs) > 0 {
		for _, e := range m.WebuiNodeBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *TagTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *TagTagTypeRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *TagType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.TagTypeID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagBackRefs) > 0 {
		for _, e := range m.TagBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *TagTypeTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *TelemetryProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.TelemetryProfileIsDefault {
		n += 2
	}
	if len(m.SflowProfileRefs) > 0 {
		for _, e := range m.SflowProfileRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterBackRefs) > 0 {
		for _, e := range m.PhysicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *TelemetryProfileSflowProfileRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *TelemetryProfileTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualDNSRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.VirtualDNSRecordData != nil {
		l = m.VirtualDNSRecordData.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *VirtualDNSRecordTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualDNS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.VirtualDNSData != nil {
		l = m.VirtualDNSData.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NetworkIpamBackRefs) > 0 {
		for _, e := range m.NetworkIpamBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualDNSRecords) > 0 {
		for _, e := range m.VirtualDNSRecords {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *VirtualDNSTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualIP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.VirtualIPProperties != nil {
		l = m.VirtualIPProperties.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.LoadbalancerPoolRefs) > 0 {
		for _, e := range m.LoadbalancerPoolRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *VirtualIPLoadbalancerPoolRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualIPTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualIPVirtualMachineInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.EcmpHashingIncludeFields != nil {
		l = m.EcmpHashingIncludeFields.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IgmpEnable {
		n += 2
	}
	if m.PortSecurityEnabled {
		n += 2
	}
	if m.VirtualMachineInterfaceAllowedAddressPairs != nil {
		l = m.VirtualMachineInterfaceAllowedAddressPairs.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.VirtualMachineInterfaceBindings != nil {
		l = m.VirtualMachineInterfaceBindings.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	l = len(m.VirtualMachineInterfaceDeviceOwner)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.VirtualMachineInterfaceDHCPOptionList != nil {
		l = m.VirtualMachineInterfaceDHCPOptionList.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.VirtualMachineInterfaceDisablePolicy {
		n += 3
	}
	if m.VirtualMachineInterfaceFatFlowProtocols != nil {
		l = m.VirtualMachineInterfaceFatFlowProtocols.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.VirtualMachineInterfaceHostRoutes != nil {
		l = m.VirtualMachineInterfaceHostRoutes.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.VirtualMachineInterfaceMacAddresses != nil {
		l = m.VirtualMachineInterfaceMacAddresses.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.VirtualMachineInterfaceProperties != nil {
		l = m.VirtualMachineInterfaceProperties.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.VlanTagBasedBridgeDomain {
		n += 3
	}
	if m.VRFAssignTable != nil {
		l = m.VRFAssignTable.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.BGPRouterRefs) > 0 {
		for _, e := range m.BGPRouterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BridgeDomainRefs) > 0 {
		for _, e := range m.BridgeDomainRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.InterfaceRouteTableRefs) > 0 {
		for _, e := range m.InterfaceRouteTableRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalInterfaceRefs) > 0 {
		for _, e := range m.PhysicalInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortProfileRefs) > 0 {
		for _, e := range m.PortProfileRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortTupleRefs) > 0 {
		for _, e := range m.PortTupleRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.QosConfigRefs) > 0 {
		for _, e := range m.QosConfigRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoutingInstanceRefs) > 0 {
		for _, e := range m.RoutingInstanceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SecurityGroupRefs) > 0 {
		for _, e := range m.SecurityGroupRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SecurityLoggingObjectRefs) > 0 {
		for _, e := range m.SecurityLoggingObjectRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceEndpointRefs) > 0 {
		for _, e := range m.ServiceEndpointRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ServiceHealthCheckRefs) > 0 {
		for _, e := range m.ServiceHealthCheckRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineRefs) > 0 {
		for _, e := range m.VirtualMachineRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkRefs) > 0 {
		for _, e := range m.VirtualNetworkRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AliasIPBackRefs) > 0 {
		for _, e := range m.AliasIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BGPAsAServiceBackRefs) > 0 {
		for _, e := range m.BGPAsAServiceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.CustomerAttachmentBackRefs) > 0 {
		for _, e := range m.CustomerAttachmentBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FloatingIPBackRefs) > 0 {
		for _, e := range m.FloatingIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.InstanceIPBackRefs) > 0 {
		for _, e := range m.InstanceIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LinkAggregationGroupBackRefs) > 0 {
		for _, e := range m.LinkAggregationGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerBackRefs) > 0 {
		for _, e := range m.LoadbalancerBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LoadbalancerPoolBackRefs) > 0 {
		for _, e := range m.LoadbalancerPoolBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LogicalInterfaceBackRefs) > 0 {
		for _, e := range m.LogicalInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LogicalRouterBackRefs) > 0 {
		for _, e := range m.LogicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SubnetBackRefs) > 0 {
		for _, e := range m.SubnetBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualIPBackRefs) > 0 {
		for _, e := range m.VirtualIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualPortGroupBackRefs) > 0 {
		for _, e := range m.VirtualPortGroupBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *VirtualMachineInterfaceBGPRouterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfaceBridgeDomainRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfaceInterfaceRouteTableRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfacePhysicalInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfacePortProfileRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfacePortTupleRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfaceQosConfigRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfaceRoutingInstanceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfaceSecurityGroupRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfaceSecurityLoggingObjectRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfaceServiceEndpointRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfaceServiceHealthCheckRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfaceTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfaceVirtualMachineRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfaceVirtualMachineInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfaceVirtualNetworkRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachine) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ServerType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.ServiceInstanceRefs) > 0 {
		for _, e := range m.ServiceInstanceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualRouterBackRefs) > 0 {
		for _, e := range m.VirtualRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaces) > 0 {
		for _, e := range m.VirtualMachineInterfaces {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *VirtualMachineServiceInstanceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualNetwork) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.AddressAllocationMode)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.EcmpHashingIncludeFields != nil {
		l = m.EcmpHashingIncludeFields.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ExportRouteTargetList != nil {
		l = m.ExportRouteTargetList.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ExternalIpam {
		n += 2
	}
	if m.FabricSnat {
		n += 3
	}
	if m.FloodUnknownUnicast {
		n += 3
	}
	if m.IgmpEnable {
		n += 3
	}
	if m.ImportRouteTargetList != nil {
		l = m.ImportRouteTargetList.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.IsProviderNetwork {
		n += 3
	}
	if m.IsShared {
		n += 3
	}
	if m.Layer2ControlWord {
		n += 3
	}
	if m.MacAgingTime != 0 {
		n += 2 + sovGenModel(uint64(m.MacAgingTime))
	}
	if m.MacLearningEnabled {
		n += 3
	}
	if m.MacLimitControl != nil {
		l = m.MacLimitControl.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.MacMoveControl != nil {
		l = m.MacMoveControl.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.MultiPolicyServiceChainsEnabled {
		n += 3
	}
	if m.PBBEtreeEnable {
		n += 3
	}
	if m.PBBEvpnEnable {
		n += 3
	}
	if m.PortSecurityEnabled {
		n += 3
	}
	if m.ProviderProperties != nil {
		l = m.ProviderProperties.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.RouteTargetList != nil {
		l = m.RouteTargetList.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.RouterExternal {
		n += 3
	}
	l = len(m.VirtualNetworkCategory)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.VirtualNetworkFatFlowProtocols != nil {
		l = m.VirtualNetworkFatFlowProtocols.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.VirtualNetworkNetworkID != 0 {
		n += 2 + sovGenModel(uint64(m.VirtualNetworkNetworkID))
	}
	if m.VirtualNetworkProperties != nil {
		l = m.VirtualNetworkProperties.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.VirtualNetworkRoutedProperties != nil {
		l = m.VirtualNetworkRoutedProperties.Size()
		n += 2 + l + sovGenModel(uint64(l))
	}
	if len(m.BGPVPNRefs) > 0 {
		for _, e := range m.BGPVPNRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.IntentMapRefs) > 0 {
		for _, e := range m.IntentMapRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.MulticastPolicyRefs) > 0 {
		for _, e := range m.MulticastPolicyRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NetworkIpamRefs) > 0 {
		for _, e := range m.NetworkIpamRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.NetworkPolicyRefs) > 0 {
		for _, e := range m.NetworkPolicyRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.QosConfigRefs) > 0 {
		for _, e := range m.QosConfigRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RouteTableRefs) > 0 {
		for _, e := range m.RouteTableRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoutingPolicyRefs) > 0 {
		for _, e := range m.RoutingPolicyRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SecurityLoggingObjectRefs) > 0 {
		for _, e := range m.SecurityLoggingObjectRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkRefs) > 0 {
		for _, e := range m.VirtualNetworkRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DataCenterInterconnectBackRefs) > 0 {
		for _, e := range m.DataCenterInterconnectBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FabricBackRefs) > 0 {
		for _, e := range m.FabricBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FirewallRuleBackRefs) > 0 {
		for _, e := range m.FirewallRuleBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FlowNodeBackRefs) > 0 {
		for _, e := range m.FlowNodeBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.HostBasedServiceBackRefs) > 0 {
		for _, e := range m.HostBasedServiceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.InstanceIPBackRefs) > 0 {
		for _, e := range m.InstanceIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.LogicalRouterBackRefs) > 0 {
		for _, e := range m.LogicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterBackRefs) > 0 {
		for _, e := range m.PhysicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortTupleBackRefs) > 0 {
		for _, e := range m.PortTupleBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceBackRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualNetworkBackRefs) > 0 {
		for _, e := range m.VirtualNetworkBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AccessControlLists) > 0 {
		for _, e := range m.AccessControlLists {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.AliasIPPools) > 0 {
		for _, e := range m.AliasIPPools {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.BridgeDomains) > 0 {
		for _, e := range m.BridgeDomains {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.FloatingIPPools) > 0 {
		for _, e := range m.FloatingIPPools {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.RoutingInstances) > 0 {
		for _, e := range m.RoutingInstances {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *VirtualNetworkBGPVPNRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualNetworkIntentMapRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualNetworkMulticastPolicyRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualNetworkNetworkIpamRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualNetworkNetworkPolicyRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualNetworkQosConfigRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualNetworkRouteTableRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualNetworkRoutingPolicyRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualNetworkSecurityLoggingObjectRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualNetworkTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualNetworkVirtualNetworkRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualPortGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.VirtualPortGroupLacpEnabled {
		n += 2
	}
	l = len(m.VirtualPortGroupTrunkPortID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.VirtualPortGroupType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.VirtualPortGroupUserCreated {
		n += 2
	}
	if len(m.PhysicalInterfaceRefs) > 0 {
		for _, e := range m.PhysicalInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PortProfileRefs) > 0 {
		for _, e := range m.PortProfileRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SecurityGroupRefs) > 0 {
		for _, e := range m.SecurityGroupRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaceRefs) > 0 {
		for _, e := range m.VirtualMachineInterfaceRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *VirtualPortGroupPhysicalInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualPortGroupPortProfileRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualPortGroupSecurityGroupRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualPortGroupTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualPortGroupVirtualMachineInterfaceRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualRouter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.VirtualRouterDPDKEnabled {
		n += 2
	}
	l = len(m.VirtualRouterIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.VirtualRouterType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.NetworkIpamRefs) > 0 {
		for _, e := range m.NetworkIpamRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SubClusterRefs) > 0 {
		for _, e := range m.SubClusterRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineRefs) > 0 {
		for _, e := range m.VirtualMachineRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.InstanceIPBackRefs) > 0 {
		for _, e := range m.InstanceIPBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.PhysicalRouterBackRefs) > 0 {
		for _, e := range m.PhysicalRouterBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ProviderAttachmentBackRefs) > 0 {
		for _, e := range m.ProviderAttachmentBackRefs {
			l = e.Size()
			n += 3 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.VirtualMachineInterfaces) > 0 {
		for _, e := range m.VirtualMachineInterfaces {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *VirtualRouterNetworkIpamRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Attr != nil {
		l = m.Attr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualRouterSubClusterRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualRouterTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualRouterVirtualMachineRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *WebuiNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Annotations != nil {
		l = m.Annotations.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ConfigurationVersion != 0 {
		n += 1 + sovGenModel(uint64(m.ConfigurationVersion))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FQName) > 0 {
		for _, s := range m.FQName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IDPerms != nil {
		l = m.IDPerms.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ParentUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Perms2 != nil {
		l = m.Perms2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.WebuiNodeIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagRefs) > 0 {
		for _, e := range m.TagRefs {
			l = e.Size()
			n += 2 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *WebuiNodeTagRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.To) > 0 {
		for _, s := range m.To {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *AclEntriesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ACLRule) > 0 {
		for _, e := range m.ACLRule {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	if m.Dynamic {
		n += 2
	}
	return n
}

func (m *AclRuleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionList != nil {
		l = m.ActionList.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.MatchCondition != nil {
		l = m.MatchCondition.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.RuleUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ActionAsPathType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expand != nil {
		l = m.Expand.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ActionCommunityType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Add != nil {
		l = m.Add.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Remove != nil {
		l = m.Remove.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Set != nil {
		l = m.Set.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ActionExtCommunityType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Add != nil {
		l = m.Add.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Remove != nil {
		l = m.Remove.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Set != nil {
		l = m.Set.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ActionListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Alert {
		n += 2
	}
	if len(m.ApplyService) > 0 {
		for _, s := range m.ApplyService {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.AssignRoutingInstance)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.GatewayName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.HostBasedService {
		n += 2
	}
	if m.Log {
		n += 2
	}
	if m.MirrorTo != nil {
		l = m.MirrorTo.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.QosAction)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.SimpleAction)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ActionUpdateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsPath != nil {
		l = m.AsPath.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Community != nil {
		l = m.Community.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Extcommunity != nil {
		l = m.Extcommunity.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LocalPref != 0 {
		n += 1 + sovGenModel(uint64(m.LocalPref))
	}
	if m.Med != 0 {
		n += 1 + sovGenModel(uint64(m.Med))
	}
	return n
}

func (m *AddressFamilies) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *AddressType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkPolicy)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.SecurityGroup)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Subnet != nil {
		l = m.Subnet.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.SubnetList) > 0 {
		for _, e := range m.SubnetList {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.VirtualNetwork)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *AlarmAndList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AndList) > 0 {
		for _, e := range m.AndList {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *AlarmExpression) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operand1)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Operand2 != nil {
		l = m.Operand2.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Operation)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.Variables) > 0 {
		for _, s := range m.Variables {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *AlarmOperand2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JSONValue)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.UveAttribute)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *AlarmOrList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrList) > 0 {
		for _, e := range m.OrList {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *AllocationPoolType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.VrouterSpecificPool {
		n += 2
	}
	return n
}

func (m *AllowedAddressPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AddressMode)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IP != nil {
		l = m.IP.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Mac)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *AllowedAddressPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllowedAddressPair) > 0 {
		for _, e := range m.AllowedAddressPair {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *AsListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AsnList) > 0 {
		l = 0
		for _, e := range m.AsnList {
			l += sovGenModel(uint64(e))
		}
		n += 1 + sovGenModel(uint64(l)) + l
	}
	return n
}

func (m *AsnRangeType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AsnMax != 0 {
		n += 1 + sovGenModel(uint64(m.AsnMax))
	}
	if m.AsnMin != 0 {
		n += 1 + sovGenModel(uint64(m.AsnMin))
	}
	return n
}

func (m *AttachmentAddressType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AuthenticationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyItems) > 0 {
		for _, e := range m.KeyItems {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.KeyType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *AuthenticationKeyItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.KeyID != 0 {
		n += 1 + sovGenModel(uint64(m.KeyID))
	}
	return n
}

func (m *AutonomousSystemsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asn != 0 {
		n += 1 + sovGenModel(uint64(m.Asn))
	}
	return n
}

func (m *BGPaaSControlNodeZoneAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BgpaasControlNodeZoneType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BGPaaServiceParametersType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PortEnd != 0 {
		n += 1 + sovGenModel(uint64(m.PortEnd))
	}
	if m.PortStart != 0 {
		n += 1 + sovGenModel(uint64(m.PortStart))
	}
	return n
}

func (m *BaremetalPortGroupInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.NodeUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Properties != nil {
		l = m.Properties.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.StandalonePortsSupported {
		n += 2
	}
	return n
}

func (m *BaremetalPortInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LocalLinkConnection != nil {
		l = m.LocalLinkConnection.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.NodeUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.PxeEnabled {
		n += 2
	}
	return n
}

func (m *BaremetalProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Capabilities)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.CPUArch)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Cpus != 0 {
		n += 1 + sovGenModel(uint64(m.Cpus))
	}
	if m.LocalGB != 0 {
		n += 1 + sovGenModel(uint64(m.LocalGB))
	}
	if m.MemoryMB != 0 {
		n += 1 + sovGenModel(uint64(m.MemoryMB))
	}
	return n
}

func (m *BaremetalServerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Driver)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.DriverInfo != nil {
		l = m.DriverInfo.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.NetworkInterface)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Properties != nil {
		l = m.Properties.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BfdParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DetectionTimeMultiplier != 0 {
		n += 1 + sovGenModel(uint64(m.DetectionTimeMultiplier))
	}
	if m.TimeInterval != 0 {
		n += 1 + sovGenModel(uint64(m.TimeInterval))
	}
	return n
}

func (m *BgpFamilyAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AddressFamily)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.DefaultTunnelEncap) > 0 {
		for _, s := range m.DefaultTunnelEncap {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	if m.LoopCount != 0 {
		n += 1 + sovGenModel(uint64(m.LoopCount))
	}
	if m.PrefixLimit != nil {
		l = m.PrefixLimit.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BgpParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthData != nil {
		l = m.AuthData.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.HoldTime != 0 {
		n += 1 + sovGenModel(uint64(m.HoldTime))
	}
	if m.LocalAutonomousSystem != 0 {
		n += 1 + sovGenModel(uint64(m.LocalAutonomousSystem))
	}
	if m.PeerAutonomousSystem != 0 {
		n += 1 + sovGenModel(uint64(m.PeerAutonomousSystem))
	}
	l = len(m.PeerIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BgpPeeringAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Session) > 0 {
		for _, e := range m.Session {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *BgpPrefixLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdleTimeout != 0 {
		n += 1 + sovGenModel(uint64(m.IdleTimeout))
	}
	if m.Maximum != 0 {
		n += 1 + sovGenModel(uint64(m.Maximum))
	}
	return n
}

func (m *BgpRouterParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AddressFamilies != nil {
		l = m.AddressFamilies.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AdminDown {
		n += 2
	}
	if m.AuthData != nil {
		l = m.AuthData.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AutonomousSystem != 0 {
		n += 1 + sovGenModel(uint64(m.AutonomousSystem))
	}
	if m.ClusterID != 0 {
		n += 1 + sovGenModel(uint64(m.ClusterID))
	}
	l = len(m.GatewayAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.HoldTime != 0 {
		n += 1 + sovGenModel(uint64(m.HoldTime))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Ipv6GatewayAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LocalAutonomousSystem != 0 {
		n += 1 + sovGenModel(uint64(m.LocalAutonomousSystem))
	}
	if m.Port != 0 {
		n += 1 + sovGenModel(uint64(m.Port))
	}
	l = len(m.RouterType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SourcePort != 0 {
		n += 1 + sovGenModel(uint64(m.SourcePort))
	}
	l = len(m.Vendor)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BgpSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BgpSessionAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddressFamilies != nil {
		l = m.AddressFamilies.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AdminDown {
		n += 2
	}
	if m.AsOverride {
		n += 2
	}
	if m.AuthData != nil {
		l = m.AuthData.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.BGPRouter)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.FamilyAttributes) > 0 {
		for _, e := range m.FamilyAttributes {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	if m.HoldTime != 0 {
		n += 1 + sovGenModel(uint64(m.HoldTime))
	}
	if m.LocalAutonomousSystem != 0 {
		n += 1 + sovGenModel(uint64(m.LocalAutonomousSystem))
	}
	if m.LoopCount != 0 {
		n += 1 + sovGenModel(uint64(m.LoopCount))
	}
	if m.Passive {
		n += 2
	}
	l = len(m.PrivateAsAction)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.RouteOriginOverride != nil {
		l = m.RouteOriginOverride.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *BridgeDomainMembershipType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VlanTag != 0 {
		n += 1 + sovGenModel(uint64(m.VlanTag))
	}
	return n
}

func (m *CliDiffInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConfigChanges)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *CliDiffListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CommitDiffInfo) > 0 {
		for _, e := range m.CommitDiffInfo {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *CloudInstanceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AvailabilityZone)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.InstanceType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.OperatingSystem)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.OsVersion)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	if m.VolumeSize != 0 {
		n += 1 + sovGenModel(uint64(m.VolumeSize))
	}
	return n
}

func (m *CommunityAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CommunityAttribute) > 0 {
		for _, s := range m.CommunityAttribute {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *CommunityListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Community) > 0 {
		for _, s := range m.Community {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ConnectionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationInstance)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ControlTrafficDscpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Analytics != 0 {
		n += 1 + sovGenModel(uint64(m.Analytics))
	}
	if m.Control != 0 {
		n += 1 + sovGenModel(uint64(m.Control))
	}
	if m.DNS != 0 {
		n += 1 + sovGenModel(uint64(m.DNS))
	}
	return n
}

func (m *DefaultProtocolType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BGP != nil {
		l = m.BGP.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Ospf != nil {
		l = m.Ospf.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DeviceCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Credential != nil {
		l = m.Credential.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DeviceFamily)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Vendor)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DeviceCredentialList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeviceCredential) > 0 {
		for _, e := range m.DeviceCredential {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *DeviceFamilyListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeviceFamily) > 0 {
		for _, s := range m.DeviceFamily {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *DevicePlatformListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlatformName) > 0 {
		for _, s := range m.PlatformName {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *DhcpOptionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DHCPOptionName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DHCPOptionValue)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DHCPOptionValueBytes)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DhcpOptionsListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DHCPOption) > 0 {
		for _, e := range m.DHCPOption {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *DiscoveryPubSubEndPointType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EpID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.EpPrefix != nil {
		l = m.EpPrefix.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.EpType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.EpVersion)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *DiscoveryServiceAssignmentType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Publisher != nil {
		l = m.Publisher.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.Subscriber) > 0 {
		for _, e := range m.Subscriber {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *DnsSoaRecordType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NegativeCacheTTLSeconds != 0 {
		n += 1 + sovGenModel(uint64(m.NegativeCacheTTLSeconds))
	}
	return n
}

func (m *DnsmasqLeaseParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LeaseExpiryTime != 0 {
		n += 1 + sovGenModel(uint64(m.LeaseExpiryTime))
	}
	return n
}

func (m *DomainLimitsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectLimit != 0 {
		n += 1 + sovGenModel(uint64(m.ProjectLimit))
	}
	if m.SecurityGroupLimit != 0 {
		n += 1 + sovGenModel(uint64(m.SecurityGroupLimit))
	}
	if m.VirtualNetworkLimit != 0 {
		n += 1 + sovGenModel(uint64(m.VirtualNetworkLimit))
	}
	return n
}

func (m *DriverInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeployKernel)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DeployRamdisk)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.IpmiAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.IpmiPassword)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.IpmiPort)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.IpmiUsername)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ESXIHostInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Datacenter)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Datastore)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.EsxiName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Mac)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.VcenterServer)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ESXIProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DVSID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DVSName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *EcmpHashingIncludeFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationIP {
		n += 2
	}
	if m.DestinationPort {
		n += 2
	}
	if m.HashingConfigured {
		n += 2
	}
	if m.IPProtocol {
		n += 2
	}
	if m.SourceIP {
		n += 2
	}
	if m.SourcePort {
		n += 2
	}
	return n
}

func (m *EnabledInterfaceParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.StatsCollectionFrequency != nil {
		l = m.StatsCollectionFrequency.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *EncapsulationPrioritiesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Encapsulation) > 0 {
		for _, s := range m.Encapsulation {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *EncryptionTunnelEndpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TunnelRemoteIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *EncryptionTunnelEndpointList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Endpoint) > 0 {
		for _, e := range m.Endpoint {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ExecutableInfoListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExecutableInfo) > 0 {
		for _, e := range m.ExecutableInfo {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ExecutableInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExecutableArgs)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ExecutablePath)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.JobCompletionWeightage != 0 {
		n += 1 + sovGenModel(uint64(m.JobCompletionWeightage))
	}
	return n
}

func (m *ExtCommunityListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Community) > 0 {
		for _, s := range m.Community {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FabricNetworkTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NetworkType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FatFlowProtocols) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FatFlowProtocol) > 0 {
		for _, e := range m.FatFlowProtocol {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FieldNamesList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FieldNames) > 0 {
		for _, s := range m.FieldNames {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FirewallRuleEndpointType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AddressGroup)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Any {
		n += 2
	}
	if m.Subnet != nil {
		l = m.Subnet.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.TagIds) > 0 {
		l = 0
		for _, e := range m.TagIds {
			l += sovGenModel(uint64(e))
		}
		n += 1 + sovGenModel(uint64(l)) + l
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.VirtualNetwork)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FirewallRuleMatchTagsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TagList) > 0 {
		for _, s := range m.TagList {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FirewallRuleMatchTagsTypeIdList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TagType) > 0 {
		l = 0
		for _, e := range m.TagType {
			l += sovGenModel(uint64(e))
		}
		n += 1 + sovGenModel(uint64(l)) + l
	}
	return n
}

func (m *FirewallSequence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sequence)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FirewallServiceGroupType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FirewallService) > 0 {
		for _, e := range m.FirewallService {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FirewallServiceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DSTPorts != nil {
		l = m.DSTPorts.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ProtocolID != 0 {
		n += 1 + sovGenModel(uint64(m.ProtocolID))
	}
	if m.SRCPorts != nil {
		l = m.SRCPorts.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *FloatingIpPoolSubnetType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubnetUUID) > 0 {
		for _, s := range m.SubnetUUID {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *FlowAgingTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Port != 0 {
		n += 1 + sovGenModel(uint64(m.Port))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.TimeoutInSeconds != 0 {
		n += 1 + sovGenModel(uint64(m.TimeoutInSeconds))
	}
	return n
}

func (m *FlowAgingTimeoutList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FlowAgingTimeout) > 0 {
		for _, e := range m.FlowAgingTimeout {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *GracefulRestartParametersType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BGPHelperEnable {
		n += 2
	}
	if m.Enable {
		n += 2
	}
	if m.EndOfRibTimeout != 0 {
		n += 1 + sovGenModel(uint64(m.EndOfRibTimeout))
	}
	if m.LongLivedRestartTime != 0 {
		n += 1 + sovGenModel(uint64(m.LongLivedRestartTime))
	}
	if m.RestartTime != 0 {
		n += 1 + sovGenModel(uint64(m.RestartTime))
	}
	if m.XMPPHelperEnable {
		n += 2
	}
	return n
}

func (m *IdPermsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Enable {
		n += 2
	}
	l = len(m.LastModified)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.UserVisible {
		n += 2
	}
	if m.UUID != nil {
		l = m.UUID.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *InstanceTargetType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImportExport)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *InterfaceMapType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PortInfo) > 0 {
		for _, e := range m.PortInfo {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *InterfaceMirrorType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MirrorTo != nil {
		l = m.MirrorTo.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.TrafficDirection)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *IpAddressesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *IpamDnsAddressType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantDNSServerAddress != nil {
		l = m.TenantDNSServerAddress.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.VirtualDNSServerName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *IpamSubnetType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddrFromStart {
		n += 2
	}
	if m.AllocUnit != 0 {
		n += 1 + sovGenModel(uint64(m.AllocUnit))
	}
	if len(m.AllocationPools) > 0 {
		for _, e := range m.AllocationPools {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DefaultGateway)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.DHCPOptionList != nil {
		l = m.DHCPOptionList.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DHCPRelayServer)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.DNSNameservers) > 0 {
		for _, s := range m.DNSNameservers {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.DNSServerAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.EnableDHCP {
		n += 2
	}
	if m.HostRoutes != nil {
		l = m.HostRoutes.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.LastModified)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Subnet != nil {
		l = m.Subnet.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.SubnetName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.SubnetUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.SubscriberTag)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.VlanTag != 0 {
		n += 2 + sovGenModel(uint64(m.VlanTag))
	}
	return n
}

func (m *IpamSubnets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subnets) > 0 {
		for _, e := range m.Subnets {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *IpamType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CidrBlock != nil {
		l = m.CidrBlock.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.DHCPOptionList != nil {
		l = m.DHCPOptionList.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.HostRoutes != nil {
		l = m.HostRoutes.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.IpamDNSMethod)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IpamDNSServer != nil {
		l = m.IpamDNSServer.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.IpamMethod)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *JunosServicePorts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServicePort) > 0 {
		for _, s := range m.ServicePort {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *KeyValuePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *KeyValuePairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyValuePair) > 0 {
		for _, e := range m.KeyValuePair {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *LinklocalServiceEntryType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IPFabricDNSServiceName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.IPFabricServiceIP)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IPFabricServicePort != 0 {
		n += 1 + sovGenModel(uint64(m.IPFabricServicePort))
	}
	l = len(m.LinklocalServiceIP)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.LinklocalServiceName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LinklocalServicePort != 0 {
		n += 1 + sovGenModel(uint64(m.LinklocalServicePort))
	}
	return n
}

func (m *LinklocalServicesTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LinklocalServiceEntry) > 0 {
		for _, e := range m.LinklocalServiceEntry {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *LoadbalancerHealthmonitorType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdminState {
		n += 2
	}
	if m.Delay != 0 {
		n += 1 + sovGenModel(uint64(m.Delay))
	}
	l = len(m.ExpectedCodes)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.HTTPMethod)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.MaxRetries != 0 {
		n += 1 + sovGenModel(uint64(m.MaxRetries))
	}
	l = len(m.MonitorType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovGenModel(uint64(m.Timeout))
	}
	l = len(m.URLPath)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerListenerType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdminState {
		n += 2
	}
	if m.ConnectionLimit != 0 {
		n += 1 + sovGenModel(uint64(m.ConnectionLimit))
	}
	l = len(m.DefaultTLSContainer)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ProtocolPort != 0 {
		n += 1 + sovGenModel(uint64(m.ProtocolPort))
	}
	if len(m.SniContainers) > 0 {
		for _, s := range m.SniContainers {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *LoadbalancerMemberType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AdminState {
		n += 2
	}
	if m.ProtocolPort != 0 {
		n += 1 + sovGenModel(uint64(m.ProtocolPort))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StatusDescription)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.SubnetID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovGenModel(uint64(m.Weight))
	}
	return n
}

func (m *LoadbalancerPoolType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdminState {
		n += 2
	}
	l = len(m.LoadbalancerMethod)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.PersistenceCookieName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.SessionPersistence)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StatusDescription)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.SubnetID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LoadbalancerType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdminState {
		n += 2
	}
	l = len(m.OperatingStatus)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ProvisioningStatus)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.VipAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.VipSubnetID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LocalLinkConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.PortIndex)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.SwitchID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.SwitchInfo)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *LogicalRouterVirtualNetworkType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LogicalRouterVirtualNetworkType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *MACLimitControlType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MacLimit != 0 {
		n += 1 + sovGenModel(uint64(m.MacLimit))
	}
	l = len(m.MacLimitAction)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *MACMoveLimitControlType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MacMoveLimit != 0 {
		n += 1 + sovGenModel(uint64(m.MacMoveLimit))
	}
	l = len(m.MacMoveLimitAction)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.MacMoveTimeWindow != 0 {
		n += 1 + sovGenModel(uint64(m.MacMoveTimeWindow))
	}
	return n
}

func (m *MacAddressesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MacAddress) > 0 {
		for _, s := range m.MacAddress {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *MatchConditionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DSTAddress != nil {
		l = m.DSTAddress.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.DSTPort != nil {
		l = m.DSTPort.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Ethertype)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SRCAddress != nil {
		l = m.SRCAddress.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SRCPort != nil {
		l = m.SRCPort.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *MirrorActionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AnalyzerIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.AnalyzerMacAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.AnalyzerName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Encapsulation)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.JuniperHeader {
		n += 2
	}
	l = len(m.NHMode)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.NicAssistedMirroring {
		n += 2
	}
	if m.NicAssistedMirroringVlan != 0 {
		n += 1 + sovGenModel(uint64(m.NicAssistedMirroringVlan))
	}
	l = len(m.RoutingInstance)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.StaticNHHeader != nil {
		l = m.StaticNHHeader.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.UDPPort != 0 {
		n += 1 + sovGenModel(uint64(m.UDPPort))
	}
	return n
}

func (m *MulticastSourceGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.GroupAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *MulticastSourceGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MulticastSourceGroup) > 0 {
		for _, e := range m.MulticastSourceGroup {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *NamespaceValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Asn != nil {
		l = m.Asn.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.AsnRanges) > 0 {
		for _, e := range m.AsnRanges {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	if m.Ipv4Cidr != nil {
		l = m.Ipv4Cidr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.MacAddr != nil {
		l = m.MacAddr.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.SerialNums) > 0 {
		for _, s := range m.SerialNums {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *NodeProfileRoleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhysicalRole)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.RBRoles) > 0 {
		for _, s := range m.RBRoles {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *NodeProfileRolesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoleMappings) > 0 {
		for _, e := range m.RoleMappings {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PermType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.GroupAccess != 0 {
		n += 1 + sovGenModel(uint64(m.GroupAccess))
	}
	if m.OtherAccess != 0 {
		n += 1 + sovGenModel(uint64(m.OtherAccess))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.OwnerAccess != 0 {
		n += 1 + sovGenModel(uint64(m.OwnerAccess))
	}
	return n
}

func (m *PermType2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GlobalAccess != 0 {
		n += 1 + sovGenModel(uint64(m.GlobalAccess))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.OwnerAccess != 0 {
		n += 1 + sovGenModel(uint64(m.OwnerAccess))
	}
	if len(m.Share) > 0 {
		for _, e := range m.Share {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PlaybookInfoListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlaybookInfo) > 0 {
		for _, e := range m.PlaybookInfo {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PlaybookInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceFamily)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.JobCompletionWeightage != 0 {
		n += 1 + sovGenModel(uint64(m.JobCompletionWeightage))
	}
	if m.MultiDevicePlaybook {
		n += 2
	}
	l = len(m.PlaybookURI)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SequenceNo != 0 {
		n += 1 + sovGenModel(uint64(m.SequenceNo))
	}
	l = len(m.Vendor)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PluginProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PluginProperty) > 0 {
		for _, e := range m.PluginProperty {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PluginProperty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Property)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PolicyBasedForwardingRuleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.DSTMac)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Ipv6ServiceChainAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.MPLSLabel != 0 {
		n += 1 + sovGenModel(uint64(m.MPLSLabel))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ServiceChainAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.SRCMac)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.VlanTag != 0 {
		n += 1 + sovGenModel(uint64(m.VlanTag))
	}
	return n
}

func (m *PolicyEntriesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PolicyRule) > 0 {
		for _, e := range m.PolicyRule {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PolicyRuleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActionList != nil {
		l = m.ActionList.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.Application) > 0 {
		for _, s := range m.Application {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.DSTAddresses) > 0 {
		for _, e := range m.DSTAddresses {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.DSTPorts) > 0 {
		for _, e := range m.DSTPorts {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Ethertype)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.LastModified)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.RuleSequence != nil {
		l = m.RuleSequence.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.RuleUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.SRCAddresses) > 0 {
		for _, e := range m.SRCAddresses {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.SRCPorts) > 0 {
		for _, e := range m.SRCPorts {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PolicyStatementType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Term) > 0 {
		for _, e := range m.Term {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PolicyTermType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TermActionList != nil {
		l = m.TermActionList.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.TermMatchCondition != nil {
		l = m.TermMatchCondition.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PortGroupProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Miimon != 0 {
		n += 1 + sovGenModel(uint64(m.Miimon))
	}
	l = len(m.XmitHashPolicy)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PortInfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channelized {
		n += 2
	}
	l = len(m.ChannelizedPortSpeed)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.PortGroup)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.PortSpeed)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PortMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DSTPort != 0 {
		n += 1 + sovGenModel(uint64(m.DSTPort))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SRCPort != 0 {
		n += 1 + sovGenModel(uint64(m.SRCPort))
	}
	return n
}

func (m *PortMappings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PortMappings) > 0 {
		for _, e := range m.PortMappings {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PortTranslationPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortCount)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.PortRange != nil {
		l = m.PortRange.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *PortTranslationPools) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PortTranslationPool) > 0 {
		for _, e := range m.PortTranslationPool {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *PortType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndPort != 0 {
		n += 1 + sovGenModel(uint64(m.EndPort))
	}
	if m.StartPort != 0 {
		n += 1 + sovGenModel(uint64(m.StartPort))
	}
	return n
}

func (m *PrefixMatchType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.PrefixType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ProtocolBgpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutonomousSystem != 0 {
		n += 1 + sovGenModel(uint64(m.AutonomousSystem))
	}
	return n
}

func (m *ProtocolOspfType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Area != 0 {
		n += 1 + sovGenModel(uint64(m.Area))
	}
	return n
}

func (m *ProtocolType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationAggregatePrefixLength != 0 {
		n += 1 + sovGenModel(uint64(m.DestinationAggregatePrefixLength))
	}
	if m.DestinationPrefix != nil {
		l = m.DestinationPrefix.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.IgnoreAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovGenModel(uint64(m.Port))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SourceAggregatePrefixLength != 0 {
		n += 1 + sovGenModel(uint64(m.SourceAggregatePrefixLength))
	}
	if m.SourcePrefix != nil {
		l = m.SourcePrefix.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ProviderDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhysicalNetwork)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SegmentationID != 0 {
		n += 1 + sovGenModel(uint64(m.SegmentationID))
	}
	return n
}

func (m *QosIdForwardingClassPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ForwardingClassID != 0 {
		n += 1 + sovGenModel(uint64(m.ForwardingClassID))
	}
	if m.Key != 0 {
		n += 1 + sovGenModel(uint64(m.Key))
	}
	return n
}

func (m *QosIdForwardingClassPairs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QosIDForwardingClassPair) > 0 {
		for _, e := range m.QosIDForwardingClassPair {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *QuotaType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccessControlList != 0 {
		n += 1 + sovGenModel(uint64(m.AccessControlList))
	}
	if m.BGPRouter != 0 {
		n += 1 + sovGenModel(uint64(m.BGPRouter))
	}
	if m.Defaults != 0 {
		n += 1 + sovGenModel(uint64(m.Defaults))
	}
	if m.FirewallGroup != 0 {
		n += 1 + sovGenModel(uint64(m.FirewallGroup))
	}
	if m.FirewallPolicy != 0 {
		n += 1 + sovGenModel(uint64(m.FirewallPolicy))
	}
	if m.FirewallRule != 0 {
		n += 1 + sovGenModel(uint64(m.FirewallRule))
	}
	if m.FloatingIP != 0 {
		n += 1 + sovGenModel(uint64(m.FloatingIP))
	}
	if m.FloatingIPPool != 0 {
		n += 1 + sovGenModel(uint64(m.FloatingIPPool))
	}
	if m.GlobalVrouterConfig != 0 {
		n += 1 + sovGenModel(uint64(m.GlobalVrouterConfig))
	}
	if m.HostBasedService != 0 {
		n += 1 + sovGenModel(uint64(m.HostBasedService))
	}
	if m.InstanceIP != 0 {
		n += 1 + sovGenModel(uint64(m.InstanceIP))
	}
	if m.LoadbalancerHealthmonitor != 0 {
		n += 1 + sovGenModel(uint64(m.LoadbalancerHealthmonitor))
	}
	if m.LoadbalancerMember != 0 {
		n += 1 + sovGenModel(uint64(m.LoadbalancerMember))
	}
	if m.LoadbalancerPool != 0 {
		n += 1 + sovGenModel(uint64(m.LoadbalancerPool))
	}
	if m.LogicalRouter != 0 {
		n += 1 + sovGenModel(uint64(m.LogicalRouter))
	}
	if m.NetworkIpam != 0 {
		n += 2 + sovGenModel(uint64(m.NetworkIpam))
	}
	if m.NetworkPolicy != 0 {
		n += 2 + sovGenModel(uint64(m.NetworkPolicy))
	}
	if m.RouteTable != 0 {
		n += 2 + sovGenModel(uint64(m.RouteTable))
	}
	if m.SecurityGroup != 0 {
		n += 2 + sovGenModel(uint64(m.SecurityGroup))
	}
	if m.SecurityGroupRule != 0 {
		n += 2 + sovGenModel(uint64(m.SecurityGroupRule))
	}
	if m.SecurityLoggingObject != 0 {
		n += 2 + sovGenModel(uint64(m.SecurityLoggingObject))
	}
	if m.ServiceInstance != 0 {
		n += 2 + sovGenModel(uint64(m.ServiceInstance))
	}
	if m.ServiceTemplate != 0 {
		n += 2 + sovGenModel(uint64(m.ServiceTemplate))
	}
	if m.Subnet != 0 {
		n += 2 + sovGenModel(uint64(m.Subnet))
	}
	if m.VirtualDNS != 0 {
		n += 2 + sovGenModel(uint64(m.VirtualDNS))
	}
	if m.VirtualDNSRecord != 0 {
		n += 2 + sovGenModel(uint64(m.VirtualDNSRecord))
	}
	if m.VirtualIP != 0 {
		n += 2 + sovGenModel(uint64(m.VirtualIP))
	}
	if m.VirtualMachineInterface != 0 {
		n += 2 + sovGenModel(uint64(m.VirtualMachineInterface))
	}
	if m.VirtualNetwork != 0 {
		n += 2 + sovGenModel(uint64(m.VirtualNetwork))
	}
	if m.VirtualRouter != 0 {
		n += 2 + sovGenModel(uint64(m.VirtualRouter))
	}
	return n
}

func (m *RbacPermType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleCrud)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.RoleName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RbacRuleEntriesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RbacRule) > 0 {
		for _, e := range m.RbacRule {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *RbacRuleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RuleField)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.RuleObject)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.RulePerms) > 0 {
		for _, e := range m.RulePerms {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *RouteListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Route) > 0 {
		for _, s := range m.Route {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *RouteOriginOverride) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.OriginOverride {
		n += 2
	}
	return n
}

func (m *RouteTableType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Route) > 0 {
		for _, e := range m.Route {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *RouteTargetList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RouteTarget) > 0 {
		for _, s := range m.RouteTarget {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *RouteType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommunityAttributes != nil {
		l = m.CommunityAttributes.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.NextHop)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.NextHopType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RoutedProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BFDParams != nil {
		l = m.BFDParams.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.BGPParams != nil {
		l = m.BGPParams.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.PhysicalRouterUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.RoutedInterfaceIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.RoutingPolicyParams != nil {
		l = m.RoutingPolicyParams.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.RoutingProtocol)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.StaticRouteParams != nil {
		l = m.StaticRouteParams.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RoutingBridgingRolesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RBRoles) > 0 {
		for _, s := range m.RBRoles {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *RoutingPolicyParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExportRoutingPolicyUUID) > 0 {
		for _, s := range m.ExportRoutingPolicyUUID {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.ImportRoutingPolicyUUID) > 0 {
		for _, s := range m.ImportRoutingPolicyUUID {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *RoutingPolicyServiceInstanceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LeftSequence)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.RightSequence)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *RoutingPolicyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sequence)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *SNMPCredentials) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LocalPort != 0 {
		n += 1 + sovGenModel(uint64(m.LocalPort))
	}
	if m.Retries != 0 {
		n += 1 + sovGenModel(uint64(m.Retries))
	}
	if m.Timeout != 0 {
		n += 1 + sovGenModel(uint64(m.Timeout))
	}
	l = len(m.V2Community)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.V3AuthenticationPassword)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.V3AuthenticationProtocol)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.V3Context)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.V3ContextEngineID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.V3EngineBoots != 0 {
		n += 1 + sovGenModel(uint64(m.V3EngineBoots))
	}
	l = len(m.V3EngineID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.V3EngineTime != 0 {
		n += 1 + sovGenModel(uint64(m.V3EngineTime))
	}
	l = len(m.V3PrivacyPassword)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.V3PrivacyProtocol)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.V3SecurityEngineID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.V3SecurityLevel)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.V3SecurityName)
	if l > 0 {
		n += 2 + l + sovGenModel(uint64(l))
	}
	if m.Version != 0 {
		n += 2 + sovGenModel(uint64(m.Version))
	}
	return n
}

func (m *SecurityLoggingObjectRuleEntryType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rate != 0 {
		n += 1 + sovGenModel(uint64(m.Rate))
	}
	l = len(m.RuleUUID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *SecurityLoggingObjectRuleListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rule) > 0 {
		for _, e := range m.Rule {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *SequenceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Major != 0 {
		n += 1 + sovGenModel(uint64(m.Major))
	}
	if m.Minor != 0 {
		n += 1 + sovGenModel(uint64(m.Minor))
	}
	return n
}

func (m *SerialNumListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SerialNum) > 0 {
		for _, s := range m.SerialNum {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *ServiceApplianceInterfaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InterfaceType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prefix) > 0 {
		for _, s := range m.Prefix {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.RoutingInstance)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SCHead {
		n += 2
	}
	l = len(m.ServiceChainAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ServiceChainID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ServiceInstance)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.SourceRoutingInstance)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceHealthCheckType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Delay != 0 {
		n += 1 + sovGenModel(uint64(m.Delay))
	}
	if m.DelayUsecs != 0 {
		n += 1 + sovGenModel(uint64(m.DelayUsecs))
	}
	if m.Enabled {
		n += 2
	}
	l = len(m.ExpectedCodes)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.HealthCheckType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.HTTPMethod)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.MaxRetries != 0 {
		n += 1 + sovGenModel(uint64(m.MaxRetries))
	}
	l = len(m.MonitorType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Timeout != 0 {
		n += 1 + sovGenModel(uint64(m.Timeout))
	}
	if m.TimeoutUsecs != 0 {
		n += 1 + sovGenModel(uint64(m.TimeoutUsecs))
	}
	l = len(m.URLPath)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceInstanceInterfaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowedAddressPairs != nil {
		l = m.AllowedAddressPairs.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.IPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.StaticRoutes != nil {
		l = m.StaticRoutes.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.VirtualNetwork)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceInstanceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoPolicy {
		n += 2
	}
	l = len(m.AvailabilityZone)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.HaMode)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.InterfaceList) > 0 {
		for _, e := range m.InterfaceList {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.LeftIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.LeftVirtualNetwork)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ManagementVirtualNetwork)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.RightIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.RightVirtualNetwork)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ScaleOut != nil {
		l = m.ScaleOut.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ServiceVirtualizationType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.VirtualRouterID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceInterfaceTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InterfaceType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceScaleOutType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AutoScale {
		n += 2
	}
	if m.MaxInstances != 0 {
		n += 1 + sovGenModel(uint64(m.MaxInstances))
	}
	return n
}

func (m *ServiceTemplateInterfaceType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServiceInterfaceType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SharedIP {
		n += 2
	}
	if m.StaticRouteEnable {
		n += 2
	}
	return n
}

func (m *ServiceTemplateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AvailabilityZoneEnable {
		n += 2
	}
	l = len(m.Flavor)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ImageName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.InstanceData)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.InterfaceType) > 0 {
		for _, e := range m.InterfaceType {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	if m.OrderedInterfaces {
		n += 2
	}
	l = len(m.ServiceMode)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ServiceScaling {
		n += 2
	}
	l = len(m.ServiceType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.ServiceVirtualizationType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovGenModel(uint64(m.Version))
	}
	l = len(m.VrouterInstanceType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ServiceVirtualNetworkType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VirtualNetworkType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *SflowParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdaptiveSampleRate != 0 {
		n += 1 + sovGenModel(uint64(m.AdaptiveSampleRate))
	}
	l = len(m.AgentID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.EnabledInterfaceParams) > 0 {
		for _, e := range m.EnabledInterfaceParams {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.EnabledInterfaceType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.StatsCollectionFrequency != nil {
		l = m.StatsCollectionFrequency.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *ShareType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.TenantAccess != 0 {
		n += 1 + sovGenModel(uint64(m.TenantAccess))
	}
	return n
}

func (m *SloRateType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rate != 0 {
		n += 1 + sovGenModel(uint64(m.Rate))
	}
	return n
}

func (m *StaticMirrorNhType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vni != 0 {
		n += 1 + sovGenModel(uint64(m.Vni))
	}
	l = len(m.VtepDSTIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.VtepDSTMacAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *StaticRouteEntriesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Route) > 0 {
		for _, e := range m.Route {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *StaticRouteParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InterfaceRouteTableUUID) > 0 {
		for _, s := range m.InterfaceRouteTableUUID {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.NextHopIPAddress)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *StaticRouteType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Community) > 0 {
		for _, s := range m.Community {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.NextHop)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.RouteTarget) > 0 {
		for _, s := range m.RouteTarget {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *StatsCollectionFrequency) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Direction)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.PollingInterval != 0 {
		n += 1 + sovGenModel(uint64(m.PollingInterval))
	}
	if m.SampleRate != 0 {
		n += 1 + sovGenModel(uint64(m.SampleRate))
	}
	return n
}

func (m *StormControlParameters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BandwidthPercent != 0 {
		n += 1 + sovGenModel(uint64(m.BandwidthPercent))
	}
	if m.NoBroadcast {
		n += 2
	}
	if m.NoMulticast {
		n += 2
	}
	if m.NoRegisteredMulticast {
		n += 2
	}
	if m.NoUnknownUnicast {
		n += 2
	}
	if m.NoUnregisteredMulticast {
		n += 2
	}
	if m.RecoveryTimeout != 0 {
		n += 1 + sovGenModel(uint64(m.RecoveryTimeout))
	}
	if len(m.StormControlActions) > 0 {
		for _, s := range m.StormControlActions {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *StructuredSyslogLinkType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Overlay)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Underlay)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *StructuredSyslogLinkmap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *SubnetListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subnet) > 0 {
		for _, e := range m.Subnet {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *SubnetType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IPPrefix)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.IPPrefixLen != 0 {
		n += 1 + sovGenModel(uint64(m.IPPrefixLen))
	}
	return n
}

func (m *TelemetryResourceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Rate)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *TelemetryStateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Resource) > 0 {
		for _, e := range m.Resource {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	l = len(m.ServerIP)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ServerPort != 0 {
		n += 1 + sovGenModel(uint64(m.ServerPort))
	}
	return n
}

func (m *TermActionListType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *TermMatchConditionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Community)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.CommunityList) > 0 {
		for _, s := range m.CommunityList {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	if m.CommunityMatchAll {
		n += 2
	}
	if len(m.ExtcommunityList) > 0 {
		for _, s := range m.ExtcommunityList {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	if m.ExtcommunityMatchAll {
		n += 2
	}
	if len(m.Prefix) > 0 {
		for _, e := range m.Prefix {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.Protocol) > 0 {
		for _, s := range m.Protocol {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *TimerType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.OffInterval)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.OnInterval)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *UserCredentials) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *UserDefinedLogStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *UserDefinedLogStatList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statlist) > 0 {
		for _, e := range m.Statlist {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *UuidType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UUIDLslong != 0 {
		n += 1 + sovGenModel(uint64(m.UUIDLslong))
	}
	if m.UUIDMslong != 0 {
		n += 1 + sovGenModel(uint64(m.UUIDMslong))
	}
	return n
}

func (m *UveKeysType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UveKey) > 0 {
		for _, s := range m.UveKey {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *VendorHardwaresType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VendorHardware) > 0 {
		for _, s := range m.VendorHardware {
			l = len(s)
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *VirtualDnsRecordType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordClass)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.RecordData)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.RecordMXPreference != 0 {
		n += 1 + sovGenModel(uint64(m.RecordMXPreference))
	}
	l = len(m.RecordName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.RecordSourceName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.RecordTTLSeconds != 0 {
		n += 1 + sovGenModel(uint64(m.RecordTTLSeconds))
	}
	l = len(m.RecordType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualDnsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DefaultTTLSeconds != 0 {
		n += 1 + sovGenModel(uint64(m.DefaultTTLSeconds))
	}
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.DynamicRecordsFromClient {
		n += 2
	}
	if m.ExternalVisible {
		n += 2
	}
	l = len(m.FloatingIPRecord)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.NextVirtualDNS)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.RecordOrder)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ReverseResolution {
		n += 2
	}
	if m.SoaRecord != nil {
		l = m.SoaRecord.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualIpType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.AdminState {
		n += 2
	}
	if m.ConnectionLimit != 0 {
		n += 1 + sovGenModel(uint64(m.ConnectionLimit))
	}
	l = len(m.PersistenceCookieName)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.PersistenceType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.ProtocolPort != 0 {
		n += 1 + sovGenModel(uint64(m.ProtocolPort))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.StatusDescription)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.SubnetID)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualMachineInterfacePropertiesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InterfaceMirror != nil {
		l = m.InterfaceMirror.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.LocalPreference != 0 {
		n += 1 + sovGenModel(uint64(m.LocalPreference))
	}
	if m.MaxFlows != 0 {
		n += 1 + sovGenModel(uint64(m.MaxFlows))
	}
	l = len(m.ServiceInterfaceType)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.SubInterfaceVlanTag != 0 {
		n += 1 + sovGenModel(uint64(m.SubInterfaceVlanTag))
	}
	return n
}

func (m *VirtualNetworkPolicyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != nil {
		l = m.Sequence.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.Timer != nil {
		l = m.Timer.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	return n
}

func (m *VirtualNetworkRoutedPropertiesType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoutedProperties) > 0 {
		for _, e := range m.RoutedProperties {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *VirtualNetworkType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowTransit {
		n += 2
	}
	l = len(m.ForwardingMode)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.MaxFlows != 0 {
		n += 1 + sovGenModel(uint64(m.MaxFlows))
	}
	if m.MirrorDestination {
		n += 2
	}
	if m.NetworkID != 0 {
		n += 1 + sovGenModel(uint64(m.NetworkID))
	}
	l = len(m.RPF)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.VxlanNetworkIdentifier != 0 {
		n += 1 + sovGenModel(uint64(m.VxlanNetworkIdentifier))
	}
	return n
}

func (m *VirtualRouterNetworkIpamType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllocationPools) > 0 {
		for _, e := range m.AllocationPools {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	if len(m.Subnet) > 0 {
		for _, e := range m.Subnet {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *VnSubnetsType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HostRoutes != nil {
		l = m.HostRoutes.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	if len(m.IpamSubnets) > 0 {
		for _, e := range m.IpamSubnets {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func (m *VpgInterfaceParametersType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AeNum != 0 {
		n += 1 + sovGenModel(uint64(m.AeNum))
	}
	return n
}

func (m *VrfAssignRuleType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IgnoreACL {
		n += 2
	}
	if m.MatchCondition != nil {
		l = m.MatchCondition.Size()
		n += 1 + l + sovGenModel(uint64(l))
	}
	l = len(m.RoutingInstance)
	if l > 0 {
		n += 1 + l + sovGenModel(uint64(l))
	}
	if m.VlanTag != 0 {
		n += 1 + sovGenModel(uint64(m.VlanTag))
	}
	return n
}

func (m *VrfAssignTableType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VRFAssignRule) > 0 {
		for _, e := range m.VRFAssignRule {
			l = e.Size()
			n += 1 + l + sovGenModel(uint64(l))
		}
	}
	return n
}

func sovGenModel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenModel(x uint64) (n int) {
	return sovGenModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AccessControlList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*AccessControlListTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "AccessControlListTagRef", "AccessControlListTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&AccessControlList{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AccessControlListEntries:` + strings.Replace(this.AccessControlListEntries.String(), "AclEntriesType", "AclEntriesType", 1) + `,`,
		`AccessControlListHash:` + fmt.Sprintf("%v", this.AccessControlListHash) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccessControlListTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccessControlListTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddressGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*AddressGroupTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "AddressGroupTagRef", "AddressGroupTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForFirewallRuleBackRefs := "[]*FirewallRule{"
	for _, f := range this.FirewallRuleBackRefs {
		repeatedStringForFirewallRuleBackRefs += strings.Replace(f.String(), "FirewallRule", "FirewallRule", 1) + ","
	}
	repeatedStringForFirewallRuleBackRefs += "}"
	s := strings.Join([]string{`&AddressGroup{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AddressGroupPrefix:` + strings.Replace(this.AddressGroupPrefix.String(), "SubnetListType", "SubnetListType", 1) + `,`,
		`DraftModeState:` + fmt.Sprintf("%v", this.DraftModeState) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`FirewallRuleBackRefs:` + repeatedStringForFirewallRuleBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddressGroupTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddressGroupTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Alarm) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*AlarmTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "AlarmTagRef", "AlarmTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&Alarm{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AlarmRules:` + strings.Replace(this.AlarmRules.String(), "AlarmOrList", "AlarmOrList", 1) + `,`,
		`AlarmSeverity:` + fmt.Sprintf("%v", this.AlarmSeverity) + `,`,
		`UveKeys:` + strings.Replace(this.UveKeys.String(), "UveKeysType", "UveKeysType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlarmTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlarmTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AliasIPPool) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*AliasIPPoolTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "AliasIPPoolTagRef", "AliasIPPoolTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForProjectBackRefs := "[]*Project{"
	for _, f := range this.ProjectBackRefs {
		repeatedStringForProjectBackRefs += strings.Replace(f.String(), "Project", "Project", 1) + ","
	}
	repeatedStringForProjectBackRefs += "}"
	repeatedStringForAliasIPs := "[]*AliasIP{"
	for _, f := range this.AliasIPs {
		repeatedStringForAliasIPs += strings.Replace(f.String(), "AliasIP", "AliasIP", 1) + ","
	}
	repeatedStringForAliasIPs += "}"
	s := strings.Join([]string{`&AliasIPPool{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`ProjectBackRefs:` + repeatedStringForProjectBackRefs + `,`,
		`AliasIPs:` + repeatedStringForAliasIPs + `,`,
		`}`,
	}, "")
	return s
}
func (this *AliasIPPoolTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AliasIPPoolTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AliasIP) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProjectRefs := "[]*AliasIPProjectRef{"
	for _, f := range this.ProjectRefs {
		repeatedStringForProjectRefs += strings.Replace(f.String(), "AliasIPProjectRef", "AliasIPProjectRef", 1) + ","
	}
	repeatedStringForProjectRefs += "}"
	repeatedStringForTagRefs := "[]*AliasIPTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "AliasIPTagRef", "AliasIPTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceRefs := "[]*AliasIPVirtualMachineInterfaceRef{"
	for _, f := range this.VirtualMachineInterfaceRefs {
		repeatedStringForVirtualMachineInterfaceRefs += strings.Replace(f.String(), "AliasIPVirtualMachineInterfaceRef", "AliasIPVirtualMachineInterfaceRef", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceRefs += "}"
	s := strings.Join([]string{`&AliasIP{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AliasIPAddress:` + fmt.Sprintf("%v", this.AliasIPAddress) + `,`,
		`AliasIPAddressFamily:` + fmt.Sprintf("%v", this.AliasIPAddressFamily) + `,`,
		`ProjectRefs:` + repeatedStringForProjectRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceRefs:` + repeatedStringForVirtualMachineInterfaceRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *AliasIPProjectRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AliasIPProjectRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AliasIPTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AliasIPTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AliasIPVirtualMachineInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AliasIPVirtualMachineInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnalyticsAlarmNode) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*AnalyticsAlarmNodeTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "AnalyticsAlarmNodeTagRef", "AnalyticsAlarmNodeTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&AnalyticsAlarmNode{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AnalyticsAlarmNodeIPAddress:` + fmt.Sprintf("%v", this.AnalyticsAlarmNodeIPAddress) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnalyticsAlarmNodeTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnalyticsAlarmNodeTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnalyticsNode) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*AnalyticsNodeTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "AnalyticsNodeTagRef", "AnalyticsNodeTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&AnalyticsNode{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AnalyticsNodeIPAddress:` + fmt.Sprintf("%v", this.AnalyticsNodeIPAddress) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnalyticsNodeTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnalyticsNodeTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnalyticsSNMPNode) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*AnalyticsSNMPNodeTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "AnalyticsSNMPNodeTagRef", "AnalyticsSNMPNodeTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&AnalyticsSNMPNode{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AnalyticsSNMPNodeIPAddress:` + fmt.Sprintf("%v", this.AnalyticsSNMPNodeIPAddress) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *AnalyticsSNMPNodeTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AnalyticsSNMPNodeTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIAccessList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*APIAccessListTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "APIAccessListTagRef", "APIAccessListTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&APIAccessList{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`APIAccessListEntries:` + strings.Replace(this.APIAccessListEntries.String(), "RbacRuleEntriesType", "RbacRuleEntriesType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIAccessListTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIAccessListTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPolicySet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFirewallPolicyRefs := "[]*ApplicationPolicySetFirewallPolicyRef{"
	for _, f := range this.FirewallPolicyRefs {
		repeatedStringForFirewallPolicyRefs += strings.Replace(f.String(), "ApplicationPolicySetFirewallPolicyRef", "ApplicationPolicySetFirewallPolicyRef", 1) + ","
	}
	repeatedStringForFirewallPolicyRefs += "}"
	repeatedStringForGlobalVrouterConfigRefs := "[]*ApplicationPolicySetGlobalVrouterConfigRef{"
	for _, f := range this.GlobalVrouterConfigRefs {
		repeatedStringForGlobalVrouterConfigRefs += strings.Replace(f.String(), "ApplicationPolicySetGlobalVrouterConfigRef", "ApplicationPolicySetGlobalVrouterConfigRef", 1) + ","
	}
	repeatedStringForGlobalVrouterConfigRefs += "}"
	repeatedStringForTagRefs := "[]*ApplicationPolicySetTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ApplicationPolicySetTagRef", "ApplicationPolicySetTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForProjectBackRefs := "[]*Project{"
	for _, f := range this.ProjectBackRefs {
		repeatedStringForProjectBackRefs += strings.Replace(f.String(), "Project", "Project", 1) + ","
	}
	repeatedStringForProjectBackRefs += "}"
	s := strings.Join([]string{`&ApplicationPolicySet{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AllApplications:` + fmt.Sprintf("%v", this.AllApplications) + `,`,
		`DraftModeState:` + fmt.Sprintf("%v", this.DraftModeState) + `,`,
		`FirewallPolicyRefs:` + repeatedStringForFirewallPolicyRefs + `,`,
		`GlobalVrouterConfigRefs:` + repeatedStringForGlobalVrouterConfigRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`ProjectBackRefs:` + repeatedStringForProjectBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPolicySetFirewallPolicyRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPolicySetFirewallPolicyRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "FirewallSequence", "FirewallSequence", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPolicySetGlobalVrouterConfigRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPolicySetGlobalVrouterConfigRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationPolicySetTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationPolicySetTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPAsAService) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBGPRouterRefs := "[]*BGPAsAServiceBGPRouterRef{"
	for _, f := range this.BGPRouterRefs {
		repeatedStringForBGPRouterRefs += strings.Replace(f.String(), "BGPAsAServiceBGPRouterRef", "BGPAsAServiceBGPRouterRef", 1) + ","
	}
	repeatedStringForBGPRouterRefs += "}"
	repeatedStringForControlNodeZoneRefs := "[]*BGPAsAServiceControlNodeZoneRef{"
	for _, f := range this.ControlNodeZoneRefs {
		repeatedStringForControlNodeZoneRefs += strings.Replace(f.String(), "BGPAsAServiceControlNodeZoneRef", "BGPAsAServiceControlNodeZoneRef", 1) + ","
	}
	repeatedStringForControlNodeZoneRefs += "}"
	repeatedStringForServiceHealthCheckRefs := "[]*BGPAsAServiceServiceHealthCheckRef{"
	for _, f := range this.ServiceHealthCheckRefs {
		repeatedStringForServiceHealthCheckRefs += strings.Replace(f.String(), "BGPAsAServiceServiceHealthCheckRef", "BGPAsAServiceServiceHealthCheckRef", 1) + ","
	}
	repeatedStringForServiceHealthCheckRefs += "}"
	repeatedStringForTagRefs := "[]*BGPAsAServiceTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "BGPAsAServiceTagRef", "BGPAsAServiceTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceRefs := "[]*BGPAsAServiceVirtualMachineInterfaceRef{"
	for _, f := range this.VirtualMachineInterfaceRefs {
		repeatedStringForVirtualMachineInterfaceRefs += strings.Replace(f.String(), "BGPAsAServiceVirtualMachineInterfaceRef", "BGPAsAServiceVirtualMachineInterfaceRef", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceRefs += "}"
	s := strings.Join([]string{`&BGPAsAService{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AutonomousSystem:` + fmt.Sprintf("%v", this.AutonomousSystem) + `,`,
		`BgpaasIPAddress:` + fmt.Sprintf("%v", this.BgpaasIPAddress) + `,`,
		`BgpaasIpv4MappedIpv6Nexthop:` + fmt.Sprintf("%v", this.BgpaasIpv4MappedIpv6Nexthop) + `,`,
		`BgpaasSessionAttributes:` + strings.Replace(this.BgpaasSessionAttributes.String(), "BgpSessionAttributes", "BgpSessionAttributes", 1) + `,`,
		`BgpaasShared:` + fmt.Sprintf("%v", this.BgpaasShared) + `,`,
		`BgpaasSuppressRouteAdvertisement:` + fmt.Sprintf("%v", this.BgpaasSuppressRouteAdvertisement) + `,`,
		`BGPRouterRefs:` + repeatedStringForBGPRouterRefs + `,`,
		`ControlNodeZoneRefs:` + repeatedStringForControlNodeZoneRefs + `,`,
		`ServiceHealthCheckRefs:` + repeatedStringForServiceHealthCheckRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceRefs:` + repeatedStringForVirtualMachineInterfaceRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPAsAServiceBGPRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BGPAsAServiceBGPRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPAsAServiceControlNodeZoneRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BGPAsAServiceControlNodeZoneRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "BGPaaSControlNodeZoneAttributes", "BGPaaSControlNodeZoneAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPAsAServiceServiceHealthCheckRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BGPAsAServiceServiceHealthCheckRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPAsAServiceTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BGPAsAServiceTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPAsAServiceVirtualMachineInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BGPAsAServiceVirtualMachineInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPRouter) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBGPRouterRefs := "[]*BGPRouterBGPRouterRef{"
	for _, f := range this.BGPRouterRefs {
		repeatedStringForBGPRouterRefs += strings.Replace(f.String(), "BGPRouterBGPRouterRef", "BGPRouterBGPRouterRef", 1) + ","
	}
	repeatedStringForBGPRouterRefs += "}"
	repeatedStringForControlNodeZoneRefs := "[]*BGPRouterControlNodeZoneRef{"
	for _, f := range this.ControlNodeZoneRefs {
		repeatedStringForControlNodeZoneRefs += strings.Replace(f.String(), "BGPRouterControlNodeZoneRef", "BGPRouterControlNodeZoneRef", 1) + ","
	}
	repeatedStringForControlNodeZoneRefs += "}"
	repeatedStringForSubClusterRefs := "[]*BGPRouterSubClusterRef{"
	for _, f := range this.SubClusterRefs {
		repeatedStringForSubClusterRefs += strings.Replace(f.String(), "BGPRouterSubClusterRef", "BGPRouterSubClusterRef", 1) + ","
	}
	repeatedStringForSubClusterRefs += "}"
	repeatedStringForTagRefs := "[]*BGPRouterTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "BGPRouterTagRef", "BGPRouterTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForBGPAsAServiceBackRefs := "[]*BGPAsAService{"
	for _, f := range this.BGPAsAServiceBackRefs {
		repeatedStringForBGPAsAServiceBackRefs += strings.Replace(f.String(), "BGPAsAService", "BGPAsAService", 1) + ","
	}
	repeatedStringForBGPAsAServiceBackRefs += "}"
	repeatedStringForBGPRouterBackRefs := "[]*BGPRouter{"
	for _, f := range this.BGPRouterBackRefs {
		repeatedStringForBGPRouterBackRefs += strings.Replace(f.String(), "BGPRouter", "BGPRouter", 1) + ","
	}
	repeatedStringForBGPRouterBackRefs += "}"
	repeatedStringForGlobalSystemConfigBackRefs := "[]*GlobalSystemConfig{"
	for _, f := range this.GlobalSystemConfigBackRefs {
		repeatedStringForGlobalSystemConfigBackRefs += strings.Replace(f.String(), "GlobalSystemConfig", "GlobalSystemConfig", 1) + ","
	}
	repeatedStringForGlobalSystemConfigBackRefs += "}"
	repeatedStringForPhysicalRouterBackRefs := "[]*PhysicalRouter{"
	for _, f := range this.PhysicalRouterBackRefs {
		repeatedStringForPhysicalRouterBackRefs += strings.Replace(f.String(), "PhysicalRouter", "PhysicalRouter", 1) + ","
	}
	repeatedStringForPhysicalRouterBackRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	s := strings.Join([]string{`&BGPRouter{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`BGPRouterParameters:` + strings.Replace(this.BGPRouterParameters.String(), "BgpRouterParams", "BgpRouterParams", 1) + `,`,
		`BGPRouterRefs:` + repeatedStringForBGPRouterRefs + `,`,
		`ControlNodeZoneRefs:` + repeatedStringForControlNodeZoneRefs + `,`,
		`SubClusterRefs:` + repeatedStringForSubClusterRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`BGPAsAServiceBackRefs:` + repeatedStringForBGPAsAServiceBackRefs + `,`,
		`BGPRouterBackRefs:` + repeatedStringForBGPRouterBackRefs + `,`,
		`GlobalSystemConfigBackRefs:` + repeatedStringForGlobalSystemConfigBackRefs + `,`,
		`PhysicalRouterBackRefs:` + repeatedStringForPhysicalRouterBackRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPRouterBGPRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BGPRouterBGPRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "BgpPeeringAttributes", "BgpPeeringAttributes", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPRouterControlNodeZoneRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BGPRouterControlNodeZoneRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPRouterSubClusterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BGPRouterSubClusterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPRouterTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BGPRouterTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPVPN) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*BGPVPNTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "BGPVPNTagRef", "BGPVPNTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForLogicalRouterBackRefs := "[]*LogicalRouter{"
	for _, f := range this.LogicalRouterBackRefs {
		repeatedStringForLogicalRouterBackRefs += strings.Replace(f.String(), "LogicalRouter", "LogicalRouter", 1) + ","
	}
	repeatedStringForLogicalRouterBackRefs += "}"
	repeatedStringForVirtualNetworkBackRefs := "[]*VirtualNetwork{"
	for _, f := range this.VirtualNetworkBackRefs {
		repeatedStringForVirtualNetworkBackRefs += strings.Replace(f.String(), "VirtualNetwork", "VirtualNetwork", 1) + ","
	}
	repeatedStringForVirtualNetworkBackRefs += "}"
	s := strings.Join([]string{`&BGPVPN{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`BGPVPNType:` + fmt.Sprintf("%v", this.BGPVPNType) + `,`,
		`ExportRouteTargetList:` + strings.Replace(this.ExportRouteTargetList.String(), "RouteTargetList", "RouteTargetList", 1) + `,`,
		`ImportRouteTargetList:` + strings.Replace(this.ImportRouteTargetList.String(), "RouteTargetList", "RouteTargetList", 1) + `,`,
		`RouteTargetList:` + strings.Replace(this.RouteTargetList.String(), "RouteTargetList", "RouteTargetList", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`LogicalRouterBackRefs:` + repeatedStringForLogicalRouterBackRefs + `,`,
		`VirtualNetworkBackRefs:` + repeatedStringForVirtualNetworkBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPVPNTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BGPVPNTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BridgeDomain) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*BridgeDomainTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "BridgeDomainTagRef", "BridgeDomainTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	s := strings.Join([]string{`&BridgeDomain{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`Isid:` + fmt.Sprintf("%v", this.Isid) + `,`,
		`MacAgingTime:` + fmt.Sprintf("%v", this.MacAgingTime) + `,`,
		`MacLearningEnabled:` + fmt.Sprintf("%v", this.MacLearningEnabled) + `,`,
		`MacLimitControl:` + strings.Replace(this.MacLimitControl.String(), "MACLimitControlType", "MACLimitControlType", 1) + `,`,
		`MacMoveControl:` + strings.Replace(this.MacMoveControl.String(), "MACMoveLimitControlType", "MACMoveLimitControlType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *BridgeDomainTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BridgeDomainTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Card) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*CardTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "CardTagRef", "CardTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForHardwareBackRefs := "[]*Hardware{"
	for _, f := range this.HardwareBackRefs {
		repeatedStringForHardwareBackRefs += strings.Replace(f.String(), "Hardware", "Hardware", 1) + ","
	}
	repeatedStringForHardwareBackRefs += "}"
	s := strings.Join([]string{`&Card{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`InterfaceMap:` + strings.Replace(this.InterfaceMap.String(), "InterfaceMapType", "InterfaceMapType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`HardwareBackRefs:` + repeatedStringForHardwareBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *CardTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CardTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CliConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*CliConfigTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "CliConfigTagRef", "CliConfigTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&CliConfig{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AcceptedCliConfig:` + fmt.Sprintf("%v", this.AcceptedCliConfig) + `,`,
		`CommitDiffList:` + strings.Replace(this.CommitDiffList.String(), "CliDiffListType", "CliDiffListType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *CliConfigTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CliConfigTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigDatabaseNode) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*ConfigDatabaseNodeTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ConfigDatabaseNodeTagRef", "ConfigDatabaseNodeTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&ConfigDatabaseNode{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ConfigDatabaseNodeIPAddress:` + fmt.Sprintf("%v", this.ConfigDatabaseNodeIPAddress) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigDatabaseNodeTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigDatabaseNodeTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigNode) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*ConfigNodeTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ConfigNodeTagRef", "ConfigNodeTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&ConfigNode{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ConfigNodeIPAddress:` + fmt.Sprintf("%v", this.ConfigNodeIPAddress) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigNodeTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigNodeTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigRoot) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*ConfigRootTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ConfigRootTagRef", "ConfigRootTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&ConfigRoot{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfigRootTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfigRootTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ControlNodeZone) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*ControlNodeZoneTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ControlNodeZoneTagRef", "ControlNodeZoneTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForBGPAsAServiceBackRefs := "[]*BGPAsAService{"
	for _, f := range this.BGPAsAServiceBackRefs {
		repeatedStringForBGPAsAServiceBackRefs += strings.Replace(f.String(), "BGPAsAService", "BGPAsAService", 1) + ","
	}
	repeatedStringForBGPAsAServiceBackRefs += "}"
	repeatedStringForBGPRouterBackRefs := "[]*BGPRouter{"
	for _, f := range this.BGPRouterBackRefs {
		repeatedStringForBGPRouterBackRefs += strings.Replace(f.String(), "BGPRouter", "BGPRouter", 1) + ","
	}
	repeatedStringForBGPRouterBackRefs += "}"
	s := strings.Join([]string{`&ControlNodeZone{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`BGPAsAServiceBackRefs:` + repeatedStringForBGPAsAServiceBackRefs + `,`,
		`BGPRouterBackRefs:` + repeatedStringForBGPRouterBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ControlNodeZoneTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ControlNodeZoneTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomerAttachment) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFloatingIPRefs := "[]*CustomerAttachmentFloatingIPRef{"
	for _, f := range this.FloatingIPRefs {
		repeatedStringForFloatingIPRefs += strings.Replace(f.String(), "CustomerAttachmentFloatingIPRef", "CustomerAttachmentFloatingIPRef", 1) + ","
	}
	repeatedStringForFloatingIPRefs += "}"
	repeatedStringForTagRefs := "[]*CustomerAttachmentTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "CustomerAttachmentTagRef", "CustomerAttachmentTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceRefs := "[]*CustomerAttachmentVirtualMachineInterfaceRef{"
	for _, f := range this.VirtualMachineInterfaceRefs {
		repeatedStringForVirtualMachineInterfaceRefs += strings.Replace(f.String(), "CustomerAttachmentVirtualMachineInterfaceRef", "CustomerAttachmentVirtualMachineInterfaceRef", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceRefs += "}"
	s := strings.Join([]string{`&CustomerAttachment{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AttachmentAddress:` + strings.Replace(this.AttachmentAddress.String(), "AttachmentAddressType", "AttachmentAddressType", 1) + `,`,
		`FloatingIPRefs:` + repeatedStringForFloatingIPRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceRefs:` + repeatedStringForVirtualMachineInterfaceRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomerAttachmentFloatingIPRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomerAttachmentFloatingIPRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomerAttachmentTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomerAttachmentTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CustomerAttachmentVirtualMachineInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CustomerAttachmentVirtualMachineInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataCenterInterconnect) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLogicalRouterRefs := "[]*DataCenterInterconnectLogicalRouterRef{"
	for _, f := range this.LogicalRouterRefs {
		repeatedStringForLogicalRouterRefs += strings.Replace(f.String(), "DataCenterInterconnectLogicalRouterRef", "DataCenterInterconnectLogicalRouterRef", 1) + ","
	}
	repeatedStringForLogicalRouterRefs += "}"
	repeatedStringForTagRefs := "[]*DataCenterInterconnectTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "DataCenterInterconnectTagRef", "DataCenterInterconnectTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualNetworkRefs := "[]*DataCenterInterconnectVirtualNetworkRef{"
	for _, f := range this.VirtualNetworkRefs {
		repeatedStringForVirtualNetworkRefs += strings.Replace(f.String(), "DataCenterInterconnectVirtualNetworkRef", "DataCenterInterconnectVirtualNetworkRef", 1) + ","
	}
	repeatedStringForVirtualNetworkRefs += "}"
	s := strings.Join([]string{`&DataCenterInterconnect{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`DataCenterInterconnectBGPAddressFamilies:` + strings.Replace(this.DataCenterInterconnectBGPAddressFamilies.String(), "AddressFamilies", "AddressFamilies", 1) + `,`,
		`DataCenterInterconnectBGPHoldTime:` + fmt.Sprintf("%v", this.DataCenterInterconnectBGPHoldTime) + `,`,
		`DataCenterInterconnectConfiguredRouteTargetList:` + strings.Replace(this.DataCenterInterconnectConfiguredRouteTargetList.String(), "RouteTargetList", "RouteTargetList", 1) + `,`,
		`DataCenterInterconnectMode:` + fmt.Sprintf("%v", this.DataCenterInterconnectMode) + `,`,
		`LogicalRouterRefs:` + repeatedStringForLogicalRouterRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualNetworkRefs:` + repeatedStringForVirtualNetworkRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataCenterInterconnectLogicalRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataCenterInterconnectLogicalRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataCenterInterconnectTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataCenterInterconnectTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataCenterInterconnectVirtualNetworkRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataCenterInterconnectVirtualNetworkRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DatabaseNode) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*DatabaseNodeTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "DatabaseNodeTagRef", "DatabaseNodeTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&DatabaseNode{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`DatabaseNodeIPAddress:` + fmt.Sprintf("%v", this.DatabaseNodeIPAddress) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *DatabaseNodeTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DatabaseNodeTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceChassis) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*DeviceChassisTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "DeviceChassisTagRef", "DeviceChassisTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForPhysicalRouterBackRefs := "[]*PhysicalRouter{"
	for _, f := range this.PhysicalRouterBackRefs {
		repeatedStringForPhysicalRouterBackRefs += strings.Replace(f.String(), "PhysicalRouter", "PhysicalRouter", 1) + ","
	}
	repeatedStringForPhysicalRouterBackRefs += "}"
	s := strings.Join([]string{`&DeviceChassis{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`DeviceChassisType:` + fmt.Sprintf("%v", this.DeviceChassisType) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`PhysicalRouterBackRefs:` + repeatedStringForPhysicalRouterBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceChassisTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceChassisTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceFunctionalGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPhysicalRoleRefs := "[]*DeviceFunctionalGroupPhysicalRoleRef{"
	for _, f := range this.PhysicalRoleRefs {
		repeatedStringForPhysicalRoleRefs += strings.Replace(f.String(), "DeviceFunctionalGroupPhysicalRoleRef", "DeviceFunctionalGroupPhysicalRoleRef", 1) + ","
	}
	repeatedStringForPhysicalRoleRefs += "}"
	repeatedStringForTagRefs := "[]*DeviceFunctionalGroupTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "DeviceFunctionalGroupTagRef", "DeviceFunctionalGroupTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForPhysicalRouterBackRefs := "[]*PhysicalRouter{"
	for _, f := range this.PhysicalRouterBackRefs {
		repeatedStringForPhysicalRouterBackRefs += strings.Replace(f.String(), "PhysicalRouter", "PhysicalRouter", 1) + ","
	}
	repeatedStringForPhysicalRouterBackRefs += "}"
	s := strings.Join([]string{`&DeviceFunctionalGroup{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`DeviceFunctionalGroupDescription:` + fmt.Sprintf("%v", this.DeviceFunctionalGroupDescription) + `,`,
		`DeviceFunctionalGroupOsVersion:` + fmt.Sprintf("%v", this.DeviceFunctionalGroupOsVersion) + `,`,
		`DeviceFunctionalGroupRoutingBridgingRoles:` + strings.Replace(this.DeviceFunctionalGroupRoutingBridgingRoles.String(), "RoutingBridgingRolesType", "RoutingBridgingRolesType", 1) + `,`,
		`PhysicalRoleRefs:` + repeatedStringForPhysicalRoleRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`PhysicalRouterBackRefs:` + repeatedStringForPhysicalRouterBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceFunctionalGroupPhysicalRoleRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceFunctionalGroupPhysicalRoleRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceFunctionalGroupTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceFunctionalGroupTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceImage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHardwareRefs := "[]*DeviceImageHardwareRef{"
	for _, f := range this.HardwareRefs {
		repeatedStringForHardwareRefs += strings.Replace(f.String(), "DeviceImageHardwareRef", "DeviceImageHardwareRef", 1) + ","
	}
	repeatedStringForHardwareRefs += "}"
	repeatedStringForTagRefs := "[]*DeviceImageTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "DeviceImageTagRef", "DeviceImageTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForPhysicalRouterBackRefs := "[]*PhysicalRouter{"
	for _, f := range this.PhysicalRouterBackRefs {
		repeatedStringForPhysicalRouterBackRefs += strings.Replace(f.String(), "PhysicalRouter", "PhysicalRouter", 1) + ","
	}
	repeatedStringForPhysicalRouterBackRefs += "}"
	s := strings.Join([]string{`&DeviceImage{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`DeviceImageDeviceFamily:` + fmt.Sprintf("%v", this.DeviceImageDeviceFamily) + `,`,
		`DeviceImageFileURI:` + fmt.Sprintf("%v", this.DeviceImageFileURI) + `,`,
		`DeviceImageMD5:` + fmt.Sprintf("%v", this.DeviceImageMD5) + `,`,
		`DeviceImageOsVersion:` + fmt.Sprintf("%v", this.DeviceImageOsVersion) + `,`,
		`DeviceImageSha1:` + fmt.Sprintf("%v", this.DeviceImageSha1) + `,`,
		`DeviceImageSize:` + fmt.Sprintf("%v", this.DeviceImageSize) + `,`,
		`DeviceImageSupportedPlatforms:` + strings.Replace(this.DeviceImageSupportedPlatforms.String(), "DevicePlatformListType", "DevicePlatformListType", 1) + `,`,
		`DeviceImageVendorName:` + fmt.Sprintf("%v", this.DeviceImageVendorName) + `,`,
		`HardwareRefs:` + repeatedStringForHardwareRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`PhysicalRouterBackRefs:` + repeatedStringForPhysicalRouterBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceImageHardwareRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceImageHardwareRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceImageTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceImageTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DevicemgrNode) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*DevicemgrNodeTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "DevicemgrNodeTagRef", "DevicemgrNodeTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&DevicemgrNode{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`DevicemgrNodeIPAddress:` + fmt.Sprintf("%v", this.DevicemgrNodeIPAddress) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *DevicemgrNodeTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DevicemgrNodeTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiscoveryServiceAssignment) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*DiscoveryServiceAssignmentTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "DiscoveryServiceAssignmentTagRef", "DiscoveryServiceAssignmentTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForDsaRules := "[]*DsaRule{"
	for _, f := range this.DsaRules {
		repeatedStringForDsaRules += strings.Replace(f.String(), "DsaRule", "DsaRule", 1) + ","
	}
	repeatedStringForDsaRules += "}"
	s := strings.Join([]string{`&DiscoveryServiceAssignment{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`DsaRules:` + repeatedStringForDsaRules + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiscoveryServiceAssignmentTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiscoveryServiceAssignmentTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Domain) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*DomainTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "DomainTagRef", "DomainTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForAPIAccessLists := "[]*APIAccessList{"
	for _, f := range this.APIAccessLists {
		repeatedStringForAPIAccessLists += strings.Replace(f.String(), "APIAccessList", "APIAccessList", 1) + ","
	}
	repeatedStringForAPIAccessLists += "}"
	repeatedStringForNamespaces := "[]*Namespace{"
	for _, f := range this.Namespaces {
		repeatedStringForNamespaces += strings.Replace(f.String(), "Namespace", "Namespace", 1) + ","
	}
	repeatedStringForNamespaces += "}"
	repeatedStringForProjects := "[]*Project{"
	for _, f := range this.Projects {
		repeatedStringForProjects += strings.Replace(f.String(), "Project", "Project", 1) + ","
	}
	repeatedStringForProjects += "}"
	repeatedStringForServiceTemplates := "[]*ServiceTemplate{"
	for _, f := range this.ServiceTemplates {
		repeatedStringForServiceTemplates += strings.Replace(f.String(), "ServiceTemplate", "ServiceTemplate", 1) + ","
	}
	repeatedStringForServiceTemplates += "}"
	repeatedStringForVirtualDNSs := "[]*VirtualDNS{"
	for _, f := range this.VirtualDNSs {
		repeatedStringForVirtualDNSs += strings.Replace(f.String(), "VirtualDNS", "VirtualDNS", 1) + ","
	}
	repeatedStringForVirtualDNSs += "}"
	s := strings.Join([]string{`&Domain{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`DomainLimits:` + strings.Replace(this.DomainLimits.String(), "DomainLimitsType", "DomainLimitsType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`APIAccessLists:` + repeatedStringForAPIAccessLists + `,`,
		`Namespaces:` + repeatedStringForNamespaces + `,`,
		`Projects:` + repeatedStringForProjects + `,`,
		`ServiceTemplates:` + repeatedStringForServiceTemplates + `,`,
		`VirtualDNSs:` + repeatedStringForVirtualDNSs + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DsaRule) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*DsaRuleTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "DsaRuleTagRef", "DsaRuleTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&DsaRule{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`DsaRuleEntry:` + strings.Replace(this.DsaRuleEntry.String(), "DiscoveryServiceAssignmentType", "DiscoveryServiceAssignmentType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *DsaRuleTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DsaRuleTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *E2ServiceProvider) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPeeringPolicyRefs := "[]*E2ServiceProviderPeeringPolicyRef{"
	for _, f := range this.PeeringPolicyRefs {
		repeatedStringForPeeringPolicyRefs += strings.Replace(f.String(), "E2ServiceProviderPeeringPolicyRef", "E2ServiceProviderPeeringPolicyRef", 1) + ","
	}
	repeatedStringForPeeringPolicyRefs += "}"
	repeatedStringForPhysicalRouterRefs := "[]*E2ServiceProviderPhysicalRouterRef{"
	for _, f := range this.PhysicalRouterRefs {
		repeatedStringForPhysicalRouterRefs += strings.Replace(f.String(), "E2ServiceProviderPhysicalRouterRef", "E2ServiceProviderPhysicalRouterRef", 1) + ","
	}
	repeatedStringForPhysicalRouterRefs += "}"
	repeatedStringForTagRefs := "[]*E2ServiceProviderTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "E2ServiceProviderTagRef", "E2ServiceProviderTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&E2ServiceProvider{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`E2ServiceProviderPromiscuous:` + fmt.Sprintf("%v", this.E2ServiceProviderPromiscuous) + `,`,
		`PeeringPolicyRefs:` + repeatedStringForPeeringPolicyRefs + `,`,
		`PhysicalRouterRefs:` + repeatedStringForPhysicalRouterRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *E2ServiceProviderPeeringPolicyRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&E2ServiceProviderPeeringPolicyRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *E2ServiceProviderPhysicalRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&E2ServiceProviderPhysicalRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *E2ServiceProviderTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&E2ServiceProviderTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FabricNamespace) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*FabricNamespaceTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "FabricNamespaceTagRef", "FabricNamespaceTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&FabricNamespace{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`FabricNamespaceType:` + fmt.Sprintf("%v", this.FabricNamespaceType) + `,`,
		`FabricNamespaceValue:` + strings.Replace(this.FabricNamespaceValue.String(), "NamespaceValue", "NamespaceValue", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FabricNamespaceTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FabricNamespaceTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Fabric) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIntentMapRefs := "[]*FabricIntentMapRef{"
	for _, f := range this.IntentMapRefs {
		repeatedStringForIntentMapRefs += strings.Replace(f.String(), "FabricIntentMapRef", "FabricIntentMapRef", 1) + ","
	}
	repeatedStringForIntentMapRefs += "}"
	repeatedStringForNodeProfileRefs := "[]*FabricNodeProfileRef{"
	for _, f := range this.NodeProfileRefs {
		repeatedStringForNodeProfileRefs += strings.Replace(f.String(), "FabricNodeProfileRef", "FabricNodeProfileRef", 1) + ","
	}
	repeatedStringForNodeProfileRefs += "}"
	repeatedStringForTagRefs := "[]*FabricTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "FabricTagRef", "FabricTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualNetworkRefs := "[]*FabricVirtualNetworkRef{"
	for _, f := range this.VirtualNetworkRefs {
		repeatedStringForVirtualNetworkRefs += strings.Replace(f.String(), "FabricVirtualNetworkRef", "FabricVirtualNetworkRef", 1) + ","
	}
	repeatedStringForVirtualNetworkRefs += "}"
	repeatedStringForPhysicalRouterBackRefs := "[]*PhysicalRouter{"
	for _, f := range this.PhysicalRouterBackRefs {
		repeatedStringForPhysicalRouterBackRefs += strings.Replace(f.String(), "PhysicalRouter", "PhysicalRouter", 1) + ","
	}
	repeatedStringForPhysicalRouterBackRefs += "}"
	repeatedStringForFabricNamespaces := "[]*FabricNamespace{"
	for _, f := range this.FabricNamespaces {
		repeatedStringForFabricNamespaces += strings.Replace(f.String(), "FabricNamespace", "FabricNamespace", 1) + ","
	}
	repeatedStringForFabricNamespaces += "}"
	repeatedStringForVirtualPortGroups := "[]*VirtualPortGroup{"
	for _, f := range this.VirtualPortGroups {
		repeatedStringForVirtualPortGroups += strings.Replace(f.String(), "VirtualPortGroup", "VirtualPortGroup", 1) + ","
	}
	repeatedStringForVirtualPortGroups += "}"
	s := strings.Join([]string{`&Fabric{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`FabricCredentials:` + strings.Replace(this.FabricCredentials.String(), "DeviceCredentialList", "DeviceCredentialList", 1) + `,`,
		`FabricEnterpriseStyle:` + fmt.Sprintf("%v", this.FabricEnterpriseStyle) + `,`,
		`FabricOsVersion:` + fmt.Sprintf("%v", this.FabricOsVersion) + `,`,
		`FabricZTP:` + fmt.Sprintf("%v", this.FabricZTP) + `,`,
		`IntentMapRefs:` + repeatedStringForIntentMapRefs + `,`,
		`NodeProfileRefs:` + repeatedStringForNodeProfileRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualNetworkRefs:` + repeatedStringForVirtualNetworkRefs + `,`,
		`PhysicalRouterBackRefs:` + repeatedStringForPhysicalRouterBackRefs + `,`,
		`FabricNamespaces:` + repeatedStringForFabricNamespaces + `,`,
		`VirtualPortGroups:` + repeatedStringForVirtualPortGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *FabricIntentMapRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FabricIntentMapRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FabricNodeProfileRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FabricNodeProfileRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "SerialNumListType", "SerialNumListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FabricTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FabricTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FabricVirtualNetworkRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FabricVirtualNetworkRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "FabricNetworkTag", "FabricNetworkTag", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*FeatureConfigTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "FeatureConfigTagRef", "FeatureConfigTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&FeatureConfig{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`FeatureConfigAdditionalParams:` + strings.Replace(this.FeatureConfigAdditionalParams.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`FeatureConfigVendorConfig:` + strings.Replace(this.FeatureConfigVendorConfig.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureConfigTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeatureConfigTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureFlag) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*FeatureFlagTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "FeatureFlagTagRef", "FeatureFlagTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&FeatureFlag{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`EnableFeature:` + fmt.Sprintf("%v", this.EnableFeature) + `,`,
		`FeatureDescription:` + fmt.Sprintf("%v", this.FeatureDescription) + `,`,
		`FeatureFlagVersion:` + fmt.Sprintf("%v", this.FeatureFlagVersion) + `,`,
		`FeatureID:` + fmt.Sprintf("%v", this.FeatureID) + `,`,
		`FeatureRelease:` + fmt.Sprintf("%v", this.FeatureRelease) + `,`,
		`FeatureState:` + fmt.Sprintf("%v", this.FeatureState) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureFlagTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeatureFlagTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Feature) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFeatureRefs := "[]*FeatureFeatureRef{"
	for _, f := range this.FeatureRefs {
		repeatedStringForFeatureRefs += strings.Replace(f.String(), "FeatureFeatureRef", "FeatureFeatureRef", 1) + ","
	}
	repeatedStringForFeatureRefs += "}"
	repeatedStringForTagRefs := "[]*FeatureTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "FeatureTagRef", "FeatureTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForFeatureBackRefs := "[]*Feature{"
	for _, f := range this.FeatureBackRefs {
		repeatedStringForFeatureBackRefs += strings.Replace(f.String(), "Feature", "Feature", 1) + ","
	}
	repeatedStringForFeatureBackRefs += "}"
	repeatedStringForRoleDefinitionBackRefs := "[]*RoleDefinition{"
	for _, f := range this.RoleDefinitionBackRefs {
		repeatedStringForRoleDefinitionBackRefs += strings.Replace(f.String(), "RoleDefinition", "RoleDefinition", 1) + ","
	}
	repeatedStringForRoleDefinitionBackRefs += "}"
	s := strings.Join([]string{`&Feature{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`FeatureRefs:` + repeatedStringForFeatureRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`FeatureBackRefs:` + repeatedStringForFeatureBackRefs + `,`,
		`RoleDefinitionBackRefs:` + repeatedStringForRoleDefinitionBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureFeatureRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeatureFeatureRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeatureTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeatureTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallPolicy) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFirewallRuleRefs := "[]*FirewallPolicyFirewallRuleRef{"
	for _, f := range this.FirewallRuleRefs {
		repeatedStringForFirewallRuleRefs += strings.Replace(f.String(), "FirewallPolicyFirewallRuleRef", "FirewallPolicyFirewallRuleRef", 1) + ","
	}
	repeatedStringForFirewallRuleRefs += "}"
	repeatedStringForSecurityLoggingObjectRefs := "[]*FirewallPolicySecurityLoggingObjectRef{"
	for _, f := range this.SecurityLoggingObjectRefs {
		repeatedStringForSecurityLoggingObjectRefs += strings.Replace(f.String(), "FirewallPolicySecurityLoggingObjectRef", "FirewallPolicySecurityLoggingObjectRef", 1) + ","
	}
	repeatedStringForSecurityLoggingObjectRefs += "}"
	repeatedStringForTagRefs := "[]*FirewallPolicyTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "FirewallPolicyTagRef", "FirewallPolicyTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForApplicationPolicySetBackRefs := "[]*ApplicationPolicySet{"
	for _, f := range this.ApplicationPolicySetBackRefs {
		repeatedStringForApplicationPolicySetBackRefs += strings.Replace(f.String(), "ApplicationPolicySet", "ApplicationPolicySet", 1) + ","
	}
	repeatedStringForApplicationPolicySetBackRefs += "}"
	s := strings.Join([]string{`&FirewallPolicy{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`DraftModeState:` + fmt.Sprintf("%v", this.DraftModeState) + `,`,
		`FirewallRuleRefs:` + repeatedStringForFirewallRuleRefs + `,`,
		`SecurityLoggingObjectRefs:` + repeatedStringForSecurityLoggingObjectRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`ApplicationPolicySetBackRefs:` + repeatedStringForApplicationPolicySetBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallPolicyFirewallRuleRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirewallPolicyFirewallRuleRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "FirewallSequence", "FirewallSequence", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallPolicySecurityLoggingObjectRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirewallPolicySecurityLoggingObjectRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "SloRateType", "SloRateType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallPolicyTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirewallPolicyTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallRule) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAddressGroupRefs := "[]*FirewallRuleAddressGroupRef{"
	for _, f := range this.AddressGroupRefs {
		repeatedStringForAddressGroupRefs += strings.Replace(f.String(), "FirewallRuleAddressGroupRef", "FirewallRuleAddressGroupRef", 1) + ","
	}
	repeatedStringForAddressGroupRefs += "}"
	repeatedStringForSecurityLoggingObjectRefs := "[]*FirewallRuleSecurityLoggingObjectRef{"
	for _, f := range this.SecurityLoggingObjectRefs {
		repeatedStringForSecurityLoggingObjectRefs += strings.Replace(f.String(), "FirewallRuleSecurityLoggingObjectRef", "FirewallRuleSecurityLoggingObjectRef", 1) + ","
	}
	repeatedStringForSecurityLoggingObjectRefs += "}"
	repeatedStringForServiceGroupRefs := "[]*FirewallRuleServiceGroupRef{"
	for _, f := range this.ServiceGroupRefs {
		repeatedStringForServiceGroupRefs += strings.Replace(f.String(), "FirewallRuleServiceGroupRef", "FirewallRuleServiceGroupRef", 1) + ","
	}
	repeatedStringForServiceGroupRefs += "}"
	repeatedStringForTagRefs := "[]*FirewallRuleTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "FirewallRuleTagRef", "FirewallRuleTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualNetworkRefs := "[]*FirewallRuleVirtualNetworkRef{"
	for _, f := range this.VirtualNetworkRefs {
		repeatedStringForVirtualNetworkRefs += strings.Replace(f.String(), "FirewallRuleVirtualNetworkRef", "FirewallRuleVirtualNetworkRef", 1) + ","
	}
	repeatedStringForVirtualNetworkRefs += "}"
	repeatedStringForFirewallPolicyBackRefs := "[]*FirewallPolicy{"
	for _, f := range this.FirewallPolicyBackRefs {
		repeatedStringForFirewallPolicyBackRefs += strings.Replace(f.String(), "FirewallPolicy", "FirewallPolicy", 1) + ","
	}
	repeatedStringForFirewallPolicyBackRefs += "}"
	s := strings.Join([]string{`&FirewallRule{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ActionList:` + strings.Replace(this.ActionList.String(), "ActionListType", "ActionListType", 1) + `,`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`DraftModeState:` + fmt.Sprintf("%v", this.DraftModeState) + `,`,
		`Endpoint1:` + strings.Replace(this.Endpoint1.String(), "FirewallRuleEndpointType", "FirewallRuleEndpointType", 1) + `,`,
		`Endpoint2:` + strings.Replace(this.Endpoint2.String(), "FirewallRuleEndpointType", "FirewallRuleEndpointType", 1) + `,`,
		`MatchTagTypes:` + strings.Replace(this.MatchTagTypes.String(), "FirewallRuleMatchTagsTypeIdList", "FirewallRuleMatchTagsTypeIdList", 1) + `,`,
		`MatchTags:` + strings.Replace(this.MatchTags.String(), "FirewallRuleMatchTagsType", "FirewallRuleMatchTagsType", 1) + `,`,
		`Service:` + strings.Replace(this.Service.String(), "FirewallServiceType", "FirewallServiceType", 1) + `,`,
		`AddressGroupRefs:` + repeatedStringForAddressGroupRefs + `,`,
		`SecurityLoggingObjectRefs:` + repeatedStringForSecurityLoggingObjectRefs + `,`,
		`ServiceGroupRefs:` + repeatedStringForServiceGroupRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualNetworkRefs:` + repeatedStringForVirtualNetworkRefs + `,`,
		`FirewallPolicyBackRefs:` + repeatedStringForFirewallPolicyBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallRuleAddressGroupRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirewallRuleAddressGroupRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallRuleSecurityLoggingObjectRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirewallRuleSecurityLoggingObjectRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "SloRateType", "SloRateType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallRuleServiceGroupRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirewallRuleServiceGroupRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallRuleTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirewallRuleTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallRuleVirtualNetworkRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirewallRuleVirtualNetworkRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FloatingIPPool) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*FloatingIPPoolTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "FloatingIPPoolTagRef", "FloatingIPPoolTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForProjectBackRefs := "[]*Project{"
	for _, f := range this.ProjectBackRefs {
		repeatedStringForProjectBackRefs += strings.Replace(f.String(), "Project", "Project", 1) + ","
	}
	repeatedStringForProjectBackRefs += "}"
	repeatedStringForFloatingIPs := "[]*FloatingIP{"
	for _, f := range this.FloatingIPs {
		repeatedStringForFloatingIPs += strings.Replace(f.String(), "FloatingIP", "FloatingIP", 1) + ","
	}
	repeatedStringForFloatingIPs += "}"
	s := strings.Join([]string{`&FloatingIPPool{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`FloatingIPPoolSubnets:` + strings.Replace(this.FloatingIPPoolSubnets.String(), "FloatingIpPoolSubnetType", "FloatingIpPoolSubnetType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`ProjectBackRefs:` + repeatedStringForProjectBackRefs + `,`,
		`FloatingIPs:` + repeatedStringForFloatingIPs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FloatingIPPoolTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FloatingIPPoolTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FloatingIP) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProjectRefs := "[]*FloatingIPProjectRef{"
	for _, f := range this.ProjectRefs {
		repeatedStringForProjectRefs += strings.Replace(f.String(), "FloatingIPProjectRef", "FloatingIPProjectRef", 1) + ","
	}
	repeatedStringForProjectRefs += "}"
	repeatedStringForTagRefs := "[]*FloatingIPTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "FloatingIPTagRef", "FloatingIPTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceRefs := "[]*FloatingIPVirtualMachineInterfaceRef{"
	for _, f := range this.VirtualMachineInterfaceRefs {
		repeatedStringForVirtualMachineInterfaceRefs += strings.Replace(f.String(), "FloatingIPVirtualMachineInterfaceRef", "FloatingIPVirtualMachineInterfaceRef", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceRefs += "}"
	repeatedStringForCustomerAttachmentBackRefs := "[]*CustomerAttachment{"
	for _, f := range this.CustomerAttachmentBackRefs {
		repeatedStringForCustomerAttachmentBackRefs += strings.Replace(f.String(), "CustomerAttachment", "CustomerAttachment", 1) + ","
	}
	repeatedStringForCustomerAttachmentBackRefs += "}"
	s := strings.Join([]string{`&FloatingIP{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`FloatingIPAddress:` + fmt.Sprintf("%v", this.FloatingIPAddress) + `,`,
		`FloatingIPAddressFamily:` + fmt.Sprintf("%v", this.FloatingIPAddressFamily) + `,`,
		`FloatingIPFixedIPAddress:` + fmt.Sprintf("%v", this.FloatingIPFixedIPAddress) + `,`,
		`FloatingIPIsVirtualIP:` + fmt.Sprintf("%v", this.FloatingIPIsVirtualIP) + `,`,
		`FloatingIPPortMappings:` + strings.Replace(this.FloatingIPPortMappings.String(), "PortMappings", "PortMappings", 1) + `,`,
		`FloatingIPPortMappingsEnable:` + fmt.Sprintf("%v", this.FloatingIPPortMappingsEnable) + `,`,
		`FloatingIPTrafficDirection:` + fmt.Sprintf("%v", this.FloatingIPTrafficDirection) + `,`,
		`ProjectRefs:` + repeatedStringForProjectRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceRefs:` + repeatedStringForVirtualMachineInterfaceRefs + `,`,
		`CustomerAttachmentBackRefs:` + repeatedStringForCustomerAttachmentBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FloatingIPProjectRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FloatingIPProjectRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FloatingIPTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FloatingIPTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FloatingIPVirtualMachineInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FloatingIPVirtualMachineInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowNode) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*FlowNodeTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "FlowNodeTagRef", "FlowNodeTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualNetworkRefs := "[]*FlowNodeVirtualNetworkRef{"
	for _, f := range this.VirtualNetworkRefs {
		repeatedStringForVirtualNetworkRefs += strings.Replace(f.String(), "FlowNodeVirtualNetworkRef", "FlowNodeVirtualNetworkRef", 1) + ","
	}
	repeatedStringForVirtualNetworkRefs += "}"
	repeatedStringForInstanceIPBackRefs := "[]*InstanceIP{"
	for _, f := range this.InstanceIPBackRefs {
		repeatedStringForInstanceIPBackRefs += strings.Replace(f.String(), "InstanceIP", "InstanceIP", 1) + ","
	}
	repeatedStringForInstanceIPBackRefs += "}"
	s := strings.Join([]string{`&FlowNode{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`FlowNodeInbandInterface:` + fmt.Sprintf("%v", this.FlowNodeInbandInterface) + `,`,
		`FlowNodeIPAddress:` + fmt.Sprintf("%v", this.FlowNodeIPAddress) + `,`,
		`FlowNodeLoadBalancerIP:` + fmt.Sprintf("%v", this.FlowNodeLoadBalancerIP) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualNetworkRefs:` + repeatedStringForVirtualNetworkRefs + `,`,
		`InstanceIPBackRefs:` + repeatedStringForInstanceIPBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowNodeTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowNodeTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowNodeVirtualNetworkRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowNodeVirtualNetworkRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardingClass) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQosQueueRefs := "[]*ForwardingClassQosQueueRef{"
	for _, f := range this.QosQueueRefs {
		repeatedStringForQosQueueRefs += strings.Replace(f.String(), "ForwardingClassQosQueueRef", "ForwardingClassQosQueueRef", 1) + ","
	}
	repeatedStringForQosQueueRefs += "}"
	repeatedStringForTagRefs := "[]*ForwardingClassTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ForwardingClassTagRef", "ForwardingClassTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&ForwardingClass{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ForwardingClassDSCP:` + fmt.Sprintf("%v", this.ForwardingClassDSCP) + `,`,
		`ForwardingClassID:` + fmt.Sprintf("%v", this.ForwardingClassID) + `,`,
		`ForwardingClassMPLSExp:` + fmt.Sprintf("%v", this.ForwardingClassMPLSExp) + `,`,
		`ForwardingClassVlanPriority:` + fmt.Sprintf("%v", this.ForwardingClassVlanPriority) + `,`,
		`QosQueueRefs:` + repeatedStringForQosQueueRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardingClassQosQueueRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardingClassQosQueueRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ForwardingClassTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ForwardingClassTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalAnalyticsConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*GlobalAnalyticsConfigTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "GlobalAnalyticsConfigTagRef", "GlobalAnalyticsConfigTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForStructuredSyslogConfigs := "[]*StructuredSyslogConfig{"
	for _, f := range this.StructuredSyslogConfigs {
		repeatedStringForStructuredSyslogConfigs += strings.Replace(f.String(), "StructuredSyslogConfig", "StructuredSyslogConfig", 1) + ","
	}
	repeatedStringForStructuredSyslogConfigs += "}"
	s := strings.Join([]string{`&GlobalAnalyticsConfig{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`StructuredSyslogConfigs:` + repeatedStringForStructuredSyslogConfigs + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalAnalyticsConfigTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalAnalyticsConfigTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalQosConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*GlobalQosConfigTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "GlobalQosConfigTagRef", "GlobalQosConfigTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForForwardingClasss := "[]*ForwardingClass{"
	for _, f := range this.ForwardingClasss {
		repeatedStringForForwardingClasss += strings.Replace(f.String(), "ForwardingClass", "ForwardingClass", 1) + ","
	}
	repeatedStringForForwardingClasss += "}"
	repeatedStringForQosConfigs := "[]*QosConfig{"
	for _, f := range this.QosConfigs {
		repeatedStringForQosConfigs += strings.Replace(f.String(), "QosConfig", "QosConfig", 1) + ","
	}
	repeatedStringForQosConfigs += "}"
	repeatedStringForQosQueues := "[]*QosQueue{"
	for _, f := range this.QosQueues {
		repeatedStringForQosQueues += strings.Replace(f.String(), "QosQueue", "QosQueue", 1) + ","
	}
	repeatedStringForQosQueues += "}"
	s := strings.Join([]string{`&GlobalQosConfig{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ControlTrafficDSCP:` + strings.Replace(this.ControlTrafficDSCP.String(), "ControlTrafficDscpType", "ControlTrafficDscpType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`ForwardingClasss:` + repeatedStringForForwardingClasss + `,`,
		`QosConfigs:` + repeatedStringForQosConfigs + `,`,
		`QosQueues:` + repeatedStringForQosQueues + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalQosConfigTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalQosConfigTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSystemConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBGPRouterRefs := "[]*GlobalSystemConfigBGPRouterRef{"
	for _, f := range this.BGPRouterRefs {
		repeatedStringForBGPRouterRefs += strings.Replace(f.String(), "GlobalSystemConfigBGPRouterRef", "GlobalSystemConfigBGPRouterRef", 1) + ","
	}
	repeatedStringForBGPRouterRefs += "}"
	repeatedStringForTagRefs := "[]*GlobalSystemConfigTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "GlobalSystemConfigTagRef", "GlobalSystemConfigTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForQosConfigBackRefs := "[]*QosConfig{"
	for _, f := range this.QosConfigBackRefs {
		repeatedStringForQosConfigBackRefs += strings.Replace(f.String(), "QosConfig", "QosConfig", 1) + ","
	}
	repeatedStringForQosConfigBackRefs += "}"
	repeatedStringForAlarms := "[]*Alarm{"
	for _, f := range this.Alarms {
		repeatedStringForAlarms += strings.Replace(f.String(), "Alarm", "Alarm", 1) + ","
	}
	repeatedStringForAlarms += "}"
	repeatedStringForAnalyticsAlarmNodes := "[]*AnalyticsAlarmNode{"
	for _, f := range this.AnalyticsAlarmNodes {
		repeatedStringForAnalyticsAlarmNodes += strings.Replace(f.String(), "AnalyticsAlarmNode", "AnalyticsAlarmNode", 1) + ","
	}
	repeatedStringForAnalyticsAlarmNodes += "}"
	repeatedStringForAnalyticsNodes := "[]*AnalyticsNode{"
	for _, f := range this.AnalyticsNodes {
		repeatedStringForAnalyticsNodes += strings.Replace(f.String(), "AnalyticsNode", "AnalyticsNode", 1) + ","
	}
	repeatedStringForAnalyticsNodes += "}"
	repeatedStringForAnalyticsSNMPNodes := "[]*AnalyticsSNMPNode{"
	for _, f := range this.AnalyticsSNMPNodes {
		repeatedStringForAnalyticsSNMPNodes += strings.Replace(f.String(), "AnalyticsSNMPNode", "AnalyticsSNMPNode", 1) + ","
	}
	repeatedStringForAnalyticsSNMPNodes += "}"
	repeatedStringForAPIAccessLists := "[]*APIAccessList{"
	for _, f := range this.APIAccessLists {
		repeatedStringForAPIAccessLists += strings.Replace(f.String(), "APIAccessList", "APIAccessList", 1) + ","
	}
	repeatedStringForAPIAccessLists += "}"
	repeatedStringForConfigDatabaseNodes := "[]*ConfigDatabaseNode{"
	for _, f := range this.ConfigDatabaseNodes {
		repeatedStringForConfigDatabaseNodes += strings.Replace(f.String(), "ConfigDatabaseNode", "ConfigDatabaseNode", 1) + ","
	}
	repeatedStringForConfigDatabaseNodes += "}"
	repeatedStringForConfigNodes := "[]*ConfigNode{"
	for _, f := range this.ConfigNodes {
		repeatedStringForConfigNodes += strings.Replace(f.String(), "ConfigNode", "ConfigNode", 1) + ","
	}
	repeatedStringForConfigNodes += "}"
	repeatedStringForControlNodeZones := "[]*ControlNodeZone{"
	for _, f := range this.ControlNodeZones {
		repeatedStringForControlNodeZones += strings.Replace(f.String(), "ControlNodeZone", "ControlNodeZone", 1) + ","
	}
	repeatedStringForControlNodeZones += "}"
	repeatedStringForDataCenterInterconnects := "[]*DataCenterInterconnect{"
	for _, f := range this.DataCenterInterconnects {
		repeatedStringForDataCenterInterconnects += strings.Replace(f.String(), "DataCenterInterconnect", "DataCenterInterconnect", 1) + ","
	}
	repeatedStringForDataCenterInterconnects += "}"
	repeatedStringForDatabaseNodes := "[]*DatabaseNode{"
	for _, f := range this.DatabaseNodes {
		repeatedStringForDatabaseNodes += strings.Replace(f.String(), "DatabaseNode", "DatabaseNode", 1) + ","
	}
	repeatedStringForDatabaseNodes += "}"
	repeatedStringForDeviceImages := "[]*DeviceImage{"
	for _, f := range this.DeviceImages {
		repeatedStringForDeviceImages += strings.Replace(f.String(), "DeviceImage", "DeviceImage", 1) + ","
	}
	repeatedStringForDeviceImages += "}"
	repeatedStringForDevicemgrNodes := "[]*DevicemgrNode{"
	for _, f := range this.DevicemgrNodes {
		repeatedStringForDevicemgrNodes += strings.Replace(f.String(), "DevicemgrNode", "DevicemgrNode", 1) + ","
	}
	repeatedStringForDevicemgrNodes += "}"
	repeatedStringForFabrics := "[]*Fabric{"
	for _, f := range this.Fabrics {
		repeatedStringForFabrics += strings.Replace(f.String(), "Fabric", "Fabric", 1) + ","
	}
	repeatedStringForFabrics += "}"
	repeatedStringForFeatures := "[]*Feature{"
	for _, f := range this.Features {
		repeatedStringForFeatures += strings.Replace(f.String(), "Feature", "Feature", 1) + ","
	}
	repeatedStringForFeatures += "}"
	repeatedStringForFeatureFlags := "[]*FeatureFlag{"
	for _, f := range this.FeatureFlags {
		repeatedStringForFeatureFlags += strings.Replace(f.String(), "FeatureFlag", "FeatureFlag", 1) + ","
	}
	repeatedStringForFeatureFlags += "}"
	repeatedStringForFlowNodes := "[]*FlowNode{"
	for _, f := range this.FlowNodes {
		repeatedStringForFlowNodes += strings.Replace(f.String(), "FlowNode", "FlowNode", 1) + ","
	}
	repeatedStringForFlowNodes += "}"
	repeatedStringForGlobalAnalyticsConfigs := "[]*GlobalAnalyticsConfig{"
	for _, f := range this.GlobalAnalyticsConfigs {
		repeatedStringForGlobalAnalyticsConfigs += strings.Replace(f.String(), "GlobalAnalyticsConfig", "GlobalAnalyticsConfig", 1) + ","
	}
	repeatedStringForGlobalAnalyticsConfigs += "}"
	repeatedStringForGlobalQosConfigs := "[]*GlobalQosConfig{"
	for _, f := range this.GlobalQosConfigs {
		repeatedStringForGlobalQosConfigs += strings.Replace(f.String(), "GlobalQosConfig", "GlobalQosConfig", 1) + ","
	}
	repeatedStringForGlobalQosConfigs += "}"
	repeatedStringForGlobalVrouterConfigs := "[]*GlobalVrouterConfig{"
	for _, f := range this.GlobalVrouterConfigs {
		repeatedStringForGlobalVrouterConfigs += strings.Replace(f.String(), "GlobalVrouterConfig", "GlobalVrouterConfig", 1) + ","
	}
	repeatedStringForGlobalVrouterConfigs += "}"
	repeatedStringForIntentMaps := "[]*IntentMap{"
	for _, f := range this.IntentMaps {
		repeatedStringForIntentMaps += strings.Replace(f.String(), "IntentMap", "IntentMap", 1) + ","
	}
	repeatedStringForIntentMaps += "}"
	repeatedStringForJobTemplates := "[]*JobTemplate{"
	for _, f := range this.JobTemplates {
		repeatedStringForJobTemplates += strings.Replace(f.String(), "JobTemplate", "JobTemplate", 1) + ","
	}
	repeatedStringForJobTemplates += "}"
	repeatedStringForNodes := "[]*Node{"
	for _, f := range this.Nodes {
		repeatedStringForNodes += strings.Replace(f.String(), "Node", "Node", 1) + ","
	}
	repeatedStringForNodes += "}"
	repeatedStringForNodeProfiles := "[]*NodeProfile{"
	for _, f := range this.NodeProfiles {
		repeatedStringForNodeProfiles += strings.Replace(f.String(), "NodeProfile", "NodeProfile", 1) + ","
	}
	repeatedStringForNodeProfiles += "}"
	repeatedStringForOverlayRoles := "[]*OverlayRole{"
	for _, f := range this.OverlayRoles {
		repeatedStringForOverlayRoles += strings.Replace(f.String(), "OverlayRole", "OverlayRole", 1) + ","
	}
	repeatedStringForOverlayRoles += "}"
	repeatedStringForPhysicalRoles := "[]*PhysicalRole{"
	for _, f := range this.PhysicalRoles {
		repeatedStringForPhysicalRoles += strings.Replace(f.String(), "PhysicalRole", "PhysicalRole", 1) + ","
	}
	repeatedStringForPhysicalRoles += "}"
	repeatedStringForPhysicalRouters := "[]*PhysicalRouter{"
	for _, f := range this.PhysicalRouters {
		repeatedStringForPhysicalRouters += strings.Replace(f.String(), "PhysicalRouter", "PhysicalRouter", 1) + ","
	}
	repeatedStringForPhysicalRouters += "}"
	repeatedStringForRoleDefinitions := "[]*RoleDefinition{"
	for _, f := range this.RoleDefinitions {
		repeatedStringForRoleDefinitions += strings.Replace(f.String(), "RoleDefinition", "RoleDefinition", 1) + ","
	}
	repeatedStringForRoleDefinitions += "}"
	repeatedStringForServiceApplianceSets := "[]*ServiceApplianceSet{"
	for _, f := range this.ServiceApplianceSets {
		repeatedStringForServiceApplianceSets += strings.Replace(f.String(), "ServiceApplianceSet", "ServiceApplianceSet", 1) + ","
	}
	repeatedStringForServiceApplianceSets += "}"
	repeatedStringForVirtualRouters := "[]*VirtualRouter{"
	for _, f := range this.VirtualRouters {
		repeatedStringForVirtualRouters += strings.Replace(f.String(), "VirtualRouter", "VirtualRouter", 1) + ","
	}
	repeatedStringForVirtualRouters += "}"
	repeatedStringForWebuiNodes := "[]*WebuiNode{"
	for _, f := range this.WebuiNodes {
		repeatedStringForWebuiNodes += strings.Replace(f.String(), "WebuiNode", "WebuiNode", 1) + ","
	}
	repeatedStringForWebuiNodes += "}"
	s := strings.Join([]string{`&GlobalSystemConfig{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AlarmEnable:` + fmt.Sprintf("%v", this.AlarmEnable) + `,`,
		`AutonomousSystem:` + fmt.Sprintf("%v", this.AutonomousSystem) + `,`,
		`BGPAlwaysCompareMed:` + fmt.Sprintf("%v", this.BGPAlwaysCompareMed) + `,`,
		`BgpaasParameters:` + strings.Replace(this.BgpaasParameters.String(), "BGPaaServiceParametersType", "BGPaaServiceParametersType", 1) + `,`,
		`ConfigVersion:` + fmt.Sprintf("%v", this.ConfigVersion) + `,`,
		`DataCenterInterconnectAsnNamespace:` + strings.Replace(this.DataCenterInterconnectAsnNamespace.String(), "AsnRangeType", "AsnRangeType", 1) + `,`,
		`DataCenterInterconnectLoopbackNamespace:` + strings.Replace(this.DataCenterInterconnectLoopbackNamespace.String(), "SubnetListType", "SubnetListType", 1) + `,`,
		`Enable4byteAs:` + fmt.Sprintf("%v", this.Enable4byteAs) + `,`,
		`EnableSecurityPolicyDraft:` + fmt.Sprintf("%v", this.EnableSecurityPolicyDraft) + `,`,
		`GracefulRestartParameters:` + strings.Replace(this.GracefulRestartParameters.String(), "GracefulRestartParametersType", "GracefulRestartParametersType", 1) + `,`,
		`IbgpAutoMesh:` + fmt.Sprintf("%v", this.IbgpAutoMesh) + `,`,
		`IgmpEnable:` + fmt.Sprintf("%v", this.IgmpEnable) + `,`,
		`IPFabricSubnets:` + strings.Replace(this.IPFabricSubnets.String(), "SubnetListType", "SubnetListType", 1) + `,`,
		`MacAgingTime:` + fmt.Sprintf("%v", this.MacAgingTime) + `,`,
		`MacLimitControl:` + strings.Replace(this.MacLimitControl.String(), "MACLimitControlType", "MACLimitControlType", 1) + `,`,
		`MacMoveControl:` + strings.Replace(this.MacMoveControl.String(), "MACMoveLimitControlType", "MACMoveLimitControlType", 1) + `,`,
		`PluginTuning:` + strings.Replace(this.PluginTuning.String(), "PluginProperties", "PluginProperties", 1) + `,`,
		`RDClusterSeed:` + fmt.Sprintf("%v", this.RDClusterSeed) + `,`,
		`SupportedDeviceFamilies:` + strings.Replace(this.SupportedDeviceFamilies.String(), "DeviceFamilyListType", "DeviceFamilyListType", 1) + `,`,
		`SupportedFabricAnnotations:` + strings.Replace(this.SupportedFabricAnnotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`SupportedVendorHardwares:` + strings.Replace(this.SupportedVendorHardwares.String(), "VendorHardwaresType", "VendorHardwaresType", 1) + `,`,
		`UserDefinedLogStatistics:` + strings.Replace(this.UserDefinedLogStatistics.String(), "UserDefinedLogStatList", "UserDefinedLogStatList", 1) + `,`,
		`BGPRouterRefs:` + repeatedStringForBGPRouterRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`QosConfigBackRefs:` + repeatedStringForQosConfigBackRefs + `,`,
		`Alarms:` + repeatedStringForAlarms + `,`,
		`AnalyticsAlarmNodes:` + repeatedStringForAnalyticsAlarmNodes + `,`,
		`AnalyticsNodes:` + repeatedStringForAnalyticsNodes + `,`,
		`AnalyticsSNMPNodes:` + repeatedStringForAnalyticsSNMPNodes + `,`,
		`APIAccessLists:` + repeatedStringForAPIAccessLists + `,`,
		`ConfigDatabaseNodes:` + repeatedStringForConfigDatabaseNodes + `,`,
		`ConfigNodes:` + repeatedStringForConfigNodes + `,`,
		`ControlNodeZones:` + repeatedStringForControlNodeZones + `,`,
		`DataCenterInterconnects:` + repeatedStringForDataCenterInterconnects + `,`,
		`DatabaseNodes:` + repeatedStringForDatabaseNodes + `,`,
		`DeviceImages:` + repeatedStringForDeviceImages + `,`,
		`DevicemgrNodes:` + repeatedStringForDevicemgrNodes + `,`,
		`Fabrics:` + repeatedStringForFabrics + `,`,
		`Features:` + repeatedStringForFeatures + `,`,
		`FeatureFlags:` + repeatedStringForFeatureFlags + `,`,
		`FlowNodes:` + repeatedStringForFlowNodes + `,`,
		`GlobalAnalyticsConfigs:` + repeatedStringForGlobalAnalyticsConfigs + `,`,
		`GlobalQosConfigs:` + repeatedStringForGlobalQosConfigs + `,`,
		`GlobalVrouterConfigs:` + repeatedStringForGlobalVrouterConfigs + `,`,
		`IntentMaps:` + repeatedStringForIntentMaps + `,`,
		`JobTemplates:` + repeatedStringForJobTemplates + `,`,
		`Nodes:` + repeatedStringForNodes + `,`,
		`NodeProfiles:` + repeatedStringForNodeProfiles + `,`,
		`OverlayRoles:` + repeatedStringForOverlayRoles + `,`,
		`PhysicalRoles:` + repeatedStringForPhysicalRoles + `,`,
		`PhysicalRouters:` + repeatedStringForPhysicalRouters + `,`,
		`RoleDefinitions:` + repeatedStringForRoleDefinitions + `,`,
		`ServiceApplianceSets:` + repeatedStringForServiceApplianceSets + `,`,
		`VirtualRouters:` + repeatedStringForVirtualRouters + `,`,
		`WebuiNodes:` + repeatedStringForWebuiNodes + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSystemConfigBGPRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSystemConfigBGPRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalSystemConfigTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalSystemConfigTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalVrouterConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*GlobalVrouterConfigTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "GlobalVrouterConfigTagRef", "GlobalVrouterConfigTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForApplicationPolicySetBackRefs := "[]*ApplicationPolicySet{"
	for _, f := range this.ApplicationPolicySetBackRefs {
		repeatedStringForApplicationPolicySetBackRefs += strings.Replace(f.String(), "ApplicationPolicySet", "ApplicationPolicySet", 1) + ","
	}
	repeatedStringForApplicationPolicySetBackRefs += "}"
	repeatedStringForSecurityLoggingObjects := "[]*SecurityLoggingObject{"
	for _, f := range this.SecurityLoggingObjects {
		repeatedStringForSecurityLoggingObjects += strings.Replace(f.String(), "SecurityLoggingObject", "SecurityLoggingObject", 1) + ","
	}
	repeatedStringForSecurityLoggingObjects += "}"
	s := strings.Join([]string{`&GlobalVrouterConfig{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`EcmpHashingIncludeFields:` + strings.Replace(this.EcmpHashingIncludeFields.String(), "EcmpHashingIncludeFields", "EcmpHashingIncludeFields", 1) + `,`,
		`EnableSecurityLogging:` + fmt.Sprintf("%v", this.EnableSecurityLogging) + `,`,
		`EncapsulationPriorities:` + strings.Replace(this.EncapsulationPriorities.String(), "EncapsulationPrioritiesType", "EncapsulationPrioritiesType", 1) + `,`,
		`EncryptionMode:` + fmt.Sprintf("%v", this.EncryptionMode) + `,`,
		`EncryptionTunnelEndpoints:` + strings.Replace(this.EncryptionTunnelEndpoints.String(), "EncryptionTunnelEndpointList", "EncryptionTunnelEndpointList", 1) + `,`,
		`FlowAgingTimeoutList:` + strings.Replace(this.FlowAgingTimeoutList.String(), "FlowAgingTimeoutList", "FlowAgingTimeoutList", 1) + `,`,
		`FlowExportRate:` + fmt.Sprintf("%v", this.FlowExportRate) + `,`,
		`ForwardingMode:` + fmt.Sprintf("%v", this.ForwardingMode) + `,`,
		`LinklocalServices:` + strings.Replace(this.LinklocalServices.String(), "LinklocalServicesTypes", "LinklocalServicesTypes", 1) + `,`,
		`PortTranslationPools:` + strings.Replace(this.PortTranslationPools.String(), "PortTranslationPools", "PortTranslationPools", 1) + `,`,
		`VxlanNetworkIdentifierMode:` + fmt.Sprintf("%v", this.VxlanNetworkIdentifierMode) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`ApplicationPolicySetBackRefs:` + repeatedStringForApplicationPolicySetBackRefs + `,`,
		`SecurityLoggingObjects:` + repeatedStringForSecurityLoggingObjects + `,`,
		`}`,
	}, "")
	return s
}
func (this *GlobalVrouterConfigTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GlobalVrouterConfigTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HardwareInventory) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*HardwareInventoryTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "HardwareInventoryTagRef", "HardwareInventoryTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&HardwareInventory{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`HardwareInventoryInventoryInfo:` + fmt.Sprintf("%v", this.HardwareInventoryInventoryInfo) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *HardwareInventoryTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HardwareInventoryTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Hardware) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCardRefs := "[]*HardwareCardRef{"
	for _, f := range this.CardRefs {
		repeatedStringForCardRefs += strings.Replace(f.String(), "HardwareCardRef", "HardwareCardRef", 1) + ","
	}
	repeatedStringForCardRefs += "}"
	repeatedStringForTagRefs := "[]*HardwareTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "HardwareTagRef", "HardwareTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForDeviceImageBackRefs := "[]*DeviceImage{"
	for _, f := range this.DeviceImageBackRefs {
		repeatedStringForDeviceImageBackRefs += strings.Replace(f.String(), "DeviceImage", "DeviceImage", 1) + ","
	}
	repeatedStringForDeviceImageBackRefs += "}"
	repeatedStringForNodeProfileBackRefs := "[]*NodeProfile{"
	for _, f := range this.NodeProfileBackRefs {
		repeatedStringForNodeProfileBackRefs += strings.Replace(f.String(), "NodeProfile", "NodeProfile", 1) + ","
	}
	repeatedStringForNodeProfileBackRefs += "}"
	s := strings.Join([]string{`&Hardware{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`CardRefs:` + repeatedStringForCardRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`DeviceImageBackRefs:` + repeatedStringForDeviceImageBackRefs + `,`,
		`NodeProfileBackRefs:` + repeatedStringForNodeProfileBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *HardwareCardRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HardwareCardRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HardwareTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HardwareTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostBasedService) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*HostBasedServiceTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "HostBasedServiceTagRef", "HostBasedServiceTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualNetworkRefs := "[]*HostBasedServiceVirtualNetworkRef{"
	for _, f := range this.VirtualNetworkRefs {
		repeatedStringForVirtualNetworkRefs += strings.Replace(f.String(), "HostBasedServiceVirtualNetworkRef", "HostBasedServiceVirtualNetworkRef", 1) + ","
	}
	repeatedStringForVirtualNetworkRefs += "}"
	s := strings.Join([]string{`&HostBasedService{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`HostBasedServiceType:` + fmt.Sprintf("%v", this.HostBasedServiceType) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualNetworkRefs:` + repeatedStringForVirtualNetworkRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostBasedServiceTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostBasedServiceTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HostBasedServiceVirtualNetworkRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HostBasedServiceVirtualNetworkRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "ServiceVirtualNetworkType", "ServiceVirtualNetworkType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceIP) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFlowNodeRefs := "[]*InstanceIPFlowNodeRef{"
	for _, f := range this.FlowNodeRefs {
		repeatedStringForFlowNodeRefs += strings.Replace(f.String(), "InstanceIPFlowNodeRef", "InstanceIPFlowNodeRef", 1) + ","
	}
	repeatedStringForFlowNodeRefs += "}"
	repeatedStringForLogicalInterfaceRefs := "[]*InstanceIPLogicalInterfaceRef{"
	for _, f := range this.LogicalInterfaceRefs {
		repeatedStringForLogicalInterfaceRefs += strings.Replace(f.String(), "InstanceIPLogicalInterfaceRef", "InstanceIPLogicalInterfaceRef", 1) + ","
	}
	repeatedStringForLogicalInterfaceRefs += "}"
	repeatedStringForNetworkIpamRefs := "[]*InstanceIPNetworkIpamRef{"
	for _, f := range this.NetworkIpamRefs {
		repeatedStringForNetworkIpamRefs += strings.Replace(f.String(), "InstanceIPNetworkIpamRef", "InstanceIPNetworkIpamRef", 1) + ","
	}
	repeatedStringForNetworkIpamRefs += "}"
	repeatedStringForPhysicalRouterRefs := "[]*InstanceIPPhysicalRouterRef{"
	for _, f := range this.PhysicalRouterRefs {
		repeatedStringForPhysicalRouterRefs += strings.Replace(f.String(), "InstanceIPPhysicalRouterRef", "InstanceIPPhysicalRouterRef", 1) + ","
	}
	repeatedStringForPhysicalRouterRefs += "}"
	repeatedStringForTagRefs := "[]*InstanceIPTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "InstanceIPTagRef", "InstanceIPTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceRefs := "[]*InstanceIPVirtualMachineInterfaceRef{"
	for _, f := range this.VirtualMachineInterfaceRefs {
		repeatedStringForVirtualMachineInterfaceRefs += strings.Replace(f.String(), "InstanceIPVirtualMachineInterfaceRef", "InstanceIPVirtualMachineInterfaceRef", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceRefs += "}"
	repeatedStringForVirtualNetworkRefs := "[]*InstanceIPVirtualNetworkRef{"
	for _, f := range this.VirtualNetworkRefs {
		repeatedStringForVirtualNetworkRefs += strings.Replace(f.String(), "InstanceIPVirtualNetworkRef", "InstanceIPVirtualNetworkRef", 1) + ","
	}
	repeatedStringForVirtualNetworkRefs += "}"
	repeatedStringForVirtualRouterRefs := "[]*InstanceIPVirtualRouterRef{"
	for _, f := range this.VirtualRouterRefs {
		repeatedStringForVirtualRouterRefs += strings.Replace(f.String(), "InstanceIPVirtualRouterRef", "InstanceIPVirtualRouterRef", 1) + ","
	}
	repeatedStringForVirtualRouterRefs += "}"
	repeatedStringForServiceInstanceBackRefs := "[]*ServiceInstance{"
	for _, f := range this.ServiceInstanceBackRefs {
		repeatedStringForServiceInstanceBackRefs += strings.Replace(f.String(), "ServiceInstance", "ServiceInstance", 1) + ","
	}
	repeatedStringForServiceInstanceBackRefs += "}"
	repeatedStringForFloatingIPs := "[]*FloatingIP{"
	for _, f := range this.FloatingIPs {
		repeatedStringForFloatingIPs += strings.Replace(f.String(), "FloatingIP", "FloatingIP", 1) + ","
	}
	repeatedStringForFloatingIPs += "}"
	s := strings.Join([]string{`&InstanceIP{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`InstanceIPAddress:` + fmt.Sprintf("%v", this.InstanceIPAddress) + `,`,
		`InstanceIPFamily:` + fmt.Sprintf("%v", this.InstanceIPFamily) + `,`,
		`InstanceIPLocalIP:` + fmt.Sprintf("%v", this.InstanceIPLocalIP) + `,`,
		`InstanceIPMode:` + fmt.Sprintf("%v", this.InstanceIPMode) + `,`,
		`InstanceIPSecondary:` + fmt.Sprintf("%v", this.InstanceIPSecondary) + `,`,
		`InstanceIPSubnet:` + strings.Replace(this.InstanceIPSubnet.String(), "SubnetType", "SubnetType", 1) + `,`,
		`InstanceIPSubscriberTag:` + fmt.Sprintf("%v", this.InstanceIPSubscriberTag) + `,`,
		`SecondaryIPTrackingIP:` + strings.Replace(this.SecondaryIPTrackingIP.String(), "SubnetType", "SubnetType", 1) + `,`,
		`ServiceHealthCheckIP:` + fmt.Sprintf("%v", this.ServiceHealthCheckIP) + `,`,
		`ServiceInstanceIP:` + fmt.Sprintf("%v", this.ServiceInstanceIP) + `,`,
		`SubnetUUID:` + fmt.Sprintf("%v", this.SubnetUUID) + `,`,
		`FlowNodeRefs:` + repeatedStringForFlowNodeRefs + `,`,
		`LogicalInterfaceRefs:` + repeatedStringForLogicalInterfaceRefs + `,`,
		`NetworkIpamRefs:` + repeatedStringForNetworkIpamRefs + `,`,
		`PhysicalRouterRefs:` + repeatedStringForPhysicalRouterRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceRefs:` + repeatedStringForVirtualMachineInterfaceRefs + `,`,
		`VirtualNetworkRefs:` + repeatedStringForVirtualNetworkRefs + `,`,
		`VirtualRouterRefs:` + repeatedStringForVirtualRouterRefs + `,`,
		`ServiceInstanceBackRefs:` + repeatedStringForServiceInstanceBackRefs + `,`,
		`FloatingIPs:` + repeatedStringForFloatingIPs + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceIPFlowNodeRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstanceIPFlowNodeRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceIPLogicalInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstanceIPLogicalInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceIPNetworkIpamRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstanceIPNetworkIpamRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceIPPhysicalRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstanceIPPhysicalRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceIPTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstanceIPTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceIPVirtualMachineInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstanceIPVirtualMachineInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceIPVirtualNetworkRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstanceIPVirtualNetworkRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceIPVirtualRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstanceIPVirtualRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IntentMap) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*IntentMapTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "IntentMapTagRef", "IntentMapTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForFabricBackRefs := "[]*Fabric{"
	for _, f := range this.FabricBackRefs {
		repeatedStringForFabricBackRefs += strings.Replace(f.String(), "Fabric", "Fabric", 1) + ","
	}
	repeatedStringForFabricBackRefs += "}"
	repeatedStringForPhysicalRouterBackRefs := "[]*PhysicalRouter{"
	for _, f := range this.PhysicalRouterBackRefs {
		repeatedStringForPhysicalRouterBackRefs += strings.Replace(f.String(), "PhysicalRouter", "PhysicalRouter", 1) + ","
	}
	repeatedStringForPhysicalRouterBackRefs += "}"
	repeatedStringForVirtualNetworkBackRefs := "[]*VirtualNetwork{"
	for _, f := range this.VirtualNetworkBackRefs {
		repeatedStringForVirtualNetworkBackRefs += strings.Replace(f.String(), "VirtualNetwork", "VirtualNetwork", 1) + ","
	}
	repeatedStringForVirtualNetworkBackRefs += "}"
	s := strings.Join([]string{`&IntentMap{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`IntentMapIntentType:` + fmt.Sprintf("%v", this.IntentMapIntentType) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`FabricBackRefs:` + repeatedStringForFabricBackRefs + `,`,
		`PhysicalRouterBackRefs:` + repeatedStringForPhysicalRouterBackRefs + `,`,
		`VirtualNetworkBackRefs:` + repeatedStringForVirtualNetworkBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *IntentMapTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IntentMapTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterfaceRouteTable) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServiceInstanceRefs := "[]*InterfaceRouteTableServiceInstanceRef{"
	for _, f := range this.ServiceInstanceRefs {
		repeatedStringForServiceInstanceRefs += strings.Replace(f.String(), "InterfaceRouteTableServiceInstanceRef", "InterfaceRouteTableServiceInstanceRef", 1) + ","
	}
	repeatedStringForServiceInstanceRefs += "}"
	repeatedStringForTagRefs := "[]*InterfaceRouteTableTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "InterfaceRouteTableTagRef", "InterfaceRouteTableTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	s := strings.Join([]string{`&InterfaceRouteTable{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`InterfaceRouteTableRoutes:` + strings.Replace(this.InterfaceRouteTableRoutes.String(), "RouteTableType", "RouteTableType", 1) + `,`,
		`ServiceInstanceRefs:` + repeatedStringForServiceInstanceRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterfaceRouteTableServiceInstanceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InterfaceRouteTableServiceInstanceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "ServiceInterfaceTag", "ServiceInterfaceTag", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterfaceRouteTableTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InterfaceRouteTableTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobTemplate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*JobTemplateTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "JobTemplateTagRef", "JobTemplateTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForNodeProfileBackRefs := "[]*NodeProfile{"
	for _, f := range this.NodeProfileBackRefs {
		repeatedStringForNodeProfileBackRefs += strings.Replace(f.String(), "NodeProfile", "NodeProfile", 1) + ","
	}
	repeatedStringForNodeProfileBackRefs += "}"
	s := strings.Join([]string{`&JobTemplate{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`JobTemplateConcurrencyLevel:` + fmt.Sprintf("%v", this.JobTemplateConcurrencyLevel) + `,`,
		`JobTemplateDescription:` + fmt.Sprintf("%v", this.JobTemplateDescription) + `,`,
		`JobTemplateExecutables:` + strings.Replace(this.JobTemplateExecutables.String(), "ExecutableInfoListType", "ExecutableInfoListType", 1) + `,`,
		`JobTemplateInputSchema:` + fmt.Sprintf("%v", this.JobTemplateInputSchema) + `,`,
		`JobTemplateInputUISchema:` + fmt.Sprintf("%v", this.JobTemplateInputUISchema) + `,`,
		`JobTemplateOutputSchema:` + fmt.Sprintf("%v", this.JobTemplateOutputSchema) + `,`,
		`JobTemplateOutputUISchema:` + fmt.Sprintf("%v", this.JobTemplateOutputUISchema) + `,`,
		`JobTemplatePlaybooks:` + strings.Replace(this.JobTemplatePlaybooks.String(), "PlaybookInfoListType", "PlaybookInfoListType", 1) + `,`,
		`JobTemplateSynchronousJob:` + fmt.Sprintf("%v", this.JobTemplateSynchronousJob) + `,`,
		`JobTemplateType:` + fmt.Sprintf("%v", this.JobTemplateType) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`NodeProfileBackRefs:` + repeatedStringForNodeProfileBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *JobTemplateTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JobTemplateTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinkAggregationGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPhysicalInterfaceRefs := "[]*LinkAggregationGroupPhysicalInterfaceRef{"
	for _, f := range this.PhysicalInterfaceRefs {
		repeatedStringForPhysicalInterfaceRefs += strings.Replace(f.String(), "LinkAggregationGroupPhysicalInterfaceRef", "LinkAggregationGroupPhysicalInterfaceRef", 1) + ","
	}
	repeatedStringForPhysicalInterfaceRefs += "}"
	repeatedStringForTagRefs := "[]*LinkAggregationGroupTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "LinkAggregationGroupTagRef", "LinkAggregationGroupTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceRefs := "[]*LinkAggregationGroupVirtualMachineInterfaceRef{"
	for _, f := range this.VirtualMachineInterfaceRefs {
		repeatedStringForVirtualMachineInterfaceRefs += strings.Replace(f.String(), "LinkAggregationGroupVirtualMachineInterfaceRef", "LinkAggregationGroupVirtualMachineInterfaceRef", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceRefs += "}"
	s := strings.Join([]string{`&LinkAggregationGroup{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`LinkAggregationGroupLacpEnabled:` + fmt.Sprintf("%v", this.LinkAggregationGroupLacpEnabled) + `,`,
		`PhysicalInterfaceRefs:` + repeatedStringForPhysicalInterfaceRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceRefs:` + repeatedStringForVirtualMachineInterfaceRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinkAggregationGroupPhysicalInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LinkAggregationGroupPhysicalInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinkAggregationGroupTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LinkAggregationGroupTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinkAggregationGroupVirtualMachineInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LinkAggregationGroupVirtualMachineInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerHealthmonitor) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*LoadbalancerHealthmonitorTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "LoadbalancerHealthmonitorTagRef", "LoadbalancerHealthmonitorTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForLoadbalancerPoolBackRefs := "[]*LoadbalancerPool{"
	for _, f := range this.LoadbalancerPoolBackRefs {
		repeatedStringForLoadbalancerPoolBackRefs += strings.Replace(f.String(), "LoadbalancerPool", "LoadbalancerPool", 1) + ","
	}
	repeatedStringForLoadbalancerPoolBackRefs += "}"
	s := strings.Join([]string{`&LoadbalancerHealthmonitor{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`LoadbalancerHealthmonitorProperties:` + strings.Replace(this.LoadbalancerHealthmonitorProperties.String(), "LoadbalancerHealthmonitorType", "LoadbalancerHealthmonitorType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`LoadbalancerPoolBackRefs:` + repeatedStringForLoadbalancerPoolBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerHealthmonitorTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerHealthmonitorTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerListener) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLoadbalancerRefs := "[]*LoadbalancerListenerLoadbalancerRef{"
	for _, f := range this.LoadbalancerRefs {
		repeatedStringForLoadbalancerRefs += strings.Replace(f.String(), "LoadbalancerListenerLoadbalancerRef", "LoadbalancerListenerLoadbalancerRef", 1) + ","
	}
	repeatedStringForLoadbalancerRefs += "}"
	repeatedStringForTagRefs := "[]*LoadbalancerListenerTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "LoadbalancerListenerTagRef", "LoadbalancerListenerTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForLoadbalancerPoolBackRefs := "[]*LoadbalancerPool{"
	for _, f := range this.LoadbalancerPoolBackRefs {
		repeatedStringForLoadbalancerPoolBackRefs += strings.Replace(f.String(), "LoadbalancerPool", "LoadbalancerPool", 1) + ","
	}
	repeatedStringForLoadbalancerPoolBackRefs += "}"
	s := strings.Join([]string{`&LoadbalancerListener{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`LoadbalancerListenerProperties:` + strings.Replace(this.LoadbalancerListenerProperties.String(), "LoadbalancerListenerType", "LoadbalancerListenerType", 1) + `,`,
		`LoadbalancerRefs:` + repeatedStringForLoadbalancerRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`LoadbalancerPoolBackRefs:` + repeatedStringForLoadbalancerPoolBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerListenerLoadbalancerRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerListenerLoadbalancerRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerListenerTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerListenerTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerMember) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*LoadbalancerMemberTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "LoadbalancerMemberTagRef", "LoadbalancerMemberTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&LoadbalancerMember{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`LoadbalancerMemberProperties:` + strings.Replace(this.LoadbalancerMemberProperties.String(), "LoadbalancerMemberType", "LoadbalancerMemberType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerMemberTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerMemberTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerPool) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLoadbalancerHealthmonitorRefs := "[]*LoadbalancerPoolLoadbalancerHealthmonitorRef{"
	for _, f := range this.LoadbalancerHealthmonitorRefs {
		repeatedStringForLoadbalancerHealthmonitorRefs += strings.Replace(f.String(), "LoadbalancerPoolLoadbalancerHealthmonitorRef", "LoadbalancerPoolLoadbalancerHealthmonitorRef", 1) + ","
	}
	repeatedStringForLoadbalancerHealthmonitorRefs += "}"
	repeatedStringForLoadbalancerListenerRefs := "[]*LoadbalancerPoolLoadbalancerListenerRef{"
	for _, f := range this.LoadbalancerListenerRefs {
		repeatedStringForLoadbalancerListenerRefs += strings.Replace(f.String(), "LoadbalancerPoolLoadbalancerListenerRef", "LoadbalancerPoolLoadbalancerListenerRef", 1) + ","
	}
	repeatedStringForLoadbalancerListenerRefs += "}"
	repeatedStringForServiceApplianceSetRefs := "[]*LoadbalancerPoolServiceApplianceSetRef{"
	for _, f := range this.ServiceApplianceSetRefs {
		repeatedStringForServiceApplianceSetRefs += strings.Replace(f.String(), "LoadbalancerPoolServiceApplianceSetRef", "LoadbalancerPoolServiceApplianceSetRef", 1) + ","
	}
	repeatedStringForServiceApplianceSetRefs += "}"
	repeatedStringForServiceInstanceRefs := "[]*LoadbalancerPoolServiceInstanceRef{"
	for _, f := range this.ServiceInstanceRefs {
		repeatedStringForServiceInstanceRefs += strings.Replace(f.String(), "LoadbalancerPoolServiceInstanceRef", "LoadbalancerPoolServiceInstanceRef", 1) + ","
	}
	repeatedStringForServiceInstanceRefs += "}"
	repeatedStringForTagRefs := "[]*LoadbalancerPoolTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "LoadbalancerPoolTagRef", "LoadbalancerPoolTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceRefs := "[]*LoadbalancerPoolVirtualMachineInterfaceRef{"
	for _, f := range this.VirtualMachineInterfaceRefs {
		repeatedStringForVirtualMachineInterfaceRefs += strings.Replace(f.String(), "LoadbalancerPoolVirtualMachineInterfaceRef", "LoadbalancerPoolVirtualMachineInterfaceRef", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceRefs += "}"
	repeatedStringForVirtualIPBackRefs := "[]*VirtualIP{"
	for _, f := range this.VirtualIPBackRefs {
		repeatedStringForVirtualIPBackRefs += strings.Replace(f.String(), "VirtualIP", "VirtualIP", 1) + ","
	}
	repeatedStringForVirtualIPBackRefs += "}"
	repeatedStringForLoadbalancerMembers := "[]*LoadbalancerMember{"
	for _, f := range this.LoadbalancerMembers {
		repeatedStringForLoadbalancerMembers += strings.Replace(f.String(), "LoadbalancerMember", "LoadbalancerMember", 1) + ","
	}
	repeatedStringForLoadbalancerMembers += "}"
	s := strings.Join([]string{`&LoadbalancerPool{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`LoadbalancerPoolCustomAttributes:` + strings.Replace(this.LoadbalancerPoolCustomAttributes.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`LoadbalancerPoolProperties:` + strings.Replace(this.LoadbalancerPoolProperties.String(), "LoadbalancerPoolType", "LoadbalancerPoolType", 1) + `,`,
		`LoadbalancerPoolProvider:` + fmt.Sprintf("%v", this.LoadbalancerPoolProvider) + `,`,
		`LoadbalancerHealthmonitorRefs:` + repeatedStringForLoadbalancerHealthmonitorRefs + `,`,
		`LoadbalancerListenerRefs:` + repeatedStringForLoadbalancerListenerRefs + `,`,
		`ServiceApplianceSetRefs:` + repeatedStringForServiceApplianceSetRefs + `,`,
		`ServiceInstanceRefs:` + repeatedStringForServiceInstanceRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceRefs:` + repeatedStringForVirtualMachineInterfaceRefs + `,`,
		`VirtualIPBackRefs:` + repeatedStringForVirtualIPBackRefs + `,`,
		`LoadbalancerMembers:` + repeatedStringForLoadbalancerMembers + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerPoolLoadbalancerHealthmonitorRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerPoolLoadbalancerHealthmonitorRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerPoolLoadbalancerListenerRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerPoolLoadbalancerListenerRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerPoolServiceApplianceSetRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerPoolServiceApplianceSetRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerPoolServiceInstanceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerPoolServiceInstanceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerPoolTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerPoolTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerPoolVirtualMachineInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerPoolVirtualMachineInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Loadbalancer) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServiceApplianceSetRefs := "[]*LoadbalancerServiceApplianceSetRef{"
	for _, f := range this.ServiceApplianceSetRefs {
		repeatedStringForServiceApplianceSetRefs += strings.Replace(f.String(), "LoadbalancerServiceApplianceSetRef", "LoadbalancerServiceApplianceSetRef", 1) + ","
	}
	repeatedStringForServiceApplianceSetRefs += "}"
	repeatedStringForServiceInstanceRefs := "[]*LoadbalancerServiceInstanceRef{"
	for _, f := range this.ServiceInstanceRefs {
		repeatedStringForServiceInstanceRefs += strings.Replace(f.String(), "LoadbalancerServiceInstanceRef", "LoadbalancerServiceInstanceRef", 1) + ","
	}
	repeatedStringForServiceInstanceRefs += "}"
	repeatedStringForTagRefs := "[]*LoadbalancerTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "LoadbalancerTagRef", "LoadbalancerTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceRefs := "[]*LoadbalancerVirtualMachineInterfaceRef{"
	for _, f := range this.VirtualMachineInterfaceRefs {
		repeatedStringForVirtualMachineInterfaceRefs += strings.Replace(f.String(), "LoadbalancerVirtualMachineInterfaceRef", "LoadbalancerVirtualMachineInterfaceRef", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceRefs += "}"
	repeatedStringForLoadbalancerListenerBackRefs := "[]*LoadbalancerListener{"
	for _, f := range this.LoadbalancerListenerBackRefs {
		repeatedStringForLoadbalancerListenerBackRefs += strings.Replace(f.String(), "LoadbalancerListener", "LoadbalancerListener", 1) + ","
	}
	repeatedStringForLoadbalancerListenerBackRefs += "}"
	s := strings.Join([]string{`&Loadbalancer{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`LoadbalancerProperties:` + strings.Replace(this.LoadbalancerProperties.String(), "LoadbalancerType", "LoadbalancerType", 1) + `,`,
		`LoadbalancerProvider:` + fmt.Sprintf("%v", this.LoadbalancerProvider) + `,`,
		`ServiceApplianceSetRefs:` + repeatedStringForServiceApplianceSetRefs + `,`,
		`ServiceInstanceRefs:` + repeatedStringForServiceInstanceRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceRefs:` + repeatedStringForVirtualMachineInterfaceRefs + `,`,
		`LoadbalancerListenerBackRefs:` + repeatedStringForLoadbalancerListenerBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerServiceApplianceSetRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerServiceApplianceSetRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerServiceInstanceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerServiceInstanceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerVirtualMachineInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerVirtualMachineInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogicalInterface) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*LogicalInterfaceTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "LogicalInterfaceTagRef", "LogicalInterfaceTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceRefs := "[]*LogicalInterfaceVirtualMachineInterfaceRef{"
	for _, f := range this.VirtualMachineInterfaceRefs {
		repeatedStringForVirtualMachineInterfaceRefs += strings.Replace(f.String(), "LogicalInterfaceVirtualMachineInterfaceRef", "LogicalInterfaceVirtualMachineInterfaceRef", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceRefs += "}"
	repeatedStringForInstanceIPBackRefs := "[]*InstanceIP{"
	for _, f := range this.InstanceIPBackRefs {
		repeatedStringForInstanceIPBackRefs += strings.Replace(f.String(), "InstanceIP", "InstanceIP", 1) + ","
	}
	repeatedStringForInstanceIPBackRefs += "}"
	s := strings.Join([]string{`&LogicalInterface{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`LogicalInterfaceType:` + fmt.Sprintf("%v", this.LogicalInterfaceType) + `,`,
		`LogicalInterfaceVlanTag:` + fmt.Sprintf("%v", this.LogicalInterfaceVlanTag) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceRefs:` + repeatedStringForVirtualMachineInterfaceRefs + `,`,
		`InstanceIPBackRefs:` + repeatedStringForInstanceIPBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogicalInterfaceTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogicalInterfaceTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogicalInterfaceVirtualMachineInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogicalInterfaceVirtualMachineInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogicalRouter) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBGPVPNRefs := "[]*LogicalRouterBGPVPNRef{"
	for _, f := range this.BGPVPNRefs {
		repeatedStringForBGPVPNRefs += strings.Replace(f.String(), "LogicalRouterBGPVPNRef", "LogicalRouterBGPVPNRef", 1) + ","
	}
	repeatedStringForBGPVPNRefs += "}"
	repeatedStringForPhysicalRouterRefs := "[]*LogicalRouterPhysicalRouterRef{"
	for _, f := range this.PhysicalRouterRefs {
		repeatedStringForPhysicalRouterRefs += strings.Replace(f.String(), "LogicalRouterPhysicalRouterRef", "LogicalRouterPhysicalRouterRef", 1) + ","
	}
	repeatedStringForPhysicalRouterRefs += "}"
	repeatedStringForRouteTableRefs := "[]*LogicalRouterRouteTableRef{"
	for _, f := range this.RouteTableRefs {
		repeatedStringForRouteTableRefs += strings.Replace(f.String(), "LogicalRouterRouteTableRef", "LogicalRouterRouteTableRef", 1) + ","
	}
	repeatedStringForRouteTableRefs += "}"
	repeatedStringForRouteTargetRefs := "[]*LogicalRouterRouteTargetRef{"
	for _, f := range this.RouteTargetRefs {
		repeatedStringForRouteTargetRefs += strings.Replace(f.String(), "LogicalRouterRouteTargetRef", "LogicalRouterRouteTargetRef", 1) + ","
	}
	repeatedStringForRouteTargetRefs += "}"
	repeatedStringForServiceInstanceRefs := "[]*LogicalRouterServiceInstanceRef{"
	for _, f := range this.ServiceInstanceRefs {
		repeatedStringForServiceInstanceRefs += strings.Replace(f.String(), "LogicalRouterServiceInstanceRef", "LogicalRouterServiceInstanceRef", 1) + ","
	}
	repeatedStringForServiceInstanceRefs += "}"
	repeatedStringForTagRefs := "[]*LogicalRouterTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "LogicalRouterTagRef", "LogicalRouterTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceRefs := "[]*LogicalRouterVirtualMachineInterfaceRef{"
	for _, f := range this.VirtualMachineInterfaceRefs {
		repeatedStringForVirtualMachineInterfaceRefs += strings.Replace(f.String(), "LogicalRouterVirtualMachineInterfaceRef", "LogicalRouterVirtualMachineInterfaceRef", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceRefs += "}"
	repeatedStringForVirtualNetworkRefs := "[]*LogicalRouterVirtualNetworkRef{"
	for _, f := range this.VirtualNetworkRefs {
		repeatedStringForVirtualNetworkRefs += strings.Replace(f.String(), "LogicalRouterVirtualNetworkRef", "LogicalRouterVirtualNetworkRef", 1) + ","
	}
	repeatedStringForVirtualNetworkRefs += "}"
	repeatedStringForDataCenterInterconnectBackRefs := "[]*DataCenterInterconnect{"
	for _, f := range this.DataCenterInterconnectBackRefs {
		repeatedStringForDataCenterInterconnectBackRefs += strings.Replace(f.String(), "DataCenterInterconnect", "DataCenterInterconnect", 1) + ","
	}
	repeatedStringForDataCenterInterconnectBackRefs += "}"
	repeatedStringForPortTupleBackRefs := "[]*PortTuple{"
	for _, f := range this.PortTupleBackRefs {
		repeatedStringForPortTupleBackRefs += strings.Replace(f.String(), "PortTuple", "PortTuple", 1) + ","
	}
	repeatedStringForPortTupleBackRefs += "}"
	s := strings.Join([]string{`&LogicalRouter{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ConfiguredRouteTargetList:` + strings.Replace(this.ConfiguredRouteTargetList.String(), "RouteTargetList", "RouteTargetList", 1) + `,`,
		`LogicalRouterDHCPRelayServer:` + strings.Replace(this.LogicalRouterDHCPRelayServer.String(), "IpAddressesType", "IpAddressesType", 1) + `,`,
		`LogicalRouterGatewayExternal:` + fmt.Sprintf("%v", this.LogicalRouterGatewayExternal) + `,`,
		`LogicalRouterType:` + fmt.Sprintf("%v", this.LogicalRouterType) + `,`,
		`VxlanNetworkIdentifier:` + fmt.Sprintf("%v", this.VxlanNetworkIdentifier) + `,`,
		`BGPVPNRefs:` + repeatedStringForBGPVPNRefs + `,`,
		`PhysicalRouterRefs:` + repeatedStringForPhysicalRouterRefs + `,`,
		`RouteTableRefs:` + repeatedStringForRouteTableRefs + `,`,
		`RouteTargetRefs:` + repeatedStringForRouteTargetRefs + `,`,
		`ServiceInstanceRefs:` + repeatedStringForServiceInstanceRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceRefs:` + repeatedStringForVirtualMachineInterfaceRefs + `,`,
		`VirtualNetworkRefs:` + repeatedStringForVirtualNetworkRefs + `,`,
		`DataCenterInterconnectBackRefs:` + repeatedStringForDataCenterInterconnectBackRefs + `,`,
		`PortTupleBackRefs:` + repeatedStringForPortTupleBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogicalRouterBGPVPNRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogicalRouterBGPVPNRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogicalRouterPhysicalRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogicalRouterPhysicalRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogicalRouterRouteTableRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogicalRouterRouteTableRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogicalRouterRouteTargetRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogicalRouterRouteTargetRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogicalRouterServiceInstanceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogicalRouterServiceInstanceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogicalRouterTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogicalRouterTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogicalRouterVirtualMachineInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogicalRouterVirtualMachineInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogicalRouterVirtualNetworkRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogicalRouterVirtualNetworkRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "LogicalRouterVirtualNetworkType", "LogicalRouterVirtualNetworkType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MulticastPolicy) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*MulticastPolicyTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "MulticastPolicyTagRef", "MulticastPolicyTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualNetworkBackRefs := "[]*VirtualNetwork{"
	for _, f := range this.VirtualNetworkBackRefs {
		repeatedStringForVirtualNetworkBackRefs += strings.Replace(f.String(), "VirtualNetwork", "VirtualNetwork", 1) + ","
	}
	repeatedStringForVirtualNetworkBackRefs += "}"
	s := strings.Join([]string{`&MulticastPolicy{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`MulticastSourceGroups:` + strings.Replace(this.MulticastSourceGroups.String(), "MulticastSourceGroups", "MulticastSourceGroups", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualNetworkBackRefs:` + repeatedStringForVirtualNetworkBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *MulticastPolicyTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MulticastPolicyTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Namespace) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*NamespaceTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "NamespaceTagRef", "NamespaceTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForProjectBackRefs := "[]*Project{"
	for _, f := range this.ProjectBackRefs {
		repeatedStringForProjectBackRefs += strings.Replace(f.String(), "Project", "Project", 1) + ","
	}
	repeatedStringForProjectBackRefs += "}"
	s := strings.Join([]string{`&Namespace{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`NamespaceCidr:` + strings.Replace(this.NamespaceCidr.String(), "SubnetType", "SubnetType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`ProjectBackRefs:` + repeatedStringForProjectBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NamespaceTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkDeviceConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPhysicalRouterRefs := "[]*NetworkDeviceConfigPhysicalRouterRef{"
	for _, f := range this.PhysicalRouterRefs {
		repeatedStringForPhysicalRouterRefs += strings.Replace(f.String(), "NetworkDeviceConfigPhysicalRouterRef", "NetworkDeviceConfigPhysicalRouterRef", 1) + ","
	}
	repeatedStringForPhysicalRouterRefs += "}"
	repeatedStringForTagRefs := "[]*NetworkDeviceConfigTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "NetworkDeviceConfigTagRef", "NetworkDeviceConfigTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&NetworkDeviceConfig{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`PhysicalRouterRefs:` + repeatedStringForPhysicalRouterRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkDeviceConfigPhysicalRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkDeviceConfigPhysicalRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkDeviceConfigTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkDeviceConfigTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkIpam) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*NetworkIpamTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "NetworkIpamTagRef", "NetworkIpamTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualDNSRefs := "[]*NetworkIpamVirtualDNSRef{"
	for _, f := range this.VirtualDNSRefs {
		repeatedStringForVirtualDNSRefs += strings.Replace(f.String(), "NetworkIpamVirtualDNSRef", "NetworkIpamVirtualDNSRef", 1) + ","
	}
	repeatedStringForVirtualDNSRefs += "}"
	repeatedStringForInstanceIPBackRefs := "[]*InstanceIP{"
	for _, f := range this.InstanceIPBackRefs {
		repeatedStringForInstanceIPBackRefs += strings.Replace(f.String(), "InstanceIP", "InstanceIP", 1) + ","
	}
	repeatedStringForInstanceIPBackRefs += "}"
	repeatedStringForVirtualNetworkBackRefs := "[]*VirtualNetwork{"
	for _, f := range this.VirtualNetworkBackRefs {
		repeatedStringForVirtualNetworkBackRefs += strings.Replace(f.String(), "VirtualNetwork", "VirtualNetwork", 1) + ","
	}
	repeatedStringForVirtualNetworkBackRefs += "}"
	repeatedStringForVirtualRouterBackRefs := "[]*VirtualRouter{"
	for _, f := range this.VirtualRouterBackRefs {
		repeatedStringForVirtualRouterBackRefs += strings.Replace(f.String(), "VirtualRouter", "VirtualRouter", 1) + ","
	}
	repeatedStringForVirtualRouterBackRefs += "}"
	s := strings.Join([]string{`&NetworkIpam{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`IpamSubnetMethod:` + fmt.Sprintf("%v", this.IpamSubnetMethod) + `,`,
		`IpamSubnets:` + strings.Replace(this.IpamSubnets.String(), "IpamSubnets", "IpamSubnets", 1) + `,`,
		`IpamSubnetting:` + fmt.Sprintf("%v", this.IpamSubnetting) + `,`,
		`NetworkIpamMGMT:` + strings.Replace(this.NetworkIpamMGMT.String(), "IpamType", "IpamType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualDNSRefs:` + repeatedStringForVirtualDNSRefs + `,`,
		`InstanceIPBackRefs:` + repeatedStringForInstanceIPBackRefs + `,`,
		`VirtualNetworkBackRefs:` + repeatedStringForVirtualNetworkBackRefs + `,`,
		`VirtualRouterBackRefs:` + repeatedStringForVirtualRouterBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkIpamTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkIpamTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkIpamVirtualDNSRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkIpamVirtualDNSRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkPolicy) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*NetworkPolicyTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "NetworkPolicyTagRef", "NetworkPolicyTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForSecurityLoggingObjectBackRefs := "[]*SecurityLoggingObject{"
	for _, f := range this.SecurityLoggingObjectBackRefs {
		repeatedStringForSecurityLoggingObjectBackRefs += strings.Replace(f.String(), "SecurityLoggingObject", "SecurityLoggingObject", 1) + ","
	}
	repeatedStringForSecurityLoggingObjectBackRefs += "}"
	repeatedStringForVirtualNetworkBackRefs := "[]*VirtualNetwork{"
	for _, f := range this.VirtualNetworkBackRefs {
		repeatedStringForVirtualNetworkBackRefs += strings.Replace(f.String(), "VirtualNetwork", "VirtualNetwork", 1) + ","
	}
	repeatedStringForVirtualNetworkBackRefs += "}"
	s := strings.Join([]string{`&NetworkPolicy{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`NetworkPolicyEntries:` + strings.Replace(this.NetworkPolicyEntries.String(), "PolicyEntriesType", "PolicyEntriesType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`SecurityLoggingObjectBackRefs:` + repeatedStringForSecurityLoggingObjectBackRefs + `,`,
		`VirtualNetworkBackRefs:` + repeatedStringForVirtualNetworkBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *NetworkPolicyTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NetworkPolicyTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeProfile) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHardwareRefs := "[]*NodeProfileHardwareRef{"
	for _, f := range this.HardwareRefs {
		repeatedStringForHardwareRefs += strings.Replace(f.String(), "NodeProfileHardwareRef", "NodeProfileHardwareRef", 1) + ","
	}
	repeatedStringForHardwareRefs += "}"
	repeatedStringForJobTemplateRefs := "[]*NodeProfileJobTemplateRef{"
	for _, f := range this.JobTemplateRefs {
		repeatedStringForJobTemplateRefs += strings.Replace(f.String(), "NodeProfileJobTemplateRef", "NodeProfileJobTemplateRef", 1) + ","
	}
	repeatedStringForJobTemplateRefs += "}"
	repeatedStringForRoleDefinitionRefs := "[]*NodeProfileRoleDefinitionRef{"
	for _, f := range this.RoleDefinitionRefs {
		repeatedStringForRoleDefinitionRefs += strings.Replace(f.String(), "NodeProfileRoleDefinitionRef", "NodeProfileRoleDefinitionRef", 1) + ","
	}
	repeatedStringForRoleDefinitionRefs += "}"
	repeatedStringForTagRefs := "[]*NodeProfileTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "NodeProfileTagRef", "NodeProfileTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForFabricBackRefs := "[]*Fabric{"
	for _, f := range this.FabricBackRefs {
		repeatedStringForFabricBackRefs += strings.Replace(f.String(), "Fabric", "Fabric", 1) + ","
	}
	repeatedStringForFabricBackRefs += "}"
	repeatedStringForNodeBackRefs := "[]*Node{"
	for _, f := range this.NodeBackRefs {
		repeatedStringForNodeBackRefs += strings.Replace(f.String(), "Node", "Node", 1) + ","
	}
	repeatedStringForNodeBackRefs += "}"
	repeatedStringForPhysicalRouterBackRefs := "[]*PhysicalRouter{"
	for _, f := range this.PhysicalRouterBackRefs {
		repeatedStringForPhysicalRouterBackRefs += strings.Replace(f.String(), "PhysicalRouter", "PhysicalRouter", 1) + ","
	}
	repeatedStringForPhysicalRouterBackRefs += "}"
	repeatedStringForRoleConfigs := "[]*RoleConfig{"
	for _, f := range this.RoleConfigs {
		repeatedStringForRoleConfigs += strings.Replace(f.String(), "RoleConfig", "RoleConfig", 1) + ","
	}
	repeatedStringForRoleConfigs += "}"
	s := strings.Join([]string{`&NodeProfile{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`NodeProfileDeviceFamily:` + fmt.Sprintf("%v", this.NodeProfileDeviceFamily) + `,`,
		`NodeProfileHitlessUpgrade:` + fmt.Sprintf("%v", this.NodeProfileHitlessUpgrade) + `,`,
		`NodeProfileRoles:` + strings.Replace(this.NodeProfileRoles.String(), "NodeProfileRolesType", "NodeProfileRolesType", 1) + `,`,
		`NodeProfileType:` + fmt.Sprintf("%v", this.NodeProfileType) + `,`,
		`NodeProfileVendor:` + fmt.Sprintf("%v", this.NodeProfileVendor) + `,`,
		`HardwareRefs:` + repeatedStringForHardwareRefs + `,`,
		`JobTemplateRefs:` + repeatedStringForJobTemplateRefs + `,`,
		`RoleDefinitionRefs:` + repeatedStringForRoleDefinitionRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`FabricBackRefs:` + repeatedStringForFabricBackRefs + `,`,
		`NodeBackRefs:` + repeatedStringForNodeBackRefs + `,`,
		`PhysicalRouterBackRefs:` + repeatedStringForPhysicalRouterBackRefs + `,`,
		`RoleConfigs:` + repeatedStringForRoleConfigs + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeProfileHardwareRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeProfileHardwareRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeProfileJobTemplateRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeProfileJobTemplateRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeProfileRoleDefinitionRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeProfileRoleDefinitionRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeProfileTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeProfileTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Node) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNodeProfileRefs := "[]*NodeNodeProfileRef{"
	for _, f := range this.NodeProfileRefs {
		repeatedStringForNodeProfileRefs += strings.Replace(f.String(), "NodeNodeProfileRef", "NodeNodeProfileRef", 1) + ","
	}
	repeatedStringForNodeProfileRefs += "}"
	repeatedStringForTagRefs := "[]*NodeTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "NodeTagRef", "NodeTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForPorts := "[]*Port{"
	for _, f := range this.Ports {
		repeatedStringForPorts += strings.Replace(f.String(), "Port", "Port", 1) + ","
	}
	repeatedStringForPorts += "}"
	repeatedStringForPortGroups := "[]*PortGroup{"
	for _, f := range this.PortGroups {
		repeatedStringForPortGroups += strings.Replace(f.String(), "PortGroup", "PortGroup", 1) + ","
	}
	repeatedStringForPortGroups += "}"
	s := strings.Join([]string{`&Node{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`BMSInfo:` + strings.Replace(this.BMSInfo.String(), "BaremetalServerInfo", "BaremetalServerInfo", 1) + `,`,
		`CloudInfo:` + strings.Replace(this.CloudInfo.String(), "CloudInstanceInfo", "CloudInstanceInfo", 1) + `,`,
		`DiskPartition:` + fmt.Sprintf("%v", this.DiskPartition) + `,`,
		`EsxiInfo:` + strings.Replace(this.EsxiInfo.String(), "ESXIHostInfo", "ESXIHostInfo", 1) + `,`,
		`Hostname:` + fmt.Sprintf("%v", this.Hostname) + `,`,
		`InterfaceName:` + fmt.Sprintf("%v", this.InterfaceName) + `,`,
		`IPAddress:` + fmt.Sprintf("%v", this.IPAddress) + `,`,
		`MacAddress:` + fmt.Sprintf("%v", this.MacAddress) + `,`,
		`NodeType:` + fmt.Sprintf("%v", this.NodeType) + `,`,
		`NodeProfileRefs:` + repeatedStringForNodeProfileRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`Ports:` + repeatedStringForPorts + `,`,
		`PortGroups:` + repeatedStringForPortGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeNodeProfileRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeNodeProfileRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OverlayRole) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*OverlayRoleTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "OverlayRoleTagRef", "OverlayRoleTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForPhysicalRouterBackRefs := "[]*PhysicalRouter{"
	for _, f := range this.PhysicalRouterBackRefs {
		repeatedStringForPhysicalRouterBackRefs += strings.Replace(f.String(), "PhysicalRouter", "PhysicalRouter", 1) + ","
	}
	repeatedStringForPhysicalRouterBackRefs += "}"
	repeatedStringForRoleDefinitionBackRefs := "[]*RoleDefinition{"
	for _, f := range this.RoleDefinitionBackRefs {
		repeatedStringForRoleDefinitionBackRefs += strings.Replace(f.String(), "RoleDefinition", "RoleDefinition", 1) + ","
	}
	repeatedStringForRoleDefinitionBackRefs += "}"
	s := strings.Join([]string{`&OverlayRole{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`PhysicalRouterBackRefs:` + repeatedStringForPhysicalRouterBackRefs + `,`,
		`RoleDefinitionBackRefs:` + repeatedStringForRoleDefinitionBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *OverlayRoleTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OverlayRoleTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeeringPolicy) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*PeeringPolicyTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "PeeringPolicyTagRef", "PeeringPolicyTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForE2ServiceProviderBackRefs := "[]*E2ServiceProvider{"
	for _, f := range this.E2ServiceProviderBackRefs {
		repeatedStringForE2ServiceProviderBackRefs += strings.Replace(f.String(), "E2ServiceProvider", "E2ServiceProvider", 1) + ","
	}
	repeatedStringForE2ServiceProviderBackRefs += "}"
	s := strings.Join([]string{`&PeeringPolicy{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`PeeringService:` + fmt.Sprintf("%v", this.PeeringService) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`E2ServiceProviderBackRefs:` + repeatedStringForE2ServiceProviderBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *PeeringPolicyTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PeeringPolicyTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalInterface) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPhysicalInterfaceRefs := "[]*PhysicalInterfacePhysicalInterfaceRef{"
	for _, f := range this.PhysicalInterfaceRefs {
		repeatedStringForPhysicalInterfaceRefs += strings.Replace(f.String(), "PhysicalInterfacePhysicalInterfaceRef", "PhysicalInterfacePhysicalInterfaceRef", 1) + ","
	}
	repeatedStringForPhysicalInterfaceRefs += "}"
	repeatedStringForPortRefs := "[]*PhysicalInterfacePortRef{"
	for _, f := range this.PortRefs {
		repeatedStringForPortRefs += strings.Replace(f.String(), "PhysicalInterfacePortRef", "PhysicalInterfacePortRef", 1) + ","
	}
	repeatedStringForPortRefs += "}"
	repeatedStringForTagRefs := "[]*PhysicalInterfaceTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "PhysicalInterfaceTagRef", "PhysicalInterfaceTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForLinkAggregationGroupBackRefs := "[]*LinkAggregationGroup{"
	for _, f := range this.LinkAggregationGroupBackRefs {
		repeatedStringForLinkAggregationGroupBackRefs += strings.Replace(f.String(), "LinkAggregationGroup", "LinkAggregationGroup", 1) + ","
	}
	repeatedStringForLinkAggregationGroupBackRefs += "}"
	repeatedStringForPhysicalInterfaceBackRefs := "[]*PhysicalInterface{"
	for _, f := range this.PhysicalInterfaceBackRefs {
		repeatedStringForPhysicalInterfaceBackRefs += strings.Replace(f.String(), "PhysicalInterface", "PhysicalInterface", 1) + ","
	}
	repeatedStringForPhysicalInterfaceBackRefs += "}"
	repeatedStringForServiceApplianceBackRefs := "[]*ServiceAppliance{"
	for _, f := range this.ServiceApplianceBackRefs {
		repeatedStringForServiceApplianceBackRefs += strings.Replace(f.String(), "ServiceAppliance", "ServiceAppliance", 1) + ","
	}
	repeatedStringForServiceApplianceBackRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	repeatedStringForVirtualPortGroupBackRefs := "[]*VirtualPortGroup{"
	for _, f := range this.VirtualPortGroupBackRefs {
		repeatedStringForVirtualPortGroupBackRefs += strings.Replace(f.String(), "VirtualPortGroup", "VirtualPortGroup", 1) + ","
	}
	repeatedStringForVirtualPortGroupBackRefs += "}"
	repeatedStringForLogicalInterfaces := "[]*LogicalInterface{"
	for _, f := range this.LogicalInterfaces {
		repeatedStringForLogicalInterfaces += strings.Replace(f.String(), "LogicalInterface", "LogicalInterface", 1) + ","
	}
	repeatedStringForLogicalInterfaces += "}"
	s := strings.Join([]string{`&PhysicalInterface{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`EthernetSegmentIdentifier:` + fmt.Sprintf("%v", this.EthernetSegmentIdentifier) + `,`,
		`PhysicalInterfaceMacAddresses:` + strings.Replace(this.PhysicalInterfaceMacAddresses.String(), "MacAddressesType", "MacAddressesType", 1) + `,`,
		`PhysicalInterfacePortID:` + fmt.Sprintf("%v", this.PhysicalInterfacePortID) + `,`,
		`PhysicalInterfaceType:` + fmt.Sprintf("%v", this.PhysicalInterfaceType) + `,`,
		`PhysicalInterfaceRefs:` + repeatedStringForPhysicalInterfaceRefs + `,`,
		`PortRefs:` + repeatedStringForPortRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`LinkAggregationGroupBackRefs:` + repeatedStringForLinkAggregationGroupBackRefs + `,`,
		`PhysicalInterfaceBackRefs:` + repeatedStringForPhysicalInterfaceBackRefs + `,`,
		`ServiceApplianceBackRefs:` + repeatedStringForServiceApplianceBackRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`VirtualPortGroupBackRefs:` + repeatedStringForVirtualPortGroupBackRefs + `,`,
		`LogicalInterfaces:` + repeatedStringForLogicalInterfaces + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalInterfacePhysicalInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalInterfacePhysicalInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalInterfacePortRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalInterfacePortRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalInterfaceTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalInterfaceTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRole) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*PhysicalRoleTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "PhysicalRoleTagRef", "PhysicalRoleTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForDeviceFunctionalGroupBackRefs := "[]*DeviceFunctionalGroup{"
	for _, f := range this.DeviceFunctionalGroupBackRefs {
		repeatedStringForDeviceFunctionalGroupBackRefs += strings.Replace(f.String(), "DeviceFunctionalGroup", "DeviceFunctionalGroup", 1) + ","
	}
	repeatedStringForDeviceFunctionalGroupBackRefs += "}"
	repeatedStringForPhysicalRouterBackRefs := "[]*PhysicalRouter{"
	for _, f := range this.PhysicalRouterBackRefs {
		repeatedStringForPhysicalRouterBackRefs += strings.Replace(f.String(), "PhysicalRouter", "PhysicalRouter", 1) + ","
	}
	repeatedStringForPhysicalRouterBackRefs += "}"
	repeatedStringForRoleDefinitionBackRefs := "[]*RoleDefinition{"
	for _, f := range this.RoleDefinitionBackRefs {
		repeatedStringForRoleDefinitionBackRefs += strings.Replace(f.String(), "RoleDefinition", "RoleDefinition", 1) + ","
	}
	repeatedStringForRoleDefinitionBackRefs += "}"
	s := strings.Join([]string{`&PhysicalRole{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`DeviceFunctionalGroupBackRefs:` + repeatedStringForDeviceFunctionalGroupBackRefs + `,`,
		`PhysicalRouterBackRefs:` + repeatedStringForPhysicalRouterBackRefs + `,`,
		`RoleDefinitionBackRefs:` + repeatedStringForRoleDefinitionBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRoleTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalRoleTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRouter) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBGPRouterRefs := "[]*PhysicalRouterBGPRouterRef{"
	for _, f := range this.BGPRouterRefs {
		repeatedStringForBGPRouterRefs += strings.Replace(f.String(), "PhysicalRouterBGPRouterRef", "PhysicalRouterBGPRouterRef", 1) + ","
	}
	repeatedStringForBGPRouterRefs += "}"
	repeatedStringForDeviceChassisRefs := "[]*PhysicalRouterDeviceChassisRef{"
	for _, f := range this.DeviceChassisRefs {
		repeatedStringForDeviceChassisRefs += strings.Replace(f.String(), "PhysicalRouterDeviceChassisRef", "PhysicalRouterDeviceChassisRef", 1) + ","
	}
	repeatedStringForDeviceChassisRefs += "}"
	repeatedStringForDeviceFunctionalGroupRefs := "[]*PhysicalRouterDeviceFunctionalGroupRef{"
	for _, f := range this.DeviceFunctionalGroupRefs {
		repeatedStringForDeviceFunctionalGroupRefs += strings.Replace(f.String(), "PhysicalRouterDeviceFunctionalGroupRef", "PhysicalRouterDeviceFunctionalGroupRef", 1) + ","
	}
	repeatedStringForDeviceFunctionalGroupRefs += "}"
	repeatedStringForDeviceImageRefs := "[]*PhysicalRouterDeviceImageRef{"
	for _, f := range this.DeviceImageRefs {
		repeatedStringForDeviceImageRefs += strings.Replace(f.String(), "PhysicalRouterDeviceImageRef", "PhysicalRouterDeviceImageRef", 1) + ","
	}
	repeatedStringForDeviceImageRefs += "}"
	repeatedStringForFabricRefs := "[]*PhysicalRouterFabricRef{"
	for _, f := range this.FabricRefs {
		repeatedStringForFabricRefs += strings.Replace(f.String(), "PhysicalRouterFabricRef", "PhysicalRouterFabricRef", 1) + ","
	}
	repeatedStringForFabricRefs += "}"
	repeatedStringForIntentMapRefs := "[]*PhysicalRouterIntentMapRef{"
	for _, f := range this.IntentMapRefs {
		repeatedStringForIntentMapRefs += strings.Replace(f.String(), "PhysicalRouterIntentMapRef", "PhysicalRouterIntentMapRef", 1) + ","
	}
	repeatedStringForIntentMapRefs += "}"
	repeatedStringForNodeProfileRefs := "[]*PhysicalRouterNodeProfileRef{"
	for _, f := range this.NodeProfileRefs {
		repeatedStringForNodeProfileRefs += strings.Replace(f.String(), "PhysicalRouterNodeProfileRef", "PhysicalRouterNodeProfileRef", 1) + ","
	}
	repeatedStringForNodeProfileRefs += "}"
	repeatedStringForOverlayRoleRefs := "[]*PhysicalRouterOverlayRoleRef{"
	for _, f := range this.OverlayRoleRefs {
		repeatedStringForOverlayRoleRefs += strings.Replace(f.String(), "PhysicalRouterOverlayRoleRef", "PhysicalRouterOverlayRoleRef", 1) + ","
	}
	repeatedStringForOverlayRoleRefs += "}"
	repeatedStringForPhysicalRoleRefs := "[]*PhysicalRouterPhysicalRoleRef{"
	for _, f := range this.PhysicalRoleRefs {
		repeatedStringForPhysicalRoleRefs += strings.Replace(f.String(), "PhysicalRouterPhysicalRoleRef", "PhysicalRouterPhysicalRoleRef", 1) + ","
	}
	repeatedStringForPhysicalRoleRefs += "}"
	repeatedStringForTagRefs := "[]*PhysicalRouterTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "PhysicalRouterTagRef", "PhysicalRouterTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForTelemetryProfileRefs := "[]*PhysicalRouterTelemetryProfileRef{"
	for _, f := range this.TelemetryProfileRefs {
		repeatedStringForTelemetryProfileRefs += strings.Replace(f.String(), "PhysicalRouterTelemetryProfileRef", "PhysicalRouterTelemetryProfileRef", 1) + ","
	}
	repeatedStringForTelemetryProfileRefs += "}"
	repeatedStringForVirtualNetworkRefs := "[]*PhysicalRouterVirtualNetworkRef{"
	for _, f := range this.VirtualNetworkRefs {
		repeatedStringForVirtualNetworkRefs += strings.Replace(f.String(), "PhysicalRouterVirtualNetworkRef", "PhysicalRouterVirtualNetworkRef", 1) + ","
	}
	repeatedStringForVirtualNetworkRefs += "}"
	repeatedStringForVirtualRouterRefs := "[]*PhysicalRouterVirtualRouterRef{"
	for _, f := range this.VirtualRouterRefs {
		repeatedStringForVirtualRouterRefs += strings.Replace(f.String(), "PhysicalRouterVirtualRouterRef", "PhysicalRouterVirtualRouterRef", 1) + ","
	}
	repeatedStringForVirtualRouterRefs += "}"
	repeatedStringForE2ServiceProviderBackRefs := "[]*E2ServiceProvider{"
	for _, f := range this.E2ServiceProviderBackRefs {
		repeatedStringForE2ServiceProviderBackRefs += strings.Replace(f.String(), "E2ServiceProvider", "E2ServiceProvider", 1) + ","
	}
	repeatedStringForE2ServiceProviderBackRefs += "}"
	repeatedStringForInstanceIPBackRefs := "[]*InstanceIP{"
	for _, f := range this.InstanceIPBackRefs {
		repeatedStringForInstanceIPBackRefs += strings.Replace(f.String(), "InstanceIP", "InstanceIP", 1) + ","
	}
	repeatedStringForInstanceIPBackRefs += "}"
	repeatedStringForLogicalRouterBackRefs := "[]*LogicalRouter{"
	for _, f := range this.LogicalRouterBackRefs {
		repeatedStringForLogicalRouterBackRefs += strings.Replace(f.String(), "LogicalRouter", "LogicalRouter", 1) + ","
	}
	repeatedStringForLogicalRouterBackRefs += "}"
	repeatedStringForNetworkDeviceConfigBackRefs := "[]*NetworkDeviceConfig{"
	for _, f := range this.NetworkDeviceConfigBackRefs {
		repeatedStringForNetworkDeviceConfigBackRefs += strings.Replace(f.String(), "NetworkDeviceConfig", "NetworkDeviceConfig", 1) + ","
	}
	repeatedStringForNetworkDeviceConfigBackRefs += "}"
	repeatedStringForServiceEndpointBackRefs := "[]*ServiceEndpoint{"
	for _, f := range this.ServiceEndpointBackRefs {
		repeatedStringForServiceEndpointBackRefs += strings.Replace(f.String(), "ServiceEndpoint", "ServiceEndpoint", 1) + ","
	}
	repeatedStringForServiceEndpointBackRefs += "}"
	repeatedStringForCliConfigs := "[]*CliConfig{"
	for _, f := range this.CliConfigs {
		repeatedStringForCliConfigs += strings.Replace(f.String(), "CliConfig", "CliConfig", 1) + ","
	}
	repeatedStringForCliConfigs += "}"
	repeatedStringForHardwareInventorys := "[]*HardwareInventory{"
	for _, f := range this.HardwareInventorys {
		repeatedStringForHardwareInventorys += strings.Replace(f.String(), "HardwareInventory", "HardwareInventory", 1) + ","
	}
	repeatedStringForHardwareInventorys += "}"
	repeatedStringForLinkAggregationGroups := "[]*LinkAggregationGroup{"
	for _, f := range this.LinkAggregationGroups {
		repeatedStringForLinkAggregationGroups += strings.Replace(f.String(), "LinkAggregationGroup", "LinkAggregationGroup", 1) + ","
	}
	repeatedStringForLinkAggregationGroups += "}"
	repeatedStringForLogicalInterfaces := "[]*LogicalInterface{"
	for _, f := range this.LogicalInterfaces {
		repeatedStringForLogicalInterfaces += strings.Replace(f.String(), "LogicalInterface", "LogicalInterface", 1) + ","
	}
	repeatedStringForLogicalInterfaces += "}"
	repeatedStringForPhysicalInterfaces := "[]*PhysicalInterface{"
	for _, f := range this.PhysicalInterfaces {
		repeatedStringForPhysicalInterfaces += strings.Replace(f.String(), "PhysicalInterface", "PhysicalInterface", 1) + ","
	}
	repeatedStringForPhysicalInterfaces += "}"
	s := strings.Join([]string{`&PhysicalRouter{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`PhysicalRouterAutonomousSystem:` + strings.Replace(this.PhysicalRouterAutonomousSystem.String(), "AutonomousSystemsType", "AutonomousSystemsType", 1) + `,`,
		`PhysicalRouterCliCommitState:` + fmt.Sprintf("%v", this.PhysicalRouterCliCommitState) + `,`,
		`PhysicalRouterDataplaneIP:` + fmt.Sprintf("%v", this.PhysicalRouterDataplaneIP) + `,`,
		`PhysicalRouterDeviceFamily:` + fmt.Sprintf("%v", this.PhysicalRouterDeviceFamily) + `,`,
		`PhysicalRouterDHCPParameters:` + strings.Replace(this.PhysicalRouterDHCPParameters.String(), "DnsmasqLeaseParameters", "DnsmasqLeaseParameters", 1) + `,`,
		`PhysicalRouterEncryptionType:` + fmt.Sprintf("%v", this.PhysicalRouterEncryptionType) + `,`,
		`PhysicalRouterHostname:` + fmt.Sprintf("%v", this.PhysicalRouterHostname) + `,`,
		`PhysicalRouterJunosServicePorts:` + strings.Replace(this.PhysicalRouterJunosServicePorts.String(), "JunosServicePorts", "JunosServicePorts", 1) + `,`,
		`PhysicalRouterLLDP:` + fmt.Sprintf("%v", this.PhysicalRouterLLDP) + `,`,
		`PhysicalRouterLoopbackIP:` + fmt.Sprintf("%v", this.PhysicalRouterLoopbackIP) + `,`,
		`PhysicalRouterManagedState:` + fmt.Sprintf("%v", this.PhysicalRouterManagedState) + `,`,
		`PhysicalRouterManagementIP:` + fmt.Sprintf("%v", this.PhysicalRouterManagementIP) + `,`,
		`PhysicalRouterManagementMac:` + fmt.Sprintf("%v", this.PhysicalRouterManagementMac) + `,`,
		`PhysicalRouterOsVersion:` + fmt.Sprintf("%v", this.PhysicalRouterOsVersion) + `,`,
		`PhysicalRouterProductName:` + fmt.Sprintf("%v", this.PhysicalRouterProductName) + `,`,
		`PhysicalRouterReplicatorLoopbackIP:` + fmt.Sprintf("%v", this.PhysicalRouterReplicatorLoopbackIP) + `,`,
		`PhysicalRouterRole:` + fmt.Sprintf("%v", this.PhysicalRouterRole) + `,`,
		`PhysicalRouterSerialNumber:` + fmt.Sprintf("%v", this.PhysicalRouterSerialNumber) + `,`,
		`PhysicalRouterSNMP:` + fmt.Sprintf("%v", this.PhysicalRouterSNMP) + `,`,
		`PhysicalRouterSNMPCredentials:` + strings.Replace(this.PhysicalRouterSNMPCredentials.String(), "SNMPCredentials", "SNMPCredentials", 1) + `,`,
		`PhysicalRouterSupplementalConfig:` + fmt.Sprintf("%v", this.PhysicalRouterSupplementalConfig) + `,`,
		`PhysicalRouterUnderlayConfig:` + fmt.Sprintf("%v", this.PhysicalRouterUnderlayConfig) + `,`,
		`PhysicalRouterUnderlayManaged:` + fmt.Sprintf("%v", this.PhysicalRouterUnderlayManaged) + `,`,
		`PhysicalRouterUserCredentials:` + strings.Replace(this.PhysicalRouterUserCredentials.String(), "UserCredentials", "UserCredentials", 1) + `,`,
		`PhysicalRouterVendorName:` + fmt.Sprintf("%v", this.PhysicalRouterVendorName) + `,`,
		`PhysicalRouterVNCManaged:` + fmt.Sprintf("%v", this.PhysicalRouterVNCManaged) + `,`,
		`RoutingBridgingRoles:` + strings.Replace(this.RoutingBridgingRoles.String(), "RoutingBridgingRolesType", "RoutingBridgingRolesType", 1) + `,`,
		`TelemetryInfo:` + strings.Replace(this.TelemetryInfo.String(), "TelemetryStateInfo", "TelemetryStateInfo", 1) + `,`,
		`BGPRouterRefs:` + repeatedStringForBGPRouterRefs + `,`,
		`DeviceChassisRefs:` + repeatedStringForDeviceChassisRefs + `,`,
		`DeviceFunctionalGroupRefs:` + repeatedStringForDeviceFunctionalGroupRefs + `,`,
		`DeviceImageRefs:` + repeatedStringForDeviceImageRefs + `,`,
		`FabricRefs:` + repeatedStringForFabricRefs + `,`,
		`IntentMapRefs:` + repeatedStringForIntentMapRefs + `,`,
		`NodeProfileRefs:` + repeatedStringForNodeProfileRefs + `,`,
		`OverlayRoleRefs:` + repeatedStringForOverlayRoleRefs + `,`,
		`PhysicalRoleRefs:` + repeatedStringForPhysicalRoleRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`TelemetryProfileRefs:` + repeatedStringForTelemetryProfileRefs + `,`,
		`VirtualNetworkRefs:` + repeatedStringForVirtualNetworkRefs + `,`,
		`VirtualRouterRefs:` + repeatedStringForVirtualRouterRefs + `,`,
		`E2ServiceProviderBackRefs:` + repeatedStringForE2ServiceProviderBackRefs + `,`,
		`InstanceIPBackRefs:` + repeatedStringForInstanceIPBackRefs + `,`,
		`LogicalRouterBackRefs:` + repeatedStringForLogicalRouterBackRefs + `,`,
		`NetworkDeviceConfigBackRefs:` + repeatedStringForNetworkDeviceConfigBackRefs + `,`,
		`ServiceEndpointBackRefs:` + repeatedStringForServiceEndpointBackRefs + `,`,
		`CliConfigs:` + repeatedStringForCliConfigs + `,`,
		`HardwareInventorys:` + repeatedStringForHardwareInventorys + `,`,
		`LinkAggregationGroups:` + repeatedStringForLinkAggregationGroups + `,`,
		`LogicalInterfaces:` + repeatedStringForLogicalInterfaces + `,`,
		`PhysicalInterfaces:` + repeatedStringForPhysicalInterfaces + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRouterBGPRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalRouterBGPRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRouterDeviceChassisRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalRouterDeviceChassisRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRouterDeviceFunctionalGroupRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalRouterDeviceFunctionalGroupRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRouterDeviceImageRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalRouterDeviceImageRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRouterFabricRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalRouterFabricRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRouterIntentMapRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalRouterIntentMapRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRouterNodeProfileRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalRouterNodeProfileRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRouterOverlayRoleRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalRouterOverlayRoleRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRouterPhysicalRoleRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalRouterPhysicalRoleRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRouterTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalRouterTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRouterTelemetryProfileRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalRouterTelemetryProfileRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRouterVirtualNetworkRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalRouterVirtualNetworkRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PhysicalRouterVirtualRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PhysicalRouterVirtualRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyManagement) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*PolicyManagementTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "PolicyManagementTagRef", "PolicyManagementTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForAddressGroups := "[]*AddressGroup{"
	for _, f := range this.AddressGroups {
		repeatedStringForAddressGroups += strings.Replace(f.String(), "AddressGroup", "AddressGroup", 1) + ","
	}
	repeatedStringForAddressGroups += "}"
	repeatedStringForApplicationPolicySets := "[]*ApplicationPolicySet{"
	for _, f := range this.ApplicationPolicySets {
		repeatedStringForApplicationPolicySets += strings.Replace(f.String(), "ApplicationPolicySet", "ApplicationPolicySet", 1) + ","
	}
	repeatedStringForApplicationPolicySets += "}"
	repeatedStringForFirewallPolicys := "[]*FirewallPolicy{"
	for _, f := range this.FirewallPolicys {
		repeatedStringForFirewallPolicys += strings.Replace(f.String(), "FirewallPolicy", "FirewallPolicy", 1) + ","
	}
	repeatedStringForFirewallPolicys += "}"
	repeatedStringForFirewallRules := "[]*FirewallRule{"
	for _, f := range this.FirewallRules {
		repeatedStringForFirewallRules += strings.Replace(f.String(), "FirewallRule", "FirewallRule", 1) + ","
	}
	repeatedStringForFirewallRules += "}"
	repeatedStringForServiceGroups := "[]*ServiceGroup{"
	for _, f := range this.ServiceGroups {
		repeatedStringForServiceGroups += strings.Replace(f.String(), "ServiceGroup", "ServiceGroup", 1) + ","
	}
	repeatedStringForServiceGroups += "}"
	s := strings.Join([]string{`&PolicyManagement{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`AddressGroups:` + repeatedStringForAddressGroups + `,`,
		`ApplicationPolicySets:` + repeatedStringForApplicationPolicySets + `,`,
		`FirewallPolicys:` + repeatedStringForFirewallPolicys + `,`,
		`FirewallRules:` + repeatedStringForFirewallRules + `,`,
		`ServiceGroups:` + repeatedStringForServiceGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyManagementTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyManagementTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPortRefs := "[]*PortGroupPortRef{"
	for _, f := range this.PortRefs {
		repeatedStringForPortRefs += strings.Replace(f.String(), "PortGroupPortRef", "PortGroupPortRef", 1) + ","
	}
	repeatedStringForPortRefs += "}"
	repeatedStringForTagRefs := "[]*PortGroupTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "PortGroupTagRef", "PortGroupTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&PortGroup{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`BMSPortGroupInfo:` + strings.Replace(this.BMSPortGroupInfo.String(), "BaremetalPortGroupInfo", "BaremetalPortGroupInfo", 1) + `,`,
		`PortRefs:` + repeatedStringForPortRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortGroupPortRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortGroupPortRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortGroupTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortGroupTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortProfile) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStormControlProfileRefs := "[]*PortProfileStormControlProfileRef{"
	for _, f := range this.StormControlProfileRefs {
		repeatedStringForStormControlProfileRefs += strings.Replace(f.String(), "PortProfileStormControlProfileRef", "PortProfileStormControlProfileRef", 1) + ","
	}
	repeatedStringForStormControlProfileRefs += "}"
	repeatedStringForTagRefs := "[]*PortProfileTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "PortProfileTagRef", "PortProfileTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	repeatedStringForVirtualPortGroupBackRefs := "[]*VirtualPortGroup{"
	for _, f := range this.VirtualPortGroupBackRefs {
		repeatedStringForVirtualPortGroupBackRefs += strings.Replace(f.String(), "VirtualPortGroup", "VirtualPortGroup", 1) + ","
	}
	repeatedStringForVirtualPortGroupBackRefs += "}"
	s := strings.Join([]string{`&PortProfile{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`StormControlProfileRefs:` + repeatedStringForStormControlProfileRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`VirtualPortGroupBackRefs:` + repeatedStringForVirtualPortGroupBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortProfileStormControlProfileRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortProfileStormControlProfileRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortProfileTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortProfileTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Port) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*PortTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "PortTagRef", "PortTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForPhysicalInterfaceBackRefs := "[]*PhysicalInterface{"
	for _, f := range this.PhysicalInterfaceBackRefs {
		repeatedStringForPhysicalInterfaceBackRefs += strings.Replace(f.String(), "PhysicalInterface", "PhysicalInterface", 1) + ","
	}
	repeatedStringForPhysicalInterfaceBackRefs += "}"
	repeatedStringForPortGroupBackRefs := "[]*PortGroup{"
	for _, f := range this.PortGroupBackRefs {
		repeatedStringForPortGroupBackRefs += strings.Replace(f.String(), "PortGroup", "PortGroup", 1) + ","
	}
	repeatedStringForPortGroupBackRefs += "}"
	s := strings.Join([]string{`&Port{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`BMSPortInfo:` + strings.Replace(this.BMSPortInfo.String(), "BaremetalPortInfo", "BaremetalPortInfo", 1) + `,`,
		`EsxiPortInfo:` + strings.Replace(this.EsxiPortInfo.String(), "ESXIProperties", "ESXIProperties", 1) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`PortGroupUUID:` + fmt.Sprintf("%v", this.PortGroupUUID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`PhysicalInterfaceBackRefs:` + repeatedStringForPhysicalInterfaceBackRefs + `,`,
		`PortGroupBackRefs:` + repeatedStringForPortGroupBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortTuple) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLogicalRouterRefs := "[]*PortTupleLogicalRouterRef{"
	for _, f := range this.LogicalRouterRefs {
		repeatedStringForLogicalRouterRefs += strings.Replace(f.String(), "PortTupleLogicalRouterRef", "PortTupleLogicalRouterRef", 1) + ","
	}
	repeatedStringForLogicalRouterRefs += "}"
	repeatedStringForTagRefs := "[]*PortTupleTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "PortTupleTagRef", "PortTupleTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualNetworkRefs := "[]*PortTupleVirtualNetworkRef{"
	for _, f := range this.VirtualNetworkRefs {
		repeatedStringForVirtualNetworkRefs += strings.Replace(f.String(), "PortTupleVirtualNetworkRef", "PortTupleVirtualNetworkRef", 1) + ","
	}
	repeatedStringForVirtualNetworkRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	s := strings.Join([]string{`&PortTuple{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`LogicalRouterRefs:` + repeatedStringForLogicalRouterRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualNetworkRefs:` + repeatedStringForVirtualNetworkRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortTupleLogicalRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortTupleLogicalRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortTupleTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortTupleTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortTupleVirtualNetworkRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortTupleVirtualNetworkRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Project) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAliasIPPoolRefs := "[]*ProjectAliasIPPoolRef{"
	for _, f := range this.AliasIPPoolRefs {
		repeatedStringForAliasIPPoolRefs += strings.Replace(f.String(), "ProjectAliasIPPoolRef", "ProjectAliasIPPoolRef", 1) + ","
	}
	repeatedStringForAliasIPPoolRefs += "}"
	repeatedStringForApplicationPolicySetRefs := "[]*ProjectApplicationPolicySetRef{"
	for _, f := range this.ApplicationPolicySetRefs {
		repeatedStringForApplicationPolicySetRefs += strings.Replace(f.String(), "ProjectApplicationPolicySetRef", "ProjectApplicationPolicySetRef", 1) + ","
	}
	repeatedStringForApplicationPolicySetRefs += "}"
	repeatedStringForFloatingIPPoolRefs := "[]*ProjectFloatingIPPoolRef{"
	for _, f := range this.FloatingIPPoolRefs {
		repeatedStringForFloatingIPPoolRefs += strings.Replace(f.String(), "ProjectFloatingIPPoolRef", "ProjectFloatingIPPoolRef", 1) + ","
	}
	repeatedStringForFloatingIPPoolRefs += "}"
	repeatedStringForNamespaceRefs := "[]*ProjectNamespaceRef{"
	for _, f := range this.NamespaceRefs {
		repeatedStringForNamespaceRefs += strings.Replace(f.String(), "ProjectNamespaceRef", "ProjectNamespaceRef", 1) + ","
	}
	repeatedStringForNamespaceRefs += "}"
	repeatedStringForTagRefs := "[]*ProjectTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ProjectTagRef", "ProjectTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForAliasIPBackRefs := "[]*AliasIP{"
	for _, f := range this.AliasIPBackRefs {
		repeatedStringForAliasIPBackRefs += strings.Replace(f.String(), "AliasIP", "AliasIP", 1) + ","
	}
	repeatedStringForAliasIPBackRefs += "}"
	repeatedStringForFloatingIPBackRefs := "[]*FloatingIP{"
	for _, f := range this.FloatingIPBackRefs {
		repeatedStringForFloatingIPBackRefs += strings.Replace(f.String(), "FloatingIP", "FloatingIP", 1) + ","
	}
	repeatedStringForFloatingIPBackRefs += "}"
	repeatedStringForAddressGroups := "[]*AddressGroup{"
	for _, f := range this.AddressGroups {
		repeatedStringForAddressGroups += strings.Replace(f.String(), "AddressGroup", "AddressGroup", 1) + ","
	}
	repeatedStringForAddressGroups += "}"
	repeatedStringForAlarms := "[]*Alarm{"
	for _, f := range this.Alarms {
		repeatedStringForAlarms += strings.Replace(f.String(), "Alarm", "Alarm", 1) + ","
	}
	repeatedStringForAlarms += "}"
	repeatedStringForAPIAccessLists := "[]*APIAccessList{"
	for _, f := range this.APIAccessLists {
		repeatedStringForAPIAccessLists += strings.Replace(f.String(), "APIAccessList", "APIAccessList", 1) + ","
	}
	repeatedStringForAPIAccessLists += "}"
	repeatedStringForApplicationPolicySets := "[]*ApplicationPolicySet{"
	for _, f := range this.ApplicationPolicySets {
		repeatedStringForApplicationPolicySets += strings.Replace(f.String(), "ApplicationPolicySet", "ApplicationPolicySet", 1) + ","
	}
	repeatedStringForApplicationPolicySets += "}"
	repeatedStringForBGPAsAServices := "[]*BGPAsAService{"
	for _, f := range this.BGPAsAServices {
		repeatedStringForBGPAsAServices += strings.Replace(f.String(), "BGPAsAService", "BGPAsAService", 1) + ","
	}
	repeatedStringForBGPAsAServices += "}"
	repeatedStringForBGPVPNs := "[]*BGPVPN{"
	for _, f := range this.BGPVPNs {
		repeatedStringForBGPVPNs += strings.Replace(f.String(), "BGPVPN", "BGPVPN", 1) + ","
	}
	repeatedStringForBGPVPNs += "}"
	repeatedStringForDeviceFunctionalGroups := "[]*DeviceFunctionalGroup{"
	for _, f := range this.DeviceFunctionalGroups {
		repeatedStringForDeviceFunctionalGroups += strings.Replace(f.String(), "DeviceFunctionalGroup", "DeviceFunctionalGroup", 1) + ","
	}
	repeatedStringForDeviceFunctionalGroups += "}"
	repeatedStringForFirewallPolicys := "[]*FirewallPolicy{"
	for _, f := range this.FirewallPolicys {
		repeatedStringForFirewallPolicys += strings.Replace(f.String(), "FirewallPolicy", "FirewallPolicy", 1) + ","
	}
	repeatedStringForFirewallPolicys += "}"
	repeatedStringForFirewallRules := "[]*FirewallRule{"
	for _, f := range this.FirewallRules {
		repeatedStringForFirewallRules += strings.Replace(f.String(), "FirewallRule", "FirewallRule", 1) + ","
	}
	repeatedStringForFirewallRules += "}"
	repeatedStringForHostBasedServices := "[]*HostBasedService{"
	for _, f := range this.HostBasedServices {
		repeatedStringForHostBasedServices += strings.Replace(f.String(), "HostBasedService", "HostBasedService", 1) + ","
	}
	repeatedStringForHostBasedServices += "}"
	repeatedStringForInterfaceRouteTables := "[]*InterfaceRouteTable{"
	for _, f := range this.InterfaceRouteTables {
		repeatedStringForInterfaceRouteTables += strings.Replace(f.String(), "InterfaceRouteTable", "InterfaceRouteTable", 1) + ","
	}
	repeatedStringForInterfaceRouteTables += "}"
	repeatedStringForLoadbalancers := "[]*Loadbalancer{"
	for _, f := range this.Loadbalancers {
		repeatedStringForLoadbalancers += strings.Replace(f.String(), "Loadbalancer", "Loadbalancer", 1) + ","
	}
	repeatedStringForLoadbalancers += "}"
	repeatedStringForLoadbalancerHealthmonitors := "[]*LoadbalancerHealthmonitor{"
	for _, f := range this.LoadbalancerHealthmonitors {
		repeatedStringForLoadbalancerHealthmonitors += strings.Replace(f.String(), "LoadbalancerHealthmonitor", "LoadbalancerHealthmonitor", 1) + ","
	}
	repeatedStringForLoadbalancerHealthmonitors += "}"
	repeatedStringForLoadbalancerListeners := "[]*LoadbalancerListener{"
	for _, f := range this.LoadbalancerListeners {
		repeatedStringForLoadbalancerListeners += strings.Replace(f.String(), "LoadbalancerListener", "LoadbalancerListener", 1) + ","
	}
	repeatedStringForLoadbalancerListeners += "}"
	repeatedStringForLoadbalancerPools := "[]*LoadbalancerPool{"
	for _, f := range this.LoadbalancerPools {
		repeatedStringForLoadbalancerPools += strings.Replace(f.String(), "LoadbalancerPool", "LoadbalancerPool", 1) + ","
	}
	repeatedStringForLoadbalancerPools += "}"
	repeatedStringForLogicalRouters := "[]*LogicalRouter{"
	for _, f := range this.LogicalRouters {
		repeatedStringForLogicalRouters += strings.Replace(f.String(), "LogicalRouter", "LogicalRouter", 1) + ","
	}
	repeatedStringForLogicalRouters += "}"
	repeatedStringForMulticastPolicys := "[]*MulticastPolicy{"
	for _, f := range this.MulticastPolicys {
		repeatedStringForMulticastPolicys += strings.Replace(f.String(), "MulticastPolicy", "MulticastPolicy", 1) + ","
	}
	repeatedStringForMulticastPolicys += "}"
	repeatedStringForNetworkIpams := "[]*NetworkIpam{"
	for _, f := range this.NetworkIpams {
		repeatedStringForNetworkIpams += strings.Replace(f.String(), "NetworkIpam", "NetworkIpam", 1) + ","
	}
	repeatedStringForNetworkIpams += "}"
	repeatedStringForNetworkPolicys := "[]*NetworkPolicy{"
	for _, f := range this.NetworkPolicys {
		repeatedStringForNetworkPolicys += strings.Replace(f.String(), "NetworkPolicy", "NetworkPolicy", 1) + ","
	}
	repeatedStringForNetworkPolicys += "}"
	repeatedStringForPolicyManagements := "[]*PolicyManagement{"
	for _, f := range this.PolicyManagements {
		repeatedStringForPolicyManagements += strings.Replace(f.String(), "PolicyManagement", "PolicyManagement", 1) + ","
	}
	repeatedStringForPolicyManagements += "}"
	repeatedStringForPortProfiles := "[]*PortProfile{"
	for _, f := range this.PortProfiles {
		repeatedStringForPortProfiles += strings.Replace(f.String(), "PortProfile", "PortProfile", 1) + ","
	}
	repeatedStringForPortProfiles += "}"
	repeatedStringForQosConfigs := "[]*QosConfig{"
	for _, f := range this.QosConfigs {
		repeatedStringForQosConfigs += strings.Replace(f.String(), "QosConfig", "QosConfig", 1) + ","
	}
	repeatedStringForQosConfigs += "}"
	repeatedStringForRouteAggregates := "[]*RouteAggregate{"
	for _, f := range this.RouteAggregates {
		repeatedStringForRouteAggregates += strings.Replace(f.String(), "RouteAggregate", "RouteAggregate", 1) + ","
	}
	repeatedStringForRouteAggregates += "}"
	repeatedStringForRouteTables := "[]*RouteTable{"
	for _, f := range this.RouteTables {
		repeatedStringForRouteTables += strings.Replace(f.String(), "RouteTable", "RouteTable", 1) + ","
	}
	repeatedStringForRouteTables += "}"
	repeatedStringForRoutingPolicys := "[]*RoutingPolicy{"
	for _, f := range this.RoutingPolicys {
		repeatedStringForRoutingPolicys += strings.Replace(f.String(), "RoutingPolicy", "RoutingPolicy", 1) + ","
	}
	repeatedStringForRoutingPolicys += "}"
	repeatedStringForSecurityGroups := "[]*SecurityGroup{"
	for _, f := range this.SecurityGroups {
		repeatedStringForSecurityGroups += strings.Replace(f.String(), "SecurityGroup", "SecurityGroup", 1) + ","
	}
	repeatedStringForSecurityGroups += "}"
	repeatedStringForSecurityLoggingObjects := "[]*SecurityLoggingObject{"
	for _, f := range this.SecurityLoggingObjects {
		repeatedStringForSecurityLoggingObjects += strings.Replace(f.String(), "SecurityLoggingObject", "SecurityLoggingObject", 1) + ","
	}
	repeatedStringForSecurityLoggingObjects += "}"
	repeatedStringForServiceGroups := "[]*ServiceGroup{"
	for _, f := range this.ServiceGroups {
		repeatedStringForServiceGroups += strings.Replace(f.String(), "ServiceGroup", "ServiceGroup", 1) + ","
	}
	repeatedStringForServiceGroups += "}"
	repeatedStringForServiceHealthChecks := "[]*ServiceHealthCheck{"
	for _, f := range this.ServiceHealthChecks {
		repeatedStringForServiceHealthChecks += strings.Replace(f.String(), "ServiceHealthCheck", "ServiceHealthCheck", 1) + ","
	}
	repeatedStringForServiceHealthChecks += "}"
	repeatedStringForServiceInstances := "[]*ServiceInstance{"
	for _, f := range this.ServiceInstances {
		repeatedStringForServiceInstances += strings.Replace(f.String(), "ServiceInstance", "ServiceInstance", 1) + ","
	}
	repeatedStringForServiceInstances += "}"
	repeatedStringForSflowProfiles := "[]*SflowProfile{"
	for _, f := range this.SflowProfiles {
		repeatedStringForSflowProfiles += strings.Replace(f.String(), "SflowProfile", "SflowProfile", 1) + ","
	}
	repeatedStringForSflowProfiles += "}"
	repeatedStringForStormControlProfiles := "[]*StormControlProfile{"
	for _, f := range this.StormControlProfiles {
		repeatedStringForStormControlProfiles += strings.Replace(f.String(), "StormControlProfile", "StormControlProfile", 1) + ","
	}
	repeatedStringForStormControlProfiles += "}"
	repeatedStringForStructuredSyslogConfigs := "[]*StructuredSyslogConfig{"
	for _, f := range this.StructuredSyslogConfigs {
		repeatedStringForStructuredSyslogConfigs += strings.Replace(f.String(), "StructuredSyslogConfig", "StructuredSyslogConfig", 1) + ","
	}
	repeatedStringForStructuredSyslogConfigs += "}"
	repeatedStringForTags := "[]*Tag{"
	for _, f := range this.Tags {
		repeatedStringForTags += strings.Replace(f.String(), "Tag", "Tag", 1) + ","
	}
	repeatedStringForTags += "}"
	repeatedStringForTelemetryProfiles := "[]*TelemetryProfile{"
	for _, f := range this.TelemetryProfiles {
		repeatedStringForTelemetryProfiles += strings.Replace(f.String(), "TelemetryProfile", "TelemetryProfile", 1) + ","
	}
	repeatedStringForTelemetryProfiles += "}"
	repeatedStringForVirtualIPs := "[]*VirtualIP{"
	for _, f := range this.VirtualIPs {
		repeatedStringForVirtualIPs += strings.Replace(f.String(), "VirtualIP", "VirtualIP", 1) + ","
	}
	repeatedStringForVirtualIPs += "}"
	repeatedStringForVirtualMachineInterfaces := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaces {
		repeatedStringForVirtualMachineInterfaces += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaces += "}"
	repeatedStringForVirtualNetworks := "[]*VirtualNetwork{"
	for _, f := range this.VirtualNetworks {
		repeatedStringForVirtualNetworks += strings.Replace(f.String(), "VirtualNetwork", "VirtualNetwork", 1) + ","
	}
	repeatedStringForVirtualNetworks += "}"
	repeatedStringForVirtualPortGroups := "[]*VirtualPortGroup{"
	for _, f := range this.VirtualPortGroups {
		repeatedStringForVirtualPortGroups += strings.Replace(f.String(), "VirtualPortGroup", "VirtualPortGroup", 1) + ","
	}
	repeatedStringForVirtualPortGroups += "}"
	s := strings.Join([]string{`&Project{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AlarmEnable:` + fmt.Sprintf("%v", this.AlarmEnable) + `,`,
		`EnableSecurityPolicyDraft:` + fmt.Sprintf("%v", this.EnableSecurityPolicyDraft) + `,`,
		`Quota:` + strings.Replace(this.Quota.String(), "QuotaType", "QuotaType", 1) + `,`,
		`VxlanRouting:` + fmt.Sprintf("%v", this.VxlanRouting) + `,`,
		`AliasIPPoolRefs:` + repeatedStringForAliasIPPoolRefs + `,`,
		`ApplicationPolicySetRefs:` + repeatedStringForApplicationPolicySetRefs + `,`,
		`FloatingIPPoolRefs:` + repeatedStringForFloatingIPPoolRefs + `,`,
		`NamespaceRefs:` + repeatedStringForNamespaceRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`AliasIPBackRefs:` + repeatedStringForAliasIPBackRefs + `,`,
		`FloatingIPBackRefs:` + repeatedStringForFloatingIPBackRefs + `,`,
		`AddressGroups:` + repeatedStringForAddressGroups + `,`,
		`Alarms:` + repeatedStringForAlarms + `,`,
		`APIAccessLists:` + repeatedStringForAPIAccessLists + `,`,
		`ApplicationPolicySets:` + repeatedStringForApplicationPolicySets + `,`,
		`BGPAsAServices:` + repeatedStringForBGPAsAServices + `,`,
		`BGPVPNs:` + repeatedStringForBGPVPNs + `,`,
		`DeviceFunctionalGroups:` + repeatedStringForDeviceFunctionalGroups + `,`,
		`FirewallPolicys:` + repeatedStringForFirewallPolicys + `,`,
		`FirewallRules:` + repeatedStringForFirewallRules + `,`,
		`HostBasedServices:` + repeatedStringForHostBasedServices + `,`,
		`InterfaceRouteTables:` + repeatedStringForInterfaceRouteTables + `,`,
		`Loadbalancers:` + repeatedStringForLoadbalancers + `,`,
		`LoadbalancerHealthmonitors:` + repeatedStringForLoadbalancerHealthmonitors + `,`,
		`LoadbalancerListeners:` + repeatedStringForLoadbalancerListeners + `,`,
		`LoadbalancerPools:` + repeatedStringForLoadbalancerPools + `,`,
		`LogicalRouters:` + repeatedStringForLogicalRouters + `,`,
		`MulticastPolicys:` + repeatedStringForMulticastPolicys + `,`,
		`NetworkIpams:` + repeatedStringForNetworkIpams + `,`,
		`NetworkPolicys:` + repeatedStringForNetworkPolicys + `,`,
		`PolicyManagements:` + repeatedStringForPolicyManagements + `,`,
		`PortProfiles:` + repeatedStringForPortProfiles + `,`,
		`QosConfigs:` + repeatedStringForQosConfigs + `,`,
		`RouteAggregates:` + repeatedStringForRouteAggregates + `,`,
		`RouteTables:` + repeatedStringForRouteTables + `,`,
		`RoutingPolicys:` + repeatedStringForRoutingPolicys + `,`,
		`SecurityGroups:` + repeatedStringForSecurityGroups + `,`,
		`SecurityLoggingObjects:` + repeatedStringForSecurityLoggingObjects + `,`,
		`ServiceGroups:` + repeatedStringForServiceGroups + `,`,
		`ServiceHealthChecks:` + repeatedStringForServiceHealthChecks + `,`,
		`ServiceInstances:` + repeatedStringForServiceInstances + `,`,
		`SflowProfiles:` + repeatedStringForSflowProfiles + `,`,
		`StormControlProfiles:` + repeatedStringForStormControlProfiles + `,`,
		`StructuredSyslogConfigs:` + repeatedStringForStructuredSyslogConfigs + `,`,
		`Tags:` + repeatedStringForTags + `,`,
		`TelemetryProfiles:` + repeatedStringForTelemetryProfiles + `,`,
		`VirtualIPs:` + repeatedStringForVirtualIPs + `,`,
		`VirtualMachineInterfaces:` + repeatedStringForVirtualMachineInterfaces + `,`,
		`VirtualNetworks:` + repeatedStringForVirtualNetworks + `,`,
		`VirtualPortGroups:` + repeatedStringForVirtualPortGroups + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProjectAliasIPPoolRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProjectAliasIPPoolRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProjectApplicationPolicySetRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProjectApplicationPolicySetRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProjectFloatingIPPoolRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProjectFloatingIPPoolRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProjectNamespaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProjectNamespaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "SubnetType", "SubnetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProjectTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProjectTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProviderAttachment) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*ProviderAttachmentTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ProviderAttachmentTagRef", "ProviderAttachmentTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualRouterRefs := "[]*ProviderAttachmentVirtualRouterRef{"
	for _, f := range this.VirtualRouterRefs {
		repeatedStringForVirtualRouterRefs += strings.Replace(f.String(), "ProviderAttachmentVirtualRouterRef", "ProviderAttachmentVirtualRouterRef", 1) + ","
	}
	repeatedStringForVirtualRouterRefs += "}"
	s := strings.Join([]string{`&ProviderAttachment{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualRouterRefs:` + repeatedStringForVirtualRouterRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProviderAttachmentTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProviderAttachmentTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProviderAttachmentVirtualRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProviderAttachmentVirtualRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QosConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGlobalSystemConfigRefs := "[]*QosConfigGlobalSystemConfigRef{"
	for _, f := range this.GlobalSystemConfigRefs {
		repeatedStringForGlobalSystemConfigRefs += strings.Replace(f.String(), "QosConfigGlobalSystemConfigRef", "QosConfigGlobalSystemConfigRef", 1) + ","
	}
	repeatedStringForGlobalSystemConfigRefs += "}"
	repeatedStringForTagRefs := "[]*QosConfigTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "QosConfigTagRef", "QosConfigTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	repeatedStringForVirtualNetworkBackRefs := "[]*VirtualNetwork{"
	for _, f := range this.VirtualNetworkBackRefs {
		repeatedStringForVirtualNetworkBackRefs += strings.Replace(f.String(), "VirtualNetwork", "VirtualNetwork", 1) + ","
	}
	repeatedStringForVirtualNetworkBackRefs += "}"
	s := strings.Join([]string{`&QosConfig{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`DefaultForwardingClassID:` + fmt.Sprintf("%v", this.DefaultForwardingClassID) + `,`,
		`DSCPEntries:` + strings.Replace(this.DSCPEntries.String(), "QosIdForwardingClassPairs", "QosIdForwardingClassPairs", 1) + `,`,
		`MPLSExpEntries:` + strings.Replace(this.MPLSExpEntries.String(), "QosIdForwardingClassPairs", "QosIdForwardingClassPairs", 1) + `,`,
		`QosConfigType:` + fmt.Sprintf("%v", this.QosConfigType) + `,`,
		`VlanPriorityEntries:` + strings.Replace(this.VlanPriorityEntries.String(), "QosIdForwardingClassPairs", "QosIdForwardingClassPairs", 1) + `,`,
		`GlobalSystemConfigRefs:` + repeatedStringForGlobalSystemConfigRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`VirtualNetworkBackRefs:` + repeatedStringForVirtualNetworkBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *QosConfigGlobalSystemConfigRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QosConfigGlobalSystemConfigRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QosConfigTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QosConfigTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QosQueue) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*QosQueueTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "QosQueueTagRef", "QosQueueTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForForwardingClassBackRefs := "[]*ForwardingClass{"
	for _, f := range this.ForwardingClassBackRefs {
		repeatedStringForForwardingClassBackRefs += strings.Replace(f.String(), "ForwardingClass", "ForwardingClass", 1) + ","
	}
	repeatedStringForForwardingClassBackRefs += "}"
	s := strings.Join([]string{`&QosQueue{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`MaxBandwidth:` + fmt.Sprintf("%v", this.MaxBandwidth) + `,`,
		`MinBandwidth:` + fmt.Sprintf("%v", this.MinBandwidth) + `,`,
		`QosQueueIdentifier:` + fmt.Sprintf("%v", this.QosQueueIdentifier) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`ForwardingClassBackRefs:` + repeatedStringForForwardingClassBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *QosQueueTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QosQueueTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*RoleConfigTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "RoleConfigTagRef", "RoleConfigTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&RoleConfig{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`RoleConfigConfig:` + fmt.Sprintf("%v", this.RoleConfigConfig) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleConfigTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoleConfigTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleDefinition) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFeatureRefs := "[]*RoleDefinitionFeatureRef{"
	for _, f := range this.FeatureRefs {
		repeatedStringForFeatureRefs += strings.Replace(f.String(), "RoleDefinitionFeatureRef", "RoleDefinitionFeatureRef", 1) + ","
	}
	repeatedStringForFeatureRefs += "}"
	repeatedStringForOverlayRoleRefs := "[]*RoleDefinitionOverlayRoleRef{"
	for _, f := range this.OverlayRoleRefs {
		repeatedStringForOverlayRoleRefs += strings.Replace(f.String(), "RoleDefinitionOverlayRoleRef", "RoleDefinitionOverlayRoleRef", 1) + ","
	}
	repeatedStringForOverlayRoleRefs += "}"
	repeatedStringForPhysicalRoleRefs := "[]*RoleDefinitionPhysicalRoleRef{"
	for _, f := range this.PhysicalRoleRefs {
		repeatedStringForPhysicalRoleRefs += strings.Replace(f.String(), "RoleDefinitionPhysicalRoleRef", "RoleDefinitionPhysicalRoleRef", 1) + ","
	}
	repeatedStringForPhysicalRoleRefs += "}"
	repeatedStringForTagRefs := "[]*RoleDefinitionTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "RoleDefinitionTagRef", "RoleDefinitionTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForNodeProfileBackRefs := "[]*NodeProfile{"
	for _, f := range this.NodeProfileBackRefs {
		repeatedStringForNodeProfileBackRefs += strings.Replace(f.String(), "NodeProfile", "NodeProfile", 1) + ","
	}
	repeatedStringForNodeProfileBackRefs += "}"
	repeatedStringForFeatureConfigs := "[]*FeatureConfig{"
	for _, f := range this.FeatureConfigs {
		repeatedStringForFeatureConfigs += strings.Replace(f.String(), "FeatureConfig", "FeatureConfig", 1) + ","
	}
	repeatedStringForFeatureConfigs += "}"
	s := strings.Join([]string{`&RoleDefinition{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`FeatureRefs:` + repeatedStringForFeatureRefs + `,`,
		`OverlayRoleRefs:` + repeatedStringForOverlayRoleRefs + `,`,
		`PhysicalRoleRefs:` + repeatedStringForPhysicalRoleRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`NodeProfileBackRefs:` + repeatedStringForNodeProfileBackRefs + `,`,
		`FeatureConfigs:` + repeatedStringForFeatureConfigs + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleDefinitionFeatureRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoleDefinitionFeatureRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleDefinitionOverlayRoleRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoleDefinitionOverlayRoleRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleDefinitionPhysicalRoleRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoleDefinitionPhysicalRoleRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoleDefinitionTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoleDefinitionTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteAggregate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoutingInstanceRefs := "[]*RouteAggregateRoutingInstanceRef{"
	for _, f := range this.RoutingInstanceRefs {
		repeatedStringForRoutingInstanceRefs += strings.Replace(f.String(), "RouteAggregateRoutingInstanceRef", "RouteAggregateRoutingInstanceRef", 1) + ","
	}
	repeatedStringForRoutingInstanceRefs += "}"
	repeatedStringForServiceInstanceRefs := "[]*RouteAggregateServiceInstanceRef{"
	for _, f := range this.ServiceInstanceRefs {
		repeatedStringForServiceInstanceRefs += strings.Replace(f.String(), "RouteAggregateServiceInstanceRef", "RouteAggregateServiceInstanceRef", 1) + ","
	}
	repeatedStringForServiceInstanceRefs += "}"
	repeatedStringForTagRefs := "[]*RouteAggregateTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "RouteAggregateTagRef", "RouteAggregateTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&RouteAggregate{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AggregateRouteEntries:` + strings.Replace(this.AggregateRouteEntries.String(), "RouteListType", "RouteListType", 1) + `,`,
		`AggregateRouteNexthop:` + fmt.Sprintf("%v", this.AggregateRouteNexthop) + `,`,
		`RoutingInstanceRefs:` + repeatedStringForRoutingInstanceRefs + `,`,
		`ServiceInstanceRefs:` + repeatedStringForServiceInstanceRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteAggregateRoutingInstanceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteAggregateRoutingInstanceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteAggregateServiceInstanceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteAggregateServiceInstanceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "ServiceInterfaceTag", "ServiceInterfaceTag", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteAggregateTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteAggregateTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTable) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*RouteTableTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "RouteTableTagRef", "RouteTableTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForLogicalRouterBackRefs := "[]*LogicalRouter{"
	for _, f := range this.LogicalRouterBackRefs {
		repeatedStringForLogicalRouterBackRefs += strings.Replace(f.String(), "LogicalRouter", "LogicalRouter", 1) + ","
	}
	repeatedStringForLogicalRouterBackRefs += "}"
	repeatedStringForVirtualNetworkBackRefs := "[]*VirtualNetwork{"
	for _, f := range this.VirtualNetworkBackRefs {
		repeatedStringForVirtualNetworkBackRefs += strings.Replace(f.String(), "VirtualNetwork", "VirtualNetwork", 1) + ","
	}
	repeatedStringForVirtualNetworkBackRefs += "}"
	s := strings.Join([]string{`&RouteTable{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`Routes:` + strings.Replace(this.Routes.String(), "RouteTableType", "RouteTableType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`LogicalRouterBackRefs:` + repeatedStringForLogicalRouterBackRefs + `,`,
		`VirtualNetworkBackRefs:` + repeatedStringForVirtualNetworkBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTableTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTableTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTarget) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*RouteTargetTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "RouteTargetTagRef", "RouteTargetTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForLogicalRouterBackRefs := "[]*LogicalRouter{"
	for _, f := range this.LogicalRouterBackRefs {
		repeatedStringForLogicalRouterBackRefs += strings.Replace(f.String(), "LogicalRouter", "LogicalRouter", 1) + ","
	}
	repeatedStringForLogicalRouterBackRefs += "}"
	repeatedStringForRoutingInstanceBackRefs := "[]*RoutingInstance{"
	for _, f := range this.RoutingInstanceBackRefs {
		repeatedStringForRoutingInstanceBackRefs += strings.Replace(f.String(), "RoutingInstance", "RoutingInstance", 1) + ","
	}
	repeatedStringForRoutingInstanceBackRefs += "}"
	s := strings.Join([]string{`&RouteTarget{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`LogicalRouterBackRefs:` + repeatedStringForLogicalRouterBackRefs + `,`,
		`RoutingInstanceBackRefs:` + repeatedStringForRoutingInstanceBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTargetTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTargetTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoutingInstance) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRouteTargetRefs := "[]*RoutingInstanceRouteTargetRef{"
	for _, f := range this.RouteTargetRefs {
		repeatedStringForRouteTargetRefs += strings.Replace(f.String(), "RoutingInstanceRouteTargetRef", "RoutingInstanceRouteTargetRef", 1) + ","
	}
	repeatedStringForRouteTargetRefs += "}"
	repeatedStringForRoutingInstanceRefs := "[]*RoutingInstanceRoutingInstanceRef{"
	for _, f := range this.RoutingInstanceRefs {
		repeatedStringForRoutingInstanceRefs += strings.Replace(f.String(), "RoutingInstanceRoutingInstanceRef", "RoutingInstanceRoutingInstanceRef", 1) + ","
	}
	repeatedStringForRoutingInstanceRefs += "}"
	repeatedStringForTagRefs := "[]*RoutingInstanceTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "RoutingInstanceTagRef", "RoutingInstanceTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForRouteAggregateBackRefs := "[]*RouteAggregate{"
	for _, f := range this.RouteAggregateBackRefs {
		repeatedStringForRouteAggregateBackRefs += strings.Replace(f.String(), "RouteAggregate", "RouteAggregate", 1) + ","
	}
	repeatedStringForRouteAggregateBackRefs += "}"
	repeatedStringForRoutingInstanceBackRefs := "[]*RoutingInstance{"
	for _, f := range this.RoutingInstanceBackRefs {
		repeatedStringForRoutingInstanceBackRefs += strings.Replace(f.String(), "RoutingInstance", "RoutingInstance", 1) + ","
	}
	repeatedStringForRoutingInstanceBackRefs += "}"
	repeatedStringForRoutingPolicyBackRefs := "[]*RoutingPolicy{"
	for _, f := range this.RoutingPolicyBackRefs {
		repeatedStringForRoutingPolicyBackRefs += strings.Replace(f.String(), "RoutingPolicy", "RoutingPolicy", 1) + ","
	}
	repeatedStringForRoutingPolicyBackRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	repeatedStringForBGPRouters := "[]*BGPRouter{"
	for _, f := range this.BGPRouters {
		repeatedStringForBGPRouters += strings.Replace(f.String(), "BGPRouter", "BGPRouter", 1) + ","
	}
	repeatedStringForBGPRouters += "}"
	s := strings.Join([]string{`&RoutingInstance{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`DefaultCeProtocol:` + strings.Replace(this.DefaultCeProtocol.String(), "DefaultProtocolType", "DefaultProtocolType", 1) + `,`,
		`EvpnIpv6ServiceChainInformation:` + strings.Replace(this.EvpnIpv6ServiceChainInformation.String(), "ServiceChainInfo", "ServiceChainInfo", 1) + `,`,
		`EvpnServiceChainInformation:` + strings.Replace(this.EvpnServiceChainInformation.String(), "ServiceChainInfo", "ServiceChainInfo", 1) + `,`,
		`Ipv6ServiceChainInformation:` + strings.Replace(this.Ipv6ServiceChainInformation.String(), "ServiceChainInfo", "ServiceChainInfo", 1) + `,`,
		`RoutingInstanceFabricSnat:` + fmt.Sprintf("%v", this.RoutingInstanceFabricSnat) + `,`,
		`RoutingInstanceHasPNF:` + fmt.Sprintf("%v", this.RoutingInstanceHasPNF) + `,`,
		`RoutingInstanceIsDefault:` + fmt.Sprintf("%v", this.RoutingInstanceIsDefault) + `,`,
		`ServiceChainInformation:` + strings.Replace(this.ServiceChainInformation.String(), "ServiceChainInfo", "ServiceChainInfo", 1) + `,`,
		`StaticRouteEntries:` + strings.Replace(this.StaticRouteEntries.String(), "StaticRouteEntriesType", "StaticRouteEntriesType", 1) + `,`,
		`RouteTargetRefs:` + repeatedStringForRouteTargetRefs + `,`,
		`RoutingInstanceRefs:` + repeatedStringForRoutingInstanceRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`RouteAggregateBackRefs:` + repeatedStringForRouteAggregateBackRefs + `,`,
		`RoutingInstanceBackRefs:` + repeatedStringForRoutingInstanceBackRefs + `,`,
		`RoutingPolicyBackRefs:` + repeatedStringForRoutingPolicyBackRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`BGPRouters:` + repeatedStringForBGPRouters + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoutingInstanceRouteTargetRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoutingInstanceRouteTargetRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "InstanceTargetType", "InstanceTargetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoutingInstanceRoutingInstanceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoutingInstanceRoutingInstanceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "ConnectionType", "ConnectionType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoutingInstanceTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoutingInstanceTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoutingPolicy) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoutingInstanceRefs := "[]*RoutingPolicyRoutingInstanceRef{"
	for _, f := range this.RoutingInstanceRefs {
		repeatedStringForRoutingInstanceRefs += strings.Replace(f.String(), "RoutingPolicyRoutingInstanceRef", "RoutingPolicyRoutingInstanceRef", 1) + ","
	}
	repeatedStringForRoutingInstanceRefs += "}"
	repeatedStringForServiceInstanceRefs := "[]*RoutingPolicyServiceInstanceRef{"
	for _, f := range this.ServiceInstanceRefs {
		repeatedStringForServiceInstanceRefs += strings.Replace(f.String(), "RoutingPolicyServiceInstanceRef", "RoutingPolicyServiceInstanceRef", 1) + ","
	}
	repeatedStringForServiceInstanceRefs += "}"
	repeatedStringForTagRefs := "[]*RoutingPolicyTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "RoutingPolicyTagRef", "RoutingPolicyTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualNetworkBackRefs := "[]*VirtualNetwork{"
	for _, f := range this.VirtualNetworkBackRefs {
		repeatedStringForVirtualNetworkBackRefs += strings.Replace(f.String(), "VirtualNetwork", "VirtualNetwork", 1) + ","
	}
	repeatedStringForVirtualNetworkBackRefs += "}"
	s := strings.Join([]string{`&RoutingPolicy{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`RoutingPolicyEntries:` + strings.Replace(this.RoutingPolicyEntries.String(), "PolicyStatementType", "PolicyStatementType", 1) + `,`,
		`RoutingInstanceRefs:` + repeatedStringForRoutingInstanceRefs + `,`,
		`ServiceInstanceRefs:` + repeatedStringForServiceInstanceRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualNetworkBackRefs:` + repeatedStringForVirtualNetworkBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoutingPolicyRoutingInstanceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoutingPolicyRoutingInstanceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "RoutingPolicyType", "RoutingPolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoutingPolicyServiceInstanceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoutingPolicyServiceInstanceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "RoutingPolicyServiceInstanceType", "RoutingPolicyServiceInstanceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoutingPolicyTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoutingPolicyTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*SecurityGroupTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "SecurityGroupTagRef", "SecurityGroupTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForSecurityLoggingObjectBackRefs := "[]*SecurityLoggingObject{"
	for _, f := range this.SecurityLoggingObjectBackRefs {
		repeatedStringForSecurityLoggingObjectBackRefs += strings.Replace(f.String(), "SecurityLoggingObject", "SecurityLoggingObject", 1) + ","
	}
	repeatedStringForSecurityLoggingObjectBackRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	repeatedStringForVirtualPortGroupBackRefs := "[]*VirtualPortGroup{"
	for _, f := range this.VirtualPortGroupBackRefs {
		repeatedStringForVirtualPortGroupBackRefs += strings.Replace(f.String(), "VirtualPortGroup", "VirtualPortGroup", 1) + ","
	}
	repeatedStringForVirtualPortGroupBackRefs += "}"
	repeatedStringForAccessControlLists := "[]*AccessControlList{"
	for _, f := range this.AccessControlLists {
		repeatedStringForAccessControlLists += strings.Replace(f.String(), "AccessControlList", "AccessControlList", 1) + ","
	}
	repeatedStringForAccessControlLists += "}"
	s := strings.Join([]string{`&SecurityGroup{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ConfiguredSecurityGroupID:` + fmt.Sprintf("%v", this.ConfiguredSecurityGroupID) + `,`,
		`SecurityGroupEntries:` + strings.Replace(this.SecurityGroupEntries.String(), "PolicyEntriesType", "PolicyEntriesType", 1) + `,`,
		`SecurityGroupID:` + fmt.Sprintf("%v", this.SecurityGroupID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`SecurityLoggingObjectBackRefs:` + repeatedStringForSecurityLoggingObjectBackRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`VirtualPortGroupBackRefs:` + repeatedStringForVirtualPortGroupBackRefs + `,`,
		`AccessControlLists:` + repeatedStringForAccessControlLists + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityGroupTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityGroupTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityLoggingObject) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNetworkPolicyRefs := "[]*SecurityLoggingObjectNetworkPolicyRef{"
	for _, f := range this.NetworkPolicyRefs {
		repeatedStringForNetworkPolicyRefs += strings.Replace(f.String(), "SecurityLoggingObjectNetworkPolicyRef", "SecurityLoggingObjectNetworkPolicyRef", 1) + ","
	}
	repeatedStringForNetworkPolicyRefs += "}"
	repeatedStringForSecurityGroupRefs := "[]*SecurityLoggingObjectSecurityGroupRef{"
	for _, f := range this.SecurityGroupRefs {
		repeatedStringForSecurityGroupRefs += strings.Replace(f.String(), "SecurityLoggingObjectSecurityGroupRef", "SecurityLoggingObjectSecurityGroupRef", 1) + ","
	}
	repeatedStringForSecurityGroupRefs += "}"
	repeatedStringForTagRefs := "[]*SecurityLoggingObjectTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "SecurityLoggingObjectTagRef", "SecurityLoggingObjectTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForFirewallPolicyBackRefs := "[]*FirewallPolicy{"
	for _, f := range this.FirewallPolicyBackRefs {
		repeatedStringForFirewallPolicyBackRefs += strings.Replace(f.String(), "FirewallPolicy", "FirewallPolicy", 1) + ","
	}
	repeatedStringForFirewallPolicyBackRefs += "}"
	repeatedStringForFirewallRuleBackRefs := "[]*FirewallRule{"
	for _, f := range this.FirewallRuleBackRefs {
		repeatedStringForFirewallRuleBackRefs += strings.Replace(f.String(), "FirewallRule", "FirewallRule", 1) + ","
	}
	repeatedStringForFirewallRuleBackRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	repeatedStringForVirtualNetworkBackRefs := "[]*VirtualNetwork{"
	for _, f := range this.VirtualNetworkBackRefs {
		repeatedStringForVirtualNetworkBackRefs += strings.Replace(f.String(), "VirtualNetwork", "VirtualNetwork", 1) + ","
	}
	repeatedStringForVirtualNetworkBackRefs += "}"
	s := strings.Join([]string{`&SecurityLoggingObject{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`SecurityLoggingObjectRate:` + fmt.Sprintf("%v", this.SecurityLoggingObjectRate) + `,`,
		`SecurityLoggingObjectRules:` + strings.Replace(this.SecurityLoggingObjectRules.String(), "SecurityLoggingObjectRuleListType", "SecurityLoggingObjectRuleListType", 1) + `,`,
		`NetworkPolicyRefs:` + repeatedStringForNetworkPolicyRefs + `,`,
		`SecurityGroupRefs:` + repeatedStringForSecurityGroupRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`FirewallPolicyBackRefs:` + repeatedStringForFirewallPolicyBackRefs + `,`,
		`FirewallRuleBackRefs:` + repeatedStringForFirewallRuleBackRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`VirtualNetworkBackRefs:` + repeatedStringForVirtualNetworkBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityLoggingObjectNetworkPolicyRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityLoggingObjectNetworkPolicyRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "SecurityLoggingObjectRuleListType", "SecurityLoggingObjectRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityLoggingObjectSecurityGroupRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityLoggingObjectSecurityGroupRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "SecurityLoggingObjectRuleListType", "SecurityLoggingObjectRuleListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityLoggingObjectTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityLoggingObjectTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceAppliance) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPhysicalInterfaceRefs := "[]*ServiceAppliancePhysicalInterfaceRef{"
	for _, f := range this.PhysicalInterfaceRefs {
		repeatedStringForPhysicalInterfaceRefs += strings.Replace(f.String(), "ServiceAppliancePhysicalInterfaceRef", "ServiceAppliancePhysicalInterfaceRef", 1) + ","
	}
	repeatedStringForPhysicalInterfaceRefs += "}"
	repeatedStringForTagRefs := "[]*ServiceApplianceTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ServiceApplianceTagRef", "ServiceApplianceTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&ServiceAppliance{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ServiceApplianceIPAddress:` + fmt.Sprintf("%v", this.ServiceApplianceIPAddress) + `,`,
		`ServiceApplianceProperties:` + strings.Replace(this.ServiceApplianceProperties.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ServiceApplianceUserCredentials:` + strings.Replace(this.ServiceApplianceUserCredentials.String(), "UserCredentials", "UserCredentials", 1) + `,`,
		`ServiceApplianceVirtualizationType:` + fmt.Sprintf("%v", this.ServiceApplianceVirtualizationType) + `,`,
		`PhysicalInterfaceRefs:` + repeatedStringForPhysicalInterfaceRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceAppliancePhysicalInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceAppliancePhysicalInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "ServiceApplianceInterfaceType", "ServiceApplianceInterfaceType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceApplianceTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceApplianceTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceApplianceSet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*ServiceApplianceSetTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ServiceApplianceSetTagRef", "ServiceApplianceSetTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForLoadbalancerBackRefs := "[]*Loadbalancer{"
	for _, f := range this.LoadbalancerBackRefs {
		repeatedStringForLoadbalancerBackRefs += strings.Replace(f.String(), "Loadbalancer", "Loadbalancer", 1) + ","
	}
	repeatedStringForLoadbalancerBackRefs += "}"
	repeatedStringForLoadbalancerPoolBackRefs := "[]*LoadbalancerPool{"
	for _, f := range this.LoadbalancerPoolBackRefs {
		repeatedStringForLoadbalancerPoolBackRefs += strings.Replace(f.String(), "LoadbalancerPool", "LoadbalancerPool", 1) + ","
	}
	repeatedStringForLoadbalancerPoolBackRefs += "}"
	repeatedStringForServiceTemplateBackRefs := "[]*ServiceTemplate{"
	for _, f := range this.ServiceTemplateBackRefs {
		repeatedStringForServiceTemplateBackRefs += strings.Replace(f.String(), "ServiceTemplate", "ServiceTemplate", 1) + ","
	}
	repeatedStringForServiceTemplateBackRefs += "}"
	repeatedStringForServiceAppliances := "[]*ServiceAppliance{"
	for _, f := range this.ServiceAppliances {
		repeatedStringForServiceAppliances += strings.Replace(f.String(), "ServiceAppliance", "ServiceAppliance", 1) + ","
	}
	repeatedStringForServiceAppliances += "}"
	s := strings.Join([]string{`&ServiceApplianceSet{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ServiceApplianceDriver:` + fmt.Sprintf("%v", this.ServiceApplianceDriver) + `,`,
		`ServiceApplianceHaMode:` + fmt.Sprintf("%v", this.ServiceApplianceHaMode) + `,`,
		`ServiceApplianceSetProperties:` + strings.Replace(this.ServiceApplianceSetProperties.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ServiceApplianceSetVirtualizationType:` + fmt.Sprintf("%v", this.ServiceApplianceSetVirtualizationType) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`LoadbalancerBackRefs:` + repeatedStringForLoadbalancerBackRefs + `,`,
		`LoadbalancerPoolBackRefs:` + repeatedStringForLoadbalancerPoolBackRefs + `,`,
		`ServiceTemplateBackRefs:` + repeatedStringForServiceTemplateBackRefs + `,`,
		`ServiceAppliances:` + repeatedStringForServiceAppliances + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceApplianceSetTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceApplianceSetTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceConnectionModule) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServiceObjectRefs := "[]*ServiceConnectionModuleServiceObjectRef{"
	for _, f := range this.ServiceObjectRefs {
		repeatedStringForServiceObjectRefs += strings.Replace(f.String(), "ServiceConnectionModuleServiceObjectRef", "ServiceConnectionModuleServiceObjectRef", 1) + ","
	}
	repeatedStringForServiceObjectRefs += "}"
	repeatedStringForTagRefs := "[]*ServiceConnectionModuleTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ServiceConnectionModuleTagRef", "ServiceConnectionModuleTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForServiceEndpointBackRefs := "[]*ServiceEndpoint{"
	for _, f := range this.ServiceEndpointBackRefs {
		repeatedStringForServiceEndpointBackRefs += strings.Replace(f.String(), "ServiceEndpoint", "ServiceEndpoint", 1) + ","
	}
	repeatedStringForServiceEndpointBackRefs += "}"
	s := strings.Join([]string{`&ServiceConnectionModule{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`E2Service:` + fmt.Sprintf("%v", this.E2Service) + `,`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`ServiceObjectRefs:` + repeatedStringForServiceObjectRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`ServiceEndpointBackRefs:` + repeatedStringForServiceEndpointBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceConnectionModuleServiceObjectRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceConnectionModuleServiceObjectRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceConnectionModuleTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceConnectionModuleTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPhysicalRouterRefs := "[]*ServiceEndpointPhysicalRouterRef{"
	for _, f := range this.PhysicalRouterRefs {
		repeatedStringForPhysicalRouterRefs += strings.Replace(f.String(), "ServiceEndpointPhysicalRouterRef", "ServiceEndpointPhysicalRouterRef", 1) + ","
	}
	repeatedStringForPhysicalRouterRefs += "}"
	repeatedStringForServiceConnectionModuleRefs := "[]*ServiceEndpointServiceConnectionModuleRef{"
	for _, f := range this.ServiceConnectionModuleRefs {
		repeatedStringForServiceConnectionModuleRefs += strings.Replace(f.String(), "ServiceEndpointServiceConnectionModuleRef", "ServiceEndpointServiceConnectionModuleRef", 1) + ","
	}
	repeatedStringForServiceConnectionModuleRefs += "}"
	repeatedStringForServiceObjectRefs := "[]*ServiceEndpointServiceObjectRef{"
	for _, f := range this.ServiceObjectRefs {
		repeatedStringForServiceObjectRefs += strings.Replace(f.String(), "ServiceEndpointServiceObjectRef", "ServiceEndpointServiceObjectRef", 1) + ","
	}
	repeatedStringForServiceObjectRefs += "}"
	repeatedStringForTagRefs := "[]*ServiceEndpointTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ServiceEndpointTagRef", "ServiceEndpointTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	s := strings.Join([]string{`&ServiceEndpoint{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`PhysicalRouterRefs:` + repeatedStringForPhysicalRouterRefs + `,`,
		`ServiceConnectionModuleRefs:` + repeatedStringForServiceConnectionModuleRefs + `,`,
		`ServiceObjectRefs:` + repeatedStringForServiceObjectRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEndpointPhysicalRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEndpointPhysicalRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEndpointServiceConnectionModuleRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEndpointServiceConnectionModuleRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEndpointServiceObjectRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEndpointServiceObjectRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceEndpointTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceEndpointTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*ServiceGroupTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ServiceGroupTagRef", "ServiceGroupTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForFirewallRuleBackRefs := "[]*FirewallRule{"
	for _, f := range this.FirewallRuleBackRefs {
		repeatedStringForFirewallRuleBackRefs += strings.Replace(f.String(), "FirewallRule", "FirewallRule", 1) + ","
	}
	repeatedStringForFirewallRuleBackRefs += "}"
	s := strings.Join([]string{`&ServiceGroup{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`DraftModeState:` + fmt.Sprintf("%v", this.DraftModeState) + `,`,
		`ServiceGroupFirewallServiceList:` + strings.Replace(this.ServiceGroupFirewallServiceList.String(), "FirewallServiceGroupType", "FirewallServiceGroupType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`FirewallRuleBackRefs:` + repeatedStringForFirewallRuleBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceGroupTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceGroupTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHealthCheck) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServiceInstanceRefs := "[]*ServiceHealthCheckServiceInstanceRef{"
	for _, f := range this.ServiceInstanceRefs {
		repeatedStringForServiceInstanceRefs += strings.Replace(f.String(), "ServiceHealthCheckServiceInstanceRef", "ServiceHealthCheckServiceInstanceRef", 1) + ","
	}
	repeatedStringForServiceInstanceRefs += "}"
	repeatedStringForTagRefs := "[]*ServiceHealthCheckTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ServiceHealthCheckTagRef", "ServiceHealthCheckTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForBGPAsAServiceBackRefs := "[]*BGPAsAService{"
	for _, f := range this.BGPAsAServiceBackRefs {
		repeatedStringForBGPAsAServiceBackRefs += strings.Replace(f.String(), "BGPAsAService", "BGPAsAService", 1) + ","
	}
	repeatedStringForBGPAsAServiceBackRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	s := strings.Join([]string{`&ServiceHealthCheck{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ServiceHealthCheckProperties:` + strings.Replace(this.ServiceHealthCheckProperties.String(), "ServiceHealthCheckType", "ServiceHealthCheckType", 1) + `,`,
		`ServiceInstanceRefs:` + repeatedStringForServiceInstanceRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`BGPAsAServiceBackRefs:` + repeatedStringForBGPAsAServiceBackRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHealthCheckServiceInstanceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHealthCheckServiceInstanceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "ServiceInterfaceTag", "ServiceInterfaceTag", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHealthCheckTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHealthCheckTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceInstance) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInstanceIPRefs := "[]*ServiceInstanceInstanceIPRef{"
	for _, f := range this.InstanceIPRefs {
		repeatedStringForInstanceIPRefs += strings.Replace(f.String(), "ServiceInstanceInstanceIPRef", "ServiceInstanceInstanceIPRef", 1) + ","
	}
	repeatedStringForInstanceIPRefs += "}"
	repeatedStringForServiceTemplateRefs := "[]*ServiceInstanceServiceTemplateRef{"
	for _, f := range this.ServiceTemplateRefs {
		repeatedStringForServiceTemplateRefs += strings.Replace(f.String(), "ServiceInstanceServiceTemplateRef", "ServiceInstanceServiceTemplateRef", 1) + ","
	}
	repeatedStringForServiceTemplateRefs += "}"
	repeatedStringForTagRefs := "[]*ServiceInstanceTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ServiceInstanceTagRef", "ServiceInstanceTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForInterfaceRouteTableBackRefs := "[]*InterfaceRouteTable{"
	for _, f := range this.InterfaceRouteTableBackRefs {
		repeatedStringForInterfaceRouteTableBackRefs += strings.Replace(f.String(), "InterfaceRouteTable", "InterfaceRouteTable", 1) + ","
	}
	repeatedStringForInterfaceRouteTableBackRefs += "}"
	repeatedStringForLoadbalancerBackRefs := "[]*Loadbalancer{"
	for _, f := range this.LoadbalancerBackRefs {
		repeatedStringForLoadbalancerBackRefs += strings.Replace(f.String(), "Loadbalancer", "Loadbalancer", 1) + ","
	}
	repeatedStringForLoadbalancerBackRefs += "}"
	repeatedStringForLoadbalancerPoolBackRefs := "[]*LoadbalancerPool{"
	for _, f := range this.LoadbalancerPoolBackRefs {
		repeatedStringForLoadbalancerPoolBackRefs += strings.Replace(f.String(), "LoadbalancerPool", "LoadbalancerPool", 1) + ","
	}
	repeatedStringForLoadbalancerPoolBackRefs += "}"
	repeatedStringForLogicalRouterBackRefs := "[]*LogicalRouter{"
	for _, f := range this.LogicalRouterBackRefs {
		repeatedStringForLogicalRouterBackRefs += strings.Replace(f.String(), "LogicalRouter", "LogicalRouter", 1) + ","
	}
	repeatedStringForLogicalRouterBackRefs += "}"
	repeatedStringForRouteAggregateBackRefs := "[]*RouteAggregate{"
	for _, f := range this.RouteAggregateBackRefs {
		repeatedStringForRouteAggregateBackRefs += strings.Replace(f.String(), "RouteAggregate", "RouteAggregate", 1) + ","
	}
	repeatedStringForRouteAggregateBackRefs += "}"
	repeatedStringForRoutingPolicyBackRefs := "[]*RoutingPolicy{"
	for _, f := range this.RoutingPolicyBackRefs {
		repeatedStringForRoutingPolicyBackRefs += strings.Replace(f.String(), "RoutingPolicy", "RoutingPolicy", 1) + ","
	}
	repeatedStringForRoutingPolicyBackRefs += "}"
	repeatedStringForServiceHealthCheckBackRefs := "[]*ServiceHealthCheck{"
	for _, f := range this.ServiceHealthCheckBackRefs {
		repeatedStringForServiceHealthCheckBackRefs += strings.Replace(f.String(), "ServiceHealthCheck", "ServiceHealthCheck", 1) + ","
	}
	repeatedStringForServiceHealthCheckBackRefs += "}"
	repeatedStringForVirtualMachineBackRefs := "[]*VirtualMachine{"
	for _, f := range this.VirtualMachineBackRefs {
		repeatedStringForVirtualMachineBackRefs += strings.Replace(f.String(), "VirtualMachine", "VirtualMachine", 1) + ","
	}
	repeatedStringForVirtualMachineBackRefs += "}"
	repeatedStringForPortTuples := "[]*PortTuple{"
	for _, f := range this.PortTuples {
		repeatedStringForPortTuples += strings.Replace(f.String(), "PortTuple", "PortTuple", 1) + ","
	}
	repeatedStringForPortTuples += "}"
	s := strings.Join([]string{`&ServiceInstance{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ServiceInstanceBGPEnabled:` + fmt.Sprintf("%v", this.ServiceInstanceBGPEnabled) + `,`,
		`ServiceInstanceBindings:` + strings.Replace(this.ServiceInstanceBindings.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ServiceInstanceProperties:` + strings.Replace(this.ServiceInstanceProperties.String(), "ServiceInstanceType", "ServiceInstanceType", 1) + `,`,
		`InstanceIPRefs:` + repeatedStringForInstanceIPRefs + `,`,
		`ServiceTemplateRefs:` + repeatedStringForServiceTemplateRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`InterfaceRouteTableBackRefs:` + repeatedStringForInterfaceRouteTableBackRefs + `,`,
		`LoadbalancerBackRefs:` + repeatedStringForLoadbalancerBackRefs + `,`,
		`LoadbalancerPoolBackRefs:` + repeatedStringForLoadbalancerPoolBackRefs + `,`,
		`LogicalRouterBackRefs:` + repeatedStringForLogicalRouterBackRefs + `,`,
		`RouteAggregateBackRefs:` + repeatedStringForRouteAggregateBackRefs + `,`,
		`RoutingPolicyBackRefs:` + repeatedStringForRoutingPolicyBackRefs + `,`,
		`ServiceHealthCheckBackRefs:` + repeatedStringForServiceHealthCheckBackRefs + `,`,
		`VirtualMachineBackRefs:` + repeatedStringForVirtualMachineBackRefs + `,`,
		`PortTuples:` + repeatedStringForPortTuples + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceInstanceInstanceIPRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceInstanceInstanceIPRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "ServiceInterfaceTag", "ServiceInterfaceTag", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceInstanceServiceTemplateRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceInstanceServiceTemplateRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceInstanceTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceInstanceTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceObject) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*ServiceObjectTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ServiceObjectTagRef", "ServiceObjectTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForServiceConnectionModuleBackRefs := "[]*ServiceConnectionModule{"
	for _, f := range this.ServiceConnectionModuleBackRefs {
		repeatedStringForServiceConnectionModuleBackRefs += strings.Replace(f.String(), "ServiceConnectionModule", "ServiceConnectionModule", 1) + ","
	}
	repeatedStringForServiceConnectionModuleBackRefs += "}"
	repeatedStringForServiceEndpointBackRefs := "[]*ServiceEndpoint{"
	for _, f := range this.ServiceEndpointBackRefs {
		repeatedStringForServiceEndpointBackRefs += strings.Replace(f.String(), "ServiceEndpoint", "ServiceEndpoint", 1) + ","
	}
	repeatedStringForServiceEndpointBackRefs += "}"
	s := strings.Join([]string{`&ServiceObject{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`ServiceConnectionModuleBackRefs:` + repeatedStringForServiceConnectionModuleBackRefs + `,`,
		`ServiceEndpointBackRefs:` + repeatedStringForServiceEndpointBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceObjectTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceObjectTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceTemplate) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServiceApplianceSetRefs := "[]*ServiceTemplateServiceApplianceSetRef{"
	for _, f := range this.ServiceApplianceSetRefs {
		repeatedStringForServiceApplianceSetRefs += strings.Replace(f.String(), "ServiceTemplateServiceApplianceSetRef", "ServiceTemplateServiceApplianceSetRef", 1) + ","
	}
	repeatedStringForServiceApplianceSetRefs += "}"
	repeatedStringForTagRefs := "[]*ServiceTemplateTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "ServiceTemplateTagRef", "ServiceTemplateTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForServiceInstanceBackRefs := "[]*ServiceInstance{"
	for _, f := range this.ServiceInstanceBackRefs {
		repeatedStringForServiceInstanceBackRefs += strings.Replace(f.String(), "ServiceInstance", "ServiceInstance", 1) + ","
	}
	repeatedStringForServiceInstanceBackRefs += "}"
	s := strings.Join([]string{`&ServiceTemplate{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ServiceConfigManaged:` + fmt.Sprintf("%v", this.ServiceConfigManaged) + `,`,
		`ServiceTemplateProperties:` + strings.Replace(this.ServiceTemplateProperties.String(), "ServiceTemplateType", "ServiceTemplateType", 1) + `,`,
		`ServiceApplianceSetRefs:` + repeatedStringForServiceApplianceSetRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`ServiceInstanceBackRefs:` + repeatedStringForServiceInstanceBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceTemplateServiceApplianceSetRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceTemplateServiceApplianceSetRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceTemplateTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceTemplateTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SflowProfile) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*SflowProfileTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "SflowProfileTagRef", "SflowProfileTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForTelemetryProfileBackRefs := "[]*TelemetryProfile{"
	for _, f := range this.TelemetryProfileBackRefs {
		repeatedStringForTelemetryProfileBackRefs += strings.Replace(f.String(), "TelemetryProfile", "TelemetryProfile", 1) + ","
	}
	repeatedStringForTelemetryProfileBackRefs += "}"
	s := strings.Join([]string{`&SflowProfile{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`SflowParameters:` + strings.Replace(this.SflowParameters.String(), "SflowParameters", "SflowParameters", 1) + `,`,
		`SflowProfileIsDefault:` + fmt.Sprintf("%v", this.SflowProfileIsDefault) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`TelemetryProfileBackRefs:` + repeatedStringForTelemetryProfileBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *SflowProfileTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SflowProfileTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StormControlProfile) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*StormControlProfileTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "StormControlProfileTagRef", "StormControlProfileTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForPortProfileBackRefs := "[]*PortProfile{"
	for _, f := range this.PortProfileBackRefs {
		repeatedStringForPortProfileBackRefs += strings.Replace(f.String(), "PortProfile", "PortProfile", 1) + ","
	}
	repeatedStringForPortProfileBackRefs += "}"
	s := strings.Join([]string{`&StormControlProfile{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`StormControlParameters:` + strings.Replace(this.StormControlParameters.String(), "StormControlParameters", "StormControlParameters", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`PortProfileBackRefs:` + repeatedStringForPortProfileBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *StormControlProfileTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StormControlProfileTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructuredSyslogApplicationRecord) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*StructuredSyslogApplicationRecordTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "StructuredSyslogApplicationRecordTagRef", "StructuredSyslogApplicationRecordTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&StructuredSyslogApplicationRecord{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`StructuredSyslogAppCategory:` + fmt.Sprintf("%v", this.StructuredSyslogAppCategory) + `,`,
		`StructuredSyslogAppGroups:` + fmt.Sprintf("%v", this.StructuredSyslogAppGroups) + `,`,
		`StructuredSyslogAppRisk:` + fmt.Sprintf("%v", this.StructuredSyslogAppRisk) + `,`,
		`StructuredSyslogAppServiceTags:` + fmt.Sprintf("%v", this.StructuredSyslogAppServiceTags) + `,`,
		`StructuredSyslogAppSubcategory:` + fmt.Sprintf("%v", this.StructuredSyslogAppSubcategory) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructuredSyslogApplicationRecordTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StructuredSyslogApplicationRecordTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructuredSyslogConfig) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*StructuredSyslogConfigTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "StructuredSyslogConfigTagRef", "StructuredSyslogConfigTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForStructuredSyslogApplicationRecords := "[]*StructuredSyslogApplicationRecord{"
	for _, f := range this.StructuredSyslogApplicationRecords {
		repeatedStringForStructuredSyslogApplicationRecords += strings.Replace(f.String(), "StructuredSyslogApplicationRecord", "StructuredSyslogApplicationRecord", 1) + ","
	}
	repeatedStringForStructuredSyslogApplicationRecords += "}"
	repeatedStringForStructuredSyslogHostnameRecords := "[]*StructuredSyslogHostnameRecord{"
	for _, f := range this.StructuredSyslogHostnameRecords {
		repeatedStringForStructuredSyslogHostnameRecords += strings.Replace(f.String(), "StructuredSyslogHostnameRecord", "StructuredSyslogHostnameRecord", 1) + ","
	}
	repeatedStringForStructuredSyslogHostnameRecords += "}"
	repeatedStringForStructuredSyslogMessages := "[]*StructuredSyslogMessage{"
	for _, f := range this.StructuredSyslogMessages {
		repeatedStringForStructuredSyslogMessages += strings.Replace(f.String(), "StructuredSyslogMessage", "StructuredSyslogMessage", 1) + ","
	}
	repeatedStringForStructuredSyslogMessages += "}"
	repeatedStringForStructuredSyslogSLAProfiles := "[]*StructuredSyslogSLAProfile{"
	for _, f := range this.StructuredSyslogSLAProfiles {
		repeatedStringForStructuredSyslogSLAProfiles += strings.Replace(f.String(), "StructuredSyslogSLAProfile", "StructuredSyslogSLAProfile", 1) + ","
	}
	repeatedStringForStructuredSyslogSLAProfiles += "}"
	s := strings.Join([]string{`&StructuredSyslogConfig{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`StructuredSyslogApplicationRecords:` + repeatedStringForStructuredSyslogApplicationRecords + `,`,
		`StructuredSyslogHostnameRecords:` + repeatedStringForStructuredSyslogHostnameRecords + `,`,
		`StructuredSyslogMessages:` + repeatedStringForStructuredSyslogMessages + `,`,
		`StructuredSyslogSLAProfiles:` + repeatedStringForStructuredSyslogSLAProfiles + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructuredSyslogConfigTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StructuredSyslogConfigTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructuredSyslogHostnameRecord) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*StructuredSyslogHostnameRecordTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "StructuredSyslogHostnameRecordTagRef", "StructuredSyslogHostnameRecordTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&StructuredSyslogHostnameRecord{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`StructuredSyslogDevice:` + fmt.Sprintf("%v", this.StructuredSyslogDevice) + `,`,
		`StructuredSyslogHostaddr:` + fmt.Sprintf("%v", this.StructuredSyslogHostaddr) + `,`,
		`StructuredSyslogHostnameTags:` + fmt.Sprintf("%v", this.StructuredSyslogHostnameTags) + `,`,
		`StructuredSyslogLinkmap:` + strings.Replace(this.StructuredSyslogLinkmap.String(), "StructuredSyslogLinkmap", "StructuredSyslogLinkmap", 1) + `,`,
		`StructuredSyslogLocation:` + fmt.Sprintf("%v", this.StructuredSyslogLocation) + `,`,
		`StructuredSyslogTenant:` + fmt.Sprintf("%v", this.StructuredSyslogTenant) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructuredSyslogHostnameRecordTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StructuredSyslogHostnameRecordTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructuredSyslogMessage) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*StructuredSyslogMessageTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "StructuredSyslogMessageTagRef", "StructuredSyslogMessageTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&StructuredSyslogMessage{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`StructuredSyslogMessageForward:` + fmt.Sprintf("%v", this.StructuredSyslogMessageForward) + `,`,
		`StructuredSyslogMessageIntegerFields:` + strings.Replace(this.StructuredSyslogMessageIntegerFields.String(), "FieldNamesList", "FieldNamesList", 1) + `,`,
		`StructuredSyslogMessageProcessAndStore:` + fmt.Sprintf("%v", this.StructuredSyslogMessageProcessAndStore) + `,`,
		`StructuredSyslogMessageProcessAndSummarize:` + fmt.Sprintf("%v", this.StructuredSyslogMessageProcessAndSummarize) + `,`,
		`StructuredSyslogMessageProcessAndSummarizeUser:` + fmt.Sprintf("%v", this.StructuredSyslogMessageProcessAndSummarizeUser) + `,`,
		`StructuredSyslogMessageTaggedFields:` + strings.Replace(this.StructuredSyslogMessageTaggedFields.String(), "FieldNamesList", "FieldNamesList", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructuredSyslogMessageTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StructuredSyslogMessageTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructuredSyslogSLAProfile) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*StructuredSyslogSLAProfileTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "StructuredSyslogSLAProfileTagRef", "StructuredSyslogSLAProfileTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&StructuredSyslogSLAProfile{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`StructuredSyslogSLAParams:` + fmt.Sprintf("%v", this.StructuredSyslogSLAParams) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructuredSyslogSLAProfileTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StructuredSyslogSLAProfileTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubCluster) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*SubClusterTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "SubClusterTagRef", "SubClusterTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForBGPRouterBackRefs := "[]*BGPRouter{"
	for _, f := range this.BGPRouterBackRefs {
		repeatedStringForBGPRouterBackRefs += strings.Replace(f.String(), "BGPRouter", "BGPRouter", 1) + ","
	}
	repeatedStringForBGPRouterBackRefs += "}"
	repeatedStringForVirtualRouterBackRefs := "[]*VirtualRouter{"
	for _, f := range this.VirtualRouterBackRefs {
		repeatedStringForVirtualRouterBackRefs += strings.Replace(f.String(), "VirtualRouter", "VirtualRouter", 1) + ","
	}
	repeatedStringForVirtualRouterBackRefs += "}"
	s := strings.Join([]string{`&SubCluster{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`SubClusterAsn:` + fmt.Sprintf("%v", this.SubClusterAsn) + `,`,
		`SubClusterID:` + fmt.Sprintf("%v", this.SubClusterID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`BGPRouterBackRefs:` + repeatedStringForBGPRouterBackRefs + `,`,
		`VirtualRouterBackRefs:` + repeatedStringForVirtualRouterBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubClusterTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubClusterTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Subnet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*SubnetTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "SubnetTagRef", "SubnetTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceRefs := "[]*SubnetVirtualMachineInterfaceRef{"
	for _, f := range this.VirtualMachineInterfaceRefs {
		repeatedStringForVirtualMachineInterfaceRefs += strings.Replace(f.String(), "SubnetVirtualMachineInterfaceRef", "SubnetVirtualMachineInterfaceRef", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceRefs += "}"
	s := strings.Join([]string{`&Subnet{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`SubnetIPPrefix:` + strings.Replace(this.SubnetIPPrefix.String(), "SubnetType", "SubnetType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceRefs:` + repeatedStringForVirtualMachineInterfaceRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubnetTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubnetTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubnetVirtualMachineInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubnetVirtualMachineInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tag) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*TagTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "TagTagRef", "TagTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForTagTypeRefs := "[]*TagTagTypeRef{"
	for _, f := range this.TagTypeRefs {
		repeatedStringForTagTypeRefs += strings.Replace(f.String(), "TagTagTypeRef", "TagTagTypeRef", 1) + ","
	}
	repeatedStringForTagTypeRefs += "}"
	repeatedStringForAccessControlListBackRefs := "[]*AccessControlList{"
	for _, f := range this.AccessControlListBackRefs {
		repeatedStringForAccessControlListBackRefs += strings.Replace(f.String(), "AccessControlList", "AccessControlList", 1) + ","
	}
	repeatedStringForAccessControlListBackRefs += "}"
	repeatedStringForAddressGroupBackRefs := "[]*AddressGroup{"
	for _, f := range this.AddressGroupBackRefs {
		repeatedStringForAddressGroupBackRefs += strings.Replace(f.String(), "AddressGroup", "AddressGroup", 1) + ","
	}
	repeatedStringForAddressGroupBackRefs += "}"
	repeatedStringForAlarmBackRefs := "[]*Alarm{"
	for _, f := range this.AlarmBackRefs {
		repeatedStringForAlarmBackRefs += strings.Replace(f.String(), "Alarm", "Alarm", 1) + ","
	}
	repeatedStringForAlarmBackRefs += "}"
	repeatedStringForAliasIPBackRefs := "[]*AliasIP{"
	for _, f := range this.AliasIPBackRefs {
		repeatedStringForAliasIPBackRefs += strings.Replace(f.String(), "AliasIP", "AliasIP", 1) + ","
	}
	repeatedStringForAliasIPBackRefs += "}"
	repeatedStringForAliasIPPoolBackRefs := "[]*AliasIPPool{"
	for _, f := range this.AliasIPPoolBackRefs {
		repeatedStringForAliasIPPoolBackRefs += strings.Replace(f.String(), "AliasIPPool", "AliasIPPool", 1) + ","
	}
	repeatedStringForAliasIPPoolBackRefs += "}"
	repeatedStringForAnalyticsAlarmNodeBackRefs := "[]*AnalyticsAlarmNode{"
	for _, f := range this.AnalyticsAlarmNodeBackRefs {
		repeatedStringForAnalyticsAlarmNodeBackRefs += strings.Replace(f.String(), "AnalyticsAlarmNode", "AnalyticsAlarmNode", 1) + ","
	}
	repeatedStringForAnalyticsAlarmNodeBackRefs += "}"
	repeatedStringForAnalyticsNodeBackRefs := "[]*AnalyticsNode{"
	for _, f := range this.AnalyticsNodeBackRefs {
		repeatedStringForAnalyticsNodeBackRefs += strings.Replace(f.String(), "AnalyticsNode", "AnalyticsNode", 1) + ","
	}
	repeatedStringForAnalyticsNodeBackRefs += "}"
	repeatedStringForAnalyticsSNMPNodeBackRefs := "[]*AnalyticsSNMPNode{"
	for _, f := range this.AnalyticsSNMPNodeBackRefs {
		repeatedStringForAnalyticsSNMPNodeBackRefs += strings.Replace(f.String(), "AnalyticsSNMPNode", "AnalyticsSNMPNode", 1) + ","
	}
	repeatedStringForAnalyticsSNMPNodeBackRefs += "}"
	repeatedStringForAPIAccessListBackRefs := "[]*APIAccessList{"
	for _, f := range this.APIAccessListBackRefs {
		repeatedStringForAPIAccessListBackRefs += strings.Replace(f.String(), "APIAccessList", "APIAccessList", 1) + ","
	}
	repeatedStringForAPIAccessListBackRefs += "}"
	repeatedStringForApplicationPolicySetBackRefs := "[]*ApplicationPolicySet{"
	for _, f := range this.ApplicationPolicySetBackRefs {
		repeatedStringForApplicationPolicySetBackRefs += strings.Replace(f.String(), "ApplicationPolicySet", "ApplicationPolicySet", 1) + ","
	}
	repeatedStringForApplicationPolicySetBackRefs += "}"
	repeatedStringForBGPAsAServiceBackRefs := "[]*BGPAsAService{"
	for _, f := range this.BGPAsAServiceBackRefs {
		repeatedStringForBGPAsAServiceBackRefs += strings.Replace(f.String(), "BGPAsAService", "BGPAsAService", 1) + ","
	}
	repeatedStringForBGPAsAServiceBackRefs += "}"
	repeatedStringForBGPRouterBackRefs := "[]*BGPRouter{"
	for _, f := range this.BGPRouterBackRefs {
		repeatedStringForBGPRouterBackRefs += strings.Replace(f.String(), "BGPRouter", "BGPRouter", 1) + ","
	}
	repeatedStringForBGPRouterBackRefs += "}"
	repeatedStringForBGPVPNBackRefs := "[]*BGPVPN{"
	for _, f := range this.BGPVPNBackRefs {
		repeatedStringForBGPVPNBackRefs += strings.Replace(f.String(), "BGPVPN", "BGPVPN", 1) + ","
	}
	repeatedStringForBGPVPNBackRefs += "}"
	repeatedStringForBridgeDomainBackRefs := "[]*BridgeDomain{"
	for _, f := range this.BridgeDomainBackRefs {
		repeatedStringForBridgeDomainBackRefs += strings.Replace(f.String(), "BridgeDomain", "BridgeDomain", 1) + ","
	}
	repeatedStringForBridgeDomainBackRefs += "}"
	repeatedStringForCardBackRefs := "[]*Card{"
	for _, f := range this.CardBackRefs {
		repeatedStringForCardBackRefs += strings.Replace(f.String(), "Card", "Card", 1) + ","
	}
	repeatedStringForCardBackRefs += "}"
	repeatedStringForCliConfigBackRefs := "[]*CliConfig{"
	for _, f := range this.CliConfigBackRefs {
		repeatedStringForCliConfigBackRefs += strings.Replace(f.String(), "CliConfig", "CliConfig", 1) + ","
	}
	repeatedStringForCliConfigBackRefs += "}"
	repeatedStringForConfigDatabaseNodeBackRefs := "[]*ConfigDatabaseNode{"
	for _, f := range this.ConfigDatabaseNodeBackRefs {
		repeatedStringForConfigDatabaseNodeBackRefs += strings.Replace(f.String(), "ConfigDatabaseNode", "ConfigDatabaseNode", 1) + ","
	}
	repeatedStringForConfigDatabaseNodeBackRefs += "}"
	repeatedStringForConfigNodeBackRefs := "[]*ConfigNode{"
	for _, f := range this.ConfigNodeBackRefs {
		repeatedStringForConfigNodeBackRefs += strings.Replace(f.String(), "ConfigNode", "ConfigNode", 1) + ","
	}
	repeatedStringForConfigNodeBackRefs += "}"
	repeatedStringForConfigRootBackRefs := "[]*ConfigRoot{"
	for _, f := range this.ConfigRootBackRefs {
		repeatedStringForConfigRootBackRefs += strings.Replace(f.String(), "ConfigRoot", "ConfigRoot", 1) + ","
	}
	repeatedStringForConfigRootBackRefs += "}"
	repeatedStringForControlNodeZoneBackRefs := "[]*ControlNodeZone{"
	for _, f := range this.ControlNodeZoneBackRefs {
		repeatedStringForControlNodeZoneBackRefs += strings.Replace(f.String(), "ControlNodeZone", "ControlNodeZone", 1) + ","
	}
	repeatedStringForControlNodeZoneBackRefs += "}"
	repeatedStringForCustomerAttachmentBackRefs := "[]*CustomerAttachment{"
	for _, f := range this.CustomerAttachmentBackRefs {
		repeatedStringForCustomerAttachmentBackRefs += strings.Replace(f.String(), "CustomerAttachment", "CustomerAttachment", 1) + ","
	}
	repeatedStringForCustomerAttachmentBackRefs += "}"
	repeatedStringForDataCenterInterconnectBackRefs := "[]*DataCenterInterconnect{"
	for _, f := range this.DataCenterInterconnectBackRefs {
		repeatedStringForDataCenterInterconnectBackRefs += strings.Replace(f.String(), "DataCenterInterconnect", "DataCenterInterconnect", 1) + ","
	}
	repeatedStringForDataCenterInterconnectBackRefs += "}"
	repeatedStringForDatabaseNodeBackRefs := "[]*DatabaseNode{"
	for _, f := range this.DatabaseNodeBackRefs {
		repeatedStringForDatabaseNodeBackRefs += strings.Replace(f.String(), "DatabaseNode", "DatabaseNode", 1) + ","
	}
	repeatedStringForDatabaseNodeBackRefs += "}"
	repeatedStringForDeviceChassisBackRefs := "[]*DeviceChassis{"
	for _, f := range this.DeviceChassisBackRefs {
		repeatedStringForDeviceChassisBackRefs += strings.Replace(f.String(), "DeviceChassis", "DeviceChassis", 1) + ","
	}
	repeatedStringForDeviceChassisBackRefs += "}"
	repeatedStringForDeviceFunctionalGroupBackRefs := "[]*DeviceFunctionalGroup{"
	for _, f := range this.DeviceFunctionalGroupBackRefs {
		repeatedStringForDeviceFunctionalGroupBackRefs += strings.Replace(f.String(), "DeviceFunctionalGroup", "DeviceFunctionalGroup", 1) + ","
	}
	repeatedStringForDeviceFunctionalGroupBackRefs += "}"
	repeatedStringForDeviceImageBackRefs := "[]*DeviceImage{"
	for _, f := range this.DeviceImageBackRefs {
		repeatedStringForDeviceImageBackRefs += strings.Replace(f.String(), "DeviceImage", "DeviceImage", 1) + ","
	}
	repeatedStringForDeviceImageBackRefs += "}"
	repeatedStringForDevicemgrNodeBackRefs := "[]*DevicemgrNode{"
	for _, f := range this.DevicemgrNodeBackRefs {
		repeatedStringForDevicemgrNodeBackRefs += strings.Replace(f.String(), "DevicemgrNode", "DevicemgrNode", 1) + ","
	}
	repeatedStringForDevicemgrNodeBackRefs += "}"
	repeatedStringForDiscoveryServiceAssignmentBackRefs := "[]*DiscoveryServiceAssignment{"
	for _, f := range this.DiscoveryServiceAssignmentBackRefs {
		repeatedStringForDiscoveryServiceAssignmentBackRefs += strings.Replace(f.String(), "DiscoveryServiceAssignment", "DiscoveryServiceAssignment", 1) + ","
	}
	repeatedStringForDiscoveryServiceAssignmentBackRefs += "}"
	repeatedStringForDomainBackRefs := "[]*Domain{"
	for _, f := range this.DomainBackRefs {
		repeatedStringForDomainBackRefs += strings.Replace(f.String(), "Domain", "Domain", 1) + ","
	}
	repeatedStringForDomainBackRefs += "}"
	repeatedStringForDsaRuleBackRefs := "[]*DsaRule{"
	for _, f := range this.DsaRuleBackRefs {
		repeatedStringForDsaRuleBackRefs += strings.Replace(f.String(), "DsaRule", "DsaRule", 1) + ","
	}
	repeatedStringForDsaRuleBackRefs += "}"
	repeatedStringForE2ServiceProviderBackRefs := "[]*E2ServiceProvider{"
	for _, f := range this.E2ServiceProviderBackRefs {
		repeatedStringForE2ServiceProviderBackRefs += strings.Replace(f.String(), "E2ServiceProvider", "E2ServiceProvider", 1) + ","
	}
	repeatedStringForE2ServiceProviderBackRefs += "}"
	repeatedStringForFabricBackRefs := "[]*Fabric{"
	for _, f := range this.FabricBackRefs {
		repeatedStringForFabricBackRefs += strings.Replace(f.String(), "Fabric", "Fabric", 1) + ","
	}
	repeatedStringForFabricBackRefs += "}"
	repeatedStringForFabricNamespaceBackRefs := "[]*FabricNamespace{"
	for _, f := range this.FabricNamespaceBackRefs {
		repeatedStringForFabricNamespaceBackRefs += strings.Replace(f.String(), "FabricNamespace", "FabricNamespace", 1) + ","
	}
	repeatedStringForFabricNamespaceBackRefs += "}"
	repeatedStringForFeatureBackRefs := "[]*Feature{"
	for _, f := range this.FeatureBackRefs {
		repeatedStringForFeatureBackRefs += strings.Replace(f.String(), "Feature", "Feature", 1) + ","
	}
	repeatedStringForFeatureBackRefs += "}"
	repeatedStringForFeatureConfigBackRefs := "[]*FeatureConfig{"
	for _, f := range this.FeatureConfigBackRefs {
		repeatedStringForFeatureConfigBackRefs += strings.Replace(f.String(), "FeatureConfig", "FeatureConfig", 1) + ","
	}
	repeatedStringForFeatureConfigBackRefs += "}"
	repeatedStringForFeatureFlagBackRefs := "[]*FeatureFlag{"
	for _, f := range this.FeatureFlagBackRefs {
		repeatedStringForFeatureFlagBackRefs += strings.Replace(f.String(), "FeatureFlag", "FeatureFlag", 1) + ","
	}
	repeatedStringForFeatureFlagBackRefs += "}"
	repeatedStringForFirewallPolicyBackRefs := "[]*FirewallPolicy{"
	for _, f := range this.FirewallPolicyBackRefs {
		repeatedStringForFirewallPolicyBackRefs += strings.Replace(f.String(), "FirewallPolicy", "FirewallPolicy", 1) + ","
	}
	repeatedStringForFirewallPolicyBackRefs += "}"
	repeatedStringForFirewallRuleBackRefs := "[]*FirewallRule{"
	for _, f := range this.FirewallRuleBackRefs {
		repeatedStringForFirewallRuleBackRefs += strings.Replace(f.String(), "FirewallRule", "FirewallRule", 1) + ","
	}
	repeatedStringForFirewallRuleBackRefs += "}"
	repeatedStringForFloatingIPBackRefs := "[]*FloatingIP{"
	for _, f := range this.FloatingIPBackRefs {
		repeatedStringForFloatingIPBackRefs += strings.Replace(f.String(), "FloatingIP", "FloatingIP", 1) + ","
	}
	repeatedStringForFloatingIPBackRefs += "}"
	repeatedStringForFloatingIPPoolBackRefs := "[]*FloatingIPPool{"
	for _, f := range this.FloatingIPPoolBackRefs {
		repeatedStringForFloatingIPPoolBackRefs += strings.Replace(f.String(), "FloatingIPPool", "FloatingIPPool", 1) + ","
	}
	repeatedStringForFloatingIPPoolBackRefs += "}"
	repeatedStringForFlowNodeBackRefs := "[]*FlowNode{"
	for _, f := range this.FlowNodeBackRefs {
		repeatedStringForFlowNodeBackRefs += strings.Replace(f.String(), "FlowNode", "FlowNode", 1) + ","
	}
	repeatedStringForFlowNodeBackRefs += "}"
	repeatedStringForForwardingClassBackRefs := "[]*ForwardingClass{"
	for _, f := range this.ForwardingClassBackRefs {
		repeatedStringForForwardingClassBackRefs += strings.Replace(f.String(), "ForwardingClass", "ForwardingClass", 1) + ","
	}
	repeatedStringForForwardingClassBackRefs += "}"
	repeatedStringForGlobalAnalyticsConfigBackRefs := "[]*GlobalAnalyticsConfig{"
	for _, f := range this.GlobalAnalyticsConfigBackRefs {
		repeatedStringForGlobalAnalyticsConfigBackRefs += strings.Replace(f.String(), "GlobalAnalyticsConfig", "GlobalAnalyticsConfig", 1) + ","
	}
	repeatedStringForGlobalAnalyticsConfigBackRefs += "}"
	repeatedStringForGlobalQosConfigBackRefs := "[]*GlobalQosConfig{"
	for _, f := range this.GlobalQosConfigBackRefs {
		repeatedStringForGlobalQosConfigBackRefs += strings.Replace(f.String(), "GlobalQosConfig", "GlobalQosConfig", 1) + ","
	}
	repeatedStringForGlobalQosConfigBackRefs += "}"
	repeatedStringForGlobalSystemConfigBackRefs := "[]*GlobalSystemConfig{"
	for _, f := range this.GlobalSystemConfigBackRefs {
		repeatedStringForGlobalSystemConfigBackRefs += strings.Replace(f.String(), "GlobalSystemConfig", "GlobalSystemConfig", 1) + ","
	}
	repeatedStringForGlobalSystemConfigBackRefs += "}"
	repeatedStringForGlobalVrouterConfigBackRefs := "[]*GlobalVrouterConfig{"
	for _, f := range this.GlobalVrouterConfigBackRefs {
		repeatedStringForGlobalVrouterConfigBackRefs += strings.Replace(f.String(), "GlobalVrouterConfig", "GlobalVrouterConfig", 1) + ","
	}
	repeatedStringForGlobalVrouterConfigBackRefs += "}"
	repeatedStringForHardwareBackRefs := "[]*Hardware{"
	for _, f := range this.HardwareBackRefs {
		repeatedStringForHardwareBackRefs += strings.Replace(f.String(), "Hardware", "Hardware", 1) + ","
	}
	repeatedStringForHardwareBackRefs += "}"
	repeatedStringForHardwareInventoryBackRefs := "[]*HardwareInventory{"
	for _, f := range this.HardwareInventoryBackRefs {
		repeatedStringForHardwareInventoryBackRefs += strings.Replace(f.String(), "HardwareInventory", "HardwareInventory", 1) + ","
	}
	repeatedStringForHardwareInventoryBackRefs += "}"
	repeatedStringForHostBasedServiceBackRefs := "[]*HostBasedService{"
	for _, f := range this.HostBasedServiceBackRefs {
		repeatedStringForHostBasedServiceBackRefs += strings.Replace(f.String(), "HostBasedService", "HostBasedService", 1) + ","
	}
	repeatedStringForHostBasedServiceBackRefs += "}"
	repeatedStringForInstanceIPBackRefs := "[]*InstanceIP{"
	for _, f := range this.InstanceIPBackRefs {
		repeatedStringForInstanceIPBackRefs += strings.Replace(f.String(), "InstanceIP", "InstanceIP", 1) + ","
	}
	repeatedStringForInstanceIPBackRefs += "}"
	repeatedStringForIntentMapBackRefs := "[]*IntentMap{"
	for _, f := range this.IntentMapBackRefs {
		repeatedStringForIntentMapBackRefs += strings.Replace(f.String(), "IntentMap", "IntentMap", 1) + ","
	}
	repeatedStringForIntentMapBackRefs += "}"
	repeatedStringForInterfaceRouteTableBackRefs := "[]*InterfaceRouteTable{"
	for _, f := range this.InterfaceRouteTableBackRefs {
		repeatedStringForInterfaceRouteTableBackRefs += strings.Replace(f.String(), "InterfaceRouteTable", "InterfaceRouteTable", 1) + ","
	}
	repeatedStringForInterfaceRouteTableBackRefs += "}"
	repeatedStringForJobTemplateBackRefs := "[]*JobTemplate{"
	for _, f := range this.JobTemplateBackRefs {
		repeatedStringForJobTemplateBackRefs += strings.Replace(f.String(), "JobTemplate", "JobTemplate", 1) + ","
	}
	repeatedStringForJobTemplateBackRefs += "}"
	repeatedStringForLinkAggregationGroupBackRefs := "[]*LinkAggregationGroup{"
	for _, f := range this.LinkAggregationGroupBackRefs {
		repeatedStringForLinkAggregationGroupBackRefs += strings.Replace(f.String(), "LinkAggregationGroup", "LinkAggregationGroup", 1) + ","
	}
	repeatedStringForLinkAggregationGroupBackRefs += "}"
	repeatedStringForLoadbalancerBackRefs := "[]*Loadbalancer{"
	for _, f := range this.LoadbalancerBackRefs {
		repeatedStringForLoadbalancerBackRefs += strings.Replace(f.String(), "Loadbalancer", "Loadbalancer", 1) + ","
	}
	repeatedStringForLoadbalancerBackRefs += "}"
	repeatedStringForLoadbalancerHealthmonitorBackRefs := "[]*LoadbalancerHealthmonitor{"
	for _, f := range this.LoadbalancerHealthmonitorBackRefs {
		repeatedStringForLoadbalancerHealthmonitorBackRefs += strings.Replace(f.String(), "LoadbalancerHealthmonitor", "LoadbalancerHealthmonitor", 1) + ","
	}
	repeatedStringForLoadbalancerHealthmonitorBackRefs += "}"
	repeatedStringForLoadbalancerListenerBackRefs := "[]*LoadbalancerListener{"
	for _, f := range this.LoadbalancerListenerBackRefs {
		repeatedStringForLoadbalancerListenerBackRefs += strings.Replace(f.String(), "LoadbalancerListener", "LoadbalancerListener", 1) + ","
	}
	repeatedStringForLoadbalancerListenerBackRefs += "}"
	repeatedStringForLoadbalancerMemberBackRefs := "[]*LoadbalancerMember{"
	for _, f := range this.LoadbalancerMemberBackRefs {
		repeatedStringForLoadbalancerMemberBackRefs += strings.Replace(f.String(), "LoadbalancerMember", "LoadbalancerMember", 1) + ","
	}
	repeatedStringForLoadbalancerMemberBackRefs += "}"
	repeatedStringForLoadbalancerPoolBackRefs := "[]*LoadbalancerPool{"
	for _, f := range this.LoadbalancerPoolBackRefs {
		repeatedStringForLoadbalancerPoolBackRefs += strings.Replace(f.String(), "LoadbalancerPool", "LoadbalancerPool", 1) + ","
	}
	repeatedStringForLoadbalancerPoolBackRefs += "}"
	repeatedStringForLogicalInterfaceBackRefs := "[]*LogicalInterface{"
	for _, f := range this.LogicalInterfaceBackRefs {
		repeatedStringForLogicalInterfaceBackRefs += strings.Replace(f.String(), "LogicalInterface", "LogicalInterface", 1) + ","
	}
	repeatedStringForLogicalInterfaceBackRefs += "}"
	repeatedStringForLogicalRouterBackRefs := "[]*LogicalRouter{"
	for _, f := range this.LogicalRouterBackRefs {
		repeatedStringForLogicalRouterBackRefs += strings.Replace(f.String(), "LogicalRouter", "LogicalRouter", 1) + ","
	}
	repeatedStringForLogicalRouterBackRefs += "}"
	repeatedStringForMulticastPolicyBackRefs := "[]*MulticastPolicy{"
	for _, f := range this.MulticastPolicyBackRefs {
		repeatedStringForMulticastPolicyBackRefs += strings.Replace(f.String(), "MulticastPolicy", "MulticastPolicy", 1) + ","
	}
	repeatedStringForMulticastPolicyBackRefs += "}"
	repeatedStringForNamespaceBackRefs := "[]*Namespace{"
	for _, f := range this.NamespaceBackRefs {
		repeatedStringForNamespaceBackRefs += strings.Replace(f.String(), "Namespace", "Namespace", 1) + ","
	}
	repeatedStringForNamespaceBackRefs += "}"
	repeatedStringForNetworkDeviceConfigBackRefs := "[]*NetworkDeviceConfig{"
	for _, f := range this.NetworkDeviceConfigBackRefs {
		repeatedStringForNetworkDeviceConfigBackRefs += strings.Replace(f.String(), "NetworkDeviceConfig", "NetworkDeviceConfig", 1) + ","
	}
	repeatedStringForNetworkDeviceConfigBackRefs += "}"
	repeatedStringForNetworkIpamBackRefs := "[]*NetworkIpam{"
	for _, f := range this.NetworkIpamBackRefs {
		repeatedStringForNetworkIpamBackRefs += strings.Replace(f.String(), "NetworkIpam", "NetworkIpam", 1) + ","
	}
	repeatedStringForNetworkIpamBackRefs += "}"
	repeatedStringForNetworkPolicyBackRefs := "[]*NetworkPolicy{"
	for _, f := range this.NetworkPolicyBackRefs {
		repeatedStringForNetworkPolicyBackRefs += strings.Replace(f.String(), "NetworkPolicy", "NetworkPolicy", 1) + ","
	}
	repeatedStringForNetworkPolicyBackRefs += "}"
	repeatedStringForNodeBackRefs := "[]*Node{"
	for _, f := range this.NodeBackRefs {
		repeatedStringForNodeBackRefs += strings.Replace(f.String(), "Node", "Node", 1) + ","
	}
	repeatedStringForNodeBackRefs += "}"
	repeatedStringForNodeProfileBackRefs := "[]*NodeProfile{"
	for _, f := range this.NodeProfileBackRefs {
		repeatedStringForNodeProfileBackRefs += strings.Replace(f.String(), "NodeProfile", "NodeProfile", 1) + ","
	}
	repeatedStringForNodeProfileBackRefs += "}"
	repeatedStringForOverlayRoleBackRefs := "[]*OverlayRole{"
	for _, f := range this.OverlayRoleBackRefs {
		repeatedStringForOverlayRoleBackRefs += strings.Replace(f.String(), "OverlayRole", "OverlayRole", 1) + ","
	}
	repeatedStringForOverlayRoleBackRefs += "}"
	repeatedStringForPeeringPolicyBackRefs := "[]*PeeringPolicy{"
	for _, f := range this.PeeringPolicyBackRefs {
		repeatedStringForPeeringPolicyBackRefs += strings.Replace(f.String(), "PeeringPolicy", "PeeringPolicy", 1) + ","
	}
	repeatedStringForPeeringPolicyBackRefs += "}"
	repeatedStringForPhysicalInterfaceBackRefs := "[]*PhysicalInterface{"
	for _, f := range this.PhysicalInterfaceBackRefs {
		repeatedStringForPhysicalInterfaceBackRefs += strings.Replace(f.String(), "PhysicalInterface", "PhysicalInterface", 1) + ","
	}
	repeatedStringForPhysicalInterfaceBackRefs += "}"
	repeatedStringForPhysicalRoleBackRefs := "[]*PhysicalRole{"
	for _, f := range this.PhysicalRoleBackRefs {
		repeatedStringForPhysicalRoleBackRefs += strings.Replace(f.String(), "PhysicalRole", "PhysicalRole", 1) + ","
	}
	repeatedStringForPhysicalRoleBackRefs += "}"
	repeatedStringForPhysicalRouterBackRefs := "[]*PhysicalRouter{"
	for _, f := range this.PhysicalRouterBackRefs {
		repeatedStringForPhysicalRouterBackRefs += strings.Replace(f.String(), "PhysicalRouter", "PhysicalRouter", 1) + ","
	}
	repeatedStringForPhysicalRouterBackRefs += "}"
	repeatedStringForPolicyManagementBackRefs := "[]*PolicyManagement{"
	for _, f := range this.PolicyManagementBackRefs {
		repeatedStringForPolicyManagementBackRefs += strings.Replace(f.String(), "PolicyManagement", "PolicyManagement", 1) + ","
	}
	repeatedStringForPolicyManagementBackRefs += "}"
	repeatedStringForPortBackRefs := "[]*Port{"
	for _, f := range this.PortBackRefs {
		repeatedStringForPortBackRefs += strings.Replace(f.String(), "Port", "Port", 1) + ","
	}
	repeatedStringForPortBackRefs += "}"
	repeatedStringForPortGroupBackRefs := "[]*PortGroup{"
	for _, f := range this.PortGroupBackRefs {
		repeatedStringForPortGroupBackRefs += strings.Replace(f.String(), "PortGroup", "PortGroup", 1) + ","
	}
	repeatedStringForPortGroupBackRefs += "}"
	repeatedStringForPortProfileBackRefs := "[]*PortProfile{"
	for _, f := range this.PortProfileBackRefs {
		repeatedStringForPortProfileBackRefs += strings.Replace(f.String(), "PortProfile", "PortProfile", 1) + ","
	}
	repeatedStringForPortProfileBackRefs += "}"
	repeatedStringForPortTupleBackRefs := "[]*PortTuple{"
	for _, f := range this.PortTupleBackRefs {
		repeatedStringForPortTupleBackRefs += strings.Replace(f.String(), "PortTuple", "PortTuple", 1) + ","
	}
	repeatedStringForPortTupleBackRefs += "}"
	repeatedStringForProjectBackRefs := "[]*Project{"
	for _, f := range this.ProjectBackRefs {
		repeatedStringForProjectBackRefs += strings.Replace(f.String(), "Project", "Project", 1) + ","
	}
	repeatedStringForProjectBackRefs += "}"
	repeatedStringForProviderAttachmentBackRefs := "[]*ProviderAttachment{"
	for _, f := range this.ProviderAttachmentBackRefs {
		repeatedStringForProviderAttachmentBackRefs += strings.Replace(f.String(), "ProviderAttachment", "ProviderAttachment", 1) + ","
	}
	repeatedStringForProviderAttachmentBackRefs += "}"
	repeatedStringForQosConfigBackRefs := "[]*QosConfig{"
	for _, f := range this.QosConfigBackRefs {
		repeatedStringForQosConfigBackRefs += strings.Replace(f.String(), "QosConfig", "QosConfig", 1) + ","
	}
	repeatedStringForQosConfigBackRefs += "}"
	repeatedStringForQosQueueBackRefs := "[]*QosQueue{"
	for _, f := range this.QosQueueBackRefs {
		repeatedStringForQosQueueBackRefs += strings.Replace(f.String(), "QosQueue", "QosQueue", 1) + ","
	}
	repeatedStringForQosQueueBackRefs += "}"
	repeatedStringForRoleConfigBackRefs := "[]*RoleConfig{"
	for _, f := range this.RoleConfigBackRefs {
		repeatedStringForRoleConfigBackRefs += strings.Replace(f.String(), "RoleConfig", "RoleConfig", 1) + ","
	}
	repeatedStringForRoleConfigBackRefs += "}"
	repeatedStringForRoleDefinitionBackRefs := "[]*RoleDefinition{"
	for _, f := range this.RoleDefinitionBackRefs {
		repeatedStringForRoleDefinitionBackRefs += strings.Replace(f.String(), "RoleDefinition", "RoleDefinition", 1) + ","
	}
	repeatedStringForRoleDefinitionBackRefs += "}"
	repeatedStringForRouteAggregateBackRefs := "[]*RouteAggregate{"
	for _, f := range this.RouteAggregateBackRefs {
		repeatedStringForRouteAggregateBackRefs += strings.Replace(f.String(), "RouteAggregate", "RouteAggregate", 1) + ","
	}
	repeatedStringForRouteAggregateBackRefs += "}"
	repeatedStringForRouteTableBackRefs := "[]*RouteTable{"
	for _, f := range this.RouteTableBackRefs {
		repeatedStringForRouteTableBackRefs += strings.Replace(f.String(), "RouteTable", "RouteTable", 1) + ","
	}
	repeatedStringForRouteTableBackRefs += "}"
	repeatedStringForRouteTargetBackRefs := "[]*RouteTarget{"
	for _, f := range this.RouteTargetBackRefs {
		repeatedStringForRouteTargetBackRefs += strings.Replace(f.String(), "RouteTarget", "RouteTarget", 1) + ","
	}
	repeatedStringForRouteTargetBackRefs += "}"
	repeatedStringForRoutingInstanceBackRefs := "[]*RoutingInstance{"
	for _, f := range this.RoutingInstanceBackRefs {
		repeatedStringForRoutingInstanceBackRefs += strings.Replace(f.String(), "RoutingInstance", "RoutingInstance", 1) + ","
	}
	repeatedStringForRoutingInstanceBackRefs += "}"
	repeatedStringForRoutingPolicyBackRefs := "[]*RoutingPolicy{"
	for _, f := range this.RoutingPolicyBackRefs {
		repeatedStringForRoutingPolicyBackRefs += strings.Replace(f.String(), "RoutingPolicy", "RoutingPolicy", 1) + ","
	}
	repeatedStringForRoutingPolicyBackRefs += "}"
	repeatedStringForSecurityGroupBackRefs := "[]*SecurityGroup{"
	for _, f := range this.SecurityGroupBackRefs {
		repeatedStringForSecurityGroupBackRefs += strings.Replace(f.String(), "SecurityGroup", "SecurityGroup", 1) + ","
	}
	repeatedStringForSecurityGroupBackRefs += "}"
	repeatedStringForSecurityLoggingObjectBackRefs := "[]*SecurityLoggingObject{"
	for _, f := range this.SecurityLoggingObjectBackRefs {
		repeatedStringForSecurityLoggingObjectBackRefs += strings.Replace(f.String(), "SecurityLoggingObject", "SecurityLoggingObject", 1) + ","
	}
	repeatedStringForSecurityLoggingObjectBackRefs += "}"
	repeatedStringForServiceApplianceBackRefs := "[]*ServiceAppliance{"
	for _, f := range this.ServiceApplianceBackRefs {
		repeatedStringForServiceApplianceBackRefs += strings.Replace(f.String(), "ServiceAppliance", "ServiceAppliance", 1) + ","
	}
	repeatedStringForServiceApplianceBackRefs += "}"
	repeatedStringForServiceApplianceSetBackRefs := "[]*ServiceApplianceSet{"
	for _, f := range this.ServiceApplianceSetBackRefs {
		repeatedStringForServiceApplianceSetBackRefs += strings.Replace(f.String(), "ServiceApplianceSet", "ServiceApplianceSet", 1) + ","
	}
	repeatedStringForServiceApplianceSetBackRefs += "}"
	repeatedStringForServiceConnectionModuleBackRefs := "[]*ServiceConnectionModule{"
	for _, f := range this.ServiceConnectionModuleBackRefs {
		repeatedStringForServiceConnectionModuleBackRefs += strings.Replace(f.String(), "ServiceConnectionModule", "ServiceConnectionModule", 1) + ","
	}
	repeatedStringForServiceConnectionModuleBackRefs += "}"
	repeatedStringForServiceEndpointBackRefs := "[]*ServiceEndpoint{"
	for _, f := range this.ServiceEndpointBackRefs {
		repeatedStringForServiceEndpointBackRefs += strings.Replace(f.String(), "ServiceEndpoint", "ServiceEndpoint", 1) + ","
	}
	repeatedStringForServiceEndpointBackRefs += "}"
	repeatedStringForServiceGroupBackRefs := "[]*ServiceGroup{"
	for _, f := range this.ServiceGroupBackRefs {
		repeatedStringForServiceGroupBackRefs += strings.Replace(f.String(), "ServiceGroup", "ServiceGroup", 1) + ","
	}
	repeatedStringForServiceGroupBackRefs += "}"
	repeatedStringForServiceHealthCheckBackRefs := "[]*ServiceHealthCheck{"
	for _, f := range this.ServiceHealthCheckBackRefs {
		repeatedStringForServiceHealthCheckBackRefs += strings.Replace(f.String(), "ServiceHealthCheck", "ServiceHealthCheck", 1) + ","
	}
	repeatedStringForServiceHealthCheckBackRefs += "}"
	repeatedStringForServiceInstanceBackRefs := "[]*ServiceInstance{"
	for _, f := range this.ServiceInstanceBackRefs {
		repeatedStringForServiceInstanceBackRefs += strings.Replace(f.String(), "ServiceInstance", "ServiceInstance", 1) + ","
	}
	repeatedStringForServiceInstanceBackRefs += "}"
	repeatedStringForServiceObjectBackRefs := "[]*ServiceObject{"
	for _, f := range this.ServiceObjectBackRefs {
		repeatedStringForServiceObjectBackRefs += strings.Replace(f.String(), "ServiceObject", "ServiceObject", 1) + ","
	}
	repeatedStringForServiceObjectBackRefs += "}"
	repeatedStringForServiceTemplateBackRefs := "[]*ServiceTemplate{"
	for _, f := range this.ServiceTemplateBackRefs {
		repeatedStringForServiceTemplateBackRefs += strings.Replace(f.String(), "ServiceTemplate", "ServiceTemplate", 1) + ","
	}
	repeatedStringForServiceTemplateBackRefs += "}"
	repeatedStringForSflowProfileBackRefs := "[]*SflowProfile{"
	for _, f := range this.SflowProfileBackRefs {
		repeatedStringForSflowProfileBackRefs += strings.Replace(f.String(), "SflowProfile", "SflowProfile", 1) + ","
	}
	repeatedStringForSflowProfileBackRefs += "}"
	repeatedStringForStormControlProfileBackRefs := "[]*StormControlProfile{"
	for _, f := range this.StormControlProfileBackRefs {
		repeatedStringForStormControlProfileBackRefs += strings.Replace(f.String(), "StormControlProfile", "StormControlProfile", 1) + ","
	}
	repeatedStringForStormControlProfileBackRefs += "}"
	repeatedStringForStructuredSyslogApplicationRecordBackRefs := "[]*StructuredSyslogApplicationRecord{"
	for _, f := range this.StructuredSyslogApplicationRecordBackRefs {
		repeatedStringForStructuredSyslogApplicationRecordBackRefs += strings.Replace(f.String(), "StructuredSyslogApplicationRecord", "StructuredSyslogApplicationRecord", 1) + ","
	}
	repeatedStringForStructuredSyslogApplicationRecordBackRefs += "}"
	repeatedStringForStructuredSyslogConfigBackRefs := "[]*StructuredSyslogConfig{"
	for _, f := range this.StructuredSyslogConfigBackRefs {
		repeatedStringForStructuredSyslogConfigBackRefs += strings.Replace(f.String(), "StructuredSyslogConfig", "StructuredSyslogConfig", 1) + ","
	}
	repeatedStringForStructuredSyslogConfigBackRefs += "}"
	repeatedStringForStructuredSyslogHostnameRecordBackRefs := "[]*StructuredSyslogHostnameRecord{"
	for _, f := range this.StructuredSyslogHostnameRecordBackRefs {
		repeatedStringForStructuredSyslogHostnameRecordBackRefs += strings.Replace(f.String(), "StructuredSyslogHostnameRecord", "StructuredSyslogHostnameRecord", 1) + ","
	}
	repeatedStringForStructuredSyslogHostnameRecordBackRefs += "}"
	repeatedStringForStructuredSyslogMessageBackRefs := "[]*StructuredSyslogMessage{"
	for _, f := range this.StructuredSyslogMessageBackRefs {
		repeatedStringForStructuredSyslogMessageBackRefs += strings.Replace(f.String(), "StructuredSyslogMessage", "StructuredSyslogMessage", 1) + ","
	}
	repeatedStringForStructuredSyslogMessageBackRefs += "}"
	repeatedStringForStructuredSyslogSLAProfileBackRefs := "[]*StructuredSyslogSLAProfile{"
	for _, f := range this.StructuredSyslogSLAProfileBackRefs {
		repeatedStringForStructuredSyslogSLAProfileBackRefs += strings.Replace(f.String(), "StructuredSyslogSLAProfile", "StructuredSyslogSLAProfile", 1) + ","
	}
	repeatedStringForStructuredSyslogSLAProfileBackRefs += "}"
	repeatedStringForSubClusterBackRefs := "[]*SubCluster{"
	for _, f := range this.SubClusterBackRefs {
		repeatedStringForSubClusterBackRefs += strings.Replace(f.String(), "SubCluster", "SubCluster", 1) + ","
	}
	repeatedStringForSubClusterBackRefs += "}"
	repeatedStringForSubnetBackRefs := "[]*Subnet{"
	for _, f := range this.SubnetBackRefs {
		repeatedStringForSubnetBackRefs += strings.Replace(f.String(), "Subnet", "Subnet", 1) + ","
	}
	repeatedStringForSubnetBackRefs += "}"
	repeatedStringForTagBackRefs := "[]*Tag{"
	for _, f := range this.TagBackRefs {
		repeatedStringForTagBackRefs += strings.Replace(f.String(), "Tag", "Tag", 1) + ","
	}
	repeatedStringForTagBackRefs += "}"
	repeatedStringForTagTypeBackRefs := "[]*TagType{"
	for _, f := range this.TagTypeBackRefs {
		repeatedStringForTagTypeBackRefs += strings.Replace(f.String(), "TagType", "TagType", 1) + ","
	}
	repeatedStringForTagTypeBackRefs += "}"
	repeatedStringForTelemetryProfileBackRefs := "[]*TelemetryProfile{"
	for _, f := range this.TelemetryProfileBackRefs {
		repeatedStringForTelemetryProfileBackRefs += strings.Replace(f.String(), "TelemetryProfile", "TelemetryProfile", 1) + ","
	}
	repeatedStringForTelemetryProfileBackRefs += "}"
	repeatedStringForVirtualDNSBackRefs := "[]*VirtualDNS{"
	for _, f := range this.VirtualDNSBackRefs {
		repeatedStringForVirtualDNSBackRefs += strings.Replace(f.String(), "VirtualDNS", "VirtualDNS", 1) + ","
	}
	repeatedStringForVirtualDNSBackRefs += "}"
	repeatedStringForVirtualDNSRecordBackRefs := "[]*VirtualDNSRecord{"
	for _, f := range this.VirtualDNSRecordBackRefs {
		repeatedStringForVirtualDNSRecordBackRefs += strings.Replace(f.String(), "VirtualDNSRecord", "VirtualDNSRecord", 1) + ","
	}
	repeatedStringForVirtualDNSRecordBackRefs += "}"
	repeatedStringForVirtualIPBackRefs := "[]*VirtualIP{"
	for _, f := range this.VirtualIPBackRefs {
		repeatedStringForVirtualIPBackRefs += strings.Replace(f.String(), "VirtualIP", "VirtualIP", 1) + ","
	}
	repeatedStringForVirtualIPBackRefs += "}"
	repeatedStringForVirtualMachineBackRefs := "[]*VirtualMachine{"
	for _, f := range this.VirtualMachineBackRefs {
		repeatedStringForVirtualMachineBackRefs += strings.Replace(f.String(), "VirtualMachine", "VirtualMachine", 1) + ","
	}
	repeatedStringForVirtualMachineBackRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	repeatedStringForVirtualNetworkBackRefs := "[]*VirtualNetwork{"
	for _, f := range this.VirtualNetworkBackRefs {
		repeatedStringForVirtualNetworkBackRefs += strings.Replace(f.String(), "VirtualNetwork", "VirtualNetwork", 1) + ","
	}
	repeatedStringForVirtualNetworkBackRefs += "}"
	repeatedStringForVirtualPortGroupBackRefs := "[]*VirtualPortGroup{"
	for _, f := range this.VirtualPortGroupBackRefs {
		repeatedStringForVirtualPortGroupBackRefs += strings.Replace(f.String(), "VirtualPortGroup", "VirtualPortGroup", 1) + ","
	}
	repeatedStringForVirtualPortGroupBackRefs += "}"
	repeatedStringForVirtualRouterBackRefs := "[]*VirtualRouter{"
	for _, f := range this.VirtualRouterBackRefs {
		repeatedStringForVirtualRouterBackRefs += strings.Replace(f.String(), "VirtualRouter", "VirtualRouter", 1) + ","
	}
	repeatedStringForVirtualRouterBackRefs += "}"
	repeatedStringForWebuiNodeBackRefs := "[]*WebuiNode{"
	for _, f := range this.WebuiNodeBackRefs {
		repeatedStringForWebuiNodeBackRefs += strings.Replace(f.String(), "WebuiNode", "WebuiNode", 1) + ","
	}
	repeatedStringForWebuiNodeBackRefs += "}"
	s := strings.Join([]string{`&Tag{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TagID:` + fmt.Sprintf("%v", this.TagID) + `,`,
		`TagPredefined:` + fmt.Sprintf("%v", this.TagPredefined) + `,`,
		`TagTypeName:` + fmt.Sprintf("%v", this.TagTypeName) + `,`,
		`TagValue:` + fmt.Sprintf("%v", this.TagValue) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`TagTypeRefs:` + repeatedStringForTagTypeRefs + `,`,
		`AccessControlListBackRefs:` + repeatedStringForAccessControlListBackRefs + `,`,
		`AddressGroupBackRefs:` + repeatedStringForAddressGroupBackRefs + `,`,
		`AlarmBackRefs:` + repeatedStringForAlarmBackRefs + `,`,
		`AliasIPBackRefs:` + repeatedStringForAliasIPBackRefs + `,`,
		`AliasIPPoolBackRefs:` + repeatedStringForAliasIPPoolBackRefs + `,`,
		`AnalyticsAlarmNodeBackRefs:` + repeatedStringForAnalyticsAlarmNodeBackRefs + `,`,
		`AnalyticsNodeBackRefs:` + repeatedStringForAnalyticsNodeBackRefs + `,`,
		`AnalyticsSNMPNodeBackRefs:` + repeatedStringForAnalyticsSNMPNodeBackRefs + `,`,
		`APIAccessListBackRefs:` + repeatedStringForAPIAccessListBackRefs + `,`,
		`ApplicationPolicySetBackRefs:` + repeatedStringForApplicationPolicySetBackRefs + `,`,
		`BGPAsAServiceBackRefs:` + repeatedStringForBGPAsAServiceBackRefs + `,`,
		`BGPRouterBackRefs:` + repeatedStringForBGPRouterBackRefs + `,`,
		`BGPVPNBackRefs:` + repeatedStringForBGPVPNBackRefs + `,`,
		`BridgeDomainBackRefs:` + repeatedStringForBridgeDomainBackRefs + `,`,
		`CardBackRefs:` + repeatedStringForCardBackRefs + `,`,
		`CliConfigBackRefs:` + repeatedStringForCliConfigBackRefs + `,`,
		`ConfigDatabaseNodeBackRefs:` + repeatedStringForConfigDatabaseNodeBackRefs + `,`,
		`ConfigNodeBackRefs:` + repeatedStringForConfigNodeBackRefs + `,`,
		`ConfigRootBackRefs:` + repeatedStringForConfigRootBackRefs + `,`,
		`ControlNodeZoneBackRefs:` + repeatedStringForControlNodeZoneBackRefs + `,`,
		`CustomerAttachmentBackRefs:` + repeatedStringForCustomerAttachmentBackRefs + `,`,
		`DataCenterInterconnectBackRefs:` + repeatedStringForDataCenterInterconnectBackRefs + `,`,
		`DatabaseNodeBackRefs:` + repeatedStringForDatabaseNodeBackRefs + `,`,
		`DeviceChassisBackRefs:` + repeatedStringForDeviceChassisBackRefs + `,`,
		`DeviceFunctionalGroupBackRefs:` + repeatedStringForDeviceFunctionalGroupBackRefs + `,`,
		`DeviceImageBackRefs:` + repeatedStringForDeviceImageBackRefs + `,`,
		`DevicemgrNodeBackRefs:` + repeatedStringForDevicemgrNodeBackRefs + `,`,
		`DiscoveryServiceAssignmentBackRefs:` + repeatedStringForDiscoveryServiceAssignmentBackRefs + `,`,
		`DomainBackRefs:` + repeatedStringForDomainBackRefs + `,`,
		`DsaRuleBackRefs:` + repeatedStringForDsaRuleBackRefs + `,`,
		`E2ServiceProviderBackRefs:` + repeatedStringForE2ServiceProviderBackRefs + `,`,
		`FabricBackRefs:` + repeatedStringForFabricBackRefs + `,`,
		`FabricNamespaceBackRefs:` + repeatedStringForFabricNamespaceBackRefs + `,`,
		`FeatureBackRefs:` + repeatedStringForFeatureBackRefs + `,`,
		`FeatureConfigBackRefs:` + repeatedStringForFeatureConfigBackRefs + `,`,
		`FeatureFlagBackRefs:` + repeatedStringForFeatureFlagBackRefs + `,`,
		`FirewallPolicyBackRefs:` + repeatedStringForFirewallPolicyBackRefs + `,`,
		`FirewallRuleBackRefs:` + repeatedStringForFirewallRuleBackRefs + `,`,
		`FloatingIPBackRefs:` + repeatedStringForFloatingIPBackRefs + `,`,
		`FloatingIPPoolBackRefs:` + repeatedStringForFloatingIPPoolBackRefs + `,`,
		`FlowNodeBackRefs:` + repeatedStringForFlowNodeBackRefs + `,`,
		`ForwardingClassBackRefs:` + repeatedStringForForwardingClassBackRefs + `,`,
		`GlobalAnalyticsConfigBackRefs:` + repeatedStringForGlobalAnalyticsConfigBackRefs + `,`,
		`GlobalQosConfigBackRefs:` + repeatedStringForGlobalQosConfigBackRefs + `,`,
		`GlobalSystemConfigBackRefs:` + repeatedStringForGlobalSystemConfigBackRefs + `,`,
		`GlobalVrouterConfigBackRefs:` + repeatedStringForGlobalVrouterConfigBackRefs + `,`,
		`HardwareBackRefs:` + repeatedStringForHardwareBackRefs + `,`,
		`HardwareInventoryBackRefs:` + repeatedStringForHardwareInventoryBackRefs + `,`,
		`HostBasedServiceBackRefs:` + repeatedStringForHostBasedServiceBackRefs + `,`,
		`InstanceIPBackRefs:` + repeatedStringForInstanceIPBackRefs + `,`,
		`IntentMapBackRefs:` + repeatedStringForIntentMapBackRefs + `,`,
		`InterfaceRouteTableBackRefs:` + repeatedStringForInterfaceRouteTableBackRefs + `,`,
		`JobTemplateBackRefs:` + repeatedStringForJobTemplateBackRefs + `,`,
		`LinkAggregationGroupBackRefs:` + repeatedStringForLinkAggregationGroupBackRefs + `,`,
		`LoadbalancerBackRefs:` + repeatedStringForLoadbalancerBackRefs + `,`,
		`LoadbalancerHealthmonitorBackRefs:` + repeatedStringForLoadbalancerHealthmonitorBackRefs + `,`,
		`LoadbalancerListenerBackRefs:` + repeatedStringForLoadbalancerListenerBackRefs + `,`,
		`LoadbalancerMemberBackRefs:` + repeatedStringForLoadbalancerMemberBackRefs + `,`,
		`LoadbalancerPoolBackRefs:` + repeatedStringForLoadbalancerPoolBackRefs + `,`,
		`LogicalInterfaceBackRefs:` + repeatedStringForLogicalInterfaceBackRefs + `,`,
		`LogicalRouterBackRefs:` + repeatedStringForLogicalRouterBackRefs + `,`,
		`MulticastPolicyBackRefs:` + repeatedStringForMulticastPolicyBackRefs + `,`,
		`NamespaceBackRefs:` + repeatedStringForNamespaceBackRefs + `,`,
		`NetworkDeviceConfigBackRefs:` + repeatedStringForNetworkDeviceConfigBackRefs + `,`,
		`NetworkIpamBackRefs:` + repeatedStringForNetworkIpamBackRefs + `,`,
		`NetworkPolicyBackRefs:` + repeatedStringForNetworkPolicyBackRefs + `,`,
		`NodeBackRefs:` + repeatedStringForNodeBackRefs + `,`,
		`NodeProfileBackRefs:` + repeatedStringForNodeProfileBackRefs + `,`,
		`OverlayRoleBackRefs:` + repeatedStringForOverlayRoleBackRefs + `,`,
		`PeeringPolicyBackRefs:` + repeatedStringForPeeringPolicyBackRefs + `,`,
		`PhysicalInterfaceBackRefs:` + repeatedStringForPhysicalInterfaceBackRefs + `,`,
		`PhysicalRoleBackRefs:` + repeatedStringForPhysicalRoleBackRefs + `,`,
		`PhysicalRouterBackRefs:` + repeatedStringForPhysicalRouterBackRefs + `,`,
		`PolicyManagementBackRefs:` + repeatedStringForPolicyManagementBackRefs + `,`,
		`PortBackRefs:` + repeatedStringForPortBackRefs + `,`,
		`PortGroupBackRefs:` + repeatedStringForPortGroupBackRefs + `,`,
		`PortProfileBackRefs:` + repeatedStringForPortProfileBackRefs + `,`,
		`PortTupleBackRefs:` + repeatedStringForPortTupleBackRefs + `,`,
		`ProjectBackRefs:` + repeatedStringForProjectBackRefs + `,`,
		`ProviderAttachmentBackRefs:` + repeatedStringForProviderAttachmentBackRefs + `,`,
		`QosConfigBackRefs:` + repeatedStringForQosConfigBackRefs + `,`,
		`QosQueueBackRefs:` + repeatedStringForQosQueueBackRefs + `,`,
		`RoleConfigBackRefs:` + repeatedStringForRoleConfigBackRefs + `,`,
		`RoleDefinitionBackRefs:` + repeatedStringForRoleDefinitionBackRefs + `,`,
		`RouteAggregateBackRefs:` + repeatedStringForRouteAggregateBackRefs + `,`,
		`RouteTableBackRefs:` + repeatedStringForRouteTableBackRefs + `,`,
		`RouteTargetBackRefs:` + repeatedStringForRouteTargetBackRefs + `,`,
		`RoutingInstanceBackRefs:` + repeatedStringForRoutingInstanceBackRefs + `,`,
		`RoutingPolicyBackRefs:` + repeatedStringForRoutingPolicyBackRefs + `,`,
		`SecurityGroupBackRefs:` + repeatedStringForSecurityGroupBackRefs + `,`,
		`SecurityLoggingObjectBackRefs:` + repeatedStringForSecurityLoggingObjectBackRefs + `,`,
		`ServiceApplianceBackRefs:` + repeatedStringForServiceApplianceBackRefs + `,`,
		`ServiceApplianceSetBackRefs:` + repeatedStringForServiceApplianceSetBackRefs + `,`,
		`ServiceConnectionModuleBackRefs:` + repeatedStringForServiceConnectionModuleBackRefs + `,`,
		`ServiceEndpointBackRefs:` + repeatedStringForServiceEndpointBackRefs + `,`,
		`ServiceGroupBackRefs:` + repeatedStringForServiceGroupBackRefs + `,`,
		`ServiceHealthCheckBackRefs:` + repeatedStringForServiceHealthCheckBackRefs + `,`,
		`ServiceInstanceBackRefs:` + repeatedStringForServiceInstanceBackRefs + `,`,
		`ServiceObjectBackRefs:` + repeatedStringForServiceObjectBackRefs + `,`,
		`ServiceTemplateBackRefs:` + repeatedStringForServiceTemplateBackRefs + `,`,
		`SflowProfileBackRefs:` + repeatedStringForSflowProfileBackRefs + `,`,
		`StormControlProfileBackRefs:` + repeatedStringForStormControlProfileBackRefs + `,`,
		`StructuredSyslogApplicationRecordBackRefs:` + repeatedStringForStructuredSyslogApplicationRecordBackRefs + `,`,
		`StructuredSyslogConfigBackRefs:` + repeatedStringForStructuredSyslogConfigBackRefs + `,`,
		`StructuredSyslogHostnameRecordBackRefs:` + repeatedStringForStructuredSyslogHostnameRecordBackRefs + `,`,
		`StructuredSyslogMessageBackRefs:` + repeatedStringForStructuredSyslogMessageBackRefs + `,`,
		`StructuredSyslogSLAProfileBackRefs:` + repeatedStringForStructuredSyslogSLAProfileBackRefs + `,`,
		`SubClusterBackRefs:` + repeatedStringForSubClusterBackRefs + `,`,
		`SubnetBackRefs:` + repeatedStringForSubnetBackRefs + `,`,
		`TagBackRefs:` + repeatedStringForTagBackRefs + `,`,
		`TagTypeBackRefs:` + repeatedStringForTagTypeBackRefs + `,`,
		`TelemetryProfileBackRefs:` + repeatedStringForTelemetryProfileBackRefs + `,`,
		`VirtualDNSBackRefs:` + repeatedStringForVirtualDNSBackRefs + `,`,
		`VirtualDNSRecordBackRefs:` + repeatedStringForVirtualDNSRecordBackRefs + `,`,
		`VirtualIPBackRefs:` + repeatedStringForVirtualIPBackRefs + `,`,
		`VirtualMachineBackRefs:` + repeatedStringForVirtualMachineBackRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`VirtualNetworkBackRefs:` + repeatedStringForVirtualNetworkBackRefs + `,`,
		`VirtualPortGroupBackRefs:` + repeatedStringForVirtualPortGroupBackRefs + `,`,
		`VirtualRouterBackRefs:` + repeatedStringForVirtualRouterBackRefs + `,`,
		`WebuiNodeBackRefs:` + repeatedStringForWebuiNodeBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagTagTypeRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagTagTypeRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*TagTypeTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "TagTypeTagRef", "TagTypeTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForTagBackRefs := "[]*Tag{"
	for _, f := range this.TagBackRefs {
		repeatedStringForTagBackRefs += strings.Replace(f.String(), "Tag", "Tag", 1) + ","
	}
	repeatedStringForTagBackRefs += "}"
	s := strings.Join([]string{`&TagType{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TagTypeID:` + fmt.Sprintf("%v", this.TagTypeID) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`TagBackRefs:` + repeatedStringForTagBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *TagTypeTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TagTypeTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TelemetryProfile) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSflowProfileRefs := "[]*TelemetryProfileSflowProfileRef{"
	for _, f := range this.SflowProfileRefs {
		repeatedStringForSflowProfileRefs += strings.Replace(f.String(), "TelemetryProfileSflowProfileRef", "TelemetryProfileSflowProfileRef", 1) + ","
	}
	repeatedStringForSflowProfileRefs += "}"
	repeatedStringForTagRefs := "[]*TelemetryProfileTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "TelemetryProfileTagRef", "TelemetryProfileTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForPhysicalRouterBackRefs := "[]*PhysicalRouter{"
	for _, f := range this.PhysicalRouterBackRefs {
		repeatedStringForPhysicalRouterBackRefs += strings.Replace(f.String(), "PhysicalRouter", "PhysicalRouter", 1) + ","
	}
	repeatedStringForPhysicalRouterBackRefs += "}"
	s := strings.Join([]string{`&TelemetryProfile{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`TelemetryProfileIsDefault:` + fmt.Sprintf("%v", this.TelemetryProfileIsDefault) + `,`,
		`SflowProfileRefs:` + repeatedStringForSflowProfileRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`PhysicalRouterBackRefs:` + repeatedStringForPhysicalRouterBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *TelemetryProfileSflowProfileRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TelemetryProfileSflowProfileRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TelemetryProfileTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TelemetryProfileTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualDNSRecord) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*VirtualDNSRecordTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "VirtualDNSRecordTagRef", "VirtualDNSRecordTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&VirtualDNSRecord{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`VirtualDNSRecordData:` + strings.Replace(this.VirtualDNSRecordData.String(), "VirtualDnsRecordType", "VirtualDnsRecordType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualDNSRecordTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualDNSRecordTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualDNS) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*VirtualDNSTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "VirtualDNSTagRef", "VirtualDNSTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForNetworkIpamBackRefs := "[]*NetworkIpam{"
	for _, f := range this.NetworkIpamBackRefs {
		repeatedStringForNetworkIpamBackRefs += strings.Replace(f.String(), "NetworkIpam", "NetworkIpam", 1) + ","
	}
	repeatedStringForNetworkIpamBackRefs += "}"
	repeatedStringForVirtualDNSRecords := "[]*VirtualDNSRecord{"
	for _, f := range this.VirtualDNSRecords {
		repeatedStringForVirtualDNSRecords += strings.Replace(f.String(), "VirtualDNSRecord", "VirtualDNSRecord", 1) + ","
	}
	repeatedStringForVirtualDNSRecords += "}"
	s := strings.Join([]string{`&VirtualDNS{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`VirtualDNSData:` + strings.Replace(this.VirtualDNSData.String(), "VirtualDnsType", "VirtualDnsType", 1) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`NetworkIpamBackRefs:` + repeatedStringForNetworkIpamBackRefs + `,`,
		`VirtualDNSRecords:` + repeatedStringForVirtualDNSRecords + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualDNSTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualDNSTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualIP) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLoadbalancerPoolRefs := "[]*VirtualIPLoadbalancerPoolRef{"
	for _, f := range this.LoadbalancerPoolRefs {
		repeatedStringForLoadbalancerPoolRefs += strings.Replace(f.String(), "VirtualIPLoadbalancerPoolRef", "VirtualIPLoadbalancerPoolRef", 1) + ","
	}
	repeatedStringForLoadbalancerPoolRefs += "}"
	repeatedStringForTagRefs := "[]*VirtualIPTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "VirtualIPTagRef", "VirtualIPTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceRefs := "[]*VirtualIPVirtualMachineInterfaceRef{"
	for _, f := range this.VirtualMachineInterfaceRefs {
		repeatedStringForVirtualMachineInterfaceRefs += strings.Replace(f.String(), "VirtualIPVirtualMachineInterfaceRef", "VirtualIPVirtualMachineInterfaceRef", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceRefs += "}"
	s := strings.Join([]string{`&VirtualIP{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`VirtualIPProperties:` + strings.Replace(this.VirtualIPProperties.String(), "VirtualIpType", "VirtualIpType", 1) + `,`,
		`LoadbalancerPoolRefs:` + repeatedStringForLoadbalancerPoolRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceRefs:` + repeatedStringForVirtualMachineInterfaceRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualIPLoadbalancerPoolRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualIPLoadbalancerPoolRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualIPTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualIPTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualIPVirtualMachineInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualIPVirtualMachineInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterface) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBGPRouterRefs := "[]*VirtualMachineInterfaceBGPRouterRef{"
	for _, f := range this.BGPRouterRefs {
		repeatedStringForBGPRouterRefs += strings.Replace(f.String(), "VirtualMachineInterfaceBGPRouterRef", "VirtualMachineInterfaceBGPRouterRef", 1) + ","
	}
	repeatedStringForBGPRouterRefs += "}"
	repeatedStringForBridgeDomainRefs := "[]*VirtualMachineInterfaceBridgeDomainRef{"
	for _, f := range this.BridgeDomainRefs {
		repeatedStringForBridgeDomainRefs += strings.Replace(f.String(), "VirtualMachineInterfaceBridgeDomainRef", "VirtualMachineInterfaceBridgeDomainRef", 1) + ","
	}
	repeatedStringForBridgeDomainRefs += "}"
	repeatedStringForInterfaceRouteTableRefs := "[]*VirtualMachineInterfaceInterfaceRouteTableRef{"
	for _, f := range this.InterfaceRouteTableRefs {
		repeatedStringForInterfaceRouteTableRefs += strings.Replace(f.String(), "VirtualMachineInterfaceInterfaceRouteTableRef", "VirtualMachineInterfaceInterfaceRouteTableRef", 1) + ","
	}
	repeatedStringForInterfaceRouteTableRefs += "}"
	repeatedStringForPhysicalInterfaceRefs := "[]*VirtualMachineInterfacePhysicalInterfaceRef{"
	for _, f := range this.PhysicalInterfaceRefs {
		repeatedStringForPhysicalInterfaceRefs += strings.Replace(f.String(), "VirtualMachineInterfacePhysicalInterfaceRef", "VirtualMachineInterfacePhysicalInterfaceRef", 1) + ","
	}
	repeatedStringForPhysicalInterfaceRefs += "}"
	repeatedStringForPortProfileRefs := "[]*VirtualMachineInterfacePortProfileRef{"
	for _, f := range this.PortProfileRefs {
		repeatedStringForPortProfileRefs += strings.Replace(f.String(), "VirtualMachineInterfacePortProfileRef", "VirtualMachineInterfacePortProfileRef", 1) + ","
	}
	repeatedStringForPortProfileRefs += "}"
	repeatedStringForPortTupleRefs := "[]*VirtualMachineInterfacePortTupleRef{"
	for _, f := range this.PortTupleRefs {
		repeatedStringForPortTupleRefs += strings.Replace(f.String(), "VirtualMachineInterfacePortTupleRef", "VirtualMachineInterfacePortTupleRef", 1) + ","
	}
	repeatedStringForPortTupleRefs += "}"
	repeatedStringForQosConfigRefs := "[]*VirtualMachineInterfaceQosConfigRef{"
	for _, f := range this.QosConfigRefs {
		repeatedStringForQosConfigRefs += strings.Replace(f.String(), "VirtualMachineInterfaceQosConfigRef", "VirtualMachineInterfaceQosConfigRef", 1) + ","
	}
	repeatedStringForQosConfigRefs += "}"
	repeatedStringForRoutingInstanceRefs := "[]*VirtualMachineInterfaceRoutingInstanceRef{"
	for _, f := range this.RoutingInstanceRefs {
		repeatedStringForRoutingInstanceRefs += strings.Replace(f.String(), "VirtualMachineInterfaceRoutingInstanceRef", "VirtualMachineInterfaceRoutingInstanceRef", 1) + ","
	}
	repeatedStringForRoutingInstanceRefs += "}"
	repeatedStringForSecurityGroupRefs := "[]*VirtualMachineInterfaceSecurityGroupRef{"
	for _, f := range this.SecurityGroupRefs {
		repeatedStringForSecurityGroupRefs += strings.Replace(f.String(), "VirtualMachineInterfaceSecurityGroupRef", "VirtualMachineInterfaceSecurityGroupRef", 1) + ","
	}
	repeatedStringForSecurityGroupRefs += "}"
	repeatedStringForSecurityLoggingObjectRefs := "[]*VirtualMachineInterfaceSecurityLoggingObjectRef{"
	for _, f := range this.SecurityLoggingObjectRefs {
		repeatedStringForSecurityLoggingObjectRefs += strings.Replace(f.String(), "VirtualMachineInterfaceSecurityLoggingObjectRef", "VirtualMachineInterfaceSecurityLoggingObjectRef", 1) + ","
	}
	repeatedStringForSecurityLoggingObjectRefs += "}"
	repeatedStringForServiceEndpointRefs := "[]*VirtualMachineInterfaceServiceEndpointRef{"
	for _, f := range this.ServiceEndpointRefs {
		repeatedStringForServiceEndpointRefs += strings.Replace(f.String(), "VirtualMachineInterfaceServiceEndpointRef", "VirtualMachineInterfaceServiceEndpointRef", 1) + ","
	}
	repeatedStringForServiceEndpointRefs += "}"
	repeatedStringForServiceHealthCheckRefs := "[]*VirtualMachineInterfaceServiceHealthCheckRef{"
	for _, f := range this.ServiceHealthCheckRefs {
		repeatedStringForServiceHealthCheckRefs += strings.Replace(f.String(), "VirtualMachineInterfaceServiceHealthCheckRef", "VirtualMachineInterfaceServiceHealthCheckRef", 1) + ","
	}
	repeatedStringForServiceHealthCheckRefs += "}"
	repeatedStringForTagRefs := "[]*VirtualMachineInterfaceTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "VirtualMachineInterfaceTagRef", "VirtualMachineInterfaceTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineRefs := "[]*VirtualMachineInterfaceVirtualMachineRef{"
	for _, f := range this.VirtualMachineRefs {
		repeatedStringForVirtualMachineRefs += strings.Replace(f.String(), "VirtualMachineInterfaceVirtualMachineRef", "VirtualMachineInterfaceVirtualMachineRef", 1) + ","
	}
	repeatedStringForVirtualMachineRefs += "}"
	repeatedStringForVirtualMachineInterfaceRefs := "[]*VirtualMachineInterfaceVirtualMachineInterfaceRef{"
	for _, f := range this.VirtualMachineInterfaceRefs {
		repeatedStringForVirtualMachineInterfaceRefs += strings.Replace(f.String(), "VirtualMachineInterfaceVirtualMachineInterfaceRef", "VirtualMachineInterfaceVirtualMachineInterfaceRef", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceRefs += "}"
	repeatedStringForVirtualNetworkRefs := "[]*VirtualMachineInterfaceVirtualNetworkRef{"
	for _, f := range this.VirtualNetworkRefs {
		repeatedStringForVirtualNetworkRefs += strings.Replace(f.String(), "VirtualMachineInterfaceVirtualNetworkRef", "VirtualMachineInterfaceVirtualNetworkRef", 1) + ","
	}
	repeatedStringForVirtualNetworkRefs += "}"
	repeatedStringForAliasIPBackRefs := "[]*AliasIP{"
	for _, f := range this.AliasIPBackRefs {
		repeatedStringForAliasIPBackRefs += strings.Replace(f.String(), "AliasIP", "AliasIP", 1) + ","
	}
	repeatedStringForAliasIPBackRefs += "}"
	repeatedStringForBGPAsAServiceBackRefs := "[]*BGPAsAService{"
	for _, f := range this.BGPAsAServiceBackRefs {
		repeatedStringForBGPAsAServiceBackRefs += strings.Replace(f.String(), "BGPAsAService", "BGPAsAService", 1) + ","
	}
	repeatedStringForBGPAsAServiceBackRefs += "}"
	repeatedStringForCustomerAttachmentBackRefs := "[]*CustomerAttachment{"
	for _, f := range this.CustomerAttachmentBackRefs {
		repeatedStringForCustomerAttachmentBackRefs += strings.Replace(f.String(), "CustomerAttachment", "CustomerAttachment", 1) + ","
	}
	repeatedStringForCustomerAttachmentBackRefs += "}"
	repeatedStringForFloatingIPBackRefs := "[]*FloatingIP{"
	for _, f := range this.FloatingIPBackRefs {
		repeatedStringForFloatingIPBackRefs += strings.Replace(f.String(), "FloatingIP", "FloatingIP", 1) + ","
	}
	repeatedStringForFloatingIPBackRefs += "}"
	repeatedStringForInstanceIPBackRefs := "[]*InstanceIP{"
	for _, f := range this.InstanceIPBackRefs {
		repeatedStringForInstanceIPBackRefs += strings.Replace(f.String(), "InstanceIP", "InstanceIP", 1) + ","
	}
	repeatedStringForInstanceIPBackRefs += "}"
	repeatedStringForLinkAggregationGroupBackRefs := "[]*LinkAggregationGroup{"
	for _, f := range this.LinkAggregationGroupBackRefs {
		repeatedStringForLinkAggregationGroupBackRefs += strings.Replace(f.String(), "LinkAggregationGroup", "LinkAggregationGroup", 1) + ","
	}
	repeatedStringForLinkAggregationGroupBackRefs += "}"
	repeatedStringForLoadbalancerBackRefs := "[]*Loadbalancer{"
	for _, f := range this.LoadbalancerBackRefs {
		repeatedStringForLoadbalancerBackRefs += strings.Replace(f.String(), "Loadbalancer", "Loadbalancer", 1) + ","
	}
	repeatedStringForLoadbalancerBackRefs += "}"
	repeatedStringForLoadbalancerPoolBackRefs := "[]*LoadbalancerPool{"
	for _, f := range this.LoadbalancerPoolBackRefs {
		repeatedStringForLoadbalancerPoolBackRefs += strings.Replace(f.String(), "LoadbalancerPool", "LoadbalancerPool", 1) + ","
	}
	repeatedStringForLoadbalancerPoolBackRefs += "}"
	repeatedStringForLogicalInterfaceBackRefs := "[]*LogicalInterface{"
	for _, f := range this.LogicalInterfaceBackRefs {
		repeatedStringForLogicalInterfaceBackRefs += strings.Replace(f.String(), "LogicalInterface", "LogicalInterface", 1) + ","
	}
	repeatedStringForLogicalInterfaceBackRefs += "}"
	repeatedStringForLogicalRouterBackRefs := "[]*LogicalRouter{"
	for _, f := range this.LogicalRouterBackRefs {
		repeatedStringForLogicalRouterBackRefs += strings.Replace(f.String(), "LogicalRouter", "LogicalRouter", 1) + ","
	}
	repeatedStringForLogicalRouterBackRefs += "}"
	repeatedStringForSubnetBackRefs := "[]*Subnet{"
	for _, f := range this.SubnetBackRefs {
		repeatedStringForSubnetBackRefs += strings.Replace(f.String(), "Subnet", "Subnet", 1) + ","
	}
	repeatedStringForSubnetBackRefs += "}"
	repeatedStringForVirtualIPBackRefs := "[]*VirtualIP{"
	for _, f := range this.VirtualIPBackRefs {
		repeatedStringForVirtualIPBackRefs += strings.Replace(f.String(), "VirtualIP", "VirtualIP", 1) + ","
	}
	repeatedStringForVirtualIPBackRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	repeatedStringForVirtualPortGroupBackRefs := "[]*VirtualPortGroup{"
	for _, f := range this.VirtualPortGroupBackRefs {
		repeatedStringForVirtualPortGroupBackRefs += strings.Replace(f.String(), "VirtualPortGroup", "VirtualPortGroup", 1) + ","
	}
	repeatedStringForVirtualPortGroupBackRefs += "}"
	s := strings.Join([]string{`&VirtualMachineInterface{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`EcmpHashingIncludeFields:` + strings.Replace(this.EcmpHashingIncludeFields.String(), "EcmpHashingIncludeFields", "EcmpHashingIncludeFields", 1) + `,`,
		`IgmpEnable:` + fmt.Sprintf("%v", this.IgmpEnable) + `,`,
		`PortSecurityEnabled:` + fmt.Sprintf("%v", this.PortSecurityEnabled) + `,`,
		`VirtualMachineInterfaceAllowedAddressPairs:` + strings.Replace(this.VirtualMachineInterfaceAllowedAddressPairs.String(), "AllowedAddressPairs", "AllowedAddressPairs", 1) + `,`,
		`VirtualMachineInterfaceBindings:` + strings.Replace(this.VirtualMachineInterfaceBindings.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`VirtualMachineInterfaceDeviceOwner:` + fmt.Sprintf("%v", this.VirtualMachineInterfaceDeviceOwner) + `,`,
		`VirtualMachineInterfaceDHCPOptionList:` + strings.Replace(this.VirtualMachineInterfaceDHCPOptionList.String(), "DhcpOptionsListType", "DhcpOptionsListType", 1) + `,`,
		`VirtualMachineInterfaceDisablePolicy:` + fmt.Sprintf("%v", this.VirtualMachineInterfaceDisablePolicy) + `,`,
		`VirtualMachineInterfaceFatFlowProtocols:` + strings.Replace(this.VirtualMachineInterfaceFatFlowProtocols.String(), "FatFlowProtocols", "FatFlowProtocols", 1) + `,`,
		`VirtualMachineInterfaceHostRoutes:` + strings.Replace(this.VirtualMachineInterfaceHostRoutes.String(), "RouteTableType", "RouteTableType", 1) + `,`,
		`VirtualMachineInterfaceMacAddresses:` + strings.Replace(this.VirtualMachineInterfaceMacAddresses.String(), "MacAddressesType", "MacAddressesType", 1) + `,`,
		`VirtualMachineInterfaceProperties:` + strings.Replace(this.VirtualMachineInterfaceProperties.String(), "VirtualMachineInterfacePropertiesType", "VirtualMachineInterfacePropertiesType", 1) + `,`,
		`VlanTagBasedBridgeDomain:` + fmt.Sprintf("%v", this.VlanTagBasedBridgeDomain) + `,`,
		`VRFAssignTable:` + strings.Replace(this.VRFAssignTable.String(), "VrfAssignTableType", "VrfAssignTableType", 1) + `,`,
		`BGPRouterRefs:` + repeatedStringForBGPRouterRefs + `,`,
		`BridgeDomainRefs:` + repeatedStringForBridgeDomainRefs + `,`,
		`InterfaceRouteTableRefs:` + repeatedStringForInterfaceRouteTableRefs + `,`,
		`PhysicalInterfaceRefs:` + repeatedStringForPhysicalInterfaceRefs + `,`,
		`PortProfileRefs:` + repeatedStringForPortProfileRefs + `,`,
		`PortTupleRefs:` + repeatedStringForPortTupleRefs + `,`,
		`QosConfigRefs:` + repeatedStringForQosConfigRefs + `,`,
		`RoutingInstanceRefs:` + repeatedStringForRoutingInstanceRefs + `,`,
		`SecurityGroupRefs:` + repeatedStringForSecurityGroupRefs + `,`,
		`SecurityLoggingObjectRefs:` + repeatedStringForSecurityLoggingObjectRefs + `,`,
		`ServiceEndpointRefs:` + repeatedStringForServiceEndpointRefs + `,`,
		`ServiceHealthCheckRefs:` + repeatedStringForServiceHealthCheckRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineRefs:` + repeatedStringForVirtualMachineRefs + `,`,
		`VirtualMachineInterfaceRefs:` + repeatedStringForVirtualMachineInterfaceRefs + `,`,
		`VirtualNetworkRefs:` + repeatedStringForVirtualNetworkRefs + `,`,
		`AliasIPBackRefs:` + repeatedStringForAliasIPBackRefs + `,`,
		`BGPAsAServiceBackRefs:` + repeatedStringForBGPAsAServiceBackRefs + `,`,
		`CustomerAttachmentBackRefs:` + repeatedStringForCustomerAttachmentBackRefs + `,`,
		`FloatingIPBackRefs:` + repeatedStringForFloatingIPBackRefs + `,`,
		`InstanceIPBackRefs:` + repeatedStringForInstanceIPBackRefs + `,`,
		`LinkAggregationGroupBackRefs:` + repeatedStringForLinkAggregationGroupBackRefs + `,`,
		`LoadbalancerBackRefs:` + repeatedStringForLoadbalancerBackRefs + `,`,
		`LoadbalancerPoolBackRefs:` + repeatedStringForLoadbalancerPoolBackRefs + `,`,
		`LogicalInterfaceBackRefs:` + repeatedStringForLogicalInterfaceBackRefs + `,`,
		`LogicalRouterBackRefs:` + repeatedStringForLogicalRouterBackRefs + `,`,
		`SubnetBackRefs:` + repeatedStringForSubnetBackRefs + `,`,
		`VirtualIPBackRefs:` + repeatedStringForVirtualIPBackRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`VirtualPortGroupBackRefs:` + repeatedStringForVirtualPortGroupBackRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfaceBGPRouterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfaceBGPRouterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfaceBridgeDomainRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfaceBridgeDomainRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "BridgeDomainMembershipType", "BridgeDomainMembershipType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfaceInterfaceRouteTableRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfaceInterfaceRouteTableRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfacePhysicalInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfacePhysicalInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfacePortProfileRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfacePortProfileRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfacePortTupleRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfacePortTupleRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfaceQosConfigRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfaceQosConfigRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfaceRoutingInstanceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfaceRoutingInstanceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "PolicyBasedForwardingRuleType", "PolicyBasedForwardingRuleType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfaceSecurityGroupRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfaceSecurityGroupRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfaceSecurityLoggingObjectRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfaceSecurityLoggingObjectRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfaceServiceEndpointRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfaceServiceEndpointRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfaceServiceHealthCheckRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfaceServiceHealthCheckRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfaceTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfaceTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfaceVirtualMachineRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfaceVirtualMachineRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfaceVirtualMachineInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfaceVirtualMachineInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfaceVirtualNetworkRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfaceVirtualNetworkRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachine) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForServiceInstanceRefs := "[]*VirtualMachineServiceInstanceRef{"
	for _, f := range this.ServiceInstanceRefs {
		repeatedStringForServiceInstanceRefs += strings.Replace(f.String(), "VirtualMachineServiceInstanceRef", "VirtualMachineServiceInstanceRef", 1) + ","
	}
	repeatedStringForServiceInstanceRefs += "}"
	repeatedStringForTagRefs := "[]*VirtualMachineTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "VirtualMachineTagRef", "VirtualMachineTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	repeatedStringForVirtualRouterBackRefs := "[]*VirtualRouter{"
	for _, f := range this.VirtualRouterBackRefs {
		repeatedStringForVirtualRouterBackRefs += strings.Replace(f.String(), "VirtualRouter", "VirtualRouter", 1) + ","
	}
	repeatedStringForVirtualRouterBackRefs += "}"
	repeatedStringForVirtualMachineInterfaces := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaces {
		repeatedStringForVirtualMachineInterfaces += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaces += "}"
	s := strings.Join([]string{`&VirtualMachine{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`ServerType:` + fmt.Sprintf("%v", this.ServerType) + `,`,
		`ServiceInstanceRefs:` + repeatedStringForServiceInstanceRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`VirtualRouterBackRefs:` + repeatedStringForVirtualRouterBackRefs + `,`,
		`VirtualMachineInterfaces:` + repeatedStringForVirtualMachineInterfaces + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineServiceInstanceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineServiceInstanceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetwork) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBGPVPNRefs := "[]*VirtualNetworkBGPVPNRef{"
	for _, f := range this.BGPVPNRefs {
		repeatedStringForBGPVPNRefs += strings.Replace(f.String(), "VirtualNetworkBGPVPNRef", "VirtualNetworkBGPVPNRef", 1) + ","
	}
	repeatedStringForBGPVPNRefs += "}"
	repeatedStringForIntentMapRefs := "[]*VirtualNetworkIntentMapRef{"
	for _, f := range this.IntentMapRefs {
		repeatedStringForIntentMapRefs += strings.Replace(f.String(), "VirtualNetworkIntentMapRef", "VirtualNetworkIntentMapRef", 1) + ","
	}
	repeatedStringForIntentMapRefs += "}"
	repeatedStringForMulticastPolicyRefs := "[]*VirtualNetworkMulticastPolicyRef{"
	for _, f := range this.MulticastPolicyRefs {
		repeatedStringForMulticastPolicyRefs += strings.Replace(f.String(), "VirtualNetworkMulticastPolicyRef", "VirtualNetworkMulticastPolicyRef", 1) + ","
	}
	repeatedStringForMulticastPolicyRefs += "}"
	repeatedStringForNetworkIpamRefs := "[]*VirtualNetworkNetworkIpamRef{"
	for _, f := range this.NetworkIpamRefs {
		repeatedStringForNetworkIpamRefs += strings.Replace(f.String(), "VirtualNetworkNetworkIpamRef", "VirtualNetworkNetworkIpamRef", 1) + ","
	}
	repeatedStringForNetworkIpamRefs += "}"
	repeatedStringForNetworkPolicyRefs := "[]*VirtualNetworkNetworkPolicyRef{"
	for _, f := range this.NetworkPolicyRefs {
		repeatedStringForNetworkPolicyRefs += strings.Replace(f.String(), "VirtualNetworkNetworkPolicyRef", "VirtualNetworkNetworkPolicyRef", 1) + ","
	}
	repeatedStringForNetworkPolicyRefs += "}"
	repeatedStringForQosConfigRefs := "[]*VirtualNetworkQosConfigRef{"
	for _, f := range this.QosConfigRefs {
		repeatedStringForQosConfigRefs += strings.Replace(f.String(), "VirtualNetworkQosConfigRef", "VirtualNetworkQosConfigRef", 1) + ","
	}
	repeatedStringForQosConfigRefs += "}"
	repeatedStringForRouteTableRefs := "[]*VirtualNetworkRouteTableRef{"
	for _, f := range this.RouteTableRefs {
		repeatedStringForRouteTableRefs += strings.Replace(f.String(), "VirtualNetworkRouteTableRef", "VirtualNetworkRouteTableRef", 1) + ","
	}
	repeatedStringForRouteTableRefs += "}"
	repeatedStringForRoutingPolicyRefs := "[]*VirtualNetworkRoutingPolicyRef{"
	for _, f := range this.RoutingPolicyRefs {
		repeatedStringForRoutingPolicyRefs += strings.Replace(f.String(), "VirtualNetworkRoutingPolicyRef", "VirtualNetworkRoutingPolicyRef", 1) + ","
	}
	repeatedStringForRoutingPolicyRefs += "}"
	repeatedStringForSecurityLoggingObjectRefs := "[]*VirtualNetworkSecurityLoggingObjectRef{"
	for _, f := range this.SecurityLoggingObjectRefs {
		repeatedStringForSecurityLoggingObjectRefs += strings.Replace(f.String(), "VirtualNetworkSecurityLoggingObjectRef", "VirtualNetworkSecurityLoggingObjectRef", 1) + ","
	}
	repeatedStringForSecurityLoggingObjectRefs += "}"
	repeatedStringForTagRefs := "[]*VirtualNetworkTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "VirtualNetworkTagRef", "VirtualNetworkTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualNetworkRefs := "[]*VirtualNetworkVirtualNetworkRef{"
	for _, f := range this.VirtualNetworkRefs {
		repeatedStringForVirtualNetworkRefs += strings.Replace(f.String(), "VirtualNetworkVirtualNetworkRef", "VirtualNetworkVirtualNetworkRef", 1) + ","
	}
	repeatedStringForVirtualNetworkRefs += "}"
	repeatedStringForDataCenterInterconnectBackRefs := "[]*DataCenterInterconnect{"
	for _, f := range this.DataCenterInterconnectBackRefs {
		repeatedStringForDataCenterInterconnectBackRefs += strings.Replace(f.String(), "DataCenterInterconnect", "DataCenterInterconnect", 1) + ","
	}
	repeatedStringForDataCenterInterconnectBackRefs += "}"
	repeatedStringForFabricBackRefs := "[]*Fabric{"
	for _, f := range this.FabricBackRefs {
		repeatedStringForFabricBackRefs += strings.Replace(f.String(), "Fabric", "Fabric", 1) + ","
	}
	repeatedStringForFabricBackRefs += "}"
	repeatedStringForFirewallRuleBackRefs := "[]*FirewallRule{"
	for _, f := range this.FirewallRuleBackRefs {
		repeatedStringForFirewallRuleBackRefs += strings.Replace(f.String(), "FirewallRule", "FirewallRule", 1) + ","
	}
	repeatedStringForFirewallRuleBackRefs += "}"
	repeatedStringForFlowNodeBackRefs := "[]*FlowNode{"
	for _, f := range this.FlowNodeBackRefs {
		repeatedStringForFlowNodeBackRefs += strings.Replace(f.String(), "FlowNode", "FlowNode", 1) + ","
	}
	repeatedStringForFlowNodeBackRefs += "}"
	repeatedStringForHostBasedServiceBackRefs := "[]*HostBasedService{"
	for _, f := range this.HostBasedServiceBackRefs {
		repeatedStringForHostBasedServiceBackRefs += strings.Replace(f.String(), "HostBasedService", "HostBasedService", 1) + ","
	}
	repeatedStringForHostBasedServiceBackRefs += "}"
	repeatedStringForInstanceIPBackRefs := "[]*InstanceIP{"
	for _, f := range this.InstanceIPBackRefs {
		repeatedStringForInstanceIPBackRefs += strings.Replace(f.String(), "InstanceIP", "InstanceIP", 1) + ","
	}
	repeatedStringForInstanceIPBackRefs += "}"
	repeatedStringForLogicalRouterBackRefs := "[]*LogicalRouter{"
	for _, f := range this.LogicalRouterBackRefs {
		repeatedStringForLogicalRouterBackRefs += strings.Replace(f.String(), "LogicalRouter", "LogicalRouter", 1) + ","
	}
	repeatedStringForLogicalRouterBackRefs += "}"
	repeatedStringForPhysicalRouterBackRefs := "[]*PhysicalRouter{"
	for _, f := range this.PhysicalRouterBackRefs {
		repeatedStringForPhysicalRouterBackRefs += strings.Replace(f.String(), "PhysicalRouter", "PhysicalRouter", 1) + ","
	}
	repeatedStringForPhysicalRouterBackRefs += "}"
	repeatedStringForPortTupleBackRefs := "[]*PortTuple{"
	for _, f := range this.PortTupleBackRefs {
		repeatedStringForPortTupleBackRefs += strings.Replace(f.String(), "PortTuple", "PortTuple", 1) + ","
	}
	repeatedStringForPortTupleBackRefs += "}"
	repeatedStringForVirtualMachineInterfaceBackRefs := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaceBackRefs {
		repeatedStringForVirtualMachineInterfaceBackRefs += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceBackRefs += "}"
	repeatedStringForVirtualNetworkBackRefs := "[]*VirtualNetwork{"
	for _, f := range this.VirtualNetworkBackRefs {
		repeatedStringForVirtualNetworkBackRefs += strings.Replace(f.String(), "VirtualNetwork", "VirtualNetwork", 1) + ","
	}
	repeatedStringForVirtualNetworkBackRefs += "}"
	repeatedStringForAccessControlLists := "[]*AccessControlList{"
	for _, f := range this.AccessControlLists {
		repeatedStringForAccessControlLists += strings.Replace(f.String(), "AccessControlList", "AccessControlList", 1) + ","
	}
	repeatedStringForAccessControlLists += "}"
	repeatedStringForAliasIPPools := "[]*AliasIPPool{"
	for _, f := range this.AliasIPPools {
		repeatedStringForAliasIPPools += strings.Replace(f.String(), "AliasIPPool", "AliasIPPool", 1) + ","
	}
	repeatedStringForAliasIPPools += "}"
	repeatedStringForBridgeDomains := "[]*BridgeDomain{"
	for _, f := range this.BridgeDomains {
		repeatedStringForBridgeDomains += strings.Replace(f.String(), "BridgeDomain", "BridgeDomain", 1) + ","
	}
	repeatedStringForBridgeDomains += "}"
	repeatedStringForFloatingIPPools := "[]*FloatingIPPool{"
	for _, f := range this.FloatingIPPools {
		repeatedStringForFloatingIPPools += strings.Replace(f.String(), "FloatingIPPool", "FloatingIPPool", 1) + ","
	}
	repeatedStringForFloatingIPPools += "}"
	repeatedStringForRoutingInstances := "[]*RoutingInstance{"
	for _, f := range this.RoutingInstances {
		repeatedStringForRoutingInstances += strings.Replace(f.String(), "RoutingInstance", "RoutingInstance", 1) + ","
	}
	repeatedStringForRoutingInstances += "}"
	s := strings.Join([]string{`&VirtualNetwork{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`AddressAllocationMode:` + fmt.Sprintf("%v", this.AddressAllocationMode) + `,`,
		`EcmpHashingIncludeFields:` + strings.Replace(this.EcmpHashingIncludeFields.String(), "EcmpHashingIncludeFields", "EcmpHashingIncludeFields", 1) + `,`,
		`ExportRouteTargetList:` + strings.Replace(this.ExportRouteTargetList.String(), "RouteTargetList", "RouteTargetList", 1) + `,`,
		`ExternalIpam:` + fmt.Sprintf("%v", this.ExternalIpam) + `,`,
		`FabricSnat:` + fmt.Sprintf("%v", this.FabricSnat) + `,`,
		`FloodUnknownUnicast:` + fmt.Sprintf("%v", this.FloodUnknownUnicast) + `,`,
		`IgmpEnable:` + fmt.Sprintf("%v", this.IgmpEnable) + `,`,
		`ImportRouteTargetList:` + strings.Replace(this.ImportRouteTargetList.String(), "RouteTargetList", "RouteTargetList", 1) + `,`,
		`IsProviderNetwork:` + fmt.Sprintf("%v", this.IsProviderNetwork) + `,`,
		`IsShared:` + fmt.Sprintf("%v", this.IsShared) + `,`,
		`Layer2ControlWord:` + fmt.Sprintf("%v", this.Layer2ControlWord) + `,`,
		`MacAgingTime:` + fmt.Sprintf("%v", this.MacAgingTime) + `,`,
		`MacLearningEnabled:` + fmt.Sprintf("%v", this.MacLearningEnabled) + `,`,
		`MacLimitControl:` + strings.Replace(this.MacLimitControl.String(), "MACLimitControlType", "MACLimitControlType", 1) + `,`,
		`MacMoveControl:` + strings.Replace(this.MacMoveControl.String(), "MACMoveLimitControlType", "MACMoveLimitControlType", 1) + `,`,
		`MultiPolicyServiceChainsEnabled:` + fmt.Sprintf("%v", this.MultiPolicyServiceChainsEnabled) + `,`,
		`PBBEtreeEnable:` + fmt.Sprintf("%v", this.PBBEtreeEnable) + `,`,
		`PBBEvpnEnable:` + fmt.Sprintf("%v", this.PBBEvpnEnable) + `,`,
		`PortSecurityEnabled:` + fmt.Sprintf("%v", this.PortSecurityEnabled) + `,`,
		`ProviderProperties:` + strings.Replace(this.ProviderProperties.String(), "ProviderDetails", "ProviderDetails", 1) + `,`,
		`RouteTargetList:` + strings.Replace(this.RouteTargetList.String(), "RouteTargetList", "RouteTargetList", 1) + `,`,
		`RouterExternal:` + fmt.Sprintf("%v", this.RouterExternal) + `,`,
		`VirtualNetworkCategory:` + fmt.Sprintf("%v", this.VirtualNetworkCategory) + `,`,
		`VirtualNetworkFatFlowProtocols:` + strings.Replace(this.VirtualNetworkFatFlowProtocols.String(), "FatFlowProtocols", "FatFlowProtocols", 1) + `,`,
		`VirtualNetworkNetworkID:` + fmt.Sprintf("%v", this.VirtualNetworkNetworkID) + `,`,
		`VirtualNetworkProperties:` + strings.Replace(this.VirtualNetworkProperties.String(), "VirtualNetworkType", "VirtualNetworkType", 1) + `,`,
		`VirtualNetworkRoutedProperties:` + strings.Replace(this.VirtualNetworkRoutedProperties.String(), "VirtualNetworkRoutedPropertiesType", "VirtualNetworkRoutedPropertiesType", 1) + `,`,
		`BGPVPNRefs:` + repeatedStringForBGPVPNRefs + `,`,
		`IntentMapRefs:` + repeatedStringForIntentMapRefs + `,`,
		`MulticastPolicyRefs:` + repeatedStringForMulticastPolicyRefs + `,`,
		`NetworkIpamRefs:` + repeatedStringForNetworkIpamRefs + `,`,
		`NetworkPolicyRefs:` + repeatedStringForNetworkPolicyRefs + `,`,
		`QosConfigRefs:` + repeatedStringForQosConfigRefs + `,`,
		`RouteTableRefs:` + repeatedStringForRouteTableRefs + `,`,
		`RoutingPolicyRefs:` + repeatedStringForRoutingPolicyRefs + `,`,
		`SecurityLoggingObjectRefs:` + repeatedStringForSecurityLoggingObjectRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualNetworkRefs:` + repeatedStringForVirtualNetworkRefs + `,`,
		`DataCenterInterconnectBackRefs:` + repeatedStringForDataCenterInterconnectBackRefs + `,`,
		`FabricBackRefs:` + repeatedStringForFabricBackRefs + `,`,
		`FirewallRuleBackRefs:` + repeatedStringForFirewallRuleBackRefs + `,`,
		`FlowNodeBackRefs:` + repeatedStringForFlowNodeBackRefs + `,`,
		`HostBasedServiceBackRefs:` + repeatedStringForHostBasedServiceBackRefs + `,`,
		`InstanceIPBackRefs:` + repeatedStringForInstanceIPBackRefs + `,`,
		`LogicalRouterBackRefs:` + repeatedStringForLogicalRouterBackRefs + `,`,
		`PhysicalRouterBackRefs:` + repeatedStringForPhysicalRouterBackRefs + `,`,
		`PortTupleBackRefs:` + repeatedStringForPortTupleBackRefs + `,`,
		`VirtualMachineInterfaceBackRefs:` + repeatedStringForVirtualMachineInterfaceBackRefs + `,`,
		`VirtualNetworkBackRefs:` + repeatedStringForVirtualNetworkBackRefs + `,`,
		`AccessControlLists:` + repeatedStringForAccessControlLists + `,`,
		`AliasIPPools:` + repeatedStringForAliasIPPools + `,`,
		`BridgeDomains:` + repeatedStringForBridgeDomains + `,`,
		`FloatingIPPools:` + repeatedStringForFloatingIPPools + `,`,
		`RoutingInstances:` + repeatedStringForRoutingInstances + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkBGPVPNRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkBGPVPNRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkIntentMapRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkIntentMapRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkMulticastPolicyRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkMulticastPolicyRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkNetworkIpamRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkNetworkIpamRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "VnSubnetsType", "VnSubnetsType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkNetworkPolicyRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkNetworkPolicyRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "VirtualNetworkPolicyType", "VirtualNetworkPolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkQosConfigRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkQosConfigRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkRouteTableRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkRouteTableRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkRoutingPolicyRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkRoutingPolicyRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "RoutingPolicyType", "RoutingPolicyType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkSecurityLoggingObjectRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkSecurityLoggingObjectRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkVirtualNetworkRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkVirtualNetworkRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualPortGroup) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPhysicalInterfaceRefs := "[]*VirtualPortGroupPhysicalInterfaceRef{"
	for _, f := range this.PhysicalInterfaceRefs {
		repeatedStringForPhysicalInterfaceRefs += strings.Replace(f.String(), "VirtualPortGroupPhysicalInterfaceRef", "VirtualPortGroupPhysicalInterfaceRef", 1) + ","
	}
	repeatedStringForPhysicalInterfaceRefs += "}"
	repeatedStringForPortProfileRefs := "[]*VirtualPortGroupPortProfileRef{"
	for _, f := range this.PortProfileRefs {
		repeatedStringForPortProfileRefs += strings.Replace(f.String(), "VirtualPortGroupPortProfileRef", "VirtualPortGroupPortProfileRef", 1) + ","
	}
	repeatedStringForPortProfileRefs += "}"
	repeatedStringForSecurityGroupRefs := "[]*VirtualPortGroupSecurityGroupRef{"
	for _, f := range this.SecurityGroupRefs {
		repeatedStringForSecurityGroupRefs += strings.Replace(f.String(), "VirtualPortGroupSecurityGroupRef", "VirtualPortGroupSecurityGroupRef", 1) + ","
	}
	repeatedStringForSecurityGroupRefs += "}"
	repeatedStringForTagRefs := "[]*VirtualPortGroupTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "VirtualPortGroupTagRef", "VirtualPortGroupTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineInterfaceRefs := "[]*VirtualPortGroupVirtualMachineInterfaceRef{"
	for _, f := range this.VirtualMachineInterfaceRefs {
		repeatedStringForVirtualMachineInterfaceRefs += strings.Replace(f.String(), "VirtualPortGroupVirtualMachineInterfaceRef", "VirtualPortGroupVirtualMachineInterfaceRef", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaceRefs += "}"
	s := strings.Join([]string{`&VirtualPortGroup{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`VirtualPortGroupLacpEnabled:` + fmt.Sprintf("%v", this.VirtualPortGroupLacpEnabled) + `,`,
		`VirtualPortGroupTrunkPortID:` + fmt.Sprintf("%v", this.VirtualPortGroupTrunkPortID) + `,`,
		`VirtualPortGroupType:` + fmt.Sprintf("%v", this.VirtualPortGroupType) + `,`,
		`VirtualPortGroupUserCreated:` + fmt.Sprintf("%v", this.VirtualPortGroupUserCreated) + `,`,
		`PhysicalInterfaceRefs:` + repeatedStringForPhysicalInterfaceRefs + `,`,
		`PortProfileRefs:` + repeatedStringForPortProfileRefs + `,`,
		`SecurityGroupRefs:` + repeatedStringForSecurityGroupRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineInterfaceRefs:` + repeatedStringForVirtualMachineInterfaceRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualPortGroupPhysicalInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualPortGroupPhysicalInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "VpgInterfaceParametersType", "VpgInterfaceParametersType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualPortGroupPortProfileRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualPortGroupPortProfileRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualPortGroupSecurityGroupRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualPortGroupSecurityGroupRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualPortGroupTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualPortGroupTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualPortGroupVirtualMachineInterfaceRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualPortGroupVirtualMachineInterfaceRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualRouter) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNetworkIpamRefs := "[]*VirtualRouterNetworkIpamRef{"
	for _, f := range this.NetworkIpamRefs {
		repeatedStringForNetworkIpamRefs += strings.Replace(f.String(), "VirtualRouterNetworkIpamRef", "VirtualRouterNetworkIpamRef", 1) + ","
	}
	repeatedStringForNetworkIpamRefs += "}"
	repeatedStringForSubClusterRefs := "[]*VirtualRouterSubClusterRef{"
	for _, f := range this.SubClusterRefs {
		repeatedStringForSubClusterRefs += strings.Replace(f.String(), "VirtualRouterSubClusterRef", "VirtualRouterSubClusterRef", 1) + ","
	}
	repeatedStringForSubClusterRefs += "}"
	repeatedStringForTagRefs := "[]*VirtualRouterTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "VirtualRouterTagRef", "VirtualRouterTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	repeatedStringForVirtualMachineRefs := "[]*VirtualRouterVirtualMachineRef{"
	for _, f := range this.VirtualMachineRefs {
		repeatedStringForVirtualMachineRefs += strings.Replace(f.String(), "VirtualRouterVirtualMachineRef", "VirtualRouterVirtualMachineRef", 1) + ","
	}
	repeatedStringForVirtualMachineRefs += "}"
	repeatedStringForInstanceIPBackRefs := "[]*InstanceIP{"
	for _, f := range this.InstanceIPBackRefs {
		repeatedStringForInstanceIPBackRefs += strings.Replace(f.String(), "InstanceIP", "InstanceIP", 1) + ","
	}
	repeatedStringForInstanceIPBackRefs += "}"
	repeatedStringForPhysicalRouterBackRefs := "[]*PhysicalRouter{"
	for _, f := range this.PhysicalRouterBackRefs {
		repeatedStringForPhysicalRouterBackRefs += strings.Replace(f.String(), "PhysicalRouter", "PhysicalRouter", 1) + ","
	}
	repeatedStringForPhysicalRouterBackRefs += "}"
	repeatedStringForProviderAttachmentBackRefs := "[]*ProviderAttachment{"
	for _, f := range this.ProviderAttachmentBackRefs {
		repeatedStringForProviderAttachmentBackRefs += strings.Replace(f.String(), "ProviderAttachment", "ProviderAttachment", 1) + ","
	}
	repeatedStringForProviderAttachmentBackRefs += "}"
	repeatedStringForVirtualMachineInterfaces := "[]*VirtualMachineInterface{"
	for _, f := range this.VirtualMachineInterfaces {
		repeatedStringForVirtualMachineInterfaces += strings.Replace(f.String(), "VirtualMachineInterface", "VirtualMachineInterface", 1) + ","
	}
	repeatedStringForVirtualMachineInterfaces += "}"
	s := strings.Join([]string{`&VirtualRouter{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`VirtualRouterDPDKEnabled:` + fmt.Sprintf("%v", this.VirtualRouterDPDKEnabled) + `,`,
		`VirtualRouterIPAddress:` + fmt.Sprintf("%v", this.VirtualRouterIPAddress) + `,`,
		`VirtualRouterType:` + fmt.Sprintf("%v", this.VirtualRouterType) + `,`,
		`NetworkIpamRefs:` + repeatedStringForNetworkIpamRefs + `,`,
		`SubClusterRefs:` + repeatedStringForSubClusterRefs + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`VirtualMachineRefs:` + repeatedStringForVirtualMachineRefs + `,`,
		`InstanceIPBackRefs:` + repeatedStringForInstanceIPBackRefs + `,`,
		`PhysicalRouterBackRefs:` + repeatedStringForPhysicalRouterBackRefs + `,`,
		`ProviderAttachmentBackRefs:` + repeatedStringForProviderAttachmentBackRefs + `,`,
		`VirtualMachineInterfaces:` + repeatedStringForVirtualMachineInterfaces + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualRouterNetworkIpamRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualRouterNetworkIpamRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`Attr:` + strings.Replace(this.Attr.String(), "VirtualRouterNetworkIpamType", "VirtualRouterNetworkIpamType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualRouterSubClusterRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualRouterSubClusterRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualRouterTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualRouterTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualRouterVirtualMachineRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualRouterVirtualMachineRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebuiNode) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTagRefs := "[]*WebuiNodeTagRef{"
	for _, f := range this.TagRefs {
		repeatedStringForTagRefs += strings.Replace(f.String(), "WebuiNodeTagRef", "WebuiNodeTagRef", 1) + ","
	}
	repeatedStringForTagRefs += "}"
	s := strings.Join([]string{`&WebuiNode{`,
		`Annotations:` + strings.Replace(this.Annotations.String(), "KeyValuePairs", "KeyValuePairs", 1) + `,`,
		`ConfigurationVersion:` + fmt.Sprintf("%v", this.ConfigurationVersion) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`FQName:` + fmt.Sprintf("%v", this.FQName) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`IDPerms:` + strings.Replace(this.IDPerms.String(), "IdPermsType", "IdPermsType", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ParentType:` + fmt.Sprintf("%v", this.ParentType) + `,`,
		`ParentUUID:` + fmt.Sprintf("%v", this.ParentUUID) + `,`,
		`Perms2:` + strings.Replace(this.Perms2.String(), "PermType2", "PermType2", 1) + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`WebuiNodeIPAddress:` + fmt.Sprintf("%v", this.WebuiNodeIPAddress) + `,`,
		`TagRefs:` + repeatedStringForTagRefs + `,`,
		`}`,
	}, "")
	return s
}
func (this *WebuiNodeTagRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WebuiNodeTagRef{`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Href:` + fmt.Sprintf("%v", this.Href) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AclEntriesType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForACLRule := "[]*AclRuleType{"
	for _, f := range this.ACLRule {
		repeatedStringForACLRule += strings.Replace(f.String(), "AclRuleType", "AclRuleType", 1) + ","
	}
	repeatedStringForACLRule += "}"
	s := strings.Join([]string{`&AclEntriesType{`,
		`ACLRule:` + repeatedStringForACLRule + `,`,
		`Dynamic:` + fmt.Sprintf("%v", this.Dynamic) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AclRuleType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AclRuleType{`,
		`ActionList:` + strings.Replace(this.ActionList.String(), "ActionListType", "ActionListType", 1) + `,`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`MatchCondition:` + strings.Replace(this.MatchCondition.String(), "MatchConditionType", "MatchConditionType", 1) + `,`,
		`RuleUUID:` + fmt.Sprintf("%v", this.RuleUUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionAsPathType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionAsPathType{`,
		`Expand:` + strings.Replace(this.Expand.String(), "AsListType", "AsListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionCommunityType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionCommunityType{`,
		`Add:` + strings.Replace(this.Add.String(), "CommunityListType", "CommunityListType", 1) + `,`,
		`Remove:` + strings.Replace(this.Remove.String(), "CommunityListType", "CommunityListType", 1) + `,`,
		`Set:` + strings.Replace(this.Set.String(), "CommunityListType", "CommunityListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionExtCommunityType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionExtCommunityType{`,
		`Add:` + strings.Replace(this.Add.String(), "ExtCommunityListType", "ExtCommunityListType", 1) + `,`,
		`Remove:` + strings.Replace(this.Remove.String(), "ExtCommunityListType", "ExtCommunityListType", 1) + `,`,
		`Set:` + strings.Replace(this.Set.String(), "ExtCommunityListType", "ExtCommunityListType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionListType{`,
		`Alert:` + fmt.Sprintf("%v", this.Alert) + `,`,
		`ApplyService:` + fmt.Sprintf("%v", this.ApplyService) + `,`,
		`AssignRoutingInstance:` + fmt.Sprintf("%v", this.AssignRoutingInstance) + `,`,
		`GatewayName:` + fmt.Sprintf("%v", this.GatewayName) + `,`,
		`HostBasedService:` + fmt.Sprintf("%v", this.HostBasedService) + `,`,
		`Log:` + fmt.Sprintf("%v", this.Log) + `,`,
		`MirrorTo:` + strings.Replace(this.MirrorTo.String(), "MirrorActionType", "MirrorActionType", 1) + `,`,
		`QosAction:` + fmt.Sprintf("%v", this.QosAction) + `,`,
		`SimpleAction:` + fmt.Sprintf("%v", this.SimpleAction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActionUpdateType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionUpdateType{`,
		`AsPath:` + strings.Replace(this.AsPath.String(), "ActionAsPathType", "ActionAsPathType", 1) + `,`,
		`Community:` + strings.Replace(this.Community.String(), "ActionCommunityType", "ActionCommunityType", 1) + `,`,
		`Extcommunity:` + strings.Replace(this.Extcommunity.String(), "ActionExtCommunityType", "ActionExtCommunityType", 1) + `,`,
		`LocalPref:` + fmt.Sprintf("%v", this.LocalPref) + `,`,
		`Med:` + fmt.Sprintf("%v", this.Med) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddressFamilies) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddressFamilies{`,
		`Family:` + fmt.Sprintf("%v", this.Family) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddressType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubnetList := "[]*SubnetType{"
	for _, f := range this.SubnetList {
		repeatedStringForSubnetList += strings.Replace(f.String(), "SubnetType", "SubnetType", 1) + ","
	}
	repeatedStringForSubnetList += "}"
	s := strings.Join([]string{`&AddressType{`,
		`NetworkPolicy:` + fmt.Sprintf("%v", this.NetworkPolicy) + `,`,
		`SecurityGroup:` + fmt.Sprintf("%v", this.SecurityGroup) + `,`,
		`Subnet:` + strings.Replace(this.Subnet.String(), "SubnetType", "SubnetType", 1) + `,`,
		`SubnetList:` + repeatedStringForSubnetList + `,`,
		`VirtualNetwork:` + fmt.Sprintf("%v", this.VirtualNetwork) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlarmAndList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAndList := "[]*AlarmExpression{"
	for _, f := range this.AndList {
		repeatedStringForAndList += strings.Replace(f.String(), "AlarmExpression", "AlarmExpression", 1) + ","
	}
	repeatedStringForAndList += "}"
	s := strings.Join([]string{`&AlarmAndList{`,
		`AndList:` + repeatedStringForAndList + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlarmExpression) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlarmExpression{`,
		`Operand1:` + fmt.Sprintf("%v", this.Operand1) + `,`,
		`Operand2:` + strings.Replace(this.Operand2.String(), "AlarmOperand2", "AlarmOperand2", 1) + `,`,
		`Operation:` + fmt.Sprintf("%v", this.Operation) + `,`,
		`Variables:` + fmt.Sprintf("%v", this.Variables) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlarmOperand2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AlarmOperand2{`,
		`JSONValue:` + fmt.Sprintf("%v", this.JSONValue) + `,`,
		`UveAttribute:` + fmt.Sprintf("%v", this.UveAttribute) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlarmOrList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOrList := "[]*AlarmAndList{"
	for _, f := range this.OrList {
		repeatedStringForOrList += strings.Replace(f.String(), "AlarmAndList", "AlarmAndList", 1) + ","
	}
	repeatedStringForOrList += "}"
	s := strings.Join([]string{`&AlarmOrList{`,
		`OrList:` + repeatedStringForOrList + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllocationPoolType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllocationPoolType{`,
		`End:` + fmt.Sprintf("%v", this.End) + `,`,
		`Start:` + fmt.Sprintf("%v", this.Start) + `,`,
		`VrouterSpecificPool:` + fmt.Sprintf("%v", this.VrouterSpecificPool) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllowedAddressPair) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllowedAddressPair{`,
		`AddressMode:` + fmt.Sprintf("%v", this.AddressMode) + `,`,
		`IP:` + strings.Replace(this.IP.String(), "SubnetType", "SubnetType", 1) + `,`,
		`Mac:` + fmt.Sprintf("%v", this.Mac) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllowedAddressPairs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAllowedAddressPair := "[]*AllowedAddressPair{"
	for _, f := range this.AllowedAddressPair {
		repeatedStringForAllowedAddressPair += strings.Replace(f.String(), "AllowedAddressPair", "AllowedAddressPair", 1) + ","
	}
	repeatedStringForAllowedAddressPair += "}"
	s := strings.Join([]string{`&AllowedAddressPairs{`,
		`AllowedAddressPair:` + repeatedStringForAllowedAddressPair + `,`,
		`}`,
	}, "")
	return s
}
func (this *AsListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AsListType{`,
		`AsnList:` + fmt.Sprintf("%v", this.AsnList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AsnRangeType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AsnRangeType{`,
		`AsnMax:` + fmt.Sprintf("%v", this.AsnMax) + `,`,
		`AsnMin:` + fmt.Sprintf("%v", this.AsnMin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AttachmentAddressType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AttachmentAddressType{`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationData) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForKeyItems := "[]*AuthenticationKeyItem{"
	for _, f := range this.KeyItems {
		repeatedStringForKeyItems += strings.Replace(f.String(), "AuthenticationKeyItem", "AuthenticationKeyItem", 1) + ","
	}
	repeatedStringForKeyItems += "}"
	s := strings.Join([]string{`&AuthenticationData{`,
		`KeyItems:` + repeatedStringForKeyItems + `,`,
		`KeyType:` + fmt.Sprintf("%v", this.KeyType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationKeyItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationKeyItem{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`KeyID:` + fmt.Sprintf("%v", this.KeyID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AutonomousSystemsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AutonomousSystemsType{`,
		`Asn:` + fmt.Sprintf("%v", this.Asn) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPaaSControlNodeZoneAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BGPaaSControlNodeZoneAttributes{`,
		`BgpaasControlNodeZoneType:` + fmt.Sprintf("%v", this.BgpaasControlNodeZoneType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BGPaaServiceParametersType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BGPaaServiceParametersType{`,
		`PortEnd:` + fmt.Sprintf("%v", this.PortEnd) + `,`,
		`PortStart:` + fmt.Sprintf("%v", this.PortStart) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BaremetalPortGroupInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BaremetalPortGroupInfo{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Mode:` + fmt.Sprintf("%v", this.Mode) + `,`,
		`NodeUUID:` + fmt.Sprintf("%v", this.NodeUUID) + `,`,
		`Properties:` + strings.Replace(this.Properties.String(), "PortGroupProperties", "PortGroupProperties", 1) + `,`,
		`StandalonePortsSupported:` + fmt.Sprintf("%v", this.StandalonePortsSupported) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BaremetalPortInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BaremetalPortInfo{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`LocalLinkConnection:` + strings.Replace(this.LocalLinkConnection.String(), "LocalLinkConnection", "LocalLinkConnection", 1) + `,`,
		`NodeUUID:` + fmt.Sprintf("%v", this.NodeUUID) + `,`,
		`PxeEnabled:` + fmt.Sprintf("%v", this.PxeEnabled) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BaremetalProperties) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BaremetalProperties{`,
		`Capabilities:` + fmt.Sprintf("%v", this.Capabilities) + `,`,
		`CPUArch:` + fmt.Sprintf("%v", this.CPUArch) + `,`,
		`Cpus:` + fmt.Sprintf("%v", this.Cpus) + `,`,
		`LocalGB:` + fmt.Sprintf("%v", this.LocalGB) + `,`,
		`MemoryMB:` + fmt.Sprintf("%v", this.MemoryMB) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BaremetalServerInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BaremetalServerInfo{`,
		`Driver:` + fmt.Sprintf("%v", this.Driver) + `,`,
		`DriverInfo:` + strings.Replace(this.DriverInfo.String(), "DriverInfo", "DriverInfo", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`NetworkInterface:` + fmt.Sprintf("%v", this.NetworkInterface) + `,`,
		`Properties:` + strings.Replace(this.Properties.String(), "BaremetalProperties", "BaremetalProperties", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BfdParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BfdParameters{`,
		`DetectionTimeMultiplier:` + fmt.Sprintf("%v", this.DetectionTimeMultiplier) + `,`,
		`TimeInterval:` + fmt.Sprintf("%v", this.TimeInterval) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpFamilyAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpFamilyAttributes{`,
		`AddressFamily:` + fmt.Sprintf("%v", this.AddressFamily) + `,`,
		`DefaultTunnelEncap:` + fmt.Sprintf("%v", this.DefaultTunnelEncap) + `,`,
		`LoopCount:` + fmt.Sprintf("%v", this.LoopCount) + `,`,
		`PrefixLimit:` + strings.Replace(this.PrefixLimit.String(), "BgpPrefixLimit", "BgpPrefixLimit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpParameters{`,
		`AuthData:` + strings.Replace(this.AuthData.String(), "AuthenticationData", "AuthenticationData", 1) + `,`,
		`HoldTime:` + fmt.Sprintf("%v", this.HoldTime) + `,`,
		`LocalAutonomousSystem:` + fmt.Sprintf("%v", this.LocalAutonomousSystem) + `,`,
		`PeerAutonomousSystem:` + fmt.Sprintf("%v", this.PeerAutonomousSystem) + `,`,
		`PeerIPAddress:` + fmt.Sprintf("%v", this.PeerIPAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpPeeringAttributes) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSession := "[]*BgpSession{"
	for _, f := range this.Session {
		repeatedStringForSession += strings.Replace(f.String(), "BgpSession", "BgpSession", 1) + ","
	}
	repeatedStringForSession += "}"
	s := strings.Join([]string{`&BgpPeeringAttributes{`,
		`Session:` + repeatedStringForSession + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpPrefixLimit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpPrefixLimit{`,
		`IdleTimeout:` + fmt.Sprintf("%v", this.IdleTimeout) + `,`,
		`Maximum:` + fmt.Sprintf("%v", this.Maximum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpRouterParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BgpRouterParams{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`AddressFamilies:` + strings.Replace(this.AddressFamilies.String(), "AddressFamilies", "AddressFamilies", 1) + `,`,
		`AdminDown:` + fmt.Sprintf("%v", this.AdminDown) + `,`,
		`AuthData:` + strings.Replace(this.AuthData.String(), "AuthenticationData", "AuthenticationData", 1) + `,`,
		`AutonomousSystem:` + fmt.Sprintf("%v", this.AutonomousSystem) + `,`,
		`ClusterID:` + fmt.Sprintf("%v", this.ClusterID) + `,`,
		`GatewayAddress:` + fmt.Sprintf("%v", this.GatewayAddress) + `,`,
		`HoldTime:` + fmt.Sprintf("%v", this.HoldTime) + `,`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`Ipv6GatewayAddress:` + fmt.Sprintf("%v", this.Ipv6GatewayAddress) + `,`,
		`LocalAutonomousSystem:` + fmt.Sprintf("%v", this.LocalAutonomousSystem) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`RouterType:` + fmt.Sprintf("%v", this.RouterType) + `,`,
		`SourcePort:` + fmt.Sprintf("%v", this.SourcePort) + `,`,
		`Vendor:` + fmt.Sprintf("%v", this.Vendor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpSession) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttributes := "[]*BgpSessionAttributes{"
	for _, f := range this.Attributes {
		repeatedStringForAttributes += strings.Replace(f.String(), "BgpSessionAttributes", "BgpSessionAttributes", 1) + ","
	}
	repeatedStringForAttributes += "}"
	s := strings.Join([]string{`&BgpSession{`,
		`Attributes:` + repeatedStringForAttributes + `,`,
		`UUID:` + fmt.Sprintf("%v", this.UUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BgpSessionAttributes) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFamilyAttributes := "[]*BgpFamilyAttributes{"
	for _, f := range this.FamilyAttributes {
		repeatedStringForFamilyAttributes += strings.Replace(f.String(), "BgpFamilyAttributes", "BgpFamilyAttributes", 1) + ","
	}
	repeatedStringForFamilyAttributes += "}"
	s := strings.Join([]string{`&BgpSessionAttributes{`,
		`AddressFamilies:` + strings.Replace(this.AddressFamilies.String(), "AddressFamilies", "AddressFamilies", 1) + `,`,
		`AdminDown:` + fmt.Sprintf("%v", this.AdminDown) + `,`,
		`AsOverride:` + fmt.Sprintf("%v", this.AsOverride) + `,`,
		`AuthData:` + strings.Replace(this.AuthData.String(), "AuthenticationData", "AuthenticationData", 1) + `,`,
		`BGPRouter:` + fmt.Sprintf("%v", this.BGPRouter) + `,`,
		`FamilyAttributes:` + repeatedStringForFamilyAttributes + `,`,
		`HoldTime:` + fmt.Sprintf("%v", this.HoldTime) + `,`,
		`LocalAutonomousSystem:` + fmt.Sprintf("%v", this.LocalAutonomousSystem) + `,`,
		`LoopCount:` + fmt.Sprintf("%v", this.LoopCount) + `,`,
		`Passive:` + fmt.Sprintf("%v", this.Passive) + `,`,
		`PrivateAsAction:` + fmt.Sprintf("%v", this.PrivateAsAction) + `,`,
		`RouteOriginOverride:` + strings.Replace(this.RouteOriginOverride.String(), "RouteOriginOverride", "RouteOriginOverride", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BridgeDomainMembershipType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BridgeDomainMembershipType{`,
		`VlanTag:` + fmt.Sprintf("%v", this.VlanTag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CliDiffInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CliDiffInfoType{`,
		`ConfigChanges:` + fmt.Sprintf("%v", this.ConfigChanges) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CliDiffListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCommitDiffInfo := "[]*CliDiffInfoType{"
	for _, f := range this.CommitDiffInfo {
		repeatedStringForCommitDiffInfo += strings.Replace(f.String(), "CliDiffInfoType", "CliDiffInfoType", 1) + ","
	}
	repeatedStringForCommitDiffInfo += "}"
	s := strings.Join([]string{`&CliDiffListType{`,
		`CommitDiffInfo:` + repeatedStringForCommitDiffInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloudInstanceInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloudInstanceInfo{`,
		`AvailabilityZone:` + fmt.Sprintf("%v", this.AvailabilityZone) + `,`,
		`InstanceType:` + fmt.Sprintf("%v", this.InstanceType) + `,`,
		`MachineID:` + fmt.Sprintf("%v", this.MachineID) + `,`,
		`OperatingSystem:` + fmt.Sprintf("%v", this.OperatingSystem) + `,`,
		`OsVersion:` + fmt.Sprintf("%v", this.OsVersion) + `,`,
		`Roles:` + fmt.Sprintf("%v", this.Roles) + `,`,
		`VolumeSize:` + fmt.Sprintf("%v", this.VolumeSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommunityAttributes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommunityAttributes{`,
		`CommunityAttribute:` + fmt.Sprintf("%v", this.CommunityAttribute) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommunityListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommunityListType{`,
		`Community:` + fmt.Sprintf("%v", this.Community) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConnectionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectionType{`,
		`DestinationInstance:` + fmt.Sprintf("%v", this.DestinationInstance) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ControlTrafficDscpType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ControlTrafficDscpType{`,
		`Analytics:` + fmt.Sprintf("%v", this.Analytics) + `,`,
		`Control:` + fmt.Sprintf("%v", this.Control) + `,`,
		`DNS:` + fmt.Sprintf("%v", this.DNS) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DefaultProtocolType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DefaultProtocolType{`,
		`BGP:` + strings.Replace(this.BGP.String(), "ProtocolBgpType", "ProtocolBgpType", 1) + `,`,
		`Ospf:` + strings.Replace(this.Ospf.String(), "ProtocolOspfType", "ProtocolOspfType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceCredential) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceCredential{`,
		`Credential:` + strings.Replace(this.Credential.String(), "UserCredentials", "UserCredentials", 1) + `,`,
		`DeviceFamily:` + fmt.Sprintf("%v", this.DeviceFamily) + `,`,
		`Vendor:` + fmt.Sprintf("%v", this.Vendor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceCredentialList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDeviceCredential := "[]*DeviceCredential{"
	for _, f := range this.DeviceCredential {
		repeatedStringForDeviceCredential += strings.Replace(f.String(), "DeviceCredential", "DeviceCredential", 1) + ","
	}
	repeatedStringForDeviceCredential += "}"
	s := strings.Join([]string{`&DeviceCredentialList{`,
		`DeviceCredential:` + repeatedStringForDeviceCredential + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceFamilyListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceFamilyListType{`,
		`DeviceFamily:` + fmt.Sprintf("%v", this.DeviceFamily) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DevicePlatformListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DevicePlatformListType{`,
		`PlatformName:` + fmt.Sprintf("%v", this.PlatformName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DhcpOptionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DhcpOptionType{`,
		`DHCPOptionName:` + fmt.Sprintf("%v", this.DHCPOptionName) + `,`,
		`DHCPOptionValue:` + fmt.Sprintf("%v", this.DHCPOptionValue) + `,`,
		`DHCPOptionValueBytes:` + fmt.Sprintf("%v", this.DHCPOptionValueBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DhcpOptionsListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDHCPOption := "[]*DhcpOptionType{"
	for _, f := range this.DHCPOption {
		repeatedStringForDHCPOption += strings.Replace(f.String(), "DhcpOptionType", "DhcpOptionType", 1) + ","
	}
	repeatedStringForDHCPOption += "}"
	s := strings.Join([]string{`&DhcpOptionsListType{`,
		`DHCPOption:` + repeatedStringForDHCPOption + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiscoveryPubSubEndPointType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiscoveryPubSubEndPointType{`,
		`EpID:` + fmt.Sprintf("%v", this.EpID) + `,`,
		`EpPrefix:` + strings.Replace(this.EpPrefix.String(), "SubnetType", "SubnetType", 1) + `,`,
		`EpType:` + fmt.Sprintf("%v", this.EpType) + `,`,
		`EpVersion:` + fmt.Sprintf("%v", this.EpVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiscoveryServiceAssignmentType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubscriber := "[]*DiscoveryPubSubEndPointType{"
	for _, f := range this.Subscriber {
		repeatedStringForSubscriber += strings.Replace(f.String(), "DiscoveryPubSubEndPointType", "DiscoveryPubSubEndPointType", 1) + ","
	}
	repeatedStringForSubscriber += "}"
	s := strings.Join([]string{`&DiscoveryServiceAssignmentType{`,
		`Publisher:` + strings.Replace(this.Publisher.String(), "DiscoveryPubSubEndPointType", "DiscoveryPubSubEndPointType", 1) + `,`,
		`Subscriber:` + repeatedStringForSubscriber + `,`,
		`}`,
	}, "")
	return s
}
func (this *DnsSoaRecordType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DnsSoaRecordType{`,
		`NegativeCacheTTLSeconds:` + fmt.Sprintf("%v", this.NegativeCacheTTLSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DnsmasqLeaseParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DnsmasqLeaseParameters{`,
		`ClientID:` + fmt.Sprintf("%v", this.ClientID) + `,`,
		`LeaseExpiryTime:` + fmt.Sprintf("%v", this.LeaseExpiryTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DomainLimitsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DomainLimitsType{`,
		`ProjectLimit:` + fmt.Sprintf("%v", this.ProjectLimit) + `,`,
		`SecurityGroupLimit:` + fmt.Sprintf("%v", this.SecurityGroupLimit) + `,`,
		`VirtualNetworkLimit:` + fmt.Sprintf("%v", this.VirtualNetworkLimit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DriverInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DriverInfo{`,
		`DeployKernel:` + fmt.Sprintf("%v", this.DeployKernel) + `,`,
		`DeployRamdisk:` + fmt.Sprintf("%v", this.DeployRamdisk) + `,`,
		`IpmiAddress:` + fmt.Sprintf("%v", this.IpmiAddress) + `,`,
		`IpmiPassword:` + fmt.Sprintf("%v", this.IpmiPassword) + `,`,
		`IpmiPort:` + fmt.Sprintf("%v", this.IpmiPort) + `,`,
		`IpmiUsername:` + fmt.Sprintf("%v", this.IpmiUsername) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ESXIHostInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ESXIHostInfo{`,
		`Cluster:` + fmt.Sprintf("%v", this.Cluster) + `,`,
		`Datacenter:` + fmt.Sprintf("%v", this.Datacenter) + `,`,
		`Datastore:` + fmt.Sprintf("%v", this.Datastore) + `,`,
		`EsxiName:` + fmt.Sprintf("%v", this.EsxiName) + `,`,
		`Mac:` + fmt.Sprintf("%v", this.Mac) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`VcenterServer:` + fmt.Sprintf("%v", this.VcenterServer) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ESXIProperties) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ESXIProperties{`,
		`DVSID:` + fmt.Sprintf("%v", this.DVSID) + `,`,
		`DVSName:` + fmt.Sprintf("%v", this.DVSName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EcmpHashingIncludeFields) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EcmpHashingIncludeFields{`,
		`DestinationIP:` + fmt.Sprintf("%v", this.DestinationIP) + `,`,
		`DestinationPort:` + fmt.Sprintf("%v", this.DestinationPort) + `,`,
		`HashingConfigured:` + fmt.Sprintf("%v", this.HashingConfigured) + `,`,
		`IPProtocol:` + fmt.Sprintf("%v", this.IPProtocol) + `,`,
		`SourceIP:` + fmt.Sprintf("%v", this.SourceIP) + `,`,
		`SourcePort:` + fmt.Sprintf("%v", this.SourcePort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EnabledInterfaceParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EnabledInterfaceParams{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`StatsCollectionFrequency:` + strings.Replace(this.StatsCollectionFrequency.String(), "StatsCollectionFrequency", "StatsCollectionFrequency", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EncapsulationPrioritiesType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EncapsulationPrioritiesType{`,
		`Encapsulation:` + fmt.Sprintf("%v", this.Encapsulation) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EncryptionTunnelEndpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EncryptionTunnelEndpoint{`,
		`TunnelRemoteIPAddress:` + fmt.Sprintf("%v", this.TunnelRemoteIPAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EncryptionTunnelEndpointList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEndpoint := "[]*EncryptionTunnelEndpoint{"
	for _, f := range this.Endpoint {
		repeatedStringForEndpoint += strings.Replace(f.String(), "EncryptionTunnelEndpoint", "EncryptionTunnelEndpoint", 1) + ","
	}
	repeatedStringForEndpoint += "}"
	s := strings.Join([]string{`&EncryptionTunnelEndpointList{`,
		`Endpoint:` + repeatedStringForEndpoint + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutableInfoListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExecutableInfo := "[]*ExecutableInfoType{"
	for _, f := range this.ExecutableInfo {
		repeatedStringForExecutableInfo += strings.Replace(f.String(), "ExecutableInfoType", "ExecutableInfoType", 1) + ","
	}
	repeatedStringForExecutableInfo += "}"
	s := strings.Join([]string{`&ExecutableInfoListType{`,
		`ExecutableInfo:` + repeatedStringForExecutableInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecutableInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecutableInfoType{`,
		`ExecutableArgs:` + fmt.Sprintf("%v", this.ExecutableArgs) + `,`,
		`ExecutablePath:` + fmt.Sprintf("%v", this.ExecutablePath) + `,`,
		`JobCompletionWeightage:` + fmt.Sprintf("%v", this.JobCompletionWeightage) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExtCommunityListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExtCommunityListType{`,
		`Community:` + fmt.Sprintf("%v", this.Community) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FabricNetworkTag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FabricNetworkTag{`,
		`NetworkType:` + fmt.Sprintf("%v", this.NetworkType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FatFlowProtocols) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFatFlowProtocol := "[]*ProtocolType{"
	for _, f := range this.FatFlowProtocol {
		repeatedStringForFatFlowProtocol += strings.Replace(f.String(), "ProtocolType", "ProtocolType", 1) + ","
	}
	repeatedStringForFatFlowProtocol += "}"
	s := strings.Join([]string{`&FatFlowProtocols{`,
		`FatFlowProtocol:` + repeatedStringForFatFlowProtocol + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldNamesList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldNamesList{`,
		`FieldNames:` + fmt.Sprintf("%v", this.FieldNames) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallRuleEndpointType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirewallRuleEndpointType{`,
		`AddressGroup:` + fmt.Sprintf("%v", this.AddressGroup) + `,`,
		`Any:` + fmt.Sprintf("%v", this.Any) + `,`,
		`Subnet:` + strings.Replace(this.Subnet.String(), "SubnetType", "SubnetType", 1) + `,`,
		`TagIds:` + fmt.Sprintf("%v", this.TagIds) + `,`,
		`Tags:` + fmt.Sprintf("%v", this.Tags) + `,`,
		`VirtualNetwork:` + fmt.Sprintf("%v", this.VirtualNetwork) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallRuleMatchTagsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirewallRuleMatchTagsType{`,
		`TagList:` + fmt.Sprintf("%v", this.TagList) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallRuleMatchTagsTypeIdList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirewallRuleMatchTagsTypeIdList{`,
		`TagType:` + fmt.Sprintf("%v", this.TagType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallSequence) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirewallSequence{`,
		`Sequence:` + fmt.Sprintf("%v", this.Sequence) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallServiceGroupType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFirewallService := "[]*FirewallServiceType{"
	for _, f := range this.FirewallService {
		repeatedStringForFirewallService += strings.Replace(f.String(), "FirewallServiceType", "FirewallServiceType", 1) + ","
	}
	repeatedStringForFirewallService += "}"
	s := strings.Join([]string{`&FirewallServiceGroupType{`,
		`FirewallService:` + repeatedStringForFirewallService + `,`,
		`}`,
	}, "")
	return s
}
func (this *FirewallServiceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FirewallServiceType{`,
		`DSTPorts:` + strings.Replace(this.DSTPorts.String(), "PortType", "PortType", 1) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`ProtocolID:` + fmt.Sprintf("%v", this.ProtocolID) + `,`,
		`SRCPorts:` + strings.Replace(this.SRCPorts.String(), "PortType", "PortType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FloatingIpPoolSubnetType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FloatingIpPoolSubnetType{`,
		`SubnetUUID:` + fmt.Sprintf("%v", this.SubnetUUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowAgingTimeout) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FlowAgingTimeout{`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`TimeoutInSeconds:` + fmt.Sprintf("%v", this.TimeoutInSeconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FlowAgingTimeoutList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForFlowAgingTimeout := "[]*FlowAgingTimeout{"
	for _, f := range this.FlowAgingTimeout {
		repeatedStringForFlowAgingTimeout += strings.Replace(f.String(), "FlowAgingTimeout", "FlowAgingTimeout", 1) + ","
	}
	repeatedStringForFlowAgingTimeout += "}"
	s := strings.Join([]string{`&FlowAgingTimeoutList{`,
		`FlowAgingTimeout:` + repeatedStringForFlowAgingTimeout + `,`,
		`}`,
	}, "")
	return s
}
func (this *GracefulRestartParametersType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GracefulRestartParametersType{`,
		`BGPHelperEnable:` + fmt.Sprintf("%v", this.BGPHelperEnable) + `,`,
		`Enable:` + fmt.Sprintf("%v", this.Enable) + `,`,
		`EndOfRibTimeout:` + fmt.Sprintf("%v", this.EndOfRibTimeout) + `,`,
		`LongLivedRestartTime:` + fmt.Sprintf("%v", this.LongLivedRestartTime) + `,`,
		`RestartTime:` + fmt.Sprintf("%v", this.RestartTime) + `,`,
		`XMPPHelperEnable:` + fmt.Sprintf("%v", this.XMPPHelperEnable) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IdPermsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IdPermsType{`,
		`Created:` + fmt.Sprintf("%v", this.Created) + `,`,
		`Creator:` + fmt.Sprintf("%v", this.Creator) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Enable:` + fmt.Sprintf("%v", this.Enable) + `,`,
		`LastModified:` + fmt.Sprintf("%v", this.LastModified) + `,`,
		`Permissions:` + strings.Replace(this.Permissions.String(), "PermType", "PermType", 1) + `,`,
		`UserVisible:` + fmt.Sprintf("%v", this.UserVisible) + `,`,
		`UUID:` + strings.Replace(this.UUID.String(), "UuidType", "UuidType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceTargetType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InstanceTargetType{`,
		`ImportExport:` + fmt.Sprintf("%v", this.ImportExport) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterfaceMapType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPortInfo := "[]*PortInfoType{"
	for _, f := range this.PortInfo {
		repeatedStringForPortInfo += strings.Replace(f.String(), "PortInfoType", "PortInfoType", 1) + ","
	}
	repeatedStringForPortInfo += "}"
	s := strings.Join([]string{`&InterfaceMapType{`,
		`PortInfo:` + repeatedStringForPortInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *InterfaceMirrorType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InterfaceMirrorType{`,
		`MirrorTo:` + strings.Replace(this.MirrorTo.String(), "MirrorActionType", "MirrorActionType", 1) + `,`,
		`TrafficDirection:` + fmt.Sprintf("%v", this.TrafficDirection) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IpAddressesType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IpAddressesType{`,
		`IPAddress:` + fmt.Sprintf("%v", this.IPAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IpamDnsAddressType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IpamDnsAddressType{`,
		`TenantDNSServerAddress:` + strings.Replace(this.TenantDNSServerAddress.String(), "IpAddressesType", "IpAddressesType", 1) + `,`,
		`VirtualDNSServerName:` + fmt.Sprintf("%v", this.VirtualDNSServerName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IpamSubnetType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAllocationPools := "[]*AllocationPoolType{"
	for _, f := range this.AllocationPools {
		repeatedStringForAllocationPools += strings.Replace(f.String(), "AllocationPoolType", "AllocationPoolType", 1) + ","
	}
	repeatedStringForAllocationPools += "}"
	s := strings.Join([]string{`&IpamSubnetType{`,
		`AddrFromStart:` + fmt.Sprintf("%v", this.AddrFromStart) + `,`,
		`AllocUnit:` + fmt.Sprintf("%v", this.AllocUnit) + `,`,
		`AllocationPools:` + repeatedStringForAllocationPools + `,`,
		`Created:` + fmt.Sprintf("%v", this.Created) + `,`,
		`DefaultGateway:` + fmt.Sprintf("%v", this.DefaultGateway) + `,`,
		`DHCPOptionList:` + strings.Replace(this.DHCPOptionList.String(), "DhcpOptionsListType", "DhcpOptionsListType", 1) + `,`,
		`DHCPRelayServer:` + fmt.Sprintf("%v", this.DHCPRelayServer) + `,`,
		`DNSNameservers:` + fmt.Sprintf("%v", this.DNSNameservers) + `,`,
		`DNSServerAddress:` + fmt.Sprintf("%v", this.DNSServerAddress) + `,`,
		`EnableDHCP:` + fmt.Sprintf("%v", this.EnableDHCP) + `,`,
		`HostRoutes:` + strings.Replace(this.HostRoutes.String(), "RouteTableType", "RouteTableType", 1) + `,`,
		`LastModified:` + fmt.Sprintf("%v", this.LastModified) + `,`,
		`Subnet:` + strings.Replace(this.Subnet.String(), "SubnetType", "SubnetType", 1) + `,`,
		`SubnetName:` + fmt.Sprintf("%v", this.SubnetName) + `,`,
		`SubnetUUID:` + fmt.Sprintf("%v", this.SubnetUUID) + `,`,
		`SubscriberTag:` + fmt.Sprintf("%v", this.SubscriberTag) + `,`,
		`VlanTag:` + fmt.Sprintf("%v", this.VlanTag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *IpamSubnets) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubnets := "[]*IpamSubnetType{"
	for _, f := range this.Subnets {
		repeatedStringForSubnets += strings.Replace(f.String(), "IpamSubnetType", "IpamSubnetType", 1) + ","
	}
	repeatedStringForSubnets += "}"
	s := strings.Join([]string{`&IpamSubnets{`,
		`Subnets:` + repeatedStringForSubnets + `,`,
		`}`,
	}, "")
	return s
}
func (this *IpamType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IpamType{`,
		`CidrBlock:` + strings.Replace(this.CidrBlock.String(), "SubnetType", "SubnetType", 1) + `,`,
		`DHCPOptionList:` + strings.Replace(this.DHCPOptionList.String(), "DhcpOptionsListType", "DhcpOptionsListType", 1) + `,`,
		`HostRoutes:` + strings.Replace(this.HostRoutes.String(), "RouteTableType", "RouteTableType", 1) + `,`,
		`IpamDNSMethod:` + fmt.Sprintf("%v", this.IpamDNSMethod) + `,`,
		`IpamDNSServer:` + strings.Replace(this.IpamDNSServer.String(), "IpamDnsAddressType", "IpamDnsAddressType", 1) + `,`,
		`IpamMethod:` + fmt.Sprintf("%v", this.IpamMethod) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JunosServicePorts) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JunosServicePorts{`,
		`ServicePort:` + fmt.Sprintf("%v", this.ServicePort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeyValuePair) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KeyValuePair{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KeyValuePairs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForKeyValuePair := "[]*KeyValuePair{"
	for _, f := range this.KeyValuePair {
		repeatedStringForKeyValuePair += strings.Replace(f.String(), "KeyValuePair", "KeyValuePair", 1) + ","
	}
	repeatedStringForKeyValuePair += "}"
	s := strings.Join([]string{`&KeyValuePairs{`,
		`KeyValuePair:` + repeatedStringForKeyValuePair + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinklocalServiceEntryType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LinklocalServiceEntryType{`,
		`IPFabricDNSServiceName:` + fmt.Sprintf("%v", this.IPFabricDNSServiceName) + `,`,
		`IPFabricServiceIP:` + fmt.Sprintf("%v", this.IPFabricServiceIP) + `,`,
		`IPFabricServicePort:` + fmt.Sprintf("%v", this.IPFabricServicePort) + `,`,
		`LinklocalServiceIP:` + fmt.Sprintf("%v", this.LinklocalServiceIP) + `,`,
		`LinklocalServiceName:` + fmt.Sprintf("%v", this.LinklocalServiceName) + `,`,
		`LinklocalServicePort:` + fmt.Sprintf("%v", this.LinklocalServicePort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinklocalServicesTypes) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLinklocalServiceEntry := "[]*LinklocalServiceEntryType{"
	for _, f := range this.LinklocalServiceEntry {
		repeatedStringForLinklocalServiceEntry += strings.Replace(f.String(), "LinklocalServiceEntryType", "LinklocalServiceEntryType", 1) + ","
	}
	repeatedStringForLinklocalServiceEntry += "}"
	s := strings.Join([]string{`&LinklocalServicesTypes{`,
		`LinklocalServiceEntry:` + repeatedStringForLinklocalServiceEntry + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerHealthmonitorType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerHealthmonitorType{`,
		`AdminState:` + fmt.Sprintf("%v", this.AdminState) + `,`,
		`Delay:` + fmt.Sprintf("%v", this.Delay) + `,`,
		`ExpectedCodes:` + fmt.Sprintf("%v", this.ExpectedCodes) + `,`,
		`HTTPMethod:` + fmt.Sprintf("%v", this.HTTPMethod) + `,`,
		`MaxRetries:` + fmt.Sprintf("%v", this.MaxRetries) + `,`,
		`MonitorType:` + fmt.Sprintf("%v", this.MonitorType) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`URLPath:` + fmt.Sprintf("%v", this.URLPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerListenerType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerListenerType{`,
		`AdminState:` + fmt.Sprintf("%v", this.AdminState) + `,`,
		`ConnectionLimit:` + fmt.Sprintf("%v", this.ConnectionLimit) + `,`,
		`DefaultTLSContainer:` + fmt.Sprintf("%v", this.DefaultTLSContainer) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`ProtocolPort:` + fmt.Sprintf("%v", this.ProtocolPort) + `,`,
		`SniContainers:` + fmt.Sprintf("%v", this.SniContainers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerMemberType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerMemberType{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`AdminState:` + fmt.Sprintf("%v", this.AdminState) + `,`,
		`ProtocolPort:` + fmt.Sprintf("%v", this.ProtocolPort) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StatusDescription:` + fmt.Sprintf("%v", this.StatusDescription) + `,`,
		`SubnetID:` + fmt.Sprintf("%v", this.SubnetID) + `,`,
		`Weight:` + fmt.Sprintf("%v", this.Weight) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerPoolType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerPoolType{`,
		`AdminState:` + fmt.Sprintf("%v", this.AdminState) + `,`,
		`LoadbalancerMethod:` + fmt.Sprintf("%v", this.LoadbalancerMethod) + `,`,
		`PersistenceCookieName:` + fmt.Sprintf("%v", this.PersistenceCookieName) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`SessionPersistence:` + fmt.Sprintf("%v", this.SessionPersistence) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StatusDescription:` + fmt.Sprintf("%v", this.StatusDescription) + `,`,
		`SubnetID:` + fmt.Sprintf("%v", this.SubnetID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadbalancerType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadbalancerType{`,
		`AdminState:` + fmt.Sprintf("%v", this.AdminState) + `,`,
		`OperatingStatus:` + fmt.Sprintf("%v", this.OperatingStatus) + `,`,
		`ProvisioningStatus:` + fmt.Sprintf("%v", this.ProvisioningStatus) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`VipAddress:` + fmt.Sprintf("%v", this.VipAddress) + `,`,
		`VipSubnetID:` + fmt.Sprintf("%v", this.VipSubnetID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalLinkConnection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalLinkConnection{`,
		`PortID:` + fmt.Sprintf("%v", this.PortID) + `,`,
		`PortIndex:` + fmt.Sprintf("%v", this.PortIndex) + `,`,
		`SwitchID:` + fmt.Sprintf("%v", this.SwitchID) + `,`,
		`SwitchInfo:` + fmt.Sprintf("%v", this.SwitchInfo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LogicalRouterVirtualNetworkType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LogicalRouterVirtualNetworkType{`,
		`LogicalRouterVirtualNetworkType:` + fmt.Sprintf("%v", this.LogicalRouterVirtualNetworkType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACLimitControlType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACLimitControlType{`,
		`MacLimit:` + fmt.Sprintf("%v", this.MacLimit) + `,`,
		`MacLimitAction:` + fmt.Sprintf("%v", this.MacLimitAction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MACMoveLimitControlType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MACMoveLimitControlType{`,
		`MacMoveLimit:` + fmt.Sprintf("%v", this.MacMoveLimit) + `,`,
		`MacMoveLimitAction:` + fmt.Sprintf("%v", this.MacMoveLimitAction) + `,`,
		`MacMoveTimeWindow:` + fmt.Sprintf("%v", this.MacMoveTimeWindow) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MacAddressesType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MacAddressesType{`,
		`MacAddress:` + fmt.Sprintf("%v", this.MacAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MatchConditionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MatchConditionType{`,
		`DSTAddress:` + strings.Replace(this.DSTAddress.String(), "AddressType", "AddressType", 1) + `,`,
		`DSTPort:` + strings.Replace(this.DSTPort.String(), "PortType", "PortType", 1) + `,`,
		`Ethertype:` + fmt.Sprintf("%v", this.Ethertype) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`SRCAddress:` + strings.Replace(this.SRCAddress.String(), "AddressType", "AddressType", 1) + `,`,
		`SRCPort:` + strings.Replace(this.SRCPort.String(), "PortType", "PortType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MirrorActionType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MirrorActionType{`,
		`AnalyzerIPAddress:` + fmt.Sprintf("%v", this.AnalyzerIPAddress) + `,`,
		`AnalyzerMacAddress:` + fmt.Sprintf("%v", this.AnalyzerMacAddress) + `,`,
		`AnalyzerName:` + fmt.Sprintf("%v", this.AnalyzerName) + `,`,
		`Encapsulation:` + fmt.Sprintf("%v", this.Encapsulation) + `,`,
		`JuniperHeader:` + fmt.Sprintf("%v", this.JuniperHeader) + `,`,
		`NHMode:` + fmt.Sprintf("%v", this.NHMode) + `,`,
		`NicAssistedMirroring:` + fmt.Sprintf("%v", this.NicAssistedMirroring) + `,`,
		`NicAssistedMirroringVlan:` + fmt.Sprintf("%v", this.NicAssistedMirroringVlan) + `,`,
		`RoutingInstance:` + fmt.Sprintf("%v", this.RoutingInstance) + `,`,
		`StaticNHHeader:` + strings.Replace(this.StaticNHHeader.String(), "StaticMirrorNhType", "StaticMirrorNhType", 1) + `,`,
		`UDPPort:` + fmt.Sprintf("%v", this.UDPPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MulticastSourceGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MulticastSourceGroup{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`GroupAddress:` + fmt.Sprintf("%v", this.GroupAddress) + `,`,
		`SourceAddress:` + fmt.Sprintf("%v", this.SourceAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MulticastSourceGroups) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMulticastSourceGroup := "[]*MulticastSourceGroup{"
	for _, f := range this.MulticastSourceGroup {
		repeatedStringForMulticastSourceGroup += strings.Replace(f.String(), "MulticastSourceGroup", "MulticastSourceGroup", 1) + ","
	}
	repeatedStringForMulticastSourceGroup += "}"
	s := strings.Join([]string{`&MulticastSourceGroups{`,
		`MulticastSourceGroup:` + repeatedStringForMulticastSourceGroup + `,`,
		`}`,
	}, "")
	return s
}
func (this *NamespaceValue) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAsnRanges := "[]*AsnRangeType{"
	for _, f := range this.AsnRanges {
		repeatedStringForAsnRanges += strings.Replace(f.String(), "AsnRangeType", "AsnRangeType", 1) + ","
	}
	repeatedStringForAsnRanges += "}"
	s := strings.Join([]string{`&NamespaceValue{`,
		`Asn:` + strings.Replace(this.Asn.String(), "AutonomousSystemsType", "AutonomousSystemsType", 1) + `,`,
		`AsnRanges:` + repeatedStringForAsnRanges + `,`,
		`Ipv4Cidr:` + strings.Replace(this.Ipv4Cidr.String(), "SubnetListType", "SubnetListType", 1) + `,`,
		`MacAddr:` + strings.Replace(this.MacAddr.String(), "MacAddressesType", "MacAddressesType", 1) + `,`,
		`SerialNums:` + fmt.Sprintf("%v", this.SerialNums) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeProfileRoleType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeProfileRoleType{`,
		`PhysicalRole:` + fmt.Sprintf("%v", this.PhysicalRole) + `,`,
		`RBRoles:` + fmt.Sprintf("%v", this.RBRoles) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeProfileRolesType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoleMappings := "[]*NodeProfileRoleType{"
	for _, f := range this.RoleMappings {
		repeatedStringForRoleMappings += strings.Replace(f.String(), "NodeProfileRoleType", "NodeProfileRoleType", 1) + ","
	}
	repeatedStringForRoleMappings += "}"
	s := strings.Join([]string{`&NodeProfileRolesType{`,
		`RoleMappings:` + repeatedStringForRoleMappings + `,`,
		`}`,
	}, "")
	return s
}
func (this *PermType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PermType{`,
		`Group:` + fmt.Sprintf("%v", this.Group) + `,`,
		`GroupAccess:` + fmt.Sprintf("%v", this.GroupAccess) + `,`,
		`OtherAccess:` + fmt.Sprintf("%v", this.OtherAccess) + `,`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`OwnerAccess:` + fmt.Sprintf("%v", this.OwnerAccess) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PermType2) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForShare := "[]*ShareType{"
	for _, f := range this.Share {
		repeatedStringForShare += strings.Replace(f.String(), "ShareType", "ShareType", 1) + ","
	}
	repeatedStringForShare += "}"
	s := strings.Join([]string{`&PermType2{`,
		`GlobalAccess:` + fmt.Sprintf("%v", this.GlobalAccess) + `,`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`OwnerAccess:` + fmt.Sprintf("%v", this.OwnerAccess) + `,`,
		`Share:` + repeatedStringForShare + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlaybookInfoListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPlaybookInfo := "[]*PlaybookInfoType{"
	for _, f := range this.PlaybookInfo {
		repeatedStringForPlaybookInfo += strings.Replace(f.String(), "PlaybookInfoType", "PlaybookInfoType", 1) + ","
	}
	repeatedStringForPlaybookInfo += "}"
	s := strings.Join([]string{`&PlaybookInfoListType{`,
		`PlaybookInfo:` + repeatedStringForPlaybookInfo + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlaybookInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlaybookInfoType{`,
		`DeviceFamily:` + fmt.Sprintf("%v", this.DeviceFamily) + `,`,
		`JobCompletionWeightage:` + fmt.Sprintf("%v", this.JobCompletionWeightage) + `,`,
		`MultiDevicePlaybook:` + fmt.Sprintf("%v", this.MultiDevicePlaybook) + `,`,
		`PlaybookURI:` + fmt.Sprintf("%v", this.PlaybookURI) + `,`,
		`SequenceNo:` + fmt.Sprintf("%v", this.SequenceNo) + `,`,
		`Vendor:` + fmt.Sprintf("%v", this.Vendor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PluginProperties) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPluginProperty := "[]*PluginProperty{"
	for _, f := range this.PluginProperty {
		repeatedStringForPluginProperty += strings.Replace(f.String(), "PluginProperty", "PluginProperty", 1) + ","
	}
	repeatedStringForPluginProperty += "}"
	s := strings.Join([]string{`&PluginProperties{`,
		`PluginProperty:` + repeatedStringForPluginProperty + `,`,
		`}`,
	}, "")
	return s
}
func (this *PluginProperty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PluginProperty{`,
		`Property:` + fmt.Sprintf("%v", this.Property) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyBasedForwardingRuleType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyBasedForwardingRuleType{`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`DSTMac:` + fmt.Sprintf("%v", this.DSTMac) + `,`,
		`Ipv6ServiceChainAddress:` + fmt.Sprintf("%v", this.Ipv6ServiceChainAddress) + `,`,
		`MPLSLabel:` + fmt.Sprintf("%v", this.MPLSLabel) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`ServiceChainAddress:` + fmt.Sprintf("%v", this.ServiceChainAddress) + `,`,
		`SRCMac:` + fmt.Sprintf("%v", this.SRCMac) + `,`,
		`VlanTag:` + fmt.Sprintf("%v", this.VlanTag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyEntriesType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPolicyRule := "[]*PolicyRuleType{"
	for _, f := range this.PolicyRule {
		repeatedStringForPolicyRule += strings.Replace(f.String(), "PolicyRuleType", "PolicyRuleType", 1) + ","
	}
	repeatedStringForPolicyRule += "}"
	s := strings.Join([]string{`&PolicyEntriesType{`,
		`PolicyRule:` + repeatedStringForPolicyRule + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyRuleType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDSTAddresses := "[]*AddressType{"
	for _, f := range this.DSTAddresses {
		repeatedStringForDSTAddresses += strings.Replace(f.String(), "AddressType", "AddressType", 1) + ","
	}
	repeatedStringForDSTAddresses += "}"
	repeatedStringForDSTPorts := "[]*PortType{"
	for _, f := range this.DSTPorts {
		repeatedStringForDSTPorts += strings.Replace(f.String(), "PortType", "PortType", 1) + ","
	}
	repeatedStringForDSTPorts += "}"
	repeatedStringForSRCAddresses := "[]*AddressType{"
	for _, f := range this.SRCAddresses {
		repeatedStringForSRCAddresses += strings.Replace(f.String(), "AddressType", "AddressType", 1) + ","
	}
	repeatedStringForSRCAddresses += "}"
	repeatedStringForSRCPorts := "[]*PortType{"
	for _, f := range this.SRCPorts {
		repeatedStringForSRCPorts += strings.Replace(f.String(), "PortType", "PortType", 1) + ","
	}
	repeatedStringForSRCPorts += "}"
	s := strings.Join([]string{`&PolicyRuleType{`,
		`ActionList:` + strings.Replace(this.ActionList.String(), "ActionListType", "ActionListType", 1) + `,`,
		`Application:` + fmt.Sprintf("%v", this.Application) + `,`,
		`Created:` + fmt.Sprintf("%v", this.Created) + `,`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`DSTAddresses:` + repeatedStringForDSTAddresses + `,`,
		`DSTPorts:` + repeatedStringForDSTPorts + `,`,
		`Ethertype:` + fmt.Sprintf("%v", this.Ethertype) + `,`,
		`LastModified:` + fmt.Sprintf("%v", this.LastModified) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`RuleSequence:` + strings.Replace(this.RuleSequence.String(), "SequenceType", "SequenceType", 1) + `,`,
		`RuleUUID:` + fmt.Sprintf("%v", this.RuleUUID) + `,`,
		`SRCAddresses:` + repeatedStringForSRCAddresses + `,`,
		`SRCPorts:` + repeatedStringForSRCPorts + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyStatementType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTerm := "[]*PolicyTermType{"
	for _, f := range this.Term {
		repeatedStringForTerm += strings.Replace(f.String(), "PolicyTermType", "PolicyTermType", 1) + ","
	}
	repeatedStringForTerm += "}"
	s := strings.Join([]string{`&PolicyStatementType{`,
		`Term:` + repeatedStringForTerm + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyTermType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyTermType{`,
		`TermActionList:` + strings.Replace(this.TermActionList.String(), "TermActionListType", "TermActionListType", 1) + `,`,
		`TermMatchCondition:` + strings.Replace(this.TermMatchCondition.String(), "TermMatchConditionType", "TermMatchConditionType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortGroupProperties) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortGroupProperties{`,
		`Miimon:` + fmt.Sprintf("%v", this.Miimon) + `,`,
		`XmitHashPolicy:` + fmt.Sprintf("%v", this.XmitHashPolicy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortInfoType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortInfoType{`,
		`Channelized:` + fmt.Sprintf("%v", this.Channelized) + `,`,
		`ChannelizedPortSpeed:` + fmt.Sprintf("%v", this.ChannelizedPortSpeed) + `,`,
		`Labels:` + fmt.Sprintf("%v", this.Labels) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`PortGroup:` + fmt.Sprintf("%v", this.PortGroup) + `,`,
		`PortSpeed:` + fmt.Sprintf("%v", this.PortSpeed) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortMap) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortMap{`,
		`DSTPort:` + fmt.Sprintf("%v", this.DSTPort) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`SRCPort:` + fmt.Sprintf("%v", this.SRCPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortMappings) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPortMappings := "[]*PortMap{"
	for _, f := range this.PortMappings {
		repeatedStringForPortMappings += strings.Replace(f.String(), "PortMap", "PortMap", 1) + ","
	}
	repeatedStringForPortMappings += "}"
	s := strings.Join([]string{`&PortMappings{`,
		`PortMappings:` + repeatedStringForPortMappings + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortTranslationPool) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortTranslationPool{`,
		`PortCount:` + fmt.Sprintf("%v", this.PortCount) + `,`,
		`PortRange:` + strings.Replace(this.PortRange.String(), "PortType", "PortType", 1) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortTranslationPools) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPortTranslationPool := "[]*PortTranslationPool{"
	for _, f := range this.PortTranslationPool {
		repeatedStringForPortTranslationPool += strings.Replace(f.String(), "PortTranslationPool", "PortTranslationPool", 1) + ","
	}
	repeatedStringForPortTranslationPool += "}"
	s := strings.Join([]string{`&PortTranslationPools{`,
		`PortTranslationPool:` + repeatedStringForPortTranslationPool + `,`,
		`}`,
	}, "")
	return s
}
func (this *PortType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PortType{`,
		`EndPort:` + fmt.Sprintf("%v", this.EndPort) + `,`,
		`StartPort:` + fmt.Sprintf("%v", this.StartPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrefixMatchType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrefixMatchType{`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`PrefixType:` + fmt.Sprintf("%v", this.PrefixType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProtocolBgpType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtocolBgpType{`,
		`AutonomousSystem:` + fmt.Sprintf("%v", this.AutonomousSystem) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProtocolOspfType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtocolOspfType{`,
		`Area:` + fmt.Sprintf("%v", this.Area) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProtocolType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtocolType{`,
		`DestinationAggregatePrefixLength:` + fmt.Sprintf("%v", this.DestinationAggregatePrefixLength) + `,`,
		`DestinationPrefix:` + strings.Replace(this.DestinationPrefix.String(), "SubnetType", "SubnetType", 1) + `,`,
		`IgnoreAddress:` + fmt.Sprintf("%v", this.IgnoreAddress) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`SourceAggregatePrefixLength:` + fmt.Sprintf("%v", this.SourceAggregatePrefixLength) + `,`,
		`SourcePrefix:` + strings.Replace(this.SourcePrefix.String(), "SubnetType", "SubnetType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProviderDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProviderDetails{`,
		`PhysicalNetwork:` + fmt.Sprintf("%v", this.PhysicalNetwork) + `,`,
		`SegmentationID:` + fmt.Sprintf("%v", this.SegmentationID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QosIdForwardingClassPair) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QosIdForwardingClassPair{`,
		`ForwardingClassID:` + fmt.Sprintf("%v", this.ForwardingClassID) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QosIdForwardingClassPairs) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQosIDForwardingClassPair := "[]*QosIdForwardingClassPair{"
	for _, f := range this.QosIDForwardingClassPair {
		repeatedStringForQosIDForwardingClassPair += strings.Replace(f.String(), "QosIdForwardingClassPair", "QosIdForwardingClassPair", 1) + ","
	}
	repeatedStringForQosIDForwardingClassPair += "}"
	s := strings.Join([]string{`&QosIdForwardingClassPairs{`,
		`QosIDForwardingClassPair:` + repeatedStringForQosIDForwardingClassPair + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuotaType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuotaType{`,
		`AccessControlList:` + fmt.Sprintf("%v", this.AccessControlList) + `,`,
		`BGPRouter:` + fmt.Sprintf("%v", this.BGPRouter) + `,`,
		`Defaults:` + fmt.Sprintf("%v", this.Defaults) + `,`,
		`FirewallGroup:` + fmt.Sprintf("%v", this.FirewallGroup) + `,`,
		`FirewallPolicy:` + fmt.Sprintf("%v", this.FirewallPolicy) + `,`,
		`FirewallRule:` + fmt.Sprintf("%v", this.FirewallRule) + `,`,
		`FloatingIP:` + fmt.Sprintf("%v", this.FloatingIP) + `,`,
		`FloatingIPPool:` + fmt.Sprintf("%v", this.FloatingIPPool) + `,`,
		`GlobalVrouterConfig:` + fmt.Sprintf("%v", this.GlobalVrouterConfig) + `,`,
		`HostBasedService:` + fmt.Sprintf("%v", this.HostBasedService) + `,`,
		`InstanceIP:` + fmt.Sprintf("%v", this.InstanceIP) + `,`,
		`LoadbalancerHealthmonitor:` + fmt.Sprintf("%v", this.LoadbalancerHealthmonitor) + `,`,
		`LoadbalancerMember:` + fmt.Sprintf("%v", this.LoadbalancerMember) + `,`,
		`LoadbalancerPool:` + fmt.Sprintf("%v", this.LoadbalancerPool) + `,`,
		`LogicalRouter:` + fmt.Sprintf("%v", this.LogicalRouter) + `,`,
		`NetworkIpam:` + fmt.Sprintf("%v", this.NetworkIpam) + `,`,
		`NetworkPolicy:` + fmt.Sprintf("%v", this.NetworkPolicy) + `,`,
		`RouteTable:` + fmt.Sprintf("%v", this.RouteTable) + `,`,
		`SecurityGroup:` + fmt.Sprintf("%v", this.SecurityGroup) + `,`,
		`SecurityGroupRule:` + fmt.Sprintf("%v", this.SecurityGroupRule) + `,`,
		`SecurityLoggingObject:` + fmt.Sprintf("%v", this.SecurityLoggingObject) + `,`,
		`ServiceInstance:` + fmt.Sprintf("%v", this.ServiceInstance) + `,`,
		`ServiceTemplate:` + fmt.Sprintf("%v", this.ServiceTemplate) + `,`,
		`Subnet:` + fmt.Sprintf("%v", this.Subnet) + `,`,
		`VirtualDNS:` + fmt.Sprintf("%v", this.VirtualDNS) + `,`,
		`VirtualDNSRecord:` + fmt.Sprintf("%v", this.VirtualDNSRecord) + `,`,
		`VirtualIP:` + fmt.Sprintf("%v", this.VirtualIP) + `,`,
		`VirtualMachineInterface:` + fmt.Sprintf("%v", this.VirtualMachineInterface) + `,`,
		`VirtualNetwork:` + fmt.Sprintf("%v", this.VirtualNetwork) + `,`,
		`VirtualRouter:` + fmt.Sprintf("%v", this.VirtualRouter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RbacPermType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RbacPermType{`,
		`RoleCrud:` + fmt.Sprintf("%v", this.RoleCrud) + `,`,
		`RoleName:` + fmt.Sprintf("%v", this.RoleName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RbacRuleEntriesType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRbacRule := "[]*RbacRuleType{"
	for _, f := range this.RbacRule {
		repeatedStringForRbacRule += strings.Replace(f.String(), "RbacRuleType", "RbacRuleType", 1) + ","
	}
	repeatedStringForRbacRule += "}"
	s := strings.Join([]string{`&RbacRuleEntriesType{`,
		`RbacRule:` + repeatedStringForRbacRule + `,`,
		`}`,
	}, "")
	return s
}
func (this *RbacRuleType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRulePerms := "[]*RbacPermType{"
	for _, f := range this.RulePerms {
		repeatedStringForRulePerms += strings.Replace(f.String(), "RbacPermType", "RbacPermType", 1) + ","
	}
	repeatedStringForRulePerms += "}"
	s := strings.Join([]string{`&RbacRuleType{`,
		`RuleField:` + fmt.Sprintf("%v", this.RuleField) + `,`,
		`RuleObject:` + fmt.Sprintf("%v", this.RuleObject) + `,`,
		`RulePerms:` + repeatedStringForRulePerms + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteListType{`,
		`Route:` + fmt.Sprintf("%v", this.Route) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteOriginOverride) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteOriginOverride{`,
		`Origin:` + fmt.Sprintf("%v", this.Origin) + `,`,
		`OriginOverride:` + fmt.Sprintf("%v", this.OriginOverride) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTableType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoute := "[]*RouteType{"
	for _, f := range this.Route {
		repeatedStringForRoute += strings.Replace(f.String(), "RouteType", "RouteType", 1) + ","
	}
	repeatedStringForRoute += "}"
	s := strings.Join([]string{`&RouteTableType{`,
		`Route:` + repeatedStringForRoute + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteTargetList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteTargetList{`,
		`RouteTarget:` + fmt.Sprintf("%v", this.RouteTarget) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteType{`,
		`CommunityAttributes:` + strings.Replace(this.CommunityAttributes.String(), "CommunityAttributes", "CommunityAttributes", 1) + `,`,
		`NextHop:` + fmt.Sprintf("%v", this.NextHop) + `,`,
		`NextHopType:` + fmt.Sprintf("%v", this.NextHopType) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoutedProperties) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoutedProperties{`,
		`BFDParams:` + strings.Replace(this.BFDParams.String(), "BfdParameters", "BfdParameters", 1) + `,`,
		`BGPParams:` + strings.Replace(this.BGPParams.String(), "BgpParameters", "BgpParameters", 1) + `,`,
		`PhysicalRouterUUID:` + fmt.Sprintf("%v", this.PhysicalRouterUUID) + `,`,
		`RoutedInterfaceIPAddress:` + fmt.Sprintf("%v", this.RoutedInterfaceIPAddress) + `,`,
		`RoutingPolicyParams:` + strings.Replace(this.RoutingPolicyParams.String(), "RoutingPolicyParameters", "RoutingPolicyParameters", 1) + `,`,
		`RoutingProtocol:` + fmt.Sprintf("%v", this.RoutingProtocol) + `,`,
		`StaticRouteParams:` + strings.Replace(this.StaticRouteParams.String(), "StaticRouteParameters", "StaticRouteParameters", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoutingBridgingRolesType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoutingBridgingRolesType{`,
		`RBRoles:` + fmt.Sprintf("%v", this.RBRoles) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoutingPolicyParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoutingPolicyParameters{`,
		`ExportRoutingPolicyUUID:` + fmt.Sprintf("%v", this.ExportRoutingPolicyUUID) + `,`,
		`ImportRoutingPolicyUUID:` + fmt.Sprintf("%v", this.ImportRoutingPolicyUUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoutingPolicyServiceInstanceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoutingPolicyServiceInstanceType{`,
		`LeftSequence:` + fmt.Sprintf("%v", this.LeftSequence) + `,`,
		`RightSequence:` + fmt.Sprintf("%v", this.RightSequence) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RoutingPolicyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RoutingPolicyType{`,
		`Sequence:` + fmt.Sprintf("%v", this.Sequence) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SNMPCredentials) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SNMPCredentials{`,
		`LocalPort:` + fmt.Sprintf("%v", this.LocalPort) + `,`,
		`Retries:` + fmt.Sprintf("%v", this.Retries) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`V2Community:` + fmt.Sprintf("%v", this.V2Community) + `,`,
		`V3AuthenticationPassword:` + fmt.Sprintf("%v", this.V3AuthenticationPassword) + `,`,
		`V3AuthenticationProtocol:` + fmt.Sprintf("%v", this.V3AuthenticationProtocol) + `,`,
		`V3Context:` + fmt.Sprintf("%v", this.V3Context) + `,`,
		`V3ContextEngineID:` + fmt.Sprintf("%v", this.V3ContextEngineID) + `,`,
		`V3EngineBoots:` + fmt.Sprintf("%v", this.V3EngineBoots) + `,`,
		`V3EngineID:` + fmt.Sprintf("%v", this.V3EngineID) + `,`,
		`V3EngineTime:` + fmt.Sprintf("%v", this.V3EngineTime) + `,`,
		`V3PrivacyPassword:` + fmt.Sprintf("%v", this.V3PrivacyPassword) + `,`,
		`V3PrivacyProtocol:` + fmt.Sprintf("%v", this.V3PrivacyProtocol) + `,`,
		`V3SecurityEngineID:` + fmt.Sprintf("%v", this.V3SecurityEngineID) + `,`,
		`V3SecurityLevel:` + fmt.Sprintf("%v", this.V3SecurityLevel) + `,`,
		`V3SecurityName:` + fmt.Sprintf("%v", this.V3SecurityName) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityLoggingObjectRuleEntryType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityLoggingObjectRuleEntryType{`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`RuleUUID:` + fmt.Sprintf("%v", this.RuleUUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityLoggingObjectRuleListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRule := "[]*SecurityLoggingObjectRuleEntryType{"
	for _, f := range this.Rule {
		repeatedStringForRule += strings.Replace(f.String(), "SecurityLoggingObjectRuleEntryType", "SecurityLoggingObjectRuleEntryType", 1) + ","
	}
	repeatedStringForRule += "}"
	s := strings.Join([]string{`&SecurityLoggingObjectRuleListType{`,
		`Rule:` + repeatedStringForRule + `,`,
		`}`,
	}, "")
	return s
}
func (this *SequenceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SequenceType{`,
		`Major:` + fmt.Sprintf("%v", this.Major) + `,`,
		`Minor:` + fmt.Sprintf("%v", this.Minor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SerialNumListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SerialNumListType{`,
		`SerialNum:` + fmt.Sprintf("%v", this.SerialNum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceApplianceInterfaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceApplianceInterfaceType{`,
		`InterfaceType:` + fmt.Sprintf("%v", this.InterfaceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceChainInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceChainInfo{`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`RoutingInstance:` + fmt.Sprintf("%v", this.RoutingInstance) + `,`,
		`SCHead:` + fmt.Sprintf("%v", this.SCHead) + `,`,
		`ServiceChainAddress:` + fmt.Sprintf("%v", this.ServiceChainAddress) + `,`,
		`ServiceChainID:` + fmt.Sprintf("%v", this.ServiceChainID) + `,`,
		`ServiceInstance:` + fmt.Sprintf("%v", this.ServiceInstance) + `,`,
		`SourceRoutingInstance:` + fmt.Sprintf("%v", this.SourceRoutingInstance) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceHealthCheckType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceHealthCheckType{`,
		`Delay:` + fmt.Sprintf("%v", this.Delay) + `,`,
		`DelayUsecs:` + fmt.Sprintf("%v", this.DelayUsecs) + `,`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`ExpectedCodes:` + fmt.Sprintf("%v", this.ExpectedCodes) + `,`,
		`HealthCheckType:` + fmt.Sprintf("%v", this.HealthCheckType) + `,`,
		`HTTPMethod:` + fmt.Sprintf("%v", this.HTTPMethod) + `,`,
		`MaxRetries:` + fmt.Sprintf("%v", this.MaxRetries) + `,`,
		`MonitorType:` + fmt.Sprintf("%v", this.MonitorType) + `,`,
		`Timeout:` + fmt.Sprintf("%v", this.Timeout) + `,`,
		`TimeoutUsecs:` + fmt.Sprintf("%v", this.TimeoutUsecs) + `,`,
		`URLPath:` + fmt.Sprintf("%v", this.URLPath) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceInstanceInterfaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceInstanceInterfaceType{`,
		`AllowedAddressPairs:` + strings.Replace(this.AllowedAddressPairs.String(), "AllowedAddressPairs", "AllowedAddressPairs", 1) + `,`,
		`IPAddress:` + fmt.Sprintf("%v", this.IPAddress) + `,`,
		`StaticRoutes:` + strings.Replace(this.StaticRoutes.String(), "RouteTableType", "RouteTableType", 1) + `,`,
		`VirtualNetwork:` + fmt.Sprintf("%v", this.VirtualNetwork) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceInstanceType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInterfaceList := "[]*ServiceInstanceInterfaceType{"
	for _, f := range this.InterfaceList {
		repeatedStringForInterfaceList += strings.Replace(f.String(), "ServiceInstanceInterfaceType", "ServiceInstanceInterfaceType", 1) + ","
	}
	repeatedStringForInterfaceList += "}"
	s := strings.Join([]string{`&ServiceInstanceType{`,
		`AutoPolicy:` + fmt.Sprintf("%v", this.AutoPolicy) + `,`,
		`AvailabilityZone:` + fmt.Sprintf("%v", this.AvailabilityZone) + `,`,
		`HaMode:` + fmt.Sprintf("%v", this.HaMode) + `,`,
		`InterfaceList:` + repeatedStringForInterfaceList + `,`,
		`LeftIPAddress:` + fmt.Sprintf("%v", this.LeftIPAddress) + `,`,
		`LeftVirtualNetwork:` + fmt.Sprintf("%v", this.LeftVirtualNetwork) + `,`,
		`ManagementVirtualNetwork:` + fmt.Sprintf("%v", this.ManagementVirtualNetwork) + `,`,
		`RightIPAddress:` + fmt.Sprintf("%v", this.RightIPAddress) + `,`,
		`RightVirtualNetwork:` + fmt.Sprintf("%v", this.RightVirtualNetwork) + `,`,
		`ScaleOut:` + strings.Replace(this.ScaleOut.String(), "ServiceScaleOutType", "ServiceScaleOutType", 1) + `,`,
		`ServiceVirtualizationType:` + fmt.Sprintf("%v", this.ServiceVirtualizationType) + `,`,
		`VirtualRouterID:` + fmt.Sprintf("%v", this.VirtualRouterID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceInterfaceTag) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceInterfaceTag{`,
		`InterfaceType:` + fmt.Sprintf("%v", this.InterfaceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceScaleOutType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceScaleOutType{`,
		`AutoScale:` + fmt.Sprintf("%v", this.AutoScale) + `,`,
		`MaxInstances:` + fmt.Sprintf("%v", this.MaxInstances) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceTemplateInterfaceType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceTemplateInterfaceType{`,
		`ServiceInterfaceType:` + fmt.Sprintf("%v", this.ServiceInterfaceType) + `,`,
		`SharedIP:` + fmt.Sprintf("%v", this.SharedIP) + `,`,
		`StaticRouteEnable:` + fmt.Sprintf("%v", this.StaticRouteEnable) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceTemplateType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForInterfaceType := "[]*ServiceTemplateInterfaceType{"
	for _, f := range this.InterfaceType {
		repeatedStringForInterfaceType += strings.Replace(f.String(), "ServiceTemplateInterfaceType", "ServiceTemplateInterfaceType", 1) + ","
	}
	repeatedStringForInterfaceType += "}"
	s := strings.Join([]string{`&ServiceTemplateType{`,
		`AvailabilityZoneEnable:` + fmt.Sprintf("%v", this.AvailabilityZoneEnable) + `,`,
		`Flavor:` + fmt.Sprintf("%v", this.Flavor) + `,`,
		`ImageName:` + fmt.Sprintf("%v", this.ImageName) + `,`,
		`InstanceData:` + fmt.Sprintf("%v", this.InstanceData) + `,`,
		`InterfaceType:` + repeatedStringForInterfaceType + `,`,
		`OrderedInterfaces:` + fmt.Sprintf("%v", this.OrderedInterfaces) + `,`,
		`ServiceMode:` + fmt.Sprintf("%v", this.ServiceMode) + `,`,
		`ServiceScaling:` + fmt.Sprintf("%v", this.ServiceScaling) + `,`,
		`ServiceType:` + fmt.Sprintf("%v", this.ServiceType) + `,`,
		`ServiceVirtualizationType:` + fmt.Sprintf("%v", this.ServiceVirtualizationType) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`VrouterInstanceType:` + fmt.Sprintf("%v", this.VrouterInstanceType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceVirtualNetworkType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceVirtualNetworkType{`,
		`VirtualNetworkType:` + fmt.Sprintf("%v", this.VirtualNetworkType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SflowParameters) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEnabledInterfaceParams := "[]*EnabledInterfaceParams{"
	for _, f := range this.EnabledInterfaceParams {
		repeatedStringForEnabledInterfaceParams += strings.Replace(f.String(), "EnabledInterfaceParams", "EnabledInterfaceParams", 1) + ","
	}
	repeatedStringForEnabledInterfaceParams += "}"
	s := strings.Join([]string{`&SflowParameters{`,
		`AdaptiveSampleRate:` + fmt.Sprintf("%v", this.AdaptiveSampleRate) + `,`,
		`AgentID:` + fmt.Sprintf("%v", this.AgentID) + `,`,
		`EnabledInterfaceParams:` + repeatedStringForEnabledInterfaceParams + `,`,
		`EnabledInterfaceType:` + fmt.Sprintf("%v", this.EnabledInterfaceType) + `,`,
		`StatsCollectionFrequency:` + strings.Replace(this.StatsCollectionFrequency.String(), "StatsCollectionFrequency", "StatsCollectionFrequency", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShareType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShareType{`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`TenantAccess:` + fmt.Sprintf("%v", this.TenantAccess) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SloRateType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SloRateType{`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticMirrorNhType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StaticMirrorNhType{`,
		`Vni:` + fmt.Sprintf("%v", this.Vni) + `,`,
		`VtepDSTIPAddress:` + fmt.Sprintf("%v", this.VtepDSTIPAddress) + `,`,
		`VtepDSTMacAddress:` + fmt.Sprintf("%v", this.VtepDSTMacAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRouteEntriesType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoute := "[]*StaticRouteType{"
	for _, f := range this.Route {
		repeatedStringForRoute += strings.Replace(f.String(), "StaticRouteType", "StaticRouteType", 1) + ","
	}
	repeatedStringForRoute += "}"
	s := strings.Join([]string{`&StaticRouteEntriesType{`,
		`Route:` + repeatedStringForRoute + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRouteParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StaticRouteParameters{`,
		`InterfaceRouteTableUUID:` + fmt.Sprintf("%v", this.InterfaceRouteTableUUID) + `,`,
		`NextHopIPAddress:` + fmt.Sprintf("%v", this.NextHopIPAddress) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StaticRouteType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StaticRouteType{`,
		`Community:` + fmt.Sprintf("%v", this.Community) + `,`,
		`NextHop:` + fmt.Sprintf("%v", this.NextHop) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`RouteTarget:` + fmt.Sprintf("%v", this.RouteTarget) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatsCollectionFrequency) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatsCollectionFrequency{`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`PollingInterval:` + fmt.Sprintf("%v", this.PollingInterval) + `,`,
		`SampleRate:` + fmt.Sprintf("%v", this.SampleRate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StormControlParameters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StormControlParameters{`,
		`BandwidthPercent:` + fmt.Sprintf("%v", this.BandwidthPercent) + `,`,
		`NoBroadcast:` + fmt.Sprintf("%v", this.NoBroadcast) + `,`,
		`NoMulticast:` + fmt.Sprintf("%v", this.NoMulticast) + `,`,
		`NoRegisteredMulticast:` + fmt.Sprintf("%v", this.NoRegisteredMulticast) + `,`,
		`NoUnknownUnicast:` + fmt.Sprintf("%v", this.NoUnknownUnicast) + `,`,
		`NoUnregisteredMulticast:` + fmt.Sprintf("%v", this.NoUnregisteredMulticast) + `,`,
		`RecoveryTimeout:` + fmt.Sprintf("%v", this.RecoveryTimeout) + `,`,
		`StormControlActions:` + fmt.Sprintf("%v", this.StormControlActions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructuredSyslogLinkType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StructuredSyslogLinkType{`,
		`Overlay:` + fmt.Sprintf("%v", this.Overlay) + `,`,
		`Underlay:` + fmt.Sprintf("%v", this.Underlay) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StructuredSyslogLinkmap) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLinks := "[]*StructuredSyslogLinkType{"
	for _, f := range this.Links {
		repeatedStringForLinks += strings.Replace(f.String(), "StructuredSyslogLinkType", "StructuredSyslogLinkType", 1) + ","
	}
	repeatedStringForLinks += "}"
	s := strings.Join([]string{`&StructuredSyslogLinkmap{`,
		`Links:` + repeatedStringForLinks + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubnetListType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubnet := "[]*SubnetType{"
	for _, f := range this.Subnet {
		repeatedStringForSubnet += strings.Replace(f.String(), "SubnetType", "SubnetType", 1) + ","
	}
	repeatedStringForSubnet += "}"
	s := strings.Join([]string{`&SubnetListType{`,
		`Subnet:` + repeatedStringForSubnet + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubnetType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubnetType{`,
		`IPPrefix:` + fmt.Sprintf("%v", this.IPPrefix) + `,`,
		`IPPrefixLen:` + fmt.Sprintf("%v", this.IPPrefixLen) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TelemetryResourceInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TelemetryResourceInfo{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TelemetryStateInfo) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForResource := "[]*TelemetryResourceInfo{"
	for _, f := range this.Resource {
		repeatedStringForResource += strings.Replace(f.String(), "TelemetryResourceInfo", "TelemetryResourceInfo", 1) + ","
	}
	repeatedStringForResource += "}"
	s := strings.Join([]string{`&TelemetryStateInfo{`,
		`Resource:` + repeatedStringForResource + `,`,
		`ServerIP:` + fmt.Sprintf("%v", this.ServerIP) + `,`,
		`ServerPort:` + fmt.Sprintf("%v", this.ServerPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TermActionListType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TermActionListType{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`Update:` + strings.Replace(this.Update.String(), "ActionUpdateType", "ActionUpdateType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TermMatchConditionType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPrefix := "[]*PrefixMatchType{"
	for _, f := range this.Prefix {
		repeatedStringForPrefix += strings.Replace(f.String(), "PrefixMatchType", "PrefixMatchType", 1) + ","
	}
	repeatedStringForPrefix += "}"
	s := strings.Join([]string{`&TermMatchConditionType{`,
		`Community:` + fmt.Sprintf("%v", this.Community) + `,`,
		`CommunityList:` + fmt.Sprintf("%v", this.CommunityList) + `,`,
		`CommunityMatchAll:` + fmt.Sprintf("%v", this.CommunityMatchAll) + `,`,
		`ExtcommunityList:` + fmt.Sprintf("%v", this.ExtcommunityList) + `,`,
		`ExtcommunityMatchAll:` + fmt.Sprintf("%v", this.ExtcommunityMatchAll) + `,`,
		`Prefix:` + repeatedStringForPrefix + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimerType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimerType{`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`OffInterval:` + fmt.Sprintf("%v", this.OffInterval) + `,`,
		`OnInterval:` + fmt.Sprintf("%v", this.OnInterval) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserCredentials) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserCredentials{`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserDefinedLogStat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserDefinedLogStat{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Pattern:` + fmt.Sprintf("%v", this.Pattern) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserDefinedLogStatList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatlist := "[]*UserDefinedLogStat{"
	for _, f := range this.Statlist {
		repeatedStringForStatlist += strings.Replace(f.String(), "UserDefinedLogStat", "UserDefinedLogStat", 1) + ","
	}
	repeatedStringForStatlist += "}"
	s := strings.Join([]string{`&UserDefinedLogStatList{`,
		`Statlist:` + repeatedStringForStatlist + `,`,
		`}`,
	}, "")
	return s
}
func (this *UuidType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UuidType{`,
		`UUIDLslong:` + fmt.Sprintf("%v", this.UUIDLslong) + `,`,
		`UUIDMslong:` + fmt.Sprintf("%v", this.UUIDMslong) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UveKeysType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UveKeysType{`,
		`UveKey:` + fmt.Sprintf("%v", this.UveKey) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VendorHardwaresType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VendorHardwaresType{`,
		`VendorHardware:` + fmt.Sprintf("%v", this.VendorHardware) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualDnsRecordType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualDnsRecordType{`,
		`RecordClass:` + fmt.Sprintf("%v", this.RecordClass) + `,`,
		`RecordData:` + fmt.Sprintf("%v", this.RecordData) + `,`,
		`RecordMXPreference:` + fmt.Sprintf("%v", this.RecordMXPreference) + `,`,
		`RecordName:` + fmt.Sprintf("%v", this.RecordName) + `,`,
		`RecordSourceName:` + fmt.Sprintf("%v", this.RecordSourceName) + `,`,
		`RecordTTLSeconds:` + fmt.Sprintf("%v", this.RecordTTLSeconds) + `,`,
		`RecordType:` + fmt.Sprintf("%v", this.RecordType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualDnsType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualDnsType{`,
		`DefaultTTLSeconds:` + fmt.Sprintf("%v", this.DefaultTTLSeconds) + `,`,
		`DomainName:` + fmt.Sprintf("%v", this.DomainName) + `,`,
		`DynamicRecordsFromClient:` + fmt.Sprintf("%v", this.DynamicRecordsFromClient) + `,`,
		`ExternalVisible:` + fmt.Sprintf("%v", this.ExternalVisible) + `,`,
		`FloatingIPRecord:` + fmt.Sprintf("%v", this.FloatingIPRecord) + `,`,
		`NextVirtualDNS:` + fmt.Sprintf("%v", this.NextVirtualDNS) + `,`,
		`RecordOrder:` + fmt.Sprintf("%v", this.RecordOrder) + `,`,
		`ReverseResolution:` + fmt.Sprintf("%v", this.ReverseResolution) + `,`,
		`SoaRecord:` + strings.Replace(this.SoaRecord.String(), "DnsSoaRecordType", "DnsSoaRecordType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualIpType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualIpType{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`AdminState:` + fmt.Sprintf("%v", this.AdminState) + `,`,
		`ConnectionLimit:` + fmt.Sprintf("%v", this.ConnectionLimit) + `,`,
		`PersistenceCookieName:` + fmt.Sprintf("%v", this.PersistenceCookieName) + `,`,
		`PersistenceType:` + fmt.Sprintf("%v", this.PersistenceType) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`ProtocolPort:` + fmt.Sprintf("%v", this.ProtocolPort) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StatusDescription:` + fmt.Sprintf("%v", this.StatusDescription) + `,`,
		`SubnetID:` + fmt.Sprintf("%v", this.SubnetID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualMachineInterfacePropertiesType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualMachineInterfacePropertiesType{`,
		`InterfaceMirror:` + strings.Replace(this.InterfaceMirror.String(), "InterfaceMirrorType", "InterfaceMirrorType", 1) + `,`,
		`LocalPreference:` + fmt.Sprintf("%v", this.LocalPreference) + `,`,
		`MaxFlows:` + fmt.Sprintf("%v", this.MaxFlows) + `,`,
		`ServiceInterfaceType:` + fmt.Sprintf("%v", this.ServiceInterfaceType) + `,`,
		`SubInterfaceVlanTag:` + fmt.Sprintf("%v", this.SubInterfaceVlanTag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkPolicyType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkPolicyType{`,
		`Sequence:` + strings.Replace(this.Sequence.String(), "SequenceType", "SequenceType", 1) + `,`,
		`Timer:` + strings.Replace(this.Timer.String(), "TimerType", "TimerType", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkRoutedPropertiesType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForRoutedProperties := "[]*RoutedProperties{"
	for _, f := range this.RoutedProperties {
		repeatedStringForRoutedProperties += strings.Replace(f.String(), "RoutedProperties", "RoutedProperties", 1) + ","
	}
	repeatedStringForRoutedProperties += "}"
	s := strings.Join([]string{`&VirtualNetworkRoutedPropertiesType{`,
		`RoutedProperties:` + repeatedStringForRoutedProperties + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualNetworkType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VirtualNetworkType{`,
		`AllowTransit:` + fmt.Sprintf("%v", this.AllowTransit) + `,`,
		`ForwardingMode:` + fmt.Sprintf("%v", this.ForwardingMode) + `,`,
		`MaxFlows:` + fmt.Sprintf("%v", this.MaxFlows) + `,`,
		`MirrorDestination:` + fmt.Sprintf("%v", this.MirrorDestination) + `,`,
		`NetworkID:` + fmt.Sprintf("%v", this.NetworkID) + `,`,
		`RPF:` + fmt.Sprintf("%v", this.RPF) + `,`,
		`VxlanNetworkIdentifier:` + fmt.Sprintf("%v", this.VxlanNetworkIdentifier) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VirtualRouterNetworkIpamType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAllocationPools := "[]*AllocationPoolType{"
	for _, f := range this.AllocationPools {
		repeatedStringForAllocationPools += strings.Replace(f.String(), "AllocationPoolType", "AllocationPoolType", 1) + ","
	}
	repeatedStringForAllocationPools += "}"
	repeatedStringForSubnet := "[]*SubnetType{"
	for _, f := range this.Subnet {
		repeatedStringForSubnet += strings.Replace(f.String(), "SubnetType", "SubnetType", 1) + ","
	}
	repeatedStringForSubnet += "}"
	s := strings.Join([]string{`&VirtualRouterNetworkIpamType{`,
		`AllocationPools:` + repeatedStringForAllocationPools + `,`,
		`Subnet:` + repeatedStringForSubnet + `,`,
		`}`,
	}, "")
	return s
}
func (this *VnSubnetsType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIpamSubnets := "[]*IpamSubnetType{"
	for _, f := range this.IpamSubnets {
		repeatedStringForIpamSubnets += strings.Replace(f.String(), "IpamSubnetType", "IpamSubnetType", 1) + ","
	}
	repeatedStringForIpamSubnets += "}"
	s := strings.Join([]string{`&VnSubnetsType{`,
		`HostRoutes:` + strings.Replace(this.HostRoutes.String(), "RouteTableType", "RouteTableType", 1) + `,`,
		`IpamSubnets:` + repeatedStringForIpamSubnets + `,`,
		`}`,
	}, "")
	return s
}
func (this *VpgInterfaceParametersType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VpgInterfaceParametersType{`,
		`AeNum:` + fmt.Sprintf("%v", this.AeNum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VrfAssignRuleType) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VrfAssignRuleType{`,
		`IgnoreACL:` + fmt.Sprintf("%v", this.IgnoreACL) + `,`,
		`MatchCondition:` + strings.Replace(this.MatchCondition.String(), "MatchConditionType", "MatchConditionType", 1) + `,`,
		`RoutingInstance:` + fmt.Sprintf("%v", this.RoutingInstance) + `,`,
		`VlanTag:` + fmt.Sprintf("%v", this.VlanTag) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VrfAssignTableType) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForVRFAssignRule := "[]*VrfAssignRuleType{"
	for _, f := range this.VRFAssignRule {
		repeatedStringForVRFAssignRule += strings.Replace(f.String(), "VrfAssignRuleType", "VrfAssignRuleType", 1) + ","
	}
	repeatedStringForVRFAssignRule += "}"
	s := strings.Join([]string{`&VrfAssignTableType{`,
		`VRFAssignRule:` + repeatedStringForVRFAssignRule + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenModel(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
